[
  {
    "dataset_name": "code_contests_qwen25coder32b",
    "dataset_row_id": 0.0,
    "solution": "from typing import List, Tuple\n\ndef solve_problem(input_str: str) -> str:\n    def distance(p1: Tuple[int, int], p2: Tuple[int, int]) -> int:\n        return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n\n    def can_communicate(d: int, r: int) -> bool:\n        return d <= r * r\n\n    lines = input_str.strip().split('\\n')\n    t = int(lines[0])\n    results = []\n\n    index = 1\n    for _ in range(t):\n        r = int(lines[index])\n        chef = tuple(map(int, lines[index + 1].split()))\n        head_server = tuple(map(int, lines[index + 2].split()))\n        sous_chef = tuple(map(int, lines[index + 3].split()))\n        index += 4\n\n        d_chef_head_server = distance(chef, head_server)\n        d_chef_sous_chef = distance(chef, sous_chef)\n        d_head_server_sous_chef = distance(head_server, sous_chef)\n\n        if (can_communicate(d_chef_head_server, r) or\n            can_communicate(d_chef_sous_chef, r) or\n            can_communicate(d_head_server_sous_chef, r)):\n            results.append(\"yes\")\n        else:\n            results.append(\"no\")\n\n    return \"\\n\".join(results)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nThe Chef likes to stay in touch with his staff. So, the Chef, the head server, and the sous-chef all carry two-way transceivers so they can stay in constant contact. Of course, these transceivers have a limited range so if two are too far apart, they cannot communicate directly.\n\n\nThe Chef invested in top-of-the-line transceivers which have a few advanced features. One is that even if two people cannot talk directly because they are out of range, if there is another transceiver that is close enough to both, then the two transceivers can still communicate with each other using the third transceiver as an intermediate device.\n\n\nThere has been a minor emergency in the Chef's restaurant\nand he needs to communicate with both the head server and the sous-chef right away. Help the Chef determine if it is possible for all three people to communicate with each other, even if two must communicate through the third because they are too far apart.\n\n\nInput\n\nThe first line contains a single positive integer T \u2264 100 indicating the number of test cases to follow. The first line of each test case contains a positive integer R \u2264 1,000 indicating that two transceivers can communicate directly without an intermediate transceiver if they are at most R meters away from each other. The remaining three lines of the test case describe the current locations of the Chef, the head server, and the sous-chef, respectively. Each such line contains two integers X,Y (at most 10,000 in absolute value) indicating that the respective person is located at position X,Y.\n\n\nOutput\n\nFor each test case you are to output a single line containing a single string. If it is possible for all three to communicate then you should output \"yes\". Otherwise, you should output \"no\".\n\n\nTo be clear, we say that two transceivers are close enough to communicate directly if the length of the straight line connecting their X,Y coordinates is at most R.\n\n\nExample\n\nInput:\n3\n1\n0 1\n0 0\n1 0\n2\n0 1\n0 0\n1 0\n2\n0 0\n0 2\n2 1\n\n\nOutput:\nyes\nyes\nno\n\n### Signature\ndef solve_problem(input_str: str) -> str:",
    "timestamp": "2025-08-10T15:29:43.675025",
    "response_time": "7.37",
    "context": "{\"function_name\": \"solve_problem\", \"difficulty\": 1, \"difficulty_label\": \"EASY\"}"
  },
  {
    "dataset_name": "code_contests_qwen25coder32b",
    "dataset_row_id": 1.0,
    "solution": "from typing import List\n\ndef solve_problem(input_str: str) -> str:\n    def gcd(a: int, b: str) -> str:\n        if b == '0':\n            return str(a)\n        else:\n            return gcd(int(b), str(a % int(b)))\n\n    lines = input_str.strip().split('\\n')\n    num_cases = int(lines[0])\n    results = []\n\n    for i in range(1, num_cases + 1):\n        a, b = lines[i].split()\n        a = int(a)\n        results.append(gcd(a, b))\n\n    return '\\n'.join(results)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nFrank explained its friend Felman the algorithm of Euclides to calculate the GCD \nof two numbers. Then Felman implements it algorithm \n\n\nint gcd(int a, int b)\n{\n\tif (b==0)\n\t\treturn a;\n\telse\n\t\treturn gcd(b,a%b);\n}\n\nand it proposes to Frank that makes it \nbut with a little integer and another integer that has up to 250 digits. \nYour task is to help Frank programming an efficient code for the challenge of Felman.\n\n\n\nInput\nThe first line of the input file contains a number representing the number of lines to follow.\nEach line consists of two number A and B (0 \u2264 A \u2264 40000 and A \u2264 B < 10^250).\n\n\nOutput\nPrint for each pair (A,B) in the input one integer representing the GCD of A and B.\n\n\n\nExample\n\nInput:\n2\n2 6\n10 11\n\n\nOutput:\n2\n1\n\n### Signature\ndef solve_problem(input_str: str) -> str:",
    "timestamp": "2025-08-10T15:29:47.381165",
    "response_time": "3.71",
    "context": "{\"function_name\": \"solve_problem\", \"difficulty\": 2, \"difficulty_label\": \"MEDIUM\"}"
  },
  {
    "dataset_name": "code_contests_qwen25coder32b",
    "dataset_row_id": 2.0,
    "solution": "from typing import List\n\ndef solve_problem(input_str: str) -> str:\n    def count_balanced_substrings(s: str) -> int:\n        n = len(s)\n        prefix_balance = [0] * (n + 1)\n        balance_count = {0: 1}\n        balanced_pairs = 0\n        \n        for i in range(1, n + 1):\n            if s[i - 1] == '4':\n                prefix_balance[i] = prefix_balance[i - 1] + 1\n            else:\n                prefix_balance[i] = prefix_balance[i - 1] - 1\n            \n            if prefix_balance[i] in balance_count:\n                balanced_pairs += balance_count[prefix_balance[i]]\n            \n            if prefix_balance[i] - 1 in balance_count:\n                balance_count[prefix_balance[i] - 1] += 1\n            else:\n                balance_count[prefix_balance[i] - 1] = 1\n        \n        return balanced_pairs\n    \n    test_cases = int(input_str[0])\n    index = 1\n    results = []\n    \n    for _ in range(test_cases):\n        while index < len(input_str) and input_str[index] in ['4', '7']:\n            index += 1\n        s = input_str[1:index]\n        results.append(str(count_balanced_substrings(s)))\n        index += 1\n    \n    return '\\n'.join(results)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nA Little Elephant from the Zoo of Lviv likes lucky strings, i.e., the strings that consist only of the lucky digits 4 and 7.\nThe Little Elephant calls some string T of the length M balanced if there exists at least one integer X (1 \u2264 X \u2264 M) such that the number of digits 4 in the substring T[1, X - 1] is equal to the number of digits 7 in the substring T[X, M]. For example, the string S = 7477447 is balanced since S[1, 4] = 7477 has 1 digit 4 and S[5, 7] = 447 has 1 digit 7. On the other hand, one can verify that the string S = 7 is not balanced.\n The Little Elephant has the string S of the length N. He wants to know the number of such pairs of integers (L; R) that 1 \u2264 L \u2264 R \u2264 N and the substring S[L, R]  is balanced. Help him to find this number.\nNotes.\n\nLet S be some lucky string. Then\n\n\n|S| denotes the length of the string S;\n\nS[i] (1 \u2264 i \u2264 |S|) denotes the i^th character of S (the numeration of characters starts from 1);\n\n S[L, R] (1 \u2264 L \u2264 R \u2264 |S|) denotes the string with the following sequence of characters: S[L], S[L + 1], ..., S[R], and is called a substring of S. For L > R we mean by S[L, R] an empty string.\n\n\n\nInput\nThe first line of the input file contains a single integer T, the number of test cases. Each of the following T lines contains one string, the string S for the corresponding test case. The input file does not contain any whitespaces.\n\nOutput\nFor each test case output a single line containing the answer for this test case.\n\n\nConstraints\n 1 \u2264 T \u2264 10\n 1 \u2264 |S| \u2264 100000\n S consists only of the lucky digits 4 and 7.\n\n\n\nExample\n\nInput:\n4\n47\n74\n477\n4747477\n\nOutput:\n2\n2\n3\n23\n\n\n\nExplanation\nIn the first test case balance substrings are S[1, 1] = 4 and S[1, 2] = 47.\nIn the second test case balance substrings are S[2, 2] = 4 and S[1, 2] = 74.\nUnfortunately, we can't provide you with the explanations of the third and the fourth test cases. You should figure it out by yourself. Please, don't ask about this in comments.\n\n### Signature\ndef solve_problem(input_str: str) -> str:",
    "timestamp": "2025-08-10T15:29:53.495582",
    "response_time": "6.11",
    "context": "{\"function_name\": \"solve_problem\", \"difficulty\": 2, \"difficulty_label\": \"MEDIUM\"}"
  },
  {
    "dataset_name": "code_contests_qwen25coder32b",
    "dataset_row_id": 3.0,
    "solution": "from typing import List\n\ndef solve_problem(input_str: str) -> str:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    \n    def can_be_palindrome_by_deleting_one_char(s: str) -> bool:\n        for i in range(len(s)):\n            if is_palindrome(s[:i] + s[i+1:]):\n                return True\n        return False\n    \n    # Split the input string into lines\n    lines = input_str.split('\\n')\n    # The first line is the number of test cases\n    T = int(lines[0])\n    results = []\n    \n    for i in range(1, T + 1):\n        s = lines[i]\n        if can_be_palindrome_by_deleting_one_char(s):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return \"\\n\".join(results)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nGiven a string s. Can you make it a palindrome by deleting exactly one character? Note that size of the string after deletion would be one less than it was before. \n\nInput\nFirst line of the input contains a single integer T denoting number of test cases.\nFor each test case, you are given a single line containing string  s. \n\nOutput\nFor each test case, print YES or NO depending on the answer of the problem. \n\nConstraints\n\n Example\nInput:\n4\naaa\nabc\nabdbca\nabba\n\nOutput:\nYES\nNO\nYES\nYES\n\nExplanation\nExample case 1. Delete any one 'a', resulting string is \"aa\" which is a palindrome.\nExample case 2. It is not possible to delete exactly one character and having a palindrome.\nExample case 3. Delete 'c', resulting string is \"abdba\" which is a palindrome. \nExample case 4. Delete 'b', resulting string is \"aba\" which is a palindrome.\n\n### Signature\ndef solve_problem(input_str: str) -> str:",
    "timestamp": "2025-08-10T15:29:57.301310",
    "response_time": "3.80",
    "context": "{\"function_name\": \"solve_problem\", \"difficulty\": 2, \"difficulty_label\": \"MEDIUM\"}"
  },
  {
    "dataset_name": "code_contests_qwen25coder32b",
    "dataset_row_id": 4.0,
    "solution": "from typing import List\n\ndef solve_problem(input_str: str) -> str:\n    def process_test_case(n: int) -> int:\n        max_leftovers = 0\n        best_a = 1\n        for a in range(1, n + 1):\n            leftovers = n % a\n            if leftovers > max_leftovers or (leftovers == max_leftovers and a > best_a):\n                max_leftovers = leftovers\n                best_a = a\n        return best_a\n\n    lines = input_str.strip().split('\\n')\n    T = int(lines[0])\n    results = []\n    for i in range(1, T + 1):\n        N = int(lines[i])\n        results.append(str(process_test_case(N)))\n    \n    return '\\n'.join(results)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nNow that Chef has finished baking and frosting his cupcakes, it's time to package them. Chef has N cupcakes, and needs to decide how many cupcakes to place in each package. Each package must contain the same number of cupcakes. Chef will choose an integer A between 1 and N, inclusive, and place exactly A cupcakes into each package.  Chef makes as many packages as possible. Chef then gets to eat the remaining cupcakes. Chef enjoys eating cupcakes very much. Help Chef choose the package size A that will let him eat as many cupcakes as possible.\n\n\nInput\n\nInput begins with an integer T, the number of test cases. Each test case consists of a single integer N, the number of cupcakes.\n\n\nOutput\n\nFor each test case, output the package size that will maximize the number of leftover cupcakes. If multiple package sizes will result in the same number of leftover cupcakes, print the largest such size.\n\n\nConstraints\n\n1 \u2264 T \u2264 1000\n2 \u2264 N \u2264 100000000 (10^8)\n\n\nSample Input\n2\n2\n5\n\nSample Output\n2\n3\n\nExplanation\n\nIn the first test case, there will be no leftover cupcakes regardless of the size Chef chooses, so he chooses the largest possible size.  In the second test case, there will be 2 leftover cupcakes.\n\n### Signature\ndef solve_problem(input_str: str) -> str:",
    "timestamp": "2025-08-10T15:30:01.792895",
    "response_time": "4.49",
    "context": "{\"function_name\": \"solve_problem\", \"difficulty\": 1, \"difficulty_label\": \"EASY\"}"
  },
  {
    "dataset_name": "code_contests_qwen25coder32b",
    "dataset_row_id": 5.0,
    "solution": "from typing import List\n\ndef solve_problem(input_str: str) -> str:\n    def apply_operator(answer: int, value: int, operator: str) -> int:\n        if operator == \"XOR\":\n            return answer ^ value\n        elif operator == \"AND\":\n            return answer & value\n        elif operator == \"OR\":\n            return answer | value\n        return answer\n\n    def F(N: int, K: int, Answer: int, Operator: str, A: List[int]) -> int:\n        for _ in range(K):\n            for j in range(N):\n                Answer = apply_operator(Answer, A[j], Operator)\n        return Answer\n\n    lines = input_str.strip().split('\\n')\n    T = int(lines[0])\n    results = []\n\n    index = 1\n    for _ in range(T):\n        N, K, initial_Answer = map(int, lines[index].split())\n        A = list(map(int, lines[index + 1].split()))\n        Operator = lines[index + 2]\n        result = F(N, K, initial_Answer, Operator, A)\n        results.append(str(result))\n        index += 3\n\n    return '\\n'.join(results)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nYou are given a simple code of a function and you would like to know what it will return. \n\n F(N, K, Answer, Operator, A[N]) returns int;\n  begin\n      for iK do\n         for jN do\n            AnswerAnswer operator Aj)\n       return Answer\n  end\n\n\nHere N, K, Answer and the value returned by the function F are integers; A is an array of N integers numbered from 1 to N; Operator can be one of the binary operators XOR, AND or OR. If you are not familiar with these terms then better have a look at following articles: XOR, OR, AND.\n\nInput\nThe first line of input contains an integer T - the number of test cases in file. Description of each test case consists of three lines. The first one contains three integers N, K and initial Answer. Array A is given in the second line and Operator is situated on the third one. Operators are given as strings, of capital letters. It is guaranteed that there will be no whitespaces before or after Operator. \n\nOutput\nOutput one line for each test case - the value that is returned by described function with given arguments.\n\nConstraints\n\n1\u2264T\u2264100\n1\u2264N\u22641000\n0\u2264Answer, K, Ai\u226410^9\n Operator is one of these: \"AND\", \"XOR\", \"OR\".\n\n\nExample\nInput:\n3\n3 1 0\n1 2 3\nXOR\n3 1 0\n1 2 3\nAND\n3 1 0\n1 2 3\nOR\nOutput:\n0\n0\n3\n\u00a0\n\nExplanation\n\n0 xor 1 xor 2 xor 3 = 0\n0 and 1 and 2 and 3 = 0\n0 or 1 or 2 or 3 = 3\n\n### Signature\ndef solve_problem(input_str: str) -> str:",
    "timestamp": "2025-08-10T15:30:06.512279",
    "response_time": "4.72",
    "context": "{\"function_name\": \"solve_problem\", \"difficulty\": 2, \"difficulty_label\": \"MEDIUM\"}"
  },
  {
    "dataset_name": "code_contests_qwen25coder32b",
    "dataset_row_id": 6.0,
    "solution": "from typing import List\n\ndef solve_problem(input_str: str) -> str:\n    def can_complete_with_velocity(velocity: int, attractions: List[int]) -> bool:\n        for attraction in attractions:\n            if velocity < attraction:\n                return False\n            velocity -= 1\n            if velocity < 0:\n                return False\n        return True\n\n    def binary_search_min_velocity(attractions: List[int]) -> int:\n        left, right = 1, max(attractions) + len(attractions)\n        while left < right:\n            mid = (left + right) // 2\n            if can_complete_with_velocity(mid, attractions):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n\n    lines = input_str.strip().split('\\n')\n    T = int(lines[0])\n    results = []\n    index = 1\n    for _ in range(T):\n        N = int(lines[index])\n        attractions = list(map(int, lines[index + 1].split()))\n        min_velocity = binary_search_min_velocity(attractions)\n        results.append(str(min_velocity))\n        index += 2\n    return '\\n'.join(results)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nChef and his girlfriend are going to have a promenade. They are walking along the straight road which consists of segments placed one by one. Before walking Chef and his girlfriend stay at the beginning of the first segment, they want to achieve the end of the last segment. \nThere are few problems: \n\n At the beginning Chef should choose constant integer - the velocity of mooving. It can't be changed inside one segment. \n The velocity should be decreased by at least 1 after achieving the end of some segment. \n There is exactly one shop on each segment. Each shop has an attractiveness. If it's attractiveness is W and Chef and his girlfriend move with velocity V then if V < W girlfriend will run away into the shop and the promenade will become ruined. \n\n Chef doesn't want to lose her girl in such a way, but he is an old one, so you should find the minimal possible velocity at the first segment to satisfy all conditions.\n\u00a0\n\n\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N denoting the number of segments. The second line contains N space-separated integers W1, W2, ..., WN denoting the attractiveness of shops. \n\n\u00a0\n\nOutput\n\nFor each test case, output a single line containing the minimal possible velocity at the beginning.\n\n\u00a0\n\nConstraints\n\n1 \u2264 T \u2264 10\n1 \u2264 N \u2264 10^5\n1 \u2264 Wi \u2264 10^6\n\n\u00a0\n\nExample\nInput:\n\n2\n5\n6 5 4 3 2\n5\n3 4 3 1 1\n\nOutput:\n\n6\n5\n\u00a0\n\nExplanation\nExample case 1. \n If we choose velocity 6, on the first step we have 6 \u2265 6 everything is OK, then we should decrease the velocity to 5 and on the 2nd segment we'll receive 5 \u2265 5, again OK, and so on. \nExample case 2. \n If we choose velocity 4, the promanade will be ruined on the 2nd step (we sould decrease our velocity, so the maximal possible will be 3 which is less than 4).\n\n### Signature\ndef solve_problem(input_str: str) -> str:",
    "timestamp": "2025-08-10T15:30:11.535685",
    "response_time": "5.02",
    "context": "{\"function_name\": \"solve_problem\", \"difficulty\": 2, \"difficulty_label\": \"MEDIUM\"}"
  },
  {
    "dataset_name": "code_contests_qwen25coder32b",
    "dataset_row_id": 7.0,
    "solution": "from typing import List\nfrom fractions import Fraction\nfrom math import factorial\nfrom random import shuffle\n\ndef solve_problem(n: int, k: int) -> int:\n    return factorial(n) // factorial(n - k)\n\ndef derangement(n: int) -> int:\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\ndef expected_shuffles(n: int) -> Fraction:\n    if n == 2:\n        return Fraction(2)\n    total_permutations = factorial(n)\n    expected = 0\n    for i in range(1, n):\n        for j in range(1, n - i + 1):\n            fixed_prefix = permutations_count(n, i)\n            fixed_suffix = permutations_count(n - i, j)\n            deranged_middle = derangement(n - i - j)\n            valid_permutations = fixed_prefix * fixed_suffix * deranged_middle\n            expected += valid_permutations * (1 + expected_shuffles(n - i - j))\n    expected += derangement(n)\n    return Fraction(expected, total_permutations)\n\ndef solve_problem(input_str: str) -> str:\n    lines = input_str.strip().split('\\n')\n    t = int(lines[0])\n    results = []\n    for i in range(1, t + 1):\n        n = int(lines[i])\n        result = expected_shuffles(n)\n        results.append(str(result))\n    return '\\n'.join(results)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nRecently Johnny have learned bogosort sorting algorithm. He thought that it is too ineffective. So he decided to improve it. As you may know this algorithm shuffles the sequence randomly until it is sorted. Johnny decided that we don't need to shuffle the whole sequence every time. If after the last shuffle several first elements end up in the right places we will fix them and don't shuffle those elements furthermore. We will do the same for the last elements if they are in the right places. For example, if the initial sequence is (3, 5, 1, 6, 4, 2) and after one shuffle Johnny gets (1, 2, 5, 4, 3, 6) he will fix 1, 2 and 6 and proceed with sorting (5, 4, 3) using the same algorithm. Johnny hopes that this optimization will significantly improve the algorithm. Help him calculate the expected amount of shuffles for the improved algorithm to sort the sequence of the first n natural numbers given that no elements are in the right places initially.\n\nInput\nThe first line of input file is number t - the number of test cases. Each of the following t lines hold single number n - the number of elements in the sequence.\n\n\nConstraints\n1 <= t <= 150\n2 <= n <= 150\n\n\nOutput\nFor each test case output the expected amount of shuffles needed for the improved algorithm to sort the sequence of first n natural numbers in the form of irreducible fractions.\n\n\nExample\n\nInput:\n3\n2\n6\n10\n\nOutput:\n2\n1826/189\n877318/35343\n\n### Signature\ndef solve_problem(input_str: str) -> str:",
    "timestamp": "2025-08-10T15:30:19.402329",
    "response_time": "7.87",
    "context": "{\"function_name\": \"solve_problem\", \"difficulty\": 2, \"difficulty_label\": \"MEDIUM\"}"
  },
  {
    "dataset_name": "code_contests_qwen25coder32b",
    "dataset_row_id": 8.0,
    "solution": "from typing import List\n\ndef solve_problem(input_str: str) -> List[tuple]:\n    lines = input_str.strip().split('\\n')\n    T = int(lines[0])\n    test_cases = []\n    index = 1\n    for _ in range(T):\n        N, M, K = map(int, lines[index].split())\n        A = list(map(int, lines[index + 1].split()))\n        B = [list(map(int, lines[index + 2 + i].split())) for i in range(N)]\n        C = [list(map(int, lines[index + 2 + N + i].split())) for i in range(N)]\n        test_cases.append((N, M, K, A, B, C))\n        index += 2 + 2 * N\n    return test_cases\n\ndef solve_problem(input_str: str) -> str:\n    test_cases = parse_input(input_str)\n    results = []\n    \n    for N, M, K, A, B, C in test_cases:\n        # Initialize the dp table\n        dp = [[0] * (K + 1) for _ in range(N + 1)]\n        \n        for i in range(1, N + 1):\n            for k in range(K + 1):\n                # Option 1: Do not repaint the cell\n                dp[i][k] = dp[i - 1][k] + B[i - 1][A[i - 1] - 1]\n                \n                # Option 2: Repaint the cell to any color\n                for q in range(M):\n                    if q + 1 != A[i - 1] and k > 0:\n                        dp[i][k] = max(dp[i][k], dp[i - 1][k - 1] + B[i - 1][q] - C[i - 1][q])\n        \n        results.append(str(dp[N][K]))\n    \n    return '\\n'.join(results)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nChef had a hard time arguing with his friend, and after getting a great old kick Chef saw a colored array with N cells, numbered from 1 to N. \nThe kick was so strong that Chef suddenly understood the rules of the game. \n\nEach cell is painted with a color. Here the colors are numbered from 1 to M.\nFor any cell i, Chef can repaint it with any color q, and the cost of such operation is Ci,q points.\nHowever Chef can do at most K repaintings (0 repaintings is possible). \nAfter performing all repaintings, each cell will have some color. For each cell i, if cell i has color q then Chef will receive Bi,q points.\n\nNow Chef is wondering how many points can he receive in total when he repaints optimally.\n\nInput\nThe first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains three space-separated integers N, M and K, denoting the number of cells and the number of colors, the maximal possible number of repaintings respectively. The next line contains N space-separated integers A1, A2, ..., AN, denoting the initial colors of the cells. Then N lines follow. The i^th line of them contains M integers Bi1, Bi2, ..., BiM, where Bij denotes how many points Chef will receive if the cell i will be painted with j-th color after all operations. Then N lines follow. The i^th line  of them contains M integers Ci1, Ci2, ..., CiM, where Cij denotes how many points Chef will lose if he repaints the cell i with color j.\n\nNote: Be careful that the size of input files can be large.\n\n\nOutput\nFor each test case, output a single line containing the maximal possible points.\n\nConstraints\n\n1 \u2264 T \u2264 5\n0 \u2264 K \u2264 1000\n1 \u2264 N, M \u2264 1000\n1 \u2264 Ai \u2264 M\n0 \u2264 Bi,j \u2264 1000\n0 \u2264 Ci,j \u2264 1000\nIf j = Ai, then Ci,j = 0\n\n\nExample\nInput:\n1\n4 2 1\n1 1 2 2\n1 1\n1 1\n1 1\n3 1\n0 1\n0 1\n1 0\n1 0\n\nOutput:\n5\n\nExplanation:\n For this sample, we can repaint only once, since K = 1. We should repaint 4^th cell with color 1. We will pay 1 for this, and receive: \n1 (1^st cell - 1^st color) + \n1 (2^nd cell -1^st color) + \n1 (3^rd cell - 2^nd color) + \n3 (4^th cell - 1^st color)  = 6.\nHence we get 6 \u2212 1 = 5 points in total, and it is the optimal answer.\n\n### Signature\ndef solve_problem(input_str: str) -> str:",
    "timestamp": "2025-08-10T15:30:26.929832",
    "response_time": "7.53",
    "context": "{\"function_name\": \"solve_problem\", \"difficulty\": 2, \"difficulty_label\": \"MEDIUM\"}"
  },
  {
    "dataset_name": "code_contests_qwen25coder32b",
    "dataset_row_id": 9.0,
    "solution": "from typing import List, Tuple\n\ndef solve_problem(input_str: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    def can_first_player_win(pairs: List[Tuple[int, int]]) -> bool:\n        gcd_values = [gcd(a, b) for a, b in pairs]\n        unique_gcds = set(gcd_values)\n        return len(unique_gcds) % 2 == 1\n\n    lines = input_str.strip().split('\\n')\n    T = int(lines[0])\n    index = 1\n    results = []\n\n    for _ in range(T):\n        N = int(lines[index])\n        pairs = []\n        for _ in range(N):\n            a, b = map(int, lines[index + 1].split())\n            pairs.append((a, b))\n            index += 1\n        index += 1\n        if can_first_player_win(pairs):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    return \"\\n\".join(results)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nTwo players are playing a game. The game is played on a sequence of positive integer pairs. The players make their moves alternatively. During his move the player chooses a pair and decreases the larger integer in the pair by a positive multiple of the smaller integer in the pair in such a way that both integers in the pair remain positive. If two numbers in some pair become equal then the pair is removed from the sequence. The player who can not make any move loses (or in another words the player who encounters an empty sequence loses). Given the sequence of positive integer pairs determine whether the first player can win or not (assuming that both players are playing optimally).\n\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nEach test starts with an integer N denoting the number of pairs. Each of the next N lines contains a pair of positive integers. \n\u00a0\n\nOutput\nFor each test case, output a single line containing \"YES\" if the first player can win and \"NO\" otherwise. \n\nConstraints\n\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 100\nAll other integers are between 1 to 10^8\nThe integers in each pair will be different\n\n\u00a0\n\nExample\nInput:\n3\n1\n2 3\n2\n4 5\n5 6\n2\n2 3\n3 5\n\nOutput:\nNO\nNO\nYES\n\n\u00a0\n\nExplanation\nExample case 1. The first player don't have any choice other subtracting 2 from 3. So during the turn of the second player integer pair will be (2,1). The second player will win by subtracting 1 from 2. \nExample case 2. If the first player choose to move (4,5) to (4,1) the second player will make it to (1,1). If the first player choose to move (5,6) to (5,1) the second player will make it to (1,1). So regardless of the move of the first player, the second will always win.\nExample case 3. The first player will select pair (3,5) and make it to (3,2). Now both pairs are equal. So whatever the move of second player he will just mirror that move in another pair. This will ensure his win.\n\n### Signature\ndef solve_problem(input_str: str) -> str:",
    "timestamp": "2025-08-10T15:30:31.703963",
    "response_time": "4.77",
    "context": "{\"function_name\": \"solve_problem\", \"difficulty\": 2, \"difficulty_label\": \"MEDIUM\"}"
  }
]