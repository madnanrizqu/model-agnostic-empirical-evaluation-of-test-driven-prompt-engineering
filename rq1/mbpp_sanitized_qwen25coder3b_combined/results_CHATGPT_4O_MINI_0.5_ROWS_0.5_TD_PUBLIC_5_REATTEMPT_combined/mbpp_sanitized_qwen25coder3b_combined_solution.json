[
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 2,
    "solution": "```python\ndef similar_elements(test_tup1, test_tup2):\n    # Convert both lists to sets to remove duplicates and allow for set operations\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the intersection of both sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set back to a list and return\n    return list(common_elements)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T16:58:12.399083",
    "response_time": "2.28",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 3,
    "solution": "```python\n###START===\nfrom math import sqrt\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
    "timestamp": "2025-10-17T16:58:13.983724",
    "response_time": "1.58",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 4,
    "solution": "```python\nfrom heapq import nlargest\n\ndef heap_queue_largest(nums, n):\n    return nlargest(n, nums)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
    "timestamp": "2025-10-17T16:58:14.489116",
    "response_time": "0.50",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 6,
    "solution": "```python\n###START===\nimport math\n\ndef is_Power_Of_Two(x):\n    # Check if x is a power of two\n    return x > 0 and (x & (x - 1)) == 0\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
    "timestamp": "2025-10-17T16:58:15.369629",
    "response_time": "0.88",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 7,
    "solution": "```python\n###START===\nimport re\n\ndef find_char_long(text):\n    # Use regular expression to find all words with at least 4 characters\n    return re.findall(r'\\b\\w{4,}\\b', text)\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
    "timestamp": "2025-10-17T16:58:16.193647",
    "response_time": "0.82",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 8,
    "solution": "```python\ndef square_nums(nums):\n    return [x**2 for x in nums]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
    "timestamp": "2025-10-17T16:58:16.629324",
    "response_time": "0.43",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 9,
    "solution": "```python\ndef find_Rotations(str):\n    if not str:\n        return 0\n\n    n = len(str)\n    for i in range(1, n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
    "timestamp": "2025-10-17T16:58:17.518229",
    "response_time": "0.89",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 11,
    "solution": "```python\ndef remove_Occ(s, ch):\n    # Find the first occurrence of the character\n    first_occurrence = s.find(ch)\n    # Find the last occurrence of the character\n    last_occurrence = s.rfind(ch)\n    \n    # If the character is not found, return the original string\n    if first_occurrence == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_occurrence] + s[first_occurrence + 1:]\n    \n    # If the character is found again, remove the last occurrence\n    if last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence + 1:]\n    \n    return s\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
    "timestamp": "2025-10-17T16:58:19.555803",
    "response_time": "2.04",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 12,
    "solution": "```python\nfrom typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the matrix based on the row sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, M))]\n    \n    return sorted_matrix\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
    "timestamp": "2025-10-17T16:58:20.787217",
    "response_time": "1.23",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 14,
    "solution": "```python\n###START===\nfrom math import pi\n\ndef find_Volume(l, b, h):\n    # Calculate the area of the triangular base\n    base_area = 0.5 * b * h\n    \n    # Calculate the volume of the triangular prism\n    volume = base_area * l\n    \n    return volume\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
    "timestamp": "2025-10-17T16:58:21.843269",
    "response_time": "1.06",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 16,
    "solution": "```python\nimport re\n\ndef text_lowercase_underscore(text):\n    # Use regular expression to find sequences of lowercase letters joined with an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    return bool(re.match(pattern, text))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
    "timestamp": "2025-10-17T16:58:22.675025",
    "response_time": "0.83",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 17,
    "solution": "```python\ndef square_perimeter(a):\n    return 4 * a\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
    "timestamp": "2025-10-17T16:58:23.073684",
    "response_time": "0.40",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 18,
    "solution": "```python\ndef str_to_list(string):\n    return list(string)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
    "timestamp": "2025-10-17T16:58:23.448071",
    "response_time": "0.37",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 19,
    "solution": "```python\n###START===\nfrom typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
    "timestamp": "2025-10-17T16:58:24.351659",
    "response_time": "0.90",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 20,
    "solution": "```python\n###START===\nfrom math import sqrt\n\ndef is_woodall(x):\n    if x < 0:\n        return False\n    n = 1\n    while True:\n        woodall_number = n * (3 * n - 1) // 2\n        if woodall_number == x:\n            return True\n        if woodall_number > x:\n            return False\n        n += 1\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
    "timestamp": "2025-10-17T16:58:25.660842",
    "response_time": "1.31",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 56,
    "solution": "```python\ndef rev(num):\n    return int(str(num)[::-1])\n\ndef check_one_less_than_twice_reverse(num):\n    return num == 2 * rev(num) - 1\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
    "timestamp": "2025-10-17T16:58:26.364809",
    "response_time": "0.70",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 57,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef find_Max_Num(arr) :\n    # Convert each digit to a string and sort them in descending order\n    arr = sorted(map(str, arr), reverse=True)\n    \n    # Join the sorted strings to form the largest number\n    max_num = ''.join(arr)\n    \n    # Convert the result back to an integer\n    return int(max_num)\n\n# Example usage:\n# print(find_Max_Num([3, 30, 34, 5, 9]))  # Output: 9534330\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
    "timestamp": "2025-10-17T16:58:28.123420",
    "response_time": "1.76",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 58,
    "solution": "```python\n###START===\ndef opposite_Signs(x, y):\n    return x * y < 0\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
    "timestamp": "2025-10-17T16:58:28.627844",
    "response_time": "0.50",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 59,
    "solution": "```python\n###START===\nfrom math import sqrt\n\ndef is_octagonal(n):\n    # Calculate the potential octagonal number\n    potential_octagonal = (3 + sqrt(1 + 24 * n)) / 6\n    \n    # Check if the potential octagonal number is an integer\n    return potential_octagonal.is_integer()\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
    "timestamp": "2025-10-17T16:58:29.700741",
    "response_time": "1.07",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 61,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    prefix_sum = 0\n    prefix_sum_count = defaultdict(int)\n    prefix_sum_count[0] = 1\n\n    for i in range(n):\n        prefix_sum += int(s[i])\n        if prefix_sum - i == i:\n            count += 1\n        count += prefix_sum_count[prefix_sum - i]\n        prefix_sum_count[prefix_sum] += 1\n\n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
    "timestamp": "2025-10-17T16:58:31.293279",
    "response_time": "1.59",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 62,
    "solution": "```python\ndef smallest_num(xs):\n    if not xs:\n        raise ValueError(\"List is empty\")\n    return min(xs)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
    "timestamp": "2025-10-17T16:58:31.794446",
    "response_time": "0.50",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 63,
    "solution": "```python\nfrom typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    # Initialize the maximum difference to a very small number\n    max_diff = float('-inf')\n    \n    # Iterate through each pair in the list\n    for pair in test_list:\n        # Calculate the difference between the two elements in the pair\n        diff = abs(pair[0] - pair[1])\n        \n        # Update the maximum difference if the current difference is larger\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
    "timestamp": "2025-10-17T16:58:33.467763",
    "response_time": "1.67",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 64,
    "solution": "```python\ndef subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjectmarks\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
    "timestamp": "2025-10-17T16:58:34.255396",
    "response_time": "0.79",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 65,
    "solution": "```python\ndef recursive_list_sum(data_list):\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
    "timestamp": "2025-10-17T16:58:35.079501",
    "response_time": "0.82",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 66,
    "solution": "```python\ndef pos_count(lst):\n    return sum(1 for num in lst if num > 0)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
    "timestamp": "2025-10-17T16:58:35.556356",
    "response_time": "0.48",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 67,
    "solution": "```python\nfrom math import factorial\n\ndef bell_number(n):\n    # Initialize a list to store Bell numbers\n    bell = [0] * (n + 1)\n    bell[0] = 1  # Base case: B(0) = 1\n\n    # Compute Bell numbers using the recurrence relation\n    for i in range(1, n + 1):\n        for j in range(i):\n            bell[i] += bell[j] * factorial(i - 1) // factorial(j) // factorial(i - j - 1)\n\n    return bell[n]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
    "timestamp": "2025-10-17T16:58:37.218783",
    "response_time": "1.66",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 68,
    "solution": "```python\n###START===\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    if not A:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
    "timestamp": "2025-10-17T16:58:38.611865",
    "response_time": "1.39",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 69,
    "solution": "```python\ndef is_sublist(l, s):\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
    "timestamp": "2025-10-17T16:58:39.642037",
    "response_time": "1.03",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 70,
    "solution": "```python\ndef find_equal_tuple(Input):\n    # Check if the input is a list of tuples\n    if not isinstance(Input, list) or not all(isinstance(item, tuple) for item in Input):\n        raise ValueError(\"Input must be a list of tuples\")\n    \n    # Get the length of the first tuple\n    first_tuple_length = len(Input[0])\n    \n    # Check if all tuples have the same length\n    for tup in Input:\n        if len(tup) != first_tuple_length:\n            return False\n    \n    return True\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
    "timestamp": "2025-10-17T16:58:41.225746",
    "response_time": "1.58",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 71,
    "solution": "```python\n===START===\nfrom typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    n = len(nums)\n    gap = n\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n        sorted = True\n\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
    "timestamp": "2025-10-17T16:58:43.085658",
    "response_time": "1.86",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 72,
    "solution": "```python\n###START===\nfrom math import sqrt\n\ndef dif_Square(n):\n    # Check if n is negative\n    if n < 0:\n        return False\n    \n    # Check if n is a perfect square\n    if sqrt(n) % 1 == 0:\n        return True\n    \n    # Check if n can be expressed as the difference of two squares\n    for i in range(1, int(sqrt(n)) + 1):\n        if (n + i * i) % 2 == 0:\n            return True\n    \n    return False\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
    "timestamp": "2025-10-17T16:58:44.746842",
    "response_time": "1.66",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 74,
    "solution": "```python\nfrom typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    # Check if the number of colors matches the number of patterns\n    if len(colors) != len(patterns):\n        return False\n    \n    # Check if each color matches the corresponding pattern\n    for color, pattern in zip(colors, patterns):\n        if color != pattern:\n            return False\n    \n    return True\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
    "timestamp": "2025-10-17T16:58:46.070088",
    "response_time": "1.32",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 75,
    "solution": "```python\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int]], K: int) -> List[Tuple[int]]:\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each tuple in the test_list\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible, add the tuple to the result list\n            result.append(tup)\n    \n    # Return the list of tuples that meet the condition\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
    "timestamp": "2025-10-17T16:58:47.880619",
    "response_time": "1.81",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 77,
    "solution": "```python\n###START===\ndef is_Diff(n):\n    # Check if the number is divisible by 11\n    return n % 11 == 0\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
    "timestamp": "2025-10-17T16:58:48.569311",
    "response_time": "0.69",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 79,
    "solution": "```python\ndef word_len(s):\n    return len(s) % 2 != 0\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
    "timestamp": "2025-10-17T16:58:49.004102",
    "response_time": "0.43",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 80,
    "solution": "```python\ndef tetrahedral_number(n):\n    # Calculate the nth tetrahedral number using the formula\n    return n * (n + 1) * (n + 2) // 6\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
    "timestamp": "2025-10-17T16:58:49.732797",
    "response_time": "0.73",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 82,
    "solution": "```python\nimport math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
    "timestamp": "2025-10-17T16:58:50.280404",
    "response_time": "0.55",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 83,
    "solution": "```python\n###START===\nimport string\n\ndef get_Char(strr):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in strr)\n    \n    # Find the character corresponding to the sum modulo 26\n    result_char = chr((ascii_sum % 26) + ord('a'))\n    \n    return result_char\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
    "timestamp": "2025-10-17T16:58:51.543987",
    "response_time": "1.26",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 84,
    "solution": "```python\ndef sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    \n    # Initialize the sequence with the first two numbers\n    sequence = [1, 1]\n    \n    # Calculate the sequence up to the nth number\n    for i in range(3, n + 1):\n        next_value = sequence[sequence[i - 1] - 1] + sequence[i - sequence[i - 1]]\n        sequence.append(next_value)\n    \n    return sequence[n - 1]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
    "timestamp": "2025-10-17T16:58:53.178812",
    "response_time": "1.63",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 85,
    "solution": "```python\nimport math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
    "timestamp": "2025-10-17T16:58:53.685811",
    "response_time": "0.51",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 86,
    "solution": "```python\ndef centered_hexagonal_number(n):\n    # Calculate the nth centered hexagonal number using the formula\n    return 3 * n * (n - 1) + 1\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
    "timestamp": "2025-10-17T16:58:54.353871",
    "response_time": "0.67",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 87,
    "solution": "```python\n===START===\nfrom typing import Dict\n\ndef merge_dictionaries_three(dict1: Dict, dict2: Dict, dict3: Dict) -> Dict:\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
    "timestamp": "2025-10-17T16:58:55.341502",
    "response_time": "0.99",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 88,
    "solution": "```python\nfrom collections import Counter\n\ndef freq_count(list1):\n    return Counter(list1)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):",
    "timestamp": "2025-10-17T16:58:55.785527",
    "response_time": "0.44",
    "context": "{\"function_name\": \"freq_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 89,
    "solution": "```python\ndef closest_num(N):\n    # Start of the code\n    if N <= 1:\n        return None  # No smaller number than 1\n    else:\n        return N - 1  # The closest smaller number to N is N - 1\n    # End of the code\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):",
    "timestamp": "2025-10-17T16:58:56.759892",
    "response_time": "0.97",
    "context": "{\"function_name\": \"closest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 90,
    "solution": "```python\ndef len_log(list1):\n    if not list1:\n        return 0\n    longest_word = max(list1, key=len)\n    return len(longest_word)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):",
    "timestamp": "2025-10-17T16:58:57.452014",
    "response_time": "0.69",
    "context": "{\"function_name\": \"len_log\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 91,
    "solution": "```python\ndef find_substring(str1, sub_str):\n    return sub_str in str1\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):",
    "timestamp": "2025-10-17T16:58:57.909516",
    "response_time": "0.45",
    "context": "{\"function_name\": \"find_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 92,
    "solution": "```python\ndef is_undulating(n):\n    # Convert the number to a string to easily iterate over digits\n    str_n = str(n)\n    \n    # Check if the string length is less than 3, which cannot form an undulating number\n    if len(str_n) < 3:\n        return False\n    \n    # Check if the first two digits are the same\n    if str_n[0] == str_n[1]:\n        # Check if the rest of the digits alternate between the first two digits\n        for i in range(2, len(str_n)):\n            if str_n[i] != str_n[i-2]:\n                return False\n        return True\n    \n    # Check if the first and last digits are the same\n    if str_n[0] == str_n[-1]:\n        # Check if the rest of the digits alternate between the first and last digits\n        for i in range(1, len(str_n) - 1):\n            if str_n[i] != str_n[i-1]:\n                return False\n        return True\n    \n    # If neither of the above conditions is met, the number is not undulating\n    return False\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):",
    "timestamp": "2025-10-17T16:59:01.097434",
    "response_time": "3.19",
    "context": "{\"function_name\": \"is_undulating\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 93,
    "solution": "```python\ndef power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):",
    "timestamp": "2025-10-17T16:59:01.669615",
    "response_time": "0.57",
    "context": "{\"function_name\": \"power\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 94,
    "solution": "```python\nfrom typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[int, int]]) -> int:\n    if not test_list:\n        return None  # Return None if the list is empty\n\n    # Initialize the minimum value and its index\n    min_value = float('inf')\n    min_index = -1\n\n    # Iterate through the list to find the tuple with the smallest second value\n    for index, (value, _) in enumerate(test_list):\n        if value < min_value:\n            min_value = value\n            min_index = index\n\n    return min_index\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):",
    "timestamp": "2025-10-17T16:59:03.386053",
    "response_time": "1.72",
    "context": "{\"function_name\": \"index_minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 95,
    "solution": "```python\ndef Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):",
    "timestamp": "2025-10-17T16:59:04.269868",
    "response_time": "0.88",
    "context": "{\"function_name\": \"Find_Min_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 96,
    "solution": "```python\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):",
    "timestamp": "2025-10-17T16:59:05.011611",
    "response_time": "0.74",
    "context": "{\"function_name\": \"divisor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 97,
    "solution": "```python\nfrom collections import defaultdict\n\ndef frequency_lists(list1):\n    frequency_dict = defaultdict(int)\n    for sublist in list1:\n        for element in sublist:\n            frequency_dict[element] += 1\n    return dict(frequency_dict)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):",
    "timestamp": "2025-10-17T16:59:05.812501",
    "response_time": "0.80",
    "context": "{\"function_name\": \"frequency_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 98,
    "solution": "```python\ndef multiply_num(numbers):\n    if not numbers:\n        return 0  # Return 0 if the list is empty to avoid division by zero\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):",
    "timestamp": "2025-10-17T16:59:06.724275",
    "response_time": "0.91",
    "context": "{\"function_name\": \"multiply_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 99,
    "solution": "```python\ndef decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):",
    "timestamp": "2025-10-17T16:59:07.608561",
    "response_time": "0.88",
    "context": "{\"function_name\": \"decimal_to_binary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 100,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    if num < 10:\n        return num + 1\n\n    # Increment the number until a palindrome is found\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):",
    "timestamp": "2025-10-17T16:59:08.929765",
    "response_time": "1.32",
    "context": "{\"function_name\": \"next_smallest_palindrome\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 101,
    "solution": "```python\ndef kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of bounds\")\n    return arr[k - 1]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):",
    "timestamp": "2025-10-17T16:59:09.642613",
    "response_time": "0.71",
    "context": "{\"function_name\": \"kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 102,
    "solution": "```python\ndef snake_to_camel(word):\n    # Split the word by underscores\n    parts = word.split('_')\n    # Capitalize the first letter of each part and join them together\n    return ''.join(part.capitalize() for part in parts)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
    "timestamp": "2025-10-17T16:59:10.484616",
    "response_time": "0.84",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 103,
    "solution": "```python\nfrom math import factorial\n\ndef eulerian_num(n, m):\n    if m >= n or m < 0:\n        return 0\n    if m == 0:\n        return 1\n    if n == m + 1:\n        return 0\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):",
    "timestamp": "2025-10-17T16:59:11.843669",
    "response_time": "1.36",
    "context": "{\"function_name\": \"eulerian_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 104,
    "solution": "```python\nfrom typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    # Sort each sublist in the input list\n    sorted_list = [sorted(sublist) for sublist in input_list]\n    return sorted_list\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):",
    "timestamp": "2025-10-17T16:59:12.707306",
    "response_time": "0.86",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 105,
    "solution": "```python\ndef count(lst):\n    return sum(1 for item in lst if item)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):",
    "timestamp": "2025-10-17T16:59:13.157321",
    "response_time": "0.45",
    "context": "{\"function_name\": \"count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 106,
    "solution": "```python\ndef add_lists(test_list, test_tup):\n    # Convert the list to a tuple and concatenate with the given tuple\n    result = test_tup + tuple(test_list)\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):",
    "timestamp": "2025-10-17T16:59:13.876090",
    "response_time": "0.72",
    "context": "{\"function_name\": \"add_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 108,
    "solution": "```python\nfrom typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    # Merge all lists into one\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    return merged_list\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):",
    "timestamp": "2025-10-17T16:59:15.005217",
    "response_time": "1.13",
    "context": "{\"function_name\": \"merge_sorted_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 109,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef odd_Equivalent(s, n):\n    # Convert the binary string to a list of integers\n    binary_list = [int(bit) for bit in s]\n    \n    # Initialize a counter for numbers with an odd value\n    odd_count = 0\n    \n    # Iterate over the binary list\n    for i in range(len(binary_list)):\n        # Rotate the list by i positions\n        rotated_list = binary_list[i:] + binary_list[:i]\n        \n        # Check if the rotated list has an odd number of 1s\n        if sum(rotated_list) % 2 != 0:\n            odd_count += 1\n    \n    return odd_count\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):",
    "timestamp": "2025-10-17T16:59:17.144240",
    "response_time": "2.14",
    "context": "{\"function_name\": \"odd_Equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 111,
    "solution": "```python\nfrom typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    # Flatten the nested list\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    \n    # Use a set to find unique elements\n    unique_elements = set(flat_list)\n    \n    # Find common elements by comparing with the original flat list\n    common_elements = [item for item in flat_list if flat_list.count(item) == len(nestedlist)]\n    \n    return common_elements\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):",
    "timestamp": "2025-10-17T16:59:18.691025",
    "response_time": "1.55",
    "context": "{\"function_name\": \"common_in_nested_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 113,
    "solution": "```python\n###START===\nimport re\n\ndef check_integer(text):\n    # Use regular expression to check if the text is a valid integer\n    return bool(re.match(r'^-?\\d+$', text))\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):",
    "timestamp": "2025-10-17T16:59:19.463586",
    "response_time": "0.77",
    "context": "{\"function_name\": \"check_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 115,
    "solution": "```python\ndef empty_dit(list1):\n    return all(not d for d in list1)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):",
    "timestamp": "2025-10-17T16:59:20.019525",
    "response_time": "0.55",
    "context": "{\"function_name\": \"empty_dit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 116,
    "solution": "```python\ndef tuple_to_int(nums):\n    # Convert each number in the tuple to a string, join them together, and convert back to an integer\n    return int(''.join(map(str, nums)))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):",
    "timestamp": "2025-10-17T16:59:20.714113",
    "response_time": "0.69",
    "context": "{\"function_name\": \"tuple_to_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 117,
    "solution": "```python\nfrom typing import List\n\ndef list_to_float(test_list: List[List[str]]) -> List[List[float]]:\n    # Initialize an empty list to store the converted lists\n    result = []\n    \n    # Iterate over each sublist in the input list\n    for sublist in test_list:\n        # Convert each element in the sublist to a float if possible\n        converted_sublist = [float(element) if element.replace('.', '', 1).isdigit() else element for element in sublist]\n        # Append the converted sublist to the result list\n        result.append(converted_sublist)\n    \n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):",
    "timestamp": "2025-10-17T16:59:22.436178",
    "response_time": "1.72",
    "context": "{\"function_name\": \"list_to_float\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 118,
    "solution": "```python\ndef string_to_list(string):\n    return string.split()\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):",
    "timestamp": "2025-10-17T16:59:22.797266",
    "response_time": "0.36",
    "context": "{\"function_name\": \"string_to_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 119,
    "solution": "```python\nfrom typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        # If mid is even, check if the element at mid is the only one\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        # If mid is odd, check if the element at mid is the only one\n        else:\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid\n    \n    return arr[left]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):",
    "timestamp": "2025-10-17T16:59:24.989437",
    "response_time": "2.19",
    "context": "{\"function_name\": \"search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 120,
    "solution": "```python\nfrom typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = float('-inf')\n    for pair in list1:\n        product = abs(pair[0] * pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):",
    "timestamp": "2025-10-17T16:59:26.049503",
    "response_time": "1.06",
    "context": "{\"function_name\": \"max_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 123,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    amicable_pairs = set()\n    for i in range(2, limit):\n        sum_i = sum_of_divisors(i)\n        if sum_i > i and sum_of_divisors(sum_i) == i:\n            amicable_pairs.add(i)\n            amicable_pairs.add(sum_i)\n\n    return sum(amicable_pairs)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):",
    "timestamp": "2025-10-17T16:59:27.628624",
    "response_time": "1.58",
    "context": "{\"function_name\": \"amicable_numbers_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 124,
    "solution": "```python\nimport cmath\n\ndef angle_complex(a, b):\n    # Create a complex number from the given real and imaginary parts\n    complex_num = complex(a, b)\n    # Calculate the angle of the complex number\n    angle = cmath.phase(complex_num)\n    return angle\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):",
    "timestamp": "2025-10-17T16:59:28.539474",
    "response_time": "0.91",
    "context": "{\"function_name\": \"angle_complex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 125,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef find_length(string):\n    max_diff = 0\n    current_diff = 0\n    zero_count = 0\n    one_count = 0\n\n    for char in string:\n        if char == '0':\n            zero_count += 1\n            current_diff += 1\n        else:\n            one_count += 1\n            current_diff -= 1\n\n        max_diff = max(max_diff, current_diff)\n\n        # Reset current_diff if it becomes negative\n        if current_diff < 0:\n            current_diff = 0\n\n    return max_diff\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):",
    "timestamp": "2025-10-17T16:59:30.301410",
    "response_time": "1.76",
    "context": "{\"function_name\": \"find_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 126,
    "solution": "```python\n###START===\nfrom math import gcd\n\ndef sum(a, b):\n    # Calculate the greatest common divisor of a and b\n    common_divisor = gcd(a, b)\n    \n    # Initialize the sum of common divisors\n    sum_common_divisors = 0\n    \n    # Iterate through all numbers from 1 to the common divisor\n    for i in range(1, common_divisor + 1):\n        # Check if i is a divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            # Add i to the sum of common divisors\n            sum_common_divisors += i\n    \n    return sum_common_divisors\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):",
    "timestamp": "2025-10-17T16:59:32.278974",
    "response_time": "1.98",
    "context": "{\"function_name\": \"sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 127,
    "solution": "```python\ndef multiply_int(x, y):\n    return x * y\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):",
    "timestamp": "2025-10-17T16:59:32.660584",
    "response_time": "0.38",
    "context": "{\"function_name\": \"multiply_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 128,
    "solution": "```python\ndef long_words(n, str):\n    # Split the input string into a list of words\n    words = str.split()\n    \n    # Filter the list to include only words longer than n characters\n    long_words_list = [word for word in words if len(word) > n]\n    \n    return long_words_list\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):",
    "timestamp": "2025-10-17T16:59:33.696688",
    "response_time": "1.03",
    "context": "{\"function_name\": \"long_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 129,
    "solution": "```python\n###START===\nimport numpy as np\n\ndef magic_square_test(my_matrix):\n    # Check if the input is a square matrix\n    if not np.array_equal(my_matrix.shape, (len(my_matrix), len(my_matrix))):\n        return False\n    \n    # Calculate the sum of the first row\n    n = len(my_matrix)\n    magic_sum = np.sum(my_matrix[0])\n    \n    # Check if all rows have the same sum\n    for row in my_matrix:\n        if np.sum(row) != magic_sum:\n            return False\n    \n    # Check if all columns have the same sum\n    for col in range(n):\n        if np.sum(my_matrix[:, col]) != magic_sum:\n            return False\n    \n    # Check if the main diagonal has the same sum\n    if np.sum(np.diag(my_matrix)) != magic_sum:\n        return False\n    \n    # Check if the secondary diagonal has the same sum\n    if np.sum(np.diag(np.fliplr(my_matrix))) != magic_sum:\n        return False\n    \n    return True\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):",
    "timestamp": "2025-10-17T16:59:36.554780",
    "response_time": "2.86",
    "context": "{\"function_name\": \"magic_square_test\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 130,
    "solution": "```python\nfrom collections import Counter\n\ndef max_occurrences(nums):\n    # Count the occurrences of each item in the list\n    count = Counter(nums)\n    \n    # Find the item with the maximum frequency\n    max_item = max(count, key=count.get)\n    \n    return max_item\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):",
    "timestamp": "2025-10-17T16:59:37.461409",
    "response_time": "0.91",
    "context": "{\"function_name\": \"max_occurrences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 131,
    "solution": "```python\n###START===\nimport string\n\ndef reverse_vowels(str1):\n    vowels = set('aeiouAEIOU')\n    str1 = list(str1)\n    left, right = 0, len(str1) - 1\n    \n    while left < right:\n        if str1[left] not in vowels:\n            left += 1\n        elif str1[right] not in vowels:\n            right -= 1\n        else:\n            str1[left], str1[right] = str1[right], str1[left]\n            left += 1\n            right -= 1\n    \n    return ''.join(str1)\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):",
    "timestamp": "2025-10-17T16:59:39.288496",
    "response_time": "1.83",
    "context": "{\"function_name\": \"reverse_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 132,
    "solution": "```python\ndef tup_string(tup1):\n    return str(tup1)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):",
    "timestamp": "2025-10-17T16:59:39.688447",
    "response_time": "0.40",
    "context": "{\"function_name\": \"tup_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 133,
    "solution": "```python\ndef sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):",
    "timestamp": "2025-10-17T16:59:40.194659",
    "response_time": "0.50",
    "context": "{\"function_name\": \"sum_negativenum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 135,
    "solution": "```python\ndef hexagonal_num(n):\n    # Calculate the nth hexagonal number using the formula: n * (2n - 1)\n    return n * (2 * n - 1)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):",
    "timestamp": "2025-10-17T16:59:40.923948",
    "response_time": "0.73",
    "context": "{\"function_name\": \"hexagonal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 137,
    "solution": "```python\ndef zero_count(nums):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if zero_count == 0:\n        return float('inf')  # Avoid division by zero\n    else:\n        return zero_count / non_zero_count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):",
    "timestamp": "2025-10-17T16:59:42.215674",
    "response_time": "1.29",
    "context": "{\"function_name\": \"zero_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 138,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    while n > 0:\n        if n % 2 != 0:\n            return False\n        n //= 2\n    return True\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):",
    "timestamp": "2025-10-17T16:59:43.265110",
    "response_time": "1.05",
    "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 139,
    "solution": "```python\nimport math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):",
    "timestamp": "2025-10-17T16:59:43.755852",
    "response_time": "0.49",
    "context": "{\"function_name\": \"circle_circumference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 140,
    "solution": "```python\nfrom typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    # Initialize an empty set to store the unique numbers\n    result_set = set()\n    \n    # Iterate over each sublist in the test_list\n    for sublist in test_list:\n        # Add each number in the sublist to the result_set\n        result_set.update(sublist)\n    \n    return result_set\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):",
    "timestamp": "2025-10-17T16:59:45.023148",
    "response_time": "1.26",
    "context": "{\"function_name\": \"extract_singly\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 141,
    "solution": "```python\ndef pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted portion of the list\n        max_index = nums.index(max(nums[:n-i]))\n        \n        # Flip the maximum element to the beginning of the unsorted portion\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n        \n        # Flip the entire unsorted portion to move the maximum element to its correct position\n        nums[:n-i] = nums[:n-i][::-1]\n    \n    return nums\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):",
    "timestamp": "2025-10-17T16:59:46.721136",
    "response_time": "1.70",
    "context": "{\"function_name\": \"pancake_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 142,
    "solution": "```python\ndef count_samepair(list1, list2, list3):\n    # Initialize a counter for identical items\n    count = 0\n    \n    # Iterate over the indices of the lists\n    for i in range(len(list1)):\n        # Check if the items at the same index in all three lists are identical\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):",
    "timestamp": "2025-10-17T16:59:48.045692",
    "response_time": "1.32",
    "context": "{\"function_name\": \"count_samepair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 143,
    "solution": "```python\ndef find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):",
    "timestamp": "2025-10-17T16:59:48.671453",
    "response_time": "0.62",
    "context": "{\"function_name\": \"find_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 145,
    "solution": "```python\ndef max_Abs_Diff(arr):\n    if not arr:\n        return 0\n    \n    min_val = arr[0]\n    max_val = arr[0]\n    \n    for num in arr:\n        min_val = min(min_val, num)\n        max_val = max(max_val, num)\n    \n    return max_val - min_val\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):",
    "timestamp": "2025-10-17T16:59:49.725445",
    "response_time": "1.05",
    "context": "{\"function_name\": \"max_Abs_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 160,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef find_solution(a, b, n):\n    # Check if a and b are coprime\n    if gcd(a, b) != 1:\n        return None\n    \n    # Use Extended Euclidean Algorithm to find x and y\n    x, y, gcd_val = extended_gcd(a, b)\n    \n    # Check if gcd_val is equal to n\n    if gcd_val != n:\n        return None\n    \n    # Scale x and y to satisfy ax + by = n\n    x = x * (n // gcd_val)\n    y = y * (n // gcd_val)\n    \n    return (x, y)\n\ndef extended_gcd(a, b):\n    if b == 0:\n        return (1, 0, a)\n    else:\n        x, y, gcd_val = extended_gcd(b, a % b)\n        return (y, x - (a // b) * y, gcd_val)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):",
    "timestamp": "2025-10-17T16:59:52.439749",
    "response_time": "2.71",
    "context": "{\"function_name\": \"find_solution\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 161,
    "solution": "```python\ndef remove_elements(list1, list2):\n    # Use a set for list2 for O(1) average time complexity for lookups\n    set2 = set(list2)\n    # Use a list comprehension to filter out elements in list1 that are in set2\n    return [element for element in list1 if element not in set2]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):",
    "timestamp": "2025-10-17T16:59:53.565630",
    "response_time": "1.12",
    "context": "{\"function_name\": \"remove_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 162,
    "solution": "```python\ndef sum_series(n):\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):",
    "timestamp": "2025-10-17T16:59:54.218902",
    "response_time": "0.65",
    "context": "{\"function_name\": \"sum_series\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 163,
    "solution": "```python\nfrom math import tan, pi\n\ndef area_polygon(s, l):\n    # Calculate the area of a regular polygon\n    n = s  # Number of sides\n    area = (n * l**2) / (4 * tan(pi / n))\n    return area\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):",
    "timestamp": "2025-10-17T16:59:55.128688",
    "response_time": "0.91",
    "context": "{\"function_name\": \"area_polygon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 164,
    "solution": "```python\n###START===\nfrom math import sqrt\n\ndef div_sum(n):\n    if n <= 0:\n        return 0\n    divisors = [1]\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    return sum(divisors)\n\ndef same_div_sum(a, b):\n    return div_sum(a) == div_sum(b)\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):",
    "timestamp": "2025-10-17T16:59:56.641961",
    "response_time": "1.51",
    "context": "{\"function_name\": \"are_equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 165,
    "solution": "```python\ndef count_char_position(str1):\n    # Define the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    # Initialize a counter for matching characters\n    count = 0\n    \n    # Iterate over the string\n    for i, char in enumerate(str1):\n        # Convert character to lowercase for case insensitivity\n        char = char.lower()\n        \n        # Check if the character is in the alphabet and at the same position\n        if char in alphabet and i == alphabet.index(char):\n            count += 1\n    \n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):",
    "timestamp": "2025-10-17T16:59:58.192296",
    "response_time": "1.55",
    "context": "{\"function_name\": \"count_char_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 166,
    "solution": "```python\nfrom typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):",
    "timestamp": "2025-10-17T16:59:59.296028",
    "response_time": "1.10",
    "context": "{\"function_name\": \"find_even_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 167,
    "solution": "```python\nimport math\n\ndef next_power_of_2(n):\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):",
    "timestamp": "2025-10-17T16:59:59.975727",
    "response_time": "0.68",
    "context": "{\"function_name\": \"next_power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 168,
    "solution": "```python\ndef frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):",
    "timestamp": "2025-10-17T17:00:00.639283",
    "response_time": "0.66",
    "context": "{\"function_name\": \"frequency\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 170,
    "solution": "```python\ndef sum_range_list(list1, m, n):\n    # Check if m is less than n\n    if m < n:\n        # Calculate the sum of numbers from index m to n (inclusive)\n        return sum(list1[m:n+1])\n    else:\n        # If m is greater than or equal to n, return 0\n        return 0\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):",
    "timestamp": "2025-10-17T17:00:01.791263",
    "response_time": "1.15",
    "context": "{\"function_name\": \"sum_range_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 171,
    "solution": "```python\ndef perimeter_pentagon(a):\n    # Calculate the perimeter of a regular pentagon\n    return 5 * a\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):",
    "timestamp": "2025-10-17T17:00:02.390864",
    "response_time": "0.60",
    "context": "{\"function_name\": \"perimeter_pentagon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 172,
    "solution": "```python\ndef count_occurance(s):\n    return s.count('std')\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):",
    "timestamp": "2025-10-17T17:00:02.851677",
    "response_time": "0.46",
    "context": "{\"function_name\": \"count_occurance\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 222,
    "solution": "```python\n===START===\nfrom typing import *\nfrom collections import *\n\ndef check_type(test_tuple):\n    # Check if the tuple is empty\n    if not test_tuple:\n        return True\n    \n    # Get the type of the first element\n    first_type = type(test_tuple[0])\n    \n    # Check if all elements in the tuple have the same type\n    for element in test_tuple:\n        if type(element) != first_type:\n            return False\n    \n    return True\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):",
    "timestamp": "2025-10-17T17:00:04.260807",
    "response_time": "1.41",
    "context": "{\"function_name\": \"check_type\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 223,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef is_majority(arr, n, x):\n    # Find the index of the first occurrence of x\n    left = bisect.bisect_left(arr, x)\n    \n    # Find the index of the last occurrence of x\n    right = bisect.bisect_right(arr, x)\n    \n    # Calculate the number of occurrences of x\n    count = right - left\n    \n    # Check if the count is greater than n/2\n    return count > n // 2\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):",
    "timestamp": "2025-10-17T17:00:05.921459",
    "response_time": "1.66",
    "context": "{\"function_name\": \"binary_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 224,
    "solution": "```python\n###START===\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):",
    "timestamp": "2025-10-17T17:00:06.649009",
    "response_time": "0.73",
    "context": "{\"function_name\": \"count_Set_Bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 226,
    "solution": "```python\ndef odd_values_string(str):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate over the string using enumerate to get both index and character\n    for index, char in enumerate(str):\n        # Check if the index is even (0-based index)\n        if index % 2 == 0:\n            # Append the character to the result string\n            result += char\n    \n    # Return the resulting string with odd index characters removed\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove the characters which have odd index values of a given string.\n\n### Signature\ndef odd_values_string(str):",
    "timestamp": "2025-10-17T17:00:08.205124",
    "response_time": "1.55",
    "context": "{\"function_name\": \"odd_values_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 227,
    "solution": "```python\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find minimum of three numbers.\n\n### Signature\ndef min_of_three(a,b,c):",
    "timestamp": "2025-10-17T17:00:08.679727",
    "response_time": "0.47",
    "context": "{\"function_name\": \"min_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 228,
    "solution": "```python\n###START===\nimport math\n\ndef all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Calculate the mask for the range [l, r]\n    mask = (1 << (r - l + 1)) - 1\n    # Shift the mask to the correct position\n    mask = mask << (l - 1)\n    # Check if the bits in the range [l, r] are all set\n    return (n & mask) == mask\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether all the bits are unset in the given range or not.\n\n### Signature\ndef all_Bits_Set_In_The_Given_Range(n,l,r):",
    "timestamp": "2025-10-17T17:00:10.239085",
    "response_time": "1.56",
    "context": "{\"function_name\": \"all_Bits_Set_In_The_Given_Range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 229,
    "solution": "```python\nfrom typing import List\n\ndef re_arrange_array(arr: List[int], n: int) -> List[int]:\n    # Separate negative and positive elements\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n    \n    # Merge the lists, maintaining the relative order\n    result = negatives + positives\n    \n    # Extend the result with the remaining elements of the array\n    result.extend(arr[n:])\n    \n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n### Signature\ndef re_arrange_array(arr, n):",
    "timestamp": "2025-10-17T17:00:11.800313",
    "response_time": "1.56",
    "context": "{\"function_name\": \"re_arrange_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 230,
    "solution": "```python\ndef replace_blank(str1, char):\n    return str1.replace(\" \", char)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n### Signature\ndef replace_blank(str1,char):",
    "timestamp": "2025-10-17T17:00:12.234290",
    "response_time": "0.43",
    "context": "{\"function_name\": \"replace_blank\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 232,
    "solution": "```python\ndef larg_nnum(list1, n):\n    if n <= 0:\n        return []\n    if n >= len(list1):\n        return list1[:]\n    \n    # Sort the list in descending order and return the first n elements\n    return sorted(list1, reverse=True)[:n]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n### Signature\ndef larg_nnum(list1,n):",
    "timestamp": "2025-10-17T17:00:13.180750",
    "response_time": "0.94",
    "context": "{\"function_name\": \"larg_nnum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 233,
    "solution": "```python\n###START===\nimport math\n\ndef lateralsuface_cylinder(r, h):\n    # Calculate the lateral surface area of a cylinder\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cylinder.\n\n### Signature\ndef lateralsuface_cylinder(r,h):",
    "timestamp": "2025-10-17T17:00:14.055508",
    "response_time": "0.87",
    "context": "{\"function_name\": \"lateralsuface_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 234,
    "solution": "```python\ndef volume_cube(l):\n    return l ** 3\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the volume of a cube given its side length.\n\n### Signature\ndef volume_cube(l):",
    "timestamp": "2025-10-17T17:00:14.444674",
    "response_time": "0.39",
    "context": "{\"function_name\": \"volume_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 235,
    "solution": "```python\n###START===\nimport math\n\ndef even_bit_set_number(n):\n    # Calculate the number of bits in the given number\n    num_bits = math.floor(math.log2(n)) + 1\n    \n    # Create a mask with all even bits set\n    mask = (1 << num_bits) - 1\n    \n    # Set all even bits of n using the mask\n    return n | mask\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to set all even bits of a given number.\n\n### Signature\ndef even_bit_set_number(n):",
    "timestamp": "2025-10-17T17:00:15.752613",
    "response_time": "1.31",
    "context": "{\"function_name\": \"even_bit_set_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 237,
    "solution": "```python\nfrom collections import defaultdict\n\ndef check_occurences(test_list):\n    # Initialize a defaultdict to store the count of each tuple\n    count_dict = defaultdict(int)\n    \n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Increment the count for the current tuple\n        count_dict[tup] += 1\n    \n    # Convert the defaultdict to a regular dictionary\n    return dict(count_dict)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n### Signature\ndef check_occurences(test_list):",
    "timestamp": "2025-10-17T17:00:17.054113",
    "response_time": "1.30",
    "context": "{\"function_name\": \"check_occurences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 238,
    "solution": "```python\ndef number_of_substrings(str):\n    n = len(str)\n    return n * (n + 1) // 2\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of non-empty substrings of a given string.\n\n### Signature\ndef number_of_substrings(str):",
    "timestamp": "2025-10-17T17:00:17.634791",
    "response_time": "0.58",
    "context": "{\"function_name\": \"number_of_substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 239,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef get_total_number_of_sequences(m, n):\n    # Initialize a DP table where dp[i][j] represents the number of sequences of length i ending with j\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base case: There is one way to form a sequence of length 1 with any number from 1 to m\n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    # Fill the DP table\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, j // 2 + 1):\n                dp[i][j] += dp[i - 1][k]\n    \n    # The total number of sequences of length n is the sum of sequences ending with any number from 1 to m\n    total_sequences = sum(dp[n][j] for j in range(1, m + 1))\n    \n    return total_sequences\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n### Signature\ndef get_total_number_of_sequences(m,n):",
    "timestamp": "2025-10-17T17:00:20.698508",
    "response_time": "3.06",
    "context": "{\"function_name\": \"get_total_number_of_sequences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 240,
    "solution": "```python\ndef replace_list(list1, list2):\n    if list2:\n        list1[-1:] = list2\n    return list1\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\n### Signature\ndef replace_list(list1,list2):",
    "timestamp": "2025-10-17T17:00:21.280591",
    "response_time": "0.58",
    "context": "{\"function_name\": \"replace_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 242,
    "solution": "```python\ndef count_charac(str1):\n    return len(str1)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the total number of characters in a string.\n\n### Signature\ndef count_charac(str1):",
    "timestamp": "2025-10-17T17:00:21.670762",
    "response_time": "0.39",
    "context": "{\"function_name\": \"count_charac\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 244,
    "solution": "```python\nimport math\n\ndef next_Perfect_Square(N):\n    # Find the integer square root of N\n    root = math.isqrt(N)\n    # Calculate the next perfect square\n    next_square = (root + 1) ** 2\n    return next_square\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the next perfect square greater than a given number.\n\n### Signature\ndef next_Perfect_Square(N):",
    "timestamp": "2025-10-17T17:00:22.574691",
    "response_time": "0.90",
    "context": "{\"function_name\": \"next_Perfect_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 245,
    "solution": "```python\nfrom typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    if not arr:\n        return 0\n\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n\n    # Fill inc array\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n\n    # Fill dec array\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n\n    # Find the maximum sum of bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\n### Signature\ndef max_sum(arr):",
    "timestamp": "2025-10-17T17:00:25.415227",
    "response_time": "2.84",
    "context": "{\"function_name\": \"max_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 246,
    "solution": "```python\nimport math\n\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    \n    # Initial guess\n    guess = number / 2.0\n    \n    # Tolerance for convergence\n    tolerance = 1e-10\n    \n    while True:\n        next_guess = (guess + number / guess) / 2.0\n        if abs(next_guess - guess) < tolerance:\n            return next_guess\n        guess = next_guess\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function for computing square roots using the babylonian method.\n\n### Signature\ndef babylonian_squareroot(number):",
    "timestamp": "2025-10-17T17:00:27.283852",
    "response_time": "1.87",
    "context": "{\"function_name\": \"babylonian_squareroot\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 247,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the table. The outer loop is for substring lengths\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n\n### Signature\ndef lps(str):",
    "timestamp": "2025-10-17T17:00:29.836987",
    "response_time": "2.55",
    "context": "{\"function_name\": \"lps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 248,
    "solution": "```python\ndef harmonic_sum(n):\n    if n <= 1:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in an integer n and calculates the harmonic sum of n-1.\n\n### Signature\ndef harmonic_sum(n):",
    "timestamp": "2025-10-17T17:00:30.506301",
    "response_time": "0.67",
    "context": "{\"function_name\": \"harmonic_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 249,
    "solution": "```python\ndef intersection_array(array_nums1, array_nums2):\n    # Convert both arrays to sets to remove duplicates and allow for efficient intersection\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    \n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n    \n    # Convert the result back to a list\n    return list(intersection)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the intersection of two arrays.\n\n### Signature\ndef intersection_array(array_nums1,array_nums2):",
    "timestamp": "2025-10-17T17:00:31.774262",
    "response_time": "1.27",
    "context": "{\"function_name\": \"intersection_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 250,
    "solution": "```python\ndef count_X(tup, x):\n    return tup.count(x)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\n### Signature\ndef count_X(tup, x):",
    "timestamp": "2025-10-17T17:00:32.183935",
    "response_time": "0.41",
    "context": "{\"function_name\": \"count_X\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 251,
    "solution": "```python\ndef insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\n### Signature\ndef insert_element(list,element):",
    "timestamp": "2025-10-17T17:00:32.811326",
    "response_time": "0.63",
    "context": "{\"function_name\": \"insert_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 252,
    "solution": "```python\nimport cmath\n\ndef convert(numbers):\n    polar_coordinates = [cmath.polar(num) for num in numbers]\n    return polar_coordinates\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to convert complex numbers to polar coordinates.\n\n### Signature\ndef convert(numbers):",
    "timestamp": "2025-10-17T17:00:33.379666",
    "response_time": "0.57",
    "context": "{\"function_name\": \"convert\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 253,
    "solution": "```python\ndef count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function that returns the number of integer elements in a given list.\n\n### Signature\ndef count_integer(list1):",
    "timestamp": "2025-10-17T17:00:34.046962",
    "response_time": "0.67",
    "context": "{\"function_name\": \"count_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 255,
    "solution": "```python\nfrom itertools import product\n\ndef combinations_colors(l, n):\n    return list(product(l, repeat=n))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\n### Signature\ndef combinations_colors(l, n):",
    "timestamp": "2025-10-17T17:00:34.546777",
    "response_time": "0.50",
    "context": "{\"function_name\": \"combinations_colors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 256,
    "solution": "```python\n###START===\nfrom math import sqrt\n\ndef count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(sqrt(n)) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n### Signature\ndef count_Primes_nums(n):",
    "timestamp": "2025-10-17T17:00:36.018312",
    "response_time": "1.47",
    "context": "{\"function_name\": \"count_Primes_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 257,
    "solution": "```python\ndef swap_numbers(a, b):\n    return (b, a)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\n### Signature\ndef swap_numbers(a,b):",
    "timestamp": "2025-10-17T17:00:36.427518",
    "response_time": "0.41",
    "context": "{\"function_name\": \"swap_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 259,
    "solution": "```python\ndef maximize_elements(test_tup1, test_tup2):\n    # Initialize a list to store the maximum elements\n    max_elements = []\n    \n    # Iterate over the elements of both tuples\n    for i in range(len(test_tup1)):\n        # Append the maximum of the current elements from both tuples\n        max_elements.append(max(test_tup1[i], test_tup2[i]))\n    \n    # Return the list of maximum elements\n    return max_elements\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to maximize the given two tuples.\n\n### Signature\ndef maximize_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:00:37.840963",
    "response_time": "1.41",
    "context": "{\"function_name\": \"maximize_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 260,
    "solution": "```python\nfrom math import sqrt\n\ndef newman_prime(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def newman_shanks_williams(a, b, c, d, n):\n        if n == 0:\n            return a\n        if n == 1:\n            return b\n        if n == 2:\n            return c\n        if n == 3:\n            return d\n        return newman_shanks_williams(a, b, c, d, n - 1) * newman_shanks_williams(a, b, c, d, n - 2) - newman_shanks_williams(a, b, c, d, n - 3) * newman_shanks_williams(a, b, c, d, n - 4)\n\n    a, b, c, d = 1, 1, 1, 1\n    count = 0\n    while True:\n        prime = newman_shanks_williams(a, b, c, d, n)\n        if is_prime(prime):\n            count += 1\n            if count == n:\n                return prime\n        a, b, c, d = b, c, d, newman_shanks_williams(a, b, c, d, n)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n### Signature\ndef newman_prime(n):",
    "timestamp": "2025-10-17T17:00:42.490194",
    "response_time": "4.65",
    "context": "{\"function_name\": \"newman_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 261,
    "solution": "```python\ndef division_elements(test_tup1, test_tup2):\n    # Check if both tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Perform element-wise division\n    result = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n    \n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n### Signature\ndef division_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:00:43.758834",
    "response_time": "1.27",
    "context": "{\"function_name\": \"division_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 262,
    "solution": "```python\ndef split_two_parts(list1, L):\n    if L < 0 or L > len(list1):\n        raise ValueError(\"L must be between 0 and the length of the list\")\n    return (list1[:L], list1[L:])\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\n### Signature\ndef split_two_parts(list1, L):",
    "timestamp": "2025-10-17T17:00:44.607176",
    "response_time": "0.85",
    "context": "{\"function_name\": \"split_two_parts\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 264,
    "solution": "```python\ndef dog_age(h_age):\n    if h_age < 0:\n        raise ValueError(\"Age cannot be negative\")\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate a dog's age in dog's years.\n\n### Signature\ndef dog_age(h_age):",
    "timestamp": "2025-10-17T17:00:45.597678",
    "response_time": "0.99",
    "context": "{\"function_name\": \"dog_age\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 265,
    "solution": "```python\ndef list_split(S, step):\n    if step <= 0:\n        raise ValueError(\"Step must be a positive integer.\")\n    \n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i + step])\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\n### Signature\ndef list_split(S, step):",
    "timestamp": "2025-10-17T17:00:46.545298",
    "response_time": "0.95",
    "context": "{\"function_name\": \"list_split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 266,
    "solution": "```python\ndef lateralsurface_cube(l):\n    # Calculate the lateral surface area of a cube\n    return 4 * l * l\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cube given its side length.\n\n### Signature\ndef lateralsurface_cube(l):",
    "timestamp": "2025-10-17T17:00:47.116179",
    "response_time": "0.57",
    "context": "{\"function_name\": \"lateralsurface_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 267,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef square_Sum(n):\n    return sum((2*i + 1)**2 for i in range(n))\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n### Signature\ndef square_Sum(n):",
    "timestamp": "2025-10-17T17:00:47.809497",
    "response_time": "0.69",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 268,
    "solution": "```python\ndef find_star_num(n):\n    # Calculate the n'th star number using the formula\n    return 8 * n * (n - 1) + 1\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n'th star number.\n\n### Signature\ndef find_star_num(n):",
    "timestamp": "2025-10-17T17:00:48.479289",
    "response_time": "0.67",
    "context": "{\"function_name\": \"find_star_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 269,
    "solution": "```python\ndef ascii_value(k):\n    return ord(k)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the ascii value of a character.\n\n### Signature\ndef ascii_value(k):",
    "timestamp": "2025-10-17T17:00:48.887285",
    "response_time": "0.41",
    "context": "{\"function_name\": \"ascii_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 270,
    "solution": "```python\ndef sum_even_and_even_index(arr):\n    total_sum = 0\n    for i in range(0, len(arr), 2):  # Iterate over even indices\n        if arr[i] % 2 == 0:  # Check if the number at the even index is even\n            total_sum += arr[i]\n    return total_sum\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of even numbers at even positions of a list.\n\n### Signature\ndef sum_even_and_even_index(arr):",
    "timestamp": "2025-10-17T17:00:50.054112",
    "response_time": "1.16",
    "context": "{\"function_name\": \"sum_even_and_even_index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 271,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    return total_sum\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n### Signature\ndef even_Power_Sum(n):",
    "timestamp": "2025-10-17T17:00:51.075782",
    "response_time": "1.02",
    "context": "{\"function_name\": \"even_Power_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 272,
    "solution": "```python\ndef rear_extract(test_list):\n    # Initialize an empty list to store the rear elements\n    result = []\n    \n    # Iterate over each tuple in the input list\n    for tup in test_list:\n        # Append the last element of the tuple to the result list\n        result.append(tup[-1])\n    \n    # Return the list of rear elements\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n### Signature\ndef rear_extract(test_list):",
    "timestamp": "2025-10-17T17:00:52.240576",
    "response_time": "1.16",
    "context": "{\"function_name\": \"rear_extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 273,
    "solution": "```python\ndef substract_elements(test_tup1, test_tup2):\n    # Check if both tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # Subtract elements of the first tuple by the elements of the second tuple\n    result = tuple(a - b for a, b in zip(test_tup1, test_tup2))\n    \n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n### Signature\ndef substract_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:00:53.657122",
    "response_time": "1.41",
    "context": "{\"function_name\": \"substract_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 274,
    "solution": "```python\nfrom math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            total_sum += comb(n, i)\n    return total_sum\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n### Signature\ndef even_binomial_Coeff_Sum( n):",
    "timestamp": "2025-10-17T17:00:54.564124",
    "response_time": "0.91",
    "context": "{\"function_name\": \"even_binomial_Coeff_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 276,
    "solution": "```python\n###START===\nimport math\n\ndef volume_cylinder(r, h):\n    return math.pi * r**2 * h\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n\n### Signature\ndef volume_cylinder(r,h):",
    "timestamp": "2025-10-17T17:00:55.157562",
    "response_time": "0.59",
    "context": "{\"function_name\": \"volume_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 277,
    "solution": "```python\ndef dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n### Signature\ndef dict_filter(dict,n):",
    "timestamp": "2025-10-17T17:00:55.723703",
    "response_time": "0.56",
    "context": "{\"function_name\": \"dict_filter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 278,
    "solution": "```python\ndef count_first_elements(test_tup):\n    # Initialize a counter\n    count = 0\n    \n    # Iterate through the tuple\n    for element in test_tup:\n        # If the element is a tuple, break the loop\n        if isinstance(element, tuple):\n            break\n        # Increment the counter for each non-tuple element\n        count += 1\n    \n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n\n### Signature\ndef count_first_elements(test_tup):",
    "timestamp": "2025-10-17T17:00:56.946178",
    "response_time": "1.22",
    "context": "{\"function_name\": \"count_first_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 279,
    "solution": "```python\n###START===\nfrom math import sqrt\n\ndef is_num_decagonal(n):\n    # Check if n is a positive integer\n    if n <= 0:\n        return False\n    \n    # Calculate the decagonal number using the formula\n    decagonal_number = (5 * n * n - 4) / 2\n    \n    # Check if the calculated number is an integer\n    return decagonal_number.is_integer()\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth decagonal number.\n\n### Signature\ndef is_num_decagonal(n):",
    "timestamp": "2025-10-17T17:00:58.257799",
    "response_time": "1.31",
    "context": "{\"function_name\": \"is_num_decagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 280,
    "solution": "```python\ndef sequential_search(dlist, item):\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n### Signature\ndef sequential_search(dlist, item):",
    "timestamp": "2025-10-17T17:00:58.973207",
    "response_time": "0.71",
    "context": "{\"function_name\": \"sequential_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 281,
    "solution": "```python\n###START===\nfrom typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check if the elements of a given list are unique or not.\n\n### Signature\ndef all_unique(test_list):",
    "timestamp": "2025-10-17T17:00:59.618672",
    "response_time": "0.64",
    "context": "{\"function_name\": \"all_unique\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 282,
    "solution": "```python\ndef sub_list(nums1, nums2):\n    # Check if both lists have the same length\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    # Subtract corresponding elements of the lists\n    result = [a - b for a, b in zip(nums1, nums2)]\n    \n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to subtract two lists element-wise.\n\n### Signature\ndef sub_list(nums1,nums2):",
    "timestamp": "2025-10-17T17:01:00.818749",
    "response_time": "1.20",
    "context": "{\"function_name\": \"sub_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 283,
    "solution": "```python\n###START===\nfrom collections import Counter\n\ndef validate(n):\n    # Convert the integer to a string to iterate over each digit\n    digits = str(n)\n    \n    # Count the frequency of each digit\n    digit_count = Counter(digits)\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if int(digit) < count:\n            return False\n    \n    return True\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n### Signature\ndef validate(n):",
    "timestamp": "2025-10-17T17:01:02.258483",
    "response_time": "1.44",
    "context": "{\"function_name\": \"validate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 284,
    "solution": "```python\ndef check_element(lst, element):\n    return all(item == element for item in lst)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\n### Signature\ndef check_element(list,element):",
    "timestamp": "2025-10-17T17:01:02.725107",
    "response_time": "0.46",
    "context": "{\"function_name\": \"check_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 285,
    "solution": "```python\nimport re\n\ndef text_match_two_three(text):\n    # Use regular expression to find the pattern 'ab{2,3}'\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n### Signature\ndef text_match_two_three(text):",
    "timestamp": "2025-10-17T17:01:03.537439",
    "response_time": "0.81",
    "context": "{\"function_name\": \"text_match_two_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 286,
    "solution": "```python\nfrom typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    # Helper function to find the maximum subarray sum in a single array\n    def max_sub_array_sum(arr: List[int]) -> int:\n        max_current = max_global = arr[0]\n        for i in range(1, len(arr)):\n            max_current = max(arr[i], max_current + arr[i])\n            if max_current > max_global:\n                max_global = max_current\n        return max_global\n\n    # Calculate the maximum subarray sum for the repeated array\n    total_sum = sum(a) * k\n    max_sum = max_sub_array_sum(a)\n    max_sum_repeated = max_sum\n\n    # Check for cases where the maximum subarray sum is split across the repeated array\n    for i in range(1, n):\n        max_sum_repeated = max(max_sum_repeated, max_sub_array_sum(a[i:] + a[:i]))\n\n    return max_sum_repeated\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n### Signature\ndef max_sub_array_sum_repeated(a, n, k):",
    "timestamp": "2025-10-17T17:01:06.421765",
    "response_time": "2.88",
    "context": "{\"function_name\": \"max_sub_array_sum_repeated\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 287,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(2, 2*n+1, 2))\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n### Signature\ndef square_Sum(n):",
    "timestamp": "2025-10-17T17:01:07.209693",
    "response_time": "0.79",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 290,
    "solution": "```python\nfrom typing import List\n\ndef max_length(list1: List[List[int]]) -> List[int]:\n    if not list1:\n        return []\n\n    max_length_list = list1[0]\n    for sublist in list1[1:]:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n\n    return max_length_list\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the list of maximum length in a list of lists.\n\n### Signature\ndef max_length(list1):",
    "timestamp": "2025-10-17T17:01:08.296911",
    "response_time": "1.08",
    "context": "{\"function_name\": \"max_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 291,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    # Initialize the base cases\n    same = k  # Number of ways to paint the first two posts with the same color\n    diff = k * (k - 1)  # Number of ways to paint the first two posts with different colors\n    \n    # Iterate from 3 to n to find the number of ways to paint the rest of the posts\n    for i in range(2, n):\n        # Calculate the number of ways to paint the current post with the same color as the previous one\n        same_next = diff\n        # Calculate the number of ways to paint the current post with a different color than the previous one\n        diff_next = same * (k - 1) + diff * (k - 1)\n        \n        # Update the same and diff variables for the next iteration\n        same = same_next\n        diff = diff_next\n    \n    # The total number of ways to paint the fence is the sum of ways with the same and different colors\n    return same + diff\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n### Signature\ndef count_no_of_ways(n, k):",
    "timestamp": "2025-10-17T17:01:11.798602",
    "response_time": "3.50",
    "context": "{\"function_name\": \"count_no_of_ways\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 292,
    "solution": "```python\nfrom math import floor\n\ndef find(n, m):\n    if m == 0:\n        raise ValueError(\"Division by zero is not allowed.\")\n    return floor(n / m)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n### Signature\ndef find(n,m):",
    "timestamp": "2025-10-17T17:01:12.483576",
    "response_time": "0.68",
    "context": "{\"function_name\": \"find\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 293,
    "solution": "```python\nfrom math import sqrt\n\ndef otherside_rightangle(w, h):\n    # Calculate the third side using the Pythagorean theorem\n    return sqrt(w**2 + h**2)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the third side of a right angled triangle.\n\n### Signature\ndef otherside_rightangle(w,h):",
    "timestamp": "2025-10-17T17:01:13.235948",
    "response_time": "0.75",
    "context": "{\"function_name\": \"otherside_rightangle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 294,
    "solution": "```python\ndef max_val(listval):\n    if not listval:\n        return None  # Return None if the list is empty\n\n    max_value = listval[0]  # Initialize max_value with the first element of the list\n\n    for item in listval:\n        if item > max_value:\n            max_value = item  # Update max_value if a larger item is found\n\n    return max_value\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum value in a given heterogeneous list.\n\n### Signature\ndef max_val(listval):",
    "timestamp": "2025-10-17T17:01:14.458375",
    "response_time": "1.22",
    "context": "{\"function_name\": \"max_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 295,
    "solution": "```python\ndef sum_div(number):\n    if number <= 0:\n        return 0\n    total = 1  # 1 is a divisor of every number\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            total += i\n            if i != number // i:\n                total += number // i\n    return total\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to return the sum of all divisors of a number.\n\n### Signature\ndef sum_div(number):",
    "timestamp": "2025-10-17T17:01:15.710153",
    "response_time": "1.25",
    "context": "{\"function_name\": \"sum_div\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 296,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef get_Inv_Count(arr):\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += (mid - i + 1)\n                j += 1\n            k += 1\n\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count inversions in an array.\n\n### Signature\ndef get_Inv_Count(arr):",
    "timestamp": "2025-10-17T17:01:20.151895",
    "response_time": "4.44",
    "context": "{\"function_name\": \"get_Inv_Count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 297,
    "solution": "```python\ndef flatten_list(list1):\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to flatten a given nested list structure.\n\n### Signature\ndef flatten_list(list1):",
    "timestamp": "2025-10-17T17:01:20.940121",
    "response_time": "0.79",
    "context": "{\"function_name\": \"flatten_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 299,
    "solution": "```python\nfrom typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[int, int]]) -> int:\n    # Initialize the maximum aggregate to a very small number\n    max_aggregate = float('-inf')\n    \n    # Iterate through each tuple in the list\n    for student, aggregate in stdata:\n        # Update the maximum aggregate if the current aggregate is greater\n        if aggregate > max_aggregate:\n            max_aggregate = aggregate\n    \n    return max_aggregate\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\n### Signature\ndef max_aggregate(stdata):",
    "timestamp": "2025-10-17T17:01:22.396117",
    "response_time": "1.45",
    "context": "{\"function_name\": \"max_aggregate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 300,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef count_binary_seq(n):\n    # Initialize the count of valid sequences\n    count = 0\n    \n    # Iterate over all possible binary sequences of length 2n\n    for i in range(2 ** (2 * n)):\n        # Convert the number to a binary string and pad with leading zeros\n        binary_str = format(i, '0' + str(2 * n) + 'b')\n        \n        # Calculate the sum of the first n bits and the last n bits\n        sum_first_n = sum(int(bit) for bit in binary_str[:n])\n        sum_last_n = sum(int(bit) for bit in binary_str[n:])\n        \n        # If the sums are equal, increment the count\n        if sum_first_n == sum_last_n:\n            count += 1\n    \n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n### Signature\ndef count_binary_seq(n):",
    "timestamp": "2025-10-17T17:01:24.812192",
    "response_time": "2.41",
    "context": "{\"function_name\": \"count_binary_seq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 301,
    "solution": "```python\ndef dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the depth of a dictionary.\n\n### Signature\ndef dict_depth(d):",
    "timestamp": "2025-10-17T17:01:25.520299",
    "response_time": "0.71",
    "context": "{\"function_name\": \"dict_depth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 304,
    "solution": "```python\nfrom typing import List\n\ndef find_Element(arr: List[int], ranges: List[List[int]], rotations: List[int], index: int) -> int:\n    # Calculate the effective rotation for each range\n    effective_rotations = [rotations[i] % len(arr) for i in range(len(ranges))]\n    \n    # Find the effective index for each range\n    effective_indices = [(index + effective_rotations[i]) % len(arr) for i in range(len(ranges))]\n    \n    # Find the element at the effective index\n    result = arr[effective_indices[0]]\n    \n    # Check if the element is in any of the ranges\n    for i in range(1, len(ranges)):\n        if effective_indices[i] == effective_indices[0]:\n            result = arr[effective_indices[i]]\n    \n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find element at a given index after number of rotations.\n\n### Signature\ndef find_Element(arr,ranges,rotations,index) :",
    "timestamp": "2025-10-17T17:01:27.840394",
    "response_time": "2.32",
    "context": "{\"function_name\": \"find_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 305,
    "solution": "```python\nfrom typing import List\n\ndef start_withp(words: List[str]) -> List[str]:\n    return [word for word in words if word.startswith('p')]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to return two words from a list of words starting with letter 'p'.\n\n### Signature\ndef start_withp(words):",
    "timestamp": "2025-10-17T17:01:28.590677",
    "response_time": "0.75",
    "context": "{\"function_name\": \"start_withp\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 306,
    "solution": "```python\n###START===\nfrom typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if index >= n or k >= n:\n        return 0\n    \n    # Initialize the dp array where dp[i] will store the maximum sum of increasing subsequence ending at index i\n    dp = [0] * n\n    \n    # Initialize the result with the value at index k\n    result = a[k]\n    \n    # Iterate over the array from index k to n-1\n    for i in range(k, n):\n        # Initialize the maximum sum for the current index\n        max_sum = 0\n        # Iterate over the array from 0 to i-1\n        for j in range(i):\n            # Check if the current element is greater than the previous element\n            if a[j] < a[i]:\n                # Update the maximum sum\n                max_sum = max(max_sum, dp[j])\n        # Update the dp array with the maximum sum found\n        dp[i] = max_sum + a[i]\n        # Update the result with the maximum sum found so far\n        result = max(result, dp[i])\n    \n    return result\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\n### Signature\ndef max_sum_increasing_subseq(a, n, index, k):",
    "timestamp": "2025-10-17T17:01:31.920809",
    "response_time": "3.33",
    "context": "{\"function_name\": \"max_sum_increasing_subseq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 307,
    "solution": "```python\ndef colon_tuplex(tuplex, m, n):\n    # Check if the tuple has at least m elements\n    if len(tuplex) < m:\n        return \"Tuple does not have enough elements\"\n    \n    # Check if the tuple has at least n elements\n    if len(tuplex) < n:\n        return \"Tuple does not have enough elements\"\n    \n    # Get the element at index m\n    element_m = tuplex[m]\n    \n    # Get the element at index n\n    element_n = tuplex[n]\n    \n    # Return the colon of the two elements\n    return f\"{element_m}:{element_n}\"\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to get a colon of a tuple.\n\n### Signature\ndef colon_tuplex(tuplex,m,n):",
    "timestamp": "2025-10-17T17:01:33.765317",
    "response_time": "1.84",
    "context": "{\"function_name\": \"colon_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 308,
    "solution": "```python\nfrom typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    # Sort nums1 in descending order\n    nums1.sort(reverse=True)\n    # Sort nums2 in descending order\n    nums2.sort(reverse=True)\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate through the sorted lists to find the largest products\n    for i in range(N):\n        # Multiply the largest elements from both lists\n        product = nums1[i] * nums2[i]\n        # Append the product to the result list\n        result.append(product)\n    \n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n### Signature\ndef large_product(nums1, nums2, N):",
    "timestamp": "2025-10-17T17:01:36.205521",
    "response_time": "2.44",
    "context": "{\"function_name\": \"large_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 309,
    "solution": "```python\ndef maximum(a, b):\n    return a if a > b else b\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the maximum of two numbers.\n\n### Signature\ndef maximum(a,b):",
    "timestamp": "2025-10-17T17:01:38.390400",
    "response_time": "2.18",
    "context": "{\"function_name\": \"maximum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 310,
    "solution": "```python\ndef string_to_tuple(str1):\n    return tuple(str1)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a given string to a tuple of characters.\n\n### Signature\ndef string_to_tuple(str1):",
    "timestamp": "2025-10-17T17:01:39.911979",
    "response_time": "1.52",
    "context": "{\"function_name\": \"string_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 311,
    "solution": "```python\ndef set_left_most_unset_bit(n):\n    # Find the position of the leftmost unset bit\n    unset_bit_position = n & -n\n    # Set the leftmost unset bit\n    return n | unset_bit_position\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to set the left most unset bit.\n\n### Signature\ndef set_left_most_unset_bit(n):",
    "timestamp": "2025-10-17T17:01:40.713811",
    "response_time": "0.80",
    "context": "{\"function_name\": \"set_left_most_unset_bit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 312,
    "solution": "```python\n###START===\nimport math\n\ndef volume_cone(r, h):\n    # Calculate the volume of a cone using the formula: (1/3) * \u03c0 * r^2 * h\n    return (1/3) * math.pi * r**2 * h\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the volume of a cone.\n\n### Signature\ndef volume_cone(r,h):",
    "timestamp": "2025-10-17T17:01:41.692583",
    "response_time": "0.98",
    "context": "{\"function_name\": \"volume_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 388,
    "solution": "```python\n###START===\nimport math\n\ndef highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    return 2 ** math.floor(math.log2(n))\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\n### Signature\ndef highest_Power_of_2(n):",
    "timestamp": "2025-10-17T17:01:42.425091",
    "response_time": "0.73",
    "context": "{\"function_name\": \"highest_Power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 389,
    "solution": "```python\n===START===\nfrom typing import *\nfrom collections import *\n\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n'th lucas number.\n\n### Signature\ndef find_lucas(n):",
    "timestamp": "2025-10-17T17:01:43.705938",
    "response_time": "1.28",
    "context": "{\"function_name\": \"find_lucas\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 390,
    "solution": "```python\ndef add_string(list_, string):\n    return [f\"{string}{element}\" for element in list_]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to apply a given format string to all of the elements in a list.\n\n### Signature\ndef add_string(list_, string):",
    "timestamp": "2025-10-17T17:01:44.232995",
    "response_time": "0.52",
    "context": "{\"function_name\": \"add_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 391,
    "solution": "```python\nfrom typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[str]) -> Dict[str, Dict[str, str]]:\n    if len(l1) != len(l2) or len(l2) != len(l3):\n        raise ValueError(\"All lists must have the same length.\")\n    \n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n    \n    return nested_dict\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert more than one list to nested dictionary.\n\n### Signature\ndef convert_list_dictionary(l1, l2, l3):",
    "timestamp": "2025-10-17T17:01:45.778626",
    "response_time": "1.54",
    "context": "{\"function_name\": \"convert_list_dictionary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 392,
    "solution": "```python\ndef get_max_sum(n):\n    # Base case: if n is less than or equal to 5, return n itself\n    if n <= 5:\n        return n\n    \n    # Initialize a list to store the maximum sums for each number up to n\n    max_sums = [0] * (n + 1)\n    \n    # Fill the list with the maximum sums using dynamic programming\n    for i in range(6, n + 1):\n        max_sums[i] = max(max_sums[i // 2] + max_sums[i // 3] + max_sums[i // 4] + max_sums[i // 5], i)\n    \n    # Return the maximum sum for n\n    return max_sums[n]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n### Signature\ndef get_max_sum (n):",
    "timestamp": "2025-10-17T17:01:47.900384",
    "response_time": "2.12",
    "context": "{\"function_name\": \"get_max_sum \"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 393,
    "solution": "```python\ndef max_length_list(input_list):\n    if not input_list:\n        return None  # Return None if the input list is empty\n\n    max_length = 0\n    longest_list = None\n\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            longest_list = lst\n\n    return longest_list\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the list with maximum length.\n\n### Signature\ndef max_length_list(input_list):",
    "timestamp": "2025-10-17T17:01:49.050078",
    "response_time": "1.15",
    "context": "{\"function_name\": \"max_length_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 394,
    "solution": "```python\ndef check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if given tuple contains no duplicates.\n\n### Signature\ndef check_distinct(test_tup):",
    "timestamp": "2025-10-17T17:01:49.578906",
    "response_time": "0.53",
    "context": "{\"function_name\": \"check_distinct\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 395,
    "solution": "```python\n###START===\nfrom collections import Counter\n\ndef first_non_repeating_character(str1):\n    # Count the occurrences of each character in the string\n    char_count = Counter(str1)\n    \n    # Iterate through the string to find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the first non-repeated character in a given string.\n\n### Signature\ndef first_non_repeating_character(str1):",
    "timestamp": "2025-10-17T17:01:50.971919",
    "response_time": "1.39",
    "context": "{\"function_name\": \"first_non_repeating_character\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 396,
    "solution": "```python\ndef check_char(string):\n    if not string:\n        return False\n    return string[0] == string[-1]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given string starts and ends with the same character or not.\n\n### Signature\ndef check_char(string):",
    "timestamp": "2025-10-17T17:01:51.505239",
    "response_time": "0.53",
    "context": "{\"function_name\": \"check_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 397,
    "solution": "```python\ndef median_numbers(a, b, c):\n    # Sort the numbers\n    numbers = sorted([a, b, c])\n    # Return the middle number\n    return numbers[1]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the median of three numbers.\n\n### Signature\ndef median_numbers(a,b,c):",
    "timestamp": "2025-10-17T17:01:52.209340",
    "response_time": "0.70",
    "context": "{\"function_name\": \"median_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 398,
    "solution": "```python\ndef sum_of_digits(nums):\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to compute the sum of digits of each number of a given list.\n\n### Signature\ndef sum_of_digits(nums):",
    "timestamp": "2025-10-17T17:01:52.758408",
    "response_time": "0.55",
    "context": "{\"function_name\": \"sum_of_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 399,
    "solution": "```python\ndef bitwise_xor(test_tup1, test_tup2):\n    # Initialize an empty list to store the results\n    res = []\n    \n    # Iterate over the elements of the tuples\n    for i, j in zip(test_tup1, test_tup2):\n        # Perform bitwise XOR operation and append the result to the list\n        res.append(i ^ j)\n    \n    # Convert the list to a tuple and return it\n    return tuple(res)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\n### Signature\ndef bitwise_xor(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:01:54.136644",
    "response_time": "1.38",
    "context": "{\"function_name\": \"bitwise_xor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 400,
    "solution": "```python\nfrom typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple]) -> int:\n    # Use a set to store unique tuples\n    unique_tuples = set(test_list)\n    # Return the number of unique tuples\n    return len(unique_tuples)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract the number of unique tuples in the given list.\n\n### Signature\ndef extract_freq(test_list):",
    "timestamp": "2025-10-17T17:01:55.018602",
    "response_time": "0.88",
    "context": "{\"function_name\": \"extract_freq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 401,
    "solution": "```python\n===START===\nfrom typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int, ...], ...], test_tup2: Tuple[Tuple[int, ...], ...]) -> Tuple[Tuple[int, ...], ...]:\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over the elements of the first tuple\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        # Perform element-wise addition of the tuples\n        added_tuple = tuple(a + b for a, b in zip(tup1, tup2))\n        # Append the result to the list\n        result.append(added_tuple)\n    \n    # Convert the list to a tuple and return\n    return tuple(result)\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n### Signature\ndef add_nested_tuples(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:01:57.251196",
    "response_time": "2.23",
    "context": "{\"function_name\": \"add_nested_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 404,
    "solution": "```python\ndef minimum(a, b):\n    return a if a < b else b\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the minimum of two numbers.\n\n### Signature\ndef minimum(a,b):",
    "timestamp": "2025-10-17T17:01:57.685032",
    "response_time": "0.43",
    "context": "{\"function_name\": \"minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 405,
    "solution": "```python\n###START===\ndef check_tuplex(tuplex, tuple1):\n    # Check if tuple1 is a subset of tuplex\n    return tuple1 in tuplex\n\n# Example usage:\ntuplex = (1, 2, 3, 4, 5)\ntuple1 = (2, 3)\nprint(check_tuplex(tuplex, tuple1))  # Output: True\n\ntuple1 = (6, 7)\nprint(check_tuplex(tuplex, tuple1))  # Output: False\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether an element exists within a tuple.\n\n### Signature\ndef check_tuplex(tuplex,tuple1):",
    "timestamp": "2025-10-17T17:01:59.315039",
    "response_time": "1.63",
    "context": "{\"function_name\": \"check_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 406,
    "solution": "```python\n###START===\ndef find_Parity(x):\n    # Check if the number is odd by using the modulus operator\n    return x % 2 != 0\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find whether the parity of a given number is odd.\n\n### Signature\ndef find_Parity(x):",
    "timestamp": "2025-10-17T17:01:59.973905",
    "response_time": "0.66",
    "context": "{\"function_name\": \"find_Parity\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 407,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Find the first digit from the right that is smaller than the digit immediately to its right\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    # If no such digit is found, the number is the largest possible permutation\n    if i == -1:\n        return -1\n    \n    # Find the smallest digit to the right of the found digit that is larger than it\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Sort the digits to the right of the found digit in ascending order\n    digits[i + 1:] = sorted(digits[i + 1:])\n    \n    # Convert the list of digits back to an integer\n    return int(''.join(digits))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\n### Signature\ndef rearrange_bigger(n):",
    "timestamp": "2025-10-17T17:02:03.093813",
    "response_time": "3.12",
    "context": "{\"function_name\": \"rearrange_bigger\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 408,
    "solution": "```python\nfrom heapq import heappush, heappop\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2 or k <= 0:\n        return []\n\n    min_heap = []\n    result = []\n\n    # Initialize the heap with the first element of each pair\n    for i in range(min(k, len(nums1))):\n        heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n\n    while min_heap and len(result) < k:\n        _, i, j = heappop(min_heap)\n        result.append((nums1[i], nums2[j]))\n\n        # If there is a next element in nums2, add the next pair to the heap\n        if j + 1 < len(nums2):\n            heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))\n\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n### Signature\ndef k_smallest_pairs(nums1, nums2, k):",
    "timestamp": "2025-10-17T17:02:05.684808",
    "response_time": "2.59",
    "context": "{\"function_name\": \"push\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 409,
    "solution": "```python\nfrom typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    min_product = float('inf')\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\n### Signature\ndef min_product_tuple(list1):",
    "timestamp": "2025-10-17T17:02:06.785483",
    "response_time": "1.10",
    "context": "{\"function_name\": \"min_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 410,
    "solution": "```python\ndef min_val(listval):\n    if not listval:\n        raise ValueError(\"The list is empty\")\n    \n    min_value = listval[0]\n    for item in listval:\n        if isinstance(item, (int, float)) and (min_value is None or item < min_value):\n            min_value = item\n    return min_value\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the minimum value in a given heterogeneous list.\n\n### Signature\ndef min_val(listval):",
    "timestamp": "2025-10-17T17:02:07.897967",
    "response_time": "1.11",
    "context": "{\"function_name\": \"min_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 411,
    "solution": "```python\ndef snake_to_camel(word):\n    # Split the word by underscores\n    parts = word.split('_')\n    # Capitalize the first letter of each part and join them together\n    return ''.join(part.capitalize() for part in parts)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert the given snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
    "timestamp": "2025-10-17T17:02:08.747316",
    "response_time": "0.85",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 412,
    "solution": "```python\ndef remove_odd(l):\n    return [x for x in l if x % 2 == 0]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove odd numbers from a given list.\n\n### Signature\ndef remove_odd(l):",
    "timestamp": "2025-10-17T17:02:09.248508",
    "response_time": "0.50",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 413,
    "solution": "```python\ndef extract_nth_element(list1, n):\n    # Check if the list is empty\n    if not list1:\n        return None\n    \n    # Check if n is within the valid range\n    if n < 0 or n >= len(list1):\n        return None\n    \n    # Extract the nth element from each tuple\n    result = [t[n] for t in list1]\n    \n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract the nth element from a given list of tuples.\n\n### Signature\ndef extract_nth_element(list1, n):",
    "timestamp": "2025-10-17T17:02:10.534242",
    "response_time": "1.28",
    "context": "{\"function_name\": \"extract_nth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 414,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef overlapping(list1, list2):\n    # Convert both lists to sets to remove duplicates and allow for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Check if there is any intersection between the two sets\n    return not set1.isdisjoint(set2)\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\n### Signature\ndef overlapping(list1,list2):",
    "timestamp": "2025-10-17T17:02:11.720429",
    "response_time": "1.18",
    "context": "{\"function_name\": \"overlapping\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 415,
    "solution": "```python\n###START===\nfrom typing import List\n\ndef max_Product(arr: List[int]) -> int:\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements.\")\n    \n    # Initialize the maximum and minimum products\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    result = arr[0] * arr[1]\n    \n    for i in range(2, len(arr)):\n        # If the current element is positive, swap max_product and min_product\n        if arr[i] > 0:\n            max_product, min_product = max_product * arr[i], min_product * arr[i]\n        else:\n            # If the current element is negative, swap max_product and min_product\n            max_product, min_product = min_product * arr[i], max_product * arr[i]\n        \n        # Update the result with the maximum product found so far\n        result = max(result, max_product)\n    \n    return result\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find a pair with highest product from a given array of integers.\n\n### Signature\ndef max_Product(arr):",
    "timestamp": "2025-10-17T17:02:14.569075",
    "response_time": "2.85",
    "context": "{\"function_name\": \"max_Product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 417,
    "solution": "```python\nfrom typing import List, Tuple\n\ndef group_tuples(Input: List[Tuple]) -> Tuple:\n    if not Input:\n        return ()\n    \n    # Initialize the first element as the first element of the first tuple\n    common_first_element = Input[0][0]\n    \n    # Iterate through the list of tuples\n    for tup in Input:\n        # Check if the current tuple's first element matches the common first element\n        if tup[0] != common_first_element:\n            # If not, return an empty tuple\n            return ()\n    \n    # If all tuples have the same first element, return it\n    return (common_first_element,)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find common first element in given list of tuple.\n\n### Signature\ndef group_tuples(Input):",
    "timestamp": "2025-10-17T17:02:16.391417",
    "response_time": "1.82",
    "context": "{\"function_name\": \"group_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 418,
    "solution": "```python\ndef Find_Max(lst):\n    if not lst:\n        return None  # Return None if the list is empty\n\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the element of a list having maximum length.\n\n### Signature\ndef Find_Max(lst):",
    "timestamp": "2025-10-17T17:02:17.439801",
    "response_time": "1.05",
    "context": "{\"function_name\": \"Find_Max\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 419,
    "solution": "```python\ndef round_and_sum(list1):\n    # Round each number in the list\n    rounded_list = [round(num) for num in list1]\n    \n    # Calculate the sum of the rounded numbers\n    total_sum = sum(rounded_list)\n    \n    # Calculate the length of the list\n    list_length = len(list1)\n    \n    # Multiply the total sum by the length of the list\n    result = total_sum * list_length\n    \n    # Print the result\n    print(result)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\n### Signature\ndef round_and_sum(list1):",
    "timestamp": "2025-10-17T17:02:19.011601",
    "response_time": "1.57",
    "context": "{\"function_name\": \"round_and_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 420,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef cube_Sum(n):\n    # Calculate the sum of the first n even natural numbers\n    even_sum = sum(2 * i for i in range(1, n + 1))\n    # Calculate the cube of the sum\n    cube = even_sum ** 3\n    return cube\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the cube sum of first n even natural numbers.\n\n### Signature\ndef cube_Sum(n):",
    "timestamp": "2025-10-17T17:02:20.194587",
    "response_time": "1.18",
    "context": "{\"function_name\": \"cube_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 421,
    "solution": "```python\ndef concatenate_tuple(test_tup):\n    # Initialize an empty string to hold the concatenated result\n    result = \"\"\n    # Iterate over each element in the tuple\n    for element in test_tup:\n        # Concatenate the current element to the result string\n        result += str(element)\n    # Return the concatenated result\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to concatenate each element of tuple by the delimiter.\n\n### Signature\ndef concatenate_tuple(test_tup):",
    "timestamp": "2025-10-17T17:02:21.295173",
    "response_time": "1.10",
    "context": "{\"function_name\": \"concatenate_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 422,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average\n    average = sum_of_cubes / n\n    return average\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the average of cubes of first n natural numbers.\n\n### Signature\ndef find_Average_Of_Cube(n):",
    "timestamp": "2025-10-17T17:02:22.479969",
    "response_time": "1.18",
    "context": "{\"function_name\": \"find_Average_Of_Cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 424,
    "solution": "```python\ndef extract_rear(test_tuple):\n    # Initialize an empty list to store the rear index elements\n    rear_elements = []\n    \n    # Iterate over each string in the tuple\n    for string in test_tuple:\n        # Check if the string is not empty\n        if string:\n            # Append the last character of the string to the list\n            rear_elements.append(string[-1])\n    \n    # Return the list of rear index elements\n    return rear_elements\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract only the rear index element of each string in the given tuple.\n\n### Signature\ndef extract_rear(test_tuple):",
    "timestamp": "2025-10-17T17:02:23.841542",
    "response_time": "1.36",
    "context": "{\"function_name\": \"extract_rear\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 425,
    "solution": "```python\ndef count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of sublists containing a particular element.\n\n### Signature\ndef count_element_in_list(list1, x):",
    "timestamp": "2025-10-17T16:58:11.773329",
    "response_time": "1.90",
    "context": "{\"function_name\": \"count_element_in_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 426,
    "solution": "```python\ndef filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to filter odd numbers.\n\n### Signature\ndef filter_oddnumbers(nums):",
    "timestamp": "2025-10-17T16:58:12.394542",
    "response_time": "0.62",
    "context": "{\"function_name\": \"filter_oddnumbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 427,
    "solution": "```python\nfrom datetime import datetime\n\ndef change_date_format(dt):\n    # Parse the input date string\n    date_obj = datetime.strptime(dt, '%Y-%m-%d')\n    # Format the date to dd-mm-yyyy\n    formatted_date = date_obj.strftime('%d-%m-%Y')\n    return formatted_date\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n### Signature\ndef change_date_format(dt):",
    "timestamp": "2025-10-17T16:58:13.392407",
    "response_time": "1.00",
    "context": "{\"function_name\": \"change_date_format\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 428,
    "solution": "```python\ndef shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort the given array by using shell sort.\n\n### Signature\ndef shell_sort(my_list):",
    "timestamp": "2025-10-17T16:58:14.877765",
    "response_time": "1.48",
    "context": "{\"function_name\": \"shell_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 429,
    "solution": "```python\n===START===\nfrom typing import Tuple\n\ndef and_tuples(test_tup1: Tuple, test_tup2: Tuple) -> Tuple:\n    # Extracting elementwise and tuples from the given two tuples\n    result = tuple(a & b for a, b in zip(test_tup1, test_tup2))\n    return result\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\n### Signature\ndef and_tuples(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T16:58:15.995832",
    "response_time": "1.12",
    "context": "{\"function_name\": \"and_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 430,
    "solution": "```python\n###START===\nimport math\n\ndef parabola_directrix(a, b, c):\n    # Calculate the directrix using the formula for a parabola in standard form\n    # y = ax^2 + bx + c\n    # Directrix: y = -1/(4a)\n    return -1 / (4 * a)\n\n# Example usage:\n# a = 1, b = 0, c = -4\n# The directrix of the parabola y = x^2 - 4 is y = 1\nprint(parabola_directrix(1, 0, -4))  # Output: 1.0\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the directrix of a parabola.\n\n### Signature\ndef parabola_directrix(a, b, c):",
    "timestamp": "2025-10-17T16:58:17.951452",
    "response_time": "1.95",
    "context": "{\"function_name\": \"parabola_directrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 431,
    "solution": "```python\ndef common_element(list1, list2):\n    # Convert the first list to a set for O(1) average time complexity lookups\n    set1 = set(list1)\n    \n    # Iterate through the second list and check if any element is in the set\n    for element in list2:\n        if element in set1:\n            return True\n    \n    # If no common element is found, return False\n    return False\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes two lists and returns true if they have at least one common element.\n\n### Signature\ndef common_element(list1, list2):",
    "timestamp": "2025-10-17T16:58:19.277522",
    "response_time": "1.33",
    "context": "{\"function_name\": \"common_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 432,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef median_trapezium(base1, base2, height):\n    # Calculate the median length of the trapezium\n    median_length = (base1 + base2) / 2\n    return median_length\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the median length of a trapezium.\n\n### Signature\ndef median_trapezium(base1,base2,height):",
    "timestamp": "2025-10-17T16:58:20.203153",
    "response_time": "0.92",
    "context": "{\"function_name\": \"median_trapezium\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 433,
    "solution": "```python\ndef check_greater(arr, number):\n    # Iterate through each element in the array\n    for element in arr:\n        # Check if the current element is greater than the given number\n        if element > number:\n            return True\n    # If no element is greater than the number, return False\n    return False\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\n### Signature\ndef check_greater(arr, number):",
    "timestamp": "2025-10-17T16:58:21.274631",
    "response_time": "1.07",
    "context": "{\"function_name\": \"check_greater\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 434,
    "solution": "```python\nimport re\n\ndef text_match_one(text):\n    # Use regular expression to find a string that starts with 'a' followed by one or more 'b's\n    pattern = r'^a+b$'\n    return bool(re.search(pattern, text))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by one or more b's.\n\n### Signature\ndef text_match_one(text):",
    "timestamp": "2025-10-17T16:58:22.135215",
    "response_time": "0.86",
    "context": "{\"function_name\": \"text_match_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 435,
    "solution": "```python\n###START===\ndef last_Digit(n) :\n    return abs(n) % 10\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the last digit of a given number.\n\n### Signature\ndef last_Digit(n) :",
    "timestamp": "2025-10-17T16:58:22.653766",
    "response_time": "0.52",
    "context": "{\"function_name\": \"last_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 436,
    "solution": "```python\ndef neg_nos(list1):\n    return [num for num in list1 if num < 0]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to return the negative numbers in a list.\n\n### Signature\ndef neg_nos(list1):",
    "timestamp": "2025-10-17T16:58:23.171141",
    "response_time": "0.52",
    "context": "{\"function_name\": \"neg_nos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 437,
    "solution": "```python\ndef remove_odd(str1):\n    return ''.join([char for char in str1 if char.isalpha() or char.isdigit()])\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove odd characters in a string.\n\n### Signature\ndef remove_odd(str1):",
    "timestamp": "2025-10-17T16:58:23.738050",
    "response_time": "0.57",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 438,
    "solution": "```python\nfrom typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    count = 0\n    for (a, b) in test_list:\n        if (b, a) in test_list:\n            count += 1\n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to count bidirectional tuple pairs.\n\n### Signature\ndef count_bidirectional(test_list):",
    "timestamp": "2025-10-17T16:58:24.739457",
    "response_time": "1.00",
    "context": "{\"function_name\": \"count_bidirectional\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 439,
    "solution": "```python\ndef multiple_to_single(L):\n    # Convert each integer in the list to a string\n    str_list = [str(num) for num in L]\n    # Join the string representations with no separator\n    result = ''.join(str_list)\n    # Convert the resulting string back to an integer\n    return int(result)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to join a list of multiple integers into a single integer.\n\n### Signature\ndef multiple_to_single(L):",
    "timestamp": "2025-10-17T16:58:25.764805",
    "response_time": "1.02",
    "context": "{\"function_name\": \"multiple_to_single\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 440,
    "solution": "```python\nimport re\n\ndef find_adverb_position(text):\n    # Regular expression to find adverbs\n    adverb_pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(adverb_pattern, text)\n    \n    # List to store the adverbs and their positions\n    adverbs_with_positions = []\n    \n    # Iterate over the matches to get adverbs and their positions\n    for match in matches:\n        adverb = match.group()\n        position = match.start()\n        adverbs_with_positions.append((adverb, position))\n    \n    return adverbs_with_positions\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the first adverb and their positions in a given sentence.\n\n### Signature\ndef find_adverb_position(text):",
    "timestamp": "2025-10-17T16:58:27.431016",
    "response_time": "1.67",
    "context": "{\"function_name\": \"find_adverb_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 441,
    "solution": "```python\ndef surfacearea_cube(l):\n    # Calculate the surface area of a cube\n    return 6 * l ** 2\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cube of a given size.\n\n### Signature\ndef surfacearea_cube(l):",
    "timestamp": "2025-10-17T16:58:27.972816",
    "response_time": "0.54",
    "context": "{\"function_name\": \"surfacearea_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 442,
    "solution": "```python\ndef positive_count(nums):\n    positive_count = sum(1 for num in nums if num > 0)\n    total_count = len(nums)\n    return positive_count / total_count if total_count > 0 else 0\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the ration of positive numbers in an array of integers.\n\n### Signature\ndef positive_count(nums):",
    "timestamp": "2025-10-17T16:58:28.791663",
    "response_time": "0.82",
    "context": "{\"function_name\": \"positive_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 443,
    "solution": "```python\ndef largest_neg(list1):\n    # Initialize the largest negative number to None\n    largest_neg = None\n    \n    # Iterate through each number in the list\n    for num in list1:\n        # Check if the number is negative\n        if num < 0:\n            # If largest_neg is None or the current number is greater than largest_neg, update largest_neg\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n    \n    # Return the largest negative number found, or None if no negative numbers were found\n    return largest_neg\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the largest negative number from the given list.\n\n### Signature\ndef largest_neg(list1):",
    "timestamp": "2025-10-17T16:58:30.459234",
    "response_time": "1.67",
    "context": "{\"function_name\": \"largest_neg\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 444,
    "solution": "```python\ndef trim_tuple(test_list, K):\n    # Use list comprehension to trim each tuple by K\n    result = [tuple(ele[:K]) for ele in test_list]\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to trim each tuple by k in the given tuple list.\n\n### Signature\ndef trim_tuple(test_list, K):",
    "timestamp": "2025-10-17T16:58:31.174805",
    "response_time": "0.71",
    "context": "{\"function_name\": \"trim_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 445,
    "solution": "```python\ndef index_multiplication(test_tup1, test_tup2):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over the indices of the tuples\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        # Multiply the elements at the current index\n        result.append(test_tup1[i] * test_tup2[i])\n    \n    # Convert the list to a tuple and return\n    return tuple(result)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n### Signature\ndef index_multiplication(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T16:58:32.621335",
    "response_time": "1.45",
    "context": "{\"function_name\": \"index_multiplication\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 446,
    "solution": "```python\nfrom collections import Counter\n\ndef count_Occurrence(tup, lst):\n    # Count the occurrences of each element in the list\n    lst_count = Counter(lst)\n    \n    # Initialize a dictionary to store the count of each element in the tuple\n    tup_count = {}\n    \n    # Iterate over each element in the tuple\n    for element in tup:\n        # If the element is in the list, add its count to the tuple_count dictionary\n        if element in lst_count:\n            tup_count[element] = lst_count[element]\n    \n    return tup_count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the occurence of all elements of list in a tuple.\n\n### Signature\ndef count_Occurrence(tup, lst):",
    "timestamp": "2025-10-17T16:58:34.283365",
    "response_time": "1.66",
    "context": "{\"function_name\": \"count_Occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 447,
    "solution": "```python\ndef cube_nums(nums):\n    return [num ** 3 for num in nums]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find cubes of individual elements in a list.\n\n### Signature\ndef cube_nums(nums):",
    "timestamp": "2025-10-17T16:58:34.731769",
    "response_time": "0.45",
    "context": "{\"function_name\": \"cube_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 448,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef cal_sum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n\n    perrin = [3, 5]\n    for i in range(3, n):\n        next_perrin = perrin[i-2] + perrin[i-3]\n        perrin.append(next_perrin)\n\n    return sum(perrin)\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the sum of perrin numbers.\n\n### Signature\ndef cal_sum(n):",
    "timestamp": "2025-10-17T16:58:36.370733",
    "response_time": "1.64",
    "context": "{\"function_name\": \"cal_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 450,
    "solution": "```python\ndef extract_string(str, l):\n    return str[:l]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract specified size of strings from a given list of string values.\n\n### Signature\ndef extract_string(str, l):",
    "timestamp": "2025-10-17T16:58:36.767375",
    "response_time": "0.40",
    "context": "{\"function_name\": \"extract_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 451,
    "solution": "```python\ndef remove_whitespaces(text1):\n    return text1.replace(\" \", \"\")\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from the given string.\n\n### Signature\ndef remove_whitespaces(text1):",
    "timestamp": "2025-10-17T16:58:37.201709",
    "response_time": "0.43",
    "context": "{\"function_name\": \"remove_whitespaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 452,
    "solution": "```python\ndef loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n### Signature\ndef loss_amount(actual_cost,sale_amount):",
    "timestamp": "2025-10-17T16:58:37.847775",
    "response_time": "0.65",
    "context": "{\"function_name\": \"loss_amount\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 453,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef sumofFactors(n) :\n    sum_even_factors = 0\n    for i in range(2, n + 1, 2):  # Iterate over even numbers only\n        if n % i == 0:\n            sum_even_factors += i\n    return sum_even_factors\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of even factors of a number.\n\n### Signature\ndef sumofFactors(n) :",
    "timestamp": "2025-10-17T16:58:39.012576",
    "response_time": "1.16",
    "context": "{\"function_name\": \"sumofFactors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 454,
    "solution": "```python\nimport re\n\ndef text_match_wordz(text):\n    # Use regular expression to find words containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    return bool(match)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a word containing 'z'.\n\n### Signature\ndef text_match_wordz(text):",
    "timestamp": "2025-10-17T16:58:39.857720",
    "response_time": "0.84",
    "context": "{\"function_name\": \"text_match_wordz\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 455,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef check_monthnumb_number(monthnum2):\n    # Define a set of months that have 31 days\n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    \n    # Check if the given month number is in the set of months with 31 days\n    return monthnum2 in months_with_31_days\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 31 days or not.\n\n### Signature\ndef check_monthnumb_number(monthnum2):",
    "timestamp": "2025-10-17T16:58:41.351008",
    "response_time": "1.49",
    "context": "{\"function_name\": \"check_monthnumb_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 456,
    "solution": "```python\ndef reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to reverse each string in a given list of string values.\n\n### Signature\ndef reverse_string_list(stringlist):",
    "timestamp": "2025-10-17T16:58:41.831758",
    "response_time": "0.48",
    "context": "{\"function_name\": \"reverse_string_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 457,
    "solution": "```python\ndef Find_Min(lst):\n    if not lst:\n        return None  # Return None if the list is empty\n\n    min_length = float('inf')\n    min_sublist = None\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sublist having minimum length.\n\n### Signature\ndef Find_Min(lst):",
    "timestamp": "2025-10-17T16:58:43.015080",
    "response_time": "1.18",
    "context": "{\"function_name\": \"Find_Min\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 458,
    "solution": "```python\n###START===\ndef rectangle_area(l, b):\n    return l * b\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the area of a rectangle.\n\n### Signature\ndef rectangle_area(l,b):",
    "timestamp": "2025-10-17T16:58:43.497137",
    "response_time": "0.48",
    "context": "{\"function_name\": \"rectangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 459,
    "solution": "```python\ndef remove_uppercase(str1):\n    return ''.join(char for char in str1 if not char.isupper())\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove uppercase substrings from a given string.\n\n### Signature\ndef remove_uppercase(str1):",
    "timestamp": "2025-10-17T16:58:43.999717",
    "response_time": "0.50",
    "context": "{\"function_name\": \"remove_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 460,
    "solution": "```python\ndef Extract(lst):\n    return [sublist[0] for sublist in lst]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to get the first element of each sublist.\n\n### Signature\ndef Extract(lst):",
    "timestamp": "2025-10-17T16:58:44.440249",
    "response_time": "0.44",
    "context": "{\"function_name\": \"Extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 461,
    "solution": "```python\ndef upper_ctr(str):\n    return sum(1 for char in str if char.isupper())\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the upper case characters in a given string.\n\n### Signature\ndef upper_ctr(str):",
    "timestamp": "2025-10-17T16:58:44.920147",
    "response_time": "0.48",
    "context": "{\"function_name\": \"upper_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 462,
    "solution": "```python\nfrom itertools import combinations\n\ndef combinations_list(list1):\n    return [list(comb) for comb in combinations(list1, r) for r in range(1, len(list1) + 1)]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find all possible combinations of the elements of a given list.\n\n### Signature\ndef combinations_list(list1):",
    "timestamp": "2025-10-17T16:58:45.673460",
    "response_time": "0.75",
    "context": "{\"function_name\": \"combinations_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 463,
    "solution": "```python\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n\n    max_product = min_product = result = arr[0]\n\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum product subarray of the given array.\n\n### Signature\ndef max_subarray_product(arr):",
    "timestamp": "2025-10-17T16:58:47.235018",
    "response_time": "1.56",
    "context": "{\"function_name\": \"max_subarray_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 464,
    "solution": "```python\ndef check_value(dict, n):\n    if not dict:\n        return False\n    return all(value == n for value in dict.values())\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if all values are same in a dictionary.\n\n### Signature\ndef check_value(dict, n):",
    "timestamp": "2025-10-17T16:58:47.830169",
    "response_time": "0.59",
    "context": "{\"function_name\": \"check_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 465,
    "solution": "```python\ndef drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to drop empty items from a given dictionary.\n\n### Signature\ndef drop_empty(dict1):",
    "timestamp": "2025-10-17T16:58:48.355105",
    "response_time": "0.52",
    "context": "{\"function_name\": \"drop_empty\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 468,
    "solution": "```python\nfrom typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n\n    n = len(arr)\n    max_product = [0] * n\n    max_product[0] = arr[0]\n\n    for i in range(1, n):\n        max_product[i] = max(arr[i], max_product[i - 1] * arr[i])\n\n    return max(max_product)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n### Signature\ndef max_product(arr):",
    "timestamp": "2025-10-17T16:58:49.708178",
    "response_time": "1.35",
    "context": "{\"function_name\": \"max_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 470,
    "solution": "```python\ndef add_pairwise(test_tup):\n    # Initialize an empty list to store the pairwise sums\n    res = []\n    \n    # Iterate through the tuple using zip to pair elements\n    for a, b in zip(test_tup, test_tup[1:]):\n        # Add the pair and append to the result list\n        res.append(a + b)\n    \n    return res\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n### Signature\ndef add_pairwise(test_tup):",
    "timestamp": "2025-10-17T16:58:50.953904",
    "response_time": "1.24",
    "context": "{\"function_name\": \"add_pairwise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 471,
    "solution": "```python\n###START===\nfrom typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the product of the array multiplication modulo n.\n\n### Signature\ndef find_remainder(arr, n):",
    "timestamp": "2025-10-17T16:58:51.857587",
    "response_time": "0.90",
    "context": "{\"function_name\": \"find_remainder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 472,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef check_Consecutive(l):\n    if not l:\n        return False\n    \n    sorted_l = sorted(l)\n    for i in range(1, len(sorted_l)):\n        if sorted_l[i] != sorted_l[i - 1] + 1:\n            return False\n    return True\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\n### Signature\ndef check_Consecutive(l):",
    "timestamp": "2025-10-17T16:58:52.986513",
    "response_time": "1.13",
    "context": "{\"function_name\": \"check_Consecutive\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 473,
    "solution": "```python\nfrom typing import List, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> List[Tuple]:\n    # Convert each tuple in both lists to a set to remove duplicates and allow intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of both sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list of tuples\n    result = list(intersection)\n    \n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n### Signature\ndef tuple_intersection(test_list1, test_list2):",
    "timestamp": "2025-10-17T16:58:54.613653",
    "response_time": "1.63",
    "context": "{\"function_name\": \"tuple_intersection\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 474,
    "solution": "```python\ndef replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to replace characters in a string.\n\n### Signature\ndef replace_char(str1,ch,newch):",
    "timestamp": "2025-10-17T16:58:55.103049",
    "response_time": "0.49",
    "context": "{\"function_name\": \"replace_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 475,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef sort_counter(dict1):\n    # Sort the dictionary by value in ascending order\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a dictionary by value.\n\n### Signature\ndef sort_counter(dict1):",
    "timestamp": "2025-10-17T16:58:55.938369",
    "response_time": "0.83",
    "context": "{\"function_name\": \"sort_counter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 476,
    "solution": "```python\ndef big_sum(nums):\n    if not nums:\n        return 0  # Return 0 if the list is empty\n\n    # Initialize min and max with the first element of the list\n    min_val = max_val = nums[0]\n\n    # Iterate through the list to find the min and max values\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n\n    # Return the sum of the largest and smallest values\n    return min_val + max_val\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\n### Signature\ndef big_sum(nums):",
    "timestamp": "2025-10-17T16:58:57.590826",
    "response_time": "1.65",
    "context": "{\"function_name\": \"big_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 477,
    "solution": "```python\ndef is_lower(string):\n    return string.islower()\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to convert the given string to lower case.\n\n### Signature\ndef is_lower(string):",
    "timestamp": "2025-10-17T16:58:57.958489",
    "response_time": "0.37",
    "context": "{\"function_name\": \"is_lower\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 478,
    "solution": "```python\ndef remove_lowercase(str1):\n    return ''.join(char for char in str1 if not char.islower())\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove lowercase substrings from a given string.\n\n### Signature\ndef remove_lowercase(str1):",
    "timestamp": "2025-10-17T16:58:58.459348",
    "response_time": "0.50",
    "context": "{\"function_name\": \"remove_lowercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 479,
    "solution": "```python\n###START===\nimport math\n\ndef first_Digit(n) :\n    # Handle negative numbers by taking the absolute value\n    n = abs(n)\n    \n    # If the number is 0, the first digit is 0\n    if n == 0:\n        return 0\n    \n    # Use logarithm to find the number of digits\n    num_digits = math.floor(math.log10(n)) + 1\n    \n    # Extract the first digit\n    first_digit = n // (10 ** (num_digits - 1))\n    \n    return first_digit\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the first digit of a given number.\n\n### Signature\ndef first_Digit(n) :",
    "timestamp": "2025-10-17T16:59:00.161825",
    "response_time": "1.70",
    "context": "{\"function_name\": \"first_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 554,
    "solution": "```python\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and only returns the odd ones.\n\n### Signature\ndef Split(list):",
    "timestamp": "2025-10-17T16:59:00.657230",
    "response_time": "0.49",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 555,
    "solution": "```python\n###START===\nfrom math import pow\n\ndef difference(n) :\n    sum_of_cubes = sum(pow(i, 3) for i in range(1, n + 1))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n### Signature\ndef difference(n) :",
    "timestamp": "2025-10-17T16:59:01.721830",
    "response_time": "1.06",
    "context": "{\"function_name\": \"difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 556,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef find_Odd_Pair(A, N):\n    odd_count = 0\n    even_count = 0\n    \n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # The number of pairs with odd XOR is the product of the number of odd and even numbers\n    return odd_count * even_count\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose xor value is odd.\n\n### Signature\ndef find_Odd_Pair(A,N) :",
    "timestamp": "2025-10-17T16:59:03.180190",
    "response_time": "1.46",
    "context": "{\"function_name\": \"find_Odd_Pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 557,
    "solution": "```python\ndef toggle_string(string):\n    return ''.join(char.swapcase() for char in string)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to toggle the case of all characters in a string.\n\n### Signature\ndef toggle_string(string):",
    "timestamp": "2025-10-17T16:59:03.653615",
    "response_time": "0.47",
    "context": "{\"function_name\": \"toggle_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 558,
    "solution": "```python\ndef digit_distance_nums(n1, n2):\n    # Convert numbers to strings to iterate over each digit\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # Initialize the sum of differences\n    sum_diff = 0\n    \n    # Iterate over each digit\n    for i in range(max(len(str_n1), len(str_n2))):\n        # Get the digit from each number, defaulting to 0 if the number is shorter\n        digit1 = int(str_n1[i]) if i < len(str_n1) else 0\n        digit2 = int(str_n2[i]) if i < len(str_n2) else 0\n        \n        # Calculate the absolute difference and add to the sum\n        sum_diff += abs(digit1 - digit2)\n    \n    return sum_diff\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of the per-digit difference between two integers.\n\n### Signature\ndef digit_distance_nums(n1, n2):",
    "timestamp": "2025-10-17T16:59:06.015263",
    "response_time": "2.36",
    "context": "{\"function_name\": \"digit_distance_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 559,
    "solution": "```python\ndef max_sub_array_sum(a, size):\n    # Initialize variables to store the maximum sum and the current sum\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, size):\n        # Update the current sum to be the maximum of the current element\n        # or the current sum plus the current element\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        \n        # Update the maximum sum found so far if the current sum is greater\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n\n### Signature\ndef max_sub_array_sum(a, size):",
    "timestamp": "2025-10-17T16:59:08.065758",
    "response_time": "2.05",
    "context": "{\"function_name\": \"max_sub_array_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 560,
    "solution": "```python\nfrom typing import Tuple\n\ndef union_elements(test_tup1: Tuple, test_tup2: Tuple) -> Tuple:\n    # Convert tuples to sets to find the union\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set back to a tuple and sort it\n    sorted_union = tuple(sorted(union_set))\n    return sorted_union\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n\n### Signature\ndef union_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T16:59:09.294802",
    "response_time": "1.23",
    "context": "{\"function_name\": \"union_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 562,
    "solution": "```python\ndef Find_Max_Length(lst):\n    if not lst:\n        return 0\n    \n    max_length = 0\n    for sublist in lst:\n        if isinstance(sublist, list):\n            max_length = max(max_length, len(sublist))\n    \n    return max_length\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest sublists.\n\n### Signature\ndef Find_Max_Length(lst):",
    "timestamp": "2025-10-17T16:59:10.214688",
    "response_time": "0.92",
    "context": "{\"function_name\": \"Find_Max_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 563,
    "solution": "```python\nimport re\n\ndef extract_values(text):\n    # Use regular expression to find all substrings between quotation marks\n    matches = re.findall(r'\"([^\"]*)\"', text)\n    return matches\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks from a string.\n\n### Signature\ndef extract_values(text):",
    "timestamp": "2025-10-17T16:59:10.914919",
    "response_time": "0.70",
    "context": "{\"function_name\": \"extract_values\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 564,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef count_Pairs(arr, n):\n    # Initialize a counter for pairs\n    count = 0\n    \n    # Iterate over each pair of elements in the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Check if the elements are unequal\n            if arr[i] != arr[j]:\n                # Increment the count if they are unequal\n                count += 1\n    \n    return count\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n### Signature\ndef count_Pairs(arr,n):",
    "timestamp": "2025-10-17T16:59:12.442421",
    "response_time": "1.53",
    "context": "{\"function_name\": \"count_Pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 565,
    "solution": "```python\ndef split(word):\n    return list(word)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to split a string into characters.\n\n### Signature\ndef split(word):",
    "timestamp": "2025-10-17T16:59:12.817889",
    "response_time": "0.37",
    "context": "{\"function_name\": \"split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 566,
    "solution": "```python\ndef sum_digits(n):\n    # Ensure the input is a non-negative integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    # Convert the integer to a string to iterate over each digit\n    digits = str(n)\n    \n    # Initialize the sum of digits\n    total_sum = 0\n    \n    # Iterate over each character in the string and add its integer value to the total sum\n    for digit in digits:\n        total_sum += int(digit)\n    \n    return total_sum\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to get the sum of the digits of a non-negative integer.\n\n### Signature\ndef sum_digits(n):",
    "timestamp": "2025-10-17T16:59:14.505520",
    "response_time": "1.69",
    "context": "{\"function_name\": \"sum_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 567,
    "solution": "```python\ndef issort_list(list1):\n    if not list1:\n        return True\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i - 1]:\n            return False\n    return True\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether a specified list is sorted or not.\n\n### Signature\ndef issort_list(list1):",
    "timestamp": "2025-10-17T16:59:15.399791",
    "response_time": "0.89",
    "context": "{\"function_name\": \"issort_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 568,
    "solution": "```python\ndef empty_list(length):\n    return [{} for _ in range(length)]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to create a list of N empty dictionaries.\n\n### Signature\ndef empty_list(length):",
    "timestamp": "2025-10-17T16:59:15.832702",
    "response_time": "0.43",
    "context": "{\"function_name\": \"empty_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 569,
    "solution": "```python\nfrom typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    # Sort each sublist in the list of lists\n    sorted_list = [sorted(sublist) for sublist in list1]\n    return sorted_list\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(list1):",
    "timestamp": "2025-10-17T16:59:16.700807",
    "response_time": "0.87",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 572,
    "solution": "```python\nfrom typing import List\n\ndef two_unique_nums(nums: List[List[int]]) -> List[int]:\n    # Flatten the list of lists\n    flat_list = [num for sublist in nums for num in sublist]\n    \n    # Use a set to remove duplicates\n    unique_nums = set(flat_list)\n    \n    # Convert the set back to a list\n    return list(unique_nums)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove duplicate numbers from a given number of lists.\n\n### Signature\ndef two_unique_nums(nums):",
    "timestamp": "2025-10-17T16:59:17.929214",
    "response_time": "1.23",
    "context": "{\"function_name\": \"two_unique_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 573,
    "solution": "```python\nfrom typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    # Use a set to store unique numbers\n    unique_numbers = set(list_data)\n    \n    # Calculate the product of unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    \n    return product\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to calculate the product of the unique numbers in a given list.\n\n### Signature\ndef unique_product(list_data):",
    "timestamp": "2025-10-17T16:59:18.982034",
    "response_time": "1.05",
    "context": "{\"function_name\": \"unique_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 574,
    "solution": "```python\n###START===\nimport math\n\ndef surfacearea_cylinder(r, h):\n    # Calculate the surface area of a cylinder\n    # Surface area = 2 * \u03c0 * r * (r + h)\n    return 2 * math.pi * r * (r + h)\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cylinder.\n\n### Signature\ndef surfacearea_cylinder(r,h):",
    "timestamp": "2025-10-17T16:59:19.940426",
    "response_time": "0.96",
    "context": "{\"function_name\": \"surfacearea_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 576,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef is_Sub_Array(A, B):\n    if not B:\n        return True\n    if len(A) < len(B):\n        return False\n    \n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether a list is sublist of another or not.\n\n### Signature\ndef is_Sub_Array(A,B):",
    "timestamp": "2025-10-17T16:59:21.160763",
    "response_time": "1.22",
    "context": "{\"function_name\": \"is_Sub_Array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 577,
    "solution": "```python\n###START===\nimport math\n\ndef last_Digit_Factorial(n):\n    # Calculate the factorial of n\n    factorial = math.factorial(n)\n    # Return the last digit of the factorial\n    return factorial % 10\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the last digit in factorial of a given number.\n\n### Signature\ndef last_Digit_Factorial(n):",
    "timestamp": "2025-10-17T16:59:22.016433",
    "response_time": "0.85",
    "context": "{\"function_name\": \"last_Digit_Factorial\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 578,
    "solution": "```python\ndef interleave_lists(list1, list2, list3):\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to interleave 3 lists of the same length into a single flat list.\n\n### Signature\ndef interleave_lists(list1,list2,list3):",
    "timestamp": "2025-10-17T16:59:22.942692",
    "response_time": "0.92",
    "context": "{\"function_name\": \"interleave_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 579,
    "solution": "```python\ndef find_dissimilar(test_tup1, test_tup2):\n    # Convert tuples to sets to find dissimilar elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find dissimilar elements\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    # Convert the set back to a tuple\n    dissimilar_tuple = tuple(dissimilar_elements)\n    \n    return dissimilar_tuple\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the dissimilar elements in the given two tuples.\n\n### Signature\ndef find_dissimilar(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T16:59:24.353397",
    "response_time": "1.41",
    "context": "{\"function_name\": \"find_dissimilar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 580,
    "solution": "```python\n===START===\nfrom typing import *\nfrom collections import *\n\ndef even_ele(test_tuple, even_fnc):\n    # Initialize an empty list to store even elements\n    even_elements = []\n    \n    # Iterate over each element in the nested tuple\n    for element in test_tuple:\n        # Check if the element is a tuple\n        if isinstance(element, tuple):\n            # Recursively call even_ele on the nested tuple\n            even_elements.extend(even_ele(element, even_fnc))\n        else:\n            # Apply the even_fnc to the element\n            result = even_fnc(element)\n            # If the result is True, add the element to even_elements\n            if result:\n                even_elements.append(element)\n    \n    return tuple(even_elements)\n\n# Example usage:\n# Define a function to check if a number is even\ndef is_even(num):\n    return num % 2 == 0\n\n# Test the function\ntest_tuple = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nresult = even_ele(test_tuple, is_even)\nprint(result)  # Output: (2, 4, 6)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove uneven elements in the nested mixed tuple.\n\n### Signature\ndef even_ele(test_tuple, even_fnc):",
    "timestamp": "2025-10-17T16:59:27.566571",
    "response_time": "3.21",
    "context": "{\"function_name\": \"extract_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 581,
    "solution": "```python\n###START===\nimport math\n\ndef surface_Area(b, s):\n    # Calculate the area of the base\n    base_area = b * b\n    \n    # Calculate the area of the four triangular faces\n    triangular_face_area = 0.5 * s * math.sqrt(b**2 + s**2)\n    total_triangular_area = 4 * triangular_face_area\n    \n    # Total surface area is the sum of the base area and the triangular faces\n    total_surface_area = base_area + total_triangular_area\n    \n    return total_surface_area\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\n### Signature\ndef surface_Area(b,s):",
    "timestamp": "2025-10-17T16:59:29.203873",
    "response_time": "1.64",
    "context": "{\"function_name\": \"surface_Area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 582,
    "solution": "```python\ndef my_dict(dict1):\n    return not dict1\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if a dictionary is empty\n\n### Signature\ndef my_dict(dict1):",
    "timestamp": "2025-10-17T16:59:29.575422",
    "response_time": "0.37",
    "context": "{\"function_name\": \"my_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 583,
    "solution": "```python\nfrom math import factorial\n\ndef catalan_number(num):\n    if num < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function which returns nth catalan number.\n\n### Signature\ndef catalan_number(num):",
    "timestamp": "2025-10-17T16:59:30.440050",
    "response_time": "0.86",
    "context": "{\"function_name\": \"catalan_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 584,
    "solution": "```python\nimport re\n\ndef find_adverbs(text):\n    # Regular expression to find adverbs ending with 'ly'\n    adverb_pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(adverb_pattern, text)\n    \n    # If no adverbs are found, return an empty list\n    if not matches:\n        return []\n    \n    # Find the positions of each adverb\n    positions = [text.index(match) for match in matches]\n    \n    return matches, positions\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n\n### Signature\ndef find_adverbs(text):",
    "timestamp": "2025-10-17T16:59:31.867083",
    "response_time": "1.43",
    "context": "{\"function_name\": \"find_adverbs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 585,
    "solution": "```python\nfrom typing import List, Tuple\n\ndef expensive_items(items: List[Tuple[str, float]], n: int) -> List[Tuple[str, float]]:\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda item: item[1], reverse=True)\n    \n    # Return the top n items\n    return sorted_items[:n]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n most expensive items in a given dataset.\n\n### Signature\ndef expensive_items(items,n):",
    "timestamp": "2025-10-17T16:59:33.059563",
    "response_time": "1.19",
    "context": "{\"function_name\": \"expensive_items\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 586,
    "solution": "```python\ndef split_Arr(l, n):\n    if n < 0 or n >= len(l):\n        raise ValueError(\"n is out of bounds\")\n    return l[n:] + l[:n]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n\n### Signature\ndef split_Arr(l, n):",
    "timestamp": "2025-10-17T16:59:33.779368",
    "response_time": "0.72",
    "context": "{\"function_name\": \"split_Arr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 587,
    "solution": "```python\ndef list_tuple(listx):\n    return tuple(listx)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a list to a tuple.\n\n### Signature\ndef list_tuple(listx):",
    "timestamp": "2025-10-17T16:59:34.157662",
    "response_time": "0.38",
    "context": "{\"function_name\": \"list_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 588,
    "solution": "```python\ndef big_diff(nums):\n    if not nums:\n        return 0  # Return 0 if the list is empty\n    return max(nums) - min(nums)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the difference between largest and smallest value in a given list.\n\n### Signature\ndef big_diff(nums):",
    "timestamp": "2025-10-17T16:59:34.808144",
    "response_time": "0.65",
    "context": "{\"function_name\": \"big_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 589,
    "solution": "```python\nimport math\n\ndef perfect_squares(a, b):\n    # Find the smallest integer whose square is greater than or equal to a\n    start = math.ceil(math.sqrt(a))\n    # Find the largest integer whose square is less than or equal to b\n    end = math.floor(math.sqrt(b))\n    \n    # Generate a list of perfect squares between start and end\n    return [i**2 for i in range(start, end + 1)]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find perfect squares between two given numbers.\n\n### Signature\ndef perfect_squares(a, b):",
    "timestamp": "2025-10-17T16:59:36.157653",
    "response_time": "1.35",
    "context": "{\"function_name\": \"perfect_squares\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 590,
    "solution": "```python\nimport math\n\ndef polar_rect(x, y):\n    # Calculate the angle in radians\n    angle = math.atan2(y, x)\n    # Calculate the magnitude\n    magnitude = math.sqrt(x**2 + y**2)\n    # Convert to rectangular coordinates\n    real_part = magnitude * math.cos(angle)\n    imaginary_part = magnitude * math.sin(angle)\n    return real_part, imaginary_part\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert polar coordinates to rectangular coordinates.\n\n### Signature\ndef polar_rect(x,y):",
    "timestamp": "2025-10-17T16:59:38.043631",
    "response_time": "1.88",
    "context": "{\"function_name\": \"polar_rect\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 591,
    "solution": "```python\ndef swap_List(newList):\n    if len(newList) > 0:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last elements in a list.\n\n### Signature\ndef swap_List(newList):",
    "timestamp": "2025-10-17T16:59:38.745598",
    "response_time": "0.70",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 592,
    "solution": "```python\nfrom math import comb\n\ndef binomial_Coeff(n, k):\n    # Calculate the product of consecutive binomial coefficients\n    product = 1\n    for i in range(k, n):\n        product *= comb(n, i)\n    \n    # Calculate the sum of the products\n    return sum(product)\n\n# Example usage:\n# print(binomial_Coeff(5, 2))  # Output: 10\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\n### Signature\ndef binomial_Coeff(n,k):",
    "timestamp": "2025-10-17T16:59:40.082926",
    "response_time": "1.34",
    "context": "{\"function_name\": \"sum_Of_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 593,
    "solution": "```python\ndef removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    \n    # Remove leading zeroes from each part\n    cleaned_parts = [str(int(part)) for part in parts]\n    \n    # Join the cleaned parts back into a single string\n    cleaned_ip = '.'.join(cleaned_parts)\n    \n    return cleaned_ip\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove leading zeroes from an ip address.\n\n### Signature\ndef removezero_ip(ip):",
    "timestamp": "2025-10-17T16:59:41.286371",
    "response_time": "1.20",
    "context": "{\"function_name\": \"removezero_ip\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 594,
    "solution": "```python\ndef diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return None\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the difference of the first even and first odd number of a given list.\n\n### Signature\ndef diff_even_odd(list1):",
    "timestamp": "2025-10-17T16:59:42.948114",
    "response_time": "1.66",
    "context": "{\"function_name\": \"diff_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 595,
    "solution": "```python\n###START===\nfrom collections import Counter\n\ndef min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return -1  # Binary strings must be of the same length\n\n    # Count the number of mismatches\n    mismatches = sum(1 for a, b in zip(str1, str2) if a != b)\n\n    # If the number of mismatches is odd, it's impossible to convert\n    if mismatches % 2 != 0:\n        return -1\n\n    # Count the number of '01' and '10' mismatches\n    mismatches_01 = sum(1 for a, b in zip(str1, str2) if a == '0' and b == '1')\n    mismatches_10 = sum(1 for a, b in zip(str1, str2) if a == '1' and b == '0')\n\n    # The minimum number of swaps is the minimum of mismatches_01 and mismatches_10\n    return min(mismatches_01, mismatches_10)\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n### Signature\ndef min_Swaps(str1,str2) :",
    "timestamp": "2025-10-17T16:59:46.126521",
    "response_time": "3.18",
    "context": "{\"function_name\": \"min_Swaps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 596,
    "solution": "```python\ndef tuple_size(tuple_list):\n    total_size = 0\n    for item in tuple_list:\n        if isinstance(item, tuple):\n            total_size += tuple_size(item)\n        else:\n            total_size += sys.getsizeof(item)\n    return total_size\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the size in bytes of the given tuple.\n\n### Signature\ndef tuple_size(tuple_list):",
    "timestamp": "2025-10-17T16:59:46.989308",
    "response_time": "0.86",
    "context": "{\"function_name\": \"tuple_size\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 597,
    "solution": "```python\nfrom typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    # Ensure arr1 is the smaller array to optimize the search\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    # Initialize pointers for both arrays\n    i, j = 0, 0\n    kth_element = 0\n    \n    # Traverse both arrays until kth element is found\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            kth_element = arr1[i]\n            i += 1\n        else:\n            kth_element = arr2[j]\n            j += 1\n        k -= 1\n    \n    # If kth element is not found in the first array, take from the second array\n    while i < len(arr1):\n        kth_element = arr1[i]\n        i += 1\n        k -= 1\n    \n    # If kth element is not found in the second array, take from the first array\n    while j < len(arr2):\n        kth_element = arr2[j]\n        j += 1\n        k -= 1\n    \n    return kth_element\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find kth element from the given two sorted arrays.\n\n### Signature\ndef find_kth(arr1, arr2, k):",
    "timestamp": "2025-10-17T16:59:50.546961",
    "response_time": "3.56",
    "context": "{\"function_name\": \"find_kth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 598,
    "solution": "```python\n###START===\nimport math\n\ndef armstrong_number(number):\n    # Convert the number to a string to easily iterate over each digit\n    num_str = str(number)\n    # Calculate the number of digits\n    num_digits = len(num_str)\n    # Initialize the sum of the digits raised to the power of the number of digits\n    sum_of_powers = 0\n    # Iterate over each digit in the number\n    for digit in num_str:\n        # Convert the digit back to an integer and raise it to the power of the number of digits\n        sum_of_powers += int(digit) ** num_digits\n    # Check if the sum of the powers is equal to the original number\n    return sum_of_powers == number\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given number is armstrong or not.\n\n### Signature\ndef armstrong_number(number):",
    "timestamp": "2025-10-17T16:59:52.710803",
    "response_time": "2.16",
    "context": "{\"function_name\": \"armstrong_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 599,
    "solution": "```python\ndef sum_average(number):\n    if number <= 0:\n        return 0, 0\n    \n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    \n    return total_sum, average\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find sum and average of first n natural numbers.\n\n### Signature\ndef sum_average(number):",
    "timestamp": "2025-10-17T16:59:53.573583",
    "response_time": "0.86",
    "context": "{\"function_name\": \"sum_average\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 600,
    "solution": "```python\n###START===\ndef is_Even(n) :\n    return n % 2 == 0\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given number is even or not.\n\n### Signature\ndef is_Even(n) :",
    "timestamp": "2025-10-17T16:59:54.098645",
    "response_time": "0.52",
    "context": "{\"function_name\": \"is_Even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 602,
    "solution": "```python\n###START===\nfrom collections import Counter\n\ndef first_repeated_char(str1):\n    # Count the occurrences of each character in the string\n    char_count = Counter(str1)\n    \n    # Iterate through the string to find the first repeated character\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    \n    # Return None if no repeated character is found\n    return None\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the first repeated character in a given string.\n\n### Signature\ndef first_repeated_char(str1):",
    "timestamp": "2025-10-17T16:59:55.430334",
    "response_time": "1.33",
    "context": "{\"function_name\": \"first_repeated_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 603,
    "solution": "```python\nfrom typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 2:\n        return []\n\n    # Initialize the list of numbers from 1 to n\n    numbers = list(range(1, n + 1))\n    i = 0\n\n    while i < len(numbers):\n        # Find the next number to remove\n        next_to_remove = numbers[i] + i + 1\n        # Remove all multiples of the next number\n        numbers = [num for num in numbers if (num - 1) % next_to_remove != 0]\n        # Move to the next number to remove\n        i += 1\n\n    return numbers\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\n### Signature\ndef get_ludic(n):",
    "timestamp": "2025-10-17T16:59:57.375481",
    "response_time": "1.94",
    "context": "{\"function_name\": \"get_ludic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 604,
    "solution": "```python\ndef reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    # Reverse the list of words\n    reversed_words = words[::-1]\n    # Join the reversed list of words back into a string\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to reverse words seperated by spaces in a given string.\n\n### Signature\ndef reverse_words(s):",
    "timestamp": "2025-10-17T16:59:58.406587",
    "response_time": "1.03",
    "context": "{\"function_name\": \"reverse_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 605,
    "solution": "```python\n###START===\nfrom math import sqrt\n\ndef prime_num(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given integer is a prime number.\n\n### Signature\ndef prime_num(num):",
    "timestamp": "2025-10-17T16:59:59.987861",
    "response_time": "1.58",
    "context": "{\"function_name\": \"prime_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 606,
    "solution": "```python\nimport math\n\ndef radian_degree(degree):\n    return math.radians(degree)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert degrees to radians.\n\n### Signature\ndef radian_degree(degree):",
    "timestamp": "2025-10-17T17:00:00.443156",
    "response_time": "0.45",
    "context": "{\"function_name\": \"radian_degree\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 607,
    "solution": "```python\nimport re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\n### Signature\ndef find_literals(text, pattern):",
    "timestamp": "2025-10-17T17:00:01.238458",
    "response_time": "0.79",
    "context": "{\"function_name\": \"find_literals\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 608,
    "solution": "```python\nfrom math import factorial\n\ndef bell_Number(n):\n    # Initialize a 2D list to store Bell numbers\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    # Base case: The first Bell number is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    \n    # The nth Bell number is stored in bell[n][0]\n    return bell[n][0]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find nth bell number.\n\n### Signature\ndef bell_Number(n):",
    "timestamp": "2025-10-17T17:00:03.570689",
    "response_time": "2.33",
    "context": "{\"function_name\": \"bell_Number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 610,
    "solution": "```python\ndef remove_kth_element(list1, L):\n    # Check if L is within the valid range\n    if L < 0 or L >= len(list1):\n        raise ValueError(\"L is out of range\")\n    \n    # Create a new list excluding the L'th element\n    return list1[:L] + list1[L+1:]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\n### Signature\ndef remove_kth_element(list1, L):",
    "timestamp": "2025-10-17T17:00:04.683773",
    "response_time": "1.11",
    "context": "{\"function_name\": \"remove_kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 611,
    "solution": "```python\ndef max_of_nth(test_list, N):\n    # Check if the matrix is empty or N is out of bounds\n    if not test_list or N < 0 or N >= len(test_list[0]):\n        return None  # or raise an exception, depending on requirements\n\n    # Initialize the maximum value with the first element of the N'th column\n    max_value = test_list[0][N]\n\n    # Iterate through the matrix to find the maximum value in the N'th column\n    for row in test_list:\n        if row[N] > max_value:\n            max_value = row[N]\n\n    return max_value\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\n### Signature\ndef max_of_nth(test_list, N):",
    "timestamp": "2025-10-17T17:00:06.510941",
    "response_time": "1.82",
    "context": "{\"function_name\": \"max_of_nth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 612,
    "solution": "```python\nfrom typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n### Signature\ndef merge(lst):",
    "timestamp": "2025-10-17T17:00:07.488628",
    "response_time": "0.98",
    "context": "{\"function_name\": \"merge\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 614,
    "solution": "```python\ndef cummulative_sum(test_list):\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n    \n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Iterate over each element in the tuple\n        for ele in tup:\n            # Add the element to the cumulative sum\n            cum_sum += ele\n    \n    # Return the cumulative sum\n    return cum_sum\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n### Signature\ndef cummulative_sum(test_list):",
    "timestamp": "2025-10-17T17:00:08.787596",
    "response_time": "1.30",
    "context": "{\"function_name\": \"cummulative_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 615,
    "solution": "```python\ndef average_tuple(nums):\n    # Initialize an empty list to store the averages\n    averages = []\n    \n    # Iterate over each tuple in the input list\n    for num_tuple in nums:\n        # Calculate the average of the current tuple\n        average = sum(num_tuple) / len(num_tuple)\n        # Append the calculated average to the averages list\n        averages.append(average)\n    \n    # Return the list of averages\n    return averages\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\n### Signature\ndef average_tuple(nums):",
    "timestamp": "2025-10-17T17:00:10.131649",
    "response_time": "1.34",
    "context": "{\"function_name\": \"average_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 616,
    "solution": "```python\ndef tuple_modulo(test_tup1, test_tup2):\n    # Check if both tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # Perform element-wise modulo operation\n    result = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    \n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\n### Signature\ndef tuple_modulo(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:00:11.450816",
    "response_time": "1.32",
    "context": "{\"function_name\": \"tuple_modulo\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 617,
    "solution": "```python\n###START===\nfrom math import ceil\n\ndef min_Jumps(steps, d):\n    # Calculate the minimum number of jumps required\n    return ceil(d / steps)\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n### Signature\ndef min_Jumps(steps, d):",
    "timestamp": "2025-10-17T17:00:12.129007",
    "response_time": "0.68",
    "context": "{\"function_name\": \"min_Jumps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 618,
    "solution": "```python\ndef div_list(nums1, nums2):\n    # Check if both lists have the same length\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    # Use list comprehension to divide elements element-wise\n    result = [a / b for a, b in zip(nums1, nums2)]\n    \n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to divide two lists element wise.\n\n### Signature\ndef div_list(nums1,nums2):",
    "timestamp": "2025-10-17T17:00:13.342399",
    "response_time": "1.21",
    "context": "{\"function_name\": \"div_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 619,
    "solution": "```python\ndef move_num(test_str):\n    # Initialize two pointers\n    i = 0\n    j = len(test_str) - 1\n    \n    # Traverse the string\n    while i < j:\n        # Move i forward until a non-digit character is found\n        while i < j and test_str[i].isdigit():\n            i += 1\n        # Move j backward until a digit character is found\n        while i < j and not test_str[j].isdigit():\n            j -= 1\n        # Swap the characters at i and j\n        if i < j:\n            test_str = test_str[:i] + test_str[j] + test_str[i+1:j] + test_str[i] + test_str[j+1:]\n            i += 1\n            j -= 1\n    \n    return test_str\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to move all the numbers to the end of the given string.\n\n### Signature\ndef move_num(test_str):",
    "timestamp": "2025-10-17T17:00:15.662576",
    "response_time": "2.32",
    "context": "{\"function_name\": \"move_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 620,
    "solution": "```python\nfrom typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    \n    # Sort the array to make it easier to find divisible pairs\n    a.sort()\n    \n    # Initialize the dp array where dp[i] will store the size of the largest subset\n    # ending with the number a[i]\n    dp = [1] * len(a)\n    \n    # Iterate through the array to fill the dp array\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # The size of the largest subset is the maximum value in the dp array\n    return max(dp)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n### Signature\ndef largest_subset(a):",
    "timestamp": "2025-10-17T17:00:18.001807",
    "response_time": "2.34",
    "context": "{\"function_name\": \"largest_subset\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 622,
    "solution": "```python\nfrom typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    # Ensure arr1 is the smaller list\n    if n < len(arr2):\n        arr1, arr2 = arr2, arr1\n        n, m = m, n\n    \n    # Initialize pointers\n    low, high = 0, n\n    \n    while low <= high:\n        partitionX = (low + high) // 2\n        partitionY = (n + m + 1) // 2 - partitionX\n        \n        # If partitionX is 0, it means nothing is there on left side. Use -INF for maxLeftX\n        # If partitionX is n, it means nothing is there on right side. Use +INF for minRightX\n        maxLeftX = float('-inf') if partitionX == 0 else arr1[partitionX - 1]\n        minRightX = float('inf') if partitionX == n else arr1[partitionX]\n        \n        # If partitionY is 0, it means nothing is there on left side. Use -INF for maxLeftY\n        # If partitionY is m, it means nothing is there on right side. Use +INF for minRightY\n        maxLeftY = float('-inf') if partitionY == 0 else arr2[partitionY - 1]\n        minRightY = float('inf') if partitionY == m else arr2[partitionY]\n        \n        # Check if the partition is correct\n        if maxLeftX <= minRightY and maxLeftY <= minRightX:\n            # If (n + m) is odd, the median is the maximum of maxLeftX and maxLeftY\n            if (n + m) % 2 == 1:\n                return max(maxLeftX, maxLeftY)\n            # If (n + m) is even, the median is the average of maxLeftX and minRightY\n            else:\n                return (max(maxLeftX, maxLeftY) + min(minRightX, minRightY)) / 2.0\n        # If maxLeftX > minRightY, move partitionX to the left\n        elif maxLeftX > minRightY:\n            high = partitionX - 1\n        # If maxLeftY > minRightX, move partitionX to the right\n        else:\n            low = partitionX + 1\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the median of two sorted lists of same size.\n\n### Signature\ndef get_median(arr1, arr2, n):",
    "timestamp": "2025-10-17T17:00:24.580528",
    "response_time": "6.58",
    "context": "{\"function_name\": \"get_median\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 623,
    "solution": "```python\ndef nth_nums(nums, n):\n    return [num ** n for num in nums]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to compute the n-th power of each number in a list.\n\n### Signature\ndef nth_nums(nums,n):",
    "timestamp": "2025-10-17T17:00:25.059129",
    "response_time": "0.48",
    "context": "{\"function_name\": \"nth_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 624,
    "solution": "```python\ndef is_upper(string):\n    return string.isupper()\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to convert a given string to uppercase.\n\n### Signature\ndef is_upper(string):",
    "timestamp": "2025-10-17T17:00:25.443504",
    "response_time": "0.38",
    "context": "{\"function_name\": \"is_upper\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 625,
    "solution": "```python\ndef swap_List(newList):\n    if len(newList) > 0:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last element in a given list.\n\n### Signature\ndef swap_List(newList):",
    "timestamp": "2025-10-17T17:00:26.159498",
    "response_time": "0.71",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 626,
    "solution": "```python\nfrom math import pi\n\ndef triangle_area(r):\n    # The largest triangle inscribed in a semicircle is an isosceles right triangle\n    # with the hypotenuse equal to the diameter of the semicircle.\n    # The area of such a triangle is (1/2) * base * height.\n    # In this case, the base and height are both equal to the radius of the semicircle.\n    return 0.5 * r * r\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n### Signature\ndef triangle_area(r) :",
    "timestamp": "2025-10-17T17:00:27.613060",
    "response_time": "1.45",
    "context": "{\"function_name\": \"triangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 627,
    "solution": "```python\ndef find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    if start > end:\n        return start\n    \n    mid = (start + end) // 2\n    \n    if array[mid] == mid + start:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        return find_First_Missing(array, start, mid - 1)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\n### Signature\ndef find_First_Missing(array,start=0,end=None):",
    "timestamp": "2025-10-17T17:00:28.988665",
    "response_time": "1.37",
    "context": "{\"function_name\": \"find_First_Missing\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 628,
    "solution": "```python\ndef replace_spaces(string):\n    # Convert the string to a list of characters for easier manipulation\n    char_list = list(string)\n    \n    # Initialize pointers for the original and new string positions\n    original_index = len(char_list) - 1\n    new_index = len(char_list) - 1\n    \n    # Traverse the string from the end to the beginning\n    while original_index >= 0:\n        if char_list[original_index] == ' ':\n            # Replace spaces with '%20'\n            char_list[new_index] = '0'\n            char_list[new_index - 1] = '2'\n            char_list[new_index - 2] = '%'\n            new_index -= 3\n        else:\n            # Copy non-space characters to the new position\n            char_list[new_index] = char_list[original_index]\n            new_index -= 1\n        original_index -= 1\n    \n    # Join the list back into a string and return\n    return ''.join(char_list)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to replace all spaces in the given string with '%20'.\n\n### Signature\ndef replace_spaces(string):",
    "timestamp": "2025-10-17T17:00:31.753610",
    "response_time": "2.76",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 629,
    "solution": "```python\ndef Split(list):\n    even_numbers = [num for num in list if num % 2 == 0]\n    return even_numbers\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find even numbers from a list of numbers.\n\n### Signature\ndef Split(list):",
    "timestamp": "2025-10-17T17:00:32.329565",
    "response_time": "0.57",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 630,
    "solution": "```python\ndef adjac(ele, sub = []):\n    x, y = ele\n    # Generate all possible adjacent coordinates\n    adjacent_coords = [\n        (x + 1, y), (x - 1, y),  # Horizontal\n        (x, y + 1), (x, y - 1)   # Vertical\n    ]\n    # Add the given coordinate to the list of adjacent coordinates\n    adjacent_coords.append(ele)\n    # Return the list of adjacent coordinates\n    return adjacent_coords\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n### Signature\ndef adjac(ele, sub = []):",
    "timestamp": "2025-10-17T17:00:33.885630",
    "response_time": "1.55",
    "context": "{\"function_name\": \"get_coordinates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 631,
    "solution": "```python\ndef replace_spaces(text):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each character in the input text\n    for char in text:\n        # If the character is a space, append an underscore to the result\n        if char == ' ':\n            result.append('_')\n        # If the character is an underscore, append a space to the result\n        elif char == '_':\n            result.append(' ')\n        # Otherwise, append the character as it is\n        else:\n            result.append(char)\n    \n    # Join the list into a string and return it\n    return ''.join(result)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\n### Signature\ndef replace_spaces(text):",
    "timestamp": "2025-10-17T17:00:35.710773",
    "response_time": "1.82",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 632,
    "solution": "```python\ndef move_zero(num_list):\n    # Initialize two pointers\n    left = 0\n    right = 0\n    \n    # Traverse the list\n    while right < len(num_list):\n        # If the current element is not zero, swap it with the element at the left pointer\n        if num_list[right] != 0:\n            num_list[left], num_list[right] = num_list[right], num_list[left]\n            left += 1\n        right += 1\n    \n    return num_list\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to move all zeroes to the end of the given list.\n\n### Signature\ndef move_zero(num_list):",
    "timestamp": "2025-10-17T17:00:37.216097",
    "response_time": "1.50",
    "context": "{\"function_name\": \"move_zero\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 633,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef pair_xor_Sum(arr,n) :\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\n### Signature\ndef pair_xor_Sum(arr,n) :",
    "timestamp": "2025-10-17T17:00:38.252309",
    "response_time": "1.03",
    "context": "{\"function_name\": \"pair_xor_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 635,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef heap_sort(iterable):\n    # Convert the iterable to a list\n    arr = list(iterable)\n    \n    # Helper function to heapify a subtree rooted at index i\n    def heapify(n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        # Check if left child exists and is greater than root\n        if left < n and arr[i] < arr[left]:\n            largest = left\n        \n        # Check if right child exists and is greater than root\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n        \n        # Change root, if needed\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            \n            # Heapify the root.\n            heapify(n, largest)\n    \n    # Build a maxheap.\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(n, i)\n    \n    # One by one extract elements\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # swap\n        heapify(i, 0)\n    \n    return arr\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort the given list.\n\n### Signature\ndef heap_sort(iterable):",
    "timestamp": "2025-10-17T17:00:41.919575",
    "response_time": "3.66",
    "context": "{\"function_name\": \"heap_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 637,
    "solution": "```python\ndef noprofit_noloss(actual_cost, sale_amount):\n    # Check if the actual cost is equal to the sale amount\n    return actual_cost == sale_amount\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given amount has no profit and no loss\n\n### Signature\ndef noprofit_noloss(actual_cost,sale_amount):",
    "timestamp": "2025-10-17T17:00:42.583201",
    "response_time": "0.66",
    "context": "{\"function_name\": \"noprofit_noloss\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 638,
    "solution": "```python\nimport math\n\ndef wind_chill(v,t):\n    # Check if the wind speed is less than 4.8 km/h\n    if v < 4.8:\n        return t\n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    # Round the result to the next integer\n    return math.ceil(wind_chill_index)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n### Signature\ndef wind_chill(v,t):",
    "timestamp": "2025-10-17T17:00:44.357004",
    "response_time": "1.77",
    "context": "{\"function_name\": \"wind_chill\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 639,
    "solution": "```python\ndef sample_nam(sample_names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in sample_names if name[0].isupper()]\n    \n    # Calculate the total length of the names in the filtered list\n    total_length = sum(len(name) for name in filtered_names)\n    \n    return total_length\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n### Signature\ndef sample_nam(sample_names):",
    "timestamp": "2025-10-17T17:00:45.518551",
    "response_time": "1.16",
    "context": "{\"function_name\": \"sample_nam\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 640,
    "solution": "```python\ndef remove_parenthesis(items):\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            start = item.find('(')\n            end = item.find(')')\n            if start != -1 and end != -1:\n                result.append(item[:start] + item[end+1:])\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n\n### Signature\ndef remove_parenthesis(items):",
    "timestamp": "2025-10-17T17:00:46.719491",
    "response_time": "1.20",
    "context": "{\"function_name\": \"remove_parenthesis\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 641,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef is_nonagonal(n):\n    # A number is nonagonal if it can be expressed as the formula:\n    # n * (7 * n - 5) / 2\n    # We check if this formula gives an integer result\n    return (7 * n - 5) * n % 14 == 0\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth nonagonal number.\n\n### Signature\ndef is_nonagonal(n):",
    "timestamp": "2025-10-17T17:00:48.007183",
    "response_time": "1.29",
    "context": "{\"function_name\": \"is_nonagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 643,
    "solution": "```python\nimport re\n\ndef text_match_wordz_middle(text):\n    # Use regex to find 'z' in the middle of words, not at the start or end\n    pattern = r'\\b[^z]*z[^z]*\\b'\n    return bool(re.search(pattern, text))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\n### Signature\ndef text_match_wordz_middle(text):",
    "timestamp": "2025-10-17T17:00:48.949365",
    "response_time": "0.94",
    "context": "{\"function_name\": \"text_match_wordz_middle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 644,
    "solution": "```python\ndef reverse_Array_Upto_K(input, k):\n    # Check if k is within the bounds of the array\n    if k < 0 or k >= len(input):\n        raise ValueError(\"k is out of bounds\")\n    \n    # Reverse the array from the start to the k-th element\n    input[:k+1] = input[:k+1][::-1]\n    \n    return input\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to reverse an array upto a given position.\n\n### Signature\ndef reverse_Array_Upto_K(input, k):",
    "timestamp": "2025-10-17T17:00:50.187421",
    "response_time": "1.24",
    "context": "{\"function_name\": \"reverse_Array_Upto_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 720,
    "solution": "```python\n===START===\nfrom typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple, test_dict: Dict) -> Tuple:\n    # Convert the tuple to a list to allow modification\n    test_tup_list = list(test_tup)\n    # Add the dictionary to the list\n    test_tup_list.append(test_dict)\n    # Convert the list back to a tuple\n    return tuple(test_tup_list)\n\n# Example usage:\ntest_tup = (1, 2, 3)\ntest_dict = {'a': 10, 'b': 20}\nresult = add_dict_to_tuple(test_tup, test_dict)\nprint(result)  # Output: (1, 2, 3, {'a': 10, 'b': 20})\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\n### Signature\ndef add_dict_to_tuple(test_tup, test_dict):",
    "timestamp": "2025-10-17T17:00:52.466016",
    "response_time": "2.28",
    "context": "{\"function_name\": \"add_dict_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 721,
    "solution": "```python\nfrom typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    \n    # Initialize the DP table with the same size as the cost matrix\n    dp = [[0] * N for _ in range(N)]\n    \n    # Base case: the top-left cell\n    dp[0][0] = cost[0][0]\n    \n    # Fill the first row\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    # Fill the first column\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    # Fill the rest of the DP table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # The maximum average is the maximum value in the DP table divided by N*N\n    max_avg = dp[-1][-1] / (N * N)\n    \n    return max_avg\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n### Signature\ndef maxAverageOfPath(cost):",
    "timestamp": "2025-10-17T17:00:55.895685",
    "response_time": "3.43",
    "context": "{\"function_name\": \"maxAverageOfPath\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 722,
    "solution": "```python\n###START===\nfrom typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    filtered_students = {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}\n    return filtered_students\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\n### Signature\ndef filter_data(students,h,w):",
    "timestamp": "2025-10-17T17:00:57.197176",
    "response_time": "1.30",
    "context": "{\"function_name\": \"filter_data\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 723,
    "solution": "```python\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\n### Signature\ndef count_same_pair(nums1, nums2):",
    "timestamp": "2025-10-17T17:00:58.027303",
    "response_time": "0.83",
    "context": "{\"function_name\": \"count_same_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 724,
    "solution": "```python\ndef power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Initialize the sum of digits\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the result\n    for char in result_str:\n        # Convert the character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    return digit_sum\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\n### Signature\ndef power_base_sum(base, power):",
    "timestamp": "2025-10-17T17:00:59.654545",
    "response_time": "1.63",
    "context": "{\"function_name\": \"power_base_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 725,
    "solution": "```python\ndef extract_quotation(text1):\n    import re\n    return re.findall(r'\"([^\"]+)\"', text1)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks \" \" of the given string.\n\n### Signature\ndef extract_quotation(text1):",
    "timestamp": "2025-10-17T17:01:00.206581",
    "response_time": "0.55",
    "context": "{\"function_name\": \"extract_quotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 726,
    "solution": "```python\ndef multiply_elements(test_tup):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over the input tuple up to the second last element\n    for i in range(len(test_tup) - 1):\n        # Multiply the current element with the next element\n        result.append(test_tup[i] * test_tup[i + 1])\n    \n    # Convert the list to a tuple and return it\n    return tuple(result)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n### Signature\ndef multiply_elements(test_tup):",
    "timestamp": "2025-10-17T17:01:01.628246",
    "response_time": "1.42",
    "context": "{\"function_name\": \"multiply_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 728,
    "solution": "```python\ndef sum_list(lst1, lst2):\n    # Check if both lists have the same length\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    # Use list comprehension to sum corresponding elements\n    return [a + b for a, b in zip(lst1, lst2)]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n### Signature\ndef sum_list(lst1,lst2):",
    "timestamp": "2025-10-17T17:01:02.747247",
    "response_time": "1.12",
    "context": "{\"function_name\": \"sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 730,
    "solution": "```python\nfrom typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove consecutive duplicates of a given list.\n\n### Signature\ndef consecutive_duplicates(nums):",
    "timestamp": "2025-10-17T17:01:03.707310",
    "response_time": "0.96",
    "context": "{\"function_name\": \"consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 731,
    "solution": "```python\n###START===\nimport math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height of the cone\n    slant_height = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\n### Signature\ndef lateralsurface_cone(r,h):",
    "timestamp": "2025-10-17T17:01:04.843856",
    "response_time": "1.13",
    "context": "{\"function_name\": \"lateralsurface_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 732,
    "solution": "```python\ndef replace_specialchar(text):\n    # Replace spaces, commas, and dots with a colon\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\n### Signature\ndef replace_specialchar(text):",
    "timestamp": "2025-10-17T17:01:05.515018",
    "response_time": "0.67",
    "context": "{\"function_name\": \"replace_specialchar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 733,
    "solution": "```python\ndef find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\n### Signature\ndef find_first_occurrence(A, x):",
    "timestamp": "2025-10-17T17:01:07.093815",
    "response_time": "1.58",
    "context": "{\"function_name\": \"find_first_occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 734,
    "solution": "```python\nfrom typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        left_product = 1\n        right_product = 1\n        for j in range(i):\n            left_product *= arr[j]\n        for k in range(i + 1, n):\n            right_product *= arr[k]\n        total_sum += left_product * right_product\n    return total_sum\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\n### Signature\ndef sum_Of_Subarray_Prod(arr):",
    "timestamp": "2025-10-17T17:01:08.581430",
    "response_time": "1.49",
    "context": "{\"function_name\": \"sum_Of_Subarray_Prod\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 735,
    "solution": "```python\n###START===\nimport math\n\ndef set_middle_bits(n):\n    # Calculate the number of bits in n\n    num_bits = math.floor(math.log2(n)) + 1\n    \n    # Create a mask with all bits set except the first and last bit\n    mask = (1 << (num_bits - 2)) - 1\n    \n    # Toggle the middle bits\n    result = n ^ mask\n    \n    return result\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\n### Signature\ndef set_middle_bits(n):",
    "timestamp": "2025-10-17T17:01:09.931921",
    "response_time": "1.35",
    "context": "{\"function_name\": \"toggle_middle_bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 736,
    "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef left_insertion(a, x):\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\n### Signature\ndef left_insertion(a, x):",
    "timestamp": "2025-10-17T17:01:11.022093",
    "response_time": "1.09",
    "context": "{\"function_name\": \"left_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 737,
    "solution": "```python\nimport re\n\ndef check_str(string):\n    # Define a regex pattern to match strings starting with a vowel\n    pattern = r'^[aeiouAEIOU]'\n    \n    # Use re.match to check if the string starts with a vowel\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\n### Signature\ndef check_str(string):",
    "timestamp": "2025-10-17T17:01:12.099934",
    "response_time": "1.08",
    "context": "{\"function_name\": \"check_str\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 738,
    "solution": "```python\ndef geometric_sum(n):\n    if n == 0:\n        return 1\n    else:\n        return 1 / (1 + geometric_sum(n - 1))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\n### Signature\ndef geometric_sum(n):",
    "timestamp": "2025-10-17T17:01:12.821692",
    "response_time": "0.72",
    "context": "{\"function_name\": \"geometric_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 739,
    "solution": "```python\nimport math\n\ndef find_Index(n):\n    # Calculate the smallest triangular number with n digits\n    # The nth triangular number is given by T_n = n * (n + 1) / 2\n    # We need to find the smallest n such that T_n has n digits\n    # The number of digits in a number x is given by floor(log10(x)) + 1\n    # So, we need to find the smallest n such that floor(log10(n * (n + 1) / 2)) + 1 = n\n    # This simplifies to floor(log10(n * (n + 1) / 2)) = n - 1\n    # We can solve this by binary search\n    low, high = 1, 10**n\n    while low < high:\n        mid = (low + high) // 2\n        if math.floor(math.log10(mid * (mid + 1) / 2)) == mid - 1:\n            high = mid\n        else:\n            low = mid + 1\n    return low\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\n### Signature\ndef find_Index(n):",
    "timestamp": "2025-10-17T17:01:15.918000",
    "response_time": "3.09",
    "context": "{\"function_name\": \"find_Index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 740,
    "solution": "```python\n===START===\nfrom typing import *\nfrom collections import *\n\ndef tuple_to_dict(test_tup):\n    # Check if the length of the tuple is even\n    if len(test_tup) % 2 != 0:\n        raise ValueError(\"Tuple length must be even\")\n    \n    # Use a dictionary comprehension to create the key-value pairs\n    result_dict = {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n    \n    return result_dict\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\n### Signature\ndef tuple_to_dict(test_tup):",
    "timestamp": "2025-10-17T17:01:17.490440",
    "response_time": "1.57",
    "context": "{\"function_name\": \"tuple_to_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 741,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef all_Characters_Same(s) :\n    if not s:\n        return True\n    return all(c == s[0] for c in s)\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether all the characters are same or not.\n\n### Signature\ndef all_Characters_Same(s) :",
    "timestamp": "2025-10-17T17:01:18.280353",
    "response_time": "0.79",
    "context": "{\"function_name\": \"all_Characters_Same\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 742,
    "solution": "```python\nfrom math import sqrt\n\ndef area_tetrahedron(side):\n    # Calculate the area of a regular tetrahedron\n    # The formula for the area of a regular tetrahedron with side length 'a' is:\n    # Area = sqrt(3) * a^2\n    return sqrt(3) * side ** 2\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to caluclate the area of a tetrahedron.\n\n### Signature\ndef area_tetrahedron(side):",
    "timestamp": "2025-10-17T17:01:19.497110",
    "response_time": "1.21",
    "context": "{\"function_name\": \"area_tetrahedron\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 743,
    "solution": "```python\ndef rotate_right(list, m):\n    if not list:\n        return list\n    \n    n = len(list)\n    m = m % n  # In case m is greater than the length of the list\n    \n    # Rotate the list by slicing\n    rotated_list = list[-m:] + list[:-m]\n    return rotated_list\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\n### Signature\ndef rotate_right(list, m):",
    "timestamp": "2025-10-17T17:01:20.645172",
    "response_time": "1.15",
    "context": "{\"function_name\": \"rotate_right\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 744,
    "solution": "```python\ndef check_none(test_tup):\n    return any(item is None for item in test_tup)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given tuple has any none value or not.\n\n### Signature\ndef check_none(test_tup):",
    "timestamp": "2025-10-17T17:01:21.114367",
    "response_time": "0.47",
    "context": "{\"function_name\": \"check_none\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 745,
    "solution": "```python\nfrom typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    def is_divisible_by_digits(n: int) -> bool:\n        digits = [int(d) for d in str(n)]\n        for digit in digits:\n            if digit == 0 or n % digit != 0:\n                return False\n        return True\n\n    return [n for n in range(startnum, endnum + 1) if is_divisible_by_digits(n)]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\n### Signature\ndef divisible_by_digits(startnum, endnum):",
    "timestamp": "2025-10-17T17:01:22.614079",
    "response_time": "1.50",
    "context": "{\"function_name\": \"divisible_by_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 746,
    "solution": "```python\n###START===\nimport math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a / 360)\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\n### Signature\ndef sector_area(r,a):",
    "timestamp": "2025-10-17T17:01:23.503622",
    "response_time": "0.89",
    "context": "{\"function_name\": \"sector_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 747,
    "solution": "```python\n===START===\nfrom typing import *\nfrom collections import *\n\ndef lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    \n    # Create a 3D DP table to store lengths of longest common subsequence\n    dp = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    # Build the dp table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    \n    # The length of the longest common subsequence of X, Y, and Z\n    return dp[m][n][o]\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n### Signature\ndef lcs_of_three(X, Y, Z):",
    "timestamp": "2025-10-17T17:01:27.006020",
    "response_time": "3.50",
    "context": "{\"function_name\": \"lcs_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 748,
    "solution": "```python\ndef capital_words_spaces(str1):\n    # Split the string into words\n    words = str1.split()\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Check if the word starts with a capital letter\n        if word[0].isupper():\n            # Add a space before the word\n            result.append(' ' + word)\n        else:\n            # Add the word as is\n            result.append(word)\n    \n    # Join the list into a single string and return it\n    return ''.join(result)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to put spaces between words starting with capital letters in a given string.\n\n### Signature\ndef capital_words_spaces(str1):",
    "timestamp": "2025-10-17T17:01:28.816382",
    "response_time": "1.81",
    "context": "{\"function_name\": \"capital_words_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 749,
    "solution": "```python\nfrom typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[str]:\n    # Sort the list of strings numerically\n    return sorted(nums_str, key=lambda x: int(x))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n### Signature\ndef sort_numeric_strings(nums_str):",
    "timestamp": "2025-10-17T17:01:29.549276",
    "response_time": "0.73",
    "context": "{\"function_name\": \"sort_numeric_strings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 750,
    "solution": "```python\ndef add_tuple(test_list, test_tup):\n    # Append the tuple to the list\n    test_list.append(test_tup)\n    return test_list\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to add the given tuple to the given list.\n\n### Signature\ndef add_tuple(test_list, test_tup):",
    "timestamp": "2025-10-17T17:01:30.153371",
    "response_time": "0.60",
    "context": "{\"function_name\": \"add_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 751,
    "solution": "```python\n###START===\nimport math\n\ndef check_min_heap_helper(arr, i):\n    n = len(arr)\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # If left child is within bounds and is less than root\n    if left < n and arr[left] < arr[i]:\n        return False\n    \n    # If right child is within bounds and is less than root\n    if right < n and arr[right] < arr[i]:\n        return False\n    \n    # Recursively check the left and right subtrees\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n### Signature\ndef check_min_heap_helper(arr, i):",
    "timestamp": "2025-10-17T17:01:32.025976",
    "response_time": "1.87",
    "context": "{\"function_name\": \"check_min_heap\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 752,
    "solution": "```python\n===START===\nfrom typing import *\nfrom collections import *\n\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + 2 * b\n        return b\n\n===END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\n### Signature\ndef jacobsthal_num(n):",
    "timestamp": "2025-10-17T17:01:33.526418",
    "response_time": "1.50",
    "context": "{\"function_name\": \"jacobsthal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 753,
    "solution": "```python\nfrom typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    # Sort the list of tuples based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    # Return the first K elements from the sorted list\n    return test_list[:K]\n\n# Test cases\nprint(min_k([(4, 5), (1, 2), (3, 4)], 2))  # Output: [(1, 2), (3, 4)]\nprint(min_k([(10, 20), (5, 15), (8, 12)], 3))  # Output: [(5, 15), (8, 12), (10, 20)]\nprint(min_k([(2, 3), (1, 1), (4, 4)], 1))  # Output: [(1, 1)]\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n### Signature\ndef min_k(test_list, K):",
    "timestamp": "2025-10-17T17:01:38.491983",
    "response_time": "4.96",
    "context": "{\"function_name\": \"min_k\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 754,
    "solution": "```python\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    # Find the minimum length among the three lists\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Iterate over the range of the minimum length\n    for i in range(min_length):\n        # Check if the elements at the current index are the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # If they are, add the element to the common_elements list\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\n### Signature\ndef extract_index_list(l1, l2, l3):",
    "timestamp": "2025-10-17T17:01:40.746301",
    "response_time": "2.25",
    "context": "{\"function_name\": \"extract_index_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 755,
    "solution": "```python\ndef second_smallest(numbers):\n    if len(numbers) < 2:\n        return None  # Not enough elements to find a second smallest\n\n    # Initialize the smallest and second smallest with infinity\n    smallest = second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n\n    return second_smallest if second_smallest != float('inf') else None\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the second smallest number in a list.\n\n### Signature\ndef second_smallest(numbers):",
    "timestamp": "2025-10-17T17:01:42.302374",
    "response_time": "1.55",
    "context": "{\"function_name\": \"second_smallest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 756,
    "solution": "```python\nimport re\n\ndef text_match_zero_one(text):\n    # Use regular expression to find a string that starts with 'a' followed by one or more 'b's\n    pattern = r'^a+b$'\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\n### Signature\ndef text_match_zero_one(text):",
    "timestamp": "2025-10-17T17:01:43.354462",
    "response_time": "1.05",
    "context": "{\"function_name\": \"text_match_zero_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 757,
    "solution": "```python\nfrom typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    # Initialize a counter for reverse pairs\n    count = 0\n    \n    # Iterate over each string in the list\n    for i in range(len(test_list)):\n        # Iterate over the remaining strings in the list\n        for j in range(i + 1, len(test_list)):\n            # Check if the current string is the reverse of the next string\n            if test_list[i] == test_list[j][::-1]:\n                # Increment the counter if a reverse pair is found\n                count += 1\n    \n    # Return the total count of reverse pairs\n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\n### Signature\ndef count_reverse_pairs(test_list):",
    "timestamp": "2025-10-17T17:01:45.280470",
    "response_time": "1.92",
    "context": "{\"function_name\": \"count_reverse_pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 758,
    "solution": "```python\nfrom collections import defaultdict\n\ndef unique_sublists(list1):\n    # Initialize a dictionary to store the count of each tuple representation of sublists\n    sublist_count = defaultdict(int)\n    \n    # Iterate over each sublist in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple and increment its count in the dictionary\n        sublist_count[tuple(sublist)] += 1\n    \n    # Return the dictionary containing the count of each unique sublist\n    return dict(sublist_count)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n### Signature\ndef unique_sublists(list1):",
    "timestamp": "2025-10-17T17:01:46.757651",
    "response_time": "1.47",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 759,
    "solution": "```python\nimport re\n\ndef is_decimal(num):\n    # Regular expression to match a decimal number with a precision of 2\n    decimal_pattern = re.compile(r'^-?\\d+(\\.\\d{1,2})?$')\n    return bool(decimal_pattern.match(num))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\n### Signature\ndef is_decimal(num):",
    "timestamp": "2025-10-17T17:01:47.622167",
    "response_time": "0.86",
    "context": "{\"function_name\": \"is_decimal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 760,
    "solution": "```python\n###START===\nfrom typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\n### Signature\ndef unique_Element(arr):",
    "timestamp": "2025-10-17T17:01:48.257918",
    "response_time": "0.63",
    "context": "{\"function_name\": \"unique_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 762,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef check_monthnumber_number(monthnum3):\n    # Define a set of months that have 30 days\n    months_with_30_days = {4, 6, 9, 11}\n    \n    # Check if the given month number is in the set of months with 30 days\n    return monthnum3 in months_with_30_days\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n### Signature\ndef check_monthnumber_number(monthnum3):",
    "timestamp": "2025-10-17T17:01:49.629146",
    "response_time": "1.37",
    "context": "{\"function_name\": \"check_monthnumber_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 763,
    "solution": "```python\n###START===\nimport sys\n\ndef find_min_diff(arr, n):\n    if n < 2:\n        return -1  # Not enough elements to form a pair\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference with a large value\n    min_diff = sys.maxsize\n\n    # Iterate through the sorted array and find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\n### Signature\ndef find_min_diff(arr,n):",
    "timestamp": "2025-10-17T17:01:51.336006",
    "response_time": "1.70",
    "context": "{\"function_name\": \"find_min_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 764,
    "solution": "```python\n###START===\ndef number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count number of digits in a given string.\n\n### Signature\ndef number_ctr(str):",
    "timestamp": "2025-10-17T17:01:52.048608",
    "response_time": "0.71",
    "context": "{\"function_name\": \"number_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 765,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef is_polite(n):\n    # A number is polite if it can be expressed as the sum of two or more consecutive positive integers\n    # The smallest polite number is 3 (1+2)\n    if n < 3:\n        return False\n    # Check if n is a perfect square\n    root = int(math.sqrt(n))\n    if root * root == n:\n        return True\n    # Check if n is of the form 4k + 2\n    if n % 4 == 2:\n        return True\n    return False\n\ndef nth_polite_number(n):\n    # Start checking from the smallest polite number\n    polite_number = 3\n    count = 0\n    while True:\n        if is_polite(polite_number):\n            count += 1\n            if count == n:\n                return polite_number\n        polite_number += 1\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\n### Signature\ndef is_polite(n):",
    "timestamp": "2025-10-17T17:01:54.722090",
    "response_time": "2.67",
    "context": "{\"function_name\": \"is_polite\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 766,
    "solution": "```python\ndef pair_wise(l1):\n    return list(zip(l1, l1[1:]))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to return a list of all pairs of consecutive items in a given list.\n\n### Signature\ndef pair_wise(l1):",
    "timestamp": "2025-10-17T17:01:55.193496",
    "response_time": "0.47",
    "context": "{\"function_name\": \"pair_wise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 767,
    "solution": "```python\nfrom typing import List\n\ndef get_pairs_count(arr: List[int], sum: int) -> int:\n    count = 0\n    seen = set()\n    for num in arr:\n        complement = sum - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\n### Signature\ndef get_pairs_count(arr, sum):",
    "timestamp": "2025-10-17T17:01:56.234646",
    "response_time": "1.04",
    "context": "{\"function_name\": \"get_pairs_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 769,
    "solution": "```python\ndef Diff(li1, li2):\n    # Use set operations to find the difference between two lists\n    return list(set(li1) - set(li2))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to get the difference between two lists.\n\n### Signature\ndef Diff(li1,li2):",
    "timestamp": "2025-10-17T17:01:56.870947",
    "response_time": "0.63",
    "context": "{\"function_name\": \"Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 770,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef odd_num_sum(n) :\n    return sum((2*i + 1)**4 for i in range(n))\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\n### Signature\ndef odd_num_sum(n) :",
    "timestamp": "2025-10-17T17:01:57.577905",
    "response_time": "0.70",
    "context": "{\"function_name\": \"odd_num_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 771,
    "solution": "```python\n###START===\nimport re\n\ndef check_expression(exp):\n    # Remove all non-parentheses characters\n    exp = re.sub(r'[^()]', '', exp)\n    \n    # Initialize a counter for balance\n    balance = 0\n    \n    # Iterate through each character in the expression\n    for char in exp:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        # If balance goes negative, parentheses are not balanced\n        if balance < 0:\n            return False\n    \n    # If balance is zero, parentheses are balanced\n    return balance == 0\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\n### Signature\ndef check_expression(exp):",
    "timestamp": "2025-10-17T17:01:59.412502",
    "response_time": "1.83",
    "context": "{\"function_name\": \"check_expression\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 772,
    "solution": "```python\n###START===\nimport re\n\ndef remove_length(test_str, K):\n    # Use regular expression to find all words with length K and remove them\n    result = re.sub(r'\\b\\w{' + str(K) + r'}\\b', '', test_str)\n    return result\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove all the words with k length in the given string.\n\n### Signature\ndef remove_length(test_str, K):",
    "timestamp": "2025-10-17T17:02:00.388685",
    "response_time": "0.97",
    "context": "{\"function_name\": \"remove_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 773,
    "solution": "```python\n###START===\nimport re\n\ndef occurance_substring(text, pattern):\n    # Use regular expression to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # If no matches are found, return None\n    if not matches:\n        return None\n    \n    # Collect the start and end positions of each match\n    positions = [(match.start(), match.end()) for match in matches]\n    \n    # Return the positions as a list\n    return positions\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n### Signature\ndef occurance_substring(text,pattern):",
    "timestamp": "2025-10-17T17:02:01.928083",
    "response_time": "1.54",
    "context": "{\"function_name\": \"occurance_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 775,
    "solution": "```python\ndef odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\n### Signature\ndef odd_position(nums):",
    "timestamp": "2025-10-17T17:02:02.627368",
    "response_time": "0.70",
    "context": "{\"function_name\": \"odd_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 776,
    "solution": "```python\n###START===\nimport string\n\ndef count_vowels(test_str):\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\n### Signature\ndef count_vowels(test_str):",
    "timestamp": "2025-10-17T17:02:03.933065",
    "response_time": "1.30",
    "context": "{\"function_name\": \"count_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 777,
    "solution": "```python\ndef find_sum(arr):\n    # Create a dictionary to count occurrences of each element\n    count_dict = {}\n    \n    # Count occurrences of each element in the list\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Calculate the sum of elements that appear only once\n    sum_non_repeated = sum(num for num, count in count_dict.items() if count == 1)\n    \n    return sum_non_repeated\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of non-repeated elements in a given list.\n\n### Signature\ndef find_sum(arr):",
    "timestamp": "2025-10-17T17:02:05.483767",
    "response_time": "1.55",
    "context": "{\"function_name\": \"find_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 778,
    "solution": "```python\nfrom typing import List\n\ndef pack_consecutive_duplicates(list1: List) -> List[List]:\n    if not list1:\n        return []\n\n    result = []\n    current_sublist = [list1[0]]\n\n    for i in range(1, len(list1)):\n        if list1[i] == current_sublist[-1]:\n            current_sublist.append(list1[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [list1[i]]\n\n    result.append(current_sublist)\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\n### Signature\ndef pack_consecutive_duplicates(list1):",
    "timestamp": "2025-10-17T17:02:07.035234",
    "response_time": "1.55",
    "context": "{\"function_name\": \"pack_consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 779,
    "solution": "```python\nfrom collections import defaultdict\n\ndef unique_sublists(list1):\n    # Initialize a defaultdict to count occurrences of each tuple\n    count_dict = defaultdict(int)\n    \n    # Iterate over each sublist in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple and increment its count\n        count_dict[tuple(sublist)] += 1\n    \n    # Convert the defaultdict to a regular dictionary and return it\n    return dict(count_dict)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\n### Signature\ndef unique_sublists(list1):",
    "timestamp": "2025-10-17T17:02:08.407963",
    "response_time": "1.37",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 780,
    "solution": "```python\nfrom itertools import combinations\n\ndef find_combinations(test_list):\n    result = []\n    for r in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, r):\n            result.append(sum(combo))\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\n### Signature\ndef find_combinations(test_list):",
    "timestamp": "2025-10-17T17:02:09.304420",
    "response_time": "0.89",
    "context": "{\"function_name\": \"find_combinations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 781,
    "solution": "```python\n###START===\nfrom math import sqrt\n\ndef count_divisors(n) :\n    count = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count % 2 == 0\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\n### Signature\ndef count_divisors(n) :",
    "timestamp": "2025-10-17T17:02:10.505776",
    "response_time": "1.20",
    "context": "{\"function_name\": \"count_divisors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 782,
    "solution": "```python\n###START===\nfrom typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(n):\n        # Calculate the number of subarrays starting at index i with odd length\n        odd_length_subarrays = (n - i) // 2\n        # Add the contribution of this subarray to the total sum\n        total_sum += odd_length_subarrays * arr[i]\n    \n    return total_sum\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\n### Signature\ndef odd_length_sum(arr):",
    "timestamp": "2025-10-17T17:02:12.037750",
    "response_time": "1.53",
    "context": "{\"function_name\": \"odd_length_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 783,
    "solution": "```python\nimport math\n\ndef rgb_to_hsv(r, g, b):\n    # Normalize RGB values to the range [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    # Find the maximum and minimum values in the RGB array\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    # Calculate the hue\n    if diff == 0:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    else:  # max_val == b\n        h = (60 * ((r - g) / diff) + 240) % 360\n    \n    # Calculate the saturation\n    if max_val == 0:\n        s = 0\n    else:\n        s = (diff / max_val) * 100\n    \n    # Calculate the value\n    v = max_val * 100\n    \n    return h, s, v\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n### Signature\ndef rgb_to_hsv(r, g, b):",
    "timestamp": "2025-10-17T17:02:15.977502",
    "response_time": "3.94",
    "context": "{\"function_name\": \"rgb_to_hsv\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 784,
    "solution": "```python\ndef mul_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n    \n    if even_count == 0:\n        return \"No even number found\"\n    if odd_count == 0:\n        return \"No odd number found\"\n    \n    return even_product * odd_product\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the product of first even and odd number of a given list.\n\n### Signature\ndef mul_even_odd(list1):",
    "timestamp": "2025-10-17T17:02:17.702954",
    "response_time": "1.72",
    "context": "{\"function_name\": \"mul_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 785,
    "solution": "```python\ndef tuple_str_int(test_str):\n    # Split the string by commas and convert each element to an integer\n    return tuple(int(ele) for ele in test_str.split(','))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert tuple string to integer tuple.\n\n### Signature\ndef tuple_str_int(test_str):",
    "timestamp": "2025-10-17T17:02:18.367421",
    "response_time": "0.66",
    "context": "{\"function_name\": \"tuple_str_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 786,
    "solution": "```python\ndef right_insertion(a, x):\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\n### Signature\ndef right_insertion(a, x):",
    "timestamp": "2025-10-17T17:02:19.394332",
    "response_time": "1.02",
    "context": "{\"function_name\": \"right_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 787,
    "solution": "```python\nimport re\n\ndef text_match_three(text):\n    # Use regular expression to find a string that starts with 'a' followed by exactly three 'b's\n    pattern = r'^a{1}b{3}$'\n    return bool(re.search(pattern, text))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by three 'b'.\n\n### Signature\ndef text_match_three(text):",
    "timestamp": "2025-10-17T17:02:20.300403",
    "response_time": "0.90",
    "context": "{\"function_name\": \"text_match_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 788,
    "solution": "```python\ndef new_tuple(test_list, test_str):\n    # Convert the string to a tuple\n    str_tuple = tuple(test_str)\n    # Create a new tuple by combining the list and the string tuple\n    new_tuple = test_list + str_tuple\n    return new_tuple\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to create a new tuple from the given string and list.\n\n### Signature\ndef new_tuple(test_list, test_str):",
    "timestamp": "2025-10-17T17:02:21.231595",
    "response_time": "0.93",
    "context": "{\"function_name\": \"new_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 790,
    "solution": "```python\ndef even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether every even index contains even numbers of a given list.\n\n### Signature\ndef even_position(nums):",
    "timestamp": "2025-10-17T17:02:21.970517",
    "response_time": "0.74",
    "context": "{\"function_name\": \"even_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 791,
    "solution": "```python\ndef remove_nested(test_tup):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each element in the test tuple\n    for element in test_tup:\n        # Check if the element is a tuple\n        if isinstance(element, tuple):\n            # If it is a tuple, recursively call the function on it\n            result.extend(remove_nested(element))\n        else:\n            # If it is not a tuple, append it to the result list\n            result.append(element)\n    \n    # Return the result list as a tuple\n    return tuple(result)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove tuples from the given tuple.\n\n### Signature\ndef remove_nested(test_tup):",
    "timestamp": "2025-10-17T17:02:23.678409",
    "response_time": "1.71",
    "context": "{\"function_name\": \"remove_nested\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 792,
    "solution": "```python\ndef count_list(input_list):\n    return len(input_list)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of lists in a given number of lists.\n\n### Signature\ndef count_list(input_list):",
    "timestamp": "2025-10-17T17:02:24.058101",
    "response_time": "0.38",
    "context": "{\"function_name\": \"count_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 793,
    "solution": "```python\ndef last(arr, x):\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1  # Move to the right to find the last occurrence\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the last position of an element in a sorted array.\n\n### Signature\ndef last(arr,x):",
    "timestamp": "2025-10-17T17:02:25.615889",
    "response_time": "1.55",
    "context": "{\"function_name\": \"last\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 794,
    "solution": "```python\nimport re\n\ndef text_starta_endb(text):\n    # Use regular expression to match the pattern\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n### Signature\ndef text_starta_endb(text):",
    "timestamp": "2025-10-17T17:02:26.363620",
    "response_time": "0.74",
    "context": "{\"function_name\": \"text_starta_endb\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 796,
    "solution": "```python\n###START===\ndef return_sum(dict):\n    return sum(dict.values())\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite function to find the sum of all items in the given dictionary.\n\n### Signature\ndef return_sum(dict):",
    "timestamp": "2025-10-17T17:02:26.838789",
    "response_time": "0.47",
    "context": "{\"function_name\": \"return_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 797,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef sum_odd(n):\n    return sum(i for i in range(1, n+1, 2))\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\n### Signature\ndef sum_odd(n):",
    "timestamp": "2025-10-17T17:02:27.544184",
    "response_time": "0.70",
    "context": "{\"function_name\": \"sum_in_range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 798,
    "solution": "```python\ndef _sum(arr):\n    return sum(arr)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of an array.\n\n### Signature\ndef _sum(arr):",
    "timestamp": "2025-10-17T17:02:27.952216",
    "response_time": "0.41",
    "context": "{\"function_name\": \"_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 799,
    "solution": "```python\ndef left_rotate(n, d):\n    # Ensure d is within the range of 0 to 31\n    d = d % 32\n    \n    # Perform the left rotation\n    return (n << d) | (n >> (32 - d))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n### Signature\ndef left_rotate(n,d):",
    "timestamp": "2025-10-17T17:02:28.870480",
    "response_time": "0.92",
    "context": "{\"function_name\": \"left_rotate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 800,
    "solution": "```python\ndef remove_all_spaces(text):\n    return text.replace(\" \", \"\")\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from a string.\n\n### Signature\ndef remove_all_spaces(text):",
    "timestamp": "2025-10-17T17:02:29.280709",
    "response_time": "0.41",
    "context": "{\"function_name\": \"remove_all_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 801,
    "solution": "```python\ndef test_three_equal(x, y, z):\n    # Check if all three numbers are equal\n    if x == y == z:\n        return 3\n    else:\n        return 0\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of equal numbers from three given integers.\n\n### Signature\ndef test_three_equal(x,y,z):",
    "timestamp": "2025-10-17T17:02:30.005850",
    "response_time": "0.72",
    "context": "{\"function_name\": \"test_three_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 802,
    "solution": "```python\nfrom typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    if not arr:\n        return 0\n\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        mid = left + (right - left) // 2\n\n        # Check if mid is the smallest element\n        if mid > 0 and arr[mid] < arr[mid - 1]:\n            return mid\n\n        # Check if right is the smallest element\n        if mid < len(arr) - 1 and arr[mid] > arr[mid + 1]:\n            return mid + 1\n\n        # Decide whether to go to the left or right half\n        if arr[mid] >= arr[left]:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If no rotation is found, the array is sorted in ascending order\n    return 0\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n### Signature\ndef count_rotation(arr):",
    "timestamp": "2025-10-17T17:02:32.599456",
    "response_time": "2.59",
    "context": "{\"function_name\": \"count_rotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 803,
    "solution": "```python\n###START===\nimport math\n\ndef is_perfect_square(n) :\n    if n < 0 :\n        return False\n    root = math.isqrt(n)\n    return root * root == n\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\n### Signature\ndef is_perfect_square(n) :",
    "timestamp": "2025-10-17T17:02:33.418813",
    "response_time": "0.82",
    "context": "{\"function_name\": \"is_perfect_square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 804,
    "solution": "```python\n###START===\nfrom typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n\n###END===\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the product of numbers in a list is even or not.\n\n### Signature\ndef is_product_even(arr):",
    "timestamp": "2025-10-17T17:02:34.261120",
    "response_time": "0.84",
    "context": "{\"function_name\": \"is_product_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 805,
    "solution": "```python\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\n### Signature\ndef max_sum_list(lists):",
    "timestamp": "2025-10-17T17:02:35.455759",
    "response_time": "1.19",
    "context": "{\"function_name\": \"max_sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 806,
    "solution": "```python\ndef max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find maximum run of uppercase characters in the given string.\n\n### Signature\ndef max_run_uppercase(test_str):",
    "timestamp": "2025-10-17T17:02:36.582613",
    "response_time": "1.12",
    "context": "{\"function_name\": \"max_run_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 807,
    "solution": "```python\ndef first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the first odd number in a given list of numbers.\n\n### Signature\ndef first_odd(nums):",
    "timestamp": "2025-10-17T17:02:37.245472",
    "response_time": "0.66",
    "context": "{\"function_name\": \"first_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 808,
    "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef check_K(test_tup, K):\n    # Check if K is in any of the tuples\n    return any(K in tup for tup in test_tup)\n\n# Example usage:\ntest_tup = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nK = 5\nprint(check_K(test_tup, K))  # Output: True\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given tuples contain the k or not.\n\n### Signature\ndef check_K(test_tup, K):",
    "timestamp": "2025-10-17T17:02:38.760953",
    "response_time": "1.51",
    "context": "{\"function_name\": \"check_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
    "dataset_row_id": 809,
    "solution": "```python\ndef check_smaller(test_tup1, test_tup2):\n    # Check if each element of test_tup2 is smaller than the corresponding element in test_tup1\n    return all(x < y for x, y in zip(test_tup1, test_tup2))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n### Signature\ndef check_smaller(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:02:39.740031",
    "response_time": "0.98",
    "context": "{\"function_name\": \"check_smaller\"}"
  }
]