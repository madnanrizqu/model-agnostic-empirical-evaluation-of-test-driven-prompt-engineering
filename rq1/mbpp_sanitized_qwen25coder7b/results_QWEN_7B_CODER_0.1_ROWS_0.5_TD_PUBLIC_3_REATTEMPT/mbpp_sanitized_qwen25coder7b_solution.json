[
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 2,
        "solution": "===START===\nfrom typing import List\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> List[int]:\n    # Convert tuples to sets to find the intersection\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the intersection of both sets\n    shared_elements = set1.intersection(set2)\n    \n    # Convert the set back to a list\n    return list(shared_elements)\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
        "timestamp": "2025-08-14T06:05:16.566859",
        "response_time": "3.44",
        "context": "{\"function_name\": \"similar_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 3,
        "solution": "===START===\nimport math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
        "timestamp": "2025-08-14T06:05:18.155278",
        "response_time": "1.59",
        "context": "{\"function_name\": \"is_not_prime\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 4,
        "solution": "===START===\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    largest_nums = heapq.nlargest(n, nums)\n    return largest_nums\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
        "timestamp": "2025-08-14T06:05:19.159907",
        "response_time": "1.00",
        "context": "{\"function_name\": \"heap_queue_largest\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 6,
        "solution": "===START===\n```python\ndef is_Power_Of_Two(x):\n    return x > 0 and (x & (x - 1)) == 0\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
        "timestamp": "2025-08-14T06:05:20.261273",
        "response_time": "1.10",
        "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 7,
        "solution": "===START===\nimport re\n\ndef find_char_long(text):\n    # Use regular expression to find words that are at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return ' '.join(words)\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
        "timestamp": "2025-08-14T06:05:21.799197",
        "response_time": "1.54",
        "context": "{\"function_name\": \"find_char_long\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 8,
        "solution": "===START===\nimport math\n\ndef square_nums(nums):\n    return [math.pow(num, 2) for num in nums]\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
        "timestamp": "2025-08-14T06:05:22.720245",
        "response_time": "0.92",
        "context": "{\"function_name\": \"square_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 9,
        "solution": "===START===\nimport math\n\ndef find_Rotations(str):\n    n = len(str)\n    for i in range(1, n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
        "timestamp": "2025-08-14T06:05:24.117616",
        "response_time": "1.40",
        "context": "{\"function_name\": \"find_Rotations\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 11,
        "solution": "===START===\ndef remove_Occ(s, ch):\n    first_index = s.find(ch)\n    if first_index != -1:\n        s = s[:first_index] + s[first_index + 1:]\n    \n    last_index = s.rfind(ch)\n    if last_index != -1:\n        s = s[:last_index] + s[last_index + 1:]\n    \n    return s\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
        "timestamp": "2025-08-14T06:05:26.306292",
        "response_time": "2.19",
        "context": "{\"function_name\": \"remove_Occ\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 12,
        "solution": "===START===\nimport numpy as np\n\ndef sort_matrix(M):\n    # Convert the list of lists to a numpy array\n    matrix = np.array(M)\n    \n    # Sort the matrix based on the sum of rows\n    sorted_matrix = matrix[np.argsort(np.sum(matrix, axis=1))]\n    \n    # Convert the sorted numpy array back to a list of lists\n    sorted_list = sorted_matrix.tolist()\n    \n    return sorted_list\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
        "timestamp": "2025-08-14T06:05:28.602657",
        "response_time": "2.29",
        "context": "{\"function_name\": \"sort_matrix\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 14,
        "solution": "===START===\nimport math\n\ndef find_Volume(l, b, h):\n    # Calculate the area of the triangular base\n    base_area = (l * b) / 2\n    \n    # Calculate the volume of the triangular prism\n    volume = base_area * h\n    \n    return volume\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
        "timestamp": "2025-08-14T06:05:30.296910",
        "response_time": "1.69",
        "context": "{\"function_name\": \"find_Volume\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 16,
        "solution": "===START===\nimport re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
        "timestamp": "2025-08-14T06:05:31.525357",
        "response_time": "1.23",
        "context": "{\"function_name\": \"text_lowercase_underscore\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 17,
        "solution": "===START===\nimport math\n\ndef square_perimeter(a):\n    return 4 * a\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
        "timestamp": "2025-08-14T06:05:32.344483",
        "response_time": "0.82",
        "context": "{\"function_name\": \"square_perimeter\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 18,
        "solution": "===START===\ndef str_to_list(string):\n    return list(string)\n\ndef remove_chars(str1, str2):\n    str1_list = str_to_list(str1)\n    str2_set = set(str_to_list(str2))\n    result = [char for char in str1_list if char not in str2_set]\n    return ''.join(result)\n\n# Example usage:\n# result = remove_chars(\"hello\", \"eo\")\n# print(result)  # Output: \"hll\"\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
        "timestamp": "2025-08-14T06:05:34.829263",
        "response_time": "2.48",
        "context": "{\"function_name\": \"remove_dirty_chars\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 19,
        "solution": "===START===\ndef test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return \"true\"\n        seen.add(num)\n    return \"false\"\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
        "timestamp": "2025-08-14T06:05:36.054473",
        "response_time": "1.22",
        "context": "{\"function_name\": \"test_duplicate\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 20,
        "solution": "===START===\nimport math\n\ndef is_woodall(x):\n    if x <= 0:\n        return False\n    n = int(math.log2(x + 1))\n    return x == (2 ** n - 1) * n\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
        "timestamp": "2025-08-14T06:05:37.492081",
        "response_time": "1.44",
        "context": "{\"function_name\": \"is_woodall\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 56,
        "solution": "===START===\nimport math\n\ndef rev(num):\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num //= 10\n    return reversed_num\n\ndef is_one_less_than_twice_reversed(num):\n    return num == 2 * rev(num) - 1\n\n# Example usage:\n# result = is_one_less_than_twice_reversed(18)\n# print(result)  # Output: True\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
        "timestamp": "2025-08-14T06:05:40.169364",
        "response_time": "2.67",
        "context": "{\"function_name\": \"check\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 57,
        "solution": "===START===\nfrom typing import List\n\ndef find_Max_Num(arr: List[int]) -> str:\n    arr = [str(num) for num in arr]\n    arr.sort(key=lambda x: x*3, reverse=True)\n    max_num = ''.join(arr)\n    return max_num.lstrip('0') or '0'\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
        "timestamp": "2025-08-14T06:05:41.940323",
        "response_time": "1.77",
        "context": "{\"function_name\": \"find_Max_Num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 58,
        "solution": "===START===\nimport operator\n\ndef opposite_Signs(x, y):\n    return operator.xor(x, y) < 0\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
        "timestamp": "2025-08-14T06:05:42.852885",
        "response_time": "0.91",
        "context": "{\"function_name\": \"opposite_Signs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 59,
        "solution": "===START===\nimport math\n\ndef is_octagonal(n):\n    if n < 1:\n        return False\n    x = (2 * n + math.sqrt(8 * n + 1)) / 4\n    return x == int(x)\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
        "timestamp": "2025-08-14T06:05:44.281183",
        "response_time": "1.43",
        "context": "{\"function_name\": \"is_octagonal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 61,
        "solution": "===START===\nfrom collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    prefix_sum = 0\n    prefix_sum_dict = defaultdict(int)\n    prefix_sum_dict[0] = 1\n    \n    for char in s:\n        prefix_sum += int(char)\n        count += prefix_sum_dict[prefix_sum - (len(s) - prefix_sum)]\n        prefix_sum_dict[prefix_sum - (len(s) - prefix_sum)] += 1\n    \n    return count\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
        "timestamp": "2025-08-14T06:05:46.845990",
        "response_time": "2.56",
        "context": "{\"function_name\": \"count_Substrings\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 62,
        "solution": "===START===\nimport sys\n\ndef smallest_num(xs):\n    if not xs:\n        return None\n    return min(xs)\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
        "timestamp": "2025-08-14T06:05:47.704827",
        "response_time": "0.86",
        "context": "{\"function_name\": \"smallest_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 63,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    # Calculate the absolute difference for each pair\n    differences = [abs(x - y) for x, y in test_list]\n    # Return the maximum difference found\n    return max(differences)\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
        "timestamp": "2025-08-14T06:05:49.458313",
        "response_time": "1.75",
        "context": "{\"function_name\": \"max_difference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 64,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
        "timestamp": "2025-08-14T06:05:50.779628",
        "response_time": "1.32",
        "context": "{\"function_name\": \"subject_marks\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 65,
        "solution": "===START===\nfrom typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total_sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n    return total_sum\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
        "timestamp": "2025-08-14T06:05:52.736627",
        "response_time": "1.95",
        "context": "{\"function_name\": \"recursive_list_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 66,
        "solution": "===START===\nfrom typing import List\n\ndef pos_count(lst: List[int]) -> int:\n    return sum(1 for num in lst if num > 0)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
        "timestamp": "2025-08-14T06:05:53.768907",
        "response_time": "1.03",
        "context": "{\"function_name\": \"pos_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 67,
        "solution": "===START===\nfrom math import factorial\n\ndef bell_number(n):\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        bell[i] = sum(bell[j] * binomial(i - 1, j) for j in range(i))\n    return bell[n]\n\ndef binomial(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
        "timestamp": "2025-08-14T06:05:56.346021",
        "response_time": "2.58",
        "context": "{\"function_name\": \"bell_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 68,
        "solution": "===START===\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> str:\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n    \n    if increasing or decreasing:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
        "timestamp": "2025-08-14T06:05:58.685438",
        "response_time": "2.34",
        "context": "{\"function_name\": \"is_Monotonic\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 69,
        "solution": "===START===\nfrom typing import List\n\ndef is_sublist(l: List, s: List) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
        "timestamp": "2025-08-14T06:06:00.736525",
        "response_time": "2.05",
        "context": "{\"function_name\": \"is_sublist\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 70,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef find_equal_tuple(Input: List[Tuple]) -> str:\n    if not Input:\n        return \"All tuples have equal length\"\n    \n    first_length = len(Input[0])\n    for tup in Input[1:]:\n        if len(tup) != first_length:\n            return \"All tuples do not have equal length\"\n    \n    return \"All tuples have equal length\"\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
        "timestamp": "2025-08-14T06:06:02.918884",
        "response_time": "2.18",
        "context": "{\"function_name\": \"get_equal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 71,
        "solution": "===START===\nimport math\n\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
        "timestamp": "2025-08-14T06:06:05.879945",
        "response_time": "2.96",
        "context": "{\"function_name\": \"comb_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 72,
        "solution": "===START===\n```python\ndef dif_Square(n):\n    # A number can be represented as the difference of two squares if and only if it is not of the form 4k+2\n    return n % 4 != 2\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
        "timestamp": "2025-08-14T06:06:07.296734",
        "response_time": "1.41",
        "context": "{\"function_name\": \"dif_Square\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 74,
        "solution": "===START===\nfrom typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> str:\n    if len(colors) != len(patterns):\n        return \"No\"\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern and color_to_pattern[color] != pattern:\n            return \"No\"\n        if pattern in pattern_to_color and pattern_to_color[pattern] != color:\n            return \"No\"\n        \n        color_to_pattern[color] = pattern\n        pattern_to_color[pattern] = color\n    \n    return \"Yes\"\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
        "timestamp": "2025-08-14T06:06:10.489967",
        "response_time": "3.19",
        "context": "{\"function_name\": \"is_samepatterns\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 75,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int]], K: int) -> List[Tuple[int]]:\n    result = [tup for tup in test_list if all(x % K == 0 for x in tup)]\n    return result\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
        "timestamp": "2025-08-14T06:06:12.067203",
        "response_time": "1.57",
        "context": "{\"function_name\": \"find_tuples\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 77,
        "solution": "===START===\ndef is_Diff(n):\n    return n % 11 == 0\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
        "timestamp": "2025-08-14T06:06:12.770269",
        "response_time": "0.70",
        "context": "{\"function_name\": \"is_Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 79,
        "solution": "===START===\ndef word_len(s):\n    return \"Odd\" if len(s) % 2 != 0 else \"Even\"\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
        "timestamp": "2025-08-14T06:06:13.626957",
        "response_time": "0.86",
        "context": "{\"function_name\": \"word_len\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 80,
        "solution": "===START===\nfrom math import factorial\n\ndef tetrahedral_number(n):\n    return factorial(n + 2) // (factorial(3) * factorial(n - 1))\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
        "timestamp": "2025-08-14T06:06:14.736430",
        "response_time": "1.11",
        "context": "{\"function_name\": \"tetrahedral_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 82,
        "solution": "===START===\nimport math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
        "timestamp": "2025-08-14T06:06:15.606173",
        "response_time": "0.87",
        "context": "{\"function_name\": \"volume_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 83,
        "solution": "===START===\n```python\ndef get_Char(strr):\n    total_ascii = sum(ord(char) for char in strr)\n    result_ascii = total_ascii % 26\n    return chr(result_ascii + ord('A'))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
        "timestamp": "2025-08-14T06:06:16.943810",
        "response_time": "1.34",
        "context": "{\"function_name\": \"get_Char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 84,
        "solution": "===START===\n```python\ndef sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
        "timestamp": "2025-08-14T06:06:18.320206",
        "response_time": "1.38",
        "context": "{\"function_name\": \"sequence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 85,
        "solution": "===START===\nimport math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
        "timestamp": "2025-08-14T06:06:19.242143",
        "response_time": "0.92",
        "context": "{\"function_name\": \"surfacearea_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 86,
        "solution": "===START===\n```python\ndef centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
        "timestamp": "2025-08-14T06:06:20.266513",
        "response_time": "1.02",
        "context": "{\"function_name\": \"centered_hexagonal_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder7b",
        "dataset_row_id": 87,
        "solution": "===START===\n```python\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
        "timestamp": "2025-08-14T06:06:21.726969",
        "response_time": "1.46",
        "context": "{\"function_name\": \"merge_dictionaries_three\"}"
    }
]