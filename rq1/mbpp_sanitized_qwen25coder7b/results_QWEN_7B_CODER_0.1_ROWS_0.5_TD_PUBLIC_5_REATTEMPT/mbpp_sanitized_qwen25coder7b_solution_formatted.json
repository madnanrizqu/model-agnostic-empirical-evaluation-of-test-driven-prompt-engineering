[
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 2,
    "solution": "def similar_elements(test_tup1, test_tup2):\n    # Convert tuples to sets to find the intersection\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the intersection of both sets\n    shared_elements = set1.intersection(set2)\n    \n    # Convert the set back to a tuple\n    return tuple(shared_elements)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
    "timestamp": "2025-09-20T12:07:00.556280",
    "response_time": "2.24",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 3,
    "solution": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
    "timestamp": "2025-09-20T12:07:01.477402",
    "response_time": "0.92",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 4,
    "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    # Find the n largest numbers using heapq.nlargest\n    largest_nums = heapq.nlargest(n, nums)\n    # Return the list of n largest numbers in descending order\n    return largest_nums",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
    "timestamp": "2025-09-20T12:07:02.395438",
    "response_time": "0.92",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 6,
    "solution": "def differ_At_One_Bit_Pos(x):\n    return x > 0 and (x & (x - 1)) == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
    "timestamp": "2025-09-20T12:07:03.135780",
    "response_time": "0.74",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 7,
    "solution": "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
    "timestamp": "2025-09-20T12:07:03.698593",
    "response_time": "0.56",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 8,
    "solution": "import math\n\ndef square_nums(nums):\n    return [math.pow(num, 2) for num in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
    "timestamp": "2025-09-20T12:07:04.353434",
    "response_time": "0.65",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 9,
    "solution": "import math\n\ndef find_Rotations(str):\n    n = len(str)\n    for i in range(1, n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
    "timestamp": "2025-09-20T12:07:05.165665",
    "response_time": "0.81",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 11,
    "solution": "def remove_Occ(s, ch):\n    first_index = s.find(ch)\n    if first_index != -1:\n        s = s[:first_index] + s[first_index + 1:]\n    \n    last_index = s.rfind(ch)\n    if last_index != -1:\n        s = s[:last_index] + s[last_index + 1:]\n    \n    return s",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
    "timestamp": "2025-09-20T12:07:06.393023",
    "response_time": "1.22",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 12,
    "solution": "import numpy as np\n\ndef sort_matrix(M):\n    # Convert the list of lists to a numpy array for easier manipulation\n    matrix = np.array(M)\n    # Sort the matrix based on the sum of rows\n    sorted_matrix = matrix[np.argsort(np.sum(matrix, axis=1))]\n    return sorted_matrix.tolist()",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
    "timestamp": "2025-09-20T12:07:07.417839",
    "response_time": "1.02",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 14,
    "solution": "import math\n\ndef find_Volume(l, b, h):\n    return 0.5 * l * b * h",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
    "timestamp": "2025-09-20T12:07:07.980943",
    "response_time": "0.56",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 16,
    "solution": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
    "timestamp": "2025-09-20T12:07:08.665608",
    "response_time": "0.68",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 17,
    "solution": "import math\n\ndef square_perimeter(a):\n    return 4 * a",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
    "timestamp": "2025-09-20T12:07:09.157304",
    "response_time": "0.49",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 18,
    "solution": "def remove_dirty_chars(string):\n    return list(string)\n\ndef remove_chars(str1, str2):\n    str1_list = str_to_list(str1)\n    str2_set = set(str_to_list(str2))\n    result = [char for char in str1_list if char not in str2_set]\n    return ''.join(result)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
    "timestamp": "2025-09-20T12:07:10.218854",
    "response_time": "1.06",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 19,
    "solution": "def test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
    "timestamp": "2025-09-20T12:07:11.000161",
    "response_time": "0.78",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 20,
    "solution": "import math\n\ndef is_woodall(x):\n    if x <= 0:\n        return False\n    n = int(math.log2(x + 1))\n    return x == (2 ** n - 1) * n",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
    "timestamp": "2025-09-20T12:07:11.821099",
    "response_time": "0.82",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 56,
    "solution": "import math\n\ndef check(num):\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num //= 10\n    return reversed_num\n\ndef is_one_less_than_twice_reversed(num):\n    return num == 2 * rev(num) - 1\n\n# Example usage:\n# result = is_one_less_than_twice_reversed(18)\n# print(result)  # Output: True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
    "timestamp": "2025-09-20T12:07:13.306696",
    "response_time": "1.48",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 57,
    "solution": "from functools import cmp_to_key\n\ndef find_Max_Num(x, y):\n    return int(y + x) - int(x + y)\n\ndef find_Max_Num(arr):\n    arr = sorted(arr, key=cmp_to_key(compare))\n    result = ''.join(map(str, arr))\n    return int(result)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
    "timestamp": "2025-09-20T12:07:14.282681",
    "response_time": "0.97",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 58,
    "solution": "import operator\n\ndef opposite_Signs(x, y):\n    return operator.xor(x, y) < 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
    "timestamp": "2025-09-20T12:07:14.890721",
    "response_time": "0.61",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 59,
    "solution": "import math\n\ndef is_octagonal(n):\n    if n < 1:\n        return False\n    x = (2 * n + math.sqrt(8 * n + 1)) / 4\n    return x == int(x)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
    "timestamp": "2025-09-20T12:07:16.042312",
    "response_time": "1.15",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 61,
    "solution": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    prefix_sum = 0\n    prefix_sum_dict = defaultdict(int)\n    prefix_sum_dict[0] = 1\n    \n    for char in s:\n        prefix_sum += int(char)\n        count += prefix_sum_dict[prefix_sum - (len(s) - prefix_sum)]\n        prefix_sum_dict[prefix_sum - (len(s) - prefix_sum)] += 1\n    \n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
    "timestamp": "2025-09-20T12:07:17.447616",
    "response_time": "1.40",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 62,
    "solution": "import sys\n\ndef smallest_num(xs):\n    if not xs:\n        return None\n    return min(xs)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
    "timestamp": "2025-09-20T12:07:18.288475",
    "response_time": "0.84",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 63,
    "solution": "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    # Calculate the absolute difference for each pair\n    differences = [abs(x - y) for x, y in test_list]\n    # Return the maximum difference found\n    return max(differences)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
    "timestamp": "2025-09-20T12:07:19.397177",
    "response_time": "1.11",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 64,
    "solution": "from operator import itemgetter\n\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=itemgetter(1))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
    "timestamp": "2025-09-20T12:07:20.009983",
    "response_time": "0.61",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 65,
    "solution": "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total_sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n    return total_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
    "timestamp": "2025-09-20T12:07:21.160832",
    "response_time": "1.15",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 66,
    "solution": "def pos_count(lst):\n    return sum(1 for num in lst if num > 0)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
    "timestamp": "2025-09-20T12:07:21.712168",
    "response_time": "0.55",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 67,
    "solution": "from math import factorial\n\ndef bell_number(n):\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        bell[i] = sum(bell[j] * binomial_coefficient(i - 1, j) for j in range(i))\n    return bell[n]\n\ndef binomial_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
    "timestamp": "2025-09-20T12:07:23.188076",
    "response_time": "1.47",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 68,
    "solution": "from typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    return A == sorted(A) or A == sorted(A, reverse=True)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
    "timestamp": "2025-09-20T12:07:23.860958",
    "response_time": "0.67",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 69,
    "solution": "def is_sublist(l, s):\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            n = 1\n            while (n < len(s)) and (l[i+n] == s[n]):\n                n += 1\n            if n == len(s):\n                return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
    "timestamp": "2025-09-20T12:07:25.219542",
    "response_time": "1.36",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 70,
    "solution": "import collections\n\ndef get_equal(Input):\n    # Check if all tuples in the input have the same length\n    if not Input:  # Check if the input list is empty\n        return True  # An empty list is considered to have equal length tuples\n    \n    # Get the length of the first tuple to compare with others\n    first_tuple_length = len(Input[0])\n    \n    # Use a set to check if all tuples have the same length\n    lengths = set(len(t) for t in Input)\n    \n    # If the set of lengths contains only one element, all tuples have the same length\n    return len(lengths) == 1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
    "timestamp": "2025-09-20T12:07:27.064482",
    "response_time": "1.84",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 71,
    "solution": "import math\n\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
    "timestamp": "2025-09-20T12:07:28.745167",
    "response_time": "1.68",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 72,
    "solution": "def dif_Square(n):\n    # A number can be represented as the difference of two squares if and only if it is not of the form 4k+2\n    return n % 4 != 2",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
    "timestamp": "2025-09-20T12:07:29.600179",
    "response_time": "0.85",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 74,
    "solution": "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern and color_to_pattern[color] != pattern:\n            return False\n        if pattern in pattern_to_color and pattern_to_color[pattern] != color:\n            return False\n        color_to_pattern[color] = pattern\n        pattern_to_color[pattern] = color\n    \n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
    "timestamp": "2025-09-20T12:07:31.337004",
    "response_time": "1.73",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 75,
    "solution": "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int]], K: int) -> List[Tuple[int]]:\n    result = [tup for tup in test_list if all(x % K == 0 for x in tup)]\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
    "timestamp": "2025-09-20T12:07:32.248602",
    "response_time": "0.91",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 77,
    "solution": "def is_Diff(n):\n    return n % 11 == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
    "timestamp": "2025-09-20T12:07:32.707532",
    "response_time": "0.46",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 79,
    "solution": "def word_len(s):\n    return len(s) % 2 != 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
    "timestamp": "2025-09-20T12:07:33.167494",
    "response_time": "0.45",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 80,
    "solution": "import math\n\ndef tetrahedral_number(n):\n    return int(n * (n + 1) * (n + 2) / 6)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
    "timestamp": "2025-09-20T12:07:33.796661",
    "response_time": "0.63",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 82,
    "solution": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
    "timestamp": "2025-09-20T12:07:34.452268",
    "response_time": "0.65",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 83,
    "solution": "import string\n\ndef get_Char(strr):\n    total_ascii = sum(ord(char) for char in strr)\n    result_ascii = total_ascii % 26\n    return chr(result_ascii + ord('a'))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
    "timestamp": "2025-09-20T12:07:35.209432",
    "response_time": "0.75",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 84,
    "solution": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
    "timestamp": "2025-09-20T12:07:36.028660",
    "response_time": "0.82",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 85,
    "solution": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
    "timestamp": "2025-09-20T12:07:36.540603",
    "response_time": "0.51",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 86,
    "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
    "timestamp": "2025-09-20T12:07:37.133603",
    "response_time": "0.59",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 87,
    "solution": "import collections\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return collections.ChainMap(dict1, dict2, dict3)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
    "timestamp": "2025-09-20T12:07:37.752016",
    "response_time": "0.62",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  }
]