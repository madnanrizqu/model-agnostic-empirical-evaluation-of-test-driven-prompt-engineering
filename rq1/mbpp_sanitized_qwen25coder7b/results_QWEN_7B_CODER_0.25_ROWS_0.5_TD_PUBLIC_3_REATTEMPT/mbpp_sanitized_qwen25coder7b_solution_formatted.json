[
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 2,
    "solution": "from typing import List\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> List[int]:\n    # Convert tuples to sets to find the intersection\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the intersection of both sets\n    shared_elements = set1.intersection(set2)\n    \n    # Convert the set back to a list\n    return list(shared_elements)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
    "timestamp": "2025-08-14T10:12:03.006052",
    "response_time": "4.17",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 3,
    "solution": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
    "timestamp": "2025-08-14T10:12:04.566973",
    "response_time": "1.56",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 4,
    "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    largest_nums = heapq.nlargest(n, nums)\n    return largest_nums",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
    "timestamp": "2025-08-14T10:12:05.649961",
    "response_time": "1.08",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 6,
    "solution": "```python\ndef differ_At_One_Bit_Pos(x):\n    return x > 0 and (x & (x - 1)) == 0\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
    "timestamp": "2025-08-14T10:12:06.820350",
    "response_time": "1.17",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 7,
    "solution": "import re\n\ndef find_char_long(text):\n    # Use regular expression to find words that are at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return ' '.join(words)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
    "timestamp": "2025-08-14T10:12:08.340458",
    "response_time": "1.52",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 8,
    "solution": "import math\n\ndef square_nums(nums):\n    return [math.pow(num, 2) for num in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
    "timestamp": "2025-08-14T10:12:09.266931",
    "response_time": "0.93",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 9,
    "solution": "import math\n\ndef find_Rotations(str):\n    n = len(str)\n    for i in range(1, n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
    "timestamp": "2025-08-14T10:12:10.689654",
    "response_time": "1.42",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 11,
    "solution": "def remove_Occ(s, ch):\n    first_index = s.find(ch)\n    if first_index != -1:\n        s = s[:first_index] + s[first_index + 1:]\n    \n    last_index = s.rfind(ch)\n    if last_index != -1:\n        s = s[:last_index] + s[last_index + 1:]\n    \n    return s",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
    "timestamp": "2025-08-14T10:12:12.846374",
    "response_time": "2.16",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 12,
    "solution": "import numpy as np\n\ndef sort_matrix(M):\n    # Convert the list of lists to a numpy array\n    matrix = np.array(M)\n    \n    # Sort the matrix based on the sum of rows\n    sorted_matrix = matrix[np.argsort(np.sum(matrix, axis=1))]\n    \n    # Convert the sorted numpy array back to a list of lists\n    sorted_list = sorted_matrix.tolist()\n    \n    return sorted_list",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
    "timestamp": "2025-08-14T10:12:15.187606",
    "response_time": "2.34",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 14,
    "solution": "import math\n\ndef find_Volume(l, b, h):\n    # Calculate the area of the triangular base\n    base_area = (l * b) / 2\n    \n    # Calculate the volume of the triangular prism\n    volume = base_area * h\n    \n    return volume",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
    "timestamp": "2025-08-14T10:12:16.870369",
    "response_time": "1.68",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 16,
    "solution": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
    "timestamp": "2025-08-14T10:12:18.054875",
    "response_time": "1.18",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 17,
    "solution": "import math\n\ndef square_perimeter(a):\n    return 4 * a",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
    "timestamp": "2025-08-14T10:12:18.972859",
    "response_time": "0.92",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 18,
    "solution": "def remove_dirty_chars(string):\n    return list(string)\n\ndef remove_chars(str1, str2):\n    str1_list = str_to_list(str1)\n    str2_set = set(str_to_list(str2))\n    result = [char for char in str1_list if char not in str2_set]\n    return ''.join(result)\n\n# Example usage:\n# result = remove_chars(\"hello\", \"eo\")\n# print(result)  # Output: \"hll\"",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
    "timestamp": "2025-08-14T10:12:21.511057",
    "response_time": "2.54",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 19,
    "solution": "def test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return \"true\"\n        seen.add(num)\n    return \"false\"",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
    "timestamp": "2025-08-14T10:12:22.805677",
    "response_time": "1.29",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 20,
    "solution": "import math\n\ndef is_woodall(x):\n    if x <= 0:\n        return False\n    n = int(math.log2(x + 1))\n    return x == (2 ** n - 1) * n",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
    "timestamp": "2025-08-14T10:12:24.289571",
    "response_time": "1.48",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 56,
    "solution": "import math\n\ndef check(num):\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num //= 10\n    return reversed_num\n\ndef is_one_less_than_twice_reversed(num):\n    return num == 2 * rev(num) - 1\n\n# Example usage:\n# result = is_one_less_than_twice_reversed(18)\n# print(result)  # Output: True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
    "timestamp": "2025-08-14T10:12:27.035505",
    "response_time": "2.74",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 57,
    "solution": "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> str:\n    arr = [str(num) for num in arr]\n    arr.sort(key=lambda x: x*3, reverse=True)\n    max_num = ''.join(arr)\n    return max_num.lstrip('0') or '0'",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
    "timestamp": "2025-08-14T10:12:28.852576",
    "response_time": "1.82",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 58,
    "solution": "import operator\n\ndef opposite_Signs(x, y):\n    return operator.xor(x, y) < 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
    "timestamp": "2025-08-14T10:12:29.766073",
    "response_time": "0.91",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 59,
    "solution": "import math\n\ndef is_octagonal(n):\n    if n < 1:\n        return False\n    x = (2 * n + math.sqrt(8 * n + 1)) / 4\n    return x == int(x)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
    "timestamp": "2025-08-14T10:12:31.230984",
    "response_time": "1.46",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 61,
    "solution": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    prefix_sum = 0\n    prefix_sum_dict = defaultdict(int)\n    prefix_sum_dict[0] = 1\n    \n    for char in s:\n        prefix_sum += int(char)\n        count += prefix_sum_dict[prefix_sum - (len(s) - prefix_sum)]\n        prefix_sum_dict[prefix_sum - (len(s) - prefix_sum)] += 1\n    \n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
    "timestamp": "2025-08-14T10:12:33.868989",
    "response_time": "2.64",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 62,
    "solution": "import sys\n\ndef smallest_num(xs):\n    if not xs:\n        return None\n    return min(xs)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
    "timestamp": "2025-08-14T10:12:34.741006",
    "response_time": "0.87",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 63,
    "solution": "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    # Calculate the absolute difference for each pair\n    differences = [abs(x - y) for x, y in test_list]\n    # Return the maximum difference found\n    return max(differences)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
    "timestamp": "2025-08-14T10:12:36.532165",
    "response_time": "1.78",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 64,
    "solution": "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
    "timestamp": "2025-08-14T10:12:37.858187",
    "response_time": "1.32",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 65,
    "solution": "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total_sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n    return total_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
    "timestamp": "2025-08-14T10:12:39.883854",
    "response_time": "2.02",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 66,
    "solution": "from typing import List\n\ndef pos_count(lst: List[int]) -> int:\n    return sum(1 for num in lst if num > 0)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
    "timestamp": "2025-08-14T10:12:40.957000",
    "response_time": "1.07",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 67,
    "solution": "from math import factorial\n\ndef bell_number(n):\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        bell[i] = sum(bell[j] * binomial(i - 1, j) for j in range(i))\n    return bell[n]\n\ndef binomial(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
    "timestamp": "2025-08-14T10:12:43.632989",
    "response_time": "2.67",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 68,
    "solution": "from typing import List\n\ndef is_Monotonic(A: List[int]) -> str:\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n    \n    if increasing or decreasing:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
    "timestamp": "2025-08-14T10:12:46.076837",
    "response_time": "2.44",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 69,
    "solution": "from typing import List\n\ndef is_sublist(l: List, s: List) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
    "timestamp": "2025-08-14T10:12:48.209986",
    "response_time": "2.13",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 70,
    "solution": "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> str:\n    if not Input:\n        return \"All tuples have equal length\"\n    \n    first_length = len(Input[0])\n    for tup in Input[1:]:\n        if len(tup) != first_length:\n            return \"All tuples do not have equal length\"\n    \n    return \"All tuples have equal length\"",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
    "timestamp": "2025-08-14T10:12:50.485305",
    "response_time": "2.27",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 71,
    "solution": "import math\n\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
    "timestamp": "2025-08-14T10:12:53.629744",
    "response_time": "3.14",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 72,
    "solution": "```python\ndef dif_Square(n):\n    # A number can be represented as the difference of two squares if and only if it is not of the form 4k+2\n    return n % 4 != 2\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
    "timestamp": "2025-08-14T10:12:55.105192",
    "response_time": "1.47",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 74,
    "solution": "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> str:\n    if len(colors) != len(patterns):\n        return \"No\"\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern and color_to_pattern[color] != pattern:\n            return \"No\"\n        if pattern in pattern_to_color and pattern_to_color[pattern] != color:\n            return \"No\"\n        \n        color_to_pattern[color] = pattern\n        pattern_to_color[pattern] = color\n    \n    return \"Yes\"",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
    "timestamp": "2025-08-14T10:12:58.451085",
    "response_time": "3.34",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 75,
    "solution": "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int]], K: int) -> List[Tuple[int]]:\n    result = [tup for tup in test_list if all(x % K == 0 for x in tup)]\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
    "timestamp": "2025-08-14T10:13:00.110940",
    "response_time": "1.66",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 77,
    "solution": "def is_Diff(n):\n    return n % 11 == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
    "timestamp": "2025-08-14T10:13:00.886453",
    "response_time": "0.77",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 79,
    "solution": "def word_len(s):\n    return \"Odd\" if len(s) % 2 != 0 else \"Even\"",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
    "timestamp": "2025-08-14T10:13:01.848057",
    "response_time": "0.96",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 80,
    "solution": "from math import factorial\n\ndef tetrahedral_number(n):\n    return factorial(n + 2) // (factorial(3) * factorial(n - 1))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
    "timestamp": "2025-08-14T10:13:02.975683",
    "response_time": "1.13",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 82,
    "solution": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
    "timestamp": "2025-08-14T10:13:03.942091",
    "response_time": "0.96",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 83,
    "solution": "```python\ndef get_Char(strr):\n    total_ascii = sum(ord(char) for char in strr)\n    result_ascii = total_ascii % 26\n    return chr(result_ascii + ord('A'))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
    "timestamp": "2025-08-14T10:13:05.378652",
    "response_time": "1.43",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 84,
    "solution": "```python\ndef sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
    "timestamp": "2025-08-14T10:13:06.925181",
    "response_time": "1.54",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 85,
    "solution": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
    "timestamp": "2025-08-14T10:13:07.874751",
    "response_time": "0.95",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 86,
    "solution": "```python\ndef centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
    "timestamp": "2025-08-14T10:13:09.025262",
    "response_time": "1.14",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 87,
    "solution": "```python\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
    "timestamp": "2025-08-14T10:13:10.531718",
    "response_time": "1.50",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 88,
    "solution": "from collections import Counter\n\ndef freq_count(list1):\n    return dict(Counter(list1))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):",
    "timestamp": "2025-08-14T10:13:11.402662",
    "response_time": "0.87",
    "context": "{\"function_name\": \"freq_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 89,
    "solution": "```python\ndef closest_num(N):\n    return N - 1\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):",
    "timestamp": "2025-08-14T10:13:12.700715",
    "response_time": "1.30",
    "context": "{\"function_name\": \"closest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 90,
    "solution": "import string\n\ndef len_log(list1):\n    max_length = 0\n    for word in list1:\n        word_length = len(word)\n        if word_length > max_length:\n            max_length = word_length\n    return max_length",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):",
    "timestamp": "2025-08-14T10:13:14.758433",
    "response_time": "2.06",
    "context": "{\"function_name\": \"len_log\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 91,
    "solution": "import typing\n\ndef find_substring(str1: str, sub_str: str) -> bool:\n    return sub_str in str1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):",
    "timestamp": "2025-08-14T10:13:15.836746",
    "response_time": "1.08",
    "context": "{\"function_name\": \"find_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 92,
    "solution": "import math\n\ndef is_undulating(n):\n    n = str(n)\n    if len(n) < 3 or len(n) % 2 != 0:\n        return False\n    for i in range(2, len(n), 2):\n        if n[i] != n[i-2]:\n            return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):",
    "timestamp": "2025-08-14T10:13:18.354179",
    "response_time": "2.52",
    "context": "{\"function_name\": \"is_undulating\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 93,
    "solution": "import math\n\ndef power(a, b):\n    return a ** b",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):",
    "timestamp": "2025-08-14T10:13:19.154275",
    "response_time": "0.80",
    "context": "{\"function_name\": \"power\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 94,
    "solution": "from typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple]) -> int:\n    return min(test_list, key=lambda x: x[1])[0]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):",
    "timestamp": "2025-08-14T10:13:20.414020",
    "response_time": "1.26",
    "context": "{\"function_name\": \"index_minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 95,
    "solution": "import sys\n\ndef Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):",
    "timestamp": "2025-08-14T10:13:22.164506",
    "response_time": "1.75",
    "context": "{\"function_name\": \"Find_Min_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 96,
    "solution": "import math\n\ndef divisor(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):",
    "timestamp": "2025-08-14T10:13:24.043346",
    "response_time": "1.88",
    "context": "{\"function_name\": \"divisor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 97,
    "solution": "from collections import Counter\n\ndef frequency_lists(list1):\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = dict(Counter(flattened_list))\n    return frequency_dict",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):",
    "timestamp": "2025-08-14T10:13:25.420442",
    "response_time": "1.38",
    "context": "{\"function_name\": \"frequency_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 98,
    "solution": "from typing import List\n\ndef multiply_num(numbers: List[int]) -> float:\n    if not numbers:\n        return 0.0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):",
    "timestamp": "2025-08-14T10:13:26.999761",
    "response_time": "1.58",
    "context": "{\"function_name\": \"multiply_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 99,
    "solution": "```python\ndef decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):",
    "timestamp": "2025-08-14T10:13:28.714207",
    "response_time": "1.71",
    "context": "{\"function_name\": \"decimal_to_binary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 100,
    "solution": "import math\n\ndef next_smallest_palindrome(num):\n    # Convert the number to a string to easily check for palindromes\n    num_str = str(num)\n    # Start checking from the next number\n    for i in range(num + 1, 10**len(num_str)):\n        # Check if the number is a palindrome\n        if str(i) == str(i)[::-1]:\n            return i",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):",
    "timestamp": "2025-08-14T10:13:31.101520",
    "response_time": "2.39",
    "context": "{\"function_name\": \"next_smallest_palindrome\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 101,
    "solution": "import random\n\ndef kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of bounds\")\n    \n    def partition(low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i + 1], arr[high] = arr[high], arr[i + 1]\n        return i + 1\n    \n    low, high = 0, len(arr) - 1\n    while True:\n        pivot_index = partition(low, high)\n        if pivot_index == k - 1:\n            return arr[pivot_index]\n        elif pivot_index < k - 1:\n            low = pivot_index + 1\n        else:\n            high = pivot_index - 1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):",
    "timestamp": "2025-08-14T10:13:35.983390",
    "response_time": "4.88",
    "context": "{\"function_name\": \"kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 102,
    "solution": "import re\n\ndef snake_to_camel(word):\n    return re.sub(r'_([a-z])', lambda match: match.group(1).upper(), word)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
    "timestamp": "2025-08-14T10:13:37.187276",
    "response_time": "1.20",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 103,
    "solution": "from math import factorial\n\ndef eulerian_num(n, m):\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):",
    "timestamp": "2025-08-14T10:13:39.456255",
    "response_time": "2.26",
    "context": "{\"function_name\": \"eulerian_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 104,
    "solution": "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):",
    "timestamp": "2025-08-14T10:13:40.688467",
    "response_time": "1.23",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 105,
    "solution": "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return lst.count(True)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):",
    "timestamp": "2025-08-14T10:13:41.531895",
    "response_time": "0.84",
    "context": "{\"function_name\": \"count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 106,
    "solution": "from typing import List, Tuple\n\ndef add_lists(test_list: List[int], test_tup: Tuple[int]) -> Tuple[int]:\n    return test_tup + tuple(test_list)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):",
    "timestamp": "2025-08-14T10:13:42.766339",
    "response_time": "1.23",
    "context": "{\"function_name\": \"add_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 108,
    "solution": "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):",
    "timestamp": "2025-08-14T10:13:44.114860",
    "response_time": "1.35",
    "context": "{\"function_name\": \"merge_sorted_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 109,
    "solution": "from typing import *\nfrom collections import *\n\ndef odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        if int(s, 2) % 2 != 0:\n            count += 1\n        s = s[-1] + s[:-1]\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):",
    "timestamp": "2025-08-14T10:13:46.080452",
    "response_time": "1.96",
    "context": "{\"function_name\": \"odd_Equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 111,
    "solution": "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    \n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    \n    return sorted(list(common_elements))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):",
    "timestamp": "2025-08-14T10:13:48.029690",
    "response_time": "1.95",
    "context": "{\"function_name\": \"common_in_nested_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 113,
    "solution": "import re\n\ndef check_integer(text):\n    # Regular expression to match an integer\n    integer_pattern = r\"^-?\\d+$\"\n    return bool(re.match(integer_pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):",
    "timestamp": "2025-08-14T10:13:49.320757",
    "response_time": "1.29",
    "context": "{\"function_name\": \"check_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 115,
    "solution": "from typing import List, Dict\n\ndef empty_dit(list1: List[Dict]) -> bool:\n    return all(len(d) == 0 for d in list1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):",
    "timestamp": "2025-08-14T10:13:50.513776",
    "response_time": "1.19",
    "context": "{\"function_name\": \"empty_dit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 116,
    "solution": "def tuple_to_int(nums):\n    return int(''.join(map(str, nums)))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):",
    "timestamp": "2025-08-14T10:13:51.258949",
    "response_time": "0.74",
    "context": "{\"function_name\": \"tuple_to_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 117,
    "solution": "import numbers\n\ndef list_to_float(test_list):\n    result = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            if isinstance(element, numbers.Number):\n                new_sublist.append(float(element))\n            else:\n                new_sublist.append(element)\n        result.append(new_sublist)\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):",
    "timestamp": "2025-08-14T10:13:53.301309",
    "response_time": "2.04",
    "context": "{\"function_name\": \"list_to_float\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 118,
    "solution": "def string_to_list(string):\n    return string.split()",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):",
    "timestamp": "2025-08-14T10:13:53.937434",
    "response_time": "0.63",
    "context": "{\"function_name\": \"string_to_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 119,
    "solution": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Ensure mid is even\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the pair is broken\n        if arr[mid] != arr[mid + 1]:\n            right = mid\n        else:\n            left = mid + 2\n    \n    return arr[left]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):",
    "timestamp": "2025-08-14T10:13:56.981852",
    "response_time": "3.04",
    "context": "{\"function_name\": \"search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 120,
    "solution": "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = float('-inf')\n    for tup in list1:\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n    return max_product",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):",
    "timestamp": "2025-08-14T10:13:59.001343",
    "response_time": "2.01",
    "context": "{\"function_name\": \"max_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 123,
    "solution": "import math\n\ndef amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        divisors_sum = 1\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors_sum += i\n                if i != n // i:\n                    divisors_sum += n // i\n        return divisors_sum\n\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner > num and sum_of_divisors(partner) == num:\n            amicable_sum += num\n    return amicable_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):",
    "timestamp": "2025-08-14T10:14:02.615445",
    "response_time": "3.61",
    "context": "{\"function_name\": \"amicable_numbers_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 124,
    "solution": "import cmath\n\ndef angle_complex(a, b):\n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    return str(angle)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):",
    "timestamp": "2025-08-14T10:14:03.801720",
    "response_time": "1.18",
    "context": "{\"function_name\": \"angle_complex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 125,
    "solution": "import sys\n\ndef find_length(string):\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):",
    "timestamp": "2025-08-14T10:14:06.006429",
    "response_time": "2.20",
    "context": "{\"function_name\": \"find_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 126,
    "solution": "import math\n\ndef sum(a, b):\n    gcd = math.gcd(a, b)\n    total_sum = 0\n    for i in range(1, gcd + 1):\n        if gcd % i == 0:\n            total_sum += i\n    return total_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):",
    "timestamp": "2025-08-14T10:14:07.761997",
    "response_time": "1.75",
    "context": "{\"function_name\": \"sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 127,
    "solution": "```python\ndef multiply_int(x, y):\n    return x * y\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):",
    "timestamp": "2025-08-14T10:14:08.539349",
    "response_time": "0.77",
    "context": "{\"function_name\": \"multiply_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 128,
    "solution": "from typing import List\n\ndef long_words(n: int, words: List[str]) -> List[str]:\n    return [word for word in words if len(word) > n]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):",
    "timestamp": "2025-08-14T10:14:09.781469",
    "response_time": "1.24",
    "context": "{\"function_name\": \"long_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 129,
    "solution": "import numpy as np\n\ndef magic_square_test(my_matrix):\n    n = len(my_matrix)\n    if n == 0 or any(len(row) != n for row in my_matrix):\n        return False\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(my_matrix[0])\n    \n    # Check the sums of the rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check the sums of the columns\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(my_matrix[i][n-1-i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):",
    "timestamp": "2025-08-14T10:14:15.024758",
    "response_time": "5.24",
    "context": "{\"function_name\": \"magic_square_test\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 130,
    "solution": "from collections import Counter\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    count = Counter(nums)\n    max_count = max(count.values())\n    return [num for num, freq in count.items() if freq == max_count]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):",
    "timestamp": "2025-08-14T10:14:16.559380",
    "response_time": "1.53",
    "context": "{\"function_name\": \"max_occurrences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 131,
    "solution": "```python\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str1) - 1\n    \n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n    \n    return ''.join(str_list)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):",
    "timestamp": "2025-08-14T10:14:19.786280",
    "response_time": "3.22",
    "context": "{\"function_name\": \"reverse_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 132,
    "solution": "import string\n\ndef tup_string(tup1):\n    return ''.join(tup1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):",
    "timestamp": "2025-08-14T10:14:20.650219",
    "response_time": "0.86",
    "context": "{\"function_name\": \"tup_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 133,
    "solution": "```python\ndef sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):",
    "timestamp": "2025-08-14T10:14:21.631510",
    "response_time": "0.98",
    "context": "{\"function_name\": \"sum_negativenum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 135,
    "solution": "```python\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):",
    "timestamp": "2025-08-14T10:14:22.536190",
    "response_time": "0.90",
    "context": "{\"function_name\": \"hexagonal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 137,
    "solution": "from typing import List\n\ndef zero_count(nums: List[int]) -> str:\n    total_numbers = len(nums)\n    zero_count = nums.count(0)\n    non_zero_count = total_numbers - zero_count\n    ratio = zero_count / non_zero_count if non_zero_count != 0 else 0\n    return f\"{ratio:.2f}\"",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):",
    "timestamp": "2025-08-14T10:14:24.504321",
    "response_time": "1.97",
    "context": "{\"function_name\": \"zero_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 138,
    "solution": "import math\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n            if n % 2 == 0:\n                n //= 2\n            else:\n                return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):",
    "timestamp": "2025-08-14T10:14:26.441199",
    "response_time": "1.93",
    "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 139,
    "solution": "import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):",
    "timestamp": "2025-08-14T10:14:27.312662",
    "response_time": "0.87",
    "context": "{\"function_name\": \"circle_circumference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 140,
    "solution": "from typing import List\n\ndef extract_singly(test_list: List[List[int]]) -> set:\n    return set(num for sublist in test_list for num in sublist)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):",
    "timestamp": "2025-08-14T10:14:28.461070",
    "response_time": "1.15",
    "context": "{\"function_name\": \"extract_singly\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 141,
    "solution": "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    def flip(sublist, k):\n        sublist[:k+1] = reversed(sublist[:k+1])\n\n    n = len(nums)\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in nums[:i]\n        max_index = nums.index(max(nums[:i]))\n        \n        # Flip the maximum element to the beginning\n        if max_index != i - 1:\n            flip(nums, max_index)\n            flip(nums, i - 1)\n    \n    return nums",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):",
    "timestamp": "2025-08-14T10:14:31.628237",
    "response_time": "3.16",
    "context": "{\"function_name\": \"pancake_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 142,
    "solution": "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):",
    "timestamp": "2025-08-14T10:14:33.796738",
    "response_time": "2.17",
    "context": "{\"function_name\": \"count_samepair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 143,
    "solution": "from typing import Tuple, List\n\ndef find_lists(Input: Tuple) -> int:\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):",
    "timestamp": "2025-08-14T10:14:35.237241",
    "response_time": "1.44",
    "context": "{\"function_name\": \"find_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 145,
    "solution": "import sys\n\ndef max_Abs_Diff(arr):\n    if not arr:\n        return 0\n    \n    min_val = max_val = arr[0]\n    \n    for num in arr[1:]:\n        min_val = min(min_val, num)\n        max_val = max(max_val, num)\n    \n    return max_val - min_val",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):",
    "timestamp": "2025-08-14T10:14:37.096645",
    "response_time": "1.86",
    "context": "{\"function_name\": \"max_Abs_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 160,
    "solution": "from typing import Tuple, Optional\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    if n % gcd(a, b) != 0:\n        return None\n    \n    x, y = extended_gcd(a, b)\n    x = x * (n // gcd(a, b))\n    y = y * (n // gcd(a, b))\n    \n    return x % b, y % a\n\ndef gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\ndef extended_gcd(a: int, b: int) -> Tuple[int, int]:\n    if a == 0:\n        return b, 0, 1\n    gcd, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return gcd, x, y",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):",
    "timestamp": "2025-08-14T10:14:42.067095",
    "response_time": "4.97",
    "context": "{\"function_name\": \"find_solution\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 161,
    "solution": "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):",
    "timestamp": "2025-08-14T10:14:43.289038",
    "response_time": "1.22",
    "context": "{\"function_name\": \"remove_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 162,
    "solution": "```python\ndef sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n```",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):",
    "timestamp": "2025-08-14T10:14:44.600673",
    "response_time": "1.31",
    "context": "{\"function_name\": \"sum_series\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 163,
    "solution": "import math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon.\n\n    Parameters:\n    s (int): The number of sides of the polygon.\n    l (float): The length of each side of the polygon.\n\n    Returns:\n    float: The area of the polygon.\n    \"\"\"\n    # Calculate the area using the formula: (s * l^2) / (4 * tan(pi / s))\n    area = (s * l ** 2) / (4 * math.tan(math.pi / s))\n    return area",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):",
    "timestamp": "2025-08-14T10:14:47.573914",
    "response_time": "2.97",
    "context": "{\"function_name\": \"area_polygon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 164,
    "solution": "import math\n\ndef are_equivalent(n):\n    def sum_of_divisors(num):\n        total = 1\n        sqrt_num = int(math.sqrt(num))\n        for i in range(2, sqrt_num + 1):\n            if num % i == 0:\n                total += i\n                if i != num // i:\n                    total += num // i\n        return total\n\n    return sum_of_divisors(n)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):",
    "timestamp": "2025-08-14T10:14:49.865361",
    "response_time": "2.29",
    "context": "{\"function_name\": \"are_equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 165,
    "solution": "import string\n\ndef count_char_position(str1):\n    count = 0\n    str1 = str1.lower()\n    for i, char in enumerate(str1):\n        if char in string.ascii_lowercase and string.ascii_lowercase.index(char) == i:\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):",
    "timestamp": "2025-08-14T10:14:51.524923",
    "response_time": "1.66",
    "context": "{\"function_name\": \"count_char_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 166,
    "solution": "from typing import List\n\ndef find_even_pair(A: List[int]) -> str:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return str(count)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):",
    "timestamp": "2025-08-14T10:14:53.629924",
    "response_time": "2.10",
    "context": "{\"function_name\": \"find_even_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 167,
    "solution": "import math\n\ndef next_power_of_2(n):\n    return 2 ** math.ceil(math.log2(n))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):",
    "timestamp": "2025-08-14T10:14:54.454269",
    "response_time": "0.82",
    "context": "{\"function_name\": \"next_power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 168,
    "solution": "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):",
    "timestamp": "2025-08-14T10:14:55.406942",
    "response_time": "0.95",
    "context": "{\"function_name\": \"frequency\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 170,
    "solution": "import typing\n\ndef sum_range_list(list1: typing.List[int], m: int, n: int) -> int:\n    return sum(list1[m:n+1])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):",
    "timestamp": "2025-08-14T10:14:56.590016",
    "response_time": "1.18",
    "context": "{\"function_name\": \"sum_range_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 171,
    "solution": "import math\n\ndef perimeter_pentagon(a):\n    return 5 * a",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):",
    "timestamp": "2025-08-14T10:14:57.322431",
    "response_time": "0.73",
    "context": "{\"function_name\": \"perimeter_pentagon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 172,
    "solution": "def count_occurance(s):\n    return s.count('std')",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):",
    "timestamp": "2025-08-14T10:14:57.956035",
    "response_time": "0.63",
    "context": "{\"function_name\": \"count_occurance\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 222,
    "solution": "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> str:\n    if not test_tuple:\n        return \"All elements have the same data type\"\n    \n    first_element_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != first_element_type:\n            return \"All elements do not have the same data type\"\n    \n    return \"All elements have the same data type\"",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):",
    "timestamp": "2025-08-14T10:15:00.308514",
    "response_time": "2.35",
    "context": "{\"function_name\": \"check_type\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 223,
    "solution": "from typing import List\n\ndef binary_search(arr: List[int], n: int, x: int) -> str:\n    first_occurrence = find_first_occurrence(arr, x, n)\n    if first_occurrence == -1:\n        return \"No\"\n    if first_occurrence + n // 2 < n and arr[first_occurrence + n // 2] == x:\n        return \"Yes\"\n    return \"No\"\n\ndef find_first_occurrence(arr: List[int], x: int, n: int) -> int:\n    low, high = 0, n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):",
    "timestamp": "2025-08-14T10:15:05.023660",
    "response_time": "4.71",
    "context": "{\"function_name\": \"binary_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 224,
    "solution": "import math\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):",
    "timestamp": "2025-08-14T10:15:06.289642",
    "response_time": "1.26",
    "context": "{\"function_name\": \"count_Set_Bits\"}"
  }
]