[
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 2,
    "solution": "from typing import Tuple\n\ndef similar_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    # Convert tuples to sets to find common elements efficiently\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find intersection of the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert back to tuple and return\n    return tuple(common_elements)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):\n\n### Test\nassert set(candidate((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))",
    "timestamp": "2025-08-13T11:09:31.526125",
    "response_time": "3.67",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 3,
    "solution": "from typing import Union\n\ndef is_not_prime(n: int) -> bool:\n    \"\"\"\n    Identify if a given number is not a prime number.\n    \n    Args:\n        n (int): The number to check for primality\n    \n    Returns:\n        bool: True if the number is not prime, False if the number is prime\n    \"\"\"\n    # Handle edge cases\n    if n <= 1:\n        return True\n    \n    # Check for divisibility from 2 to square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    \n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):\n\n### Test\nassert candidate(2) == False\nassert candidate(10) == True",
    "timestamp": "2025-08-13T11:09:34.741483",
    "response_time": "3.21",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 4,
    "solution": "from typing import List\nimport heapq\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    # Use heapq to efficiently find the n largest numbers\n    # heapq.nlargest returns the n largest elements in descending order\n    return heapq.nlargest(n, nums)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):\n\n### Test\nassert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]",
    "timestamp": "2025-08-13T11:09:40.951640",
    "response_time": "6.21",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 6,
    "solution": "from typing import Union\n\ndef differ_At_One_Bit_Pos(x: int, y: int) -> bool:\n    # XOR the two numbers to get the bit differences\n    xor_result = x ^ y\n    \n    # Count the number of set bits in the XOR result\n    # If exactly one bit is set, it means they differ at only one bit position\n    return bin(xor_result).count('1') == 1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):\n\n### Test\nassert candidate(13,9) == True\nassert candidate(15,8) == False\nassert candidate(2,4) == False",
    "timestamp": "2025-08-13T11:09:48.169829",
    "response_time": "7.22",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 7,
    "solution": "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    # Split the text into words\n    words = text.split()\n    \n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    \n    return long_words",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):\n\n### Test\nassert set(candidate('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])",
    "timestamp": "2025-08-13T11:09:50.491064",
    "response_time": "2.32",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 8,
    "solution": "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num * num for num in nums]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
    "timestamp": "2025-08-13T11:09:52.514939",
    "response_time": "2.02",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 9,
    "solution": "from typing import Union\n\ndef find_Rotations(str: str) -> Union[int, float]:\n    # If string is empty or single character, no rotations possible\n    if len(str) <= 1:\n        return float('inf')\n    \n    # Check if string is made of same characters\n    if len(set(str)) == 1:\n        return 1\n    \n    # Try all possible rotations\n    for rotations in range(1, len(str)):\n        # Rotate the string\n        rotated = str[rotations:] + str[:rotations]\n        \n        # If rotated string matches original, return rotations\n        if rotated == str:\n            return rotations\n    \n    # If no rotation makes the string same\n    return float('inf')",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):\n\n### Test\nassert candidate(\"aaaa\") == 1",
    "timestamp": "2025-08-13T11:09:56.275497",
    "response_time": "3.76",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 11,
    "solution": "from typing import Optional\n\ndef remove_Occ(s: str, ch: str) -> str:\n    # Find the first occurrence of the character\n    first_index = s.find(ch)\n    \n    # Find the last occurrence of the character \n    last_index = s.rfind(ch)\n    \n    # If character not found, return original string\n    if first_index == -1:\n        return s\n    \n    # If first and last index are the same, remove that single occurrence\n    if first_index == last_index:\n        return s[:first_index] + s[first_index+1:]\n    \n    # Remove first and last occurrence\n    return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):\n\n### Test\nassert candidate(\"hello\",\"l\") == \"heo\"",
    "timestamp": "2025-08-13T11:10:00.820705",
    "response_time": "4.54",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 12,
    "solution": "from typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    # Sort the matrix based on the sum of each row in ascending order\n    return sorted(M, key=lambda row: sum(row))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):\n\n### Test\nassert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
    "timestamp": "2025-08-13T11:10:06.305353",
    "response_time": "5.48",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 14,
    "solution": "from typing import Union\n\ndef find_Volume(l: Union[int, float], b: Union[int, float], h: Union[int, float]) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n        l (float/int): Length of the base triangle's base\n        b (float/int): Width/breadth of the base triangle \n        h (float/int): Height of the prism\n    \n    Returns:\n        float: Volume of the triangular prism\n    \"\"\"\n    # Volume of triangular prism = (1/2 * base * height) * length of prism\n    volume = (0.5 * l * b) * h\n    return volume",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :\n\n### Test\nassert candidate(10,8,6) == 240",
    "timestamp": "2025-08-13T11:10:10.556196",
    "response_time": "4.25",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 16,
    "solution": "import re\nfrom typing import Any\n\ndef text_lowercase_underscore(text: str) -> bool:\n    \"\"\"\n    Check if the input string contains sequences of lowercase letters joined with an underscore\n    \n    Args:\n        text (str): Input string to check\n    \n    Returns:\n        bool: True if string contains only lowercase letters and underscores, False otherwise\n    \"\"\"\n    # Use regex pattern to match only lowercase letters and underscores\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):\n\n### Test\nassert candidate(\"aab_cbbbc\")==(True)",
    "timestamp": "2025-08-13T11:10:13.283029",
    "response_time": "2.73",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 17,
    "solution": "from typing import Union\n\ndef square_perimeter(a: Union[int, float]) -> Union[int, float]:\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n    \n    Args:\n        a (int or float): Length of a side of the square\n    \n    Returns:\n        int or float: Perimeter of the square (4 * side length)\n    \"\"\"\n    return 4 * a",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):\n\n### Test\nassert candidate(10)==40",
    "timestamp": "2025-08-13T11:10:21.922728",
    "response_time": "8.64",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 18,
    "solution": "from typing import List\n\ndef remove_dirty_chars(string: str, remove_chars: str) -> str:\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \n    Args:\n        string (str): The original string to remove characters from\n        remove_chars (str): The string containing characters to be removed\n    \n    Returns:\n        str: A new string with characters from remove_chars removed from string\n    \"\"\"\n    # Convert remove_chars to a set for efficient lookup\n    remove_set = set(remove_chars)\n    \n    # Use list comprehension to keep only characters not in remove_set\n    result = ''.join(char for char in string if char not in remove_set)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):\n\n### Test\nassert candidate(\"probasscurve\", \"pros\") == \"\"\"bacuve\"\"\"",
    "timestamp": "2025-08-13T11:10:25.960568",
    "response_time": "4.04",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 19,
    "solution": "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    # Create a set from the input array to remove duplicates\n    # If the length of the set is less than the length of the original array,\n    # it means there are duplicates\n    return len(set(arraynums)) < len(arraynums)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):\n\n### Test\nassert candidate(([1,2,3,4,5]))==False",
    "timestamp": "2025-08-13T11:10:30.661003",
    "response_time": "4.70",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 20,
    "solution": "from typing import Union\n\ndef is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if a given number is a Woodall number.\n    \n    A Woodall number is defined as a number of the form n * 2^n - 1, \n    where n is a positive integer.\n    \n    Args:\n        x (int): The number to check\n    \n    Returns:\n        bool: True if the number is a Woodall number, False otherwise\n    \"\"\"\n    # Check for valid input\n    if x < 1:\n        return False\n    \n    # Try different values of n to see if we can generate the number\n    n = 1\n    while True:\n        woodall_num = n * (2 ** n) - 1\n        \n        # If we found the number, return True\n        if woodall_num == x:\n            return True\n        \n        # If we've exceeded the input number, stop searching\n        if woodall_num > x:\n            return False\n        \n        n += 1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):\n\n### Test\nassert candidate(383) == True",
    "timestamp": "2025-08-13T11:10:35.358419",
    "response_time": "4.70",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 56,
    "solution": "from typing import Union\n\ndef check(num: int) -> Union[bool, int]:\n    # Reverse the number\n    reversed_num = int(str(num)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    return num == (2 * reversed_num - 1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):\n\n### Test\nassert candidate(70) == False",
    "timestamp": "2025-08-13T11:10:40.857804",
    "response_time": "5.50",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 57,
    "solution": "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> str:\n    # Convert integers to strings for easier sorting\n    str_arr = [str(num) for num in arr]\n    \n    # Custom sorting to create largest number\n    # Sort in descending order based on concatenated string comparison\n    str_arr.sort(key=lambda x: x*len(max(str_arr, key=len)), reverse=True)\n    \n    # Join the sorted strings to form the largest number\n    return ''.join(str_arr)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :\n\n### Test\nassert candidate([1,2,3]) == 321",
    "timestamp": "2025-08-13T11:10:47.366850",
    "response_time": "6.51",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 58,
    "solution": "from typing import Union\n\ndef opposite_Signs(x: int, y: int) -> bool:\n    \"\"\"\n    Check whether two given integers have opposite signs.\n    \n    Args:\n        x (int): First integer\n        y (int): Second integer\n    \n    Returns:\n        bool: True if x and y have opposite signs, False otherwise\n    \"\"\"\n    # XOR the sign bits to determine if signs are opposite\n    # If signs are different, XOR will return True\n    return x * y < 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):\n\n### Test\nassert candidate(1,-2) == True\nassert candidate(3,2) == False",
    "timestamp": "2025-08-13T11:10:54.305849",
    "response_time": "6.94",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 59,
    "solution": "from typing import Union\n\ndef is_octagonal(n: int) -> Union[int, str]:\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    An octagonal number is a figurate number that extends the concept of triangular and square numbers to the octagon.\n    The formula for the nth octagonal number is: n * (6 * n - 4)\n    \n    Args:\n        n (int): The position of the octagonal number to calculate\n    \n    Returns:\n        int: The nth octagonal number\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input: n must be a positive integer\"\n    \n    return n * (6 * n - 4) // 2",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):\n\n### Test\nassert candidate(5) == 65",
    "timestamp": "2025-08-13T11:10:58.915151",
    "response_time": "4.61",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 61,
    "solution": "from typing import List\n\ndef count_Substrings(s: str) -> int:\n    \"\"\"\n    Count the number of substrings where the sum of digits equals the substring's length\n    \n    Args:\n        s (str): Input string of digits\n    \n    Returns:\n        int: Number of valid substrings\n    \"\"\"\n    count = 0\n    n = len(s)\n    \n    # Iterate through all possible substrings\n    for start in range(n):\n        for end in range(start, n):\n            # Extract current substring\n            substring = s[start:end+1]\n            \n            # Calculate sum of digits in substring\n            digit_sum = sum(int(digit) for digit in substring)\n            \n            # Check if sum of digits equals substring length\n            if digit_sum == len(substring):\n                count += 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):\n\n### Test\nassert candidate('112112') == 6",
    "timestamp": "2025-08-13T11:11:02.442463",
    "response_time": "3.53",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 62,
    "solution": "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    if not xs:\n        return None\n    \n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    \n    return smallest",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):\n\n### Test\nassert candidate([10, 20, 1, 45, 99]) == 1",
    "timestamp": "2025-08-13T11:11:04.999700",
    "response_time": "2.55",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 63,
    "solution": "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n    \n    Args:\n        test_list: A list of tuples containing integer pairs\n    \n    Returns:\n        The maximum difference between any pair in the list\n    \"\"\"\n    # If list is empty, return 0 or raise an exception\n    if not test_list:\n        return 0\n    \n    # Initialize max difference to the smallest possible value\n    max_diff = float('-inf')\n    \n    # Iterate through each tuple in the list\n    for a, b in test_list:\n        # Calculate the absolute difference between elements in the tuple\n        current_diff = abs(a - b)\n        \n        # Update max difference if current difference is larger\n        max_diff = max(max_diff, current_diff)\n    \n    return max_diff",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):\n\n### Test\nassert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
    "timestamp": "2025-08-13T11:11:09.317087",
    "response_time": "4.32",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 64,
    "solution": "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):\n\n### Test\nassert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
    "timestamp": "2025-08-13T11:11:11.125328",
    "response_time": "1.81",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 65,
    "solution": "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    \"\"\"\n    Recursively flatten a nested list and sum all of its elements.\n    \n    Args:\n        data_list (List[Union[int, List]]): A potentially nested list of integers\n    \n    Returns:\n        int: Sum of all elements in the flattened list\n    \"\"\"\n    total = 0\n    \n    for item in data_list:\n        if isinstance(item, list):\n            # If item is a list, recursively sum its elements\n            total += recursive_list_sum(item)\n        else:\n            # If item is an integer, add it to the total\n            total += item\n    \n    return total",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):\n\n### Test\nassert candidate(([1, 2, [3,4],[5,6]]))==21",
    "timestamp": "2025-08-13T11:11:15.019879",
    "response_time": "3.89",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 66,
    "solution": "from typing import List\n\ndef pos_count(list: List[int]) -> int:\n    return sum(1 for num in list if num > 0)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):\n\n### Test\nassert candidate([1,-2,3,-4]) == 2",
    "timestamp": "2025-08-13T11:11:16.403061",
    "response_time": "1.38",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 67,
    "solution": "from typing import List\n\ndef bell_number(n: int) -> int:\n    \"\"\"\n    Calculate the Bell number for a given set size n.\n    Bell number represents the number of ways to partition a set of n elements.\n    \n    Args:\n        n (int): Size of the set\n    \n    Returns:\n        int: Number of ways to partition the set\n    \"\"\"\n    # Create a 2D array to store Bell triangle values\n    bell_triangle: List[List[int]] = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # First value is always 1\n    bell_triangle[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # First value in each row is the last value of previous row\n        bell_triangle[i][0] = bell_triangle[i-1][i-1]\n        \n        # Calculate other values in the row\n        for j in range(1, i+1):\n            bell_triangle[i][j] = bell_triangle[i-1][j-1] + bell_triangle[i][j-1]\n    \n    # The Bell number is the last value in the first column\n    return bell_triangle[n][0]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):\n\n### Test\nassert candidate(2)==2",
    "timestamp": "2025-08-13T11:11:25.640205",
    "response_time": "9.24",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 68,
    "solution": "from typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    # Check if array is monotonically increasing\n    increasing = all(A[i] <= A[i+1] for i in range(len(A)-1))\n    \n    # Check if array is monotonically decreasing \n    decreasing = all(A[i] >= A[i+1] for i in range(len(A)-1))\n    \n    # Return True if either increasing or decreasing\n    return increasing or decreasing",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):\n\n### Test\nassert candidate([6, 5, 4, 4]) == True",
    "timestamp": "2025-08-13T11:11:32.099250",
    "response_time": "6.33",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 69,
    "solution": "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    # If the sublist is empty, return False\n    if not s:\n        return False\n    \n    # If the sublist is longer than the main list, return False\n    if len(s) > len(l):\n        return False\n    \n    # Iterate through the main list to check for consecutive sublist match\n    for i in range(len(l) - len(s) + 1):\n        # Check if the slice matches the sublist\n        if l[i:i+len(s)] == s:\n            return True\n    \n    # If no match is found, return False\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):\n\n### Test\nassert candidate([2,4,3,5,7],[3,7])==False",
    "timestamp": "2025-08-13T11:11:35.166572",
    "response_time": "3.06",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 70,
    "solution": "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    # If input list is empty or has only one tuple, return True\n    if len(Input) <= 1:\n        return True\n    \n    # Get the length of the first tuple\n    first_tuple_length = len(Input[0])\n    \n    # Check if all tuples have the same length as the first tuple\n    return all(len(tuple_item) == first_tuple_length for tuple_item in Input)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):\n\n### Test\nassert candidate([(11, 22, 33), (44, 55, 66)]) == True",
    "timestamp": "2025-08-13T11:11:37.907240",
    "response_time": "2.74",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 71,
    "solution": "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n    Implement comb sort algorithm to sort a list of numbers\n    \n    Args:\n        nums (List[int]): Input list of numbers to be sorted\n    \n    Returns:\n        List[int]: Sorted list of numbers in ascending order\n    \"\"\"\n    # If list is empty or has only one element, return as is\n    if len(nums) <= 1:\n        return nums\n    \n    # Initialize gap as list length\n    gap = len(nums)\n    \n    # Set shrink factor (typically 1.3)\n    shrink = 1.3\n    \n    # Flag to track if any swaps occurred\n    swapped = True\n    \n    while gap > 1 or swapped:\n        # Reduce gap size\n        gap = max(1, int(gap / shrink))\n        \n        # Reset swap flag\n        swapped = False\n        \n        # Compare elements with current gap\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                # Swap elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    \n    return nums",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):\n\n### Test\nassert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
    "timestamp": "2025-08-13T11:11:42.978351",
    "response_time": "5.05",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 72,
    "solution": "from typing import Union\n\ndef dif_Square(n: int) -> bool:\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares.\n    \n    Args:\n        n (int): The number to check\n    \n    Returns:\n        bool: True if the number can be represented as difference of two squares, False otherwise\n    \"\"\"\n    # Try all possible combinations of squares\n    for i in range(int(n**0.5) + 1):\n        for j in range(int(n**0.5) + 1):\n            # Check if the difference of squares equals the input number\n            if i*i - j*j == n:\n                return True\n    \n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):\n\n### Test\nassert candidate(5) == True",
    "timestamp": "2025-08-13T11:11:46.300014",
    "response_time": "3.32",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 74,
    "solution": "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    # Check if lengths are different\n    if len(colors) != len(patterns):\n        return False\n    \n    # Create mappings to track color to pattern and pattern to color\n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    # Iterate through colors and patterns simultaneously \n    for color, pattern in zip(colors, patterns):\n        # If color already mapped to a pattern\n        if color in color_to_pattern:\n            # Check if mapped pattern matches current pattern\n            if color_to_pattern[color] != pattern:\n                return False\n        \n        # If pattern already mapped to a color  \n        if pattern in pattern_to_color:\n            # Check if mapped color matches current color\n            if pattern_to_color[pattern] != color:\n                return False\n        \n        # Create mappings\n        color_to_pattern[color] = pattern\n        pattern_to_color[pattern] = color\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):\n\n### Test\nassert candidate([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
    "timestamp": "2025-08-13T11:11:51.218398",
    "response_time": "4.91",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 75,
    "solution": "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    \"\"\"\n    Find tuples where all elements are divisible by K\n    \n    Args:\n        test_list: List of tuples to check\n        K: Divisor to check against\n    \n    Returns:\n        List of tuples where every element is divisible by K\n    \"\"\"\n    return [tup for tup in test_list if all(num % K == 0 for num in tup)]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):\n\n### Test\nassert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
    "timestamp": "2025-08-13T11:11:54.540148",
    "response_time": "3.32",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 77,
    "solution": "from typing import Union\n\ndef is_Diff(n: Union[int, str]) -> bool:\n    \"\"\"\n    Check if a number is divisible by 11.\n    \n    Args:\n        n (int or str): The number to check for divisibility by 11\n    \n    Returns:\n        bool: True if the number is divisible by 11, False otherwise\n    \"\"\"\n    # Convert input to integer if it's a string\n    n = int(n)\n    \n    # A number is divisible by 11 if the remainder of division by 11 is 0\n    return n % 11 == 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):\n\n### Test\nassert candidate (12345) == False",
    "timestamp": "2025-08-13T11:11:57.342575",
    "response_time": "2.80",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 79,
    "solution": "def word_len(s):\n    \"\"\"\n    Check whether the length of the given word is odd or not.\n    \n    Args:\n        s (str): Input word to check length\n    \n    Returns:\n        bool: True if word length is odd, False if word length is even\n    \"\"\"\n    return len(s) % 2 != 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):\n\n### Test\nassert candidate(\"Hadoop\") == False",
    "timestamp": "2025-08-13T11:12:02.308240",
    "response_time": "4.96",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 80,
    "solution": "from typing import Union\n\ndef tetrahedral_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    A tetrahedral number is the sum of the first n triangular numbers.\n    It can be calculated using the formula: n * (n + 1) * (n + 2) / 6\n    \n    Args:\n        n (int): The position of the tetrahedral number to calculate\n    \n    Returns:\n        int: The nth tetrahedral number\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):\n\n### Test\nassert candidate(5) == 35",
    "timestamp": "2025-08-13T11:12:05.182327",
    "response_time": "2.87",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 82,
    "solution": "from math import pi\n\ndef volume_sphere(r):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n    \n    Volume of a sphere is calculated using the formula: (4/3) * \u03c0 * r\u00b3\n    \n    Args:\n        r (float): Radius of the sphere\n    \n    Returns:\n        float: Volume of the sphere\n    \"\"\"\n    return (4/3) * pi * (r ** 3)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 4188.790204786391, rel_tol=0.001)",
    "timestamp": "2025-08-13T11:12:08.011727",
    "response_time": "2.83",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 83,
    "solution": "def get_Char(strr):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in strr)\n    \n    # Take modulo 26 to get a value between 0-25\n    modulo_value = ascii_sum % 26\n    \n    # Convert the modulo value to corresponding lowercase letter\n    # 'a' starts at ASCII 97, so add the modulo value to get the character\n    return chr(97 + modulo_value)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):\n\n### Test\nassert candidate(\"abc\") == \"f\"",
    "timestamp": "2025-08-13T11:12:13.891316",
    "response_time": "5.88",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 84,
    "solution": "from typing import List\n\ndef sequence(n: int) -> int:\n    # Handle base cases\n    if n <= 0:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    \n    # Initialize the sequence with first two elements\n    seq: List[int] = [0, 1, 1]\n    \n    # Generate subsequent elements of the sequence\n    for i in range(3, n + 1):\n        # Newman-Conway sequence rule: \n        # P(n) = P(P(n-1)) + P(n-2)\n        next_num = seq[seq[i-1]] + seq[i-2]\n        seq.append(next_num)\n    \n    # Return the nth number in the sequence\n    return seq[n]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):\n\n### Test\nassert candidate(10) == 6",
    "timestamp": "2025-08-13T11:12:17.902942",
    "response_time": "4.00",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 85,
    "solution": "from math import pi\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n    \n    Surface area of a sphere is calculated using the formula: 4 * \u03c0 * r^2\n    \n    Args:\n        r (float): Radius of the sphere\n    \n    Returns:\n        float: Surface area of the sphere\n    \"\"\"\n    return 4 * pi * r**2",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 1256.6370614359173, rel_tol=0.001)",
    "timestamp": "2025-08-13T11:12:20.862590",
    "response_time": "2.96",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 86,
    "solution": "from typing import Union\n\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n    \n    A centered hexagonal number is a figurate number that represents a hexagon \n    with a dot in the center and all other dots surrounding the center in a hexagonal lattice.\n    \n    The formula for the nth centered hexagonal number is: 1 + 6 * (n * (n - 1) / 2)\n    \n    Args:\n        n (int): The position of the centered hexagonal number to calculate\n    \n    Returns:\n        int: The nth centered hexagonal number\n    \"\"\"\n    return 1 + 6 * (n * (n - 1) // 2)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):\n\n### Test\nassert candidate(10) == 271",
    "timestamp": "2025-08-13T11:12:24.507433",
    "response_time": "3.64",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 87,
    "solution": "from typing import Dict, Any\n\ndef merge_dictionaries_three(dict1: Dict[str, Any], dict2: Dict[str, Any], dict3: Dict[str, Any]) -> Dict[str, Any]:\n    # Create a new dictionary to store the merged result\n    merged_dict = {}\n    \n    # Add key-value pairs from the first dictionary\n    merged_dict.update(dict1)\n    \n    # Add key-value pairs from the second dictionary\n    # This will overwrite any existing keys from dict1\n    merged_dict.update(dict2)\n    \n    # Add key-value pairs from the third dictionary\n    # This will overwrite any existing keys from dict1 and dict2\n    merged_dict.update(dict3)\n    \n    return merged_dict",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\n### Test\nassert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={\"\"\"B\"\"\": \"\"\"Black\"\"\", \"\"\"R\"\"\": \"\"\"Red\"\"\", \"\"\"P\"\"\": \"\"\"Pink\"\"\", \"\"\"G\"\"\": \"\"\"Green\"\"\", \"\"\"W\"\"\": \"\"\"White\"\"\", \"\"\"O\"\"\": \"\"\"Orange\"\"\"}",
    "timestamp": "2025-08-13T11:12:27.374077",
    "response_time": "2.86",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  }
]