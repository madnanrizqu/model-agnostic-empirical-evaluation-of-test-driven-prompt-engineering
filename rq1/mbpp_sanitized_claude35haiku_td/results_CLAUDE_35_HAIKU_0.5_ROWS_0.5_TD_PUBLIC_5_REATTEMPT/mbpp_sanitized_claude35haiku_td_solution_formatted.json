[
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 2,
    "solution": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Find shared elements between two tuples\n    \n    Args:\n        test_tup1 (tuple): First input tuple\n        test_tup2 (tuple): Second input tuple\n    \n    Returns:\n        tuple: Tuple containing common elements\n    \"\"\"\n    return tuple(set(test_tup1) & set(test_tup2))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):\n\n### Test\nassert set(candidate((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))",
    "timestamp": "2025-10-17T18:49:43.678840",
    "response_time": "2.84",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 3,
    "solution": "def is_not_prime(n):\n    # Numbers less than 2 are not prime\n    if n < 2:\n        return True\n    \n    # Check for divisibility from 2 to square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    \n    # If no divisors found, it's a prime number\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):\n\n### Test\nassert candidate(2) == False\nassert candidate(10) == True",
    "timestamp": "2025-10-17T18:49:46.008174",
    "response_time": "2.33",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 4,
    "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    # Use heapq.nlargest to efficiently find n largest elements\n    # This returns the n largest elements in descending order\n    return heapq.nlargest(n, nums)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):\n\n### Test\nassert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]",
    "timestamp": "2025-10-17T18:49:52.024675",
    "response_time": "6.01",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 6,
    "solution": "def differ_At_One_Bit_Pos(x, y):\n    # XOR the two numbers to get the bit differences\n    xor_result = x ^ y\n    \n    # Count the number of set bits in the XOR result\n    # If exactly one bit is set, it means the numbers differ at only one bit position\n    return bin(xor_result).count('1') == 1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):\n\n### Test\nassert candidate(13,9) == True\nassert candidate(15,8) == False\nassert candidate(2,4) == False",
    "timestamp": "2025-10-17T18:49:58.497291",
    "response_time": "6.47",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 7,
    "solution": "import re\n\ndef find_char_long(text):\n    # Use regex to find words that are at least 4 characters long\n    return [word for word in text.split() if len(word) >= 4]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):\n\n### Test\nassert set(candidate('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])",
    "timestamp": "2025-10-17T18:50:00.110343",
    "response_time": "1.61",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 8,
    "solution": "def square_nums(nums):\n    \"\"\"\n    Returns a list of squares of individual elements in the input list.\n    \n    Args:\n        nums (list): A list of numbers to be squared\n    \n    Returns:\n        list: A list containing the squares of each number in the input list\n    \"\"\"\n    return [num ** 2 for num in nums]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
    "timestamp": "2025-10-17T18:50:02.107798",
    "response_time": "2.00",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 9,
    "solution": "def find_Rotations(str):\n    # If string is empty or single character, no rotations possible\n    if len(str) <= 1:\n        return 0\n    \n    # Try rotations from 1 to length of string\n    for rotations in range(1, len(str)):\n        # Rotate the string by current number of rotations\n        rotated = str[rotations:] + str[:rotations]\n        \n        # If rotated string matches original, return number of rotations\n        if rotated == str:\n            return rotations\n    \n    # If no rotation makes the string same, return 0\n    return 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):\n\n### Test\nassert candidate(\"aaaa\") == 1",
    "timestamp": "2025-10-17T18:50:05.318047",
    "response_time": "3.21",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 11,
    "solution": "def remove_Occ(s, ch):\n    # Find the first occurrence of the character\n    first_index = s.find(ch)\n    \n    # Find the last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    # If the character is not found, return the original string\n    if first_index == -1:\n        return s\n    \n    # If first and last index are the same (only one occurrence), \n    # remove that single occurrence\n    if first_index == last_index:\n        return s[:first_index] + s[first_index+1:]\n    \n    # Remove first and last occurrence\n    return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):\n\n### Test\nassert candidate(\"hello\",\"l\") == \"heo\"",
    "timestamp": "2025-10-17T18:50:10.739762",
    "response_time": "5.42",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 12,
    "solution": "def sort_matrix(M):\n    # Sort the matrix based on the sum of each row\n    return sorted(M, key=lambda row: sum(row))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):\n\n### Test\nassert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
    "timestamp": "2025-10-17T18:50:16.091061",
    "response_time": "5.35",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 14,
    "solution": "def find_Volume(l,b,h):\n    \"\"\"\n    Calculate the volume of a triangular prism\n    \n    Args:\n    l (float): Length of the base triangle's base\n    b (float): Width/breadth of the base triangle \n    h (float): Height of the prism\n    \n    Returns:\n    float: Volume of the triangular prism\n    \"\"\"\n    # Calculate area of base triangle using 1/2 * base * height\n    base_area = 0.5 * l * b\n    \n    # Volume = base area * height of prism\n    volume = base_area * h\n    \n    return volume",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :\n\n### Test\nassert candidate(10,8,6) == 240",
    "timestamp": "2025-10-17T18:50:18.962514",
    "response_time": "2.87",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 16,
    "solution": "import re\n\ndef text_lowercase_underscore(text):\n    # Use regex to check if the entire string matches lowercase letters with optional underscore sequences\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):\n\n### Test\nassert candidate(\"aab_cbbbc\")==(True)",
    "timestamp": "2025-10-17T18:50:24.242501",
    "response_time": "5.28",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 17,
    "solution": "def square_perimeter(a):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n    \n    Args:\n        a (int or float): Length of one side of the square\n    \n    Returns:\n        int or float: Perimeter of the square (4 * side length)\n    \"\"\"\n    return 4 * a",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):\n\n### Test\nassert candidate(10)==40",
    "timestamp": "2025-10-17T18:50:26.152531",
    "response_time": "1.91",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 18,
    "solution": "def remove_dirty_chars(string1, string2):\n    # Convert the second string to a set for efficient lookup\n    chars_to_remove = set(string2)\n    \n    # Use a list comprehension to keep only characters not in chars_to_remove\n    return ''.join(char for char in string1 if char not in chars_to_remove)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):\n\n### Test\nassert candidate(\"probasscurve\", \"pros\") == \"\"\"bacuve\"\"\"",
    "timestamp": "2025-10-17T18:50:31.436946",
    "response_time": "5.28",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 19,
    "solution": "def test_duplicate(arraynums):\n    # Create a set from the input array\n    # If the length of the set is less than the length of the original array,\n    # it means there are duplicate elements\n    return len(set(arraynums)) < len(arraynums)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):\n\n### Test\nassert candidate(([1,2,3,4,5]))==False",
    "timestamp": "2025-10-17T18:50:36.450129",
    "response_time": "5.01",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 20,
    "solution": "def is_woodall(x):\n    # Check for woodall number by trying different values of n\n    n = 1\n    while True:\n        woodall_num = n * (2**n) - 1\n        \n        # If we've found the woodall number\n        if woodall_num == x:\n            return True\n        \n        # If we've exceeded the input number, it's not a woodall number\n        if woodall_num > x:\n            return False\n        \n        n += 1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):\n\n### Test\nassert candidate(383) == True",
    "timestamp": "2025-10-17T18:50:42.834242",
    "response_time": "6.38",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 56,
    "solution": "def check(num):\n    # Convert number to string to easily reverse it\n    num_str = str(num)\n    \n    # Reverse the string and convert back to integer\n    reversed_num = int(num_str[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    return num == (2 * reversed_num - 1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):\n\n### Test\nassert candidate(70) == False",
    "timestamp": "2025-10-17T18:50:45.189358",
    "response_time": "2.35",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 57,
    "solution": "def find_Max_Num(arr):\n    # Convert digits to strings for sorting\n    str_arr = [str(num) for num in arr]\n    \n    # Custom sorting to arrange digits to form largest number\n    # Sort in descending order based on concatenated string comparison\n    str_arr.sort(key=lambda x: x*len(max(str_arr, key=len)), reverse=True)\n    \n    # Join the sorted digits and convert back to integer\n    return int(''.join(str_arr))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :\n\n### Test\nassert candidate([1,2,3]) == 321",
    "timestamp": "2025-10-17T18:50:48.297382",
    "response_time": "3.11",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 58,
    "solution": "def opposite_Signs(x,y):\n    # Two numbers have opposite signs if their product is negative\n    return x * y < 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):\n\n### Test\nassert candidate(1,-2) == True\nassert candidate(3,2) == False",
    "timestamp": "2025-10-17T18:50:52.060166",
    "response_time": "3.76",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 59,
    "solution": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    An octagonal number is a figurate number that extends the concept of triangular and square numbers to the octagon.\n    The formula for the nth octagonal number is: n * (6 * n - 4)\n    \n    Args:\n        n (int): The position in the octagonal number sequence (1-based index)\n    \n    Returns:\n        int: The nth octagonal number\n    \"\"\"\n    return n * (6 * n - 4)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):\n\n### Test\nassert candidate(5) == 65",
    "timestamp": "2025-10-17T18:50:59.030317",
    "response_time": "6.97",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 61,
    "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    # Iterate through all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            # Extract the current substring\n            substring = s[i:j+1]\n            \n            # Calculate the sum of digits in the substring\n            digit_sum = sum(int(digit) for digit in substring)\n            \n            # Check if the sum of digits equals the substring length\n            if digit_sum == len(substring):\n                count += 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):\n\n### Test\nassert candidate('112112') == 6",
    "timestamp": "2025-10-17T18:51:05.975278",
    "response_time": "6.94",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 62,
    "solution": "def smallest_num(xs):\n    \"\"\"\n    Find and return the smallest number in a given list.\n    \n    Args:\n        xs (list): A list of numbers\n    \n    Returns:\n        The smallest number in the list\n    \"\"\"\n    if not xs:\n        return None\n    \n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    \n    return smallest",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):\n\n### Test\nassert candidate([10, 20, 1, 45, 99]) == 1",
    "timestamp": "2025-10-17T18:51:08.202628",
    "response_time": "2.22",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 63,
    "solution": "def max_difference(test_list):\n    # If the list is empty, return 0\n    if not test_list:\n        return 0\n    \n    # Initialize max_diff to the smallest possible value\n    max_diff = float('-inf')\n    \n    # Iterate through each tuple in the list\n    for a, b in test_list:\n        # Calculate the absolute difference between the two elements in the tuple\n        diff = abs(a - b)\n        \n        # Update max_diff if the current difference is larger\n        max_diff = max(max_diff, diff)\n    \n    return max_diff",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):\n\n### Test\nassert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
    "timestamp": "2025-10-17T18:51:14.815584",
    "response_time": "6.61",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 64,
    "solution": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):\n\n### Test\nassert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
    "timestamp": "2025-10-17T18:51:16.265827",
    "response_time": "1.45",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 65,
    "solution": "def recursive_list_sum(data_list):\n    total = 0\n    \n    def flatten(item):\n        nonlocal total\n        if isinstance(item, list):\n            for sub_item in item:\n                flatten(sub_item)\n        else:\n            total += item\n    \n    flatten(data_list)\n    return total",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):\n\n### Test\nassert candidate(([1, 2, [3,4],[5,6]]))==21",
    "timestamp": "2025-10-17T18:51:18.082277",
    "response_time": "1.81",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 66,
    "solution": "def pos_count(list):\n    \"\"\"\n    Count the number of positive numbers in a given list.\n    \n    Args:\n        list (list): A list of numbers\n    \n    Returns:\n        int: Number of positive numbers in the list\n    \"\"\"\n    return sum(1 for num in list if num > 0)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):\n\n### Test\nassert candidate([1,-2,3,-4]) == 2",
    "timestamp": "2025-10-17T18:51:19.857354",
    "response_time": "1.77",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 67,
    "solution": "def bell_number(n):\n    # Create a 2D array to store Bell triangle values\n    bell_triangle = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # First value is always 1\n    bell_triangle[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # First number in each row is the last number of previous row\n        bell_triangle[i][0] = bell_triangle[i-1][i-1]\n        \n        # Calculate other values in the row\n        for j in range(1, i+1):\n            bell_triangle[i][j] = bell_triangle[i-1][j-1] + bell_triangle[i][j-1]\n    \n    # Return the first number in the last row, which is the Bell number\n    return bell_triangle[n][0]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):\n\n### Test\nassert candidate(2)==2",
    "timestamp": "2025-10-17T18:51:27.822364",
    "response_time": "7.96",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 68,
    "solution": "def is_Monotonic(A):\n    # If array has 0 or 1 element, it's considered monotonic\n    if len(A) <= 1:\n        return True\n    \n    # Check if array is monotonically increasing\n    increasing = all(A[i] <= A[i+1] for i in range(len(A)-1))\n    \n    # Check if array is monotonically decreasing\n    decreasing = all(A[i] >= A[i+1] for i in range(len(A)-1))\n    \n    # Return True if array is either increasing or decreasing\n    return increasing or decreasing",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):\n\n### Test\nassert candidate([6, 5, 4, 4]) == True",
    "timestamp": "2025-10-17T18:51:34.412769",
    "response_time": "6.59",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 69,
    "solution": "def is_sublist(l, s):\n    # If the sublist is empty, return True\n    if not s:\n        return True\n    \n    # If the sublist is longer than the main list, return False\n    if len(s) > len(l):\n        return False\n    \n    # Iterate through the main list\n    for i in range(len(l) - len(s) + 1):\n        # Check if the sublist matches the current slice of the main list\n        if l[i:i+len(s)] == s:\n            return True\n    \n    # If no match is found, return False\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):\n\n### Test\nassert candidate([2,4,3,5,7],[3,7])==False",
    "timestamp": "2025-10-17T18:51:39.329847",
    "response_time": "4.91",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 70,
    "solution": "def get_equal(Input):\n    # If input is empty or contains only one tuple, return True\n    if len(Input) <= 1:\n        return True\n    \n    # Get the length of the first tuple\n    first_length = len(Input[0])\n    \n    # Check if all tuples have the same length as the first tuple\n    return all(len(tuple_item) == first_length for tuple_item in Input)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):\n\n### Test\nassert candidate([(11, 22, 33), (44, 55, 66)]) == True",
    "timestamp": "2025-10-17T18:51:44.303399",
    "response_time": "4.97",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 71,
    "solution": "def comb_sort(nums):\n    \"\"\"\n    Implement Comb Sort algorithm to sort a list of elements.\n    \n    Comb Sort is an improvement over Bubble Sort with a gap reduction strategy.\n    \n    Args:\n        nums (list): List of comparable elements to be sorted\n    \n    Returns:\n        list: Sorted list in ascending order\n    \"\"\"\n    # Get the length of the list\n    n = len(nums)\n    \n    # Initialize gap as the list length\n    gap = n\n    \n    # Set shrink factor (typically 1.3)\n    shrink = 1.3\n    \n    # Flag to track if any swaps occurred\n    swapped = True\n    \n    while gap > 1 or swapped:\n        # Reduce gap\n        gap = max(1, int(gap / shrink))\n        \n        # Reset swap flag\n        swapped = False\n        \n        # Compare elements with current gap\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                # Swap elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    \n    return nums",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):\n\n### Test\nassert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
    "timestamp": "2025-10-17T18:51:49.182017",
    "response_time": "4.88",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 72,
    "solution": "def dif_Square(n):\n    # Check all possible combinations of squares that can form the difference\n    for i in range(1, int(n**0.5) + 1):\n        for j in range(1, int(n**0.5) + 1):\n            # Check if the difference of squares equals the input number\n            if i*i - j*j == n:\n                return True\n    \n    # If no combination is found, return False\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):\n\n### Test\nassert candidate(5) == True",
    "timestamp": "2025-10-17T18:51:55.217313",
    "response_time": "6.03",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 74,
    "solution": "def is_samepatterns(colors, patterns):\n    # Check if lengths are different\n    if len(colors) != len(patterns):\n        return False\n    \n    # Create mappings to track color to pattern and pattern to color\n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    # Iterate through colors and patterns simultaneously\n    for color, pattern in zip(colors, patterns):\n        # Check color to pattern mapping\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        # Check pattern to color mapping\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):\n\n### Test\nassert candidate([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
    "timestamp": "2025-10-17T18:52:03.604907",
    "response_time": "8.38",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 75,
    "solution": "def find_tuples(test_list, K):\n    # Use list comprehension to filter tuples \n    # where all elements are divisible by K\n    return [tup for tup in test_list if all(x % K == 0 for x in tup)]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):\n\n### Test\nassert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
    "timestamp": "2025-10-17T18:52:09.599985",
    "response_time": "5.99",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 77,
    "solution": "def is_Diff(n):\n    # A number is divisible by 11 if the alternating sum of its digits is divisible by 11\n    # Convert number to string to easily iterate through digits\n    num_str = str(n)\n    \n    # Calculate alternating sum of digits\n    alternating_sum = 0\n    for i in range(len(num_str)):\n        # Multiply digits by alternating +1 and -1\n        digit = int(num_str[i])\n        if i % 2 == 0:\n            alternating_sum += digit\n        else:\n            alternating_sum -= digit\n    \n    # Check if alternating sum is divisible by 11\n    return alternating_sum % 11 == 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):\n\n### Test\nassert candidate (12345) == False",
    "timestamp": "2025-10-17T18:52:16.140557",
    "response_time": "6.54",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 79,
    "solution": "def word_len(s):\n    \"\"\"\n    Check whether the length of the given word is odd or not.\n    \n    Args:\n        s (str): Input word/string to check length\n    \n    Returns:\n        bool: True if length is odd, False if length is even\n    \"\"\"\n    return len(s) % 2 != 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):\n\n### Test\nassert candidate(\"Hadoop\") == False",
    "timestamp": "2025-10-17T18:52:18.048662",
    "response_time": "1.91",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 80,
    "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    A tetrahedral number is the sum of the first n triangular numbers.\n    It can be calculated using the formula: n * (n + 1) * (n + 2) / 6\n    \n    Args:\n        n (int): The position of the tetrahedral number to calculate\n    \n    Returns:\n        int: The nth tetrahedral number\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):\n\n### Test\nassert candidate(5) == 35",
    "timestamp": "2025-10-17T18:52:20.494686",
    "response_time": "2.44",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 82,
    "solution": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n    \n    Volume of a sphere is calculated using the formula: (4/3) * \u03c0 * r\u00b3\n    \n    Args:\n        r (float): Radius of the sphere\n    \n    Returns:\n        float: Volume of the sphere\n    \"\"\"\n    return (4/3) * math.pi * (r ** 3)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 4188.790204786391, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:52:22.777124",
    "response_time": "2.28",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 83,
    "solution": "def get_Char(strr):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in strr)\n    \n    # Take modulo 26 to get a value between 0-25\n    modulo_value = ascii_sum % 26\n    \n    # Convert the modulo value to corresponding lowercase letter\n    # 'a' starts at ASCII 97, so add the modulo value to get the character\n    return chr(97 + modulo_value)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):\n\n### Test\nassert candidate(\"abc\") == \"f\"",
    "timestamp": "2025-10-17T18:52:25.676679",
    "response_time": "2.90",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 84,
    "solution": "def sequence(n):\n    # Handle base cases\n    if n <= 0:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    \n    # Initialize sequence array\n    seq = [0, 1, 1]\n    \n    # Build the sequence up to nth term\n    for i in range(3, n + 1):\n        # Calculate next term using the Newman-Conway sequence rule\n        next_term = seq[seq[i-1]] + seq[i-1 - seq[i-1]]\n        seq.append(next_term)\n    \n    # Return the nth term\n    return seq[n]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):\n\n### Test\nassert candidate(10) == 6",
    "timestamp": "2025-10-17T18:52:33.012000",
    "response_time": "7.33",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 85,
    "solution": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n    \n    Surface area of a sphere is calculated using the formula: 4 * \u03c0 * r^2\n    \n    Args:\n        r (float): Radius of the sphere\n    \n    Returns:\n        float: Surface area of the sphere\n    \"\"\"\n    return 4 * math.pi * r**2",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 1256.6370614359173, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:52:35.173753",
    "response_time": "2.16",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 86,
    "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n    \n    A centered hexagonal number is a figurate number that represents a hexagon \n    with a dot in the center and all other dots surrounding the center in a hexagonal lattice.\n    \n    Args:\n        n (int): The position of the centered hexagonal number to calculate\n    \n    Returns:\n        int: The nth centered hexagonal number\n    \"\"\"\n    return n * (6 * n - 1) // 2 + 1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):\n\n### Test\nassert candidate(10) == 271",
    "timestamp": "2025-10-17T18:52:42.152378",
    "response_time": "6.98",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 87,
    "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \n    If there are duplicate keys, the value from the later dictionary \n    will overwrite the value from the earlier dictionary.\n    \n    Args:\n        dict1 (dict): First dictionary to merge\n        dict2 (dict): Second dictionary to merge \n        dict3 (dict): Third dictionary to merge\n    \n    Returns:\n        dict: A new dictionary containing all key-value pairs from the input dictionaries\n    \"\"\"\n    # Create a new dictionary and update it with dictionaries in order\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    \n    return merged_dict",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\n### Test\nassert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={\"\"\"B\"\"\": \"\"\"Black\"\"\", \"\"\"R\"\"\": \"\"\"Red\"\"\", \"\"\"P\"\"\": \"\"\"Pink\"\"\", \"\"\"G\"\"\": \"\"\"Green\"\"\", \"\"\"W\"\"\": \"\"\"White\"\"\", \"\"\"O\"\"\": \"\"\"Orange\"\"\"}",
    "timestamp": "2025-10-17T18:52:45.456990",
    "response_time": "3.30",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 88,
    "solution": "def freq_count(list1):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in the input list.\n    \n    Args:\n        list1 (list): Input list of elements\n    \n    Returns:\n        dict: Dictionary with elements as keys and their frequencies as values\n    \"\"\"\n    # Create an empty dictionary to store frequencies\n    freq_dict = {}\n    \n    # Iterate through each element in the list\n    for item in list1:\n        # If item already exists in dictionary, increment its count\n        # If not, initialize its count to 1\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    \n    return freq_dict",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):\n\n### Test\nassert candidate([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})",
    "timestamp": "2025-10-17T18:52:48.529335",
    "response_time": "3.07",
    "context": "{\"function_name\": \"freq_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 89,
    "solution": "def closest_num(N):\n    \"\"\"\n    Find the closest smaller number than the given number N.\n    \n    Args:\n        N (int): The input number\n    \n    Returns:\n        int: The closest smaller number to N\n    \"\"\"\n    return N - 1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):\n\n### Test\nassert candidate(11) == 10",
    "timestamp": "2025-10-17T18:52:50.264423",
    "response_time": "1.73",
    "context": "{\"function_name\": \"closest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 90,
    "solution": "def len_log(list1):\n    \"\"\"\n    Find the length of the longest word in a given list of words.\n    \n    Args:\n        list1 (list): A list of strings/words\n    \n    Returns:\n        int: Length of the longest word in the list\n    \"\"\"\n    if not list1:\n        return 0\n    \n    return max(len(word) for word in list1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):\n\n### Test\nassert candidate([\"python\",\"PHP\",\"bigdata\"]) == 7",
    "timestamp": "2025-10-17T18:52:52.491434",
    "response_time": "2.22",
    "context": "{\"function_name\": \"len_log\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 91,
    "solution": "def find_substring(str1, sub_str):\n    \"\"\"\n    Check if a substring is present in any of the strings in a given list.\n    \n    Args:\n        str1 (list): List of strings to search through\n        sub_str (str): Substring to find\n    \n    Returns:\n        bool: True if substring is found in any string, False otherwise\n    \"\"\"\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):\n\n### Test\nassert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
    "timestamp": "2025-10-17T18:52:55.066398",
    "response_time": "2.57",
    "context": "{\"function_name\": \"find_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 92,
    "solution": "def is_undulating(n):\n    # Convert number to string for easy digit comparison\n    num_str = str(n)\n    \n    # If number has less than 3 digits, it cannot be undulating\n    if len(num_str) < 3:\n        return False\n    \n    # Check if digits alternate between increasing and decreasing\n    increasing = num_str[0] < num_str[1]\n    \n    for i in range(1, len(num_str) - 1):\n        # If increasing pattern was expected\n        if increasing:\n            if not (num_str[i] < num_str[i+1]):\n                return False\n        # If decreasing pattern was expected\n        else:\n            if not (num_str[i] > num_str[i+1]):\n                return False\n        \n        # Toggle the pattern\n        increasing = not increasing\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):\n\n### Test\nassert candidate(1212121) == True",
    "timestamp": "2025-10-17T18:53:04.691477",
    "response_time": "9.62",
    "context": "{\"function_name\": \"is_undulating\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 93,
    "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' raised to the power of 'b'\n    \n    Args:\n        a (int/float): Base number \n        b (int): Exponent\n    \n    Returns:\n        int/float: Result of a raised to the power of b\n    \"\"\"\n    return a ** b",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):\n\n### Test\nassert candidate(3,4) == 81",
    "timestamp": "2025-10-17T18:53:07.212359",
    "response_time": "2.52",
    "context": "{\"function_name\": \"power\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 94,
    "solution": "def index_minimum(test_list):\n    \"\"\"\n    Returns the first value of the tuple with the smallest second value.\n    \n    Args:\n        test_list (list): A list of tuples where each tuple contains \n                           a string as first value and a number as second value\n    \n    Returns:\n        str: The first value of the tuple with the smallest second value\n    \"\"\"\n    # Find the tuple with the minimum second value using min() with a key function\n    min_tuple = min(test_list, key=lambda x: x[1])\n    \n    # Return the first value of that tuple\n    return min_tuple[0]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):\n\n### Test\nassert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
    "timestamp": "2025-10-17T18:53:10.264316",
    "response_time": "3.05",
    "context": "{\"function_name\": \"index_minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 95,
    "solution": "def Find_Min_Length(lst):\n    # If the input list is empty, return 0\n    if not lst:\n        return 0\n    \n    # Use min() with a key function to find the length of the smallest list\n    return min(len(sublist) for sublist in lst)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):\n\n### Test\nassert candidate([[1],[1,2]]) == 1",
    "timestamp": "2025-10-17T18:53:15.017545",
    "response_time": "4.75",
    "context": "{\"function_name\": \"Find_Min_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 96,
    "solution": "def divisor(n):\n    \"\"\"\n    Find the number of divisors of a given integer.\n    \n    Args:\n        n (int): The input integer to count divisors for\n    \n    Returns:\n        int: Total number of divisors of the input integer\n    \"\"\"\n    # Handle special case for 0 or negative numbers\n    if n <= 0:\n        return 0\n    \n    # Count divisors by checking from 1 to n\n    divisor_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_count += 1\n    \n    return divisor_count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):\n\n### Test\nassert candidate(15) == 4",
    "timestamp": "2025-10-17T18:53:18.858618",
    "response_time": "3.84",
    "context": "{\"function_name\": \"divisor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 97,
    "solution": "from collections import Counter\n\ndef frequency_lists(list1):\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # Use Counter to count frequency of each element\n    return dict(Counter(flattened_list))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):\n\n### Test\nassert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
    "timestamp": "2025-10-17T18:53:20.955589",
    "response_time": "2.09",
    "context": "{\"function_name\": \"frequency_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 98,
    "solution": "import math\n\ndef multiply_num(numbers):\n    # Check if the list is empty to avoid division by zero\n    if not numbers:\n        return 0\n    \n    # Multiply all numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    # Divide the product by the length of the list\n    return product / len(numbers)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):\n\n### Test\nassert math.isclose(candidate((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:53:23.144316",
    "response_time": "2.19",
    "context": "{\"function_name\": \"multiply_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 99,
    "solution": "def decimal_to_binary(n):\n    # Handle special case of 0\n    if n == 0:\n        return '0'\n    \n    # List to store binary digits\n    binary = []\n    \n    # Convert decimal to binary\n    while n > 0:\n        # Get remainder when divided by 2 (0 or 1)\n        binary.append(str(n % 2))\n        # Integer division by 2\n        n //= 2\n    \n    # Reverse and join the binary digits to form the binary string\n    return ''.join(binary[::-1])",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):\n\n### Test\nassert candidate(8) == '1000'",
    "timestamp": "2025-10-17T18:53:26.236274",
    "response_time": "3.09",
    "context": "{\"function_name\": \"decimal_to_binary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 100,
    "solution": "def next_smallest_palindrome(num):\n    # Start checking from the next number\n    num += 1\n    \n    # Keep incrementing until a palindrome is found\n    while True:\n        # Convert number to string for easy palindrome checking\n        str_num = str(num)\n        \n        # Check if the number is a palindrome\n        if str_num == str_num[::-1]:\n            return num\n        \n        # If not a palindrome, increment and continue searching\n        num += 1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):\n\n### Test\nassert candidate(99)==101",
    "timestamp": "2025-10-17T18:53:31.814907",
    "response_time": "5.58",
    "context": "{\"function_name\": \"next_smallest_palindrome\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 101,
    "solution": "def kth_element(arr, k):\n    # Adjust k to 0-based indexing \n    # Since the problem specifies 1-based indexing\n    return arr[k-1]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):\n\n### Test\nassert candidate([12,3,5,7,19], 2) == 3",
    "timestamp": "2025-10-17T18:53:36.966228",
    "response_time": "5.15",
    "context": "{\"function_name\": \"kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 102,
    "solution": "def snake_to_camel(word):\n    # Split the snake_case string into words\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word\n    camel_words = [word.capitalize() for word in words]\n    \n    # Join the words together\n    return ''.join(camel_words)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):\n\n### Test\nassert candidate('python_program')=='PythonProgram'",
    "timestamp": "2025-10-17T18:53:39.697917",
    "response_time": "2.73",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 103,
    "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m)\n    \n    Args:\n        n (int): Total number of elements\n        m (int): Number of ascents\n    \n    Returns:\n        int: Number of permutations with exactly m ascents\n    \"\"\"\n    # Base cases\n    if m < 0 or m >= n:\n        return 0\n    \n    # Initialize dynamic programming table\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base case: 1 way to arrange 1 element with 0 ascents\n    dp[1][0] = 1\n    \n    # Fill the dynamic programming table\n    for i in range(2, n + 1):\n        for j in range(m + 1):\n            # Recurrence relation for Eulerian numbers\n            dp[i][j] = ((i - j) * dp[i-1][j]) + ((j + 1) * dp[i-1][j-1])\n    \n    return dp[n][m]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):\n\n### Test\nassert candidate(3, 1) == 4",
    "timestamp": "2025-10-17T18:53:48.097994",
    "response_time": "8.40",
    "context": "{\"function_name\": \"eulerian_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 104,
    "solution": "def sort_sublists(input_list):\n    # Create a new list with each sublist sorted\n    return [sorted(sublist) for sublist in input_list]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):\n\n### Test\nassert candidate(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[[\"\"\"green\"\"\", \"\"\"orange\"\"\"], [\"\"\"black\"\"\", \"\"\"white\"\"\"], [\"\"\"black\"\"\", \"\"\"orange\"\"\", \"\"\"white\"\"\"]]",
    "timestamp": "2025-10-17T18:53:52.967778",
    "response_time": "4.87",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 105,
    "solution": "def count(lst):\n    \"\"\"\n    Count the number of True boolean values in the given list.\n    \n    Args:\n        lst (list): A list of boolean values\n    \n    Returns:\n        int: Number of True values in the list\n    \"\"\"\n    return sum(1 for item in lst if item is True)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):\n\n### Test\nassert candidate([True,False,True]) == 2",
    "timestamp": "2025-10-17T18:53:54.872464",
    "response_time": "1.90",
    "context": "{\"function_name\": \"count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 106,
    "solution": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Append the given list to the given tuple.\n    \n    Args:\n        test_list (list): The list to be appended\n        test_tup (tuple): The tuple to append the list to\n    \n    Returns:\n        tuple: A new tuple with the list elements added\n    \"\"\"\n    return test_tup + tuple(test_list)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):\n\n### Test\nassert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
    "timestamp": "2025-10-17T18:53:59.337478",
    "response_time": "4.46",
    "context": "{\"function_name\": \"add_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 108,
    "solution": "def merge_sorted_list(num1, num2, num3):\n    # Combine all three lists\n    merged = num1 + num2 + num3\n    \n    # Sort the combined list in ascending order\n    return sorted(merged)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):\n\n### Test\nassert candidate([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
    "timestamp": "2025-10-17T18:54:01.129377",
    "response_time": "1.79",
    "context": "{\"function_name\": \"merge_sorted_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 109,
    "solution": "def odd_Equivalent(s, n):\n    # Count the number of odd values after rotating the binary string\n    count = 0\n    \n    # Iterate through all possible rotations\n    for i in range(n):\n        # Rotate the string by moving the first character to the end\n        s = s[1:] + s[0]\n        \n        # Convert the rotated binary string to an integer\n        num = int(s, 2)\n        \n        # Check if the number is odd\n        if num % 2 == 1:\n            count += 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):\n\n### Test\nassert candidate(\"011001\",6) == 3",
    "timestamp": "2025-10-17T18:54:07.933320",
    "response_time": "6.80",
    "context": "{\"function_name\": \"odd_Equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 111,
    "solution": "def common_in_nested_lists(nestedlist):\n    # If the nested list is empty, return an empty list\n    if not nestedlist:\n        return []\n    \n    # Convert the first list to a set\n    common_elements = set(nestedlist[0])\n    \n    # Iterate through the remaining lists and find intersection\n    for lst in nestedlist[1:]:\n        common_elements = common_elements.intersection(set(lst))\n    \n    # Return the list of common elements\n    return list(common_elements)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):\n\n### Test\nassert set(candidate([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])",
    "timestamp": "2025-10-17T18:54:10.557777",
    "response_time": "2.62",
    "context": "{\"function_name\": \"common_in_nested_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 113,
    "solution": "def check_integer(text):\n    \"\"\"\n    Check if the given text represents a valid integer.\n    \n    Args:\n        text (str): The string to check\n    \n    Returns:\n        bool: True if the string represents an integer, False otherwise\n    \"\"\"\n    # Check if text is empty\n    if not text:\n        return False\n    \n    # Handle optional sign at the beginning\n    if text[0] in ['+', '-']:\n        text = text[1:]\n    \n    # Check if remaining characters are all digits\n    return text.isdigit()",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):\n\n### Test\nassert candidate(\"python\")==False",
    "timestamp": "2025-10-17T18:54:13.221506",
    "response_time": "2.66",
    "context": "{\"function_name\": \"check_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 115,
    "solution": "def empty_dit(list1):\n    # Check if all dictionaries in the list are empty\n    return all(len(d) == 0 for d in list1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):\n\n### Test\nassert candidate([{},{},{}])==True",
    "timestamp": "2025-10-17T18:54:18.525774",
    "response_time": "5.30",
    "context": "{\"function_name\": \"empty_dit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 116,
    "solution": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \n    Args:\n        nums (tuple): A tuple of positive integers\n    \n    Returns:\n        int: A single integer formed by concatenating the input integers\n    \"\"\"\n    return int(''.join(map(str, nums)))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):\n\n### Test\nassert candidate((1,2,3))==123",
    "timestamp": "2025-10-17T18:54:20.407843",
    "response_time": "1.88",
    "context": "{\"function_name\": \"tuple_to_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 117,
    "solution": "def list_to_float(test_list):\n    \"\"\"\n    Convert all possible elements in a list of lists/tuples to floats\n    \n    Args:\n        test_list (list): List of lists/tuples containing string or numeric values\n    \n    Returns:\n        list: A new list with convertible elements converted to floats\n    \"\"\"\n    return [\n        tuple(float(x) if isinstance(x, str) or isinstance(x, int) else x for x in sublist) \n        for sublist in test_list\n    ]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):\n\n### Test\nassert candidate( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]",
    "timestamp": "2025-10-17T18:54:23.267549",
    "response_time": "2.86",
    "context": "{\"function_name\": \"list_to_float\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 118,
    "solution": "def string_to_list(string):\n    return string.split()",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):\n\n### Test\nassert candidate(\"python programming\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\"]",
    "timestamp": "2025-10-17T18:54:27.023254",
    "response_time": "3.75",
    "context": "{\"function_name\": \"string_to_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 119,
    "solution": "def search(arr):\n    # If array has only one element, return that element\n    if len(arr) == 1:\n        return arr[0]\n    \n    # Check first and last elements separately\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    \n    # Binary search for the unique element\n    left, right = 1, len(arr) - 2\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if mid element is unique\n        if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]:\n            return arr[mid]\n        \n        # Determine which side to search\n        # If mid is even, it should match the next element\n        # If mid is odd, it should match the previous element\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid+1]:\n                left = mid + 2\n            else:\n                right = mid - 2\n        else:\n            if arr[mid] == arr[mid-1]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    \n    # This should never be reached if input is valid\n    return None",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):\n\n### Test\nassert candidate([1,1,2,2,3]) == 3",
    "timestamp": "2025-10-17T18:54:36.067114",
    "response_time": "9.04",
    "context": "{\"function_name\": \"search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 120,
    "solution": "def max_product_tuple(list1):\n    # If the list is empty, return 0\n    if not list1:\n        return 0\n    \n    # Initialize max_product to the absolute product of the first tuple\n    max_product = abs(list1[0][0] * list1[0][1])\n    \n    # Iterate through each tuple in the list\n    for a, b in list1:\n        # Calculate the absolute product of current tuple\n        current_product = abs(a * b)\n        \n        # Update max_product if current_product is larger\n        max_product = max(max_product, current_product)\n    \n    return max_product",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):\n\n### Test\nassert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
    "timestamp": "2025-10-17T18:54:41.765205",
    "response_time": "5.69",
    "context": "{\"function_name\": \"max_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 123,
    "solution": "def amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n    \n    amicable_sum = 0\n    for a in range(2, limit + 1):\n        b = sum_of_divisors(a)\n        if b > a and b <= limit and sum_of_divisors(b) == a:\n            amicable_sum += a + b\n    \n    return amicable_sum",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):\n\n### Test\nassert candidate(999)==504",
    "timestamp": "2025-10-17T18:54:44.657421",
    "response_time": "2.89",
    "context": "{\"function_name\": \"amicable_numbers_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 124,
    "solution": "import math\nimport cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Calculate the angle of a complex number represented by real and imaginary parts.\n    \n    Args:\n        a (float): Real part of the complex number\n        b (float): Imaginary part of the complex number\n    \n    Returns:\n        float: Angle of the complex number in radians\n    \"\"\"\n    # Create a complex number from the given real and imaginary parts\n    z = complex(a, b)\n    \n    # Use cmath.phase() to get the angle in radians\n    return cmath.phase(z)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):\n\n### Test\nassert math.isclose(candidate(0,1j), 1.5707963267948966, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:54:47.828884",
    "response_time": "3.17",
    "context": "{\"function_name\": \"angle_complex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 125,
    "solution": "def find_length(string):\n    max_diff = 0\n    current_diff = 0\n    \n    for char in string:\n        # Treat 0 as +1 and 1 as -1\n        value = 1 if char == '0' else -1\n        \n        # Update current difference and max difference\n        current_diff = max(value, current_diff + value)\n        max_diff = max(max_diff, current_diff)\n    \n    return max_diff",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):\n\n### Test\nassert candidate(\"11000010001\") == 6",
    "timestamp": "2025-10-17T18:54:54.953937",
    "response_time": "7.12",
    "context": "{\"function_name\": \"find_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 126,
    "solution": "def sum(a, b):\n    # Find the common divisors of a and b\n    common_divisors = [divisor for divisor in range(1, min(a, b) + 1) if a % divisor == 0 and b % divisor == 0]\n    \n    # Return the sum of common divisors\n    return sum(common_divisors)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):\n\n### Test\nassert candidate(10,15) == 6",
    "timestamp": "2025-10-17T18:54:57.537189",
    "response_time": "2.58",
    "context": "{\"function_name\": \"sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 127,
    "solution": "def multiply_int(x, y):\n    return x * y",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):\n\n### Test\nassert candidate(10,20)==200",
    "timestamp": "2025-10-17T18:54:58.728186",
    "response_time": "1.19",
    "context": "{\"function_name\": \"multiply_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 128,
    "solution": "def long_words(n, str):\n    # Split the input string into words\n    words = str.split()\n    \n    # Filter words longer than n characters\n    long_word_list = [word for word in words if len(word) > n]\n    \n    return long_word_list",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):\n\n### Test\nassert candidate(3,\"python is a programming language\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\",\"\"\"language\"\"\"]",
    "timestamp": "2025-10-17T18:55:00.580517",
    "response_time": "1.85",
    "context": "{\"function_name\": \"long_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 129,
    "solution": "def magic_square_test(my_matrix):\n    # Check if matrix is square\n    n = len(my_matrix)\n    if any(len(row) != n for row in my_matrix):\n        return False\n    \n    # Calculate expected sum (first row sum)\n    expected_sum = sum(my_matrix[0])\n    \n    # Check row sums\n    for row in my_matrix:\n        if sum(row) != expected_sum:\n            return False\n    \n    # Check column sums\n    for col in range(n):\n        column_sum = sum(my_matrix[row][col] for row in range(n))\n        if column_sum != expected_sum:\n            return False\n    \n    # Check main diagonal sum\n    main_diag_sum = sum(my_matrix[i][i] for i in range(n))\n    if main_diag_sum != expected_sum:\n        return False\n    \n    # Check secondary diagonal sum\n    secondary_diag_sum = sum(my_matrix[i][n-1-i] for i in range(n))\n    if secondary_diag_sum != expected_sum:\n        return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):\n\n### Test\nassert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
    "timestamp": "2025-10-17T18:55:07.723960",
    "response_time": "7.14",
    "context": "{\"function_name\": \"magic_square_test\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 130,
    "solution": "from collections import Counter\n\ndef max_occurrences(nums):\n    # Use Counter to count occurrences of each number\n    frequency_dict = Counter(nums)\n    \n    # Find the item with maximum frequency\n    # If multiple items have the same max frequency, return the first one\n    max_freq_item = max(frequency_dict, key=frequency_dict.get)\n    \n    return max_freq_item",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):\n\n### Test\nassert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2",
    "timestamp": "2025-10-17T18:55:10.009566",
    "response_time": "2.28",
    "context": "{\"function_name\": \"max_occurrences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 131,
    "solution": "def reverse_vowels(str1):\n    # Define vowels (lowercase and uppercase)\n    vowels = set('aeiouAEIOU')\n    \n    # Convert string to list for easier manipulation\n    chars = list(str1)\n    \n    # Use two-pointer approach to swap vowels\n    left, right = 0, len(chars) - 1\n    \n    while left < right:\n        # Move left pointer to first vowel from left\n        while left < right and chars[left] not in vowels:\n            left += 1\n        \n        # Move right pointer to first vowel from right\n        while left < right and chars[right] not in vowels:\n            right -= 1\n        \n        # Swap vowels\n        if left < right:\n            chars[left], chars[right] = chars[right], chars[left]\n            left += 1\n            right -= 1\n    \n    # Convert back to string and return\n    return ''.join(chars)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):\n\n### Test\nassert candidate(\"Python\") == \"Python\"",
    "timestamp": "2025-10-17T18:55:14.152129",
    "response_time": "4.14",
    "context": "{\"function_name\": \"reverse_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 132,
    "solution": "def tup_string(tup1):\n    \"\"\"\n    Convert a tuple of strings to a single concatenated string.\n    \n    Args:\n        tup1 (tuple): A tuple containing string elements\n    \n    Returns:\n        str: A single string created by concatenating all elements in the tuple\n    \"\"\"\n    return ''.join(tup1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):\n\n### Test\nassert candidate((\"\"\"e\"\"\", \"\"\"x\"\"\", \"\"\"e\"\"\", \"\"\"r\"\"\", \"\"\"c\"\"\", \"\"\"i\"\"\", \"\"\"s\"\"\", \"\"\"e\"\"\", \"\"\"s\"\"\"))==(\"exercises\")",
    "timestamp": "2025-10-17T18:55:16.600581",
    "response_time": "2.44",
    "context": "{\"function_name\": \"tup_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 133,
    "solution": "def sum_negativenum(nums):\n    # Filter out negative numbers and sum them\n    return sum(num for num in nums if num < 0)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):\n\n### Test\nassert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
    "timestamp": "2025-10-17T18:55:21.512573",
    "response_time": "4.91",
    "context": "{\"function_name\": \"sum_negativenum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 135,
    "solution": "def hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n    \n    A hexagonal number is a figurate number that extends the concept of triangular and square numbers to the hexagonal grid.\n    The nth hexagonal number is given by the formula: n * (2n - 1)\n    \n    Args:\n        n (int): The position of the hexagonal number to calculate\n    \n    Returns:\n        int: The nth hexagonal number\n    \"\"\"\n    return n * (2 * n - 1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):\n\n### Test\nassert candidate(10) == 190",
    "timestamp": "2025-10-17T18:55:24.191036",
    "response_time": "2.67",
    "context": "{\"function_name\": \"hexagonal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 137,
    "solution": "def zero_count(nums):\n    \"\"\"\n    Calculate the ratio of zeroes to non-zeroes in an array of integers.\n    \n    Args:\n        nums (list): A list of integers\n    \n    Returns:\n        float: Ratio of zeroes to total number of elements in the list\n    \"\"\"\n    if not nums:\n        return 0.0\n    \n    # Count number of zeroes\n    zero_count = sum(1 for num in nums if num == 0)\n    \n    # Calculate ratio\n    return zero_count / len(nums)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):\n\n### Test\nassert math.isclose(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:55:26.639624",
    "response_time": "2.45",
    "context": "{\"function_name\": \"zero_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 138,
    "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    # If n is 0, it cannot be represented as sum of powers of 2\n    if n <= 0:\n        return False\n    \n    # Convert number to binary representation\n    binary = bin(n)[2:]\n    \n    # Check if binary representation has only 1s\n    # This means the number can be represented as sum of powers of 2\n    return all(bit == '1' for bit in binary)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):\n\n### Test\nassert candidate(10) == True",
    "timestamp": "2025-10-17T18:55:33.481234",
    "response_time": "6.84",
    "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 139,
    "solution": "import math\n\ndef circle_circumference(r):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n    \n    Args:\n        r (float): Radius of the circle\n    \n    Returns:\n        float: Circumference of the circle (2 * pi * radius)\n    \"\"\"\n    return 2 * math.pi * r",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):\n\n### Test\nassert math.isclose(candidate(10), 62.830000000000005, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:55:35.504177",
    "response_time": "2.02",
    "context": "{\"function_name\": \"circle_circumference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 140,
    "solution": "def extract_singly(test_list):\n    # Use a set comprehension to flatten the list of lists and create a unique set of numbers\n    return set(num for sublist in test_list for num in sublist)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):\n\n### Test\nassert set(candidate([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])",
    "timestamp": "2025-10-17T18:55:37.196209",
    "response_time": "1.69",
    "context": "{\"function_name\": \"extract_singly\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 141,
    "solution": "def pancake_sort(nums):\n    def flip(arr, k):\n        # Reverse the first k elements of the array\n        left = 0\n        while left < k:\n            arr[left], arr[k] = arr[k], arr[left]\n            left += 1\n            k -= 1\n        return arr\n\n    # Perform pancake sort\n    n = len(nums)\n    for curr_size in range(n, 1, -1):\n        # Find index of maximum element in unsorted portion\n        max_idx = nums.index(max(nums[:curr_size]))\n        \n        # If max element is not at the end, flip it to the beginning\n        if max_idx != curr_size - 1:\n            # If max element is not at the start, flip to bring to start\n            if max_idx != 0:\n                nums = flip(nums, max_idx)\n            \n            # Flip to put max element at the end of current unsorted portion\n            nums = flip(nums, curr_size - 1)\n    \n    return nums",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):\n\n### Test\nassert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
    "timestamp": "2025-10-17T18:55:45.362380",
    "response_time": "8.16",
    "context": "{\"function_name\": \"pancake_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 142,
    "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count the number of items that are identical in the same position across three given lists.\n    \n    Args:\n        list1 (list): First input list\n        list2 (list): Second input list \n        list3 (list): Third input list\n    \n    Returns:\n        int: Number of items that are the same in the same position\n    \"\"\"\n    # Ensure lists are of equal length to avoid index errors\n    min_length = min(len(list1), len(list2), len(list3))\n    \n    # Count items that are identical in the same position\n    return sum(1 for i in range(min_length) \n               if list1[i] == list2[i] == list3[i])",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):\n\n### Test\nassert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
    "timestamp": "2025-10-17T18:55:48.751077",
    "response_time": "3.38",
    "context": "{\"function_name\": \"count_samepair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 143,
    "solution": "def find_lists(Input):\n    \"\"\"\n    Find the number of lists present in the given tuple.\n    \n    Args:\n        Input (tuple): A tuple that may contain lists\n    \n    Returns:\n        int: Number of lists in the input tuple\n    \"\"\"\n    return sum(1 for item in Input if isinstance(item, list))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):\n\n### Test\nassert candidate(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
    "timestamp": "2025-10-17T18:55:50.868068",
    "response_time": "2.11",
    "context": "{\"function_name\": \"find_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 145,
    "solution": "def max_Abs_Diff(arr):\n    # If array is empty, return 0\n    if not arr:\n        return 0\n    \n    # Find the minimum and maximum elements in the array\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Return the absolute difference between max and min\n    return abs(max_val - min_val)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):\n\n### Test\nassert candidate((2,1,5,3)) == 4",
    "timestamp": "2025-10-17T18:55:57.447159",
    "response_time": "6.57",
    "context": "{\"function_name\": \"max_Abs_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 160,
    "solution": "def find_solution(a, b, n):\n    # Use extended Euclidean algorithm to find GCD and coefficients\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        \n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        \n        return gcd, x, y\n    \n    # Find GCD and coefficients\n    gcd, x, y = extended_gcd(a, b)\n    \n    # Check if solution exists\n    if n % gcd != 0:\n        return None\n    \n    # Scale solution\n    scale = n // gcd\n    x *= scale\n    y *= scale\n    \n    return (x, y)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):\n\n### Test\nassert candidate(2, 3, 7) == (2, 1)",
    "timestamp": "2025-10-17T18:56:04.466647",
    "response_time": "7.01",
    "context": "{\"function_name\": \"find_solution\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 161,
    "solution": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from list1 that are present in list2.\n    \n    Args:\n        list1 (list): The original list to remove elements from\n        list2 (list): The list containing elements to be removed\n    \n    Returns:\n        list: A new list with elements from list1 that are not in list2\n    \"\"\"\n    return [item for item in list1 if item not in list2]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]",
    "timestamp": "2025-10-17T18:56:07.076770",
    "response_time": "2.61",
    "context": "{\"function_name\": \"remove_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 162,
    "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        current_term = n - 2 * i\n        if current_term > 0:\n            total += current_term\n    return total",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):\n\n### Test\nassert candidate(6) == 12",
    "timestamp": "2025-10-17T18:56:13.405144",
    "response_time": "6.32",
    "context": "{\"function_name\": \"sum_series\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 163,
    "solution": "import math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon\n    \n    Args:\n    s (int): Number of sides in the polygon\n    l (float): Length of each side\n    \n    Returns:\n    float: Area of the polygon\n    \"\"\"\n    # Formula for area of a regular polygon:\n    # A = (s * l^2) / (4 * tan(\u03c0/s))\n    area = (s * l**2) / (4 * math.tan(math.pi / s))\n    return area",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):\n\n### Test\nassert math.isclose(candidate(4, 20), 400., rel_tol=0.001)",
    "timestamp": "2025-10-17T18:56:16.436277",
    "response_time": "3.03",
    "context": "{\"function_name\": \"area_polygon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 164,
    "solution": "def are_equivalent(n, m):\n    # Function to calculate sum of divisors for a number\n    def sum_of_divisors(num):\n        # Find all divisors and sum them\n        return sum(i for i in range(1, num + 1) if num % i == 0)\n    \n    # Compare the sum of divisors for both numbers\n    return sum_of_divisors(n) == sum_of_divisors(m)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):\n\n### Test\nassert candidate(36, 57) == False",
    "timestamp": "2025-10-17T18:56:23.509221",
    "response_time": "7.07",
    "context": "{\"function_name\": \"are_equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 165,
    "solution": "def count_char_position(str1):\n    # Convert string to lowercase for case-insensitive comparison\n    str1 = str1.lower()\n    \n    # Define the lowercase alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Count characters that match their position in the alphabet\n    count = 0\n    for i in range(min(len(str1), len(alphabet))):\n        if str1[i] == alphabet[i]:\n            count += 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):\n\n### Test\nassert candidate(\"xbcefg\") == 2",
    "timestamp": "2025-10-17T18:56:26.302406",
    "response_time": "2.79",
    "context": "{\"function_name\": \"count_char_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 166,
    "solution": "def find_even_pair(A):\n    # Count the number of pairs that xor to an even number\n    count = 0\n    n = len(A)\n    \n    # Check all possible pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            # If xor of the pair is even, increment count\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):\n\n### Test\nassert candidate([5, 4, 7, 2, 1]) == 4",
    "timestamp": "2025-10-17T18:56:32.010152",
    "response_time": "5.70",
    "context": "{\"function_name\": \"find_even_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 167,
    "solution": "def next_power_of_2(n):\n    # If n is 0, return 1 (first power of 2)\n    if n == 0:\n        return 1\n    \n    # Decrement n by 1 to handle cases where n is already a power of 2\n    n -= 1\n    \n    # Use bit manipulation to find the next power of 2\n    # This works by setting all bits to the right of the most significant bit\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    \n    # Add 1 to get the next power of 2\n    return n + 1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):\n\n### Test\nassert candidate(0) == 1",
    "timestamp": "2025-10-17T18:56:35.943946",
    "response_time": "3.93",
    "context": "{\"function_name\": \"next_power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 168,
    "solution": "def frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number x in the list a.\n    \n    Args:\n        a (list): The input list to search\n        x: The number to count occurrences of\n    \n    Returns:\n        int: Number of times x appears in the list\n    \"\"\"\n    return a.count(x)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):\n\n### Test\nassert candidate([1,2,3], 4) == 0",
    "timestamp": "2025-10-17T18:56:38.729775",
    "response_time": "2.78",
    "context": "{\"function_name\": \"frequency\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 170,
    "solution": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Find the sum of numbers in a list within a range specified by two indices (inclusive).\n    \n    Args:\n        list1 (list): Input list of numbers\n        m (int): Starting index (inclusive)\n        n (int): Ending index (inclusive)\n    \n    Returns:\n        int: Sum of numbers between indices m and n\n    \"\"\"\n    return sum(list1[m:n+1])",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):\n\n### Test\nassert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29",
    "timestamp": "2025-10-17T18:56:41.360521",
    "response_time": "2.63",
    "context": "{\"function_name\": \"sum_range_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 171,
    "solution": "def perimeter_pentagon(a):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of one side.\n    \n    Args:\n        a (float): Length of one side of the pentagon\n    \n    Returns:\n        float: Total perimeter of the pentagon\n    \"\"\"\n    return 5 * a",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):\n\n### Test\nassert candidate(5) == 25",
    "timestamp": "2025-10-17T18:56:43.193041",
    "response_time": "1.83",
    "context": "{\"function_name\": \"perimeter_pentagon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 172,
    "solution": "def count_occurance(s):\n    \"\"\"\n    Count the number of occurrences of the substring 'std' in the given string.\n    \n    Args:\n        s (str): Input string to search for 'std' occurrences\n    \n    Returns:\n        int: Number of times 'std' appears in the string\n    \"\"\"\n    return s.count('std')",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):\n\n### Test\nassert candidate(\"letstdlenstdporstd\") == 3\nassert candidate(\"truststdsolensporsd\") == 1",
    "timestamp": "2025-10-17T18:56:45.386609",
    "response_time": "2.19",
    "context": "{\"function_name\": \"count_occurance\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 222,
    "solution": "def check_type(test_tuple):\n    # If tuple is empty or has only one element, return True\n    if len(test_tuple) <= 1:\n        return True\n    \n    # Get the type of the first element\n    first_type = type(test_tuple[0])\n    \n    # Check if all elements have the same type as the first element\n    return all(isinstance(item, first_type) for item in test_tuple)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):\n\n### Test\nassert candidate((5, 6, 7, 3, 5, 6) ) == True",
    "timestamp": "2025-10-17T18:56:50.521625",
    "response_time": "5.13",
    "context": "{\"function_name\": \"check_type\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 223,
    "solution": "def binary_search(arr, n, x):\n    # Find the first occurrence of x using binary search\n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            # Check if this is the first occurrence of x\n            first_occurrence = mid\n            while first_occurrence > 0 and arr[first_occurrence - 1] == x:\n                first_occurrence -= 1\n            \n            # Check if x occurs more than n/2 times\n            count = 0\n            while first_occurrence < n and arr[first_occurrence] == x:\n                count += 1\n                first_occurrence += 1\n            \n            return count > n // 2\n        \n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):\n\n### Test\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
    "timestamp": "2025-10-17T18:56:54.547071",
    "response_time": "4.02",
    "context": "{\"function_name\": \"binary_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 224,
    "solution": "def count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits (1's) in the binary representation of a given number.\n    \n    Args:\n        n (int): The input number to count set bits\n    \n    Returns:\n        int: Number of set bits in the binary representation of n\n    \"\"\"\n    # Initialize bit count\n    count = 0\n    \n    # Iterate through bits while number is non-zero\n    while n:\n        # Check if least significant bit is 1\n        count += n & 1\n        \n        # Right shift the number by 1 bit\n        n >>= 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):\n\n### Test\nassert candidate(2) == 1",
    "timestamp": "2025-10-17T18:56:57.591958",
    "response_time": "3.04",
    "context": "{\"function_name\": \"count_Set_Bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 226,
    "solution": "def odd_values_string(str):\n    return str[::2]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to remove the characters which have odd index values of a given string.\n\n### Signature\ndef odd_values_string(str):\n\n### Test\nassert candidate('abcdef') == 'ace'\nassert candidate('python') == 'pto'",
    "timestamp": "2025-10-17T18:57:02.072902",
    "response_time": "4.48",
    "context": "{\"function_name\": \"odd_values_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 227,
    "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Find the minimum of three numbers.\n    \n    Args:\n        a (int/float): First number\n        b (int/float): Second number\n        c (int/float): Third number\n    \n    Returns:\n        int/float: The smallest number among a, b, and c\n    \"\"\"\n    return min(a, b, c)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find minimum of three numbers.\n\n### Signature\ndef min_of_three(a,b,c):\n\n### Test\nassert candidate(10,20,0)==0",
    "timestamp": "2025-10-17T18:57:04.454627",
    "response_time": "2.38",
    "context": "{\"function_name\": \"min_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 228,
    "solution": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a mask with 1s in the range [l, r]\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    \n    # Check if any bits are set in the given range\n    return (n & mask) == 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether all the bits are unset in the given range or not.\n\n### Signature\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n\n### Test\nassert candidate(4,1,2) == True",
    "timestamp": "2025-10-17T18:57:11.468021",
    "response_time": "7.01",
    "context": "{\"function_name\": \"all_Bits_Set_In_The_Given_Range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 229,
    "solution": "def re_arrange_array(arr, n):\n    # Create two lists to store negative and positive elements\n    negatives = []\n    positives = []\n    \n    # Iterate through the first n elements of the array\n    for i in range(n):\n        # Separate negative and positive elements while preserving order\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    # Combine negative and positive elements\n    return negatives + positives",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n### Signature\ndef re_arrange_array(arr, n):\n\n### Test\nassert candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
    "timestamp": "2025-10-17T18:57:16.379394",
    "response_time": "4.91",
    "context": "{\"function_name\": \"re_arrange_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 230,
    "solution": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n### Signature\ndef replace_blank(str1,char):\n\n### Test\nassert candidate(\"hello people\",\"\"\"@\"\"\")==(\"hello@people\")",
    "timestamp": "2025-10-17T18:57:19.449718",
    "response_time": "3.07",
    "context": "{\"function_name\": \"replace_blank\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 232,
    "solution": "def larg_nnum(list1, n):\n    # Sort the list in descending order and return the first n elements\n    return sorted(list1, reverse=True)[:n]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n### Signature\ndef larg_nnum(list1,n):\n\n### Test\nassert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])",
    "timestamp": "2025-10-17T18:57:20.921776",
    "response_time": "1.47",
    "context": "{\"function_name\": \"larg_nnum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 233,
    "solution": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n    \n    Args:\n    r (float): Radius of the cylinder\n    h (float): Height of the cylinder\n    \n    Returns:\n    float: Lateral surface area of the cylinder (2 * \u03c0 * r * h)\n    \"\"\"\n    return 2 * math.pi * r * h",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cylinder.\n\n### Signature\ndef lateralsuface_cylinder(r,h):\n\n### Test\nassert math.isclose(candidate(10,5), 314.15000000000003, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:57:23.021501",
    "response_time": "2.09",
    "context": "{\"function_name\": \"lateralsuface_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 234,
    "solution": "def volume_cube(l):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n    \n    Args:\n        l (int or float): Length of one side of the cube\n    \n    Returns:\n        int or float: Volume of the cube (side length cubed)\n    \"\"\"\n    return l ** 3",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the volume of a cube given its side length.\n\n### Signature\ndef volume_cube(l):\n\n### Test\nassert candidate(3)==27",
    "timestamp": "2025-10-17T18:57:25.170761",
    "response_time": "2.14",
    "context": "{\"function_name\": \"volume_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 235,
    "solution": "def even_bit_set_number(n):\n    # Iterate through each bit position\n    for i in range(0, 32, 2):  # Check even bit positions (0, 2, 4, ...)\n        # Set the even bit to 1 using bitwise OR\n        n |= (1 << i)\n    \n    return n",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to set all even bits of a given number.\n\n### Signature\ndef even_bit_set_number(n):\n\n### Test\nassert candidate(10) == 10",
    "timestamp": "2025-10-17T18:57:30.891268",
    "response_time": "5.72",
    "context": "{\"function_name\": \"even_bit_set_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 237,
    "solution": "def check_occurences(test_list):\n    # Create a dictionary to store the count of each unique tuple\n    occurrence_dict = {}\n    \n    # Iterate through each tuple in the input list\n    for tuple_item in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        # If not, initialize its count to 1\n        occurrence_dict[tuple_item] = occurrence_dict.get(tuple_item, 0) + 1\n    \n    return occurrence_dict",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n### Signature\ndef check_occurences(test_list):\n\n### Test\nassert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
    "timestamp": "2025-10-17T18:57:33.382206",
    "response_time": "2.49",
    "context": "{\"function_name\": \"check_occurences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 238,
    "solution": "def number_of_substrings(str):\n    # Total number of non-empty substrings is n*(n+1)/2\n    # where n is the length of the string\n    n = len(str)\n    return n * (n + 1) // 2",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of non-empty substrings of a given string.\n\n### Signature\ndef number_of_substrings(str):\n\n### Test\nassert candidate(\"abc\") == 6",
    "timestamp": "2025-10-17T18:57:39.503492",
    "response_time": "6.12",
    "context": "{\"function_name\": \"number_of_substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 239,
    "solution": "def get_total_number_of_sequences(m, n):\n    # Create a 2D DP table to store the number of sequences\n    # dp[i][j] represents the number of sequences of length j ending with number i\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Initialize base case: sequences of length 1\n    for i in range(1, m + 1):\n        dp[i][1] = 1\n    \n    # Build the DP table\n    for j in range(2, n + 1):  # sequence length\n        for i in range(1, m + 1):  # current number\n            # Find valid previous numbers that satisfy the condition\n            for k in range(1, i // 2 + 1):\n                dp[i][j] += dp[k][j-1]\n    \n    # Sum up all possible sequences of length n\n    return sum(dp[i][n] for i in range(1, m + 1))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n### Signature\ndef get_total_number_of_sequences(m,n):\n\n### Test\nassert candidate(10, 4) == 4",
    "timestamp": "2025-10-17T18:57:48.224117",
    "response_time": "8.72",
    "context": "{\"function_name\": \"get_total_number_of_sequences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 240,
    "solution": "def replace_list(list1, list2):\n    # Remove the last element from list1\n    list1 = list1[:-1]\n    \n    # Extend list1 with all elements from list2\n    list1.extend(list2)\n    \n    return list1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\n### Signature\ndef replace_list(list1,list2):\n\n### Test\nassert candidate([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
    "timestamp": "2025-10-17T18:57:50.059965",
    "response_time": "1.83",
    "context": "{\"function_name\": \"replace_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 242,
    "solution": "def count_charac(str1):\n    \"\"\"\n    Count the total number of characters in a given string.\n    \n    Args:\n        str1 (str): Input string to count characters\n    \n    Returns:\n        int: Total number of characters in the string\n    \"\"\"\n    return len(str1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the total number of characters in a string.\n\n### Signature\ndef count_charac(str1):\n\n### Test\nassert candidate(\"python programming\")==18",
    "timestamp": "2025-10-17T18:57:51.824964",
    "response_time": "1.76",
    "context": "{\"function_name\": \"count_charac\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 244,
    "solution": "import math\n\ndef next_Perfect_Square(N):\n    # Find the square root of the input number and round it up\n    root = math.ceil(math.sqrt(N))\n    \n    # Keep incrementing the root until we find a perfect square greater than N\n    while True:\n        square = root * root\n        if square > N:\n            return square\n        root += 1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the next perfect square greater than a given number.\n\n### Signature\ndef next_Perfect_Square(N):\n\n### Test\nassert candidate(35) == 36",
    "timestamp": "2025-10-17T18:57:54.106086",
    "response_time": "2.28",
    "context": "{\"function_name\": \"next_Perfect_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 245,
    "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    # First, compute increasing subsequence sums from left to right\n    increasing_sum = arr.copy()\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increasing_sum[i] = max(increasing_sum[i], increasing_sum[j] + arr[i])\n    \n    # Then, compute decreasing subsequence sums from right to left\n    decreasing_sum = arr.copy()\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                decreasing_sum[i] = max(decreasing_sum[i], decreasing_sum[j] + arr[i])\n    \n    # Find the maximum bitonic subsequence sum\n    max_bitonic_sum = 0\n    for i in range(n):\n        # Subtract arr[i] to avoid counting it twice\n        max_bitonic_sum = max(max_bitonic_sum, increasing_sum[i] + decreasing_sum[i] - arr[i])\n    \n    return max_bitonic_sum",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\n### Signature\ndef max_sum(arr):\n\n### Test\nassert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194",
    "timestamp": "2025-10-17T18:58:02.874232",
    "response_time": "8.76",
    "context": "{\"function_name\": \"max_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 246,
    "solution": "import math\n\ndef babylonian_squareroot(number):\n    \"\"\"\n    Compute square root of a number using the Babylonian method (Newton-Raphson method)\n    \n    Args:\n        number (float): Positive number to find square root of\n    \n    Returns:\n        float: Approximate square root of the input number\n    \"\"\"\n    # Handle edge cases\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of negative number\")\n    \n    if number == 0:\n        return 0\n    \n    # Initial guess is half the number\n    guess = number / 2\n    \n    # Iterate to improve approximation\n    for _ in range(10):  # Usually converges quickly\n        next_guess = 0.5 * (guess + number / guess)\n        \n        # If the guess doesn't change significantly, return it\n        if math.isclose(guess, next_guess, rel_tol=1e-10):\n            return next_guess\n        \n        guess = next_guess\n    \n    return guess",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function for computing square roots using the babylonian method.\n\n### Signature\ndef babylonian_squareroot(number):\n\n### Test\nassert math.isclose(candidate(10), 3.162277660168379, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:58:07.308234",
    "response_time": "4.43",
    "context": "{\"function_name\": \"babylonian_squareroot\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 247,
    "solution": "def lps(str):\n    # Get the length of the input string\n    n = len(str)\n    \n    # Create a 2D table to store lengths of palindromic subsequences\n    # dp[i][j] will store the length of longest palindromic subsequence \n    # in substring str[i:j+1]\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the table diagonally upwards\n    # cl is the length of substring\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            \n            # If characters match and length is 2\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            \n            # If characters match\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            \n            # If characters don't match\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    # Return the length of longest palindromic subsequence \n    # which is stored in dp[0][n-1]\n    return dp[0][n-1]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n\n### Signature\ndef lps(str):\n\n### Test\nassert candidate(\"TENS FOR TENS\") == 5",
    "timestamp": "2025-10-17T18:58:17.557534",
    "response_time": "10.24",
    "context": "{\"function_name\": \"lps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 248,
    "solution": "import math\n\ndef harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \n    The harmonic sum is defined as the sum of reciprocals of the first n-1 positive integers.\n    \n    Args:\n        n (int): The upper limit of the harmonic sum calculation\n    \n    Returns:\n        float: The harmonic sum of n-1\n    \"\"\"\n    return sum(1/i for i in range(1, n))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in an integer n and calculates the harmonic sum of n-1.\n\n### Signature\ndef harmonic_sum(n):\n\n### Test\nassert math.isclose(candidate(7), 2.5928571428571425, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:58:20.152175",
    "response_time": "2.59",
    "context": "{\"function_name\": \"harmonic_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 249,
    "solution": "def intersection_array(array_nums1, array_nums2):\n    # Convert arrays to sets for efficient intersection\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Find the intersection and convert back to a sorted list\n    return sorted(list(set1.intersection(set2)))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the intersection of two arrays.\n\n### Signature\ndef intersection_array(array_nums1,array_nums2):\n\n### Test\nassert candidate([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
    "timestamp": "2025-10-17T18:58:22.305288",
    "response_time": "2.15",
    "context": "{\"function_name\": \"intersection_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 250,
    "solution": "def count_X(tup, x):\n    \"\"\"\n    Count the number of occurrences of element x in the given tuple\n    \n    Args:\n        tup (tuple): Input tuple to search through\n        x: Element to count occurrences of\n    \n    Returns:\n        int: Number of times x appears in the tuple\n    \"\"\"\n    return tup.count(x)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\n### Signature\ndef count_X(tup, x):\n\n### Test\nassert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
    "timestamp": "2025-10-17T18:58:24.435122",
    "response_time": "2.12",
    "context": "{\"function_name\": \"count_X\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 251,
    "solution": "def insert_element(list_input, element):\n    result = []\n    for item in list_input:\n        result.append(element)\n        result.append(item)\n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\n### Signature\ndef insert_element(list,element):\n\n### Test\nassert candidate(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']",
    "timestamp": "2025-10-17T18:58:26.285944",
    "response_time": "1.85",
    "context": "{\"function_name\": \"insert_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 252,
    "solution": "import math\nimport cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert a complex number to polar coordinates (r, theta)\n    \n    Args:\n        numbers (complex): A complex number\n    \n    Returns:\n        tuple: A tuple containing magnitude (r) and angle (theta) in radians\n    \"\"\"\n    # If input is a real number, convert it to a complex number\n    if not isinstance(numbers, complex):\n        numbers = complex(numbers)\n    \n    # Calculate magnitude (r) using absolute value\n    r = abs(numbers)\n    \n    # Calculate angle (theta) using phase/argument \n    theta = cmath.phase(numbers)\n    \n    return (r, theta)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to convert complex numbers to polar coordinates.\n\n### Signature\ndef convert(numbers):\n\n### Test\nassert candidate(1) == (1.0, 0.0)",
    "timestamp": "2025-10-17T18:58:29.509476",
    "response_time": "3.22",
    "context": "{\"function_name\": \"convert\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 253,
    "solution": "def count_integer(list1):\n    return sum(1 for item in list1 if isinstance(item, int))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that returns the number of integer elements in a given list.\n\n### Signature\ndef count_integer(list1):\n\n### Test\nassert candidate([1,2,'abc',1.2]) == 2",
    "timestamp": "2025-10-17T18:58:30.797176",
    "response_time": "1.28",
    "context": "{\"function_name\": \"count_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 255,
    "solution": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\n### Signature\ndef combinations_colors(l, n):\n\n### Test\nassert candidate( [\"Red\",\"Green\",\"Blue\"],1)==[(\"\"\"Red\"\"\",), (\"\"\"Green\"\"\",), (\"\"\"Blue\"\"\",)]",
    "timestamp": "2025-10-17T18:58:35.830116",
    "response_time": "5.03",
    "context": "{\"function_name\": \"combinations_colors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 256,
    "solution": "def count_Primes_nums(n):\n    # Handle edge cases where n is less than 2\n    if n <= 2:\n        return 0\n    \n    # Create a boolean array \"is_prime[0..n]\" and initialize\n    # all entries it as true. A value in is_prime[i] will\n    # finally be false if i is Not a prime, else true.\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    # Use Sieve of Eratosthenes to mark non-primes\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            # Mark multiples of i as non-prime\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    # Count the number of primes\n    return sum(is_prime)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n### Signature\ndef count_Primes_nums(n):\n\n### Test\nassert candidate(5) == 2",
    "timestamp": "2025-10-17T18:58:43.557163",
    "response_time": "7.72",
    "context": "{\"function_name\": \"count_Primes_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 257,
    "solution": "def swap_numbers(a, b):\n    return (b, a)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\n### Signature\ndef swap_numbers(a,b):\n\n### Test\nassert candidate(10,20)==(20,10)",
    "timestamp": "2025-10-17T18:58:44.749719",
    "response_time": "1.19",
    "context": "{\"function_name\": \"swap_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 259,
    "solution": "def maximize_elements(test_tup1, test_tup2):\n    # Use zip to pair corresponding tuples from both input tuples\n    # max() with key=None compares tuples element-wise\n    return tuple(max(pair) for pair in zip(test_tup1, test_tup2))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to maximize the given two tuples.\n\n### Signature\ndef maximize_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
    "timestamp": "2025-10-17T18:58:51.347735",
    "response_time": "6.59",
    "context": "{\"function_name\": \"maximize_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 260,
    "solution": "def newman_prime(n):\n    \"\"\"\n    Find the nth Newman-Shanks-Williams prime number.\n    \n    The NSW prime sequence is defined recursively:\n    NSW(0) = 2\n    NSW(1) = 3\n    NSW(k) = NSW(k-1)^2 - NSW(k-1) + 1 for k >= 2\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    \n    # Initialize first two primes\n    primes = [2, 3]\n    \n    # Generate NSW primes until we reach the nth prime\n    while len(primes) <= n:\n        next_prime = primes[-1]**2 - primes[-1] + 1\n        primes.append(next_prime)\n    \n    return primes[n]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n### Signature\ndef newman_prime(n):\n\n### Test\nassert candidate(3) == 7",
    "timestamp": "2025-10-17T18:58:59.389078",
    "response_time": "8.04",
    "context": "{\"function_name\": \"newman_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 261,
    "solution": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Performs element-wise division between two tuples.\n    \n    Args:\n        test_tup1 (tuple): First input tuple of numbers\n        test_tup2 (tuple): Second input tuple of numbers\n    \n    Returns:\n        tuple: A new tuple with each element of test_tup1 divided by corresponding \n               element of test_tup2\n    \"\"\"\n    return tuple(a // b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n### Signature\ndef division_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
    "timestamp": "2025-10-17T18:59:02.175312",
    "response_time": "2.78",
    "context": "{\"function_name\": \"division_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 262,
    "solution": "def split_two_parts(list1, L):\n    \"\"\"\n    Splits the input list into two parts based on the given length L.\n    \n    Args:\n        list1 (list): The input list to be split\n        L (int): The length of the first part of the list\n    \n    Returns:\n        tuple: A tuple containing two lists - first part of length L and the remaining list\n    \"\"\"\n    # Check if L is valid (non-negative and not exceeding list length)\n    if L < 0 or L > len(list1):\n        raise ValueError(\"Invalid length for splitting the list\")\n    \n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\n### Signature\ndef split_two_parts(list1, L):\n\n### Test\nassert candidate([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
    "timestamp": "2025-10-17T18:59:05.612437",
    "response_time": "3.43",
    "context": "{\"function_name\": \"split_two_parts\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 264,
    "solution": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog years.\n    \n    In this calculation:\n    - First two years of a dog's life count as 10.5 years each\n    - Each subsequent year counts as 4 years\n    \n    Args:\n        h_age (int): Human age of the dog\n    \n    Returns:\n        int: Dog's age in dog years\n    \"\"\"\n    if h_age <= 0:\n        return 0\n    \n    if h_age <= 2:\n        return int(h_age * 10.5)\n    \n    # First two years count as 21 (10.5 * 2)\n    # Each subsequent year counts as 4 dog years\n    return int(21 + (h_age - 2) * 4)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate a dog's age in dog's years.\n\n### Signature\ndef dog_age(h_age):\n\n### Test\nassert candidate(12)==61",
    "timestamp": "2025-10-17T18:59:09.404468",
    "response_time": "3.79",
    "context": "{\"function_name\": \"dog_age\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 265,
    "solution": "def list_split(S, step):\n    # Calculate the number of resulting sublists\n    num_sublists = min((len(S) + step - 1) // step, step)\n    \n    # Create the result list to store sublists\n    result = [[] for _ in range(num_sublists)]\n    \n    # Iterate through the original list and distribute elements\n    for i, item in enumerate(S):\n        result[i % num_sublists].append(item)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\n### Signature\ndef list_split(S, step):\n\n### Test\nassert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]",
    "timestamp": "2025-10-17T18:59:11.884611",
    "response_time": "2.47",
    "context": "{\"function_name\": \"list_split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 266,
    "solution": "def lateralsurface_cube(l):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \n    The lateral surface area is the sum of the areas of the 4 vertical faces of the cube,\n    excluding the top and bottom faces.\n    \n    Args:\n        l (float/int): Length of one side of the cube\n    \n    Returns:\n        float/int: Lateral surface area of the cube\n    \"\"\"\n    return 4 * l * l",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cube given its side length.\n\n### Signature\ndef lateralsurface_cube(l):\n\n### Test\nassert candidate(5)==100",
    "timestamp": "2025-10-17T18:59:14.584986",
    "response_time": "2.70",
    "context": "{\"function_name\": \"lateralsurface_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 267,
    "solution": "def square_Sum(n):\n    \"\"\"\n    Calculate the sum of squares of the first n odd natural numbers.\n    \n    Args:\n        n (int): Number of odd natural numbers to consider\n    \n    Returns:\n        int: Sum of squares of the first n odd natural numbers\n    \"\"\"\n    # Initialize sum\n    total = 0\n    \n    # Iterate through first n odd numbers\n    for i in range(n):\n        # Calculate the ith odd number (1, 3, 5, 7, ...)\n        odd_num = 2 * i + 1\n        \n        # Add square of the odd number to total\n        total += odd_num ** 2\n    \n    return total",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n### Signature\ndef square_Sum(n):\n\n### Test\nassert candidate(2) == 10",
    "timestamp": "2025-10-17T18:59:17.926896",
    "response_time": "3.34",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 268,
    "solution": "def find_star_num(n):\n    \"\"\"\n    Calculate the n'th star number.\n    \n    A star number follows the pattern: n * (6 * n - 5)\n    \n    Args:\n        n (int): The position of the star number to calculate\n    \n    Returns:\n        int: The n'th star number\n    \"\"\"\n    return n * (6 * n - 5)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the n'th star number.\n\n### Signature\ndef find_star_num(n):\n\n### Test\nassert candidate(3) == 37",
    "timestamp": "2025-10-17T18:59:23.727009",
    "response_time": "5.80",
    "context": "{\"function_name\": \"find_star_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 269,
    "solution": "def ascii_value(k):\n    \"\"\"\n    Returns the ASCII value of the given character.\n    \n    Args:\n        k (str): A single character\n    \n    Returns:\n        int: The ASCII value of the character\n    \"\"\"\n    return ord(k)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the ascii value of a character.\n\n### Signature\ndef ascii_value(k):\n\n### Test\nassert candidate('A')==65",
    "timestamp": "2025-10-17T18:59:25.657956",
    "response_time": "1.92",
    "context": "{\"function_name\": \"ascii_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 270,
    "solution": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Find the sum of even numbers located at even indices in the list.\n    \n    Args:\n        arr (list): Input list of integers\n    \n    Returns:\n        int: Sum of even numbers at even indices (0, 2, 4, ...)\n    \"\"\"\n    return sum(num for index, num in enumerate(arr) if index % 2 == 0 and num % 2 == 0)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sum of even numbers at even positions of a list.\n\n### Signature\ndef sum_even_and_even_index(arr):\n\n### Test\nassert candidate([5, 6, 12, 1, 18, 8]) == 30",
    "timestamp": "2025-10-17T18:59:28.257597",
    "response_time": "2.59",
    "context": "{\"function_name\": \"sum_even_and_even_index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 271,
    "solution": "def even_Power_Sum(n):\n    \"\"\"\n    Calculate the sum of the first n even natural numbers raised to the fifth power.\n    \n    Args:\n        n (int): Number of even natural numbers to consider\n    \n    Returns:\n        int: Sum of the first n even natural numbers raised to the fifth power\n    \"\"\"\n    # Initialize sum\n    total = 0\n    \n    # Iterate through first n even natural numbers\n    for i in range(1, n+1):\n        # Calculate the even number (2, 4, 6, 8, ...)\n        even_num = 2 * i\n        \n        # Raise to the fifth power and add to total\n        total += even_num ** 5\n    \n    return total",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n### Signature\ndef even_Power_Sum(n):\n\n### Test\nassert candidate(2) == 1056",
    "timestamp": "2025-10-17T18:59:31.381326",
    "response_time": "3.12",
    "context": "{\"function_name\": \"even_Power_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 272,
    "solution": "def rear_extract(test_list):\n    \"\"\"\n    Extract the last element from each tuple in the input list.\n    \n    Args:\n        test_list (list): A list of tuples\n    \n    Returns:\n        list: A list containing the last element of each tuple\n    \"\"\"\n    return [tup[-1] for tup in test_list]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n### Signature\ndef rear_extract(test_list):\n\n### Test\nassert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
    "timestamp": "2025-10-17T18:59:33.275225",
    "response_time": "1.89",
    "context": "{\"function_name\": \"rear_extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 273,
    "solution": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Subtract elements of the second tuple from the first tuple element-wise.\n    \n    Args:\n        test_tup1 (tuple): First input tuple \n        test_tup2 (tuple): Second input tuple to subtract from first tuple\n    \n    Returns:\n        tuple: A new tuple with element-wise subtraction\n    \"\"\"\n    # Check if tuples are of same length \n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of equal length\")\n    \n    # Use tuple comprehension to subtract corresponding elements\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n### Signature\ndef substract_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
    "timestamp": "2025-10-17T18:59:36.456326",
    "response_time": "3.18",
    "context": "{\"function_name\": \"substract_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 274,
    "solution": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    # Initialize sum of even index binomial coefficients\n    total_sum = 0\n    \n    # Iterate through even indices from 0 to n\n    for k in range(0, n+1, 2):\n        # Calculate binomial coefficient C(n,k)\n        coeff = math.comb(n, k)\n        \n        # Add the coefficient to the total sum\n        total_sum += coeff\n    \n    return total_sum",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n### Signature\ndef even_binomial_Coeff_Sum( n):\n\n### Test\nassert candidate(4) == 8",
    "timestamp": "2025-10-17T18:59:43.413713",
    "response_time": "6.95",
    "context": "{\"function_name\": \"even_binomial_Coeff_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 276,
    "solution": "import math\n\ndef volume_cylinder(r, h):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n    \n    Volume of a cylinder is calculated using the formula: V = \u03c0 * r\u00b2 * h\n    \n    Args:\n        r (float): Radius of the cylinder\n        h (float): Height of the cylinder\n    \n    Returns:\n        float: Volume of the cylinder\n    \"\"\"\n    return math.pi * r**2 * h",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n\n### Signature\ndef volume_cylinder(r,h):\n\n### Test\nassert math.isclose(candidate(10,5), 1570.7500000000002, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:59:45.999528",
    "response_time": "2.58",
    "context": "{\"function_name\": \"volume_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 277,
    "solution": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n### Signature\ndef dict_filter(dict,n):\n\n### Test\nassert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
    "timestamp": "2025-10-17T18:59:47.363619",
    "response_time": "1.36",
    "context": "{\"function_name\": \"dict_filter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 278,
    "solution": "def count_first_elements(test_tup):\n    # Iterate through the tuple to find the first tuple element\n    for index, element in enumerate(test_tup):\n        # Check if the current element is a tuple\n        if isinstance(element, tuple):\n            # Return the index (number of elements before the tuple)\n            return index\n    \n    # If no tuple is found, return 0\n    return 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n\n### Signature\ndef count_first_elements(test_tup):\n\n### Test\nassert candidate((1, 5, 7, (4, 6), 10) ) == 3",
    "timestamp": "2025-10-17T18:59:51.965806",
    "response_time": "4.60",
    "context": "{\"function_name\": \"count_first_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 279,
    "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Calculate the nth decagonal number.\n    \n    Decagonal numbers follow the formula: n * (8n - 6) / 2\n    \n    Args:\n        n (int): The position of the decagonal number to calculate\n    \n    Returns:\n        int: The nth decagonal number\n    \"\"\"\n    return n * (8 * n - 6) // 2",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth decagonal number.\n\n### Signature\ndef is_num_decagonal(n):\n\n### Test\nassert candidate(3) == 27",
    "timestamp": "2025-10-17T18:59:58.425635",
    "response_time": "6.45",
    "context": "{\"function_name\": \"is_num_decagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 280,
    "solution": "def sequential_search(dlist, item):\n    \"\"\"\n    Performs a sequential search on the input list to find the given item.\n    \n    Args:\n        dlist (list): The input list to search through\n        item: The element to search for in the list\n    \n    Returns:\n        tuple: A tuple containing:\n            - A boolean indicating whether the item was found (True/False)\n            - The index of the item if found, or -1 if not found\n    \"\"\"\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    \n    return (False, -1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n### Signature\ndef sequential_search(dlist, item):\n\n### Test\nassert candidate([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
    "timestamp": "2025-10-17T19:00:01.368133",
    "response_time": "2.93",
    "context": "{\"function_name\": \"sequential_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 281,
    "solution": "def all_unique(test_list):\n    \"\"\"\n    Check if all elements in the given list are unique.\n    \n    Args:\n        test_list (list): Input list to check for unique elements\n    \n    Returns:\n        bool: True if all elements are unique, False otherwise\n    \"\"\"\n    # Convert list to set and compare lengths\n    # If length of set equals length of original list, all elements are unique\n    return len(set(test_list)) == len(test_list)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check if the elements of a given list are unique or not.\n\n### Signature\ndef all_unique(test_list):\n\n### Test\nassert candidate([1,2,3]) == True",
    "timestamp": "2025-10-17T19:00:04.698696",
    "response_time": "3.32",
    "context": "{\"function_name\": \"all_unique\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 282,
    "solution": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \n    Args:\n        nums1 (list): First input list of numbers\n        nums2 (list): Second input list of numbers\n    \n    Returns:\n        list: A new list with elements subtracted element-wise\n    \"\"\"\n    return [a - b for a, b in zip(nums1, nums2)]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to subtract two lists element-wise.\n\n### Signature\ndef sub_list(nums1,nums2):\n\n### Test\nassert candidate([1, 2, 3],[4,5,6])==[-3,-3,-3]",
    "timestamp": "2025-10-17T19:00:06.858678",
    "response_time": "2.15",
    "context": "{\"function_name\": \"sub_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 283,
    "solution": "def validate(n):\n    # Convert integer to string for easy digit iteration\n    num_str = str(n)\n    \n    # Count frequency of each digit\n    digit_freq = {}\n    for digit in num_str:\n        digit_freq[digit] = digit_freq.get(digit, 0) + 1\n    \n    # Check if frequency of each digit is less than or equal to the digit itself\n    for digit, freq in digit_freq.items():\n        if freq > int(digit):\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n### Signature\ndef validate(n):\n\n### Test\nassert candidate(1234) == True",
    "timestamp": "2025-10-17T19:00:13.545000",
    "response_time": "6.68",
    "context": "{\"function_name\": \"validate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 284,
    "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n    \n    Args:\n        lst (list): The input list to check\n        element: The element to compare against all list items\n    \n    Returns:\n        bool: True if all items in the list are equal to the element, False otherwise\n    \"\"\"\n    return all(item == element for item in lst)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\n### Signature\ndef check_element(list,element):\n\n### Test\nassert candidate([\"green\", \"orange\", \"black\", \"white\"],\"\"\"blue\"\"\")==False",
    "timestamp": "2025-10-17T19:00:15.909194",
    "response_time": "2.36",
    "context": "{\"function_name\": \"check_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 285,
    "solution": "import re\n\ndef text_match_two_three(text):\n    # Use regex to check for 'a' followed by 2 or 3 'b' characters\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n### Signature\ndef text_match_two_three(text):\n\n### Test\nassert candidate(\"ac\")==(False)",
    "timestamp": "2025-10-17T19:00:20.112285",
    "response_time": "4.20",
    "context": "{\"function_name\": \"text_match_two_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 286,
    "solution": "def max_sub_array_sum_repeated(a, n, k):\n    # Kadane's algorithm with modification for repeated array\n    \n    # If k is 1, simply use standard Kadane's algorithm\n    if k == 1:\n        max_sum = float('-inf')\n        current_sum = 0\n        for num in a:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n    \n    # Extend the array to 2 repetitions to handle wrap-around\n    extended_arr = a * 2\n    \n    # Track max sum across 2 repetitions\n    max_total_sum = float('-inf')\n    current_sum = 0\n    \n    # First pass: find max subarray sum in 2 repetitions\n    for num in extended_arr:\n        current_sum = max(num, current_sum + num)\n        max_total_sum = max(max_total_sum, current_sum)\n    \n    # If k > 2, multiply the max sum by (k-1)\n    if k > 2:\n        # Calculate total sum of original array\n        total_arr_sum = sum(a)\n        \n        # If total array sum is positive, add it to max sum for (k-2) times\n        if total_arr_sum > 0:\n            max_total_sum += total_arr_sum * (k - 2)\n    \n    return max_total_sum",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n### Signature\ndef max_sub_array_sum_repeated(a, n, k):\n\n### Test\nassert candidate([10, 20, -30, -1], 4, 3) == 30",
    "timestamp": "2025-10-17T19:00:29.214815",
    "response_time": "9.10",
    "context": "{\"function_name\": \"max_sub_array_sum_repeated\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 287,
    "solution": "def square_Sum(n):\n    \"\"\"\n    Calculate the sum of squares of first n even natural numbers.\n    \n    Args:\n        n (int): Number of even natural numbers to consider\n    \n    Returns:\n        int: Sum of squares of first n even natural numbers\n    \"\"\"\n    # Initialize sum\n    total = 0\n    \n    # Iterate through first n even numbers\n    for i in range(1, n+1):\n        # Calculate even number and square it\n        even_num = 2 * i\n        total += even_num ** 2\n    \n    return total",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n### Signature\ndef square_Sum(n):\n\n### Test\nassert candidate(2) == 20",
    "timestamp": "2025-10-17T19:00:31.909012",
    "response_time": "2.69",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 290,
    "solution": "def max_length(list1):\n    \"\"\"\n    Find the list with maximum length in a list of lists.\n    \n    Args:\n        list1 (list): A list of lists\n    \n    Returns:\n        tuple: A tuple containing the maximum length and the list with that length\n    \"\"\"\n    if not list1:\n        return None\n    \n    max_len = len(list1[0])\n    max_list = list1[0]\n    \n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return (max_len, max_list)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the list of maximum length in a list of lists.\n\n### Signature\ndef max_length(list1):\n\n### Test\nassert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
    "timestamp": "2025-10-17T19:00:34.714822",
    "response_time": "2.80",
    "context": "{\"function_name\": \"max_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 291,
    "solution": "def count_no_of_ways(n, k):\n    # Handle base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    # Initialize variables for dynamic programming\n    # same represents ways where last two posts have same color\n    # diff represents ways where last two posts have different colors\n    same = k\n    diff = k * (k - 1)\n    \n    # Iterate through remaining posts\n    for _ in range(3, n + 1):\n        # Store previous same and diff values\n        prev_same = same\n        prev_diff = diff\n        \n        # Update same: can only be formed if previous posts were different\n        same = prev_diff\n        \n        # Update diff: can be formed by choosing different colors from previous posts\n        diff = (prev_same + prev_diff) * (k - 1)\n    \n    # Total ways is sum of same and different color combinations\n    return same + diff",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n### Signature\ndef count_no_of_ways(n, k):\n\n### Test\nassert candidate(2, 4) == 16",
    "timestamp": "2025-10-17T19:00:43.337423",
    "response_time": "8.62",
    "context": "{\"function_name\": \"count_no_of_ways\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 292,
    "solution": "def find(n, m):\n    \"\"\"\n    Find the quotient of two numbers, rounded down to the nearest integer.\n    \n    Args:\n        n (int): Dividend \n        m (int): Divisor\n    \n    Returns:\n        int: Integer quotient of n divided by m\n    \"\"\"\n    return n // m",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n### Signature\ndef find(n,m):\n\n### Test\nassert candidate(10,3) == 3",
    "timestamp": "2025-10-17T19:00:45.170804",
    "response_time": "1.83",
    "context": "{\"function_name\": \"find\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 293,
    "solution": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Calculate the length of the third side of a right-angled triangle\n    given the lengths of two sides using the Pythagorean theorem.\n    \n    Args:\n        w (float): Length of one side of the right-angled triangle\n        h (float): Length of another side of the right-angled triangle\n    \n    Returns:\n        float: Length of the third side (hypotenuse)\n    \"\"\"\n    # Use Pythagorean theorem: a\u00b2 + b\u00b2 = c\u00b2\n    # Solve for c (hypotenuse) by taking square root of (a\u00b2 + b\u00b2)\n    hypotenuse = math.sqrt(w**2 + h**2)\n    \n    return hypotenuse",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the third side of a right angled triangle.\n\n### Signature\ndef otherside_rightangle(w,h):\n\n### Test\nassert candidate(7,8)==10.63014581273465",
    "timestamp": "2025-10-17T19:00:48.496438",
    "response_time": "3.32",
    "context": "{\"function_name\": \"otherside_rightangle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 294,
    "solution": "def max_val(listval):\n    # Filter out only numeric values from the list\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    \n    # If no numeric values exist, return None\n    if not numeric_values:\n        return None\n    \n    # Return the maximum numeric value\n    return max(numeric_values)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum value in a given heterogeneous list.\n\n### Signature\ndef max_val(listval):\n\n### Test\nassert candidate(['Python', 3, 2, 4, 5, 'version'])==5",
    "timestamp": "2025-10-17T19:00:50.867697",
    "response_time": "2.37",
    "context": "{\"function_name\": \"max_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 295,
    "solution": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a given number.\n    \n    Args:\n        number (int): The number to find divisors for\n    \n    Returns:\n        int: Sum of all divisors of the number\n    \"\"\"\n    # Handle edge case for 0 or negative numbers\n    if number <= 0:\n        return 0\n    \n    # Initialize sum of divisors\n    divisor_sum = 0\n    \n    # Find all divisors and sum them\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    \n    return divisor_sum",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to return the sum of all divisors of a number.\n\n### Signature\ndef sum_div(number):\n\n### Test\nassert candidate(8)==7",
    "timestamp": "2025-10-17T19:00:53.949458",
    "response_time": "3.08",
    "context": "{\"function_name\": \"sum_div\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 296,
    "solution": "def get_Inv_Count(arr):\n    def merge_and_count(left, right):\n        merged = []\n        inv_count = 0\n        i, j = 0, 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                # Inversion occurs when element from right is smaller\n                merged.append(right[j])\n                inv_count += len(left) - i\n                j += 1\n        \n        # Add remaining elements\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        \n        return merged, inv_count\n    \n    def merge_sort_and_count(arr):\n        # Base case: if array has 1 or fewer elements, no inversions\n        if len(arr) <= 1:\n            return arr, 0\n        \n        # Split array\n        mid = len(arr) // 2\n        left, left_inv = merge_sort_and_count(arr[:mid])\n        right, right_inv = merge_sort_and_count(arr[mid:])\n        \n        # Merge and count cross inversions\n        merged, cross_inv = merge_and_count(left, right)\n        \n        # Total inversions = left inversions + right inversions + cross inversions\n        return merged, left_inv + right_inv + cross_inv\n    \n    # Return only the inversion count\n    _, inv_count = merge_sort_and_count(arr)\n    return inv_count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count inversions in an array.\n\n### Signature\ndef get_Inv_Count(arr):\n\n### Test\nassert candidate([1,20,6,4,5]) == 5",
    "timestamp": "2025-10-17T19:01:03.577498",
    "response_time": "9.62",
    "context": "{\"function_name\": \"get_Inv_Count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 297,
    "solution": "def flatten_list(list1):\n    \"\"\"\n    Flatten a nested list structure into a single-level list.\n    \n    Args:\n        list1 (list): A potentially nested list containing integers or nested lists\n    \n    Returns:\n        list: A flattened list with all elements at a single level\n    \"\"\"\n    # Initialize an empty result list to store flattened elements\n    flattened = []\n    \n    # Iterate through each element in the input list\n    for item in list1:\n        # If the item is a list, recursively flatten it\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        # If the item is not a list, simply append it\n        else:\n            flattened.append(item)\n    \n    return flattened",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to flatten a given nested list structure.\n\n### Signature\ndef flatten_list(list1):\n\n### Test\nassert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
    "timestamp": "2025-10-17T19:01:08.620852",
    "response_time": "5.04",
    "context": "{\"function_name\": \"flatten_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 299,
    "solution": "def max_aggregate(stdata):\n    # Create a dictionary to store aggregate scores for each name\n    aggregate_scores = {}\n    \n    # Iterate through the list of tuples\n    for name, score in stdata:\n        # If name already exists, add the score to existing total\n        # If name doesn't exist, create a new entry\n        aggregate_scores[name] = aggregate_scores.get(name, 0) + score\n    \n    # Find the name with maximum aggregate score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    \n    # Return a tuple with the name and its maximum aggregate score\n    return (max_name, aggregate_scores[max_name])",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\n### Signature\ndef max_aggregate(stdata):\n\n### Test\nassert candidate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
    "timestamp": "2025-10-17T19:01:13.430076",
    "response_time": "4.80",
    "context": "{\"function_name\": \"max_aggregate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 300,
    "solution": "import math\n\ndef count_binary_seq(n):\n    # Initialize DP table\n    # dp[i][j] represents number of sequences of length i with j more 1s in first half\n    dp = [[0] * (2*n + 1) for _ in range(2*n + 1)]\n    \n    # Base case: empty sequence\n    dp[0][n] = 1\n    \n    # Build DP table\n    for i in range(1, 2*n + 1):\n        for j in range(n + 1):\n            # Add 0 to sequence\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n            \n            # Add 1 to sequence\n            if j < 2*n:\n                dp[i][j] += dp[i-1][j+1]\n    \n    # Return total count of valid sequences\n    return dp[2*n][n]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n### Signature\ndef count_binary_seq(n):\n\n### Test\nassert math.isclose(candidate(1), 2.0, rel_tol=0.001)",
    "timestamp": "2025-10-17T19:01:22.905471",
    "response_time": "9.47",
    "context": "{\"function_name\": \"count_binary_seq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 301,
    "solution": "def dict_depth(d):\n    \"\"\"\n    Calculate the maximum depth of a nested dictionary.\n    \n    Args:\n        d (dict): Input dictionary to calculate depth\n    \n    Returns:\n        int: Maximum depth of the dictionary\n    \"\"\"\n    # Base case: if input is not a dictionary, return 0\n    if not isinstance(d, dict):\n        return 0\n    \n    # If dictionary is empty, return 1\n    if not d:\n        return 1\n    \n    # Find the maximum depth by recursively checking nested dictionaries\n    max_depth = 1\n    for value in d.values():\n        # Recursively calculate depth of nested dictionaries\n        depth = dict_depth(value) + 1\n        max_depth = max(max_depth, depth)\n    \n    return max_depth",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the depth of a dictionary.\n\n### Signature\ndef dict_depth(d):\n\n### Test\nassert candidate({'a':1, 'b': {'c': {'d': {}}}})==4",
    "timestamp": "2025-10-17T19:01:26.393646",
    "response_time": "3.48",
    "context": "{\"function_name\": \"dict_depth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 304,
    "solution": "def find_Element(arr, ranges, rotations, index):\n    # Perform rotations on the array\n    for _ in range(rotations):\n        # Apply each range rotation\n        for start, end in ranges:\n            # Rotate the subarray within the specified range\n            segment = arr[start:end+1]\n            segment = segment[-1:] + segment[:-1]\n            arr[start:end+1] = segment\n    \n    # Return the element at the specified index\n    return arr[index]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find element at a given index after number of rotations.\n\n### Signature\ndef find_Element(arr,ranges,rotations,index) :\n\n### Test\nassert candidate([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
    "timestamp": "2025-10-17T19:01:35.025731",
    "response_time": "8.63",
    "context": "{\"function_name\": \"find_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 305,
    "solution": "def start_withp(words):\n    # Filter words that start with 'p' or 'P'\n    p_words = [word for word in words for subword in word.split() if subword.lower().startswith('p')]\n    \n    # Return the first two 'p' words, or empty tuple if less than 2\n    return tuple(p_words[:2]) if len(p_words) >= 2 else ()",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to return two words from a list of words starting with letter 'p'.\n\n### Signature\ndef start_withp(words):\n\n### Test\nassert candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==(\"\"\"Python\"\"\", \"\"\"PHP\"\"\")",
    "timestamp": "2025-10-17T19:01:40.741497",
    "response_time": "5.71",
    "context": "{\"function_name\": \"start_withp\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 306,
    "solution": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a DP table to store maximum sum of increasing subsequence\n    # ending at each index\n    dp = [0] * n\n    \n    # Initialize DP table with original array values\n    for i in range(n):\n        dp[i] = a[i]\n    \n    # Compute maximum sum of increasing subsequence\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + a[i]:\n                dp[i] = dp[j] + a[i]\n    \n    # Find max sum of subsequence from index to k\n    max_sum = float('-inf')\n    for i in range(index, k+1):\n        # Check if subsequence is increasing from index to k\n        is_valid = True\n        for j in range(index, i):\n            if a[j] >= a[j+1]:\n                is_valid = False\n                break\n        \n        # If subsequence is valid, update max sum\n        if is_valid:\n            max_sum = max(max_sum, dp[i])\n    \n    return max_sum",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\n### Signature\ndef max_sum_increasing_subseq(a, n, index, k):\n\n### Test\nassert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
    "timestamp": "2025-10-17T19:01:49.878314",
    "response_time": "9.13",
    "context": "{\"function_name\": \"max_sum_increasing_subseq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 307,
    "solution": "def colon_tuplex(tuplex, m, n):\n    # Convert the tuple to a list to allow modification\n    list_x = list(tuplex)\n    \n    # Replace the element at index m with n\n    list_x[m] = n\n    \n    # Convert back to tuple and return\n    return tuple(list_x)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to get a colon of a tuple.\n\n### Signature\ndef colon_tuplex(tuplex,m,n):\n\n### Test\nassert candidate((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)",
    "timestamp": "2025-10-17T19:01:55.657030",
    "response_time": "5.77",
    "context": "{\"function_name\": \"colon_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 308,
    "solution": "import heapq\n\ndef large_product(nums1, nums2, N):\n    # Create a max heap to store the largest products\n    products = []\n    \n    # Generate all possible products by multiplying elements from both lists\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            \n            # If we haven't yet collected N products, add to heap\n            if len(products) < N:\n                heapq.heappush(products, product)\n            else:\n                # If current product is larger than the smallest in heap, replace it\n                if product > products[0]:\n                    heapq.heapreplace(products, product)\n    \n    # Sort the products in descending order\n    return sorted(products, reverse=True)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n### Signature\ndef large_product(nums1, nums2, N):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
    "timestamp": "2025-10-17T19:01:58.908335",
    "response_time": "3.25",
    "context": "{\"function_name\": \"large_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 309,
    "solution": "def maximum(a, b):\n    \"\"\"\n    Find the maximum of two numbers.\n    \n    Args:\n        a (int or float): First number to compare\n        b (int or float): Second number to compare\n    \n    Returns:\n        int or float: The larger of the two input numbers\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the maximum of two numbers.\n\n### Signature\ndef maximum(a,b):\n\n### Test\nassert candidate(5,10) == 10",
    "timestamp": "2025-10-17T19:02:00.882540",
    "response_time": "1.97",
    "context": "{\"function_name\": \"maximum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 310,
    "solution": "def string_to_tuple(str1):\n    return tuple(str1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a given string to a tuple of characters.\n\n### Signature\ndef string_to_tuple(str1):\n\n### Test\nassert candidate(\"python 3.0\")==(\"\"\"p\"\"\", \"\"\"y\"\"\", \"\"\"t\"\"\", \"\"\"h\"\"\", \"\"\"o\"\"\", \"\"\"n\"\"\", \"\"\"3\"\"\", \"\"\".\"\"\", \"\"\"0\"\"\")",
    "timestamp": "2025-10-17T19:02:04.350791",
    "response_time": "3.46",
    "context": "{\"function_name\": \"string_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 311,
    "solution": "def set_left_most_unset_bit(n):\n    # If all bits are already set, return the number itself\n    if n & (n + 1) == 0:\n        return n\n    \n    # Find the position of the leftmost unset bit\n    mask = 1\n    while n & mask:\n        mask <<= 1\n    \n    # Set the leftmost unset bit\n    return n | mask",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to set the left most unset bit.\n\n### Signature\ndef set_left_most_unset_bit(n):\n\n### Test\nassert candidate(10) == 14",
    "timestamp": "2025-10-17T19:02:11.757546",
    "response_time": "7.40",
    "context": "{\"function_name\": \"set_left_most_unset_bit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 312,
    "solution": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone given its radius and height.\n    \n    Volume of a cone is calculated using the formula: V = (1/3) * \u03c0 * r\u00b2 * h\n    \n    Args:\n        r (float): Radius of the cone's base\n        h (float): Height of the cone\n    \n    Returns:\n        float: Volume of the cone\n    \"\"\"\n    return (1/3) * math.pi * r**2 * h",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the volume of a cone.\n\n### Signature\ndef volume_cone(r,h):\n\n### Test\nassert math.isclose(candidate(5,12), 314.15926535897927, rel_tol=0.001)",
    "timestamp": "2025-10-17T19:02:14.234768",
    "response_time": "2.47",
    "context": "{\"function_name\": \"volume_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 388,
    "solution": "def highest_Power_of_2(n):\n    # If n is less than 1, return 0\n    if n < 1:\n        return 0\n    \n    # Start with 1 and keep doubling until we exceed n\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    \n    return power",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\n### Signature\ndef highest_Power_of_2(n):\n\n### Test\nassert candidate(10) == 8",
    "timestamp": "2025-10-17T19:02:16.730960",
    "response_time": "2.49",
    "context": "{\"function_name\": \"highest_Power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 389,
    "solution": "def find_lucas(n):\n    \"\"\"\n    Find the n'th Lucas number.\n    \n    Lucas numbers are a sequence similar to Fibonacci numbers, \n    but starting with 2 and 1 instead of 0 and 1.\n    \n    Args:\n        n (int): The index of the Lucas number to find (0-based index)\n    \n    Returns:\n        int: The n'th Lucas number\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    \n    # Initialize first two Lucas numbers\n    a, b = 2, 1\n    \n    # Iterate to find the n'th Lucas number\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    \n    return b",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the n'th lucas number.\n\n### Signature\ndef find_lucas(n):\n\n### Test\nassert candidate(9) == 76",
    "timestamp": "2025-10-17T19:02:20.413658",
    "response_time": "3.67",
    "context": "{\"function_name\": \"find_lucas\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 390,
    "solution": "def add_string(list_, string):\n    \"\"\"\n    Apply a given format string to all elements in a list.\n    \n    Args:\n        list_: Input list of elements to be formatted\n        string: Format string to apply to each element\n    \n    Returns:\n        List of formatted strings\n    \"\"\"\n    return [string.format(x) for x in list_]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to apply a given format string to all of the elements in a list.\n\n### Signature\ndef add_string(list_, string):\n\n### Test\nassert candidate([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
    "timestamp": "2025-10-17T19:02:22.925324",
    "response_time": "2.51",
    "context": "{\"function_name\": \"add_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 391,
    "solution": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Convert multiple lists into a list of nested dictionaries\n    \n    Args:\n        l1: List of keys for the outer dictionary \n        l2: List of keys for the inner dictionary\n        l3: List of values for the inner dictionary\n    \n    Returns:\n        List of nested dictionaries\n    \"\"\"\n    # Check if lists are of equal length\n    if len(l1) != len(l2) or len(l1) != len(l3):\n        raise ValueError(\"Input lists must be of equal length\")\n    \n    # Create list of nested dictionaries\n    result = []\n    for i in range(len(l1)):\n        result.append({l1[i]: {l2[i]: l3[i]}})\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert more than one list to nested dictionary.\n\n### Signature\ndef convert_list_dictionary(l1, l2, l3):\n\n### Test\nassert candidate([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{\"\"\"S001\"\"\": {\"\"\"Adina Park\"\"\": 85}}, {\"\"\"S002\"\"\": {\"\"\"Leyton Marsh\"\"\": 98}}, {\"\"\"S003\"\"\": {\"\"\"Duncan Boyle\"\"\": 89}}, {\"\"\"S004\"\"\": {\"\"\"Saim Richards\"\"\": 92}}]",
    "timestamp": "2025-10-17T19:02:26.170917",
    "response_time": "3.24",
    "context": "{\"function_name\": \"convert_list_dictionary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 392,
    "solution": "import math\n\ndef get_max_sum (n):\n    # Create a memoization dictionary to store computed results\n    memo = {}\n    \n    def recursive_max_sum(x):\n        # Base case: if result already computed, return memoized value\n        if x in memo:\n            return memo[x]\n        \n        # Base case: if x is less than 1, return x\n        if x < 1:\n            return x\n        \n        # Calculate max of current value and sum of divided values\n        max_sum = max(x, \n                      recursive_max_sum(math.floor(x/2)) + \n                      recursive_max_sum(math.floor(x/3)) + \n                      recursive_max_sum(math.floor(x/4)) + \n                      recursive_max_sum(math.floor(x/5)))\n        \n        # Memoize and return the result\n        memo[x] = max_sum\n        return max_sum\n    \n    return recursive_max_sum(n)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n### Signature\ndef get_max_sum (n):\n\n### Test\nassert get_max_sum(60) == 106",
    "timestamp": "2025-10-17T19:02:35.219717",
    "response_time": "9.04",
    "context": "{\"function_name\": \"get_max_sum \"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 393,
    "solution": "def max_length_list(input_list):\n    \"\"\"\n    Find the list with maximum length from the input list of lists\n    \n    Args:\n        input_list (list): A list containing multiple lists\n    \n    Returns:\n        tuple: A tuple containing the maximum length and the list with that length\n    \"\"\"\n    if not input_list:\n        return None\n    \n    max_len = 0\n    max_list = None\n    \n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return (max_len, max_list)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the list with maximum length.\n\n### Signature\ndef max_length_list(input_list):\n\n### Test\nassert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
    "timestamp": "2025-10-17T19:02:38.192469",
    "response_time": "2.97",
    "context": "{\"function_name\": \"max_length_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 394,
    "solution": "def check_distinct(test_tup):\n    # Convert tuple to set to remove duplicates\n    # If length of set is same as length of original tuple, no duplicates exist\n    return len(set(test_tup)) == len(test_tup)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if given tuple contains no duplicates.\n\n### Signature\ndef check_distinct(test_tup):\n\n### Test\nassert candidate((1, 4, 5, 6, 1, 4)) == False",
    "timestamp": "2025-10-17T19:02:43.247712",
    "response_time": "5.05",
    "context": "{\"function_name\": \"check_distinct\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 395,
    "solution": "def first_non_repeating_character(str1):\n    # Create a dictionary to count character frequencies\n    char_count = {}\n    \n    # First pass: Count the frequency of each character\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Second pass: Find the first character with count 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the first non-repeated character in a given string.\n\n### Signature\ndef first_non_repeating_character(str1):\n\n### Test\nassert candidate(\"abcabc\") == None",
    "timestamp": "2025-10-17T19:02:45.963209",
    "response_time": "2.71",
    "context": "{\"function_name\": \"first_non_repeating_character\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 396,
    "solution": "def check_char(string):\n    # Check if the string is empty\n    if not string:\n        return \"Invalid\"\n    \n    # Compare first and last character \n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether the given string starts and ends with the same character or not.\n\n### Signature\ndef check_char(string):\n\n### Test\nassert candidate(\"abba\") == \"Valid\"",
    "timestamp": "2025-10-17T19:02:47.884284",
    "response_time": "1.92",
    "context": "{\"function_name\": \"check_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 397,
    "solution": "def median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n    \n    Args:\n        a (int/float): First number\n        b (int/float): Second number\n        c (int/float): Third number\n    \n    Returns:\n        float: The median value of the three numbers\n    \"\"\"\n    # Sort the three numbers\n    sorted_nums = sorted([a, b, c])\n    \n    # Return the middle number as the median\n    return float(sorted_nums[1])",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the median of three numbers.\n\n### Signature\ndef median_numbers(a,b,c):\n\n### Test\nassert candidate(25,55,65)==55.0",
    "timestamp": "2025-10-17T19:02:50.598353",
    "response_time": "2.71",
    "context": "{\"function_name\": \"median_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 398,
    "solution": "def sum_of_digits(nums):\n    \"\"\"\n    Compute the sum of digits for each number in the given list.\n    \n    Args:\n        nums (list): A list of integers\n    \n    Returns:\n        int: Sum of digits of all numbers in the list\n    \"\"\"\n    total = 0\n    for num in nums:\n        # Convert number to string to easily iterate through digits\n        digit_sum = sum(int(digit) for digit in str(abs(num)))\n        total += digit_sum\n    return total",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to compute the sum of digits of each number of a given list.\n\n### Signature\ndef sum_of_digits(nums):\n\n### Test\nassert candidate([10,2,56])==14",
    "timestamp": "2025-10-17T19:02:53.924594",
    "response_time": "3.32",
    "context": "{\"function_name\": \"sum_of_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 399,
    "solution": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Perform bitwise XOR operation element-wise between two tuples.\n    \n    Args:\n        test_tup1 (tuple): First input tuple of integers\n        test_tup2 (tuple): Second input tuple of integers\n    \n    Returns:\n        tuple: A new tuple with bitwise XOR results\n    \"\"\"\n    # Use zip to pair corresponding elements, then apply bitwise XOR\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\n### Signature\ndef bitwise_xor(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
    "timestamp": "2025-10-17T19:03:00.107988",
    "response_time": "6.18",
    "context": "{\"function_name\": \"bitwise_xor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 400,
    "solution": "def extract_freq(test_list):\n    # Convert the list of tuples to a set to get unique tuples\n    unique_tuples = set(test_list)\n    \n    # Return the number of unique tuples\n    return len(unique_tuples)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to extract the number of unique tuples in the given list.\n\n### Signature\ndef extract_freq(test_list):\n\n### Test\nassert candidate([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
    "timestamp": "2025-10-17T19:03:05.160169",
    "response_time": "5.04",
    "context": "{\"function_name\": \"extract_freq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 401,
    "solution": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Perform index-wise addition of elements in two nested tuples\n    \n    Args:\n        test_tup1 (tuple): First nested tuple \n        test_tup2 (tuple): Second nested tuple\n    \n    Returns:\n        tuple: A new nested tuple with index-wise addition of corresponding elements\n    \"\"\"\n    # Use tuple comprehension to add corresponding tuples \n    return tuple(\n        tuple(x + y for x, y in zip(tup1, tup2)) \n        for tup1, tup2 in zip(test_tup1, test_tup2)\n    )",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n### Signature\ndef add_nested_tuples(test_tup1, test_tup2):\n\n### Test\nassert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
    "timestamp": "2025-10-17T19:03:08.441663",
    "response_time": "3.27",
    "context": "{\"function_name\": \"add_nested_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 404,
    "solution": "def minimum(a, b):\n    \"\"\"\n    Find the minimum of two numbers.\n    \n    Args:\n        a (int or float): First number\n        b (int or float): Second number\n    \n    Returns:\n        int or float: The smaller of the two input numbers\n    \"\"\"\n    return a if a < b else b",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the minimum of two numbers.\n\n### Signature\ndef minimum(a,b):\n\n### Test\nassert candidate(1,2) == 1",
    "timestamp": "2025-10-17T19:03:10.431965",
    "response_time": "1.98",
    "context": "{\"function_name\": \"minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 405,
    "solution": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Check whether an element exists within a tuple.\n    \n    Args:\n        tuplex (tuple): The tuple to search in\n        tuple1 (str): The element to search for\n    \n    Returns:\n        bool: True if the element exists in the tuple, False otherwise\n    \"\"\"\n    return tuple1 in tuplex",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether an element exists within a tuple.\n\n### Signature\ndef check_tuplex(tuplex,tuple1):\n\n### Test\nassert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),\"\"\"r\"\"\")==True",
    "timestamp": "2025-10-17T19:03:15.689924",
    "response_time": "5.25",
    "context": "{\"function_name\": \"check_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 406,
    "solution": "def find_Parity(x):\n    \"\"\"\n    Determine whether the parity of a given number is odd.\n    \n    Args:\n        x (int): The input number to check for parity\n    \n    Returns:\n        bool: True if the number has odd parity, False otherwise\n    \"\"\"\n    # A number has odd parity if it is an odd number\n    return x % 2 != 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find whether the parity of a given number is odd.\n\n### Signature\ndef find_Parity(x):\n\n### Test\nassert candidate(12) == False",
    "timestamp": "2025-10-17T19:03:18.699638",
    "response_time": "3.00",
    "context": "{\"function_name\": \"find_Parity\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 407,
    "solution": "def rearrange_bigger(n):\n    # Convert number to list of digits\n    digits = list(str(n))\n    \n    # Find the first pair of adjacent digits from right to left \n    # where left digit is smaller than right digit\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            # Find the smallest digit on right side that is larger than digits[i]\n            for j in range(len(digits)-1, i, -1):\n                if digits[j] > digits[i]:\n                    # Swap these digits\n                    digits[i], digits[j] = digits[j], digits[i]\n                    \n                    # Sort the sublist to the right of i in ascending order\n                    right_part = digits[i+1:]\n                    right_part.sort()\n                    digits[i+1:] = right_part\n                    \n                    # Convert back to number\n                    return int(''.join(digits))\n    \n    # If no rearrangement possible, return -1\n    return -1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\n### Signature\ndef rearrange_bigger(n):\n\n### Test\nassert candidate(12)==21",
    "timestamp": "2025-10-17T19:03:23.190460",
    "response_time": "4.48",
    "context": "{\"function_name\": \"rearrange_bigger\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 408,
    "solution": "import heapq\n\ndef push(nums1, nums2, k):\n    # If either input array is empty, return empty list\n    if not nums1 or not nums2:\n        return []\n    \n    # Use a min heap to track smallest pairs\n    heap = []\n    result = []\n    \n    # Initially add pairs starting with first elements of nums1\n    for j in range(min(k, len(nums2))):\n        heapq.heappush(heap, (nums1[0] + nums2[j], 0, j))\n    \n    # Track k smallest pairs\n    while k > 0 and heap:\n        _, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        \n        # If not last element in nums1, push next pair\n        if i + 1 < len(nums1):\n            heapq.heappush(heap, (nums1[i+1] + nums2[j], i+1, j))\n        \n        k -= 1\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n### Signature\ndef k_smallest_pairs(nums1, nums2, k):\n\n### Test\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
    "timestamp": "2025-10-17T19:03:27.799241",
    "response_time": "4.60",
    "context": "{\"function_name\": \"push\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 409,
    "solution": "def min_product_tuple(list1):\n    # Calculate the product of each tuple and find the minimum\n    return min(a * b for a, b in list1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\n### Signature\ndef min_product_tuple(list1):\n\n### Test\nassert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
    "timestamp": "2025-10-17T19:03:32.301916",
    "response_time": "4.50",
    "context": "{\"function_name\": \"min_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 410,
    "solution": "def min_val(listval):\n    # Filter out only numeric values from the heterogeneous list\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    \n    # If no numeric values exist, return None\n    if not numeric_values:\n        return None\n    \n    # Return the minimum numeric value\n    return min(numeric_values)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the minimum value in a given heterogeneous list.\n\n### Signature\ndef min_val(listval):\n\n### Test\nassert candidate(['Python', 3, 2, 4, 5, 'version'])==2",
    "timestamp": "2025-10-17T19:03:34.627577",
    "response_time": "2.32",
    "context": "{\"function_name\": \"min_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 411,
    "solution": "def snake_to_camel(word):\n    # Split the snake_case string into words\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word except the first one\n    camel_case_words = [words[0]] + [w.capitalize() for w in words[1:]]\n    \n    # Join the words together\n    return ''.join(camel_case_words)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert the given snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):\n\n### Test\nassert candidate('android_tv') == 'AndroidTv'",
    "timestamp": "2025-10-17T19:03:36.935492",
    "response_time": "2.30",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 412,
    "solution": "def remove_odd(l):\n    return [num for num in l if num % 2 == 0]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to remove odd numbers from a given list.\n\n### Signature\ndef remove_odd(l):\n\n### Test\nassert candidate([1,2,3]) == [2]",
    "timestamp": "2025-10-17T19:03:38.303662",
    "response_time": "1.36",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 413,
    "solution": "def extract_nth_element(list1, n):\n    \"\"\"\n    Extract the nth element from each tuple in the given list.\n    \n    Args:\n        list1 (list): A list of tuples\n        n (int): The index of the element to extract from each tuple\n    \n    Returns:\n        list: A list containing the nth element from each tuple\n    \"\"\"\n    return [item[n] for item in list1]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to extract the nth element from a given list of tuples.\n\n### Signature\ndef extract_nth_element(list1, n):\n\n### Test\nassert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
    "timestamp": "2025-10-17T19:03:40.609898",
    "response_time": "2.30",
    "context": "{\"function_name\": \"extract_nth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 414,
    "solution": "def overlapping(list1, list2):\n    \"\"\"\n    Check if any value from list1 exists in list2\n    \n    Args:\n        list1 (list): First input sequence\n        list2 (list): Second input sequence\n    \n    Returns:\n        bool: True if any value from list1 is in list2, False otherwise\n    \"\"\"\n    return any(item in list2 for item in list1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\n### Signature\ndef overlapping(list1,list2):\n\n### Test\nassert candidate([1,2,3,4,5],[6,7,8,9]) == False",
    "timestamp": "2025-10-17T19:03:45.129752",
    "response_time": "4.51",
    "context": "{\"function_name\": \"overlapping\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 415,
    "solution": "def max_Product(arr):\n    # If array has less than 2 elements, return None\n    if len(arr) < 2:\n        return None\n    \n    # Initialize max product pair\n    max_pair = (arr[0], arr[1])\n    max_prod = arr[0] * arr[1]\n    \n    # Compare all possible pairs\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate current pair's product\n            current_prod = arr[i] * arr[j]\n            \n            # Update max product pair if current product is higher\n            if current_prod > max_prod:\n                max_prod = current_prod\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find a pair with highest product from a given array of integers.\n\n### Signature\ndef max_Product(arr):\n\n### Test\nassert candidate([1,2,3,4,7,0,8,4]) == (7,8)",
    "timestamp": "2025-10-17T19:03:51.715348",
    "response_time": "6.58",
    "context": "{\"function_name\": \"max_Product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 417,
    "solution": "def group_tuples(Input):\n    # Create a dictionary to group tuples by their first element\n    groups = {}\n    \n    # Iterate through the input list of tuples\n    for tup in Input:\n        # Use the first element as the key\n        first_elem = tup[0]\n        \n        # If the key doesn't exist, create a new list with the tuple\n        if first_elem not in groups:\n            groups[first_elem] = list(tup)\n        else:\n            # If the key exists, append the second element to the list\n            groups[first_elem].append(tup[1])\n    \n    # Convert the grouped dictionary to a list of tuples\n    return list(groups.values())",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find common first element in given list of tuple.\n\n### Signature\ndef group_tuples(Input):\n\n### Test\nassert candidate([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
    "timestamp": "2025-10-17T19:03:56.798874",
    "response_time": "5.08",
    "context": "{\"function_name\": \"group_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 418,
    "solution": "def Find_Max(lst):\n    # If the list is empty, return None\n    if not lst:\n        return None\n    \n    # Use max() with a key function that returns the length of each sublist\n    # This will return the sublist with the maximum length\n    return max(lst, key=len)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the element of a list having maximum length.\n\n### Signature\ndef Find_Max(lst):\n\n### Test\nassert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
    "timestamp": "2025-10-17T19:04:01.762522",
    "response_time": "4.96",
    "context": "{\"function_name\": \"Find_Max\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 419,
    "solution": "import math\n\ndef round_and_sum(list1):\n    # Round each number in the list\n    rounded_list = [round(num) for num in list1]\n    \n    # Calculate the sum of rounded numbers\n    total_sum = sum(rounded_list)\n    \n    # Multiply the sum by the length of the list\n    result = total_sum * len(list1)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\n### Signature\ndef round_and_sum(list1):\n\n### Test\nassert candidate([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
    "timestamp": "2025-10-17T19:04:03.812742",
    "response_time": "2.04",
    "context": "{\"function_name\": \"round_and_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 420,
    "solution": "def cube_Sum(n):\n    \"\"\"\n    Calculate the sum of cubes of first n even natural numbers.\n    \n    Args:\n        n (int): Number of even natural numbers to consider\n    \n    Returns:\n        int: Sum of cubes of first n even natural numbers\n    \"\"\"\n    # Initialize sum\n    total = 0\n    \n    # Iterate through first n even numbers\n    for i in range(1, n+1):\n        # Calculate even number and cube it\n        even_num = 2 * i\n        total += even_num ** 3\n    \n    return total",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the cube sum of first n even natural numbers.\n\n### Signature\ndef cube_Sum(n):\n\n### Test\nassert candidate(2) == 72",
    "timestamp": "2025-10-17T19:04:06.649667",
    "response_time": "2.83",
    "context": "{\"function_name\": \"cube_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 421,
    "solution": "def concatenate_tuple(test_tup):\n    # Convert each element to string and join with delimiter\n    return \"-\".join(str(item) for item in test_tup)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to concatenate each element of tuple by the delimiter.\n\n### Signature\ndef concatenate_tuple(test_tup):\n\n### Test\nassert candidate((\"ID\", \"is\", 4, \"UTS\") ) == \"\"\"ID-is-4-UTS\"\"\"",
    "timestamp": "2025-10-17T19:04:12.351539",
    "response_time": "5.69",
    "context": "{\"function_name\": \"concatenate_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 422,
    "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Calculate the average of cubes of first n natural numbers\n    \n    Args:\n        n (int): Number of natural numbers to consider\n    \n    Returns:\n        float: Average of cubes of first n natural numbers\n    \"\"\"\n    # Calculate sum of cubes of first n natural numbers\n    cube_sum = sum(i**3 for i in range(1, n+1))\n    \n    # Calculate average by dividing sum by n\n    average = cube_sum / n\n    \n    return average",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the average of cubes of first n natural numbers.\n\n### Signature\ndef find_Average_Of_Cube(n):\n\n### Test\nassert candidate(2) == 4.5",
    "timestamp": "2025-10-17T19:04:14.792144",
    "response_time": "2.43",
    "context": "{\"function_name\": \"find_Average_Of_Cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_td",
    "dataset_row_id": 424,
    "solution": "def extract_rear(test_tuple):\n    \"\"\"\n    Extract the last character from each string in the given tuple.\n    \n    Args:\n        test_tuple (tuple): A tuple of strings\n    \n    Returns:\n        list: A list containing the last character of each string\n    \"\"\"\n    return [string[-1] for string in test_tuple]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to extract only the rear index element of each string in the given tuple.\n\n### Signature\ndef extract_rear(test_tuple):\n\n### Test\nassert candidate(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
    "timestamp": "2025-10-17T19:04:16.816311",
    "response_time": "2.02",
    "context": "{\"function_name\": \"extract_rear\"}"
  }
]