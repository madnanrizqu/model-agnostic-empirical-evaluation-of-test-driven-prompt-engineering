[
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 425,
        "solution": "===START===\n```python\ndef count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if isinstance(sublist, list) and x in sublist:\n            count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the number of sublists containing a particular element.\n\n### Signature\ndef count_element_in_list(list1, x):",
        "timestamp": "2025-10-17T17:59:27.783110",
        "response_time": "4.30",
        "context": "{\"function_name\": \"count_element_in_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 426,
        "solution": "===START===\n```python\ndef filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to filter odd numbers.\n\n### Signature\ndef filter_oddnumbers(nums):",
        "timestamp": "2025-10-17T17:59:29.620319",
        "response_time": "1.83",
        "context": "{\"function_name\": \"filter_oddnumbers\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 427,
        "solution": "===START===\n```python\nfrom datetime import datetime\n\ndef change_date_format(dt):\n    date_obj = datetime.strptime(dt, '%Y-%m-%d')\n    return date_obj.strftime('%d-%m-%Y')\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n### Signature\ndef change_date_format(dt):",
        "timestamp": "2025-10-17T17:59:31.984395",
        "response_time": "2.36",
        "context": "{\"function_name\": \"change_date_format\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 428,
        "solution": "===START===\n```python\ndef shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort the given array by using shell sort.\n\n### Signature\ndef shell_sort(my_list):",
        "timestamp": "2025-10-17T17:59:36.969384",
        "response_time": "4.98",
        "context": "{\"function_name\": \"shell_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 429,
        "solution": "===START===\n```python\ndef and_tuples(test_tup1, test_tup2):\n    return tuple(a and b for a, b in zip(test_tup1, test_tup2))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\n### Signature\ndef and_tuples(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T17:59:39.217408",
        "response_time": "2.25",
        "context": "{\"function_name\": \"and_tuples\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 430,
        "solution": "===START===\n```python\ndef parabola_directrix(a, b, c):\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must not be zero for a parabola.\")\n    directrix = c - (b**2 + 1) / (4 * a)\n    return directrix\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the directrix of a parabola.\n\n### Signature\ndef parabola_directrix(a, b, c):",
        "timestamp": "2025-10-17T17:59:42.673090",
        "response_time": "3.45",
        "context": "{\"function_name\": \"parabola_directrix\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 431,
        "solution": "===START===\n```python\ndef common_element(list1, list2):\n    return any(element in list2 for element in list1)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes two lists and returns true if they have at least one common element.\n\n### Signature\ndef common_element(list1, list2):",
        "timestamp": "2025-10-17T17:59:44.330070",
        "response_time": "1.66",
        "context": "{\"function_name\": \"common_element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 432,
        "solution": "===START===\n```python\ndef median_trapezium(base1, base2, height):\n    return (base1 + base2) / 2\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the median length of a trapezium.\n\n### Signature\ndef median_trapezium(base1,base2,height):",
        "timestamp": "2025-10-17T17:59:46.247346",
        "response_time": "1.91",
        "context": "{\"function_name\": \"median_trapezium\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 433,
        "solution": "===START===\n```python\ndef check_greater(arr, number):\n    for element in arr:\n        if number <= element:\n            return False\n    return True\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\n### Signature\ndef check_greater(arr, number):",
        "timestamp": "2025-10-17T17:59:48.167203",
        "response_time": "1.92",
        "context": "{\"function_name\": \"check_greater\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 434,
        "solution": "===START===\nimport re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by one or more b's.\n\n### Signature\ndef text_match_one(text):",
        "timestamp": "2025-10-17T17:59:50.233978",
        "response_time": "2.06",
        "context": "{\"function_name\": \"text_match_one\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 435,
        "solution": "===START===\n```python\ndef last_Digit(n):\n    return abs(n) % 10\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the last digit of a given number.\n\n### Signature\ndef last_Digit(n) :",
        "timestamp": "2025-10-17T17:59:51.635772",
        "response_time": "1.40",
        "context": "{\"function_name\": \"last_Digit\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 436,
        "solution": "===START===\n```python\ndef neg_nos(list1):\n    return [num for num in list1 if num < 0]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to return the negative numbers in a list.\n\n### Signature\ndef neg_nos(list1):",
        "timestamp": "2025-10-17T17:59:53.343663",
        "response_time": "1.71",
        "context": "{\"function_name\": \"neg_nos\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 437,
        "solution": "===START===\n```python\ndef remove_odd(str1):\n    return str1[::2]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove odd characters in a string.\n\n### Signature\ndef remove_odd(str1):",
        "timestamp": "2025-10-17T17:59:54.714378",
        "response_time": "1.37",
        "context": "{\"function_name\": \"remove_odd\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 438,
        "solution": "===START===\n```python\ndef count_bidirectional(test_list):\n    count = 0\n    seen = set()\n    for tup in test_list:\n        if tup in seen or (tup[1], tup[0]) in seen:\n            count += 1\n        seen.add(tup)\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to count bidirectional tuple pairs.\n\n### Signature\ndef count_bidirectional(test_list):",
        "timestamp": "2025-10-17T17:59:58.142046",
        "response_time": "3.43",
        "context": "{\"function_name\": \"count_bidirectional\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 439,
        "solution": "===START===\n```python\ndef multiple_to_single(L):\n    return int(''.join(map(str, L)))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to join a list of multiple integers into a single integer.\n\n### Signature\ndef multiple_to_single(L):",
        "timestamp": "2025-10-17T17:59:59.672439",
        "response_time": "1.53",
        "context": "{\"function_name\": \"multiple_to_single\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 440,
        "solution": "===START===\nimport re\n\ndef find_adverb_position(text):\n    # Regular expression to find adverbs ending in 'ly'\n    adverb_pattern = r'\\b\\w+ly\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the first adverb and their positions in a given sentence.\n\n### Signature\ndef find_adverb_position(text):",
        "timestamp": "2025-10-17T18:00:03.443994",
        "response_time": "3.76",
        "context": "{\"function_name\": \"find_adverb_position\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 441,
        "solution": "===START===\n```python\ndef surfacearea_cube(l):\n    return 6 * l ** 2\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the surface area of a cube of a given size.\n\n### Signature\ndef surfacearea_cube(l):",
        "timestamp": "2025-10-17T18:00:04.906169",
        "response_time": "1.46",
        "context": "{\"function_name\": \"surfacearea_cube\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 442,
        "solution": "===START===\nfrom typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    if not nums:\n        return 0.0\n    positive_count = sum(1 for num in nums if num > 0)\n    return positive_count / len(nums)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the ration of positive numbers in an array of integers.\n\n### Signature\ndef positive_count(nums):",
        "timestamp": "2025-10-17T18:00:07.718759",
        "response_time": "2.81",
        "context": "{\"function_name\": \"positive_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 443,
        "solution": "===START===\n```python\ndef largest_neg(list1):\n    # Filter out negative numbers from the list\n    neg_numbers = [num for num in list1 if num < 0]\n    \n    # Return the largest negative number if the list is not empty, otherwise return None\n    return max(neg_numbers) if neg_numbers else None\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the largest negative number from the given list.\n\n### Signature\ndef largest_neg(list1):",
        "timestamp": "2025-10-17T18:00:11.266263",
        "response_time": "3.55",
        "context": "{\"function_name\": \"largest_neg\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 444,
        "solution": "===START===\n```python\ndef trim_tuple(test_list, K):\n    return [tup[K:] for tup in test_list]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to trim each tuple by k in the given tuple list.\n\n### Signature\ndef trim_tuple(test_list, K):",
        "timestamp": "2025-10-17T18:00:12.919359",
        "response_time": "1.65",
        "context": "{\"function_name\": \"trim_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 445,
        "solution": "===START===\n```python\ndef index_multiplication(test_tup1, test_tup2):\n    return tuple(a * b for a, b in zip(test_tup1, test_tup2))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n### Signature\ndef index_multiplication(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T18:00:15.193729",
        "response_time": "2.27",
        "context": "{\"function_name\": \"index_multiplication\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 446,
        "solution": "===START===\nfrom collections import Counter\n\ndef count_Occurrence(tup, lst):\n    # Count occurrences of each element in the tuple\n    tuple_count = Counter(tup)\n    # Count occurrences of each element in the list\n    list_count = Counter(lst)\n    # Combine the counts\n    combined_count = tuple_count + list_count\n    return combined_count\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the occurence of all elements of list in a tuple.\n\n### Signature\ndef count_Occurrence(tup, lst):",
        "timestamp": "2025-10-17T18:00:18.874201",
        "response_time": "3.68",
        "context": "{\"function_name\": \"count_Occurrence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 447,
        "solution": "===START===\n```python\ndef cube_nums(nums):\n    return [num ** 3 for num in nums]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find cubes of individual elements in a list.\n\n### Signature\ndef cube_nums(nums):",
        "timestamp": "2025-10-17T18:00:20.410811",
        "response_time": "1.53",
        "context": "{\"function_name\": \"cube_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 448,
        "solution": "===START===\n```python\ndef cal_sum(n):\n    if n <= 0:\n        return 0\n    \n    # Initialize the first three Perrin numbers\n    perrin = [3, 0, 2]\n    \n    # Calculate Perrin numbers up to the nth number\n    for i in range(3, n):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    \n    # Return the sum of the first n Perrin numbers\n    return sum(perrin[:n])\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the sum of perrin numbers.\n\n### Signature\ndef cal_sum(n):",
        "timestamp": "2025-10-17T18:00:25.917727",
        "response_time": "5.50",
        "context": "{\"function_name\": \"cal_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 450,
        "solution": "===START===\n```python\ndef extract_string(strings, length):\n    return [s for s in strings if len(s) == length]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract specified size of strings from a given list of string values.\n\n### Signature\ndef extract_string(str, l):",
        "timestamp": "2025-10-17T18:00:27.604000",
        "response_time": "1.68",
        "context": "{\"function_name\": \"extract_string\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 451,
        "solution": "===START===\n```python\ndef remove_whitespaces(text1):\n    return ''.join(text1.split())\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove all whitespaces from the given string.\n\n### Signature\ndef remove_whitespaces(text1):",
        "timestamp": "2025-10-17T18:00:29.036385",
        "response_time": "1.43",
        "context": "{\"function_name\": \"remove_whitespaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 452,
        "solution": "===START===\n```python\ndef loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n### Signature\ndef loss_amount(actual_cost,sale_amount):",
        "timestamp": "2025-10-17T18:00:31.256457",
        "response_time": "2.22",
        "context": "{\"function_name\": \"loss_amount\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 453,
        "solution": "===START===\n```python\nimport math\n\ndef sumofFactors(n):\n    res = 1\n    # Remove all factors of 2\n    while n % 2 == 0:\n        n //= 2\n        res *= 2\n        res += 2\n    \n    # n must be odd at this point, so a skip of 2 (i.e., i = i + 2) can be used\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        # While i is a factor of n\n        while n % i == 0:\n            count += 1\n            n //= i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n    \n    # If n is a prime number greater than 2\n    if n >= 2:\n        res *= (1 + n)\n    \n    return res\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of even factors of a number.\n\n### Signature\ndef sumofFactors(n) :",
        "timestamp": "2025-10-17T18:00:40.942982",
        "response_time": "9.68",
        "context": "{\"function_name\": \"sumofFactors\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 454,
        "solution": "===START===\nimport re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.search(pattern, text) is not None\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that matches a word containing 'z'.\n\n### Signature\ndef text_match_wordz(text):",
        "timestamp": "2025-10-17T18:00:43.039730",
        "response_time": "2.09",
        "context": "{\"function_name\": \"text_match_wordz\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 455,
        "solution": "===START===\n```python\ndef check_monthnumb_number(monthnum2):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the given month number is in the list\n    return monthnum2 in months_with_31_days\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given month number contains 31 days or not.\n\n### Signature\ndef check_monthnumb_number(monthnum2):",
        "timestamp": "2025-10-17T18:00:47.237107",
        "response_time": "4.19",
        "context": "{\"function_name\": \"check_monthnumb_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 456,
        "solution": "===START===\n```python\ndef reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to reverse each string in a given list of string values.\n\n### Signature\ndef reverse_string_list(stringlist):",
        "timestamp": "2025-10-17T18:00:48.934895",
        "response_time": "1.70",
        "context": "{\"function_name\": \"reverse_string_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 457,
        "solution": "===START===\n```python\ndef Find_Min(lst):\n    if not lst:\n        return None\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sublist having minimum length.\n\n### Signature\ndef Find_Min(lst):",
        "timestamp": "2025-10-17T18:00:52.556583",
        "response_time": "3.62",
        "context": "{\"function_name\": \"Find_Min\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 458,
        "solution": "===START===\n```python\ndef rectangle_area(l, b):\n    return l * b\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the area of a rectangle.\n\n### Signature\ndef rectangle_area(l,b):",
        "timestamp": "2025-10-17T18:00:53.889848",
        "response_time": "1.33",
        "context": "{\"function_name\": \"rectangle_area\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 459,
        "solution": "===START===\nimport re\n\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]+', '', str1)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove uppercase substrings from a given string.\n\n### Signature\ndef remove_uppercase(str1):",
        "timestamp": "2025-10-17T18:00:55.441437",
        "response_time": "1.55",
        "context": "{\"function_name\": \"remove_uppercase\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 460,
        "solution": "===START===\n```python\ndef Extract(lst):\n    return [sublist[0] for sublist in lst if sublist]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to get the first element of each sublist.\n\n### Signature\ndef Extract(lst):",
        "timestamp": "2025-10-17T18:00:57.019128",
        "response_time": "1.58",
        "context": "{\"function_name\": \"Extract\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 461,
        "solution": "===START===\n```python\ndef upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the upper case characters in a given string.\n\n### Signature\ndef upper_ctr(str):",
        "timestamp": "2025-10-17T18:00:59.180784",
        "response_time": "2.16",
        "context": "{\"function_name\": \"upper_ctr\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 462,
        "solution": "===START===\nfrom itertools import combinations\n\ndef combinations_list(list1):\n    all_combinations = []\n    for r in range(1, len(list1) + 1):\n        all_combinations.extend(combinations(list1, r))\n    return all_combinations\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find all possible combinations of the elements of a given list.\n\n### Signature\ndef combinations_list(list1):",
        "timestamp": "2025-10-17T18:01:01.871006",
        "response_time": "2.69",
        "context": "{\"function_name\": \"combinations_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 463,
        "solution": "===START===\n```python\ndef max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = min_product = result = arr[0]\n\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum product subarray of the given array.\n\n### Signature\ndef max_subarray_product(arr):",
        "timestamp": "2025-10-17T18:01:06.757592",
        "response_time": "4.88",
        "context": "{\"function_name\": \"max_subarray_product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 464,
        "solution": "===START===\n```python\ndef check_value(d, n):\n    if not d:\n        return False\n    first_value = next(iter(d.values()))\n    return all(value == first_value for value in d.values())\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if all values are same in a dictionary.\n\n### Signature\ndef check_value(dict, n):",
        "timestamp": "2025-10-17T18:01:09.114157",
        "response_time": "2.35",
        "context": "{\"function_name\": \"check_value\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 465,
        "solution": "===START===\n```python\ndef drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to drop empty items from a given dictionary.\n\n### Signature\ndef drop_empty(dict1):",
        "timestamp": "2025-10-17T18:01:10.877563",
        "response_time": "1.76",
        "context": "{\"function_name\": \"drop_empty\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 468,
        "solution": "===START===\n```python\nfrom functools import lru_cache\n\ndef max_product(arr):\n    @lru_cache(None)\n    def dp(i):\n        max_prod = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_prod = max(max_prod, dp(j) * arr[i])\n        return max_prod\n\n    return max(dp(i) for i in range(len(arr)))\n\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n### Signature\ndef max_product(arr):",
        "timestamp": "2025-10-17T18:01:15.281852",
        "response_time": "4.40",
        "context": "{\"function_name\": \"max_product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 470,
        "solution": "===START===\n```python\ndef add_pairwise(test_tup):\n    return tuple(a + b for a, b in zip(test_tup, test_tup[1:]))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n### Signature\ndef add_pairwise(test_tup):",
        "timestamp": "2025-10-17T18:01:17.376332",
        "response_time": "2.09",
        "context": "{\"function_name\": \"add_pairwise\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 471,
        "solution": "===START===\n```python\ndef find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the product of the array multiplication modulo n.\n\n### Signature\ndef find_remainder(arr, n):",
        "timestamp": "2025-10-17T18:01:19.597468",
        "response_time": "2.22",
        "context": "{\"function_name\": \"find_remainder\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 472,
        "solution": "===START===\n```python\ndef check_Consecutive(l):\n    if not l:\n        return False\n    sorted_l = sorted(l)\n    return all(sorted_l[i] + 1 == sorted_l[i + 1] for i in range(len(sorted_l) - 1))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\n### Signature\ndef check_Consecutive(l):",
        "timestamp": "2025-10-17T18:01:22.626601",
        "response_time": "3.03",
        "context": "{\"function_name\": \"check_Consecutive\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 473,
        "solution": "===START===\nfrom collections import Counter\n\ndef tuple_intersection(test_list1, test_list2):\n    # Convert each tuple in the lists to a sorted tuple to ensure order doesn't matter\n    sorted_list1 = [tuple(sorted(tup)) for tup in test_list1]\n    sorted_list2 = [tuple(sorted(tup)) for tup in test_list2]\n    \n    # Count occurrences of each tuple in both lists\n    counter1 = Counter(sorted_list1)\n    counter2 = Counter(sorted_list2)\n    \n    # Find intersection of tuples based on their counts\n    intersection = []\n    for tup in counter1:\n        if tup in counter2:\n            # Add the minimum count of the tuple in both lists to the intersection\n            intersection.extend([tup] * min(counter1[tup], counter2[tup]))\n    \n    return intersection\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n### Signature\ndef tuple_intersection(test_list1, test_list2):",
        "timestamp": "2025-10-17T18:01:30.670427",
        "response_time": "8.04",
        "context": "{\"function_name\": \"tuple_intersection\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 474,
        "solution": "===START===\n```python\ndef replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to replace characters in a string.\n\n### Signature\ndef replace_char(str1,ch,newch):",
        "timestamp": "2025-10-17T18:01:32.286463",
        "response_time": "1.61",
        "context": "{\"function_name\": \"replace_char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 475,
        "solution": "===START===\n```python\ndef sort_counter(dict1):\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a dictionary by value.\n\n### Signature\ndef sort_counter(dict1):",
        "timestamp": "2025-10-17T18:01:34.003614",
        "response_time": "1.71",
        "context": "{\"function_name\": \"sort_counter\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 476,
        "solution": "===START===\n```python\ndef big_sum(nums):\n    if not nums:\n        return 0\n    return max(nums) + min(nums)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\n### Signature\ndef big_sum(nums):",
        "timestamp": "2025-10-17T18:01:35.756239",
        "response_time": "1.75",
        "context": "{\"function_name\": \"big_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 477,
        "solution": "===START===\n```python\ndef is_lower(string):\n    return string.lower()\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to convert the given string to lower case.\n\n### Signature\ndef is_lower(string):",
        "timestamp": "2025-10-17T18:01:36.910008",
        "response_time": "1.15",
        "context": "{\"function_name\": \"is_lower\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 478,
        "solution": "===START===\nimport re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove lowercase substrings from a given string.\n\n### Signature\ndef remove_lowercase(str1):",
        "timestamp": "2025-10-17T18:01:38.439557",
        "response_time": "1.53",
        "context": "{\"function_name\": \"remove_lowercase\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 479,
        "solution": "===START===\n```python\ndef first_Digit(n):\n    n = abs(n)  # Ensure the number is positive\n    while n >= 10:\n        n //= 10\n    return n\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the first digit of a given number.\n\n### Signature\ndef first_Digit(n) :",
        "timestamp": "2025-10-17T18:01:40.857715",
        "response_time": "2.42",
        "context": "{\"function_name\": \"first_Digit\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 554,
        "solution": "===START===\n```python\ndef Split(lst):\n    return [x for x in lst if x % 2 != 0]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function which takes a list of integers and only returns the odd ones.\n\n### Signature\ndef Split(list):",
        "timestamp": "2025-10-17T18:01:42.509623",
        "response_time": "1.65",
        "context": "{\"function_name\": \"Split\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 555,
        "solution": "===START===\n```python\ndef difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n### Signature\ndef difference(n) :",
        "timestamp": "2025-10-17T18:01:45.596035",
        "response_time": "3.08",
        "context": "{\"function_name\": \"difference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 556,
        "solution": "===START===\n```python\ndef find_Odd_Pair(A, N):\n    odd_count = 0\n    even_count = 0\n    \n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # XOR of two numbers is odd if one is odd and the other is even\n    odd_pairs = odd_count * even_count\n    return odd_pairs\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of pairs whose xor value is odd.\n\n### Signature\ndef find_Odd_Pair(A,N) :",
        "timestamp": "2025-10-17T18:01:50.282529",
        "response_time": "4.68",
        "context": "{\"function_name\": \"find_Odd_Pair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 557,
        "solution": "===START===\n```python\ndef toggle_string(string):\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to toggle the case of all characters in a string.\n\n### Signature\ndef toggle_string(string):",
        "timestamp": "2025-10-17T18:01:52.110701",
        "response_time": "1.83",
        "context": "{\"function_name\": \"toggle_string\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 558,
        "solution": "===START===\n```python\ndef digit_distance_nums(n1, n2):\n    # Convert numbers to strings to iterate over digits\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # Ensure both numbers have the same length by padding with zeros\n    max_len = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_len)\n    str_n2 = str_n2.zfill(max_len)\n    \n    # Calculate the sum of per-digit differences\n    digit_distance = sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str_n1, str_n2))\n    \n    return digit_distance\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of the per-digit difference between two integers.\n\n### Signature\ndef digit_distance_nums(n1, n2):",
        "timestamp": "2025-10-17T18:01:59.110211",
        "response_time": "7.00",
        "context": "{\"function_name\": \"digit_distance_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 559,
        "solution": "===START===\n```python\ndef max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n\n### Signature\ndef max_sub_array_sum(a, size):",
        "timestamp": "2025-10-17T18:02:03.350012",
        "response_time": "4.24",
        "context": "{\"function_name\": \"max_sub_array_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 560,
        "solution": "===START===\n```python\ndef union_elements(test_tup1, test_tup2):\n    # Combine both tuples\n    combined = test_tup1 + test_tup2\n    # Use a set to find unique elements and then convert to a sorted list\n    result = sorted(set(combined))\n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n\n### Signature\ndef union_elements(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T18:02:06.743555",
        "response_time": "3.39",
        "context": "{\"function_name\": \"union_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 562,
        "solution": "===START===\n```python\ndef Find_Max_Length(lst):\n    if not lst:\n        return 0\n    max_length = 0\n    for sublist in lst:\n        if isinstance(sublist, list):\n            max_length = max(max_length, len(sublist))\n    return max_length\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the length of the longest sublists.\n\n### Signature\ndef Find_Max_Length(lst):",
        "timestamp": "2025-10-17T18:02:09.872884",
        "response_time": "3.13",
        "context": "{\"function_name\": \"Find_Max_Length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 563,
        "solution": "===START===\n```python\nimport re\n\ndef extract_values(text):\n    return re.findall(r'\"(.*?)\"', text)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract values between quotation marks from a string.\n\n### Signature\ndef extract_values(text):",
        "timestamp": "2025-10-17T18:02:11.510909",
        "response_time": "1.64",
        "context": "{\"function_name\": \"extract_values\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 564,
        "solution": "===START===\n```python\ndef count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n### Signature\ndef count_Pairs(arr,n):",
        "timestamp": "2025-10-17T18:02:14.509535",
        "response_time": "3.00",
        "context": "{\"function_name\": \"count_Pairs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 565,
        "solution": "===START===\n```python\ndef split(word):\n    return list(word)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to split a string into characters.\n\n### Signature\ndef split(word):",
        "timestamp": "2025-10-17T18:02:15.606026",
        "response_time": "1.09",
        "context": "{\"function_name\": \"split\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 566,
        "solution": "===START===\n```python\ndef sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to get the sum of the digits of a non-negative integer.\n\n### Signature\ndef sum_digits(n):",
        "timestamp": "2025-10-17T18:02:17.127451",
        "response_time": "1.52",
        "context": "{\"function_name\": \"sum_digits\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 567,
        "solution": "===START===\n```python\ndef issort_list(list1):\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether a specified list is sorted or not.\n\n### Signature\ndef issort_list(list1):",
        "timestamp": "2025-10-17T18:02:19.352080",
        "response_time": "2.22",
        "context": "{\"function_name\": \"issort_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 568,
        "solution": "===START===\n```python\ndef empty_list(length):\n    return [{} for _ in range(length)]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to create a list of N empty dictionaries.\n\n### Signature\ndef empty_list(length):",
        "timestamp": "2025-10-17T18:02:20.728448",
        "response_time": "1.37",
        "context": "{\"function_name\": \"empty_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 569,
        "solution": "===START===\n```python\ndef sort_sublists(list1):\n    return [sorted(sublist) for sublist in list1]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(list1):",
        "timestamp": "2025-10-17T18:02:22.312643",
        "response_time": "1.58",
        "context": "{\"function_name\": \"sort_sublists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 572,
        "solution": "===START===\nfrom typing import List\n\ndef two_unique_nums(nums: List[List[int]]) -> List[int]:\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums.update(num_list)\n    return list(unique_nums)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to remove duplicate numbers from a given number of lists.\n\n### Signature\ndef two_unique_nums(nums):",
        "timestamp": "2025-10-17T18:02:24.816201",
        "response_time": "2.50",
        "context": "{\"function_name\": \"two_unique_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 573,
        "solution": "===START===\nfrom functools import reduce\nfrom operator import mul\n\ndef unique_product(list_data):\n    unique_numbers = set(list_data)\n    return reduce(mul, unique_numbers, 1)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to calculate the product of the unique numbers in a given list.\n\n### Signature\ndef unique_product(list_data):",
        "timestamp": "2025-10-17T18:02:26.938380",
        "response_time": "2.12",
        "context": "{\"function_name\": \"unique_product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 574,
        "solution": "===START===\nimport math\n\ndef surfacearea_cylinder(r, h):\n    return 2 * math.pi * r * (r + h)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the surface area of a cylinder.\n\n### Signature\ndef surfacearea_cylinder(r,h):",
        "timestamp": "2025-10-17T18:02:28.662404",
        "response_time": "1.72",
        "context": "{\"function_name\": \"surfacearea_cylinder\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 576,
        "solution": "===START===\n```python\ndef is_Sub_Array(A, B):\n    n = len(A)\n    m = len(B)\n    \n    if n > m:\n        return False\n    \n    for i in range(m - n + 1):\n        for j in range(n):\n            if A[j] != B[i + j]:\n                break\n        else:\n            return True\n    \n    return False\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether a list is sublist of another or not.\n\n### Signature\ndef is_Sub_Array(A,B):",
        "timestamp": "2025-10-17T18:02:32.626421",
        "response_time": "3.96",
        "context": "{\"function_name\": \"is_Sub_Array\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 577,
        "solution": "===START===\n```python\ndef last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the last digit in factorial of a given number.\n\n### Signature\ndef last_Digit_Factorial(n):",
        "timestamp": "2025-10-17T18:02:35.636206",
        "response_time": "3.01",
        "context": "{\"function_name\": \"last_Digit_Factorial\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 578,
        "solution": "===START===\n```python\ndef interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for item1, item2, item3 in zip(list1, list2, list3):\n        interleaved_list.extend([item1, item2, item3])\n    return interleaved_list\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to interleave 3 lists of the same length into a single flat list.\n\n### Signature\ndef interleave_lists(list1,list2,list3):",
        "timestamp": "2025-10-17T18:02:39.153105",
        "response_time": "3.51",
        "context": "{\"function_name\": \"interleave_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 579,
        "solution": "===START===\n```python\ndef find_dissimilar(test_tup1, test_tup2):\n    # Convert tuples to sets and find the symmetric difference\n    dissimilar_elements = set(test_tup1).symmetric_difference(set(test_tup2))\n    # Convert the set back to a tuple\n    return tuple(dissimilar_elements)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the dissimilar elements in the given two tuples.\n\n### Signature\ndef find_dissimilar(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T18:02:42.832773",
        "response_time": "3.68",
        "context": "{\"function_name\": \"find_dissimilar\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 580,
        "solution": "===START===\nfrom typing import Tuple, Callable\n\ndef even_ele(test_tuple: Tuple, even_fnc: Callable) -> Tuple:\n    def filter_even_elements(sub_tuple):\n        if isinstance(sub_tuple, tuple):\n            return tuple(filter_even_elements(ele) for ele in sub_tuple if even_fnc(ele))\n        return sub_tuple\n\n    return filter_even_elements(test_tuple)\n\n# Example usage:\n# def is_even(x):\n#     return x % 2 == 0\n\n# test_tuple = (1, 2, (3, 4, (5, 6)), 7, (8, 9))\n# result = even_ele(test_tuple, is_even)\n# print(result)  # Output: (2, (4, (6,)), (8,))\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove uneven elements in the nested mixed tuple.\n\n### Signature\ndef even_ele(test_tuple, even_fnc):",
        "timestamp": "2025-10-17T18:02:50.245539",
        "response_time": "7.41",
        "context": "{\"function_name\": \"extract_even\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 581,
        "solution": "===START===\nimport math\n\ndef surface_Area(b, s):\n    # Calculate the slant height using the Pythagorean theorem\n    l = math.sqrt((s**2) + ((b/2)**2))\n    # Calculate the surface area\n    surface_area = b**2 + 2*b*l\n    return surface_area\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\n### Signature\ndef surface_Area(b,s):",
        "timestamp": "2025-10-17T18:02:53.809778",
        "response_time": "3.56",
        "context": "{\"function_name\": \"surface_Area\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 582,
        "solution": "===START===\n```python\ndef my_dict(dict1):\n    return len(dict1) == 0\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if a dictionary is empty\n\n### Signature\ndef my_dict(dict1):",
        "timestamp": "2025-10-17T18:02:55.616976",
        "response_time": "1.80",
        "context": "{\"function_name\": \"my_dict\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 583,
        "solution": "===START===\n```python\ndef catalan_number(num):\n    if num <= 1:\n        return 1\n    \n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    for i in range(2, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[num]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function which returns nth catalan number.\n\n### Signature\ndef catalan_number(num):",
        "timestamp": "2025-10-17T18:03:00.635778",
        "response_time": "5.02",
        "context": "{\"function_name\": \"catalan_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 584,
        "solution": "===START===\nimport re\n\ndef find_adverbs(text):\n    # Regular expression to find adverbs ending with 'ly'\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    \n    # Extract the first match and its position\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    \n    # Return None if no adverb is found\n    return None\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n\n### Signature\ndef find_adverbs(text):",
        "timestamp": "2025-10-17T18:03:05.077685",
        "response_time": "4.44",
        "context": "{\"function_name\": \"find_adverbs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 585,
        "solution": "===START===\nfrom typing import List, Dict\n\ndef expensive_items(items: List[Dict[str, float]], n: int) -> List[Dict[str, float]]:\n    # Sort items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x.get('price', 0), reverse=True)\n    # Return the top n items\n    return sorted_items[:n]\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the n most expensive items in a given dataset.\n\n### Signature\ndef expensive_items(items,n):",
        "timestamp": "2025-10-17T18:03:09.226098",
        "response_time": "4.14",
        "context": "{\"function_name\": \"expensive_items\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 586,
        "solution": "===START===\n```python\ndef split_Arr(l, n):\n    return l[n:] + l[:n]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n\n### Signature\ndef split_Arr(l, n):",
        "timestamp": "2025-10-17T18:03:10.826401",
        "response_time": "1.60",
        "context": "{\"function_name\": \"split_Arr\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 587,
        "solution": "===START===\n```python\ndef list_tuple(listx):\n    return tuple(listx)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a list to a tuple.\n\n### Signature\ndef list_tuple(listx):",
        "timestamp": "2025-10-17T18:03:12.157112",
        "response_time": "1.33",
        "context": "{\"function_name\": \"list_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 588,
        "solution": "===START===\n```python\ndef big_diff(nums):\n    if not nums:\n        return 0\n    return max(nums) - min(nums)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the difference between largest and smallest value in a given list.\n\n### Signature\ndef big_diff(nums):",
        "timestamp": "2025-10-17T18:03:16.292286",
        "response_time": "4.13",
        "context": "{\"function_name\": \"big_diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 589,
        "solution": "===START===\nimport math\n\ndef perfect_squares(a, b):\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    squares = [i**2 for i in range(start, end + 1)]\n    return squares\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find perfect squares between two given numbers.\n\n### Signature\ndef perfect_squares(a, b):",
        "timestamp": "2025-10-17T18:03:19.114340",
        "response_time": "2.82",
        "context": "{\"function_name\": \"perfect_squares\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 590,
        "solution": "===START===\nimport math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert polar coordinates to rectangular coordinates.\n\n### Signature\ndef polar_rect(x,y):",
        "timestamp": "2025-10-17T18:03:21.698354",
        "response_time": "2.58",
        "context": "{\"function_name\": \"polar_rect\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 591,
        "solution": "===START===\n```python\ndef swap_List(newList):\n    # Get the size of the list\n    size = len(newList)\n    \n    # Swap the first and last elements\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    \n    return newList\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to interchange the first and last elements in a list.\n\n### Signature\ndef swap_List(newList):",
        "timestamp": "2025-10-17T18:03:25.343182",
        "response_time": "3.64",
        "context": "{\"function_name\": \"swap_List\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 592,
        "solution": "===START===\nfrom math import comb\n\ndef binomial_Coeff(n, k):\n    return comb(n, k)\n\ndef sum_of_product_of_consecutive_binomial_coeffs(n):\n    total_sum = 0\n    for k in range(n + 1):\n        total_sum += binomial_Coeff(n, k) * binomial_Coeff(n, k + 1)\n    return total_sum\n\n# Example usage:\n# n = 5\n# print(sum_of_product_of_consecutive_binomial_coeffs(n))\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\n### Signature\ndef binomial_Coeff(n,k):",
        "timestamp": "2025-10-17T18:03:30.379424",
        "response_time": "5.03",
        "context": "{\"function_name\": \"sum_Of_product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 593,
        "solution": "===START===\n```python\ndef removezero_ip(ip):\n    return '.'.join(str(int(part)) for part in ip.split('.'))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove leading zeroes from an ip address.\n\n### Signature\ndef removezero_ip(ip):",
        "timestamp": "2025-10-17T18:03:32.216300",
        "response_time": "1.83",
        "context": "{\"function_name\": \"removezero_ip\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 594,
        "solution": "===START===\n```python\ndef diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return None\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the difference of the first even and first odd number of a given list.\n\n### Signature\ndef diff_even_odd(list1):",
        "timestamp": "2025-10-17T18:03:37.960504",
        "response_time": "5.74",
        "context": "{\"function_name\": \"diff_even_odd\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 595,
        "solution": "===START===\n```python\ndef min_Swaps(str1, str2):\n    # Ensure both strings are of the same length\n    if len(str1) != len(str2):\n        raise ValueError(\"Strings must be of the same length\")\n    \n    # Count mismatches\n    mismatches = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            mismatches += 1\n    \n    # Minimum swaps needed is half the number of mismatches\n    return mismatches // 2\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n### Signature\ndef min_Swaps(str1,str2) :",
        "timestamp": "2025-10-17T18:03:43.550164",
        "response_time": "5.59",
        "context": "{\"function_name\": \"min_Swaps\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 596,
        "solution": "===START===\nimport sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the size in bytes of the given tuple.\n\n### Signature\ndef tuple_size(tuple_list):",
        "timestamp": "2025-10-17T18:03:45.115914",
        "response_time": "1.56",
        "context": "{\"function_name\": \"tuple_size\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 597,
        "solution": "===START===\n```python\ndef find_kth(arr1, arr2, k):\n    # Ensure arr1 is the smaller array\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    \n    # If arr1 is empty, return the k-th element from arr2\n    if not arr1:\n        return arr2[k - 1]\n    \n    # If k is 1, return the first element of the merged arrays\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    # Divide k into two parts\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    \n    # Compare the elements at the divided positions\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find kth element from the given two sorted arrays.\n\n### Signature\ndef find_kth(arr1, arr2, k):",
        "timestamp": "2025-10-17T18:03:55.396517",
        "response_time": "10.27",
        "context": "{\"function_name\": \"find_kth\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 598,
        "solution": "===START===\n```python\ndef armstrong_number(number):\n    # Convert the number to a string to easily iterate over digits\n    digits = str(number)\n    # Calculate the number of digits\n    num_digits = len(digits)\n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in digits)\n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == number\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given number is armstrong or not.\n\n### Signature\ndef armstrong_number(number):",
        "timestamp": "2025-10-17T18:04:00.597703",
        "response_time": "5.20",
        "context": "{\"function_name\": \"armstrong_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 599,
        "solution": "===START===\n```python\ndef sum_average(number):\n    if number <= 0:\n        return 0, 0\n    \n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    \n    return total_sum, average\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find sum and average of first n natural numbers.\n\n### Signature\ndef sum_average(number):",
        "timestamp": "2025-10-17T18:04:03.566214",
        "response_time": "2.96",
        "context": "{\"function_name\": \"sum_average\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 600,
        "solution": "===START===\ndef is_Even(n):\n    return n % 2 == 0\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given number is even or not.\n\n### Signature\ndef is_Even(n) :",
        "timestamp": "2025-10-17T18:04:04.817777",
        "response_time": "1.25",
        "context": "{\"function_name\": \"is_Even\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 602,
        "solution": "===START===\n```python\ndef first_repeated_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 0\n    return None\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the first repeated character in a given string.\n\n### Signature\ndef first_repeated_char(str1):",
        "timestamp": "2025-10-17T18:04:07.611088",
        "response_time": "2.79",
        "context": "{\"function_name\": \"first_repeated_char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 603,
        "solution": "===START===\n```python\ndef get_ludic(n):\n    if n < 1:\n        return []\n\n    ludics = list(range(1, n + 1))\n    index = 1\n\n    while index != len(ludics):\n        first_ludic = ludics[index]\n        ludics = [x for i, x in enumerate(ludics) if (i + 1) % first_ludic != 0]\n        index += 1\n\n    return ludics\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\n### Signature\ndef get_ludic(n):",
        "timestamp": "2025-10-17T18:04:12.723000",
        "response_time": "5.11",
        "context": "{\"function_name\": \"get_ludic\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 604,
        "solution": "===START===\n```python\ndef reverse_words(s):\n    return ' '.join(s.split()[::-1])\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to reverse words seperated by spaces in a given string.\n\n### Signature\ndef reverse_words(s):",
        "timestamp": "2025-10-17T18:04:14.156182",
        "response_time": "1.43",
        "context": "{\"function_name\": \"reverse_words\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 605,
        "solution": "===START===\n```python\nimport math\n\ndef prime_num(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given integer is a prime number.\n\n### Signature\ndef prime_num(num):",
        "timestamp": "2025-10-17T18:04:19.287905",
        "response_time": "5.13",
        "context": "{\"function_name\": \"prime_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 606,
        "solution": "===START===\nimport math\n\ndef radian_degree(degree):\n    return math.radians(degree)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert degrees to radians.\n\n### Signature\ndef radian_degree(degree):",
        "timestamp": "2025-10-17T18:04:20.554825",
        "response_time": "1.26",
        "context": "{\"function_name\": \"radian_degree\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 607,
        "solution": "===START===\nimport re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None, None, None\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\n### Signature\ndef find_literals(text, pattern):",
        "timestamp": "2025-10-17T18:04:23.871514",
        "response_time": "3.31",
        "context": "{\"function_name\": \"find_literals\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 608,
        "solution": "===START===\n```python\ndef bell_Number(n):\n    # Create a table to store Bell numbers\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # Base case: Bell(0) is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly put the value of Bell(i, 0)\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # Bell number is the first element of the nth row\n    return bell[n][0]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find nth bell number.\n\n### Signature\ndef bell_Number(n):",
        "timestamp": "2025-10-17T18:04:32.435608",
        "response_time": "8.56",
        "context": "{\"function_name\": \"bell_Number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 610,
        "solution": "===START===\n```python\ndef remove_kth_element(list1, k):\n    if k < 0 or k >= len(list1):\n        raise IndexError(\"Index k is out of range\")\n    return list1[:k] + list1[k+1:]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\n### Signature\ndef remove_kth_element(list1, L):",
        "timestamp": "2025-10-17T18:04:36.188085",
        "response_time": "3.75",
        "context": "{\"function_name\": \"remove_kth_element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 611,
        "solution": "===START===\n```python\ndef max_of_nth(test_list, N):\n    return max(row[N] for row in test_list)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\n### Signature\ndef max_of_nth(test_list, N):",
        "timestamp": "2025-10-17T18:04:38.042623",
        "response_time": "1.85",
        "context": "{\"function_name\": \"max_of_nth\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 612,
        "solution": "===START===\n```python\ndef merge(lst):\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n### Signature\ndef merge(lst):",
        "timestamp": "2025-10-17T18:04:41.942494",
        "response_time": "3.89",
        "context": "{\"function_name\": \"merge\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 614,
        "solution": "===START===\n```python\ndef cummulative_sum(test_list):\n    return sum(test_list)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n### Signature\ndef cummulative_sum(test_list):",
        "timestamp": "2025-10-17T18:04:43.290642",
        "response_time": "1.34",
        "context": "{\"function_name\": \"cummulative_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 615,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[int]]) -> List[float]:\n    averages = []\n    for tup in nums:\n        if tup:  # Check if the tuple is not empty\n            avg = sum(tup) / len(tup)\n            averages.append(avg)\n        else:\n            averages.append(0.0)  # Handle empty tuple case\n    return averages\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\n### Signature\ndef average_tuple(nums):",
        "timestamp": "2025-10-17T18:04:47.451343",
        "response_time": "4.16",
        "context": "{\"function_name\": \"average_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 616,
        "solution": "===START===\n```python\ndef tuple_modulo(test_tup1, test_tup2):\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\n### Signature\ndef tuple_modulo(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T18:04:49.955130",
        "response_time": "2.50",
        "context": "{\"function_name\": \"tuple_modulo\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 617,
        "solution": "===START===\n```python\ndef min_Jumps(steps, d):\n    # Initialize the number of jumps\n    jumps = 0\n    # Start from the origin\n    position = 0\n    \n    # Loop until we reach or exceed the point d\n    while position < d:\n        # Take a jump of the given length\n        position += steps\n        # Increment the jump count\n        jumps += 1\n    \n    return jumps\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n### Signature\ndef min_Jumps(steps, d):",
        "timestamp": "2025-10-17T18:04:58.517630",
        "response_time": "8.56",
        "context": "{\"function_name\": \"min_Jumps\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 618,
        "solution": "===START===\nfrom typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    result = []\n    for a, b in zip(nums1, nums2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero encountered.\")\n        result.append(a / b)\n    \n    return result\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to divide two lists element wise.\n\n### Signature\ndef div_list(nums1,nums2):",
        "timestamp": "2025-10-17T18:05:03.375501",
        "response_time": "4.85",
        "context": "{\"function_name\": \"div_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 619,
        "solution": "===START===\n```python\ndef move_num(test_str):\n    # Separate letters and numbers\n    letters = [char for char in test_str if char.isalpha()]\n    numbers = [char for char in test_str if char.isdigit()]\n    \n    # Combine letters and numbers\n    result = ''.join(letters) + ''.join(numbers)\n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to move all the numbers to the end of the given string.\n\n### Signature\ndef move_num(test_str):",
        "timestamp": "2025-10-17T18:05:07.101371",
        "response_time": "3.72",
        "context": "{\"function_name\": \"move_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 620,
        "solution": "===START===\nfrom typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    \n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n### Signature\ndef largest_subset(a):",
        "timestamp": "2025-10-17T18:05:12.043818",
        "response_time": "4.94",
        "context": "{\"function_name\": \"largest_subset\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 622,
        "solution": "===START===\n```python\ndef get_median(arr1, arr2, n):\n    # Initialize pointers for both arrays\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    \n    # Since the size of both arrays is the same, we will iterate n+1 times\n    count = 0\n    while count < n + 1:\n        count += 1\n        # If all elements of arr1 are exhausted, take the next element from arr2\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        # If all elements of arr2 are exhausted, take the next element from arr1\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        \n        # Compare elements from both arrays and take the smaller one\n        if arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    \n    # The median is the average of the last two elements seen\n    return (m1 + m2) / 2\n\n# Example usage:\n# arr1 = [1, 3, 5]\n# arr2 = [2, 4, 6]\n# n = 3\n# print(get_median(arr1, arr2, n))  # Output: 3.5\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the median of two sorted lists of same size.\n\n### Signature\ndef get_median(arr1, arr2, n):",
        "timestamp": "2025-10-17T18:05:27.216542",
        "response_time": "15.17",
        "context": "{\"function_name\": \"get_median\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 623,
        "solution": "===START===\n```python\ndef nth_nums(nums, n):\n    return [num ** n for num in nums]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to compute the n-th power of each number in a list.\n\n### Signature\ndef nth_nums(nums,n):",
        "timestamp": "2025-10-17T18:05:28.867360",
        "response_time": "1.65",
        "context": "{\"function_name\": \"nth_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 624,
        "solution": "===START===\n```python\ndef is_upper(string):\n    return string.upper()\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to convert a given string to uppercase.\n\n### Signature\ndef is_upper(string):",
        "timestamp": "2025-10-17T18:05:30.223974",
        "response_time": "1.35",
        "context": "{\"function_name\": \"is_upper\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 625,
        "solution": "===START===\n```python\ndef swap_List(newList):\n    # Get the size of the list\n    size = len(newList)\n    \n    # Swap the first and last elements\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    \n    return newList\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to interchange the first and last element in a given list.\n\n### Signature\ndef swap_List(newList):",
        "timestamp": "2025-10-17T18:05:34.914637",
        "response_time": "4.69",
        "context": "{\"function_name\": \"swap_List\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 626,
        "solution": "===START===\nimport math\n\ndef triangle_area(r):\n    # The largest triangle that can be inscribed in a semicircle is a right-angled triangle\n    # with the hypotenuse as the diameter of the semicircle.\n    # Therefore, the base of the triangle is the diameter (2r) and the height is the radius (r).\n    base = 2 * r\n    height = r\n    area = 0.5 * base * height\n    return area\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n### Signature\ndef triangle_area(r) :",
        "timestamp": "2025-10-17T18:05:41.147831",
        "response_time": "6.23",
        "context": "{\"function_name\": \"triangle_area\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 627,
        "solution": "===START===\n```python\ndef find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    if start > end:\n        return start\n    \n    mid = (start + end) // 2\n    \n    if array[mid] == mid + array[0]:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        return find_First_Missing(array, start, mid - 1)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\n### Signature\ndef find_First_Missing(array,start=0,end=None):",
        "timestamp": "2025-10-17T18:05:46.179331",
        "response_time": "5.03",
        "context": "{\"function_name\": \"find_First_Missing\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 628,
        "solution": "===START===\n```python\ndef replace_spaces(string):\n    return string.replace(' ', '%20')\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to replace all spaces in the given string with '%20'.\n\n### Signature\ndef replace_spaces(string):",
        "timestamp": "2025-10-17T18:05:47.650964",
        "response_time": "1.47",
        "context": "{\"function_name\": \"replace_spaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 629,
        "solution": "===START===\n```python\ndef Split(lst):\n    even_numbers = [num for num in lst if num % 2 == 0]\n    return even_numbers\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find even numbers from a list of numbers.\n\n### Signature\ndef Split(list):",
        "timestamp": "2025-10-17T18:05:51.597852",
        "response_time": "3.94",
        "context": "{\"function_name\": \"Split\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 630,
        "solution": "===START===\n```python\ndef adjac(ele, sub=[]):\n    if not sub:\n        sub = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    return [(ele[0] + dx, ele[1] + dy) for dx, dy in sub]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n### Signature\ndef adjac(ele, sub = []):",
        "timestamp": "2025-10-17T18:05:55.773134",
        "response_time": "4.17",
        "context": "{\"function_name\": \"get_coordinates\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 631,
        "solution": "===START===\n```python\ndef replace_spaces(text):\n    return text.replace(' ', '_').replace('_', ' ')\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\n### Signature\ndef replace_spaces(text):",
        "timestamp": "2025-10-17T18:05:57.450897",
        "response_time": "1.67",
        "context": "{\"function_name\": \"replace_spaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 632,
        "solution": "===START===\n```python\ndef move_zero(num_list):\n    non_zero_elements = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    non_zero_elements.extend([0] * zero_count)\n    return non_zero_elements\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to move all zeroes to the end of the given list.\n\n### Signature\ndef move_zero(num_list):",
        "timestamp": "2025-10-17T18:06:00.460977",
        "response_time": "3.01",
        "context": "{\"function_name\": \"move_zero\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 633,
        "solution": "===START===\n```python\ndef pair_xor_Sum(arr, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\n### Signature\ndef pair_xor_Sum(arr,n) :",
        "timestamp": "2025-10-17T18:06:03.532496",
        "response_time": "3.07",
        "context": "{\"function_name\": \"pair_xor_Sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 635,
        "solution": "===START===\n```python\ndef heap_sort(iterable):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(iterable)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        heapify(iterable, i, 0)\n\n    return iterable\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort the given list.\n\n### Signature\ndef heap_sort(iterable):",
        "timestamp": "2025-10-17T18:06:12.951944",
        "response_time": "9.42",
        "context": "{\"function_name\": \"heap_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 637,
        "solution": "===START===\n```python\ndef noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given amount has no profit and no loss\n\n### Signature\ndef noprofit_noloss(actual_cost,sale_amount):",
        "timestamp": "2025-10-17T18:06:14.755869",
        "response_time": "1.80",
        "context": "{\"function_name\": \"noprofit_noloss\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 638,
        "solution": "===START===\nimport math\n\ndef wind_chill(v, t):\n    if v < 4.8 or t > 10:\n        return None\n    wc = 13.12 + 0.6215*t - 11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n    return math.ceil(wc)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n### Signature\ndef wind_chill(v,t):",
        "timestamp": "2025-10-17T18:06:19.500718",
        "response_time": "4.74",
        "context": "{\"function_name\": \"wind_chill\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 639,
        "solution": "===START===\n```python\ndef sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name[0].isupper())\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n### Signature\ndef sample_nam(sample_names):",
        "timestamp": "2025-10-17T18:06:21.424748",
        "response_time": "1.92",
        "context": "{\"function_name\": \"sample_nam\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 640,
        "solution": "===START===\n```python\nimport re\n\ndef remove_parenthesis(items):\n    return re.sub(r'\\([^)]*\\)', '', items)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n\n### Signature\ndef remove_parenthesis(items):",
        "timestamp": "2025-10-17T18:06:23.299266",
        "response_time": "1.87",
        "context": "{\"function_name\": \"remove_parenthesis\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 641,
        "solution": "===START===\n```python\ndef is_nonagonal(n):\n    if n <= 0:\n        return False\n    # Calculate the nth nonagonal number using the formula\n    nonagonal_number = n * (7 * n - 5) // 2\n    return nonagonal_number\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth nonagonal number.\n\n### Signature\ndef is_nonagonal(n):",
        "timestamp": "2025-10-17T18:06:26.549589",
        "response_time": "3.25",
        "context": "{\"function_name\": \"is_nonagonal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 643,
        "solution": "===START===\n```python\nimport re\n\ndef text_match_wordz_middle(text):\n    # Define the regex pattern to match 'z' not at the start or end of the word\n    pattern = r'\\Bz\\B'\n    \n    # Search for the pattern in the text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\n### Signature\ndef text_match_wordz_middle(text):",
        "timestamp": "2025-10-17T18:06:30.594049",
        "response_time": "4.04",
        "context": "{\"function_name\": \"text_match_wordz_middle\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 644,
        "solution": "===START===\n```python\ndef reverse_Array_Upto_K(input, k):\n    # Ensure k is within the bounds of the array\n    k = min(k, len(input) - 1)\n    \n    # Reverse the array from the start up to the k-th position\n    for i in range(k // 2 + 1):\n        input[i], input[k - i] = input[k - i], input[i]\n    \n    return input\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to reverse an array upto a given position.\n\n### Signature\ndef reverse_Array_Upto_K(input, k):",
        "timestamp": "2025-10-17T18:06:35.256524",
        "response_time": "4.66",
        "context": "{\"function_name\": \"reverse_Array_Upto_K\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 720,
        "solution": "===START===\n```python\ndef add_dict_to_tuple(test_tup, test_dict):\n    # Convert the tuple to a list to allow modification\n    temp_list = list(test_tup)\n    # Append the dictionary to the list\n    temp_list.append(test_dict)\n    # Convert the list back to a tuple\n    res = tuple(temp_list)\n    return res\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\n### Signature\ndef add_dict_to_tuple(test_tup, test_dict):",
        "timestamp": "2025-10-17T18:06:39.120887",
        "response_time": "3.86",
        "context": "{\"function_name\": \"add_dict_to_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 721,
        "solution": "===START===\n```python\ndef maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n\n    # Fill the first row\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n\n    # Fill the first column\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n\n    # Fill the rest of the dp table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # The maximum sum of the path from top-left to bottom-right\n    max_sum = dp[N-1][N-1]\n\n    # The number of cells in the path is N*N\n    max_average = max_sum / (N * N)\n    return max_average\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n### Signature\ndef maxAverageOfPath(cost):",
        "timestamp": "2025-10-17T18:06:50.466092",
        "response_time": "11.34",
        "context": "{\"function_name\": \"maxAverageOfPath\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 722,
        "solution": "===START===\n```python\ndef filter_data(students, h, w):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\n### Signature\ndef filter_data(students,h,w):",
        "timestamp": "2025-10-17T18:06:53.008140",
        "response_time": "2.54",
        "context": "{\"function_name\": \"filter_data\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 723,
        "solution": "===START===\n```python\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\n### Signature\ndef count_same_pair(nums1, nums2):",
        "timestamp": "2025-10-17T18:06:55.832495",
        "response_time": "2.82",
        "context": "{\"function_name\": \"count_same_pair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 724,
        "solution": "===START===\n```python\ndef power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\n### Signature\ndef power_base_sum(base, power):",
        "timestamp": "2025-10-17T18:06:57.850679",
        "response_time": "2.01",
        "context": "{\"function_name\": \"power_base_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 725,
        "solution": "===START===\n```python\nimport re\n\ndef extract_quotation(text1):\n    return re.findall(r'\"(.*?)\"', text1)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract values between quotation marks \" \" of the given string.\n\n### Signature\ndef extract_quotation(text1):",
        "timestamp": "2025-10-17T18:06:59.677692",
        "response_time": "1.82",
        "context": "{\"function_name\": \"extract_quotation\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 726,
        "solution": "===START===\n```python\ndef multiply_elements(test_tup):\n    result = tuple(test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1))\n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n### Signature\ndef multiply_elements(test_tup):",
        "timestamp": "2025-10-17T18:07:02.527068",
        "response_time": "2.84",
        "context": "{\"function_name\": \"multiply_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 728,
        "solution": "===START===\n```python\ndef sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n### Signature\ndef sum_list(lst1,lst2):",
        "timestamp": "2025-10-17T18:07:04.453721",
        "response_time": "1.92",
        "context": "{\"function_name\": \"sum_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 730,
        "solution": "===START===\n```python\ndef consecutive_duplicates(nums):\n    if not nums:\n        return []\n    \n    result = [nums[0]]\n    for i in range(1, len(nums)):\n        if nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    \n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove consecutive duplicates of a given list.\n\n### Signature\ndef consecutive_duplicates(nums):",
        "timestamp": "2025-10-17T18:07:07.784913",
        "response_time": "3.33",
        "context": "{\"function_name\": \"consecutive_duplicates\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 731,
        "solution": "===START===\nimport math\n\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\n### Signature\ndef lateralsurface_cone(r,h):",
        "timestamp": "2025-10-17T18:07:10.403216",
        "response_time": "2.61",
        "context": "{\"function_name\": \"lateralsurface_cone\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 732,
        "solution": "===START===\n```python\ndef replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\n### Signature\ndef replace_specialchar(text):",
        "timestamp": "2025-10-17T18:07:12.109052",
        "response_time": "1.70",
        "context": "{\"function_name\": \"replace_specialchar\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 733,
        "solution": "===START===\n```python\ndef find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\n### Signature\ndef find_first_occurrence(A, x):",
        "timestamp": "2025-10-17T18:07:17.472449",
        "response_time": "5.36",
        "context": "{\"function_name\": \"find_first_occurrence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 734,
        "solution": "===START===\n```python\nfrom itertools import combinations\n\ndef sum_Of_Subarray_Prod(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    # Iterate over all possible subarray lengths\n    for length in range(1, n + 1):\n        # Generate all combinations of the current length\n        for combo in combinations(arr, length):\n            # Calculate the product of the current combination\n            product = 1\n            for num in combo:\n                product *= num\n            # Add the product to the total sum\n            total_sum += product\n    \n    return total_sum\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\n### Signature\ndef sum_Of_Subarray_Prod(arr):",
        "timestamp": "2025-10-17T18:07:23.502514",
        "response_time": "6.02",
        "context": "{\"function_name\": \"sum_Of_Subarray_Prod\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 735,
        "solution": "===START===\n```python\ndef set_middle_bits(n):\n    # Find the number of bits in the number\n    num_bits = n.bit_length()\n    \n    # If the number has less than 3 bits, return the number as is\n    if num_bits < 3:\n        return n\n    \n    # Create a mask with all bits set to 1 except the first and last bit\n    mask = (1 << (num_bits - 2)) - 1\n    mask <<= 1\n    \n    # Toggle the middle bits using XOR\n    result = n ^ mask\n    \n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\n### Signature\ndef set_middle_bits(n):",
        "timestamp": "2025-10-17T18:07:29.570878",
        "response_time": "6.06",
        "context": "{\"function_name\": \"toggle_middle_bits\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 736,
        "solution": "===START===\nimport bisect\n\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\n### Signature\ndef left_insertion(a, x):",
        "timestamp": "2025-10-17T18:07:31.140178",
        "response_time": "1.56",
        "context": "{\"function_name\": \"left_insertion\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 737,
        "solution": "===START===\nimport re\n\ndef check_str(string):\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\n### Signature\ndef check_str(string):",
        "timestamp": "2025-10-17T18:07:32.925740",
        "response_time": "1.78",
        "context": "{\"function_name\": \"check_str\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 738,
        "solution": "===START===\n```python\ndef geometric_sum(n):\n    if n < 0:\n        return 0\n    else:\n        return 1 / (pow(2, n)) + geometric_sum(n - 1)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\n### Signature\ndef geometric_sum(n):",
        "timestamp": "2025-10-17T18:07:35.578887",
        "response_time": "2.65",
        "context": "{\"function_name\": \"geometric_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 739,
        "solution": "===START===\nimport math\n\ndef find_Index(n):\n    # The formula to find the index of the smallest triangular number with n digits is:\n    # index = ceil((10^(n-1) - 1) / 2)\n    index = math.ceil((10**(n-1) - 1) / 2)\n    return index\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\n### Signature\ndef find_Index(n):",
        "timestamp": "2025-10-17T18:07:39.329242",
        "response_time": "3.75",
        "context": "{\"function_name\": \"find_Index\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 740,
        "solution": "===START===\n```python\ndef tuple_to_dict(test_tup):\n    res = dict(zip(test_tup[:-1], test_tup[1:]))\n    return res\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\n### Signature\ndef tuple_to_dict(test_tup):",
        "timestamp": "2025-10-17T18:07:41.423811",
        "response_time": "2.08",
        "context": "{\"function_name\": \"tuple_to_dict\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 741,
        "solution": "===START===\n```python\ndef all_Characters_Same(s) :\n    if not s:\n        return True\n    return s.count(s[0]) == len(s)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether all the characters are same or not.\n\n### Signature\ndef all_Characters_Same(s) :",
        "timestamp": "2025-10-17T18:07:43.537703",
        "response_time": "2.11",
        "context": "{\"function_name\": \"all_Characters_Same\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 742,
        "solution": "===START===\nimport math\n\ndef area_tetrahedron(side):\n    return math.sqrt(3) * side ** 2\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to caluclate the area of a tetrahedron.\n\n### Signature\ndef area_tetrahedron(side):",
        "timestamp": "2025-10-17T18:07:45.124600",
        "response_time": "1.58",
        "context": "{\"function_name\": \"area_tetrahedron\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 743,
        "solution": "===START===\n```python\ndef rotate_right(lst, m):\n    n = len(lst)\n    m = m % n  # In case m is greater than n\n    return lst[-m:] + lst[:-m]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\n### Signature\ndef rotate_right(list, m):",
        "timestamp": "2025-10-17T18:07:47.739896",
        "response_time": "2.61",
        "context": "{\"function_name\": \"rotate_right\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 744,
        "solution": "===START===\n```python\ndef check_none(test_tup):\n    return any(item is None for item in test_tup)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given tuple has any none value or not.\n\n### Signature\ndef check_none(test_tup):",
        "timestamp": "2025-10-17T18:07:49.385099",
        "response_time": "1.64",
        "context": "{\"function_name\": \"check_none\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 745,
        "solution": "===START===\n```python\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\n### Signature\ndef divisible_by_digits(startnum, endnum):",
        "timestamp": "2025-10-17T18:07:53.240933",
        "response_time": "3.85",
        "context": "{\"function_name\": \"divisible_by_digits\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 746,
        "solution": "===START===\nimport math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    return (math.pi * r**2) * (a / 360)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\n### Signature\ndef sector_area(r,a):",
        "timestamp": "2025-10-17T18:07:55.683082",
        "response_time": "2.44",
        "context": "{\"function_name\": \"sector_area\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 747,
        "solution": "===START===\n```python\ndef lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Create a 3D table to store lengths of longest common subsequence.\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    \n    # Build the table in bottom-up fashion\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n    \n    # L[m][n][o] contains the length of LCS for X[0..m-1], Y[0..n-1], Z[0..o-1]\n    return L[m][n][o]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n### Signature\ndef lcs_of_three(X, Y, Z):",
        "timestamp": "2025-10-17T18:08:09.115688",
        "response_time": "13.43",
        "context": "{\"function_name\": \"lcs_of_three\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 748,
        "solution": "===START===\nimport re\n\ndef capital_words_spaces(str1):\n    return re.sub(r'(\\b[A-Z][a-z]+)', r' \\1', str1).strip()\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to put spaces between words starting with capital letters in a given string.\n\n### Signature\ndef capital_words_spaces(str1):",
        "timestamp": "2025-10-17T18:08:11.246517",
        "response_time": "2.12",
        "context": "{\"function_name\": \"capital_words_spaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 749,
        "solution": "===START===\n```python\ndef sort_numeric_strings(nums_str):\n    return sorted(nums_str, key=lambda x: int(x))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n### Signature\ndef sort_numeric_strings(nums_str):",
        "timestamp": "2025-10-17T18:08:12.864306",
        "response_time": "1.61",
        "context": "{\"function_name\": \"sort_numeric_strings\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 750,
        "solution": "===START===\n```python\ndef add_tuple(test_list, test_tup):\n    test_list.append(test_tup)\n    return test_list\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to add the given tuple to the given list.\n\n### Signature\ndef add_tuple(test_list, test_tup):",
        "timestamp": "2025-10-17T18:08:14.657673",
        "response_time": "1.79",
        "context": "{\"function_name\": \"add_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 751,
        "solution": "===START===\n```python\ndef check_min_heap_helper(arr, i):\n    n = len(arr)\n    if 2 * i + 1 >= n:  # If the current index is a leaf node\n        return True\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    left_check = arr[i] <= arr[left_child] and check_min_heap_helper(arr, left_child)\n    if right_child < n:\n        right_check = arr[i] <= arr[right_child] and check_min_heap_helper(arr, right_child)\n    else:\n        right_check = True\n    return left_check and right_check\n\ndef is_min_heap(arr):\n    return check_min_heap_helper(arr, 0)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n### Signature\ndef check_min_heap_helper(arr, i):",
        "timestamp": "2025-10-17T18:08:22.183188",
        "response_time": "7.52",
        "context": "{\"function_name\": \"check_min_heap\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 752,
        "solution": "===START===\n```python\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(2, n + 1):\n            a, b = b, a + 2 * b\n        return b\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\n### Signature\ndef jacobsthal_num(n):",
        "timestamp": "2025-10-17T18:08:26.385605",
        "response_time": "4.20",
        "context": "{\"function_name\": \"jacobsthal_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 753,
        "solution": "===START===\n```python\ndef min_k(test_list, K):\n    # Sort the list based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Return the first K elements from the sorted list\n    return sorted_list[:K]\n\n# Test cases\ntest_list = [(3, 5), (1, 2), (4, 1), (2, 8), (5, 10)]\nK = 3\nprint(min_k(test_list, K))  # Output: [(4, 1), (1, 2), (3, 5)]\n\ntest_list = [(10, 20), (3, 4), (5, 6), (7, 8)]\nK = 2\nprint(min_k(test_list, K))  # Output: [(3, 4), (5, 6)]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n### Signature\ndef min_k(test_list, K):",
        "timestamp": "2025-10-17T18:08:35.525005",
        "response_time": "9.13",
        "context": "{\"function_name\": \"min_k\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 754,
        "solution": "===START===\n```python\ndef extract_index_list(l1, l2, l3):\n    common_elements = []\n    min_length = min(len(l1), len(l2), len(l3))\n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\n### Signature\ndef extract_index_list(l1, l2, l3):",
        "timestamp": "2025-10-17T18:08:39.525158",
        "response_time": "4.00",
        "context": "{\"function_name\": \"extract_index_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 755,
        "solution": "===START===\n```python\ndef second_smallest(numbers):\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    \n    first, second = float('inf'), float('inf')\n    \n    for number in numbers:\n        if number < first:\n            first, second = number, first\n        elif first < number < second:\n            second = number\n    \n    if second == float('inf'):\n        raise ValueError(\"List must contain at least two distinct elements\")\n    \n    return second\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the second smallest number in a list.\n\n### Signature\ndef second_smallest(numbers):",
        "timestamp": "2025-10-17T18:08:44.821721",
        "response_time": "5.29",
        "context": "{\"function_name\": \"second_smallest\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 756,
        "solution": "===START===\nimport re\n\ndef text_match_zero_one(text):\n    patterns = 'ab+'\n    if re.search(patterns, text):\n        return True\n    else:\n        return False\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\n### Signature\ndef text_match_zero_one(text):",
        "timestamp": "2025-10-17T18:08:46.973036",
        "response_time": "2.15",
        "context": "{\"function_name\": \"text_match_zero_one\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 757,
        "solution": "===START===\n```python\ndef count_reverse_pairs(test_list):\n    res = 0\n    seen = set()\n    for ele in test_list:\n        if ele[::-1] in seen:\n            res += 1\n        seen.add(ele)\n    return res\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\n### Signature\ndef count_reverse_pairs(test_list):",
        "timestamp": "2025-10-17T18:08:49.899839",
        "response_time": "2.92",
        "context": "{\"function_name\": \"count_reverse_pairs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 758,
        "solution": "===START===\nfrom collections import defaultdict\n\ndef unique_sublists(list1):\n    sublist_count = defaultdict(int)\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        sublist_count[sublist_tuple] += 1\n    return dict(sublist_count)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n### Signature\ndef unique_sublists(list1):",
        "timestamp": "2025-10-17T18:08:52.718818",
        "response_time": "2.81",
        "context": "{\"function_name\": \"unique_sublists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 759,
        "solution": "===START===\nimport re\n\ndef is_decimal(num):\n    # Regular expression to match a decimal number with precision of 2\n    decimal_pattern = re.compile(r\"^\\d+\\.\\d{2}$\")\n    return bool(decimal_pattern.match(num))\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\n### Signature\ndef is_decimal(num):",
        "timestamp": "2025-10-17T18:08:55.331917",
        "response_time": "2.61",
        "context": "{\"function_name\": \"is_decimal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 760,
        "solution": "===START===\n```python\ndef unique_Element(arr):\n    return len(set(arr)) == 1\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\n### Signature\ndef unique_Element(arr):",
        "timestamp": "2025-10-17T18:08:56.717818",
        "response_time": "1.38",
        "context": "{\"function_name\": \"unique_Element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 762,
        "solution": "===START===\n```python\ndef check_monthnumber_number(monthnum3):\n    # List of months with 30 days\n    months_with_30_days = [4, 6, 9, 11]\n    \n    # Check if the given month number is in the list\n    return monthnum3 in months_with_30_days\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n### Signature\ndef check_monthnumber_number(monthnum3):",
        "timestamp": "2025-10-17T18:09:00.556021",
        "response_time": "3.83",
        "context": "{\"function_name\": \"check_monthnumber_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 763,
        "solution": "===START===\n```python\ndef find_min_diff(arr, n):\n    if n < 2:\n        return None  # Not enough elements to form a pair\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n\n    # Iterate through the array and find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\n### Signature\ndef find_min_diff(arr,n):",
        "timestamp": "2025-10-17T18:09:06.182954",
        "response_time": "5.62",
        "context": "{\"function_name\": \"find_min_diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 764,
        "solution": "===START===\n```python\ndef number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count number of digits in a given string.\n\n### Signature\ndef number_ctr(str):",
        "timestamp": "2025-10-17T18:09:08.291583",
        "response_time": "2.10",
        "context": "{\"function_name\": \"number_ctr\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 765,
        "solution": "```python\nimport math\n\n###Signature\ndef is_polite(n):\n    # A number is polite if it can be expressed as the sum of two or more consecutive positive integers.\n    # This is equivalent to checking if the number is not a power of 2.\n    return n & (n - 1) != 0\n\ndef nth_polite_number(n):\n    count = 0\n    i = 1\n    while True:\n        if is_polite(i):\n            count += 1\n            if count == n:\n                return i\n        i += 1\n\n# Example usage:\n# print(nth_polite_number(5))  # Output: 7\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\n### Signature\ndef is_polite(n):",
        "timestamp": "2025-10-17T18:09:14.922517",
        "response_time": "6.63",
        "context": "{\"function_name\": \"is_polite\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 766,
        "solution": "===START===\n```python\ndef pair_wise(l1):\n    return [(l1[i], l1[i+1]) for i in range(len(l1) - 1)]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to return a list of all pairs of consecutive items in a given list.\n\n### Signature\ndef pair_wise(l1):",
        "timestamp": "2025-10-17T18:09:17.230091",
        "response_time": "2.30",
        "context": "{\"function_name\": \"pair_wise\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 767,
        "solution": "===START===\n```python\ndef get_pairs_count(arr, sum):\n    count = 0\n    seen = {}\n    for num in arr:\n        complement = sum - num\n        if complement in seen:\n            count += seen[complement]\n        if num in seen:\n            seen[num] += 1\n        else:\n            seen[num] = 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\n### Signature\ndef get_pairs_count(arr, sum):",
        "timestamp": "2025-10-17T18:09:21.286582",
        "response_time": "4.05",
        "context": "{\"function_name\": \"get_pairs_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 769,
        "solution": "===START===\n```python\ndef Diff(li1, li2):\n    return list(set(li1) - set(li2))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to get the difference between two lists.\n\n### Signature\ndef Diff(li1,li2):",
        "timestamp": "2025-10-17T18:09:22.998080",
        "response_time": "1.71",
        "context": "{\"function_name\": \"Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 770,
        "solution": "===START===\n```python\ndef odd_num_sum(n):\n    total_sum = 0\n    for i in range(n):\n        odd_number = 2 * i + 1\n        total_sum += odd_number ** 4\n    return total_sum\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\n### Signature\ndef odd_num_sum(n) :",
        "timestamp": "2025-10-17T18:09:26.009572",
        "response_time": "3.01",
        "context": "{\"function_name\": \"odd_num_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 771,
        "solution": "===START===\n```python\ndef check_expression(exp):\n    stack = []\n    opening_brackets = \"({[\"\n    closing_brackets = \")}]\"\n    matching_bracket = {')': '(', '}': '{', ']': '['}\n\n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or stack[-1] != matching_bracket[char]:\n                return False\n            stack.pop()\n\n    return not stack\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\n### Signature\ndef check_expression(exp):",
        "timestamp": "2025-10-17T18:09:31.184287",
        "response_time": "5.14",
        "context": "{\"function_name\": \"check_expression\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 772,
        "solution": "===START===\n```python\ndef remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    # Filter out words with length K\n    filtered_words = [word for word in words if len(word) != K]\n    # Join the filtered words back into a string\n    result_str = ' '.join(filtered_words)\n    return result_str\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove all the words with k length in the given string.\n\n### Signature\ndef remove_length(test_str, K):",
        "timestamp": "2025-10-17T18:09:35.287473",
        "response_time": "4.10",
        "context": "{\"function_name\": \"remove_length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 773,
        "solution": "===START===\n```python\ndef occurance_substring(text, pattern):\n    if pattern not in text:\n        return None\n    \n    positions = []\n    start = 0\n    while start < len(text):\n        pos = text.find(pattern, start)\n        if pos != -1:\n            positions.append(pos)\n            start = pos + 1\n        else:\n            break\n    \n    return positions\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n### Signature\ndef occurance_substring(text,pattern):",
        "timestamp": "2025-10-17T18:09:39.390141",
        "response_time": "4.10",
        "context": "{\"function_name\": \"occurance_substring\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 775,
        "solution": "===START===\n```python\ndef odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\n### Signature\ndef odd_position(nums):",
        "timestamp": "2025-10-17T18:09:41.899725",
        "response_time": "2.50",
        "context": "{\"function_name\": \"odd_position\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 776,
        "solution": "===START===\n```python\ndef count_vowels(test_str):\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] not in vowels and (test_str[i - 1] in vowels or test_str[i + 1] in vowels):\n            count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\n### Signature\ndef count_vowels(test_str):",
        "timestamp": "2025-10-17T18:09:46.226889",
        "response_time": "4.32",
        "context": "{\"function_name\": \"count_vowels\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 777,
        "solution": "===START===\nfrom collections import Counter\n\ndef find_sum(arr):\n    # Count the occurrences of each element in the list\n    element_count = Counter(arr)\n    \n    # Calculate the sum of elements that appear only once\n    non_repeated_sum = sum([element for element, count in element_count.items() if count == 1])\n    \n    return non_repeated_sum\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of non-repeated elements in a given list.\n\n### Signature\ndef find_sum(arr):",
        "timestamp": "2025-10-17T18:09:49.959547",
        "response_time": "3.73",
        "context": "{\"function_name\": \"find_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 778,
        "solution": "===START===\nfrom typing import List\n\ndef pack_consecutive_duplicates(list1: List) -> List[List]:\n    if not list1:\n        return []\n    \n    packed_list = []\n    current_sublist = [list1[0]]\n    \n    for element in list1[1:]:\n        if element == current_sublist[-1]:\n            current_sublist.append(element)\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [element]\n    \n    packed_list.append(current_sublist)\n    return packed_list\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\n### Signature\ndef pack_consecutive_duplicates(list1):",
        "timestamp": "2025-10-17T18:09:55.175700",
        "response_time": "5.21",
        "context": "{\"function_name\": \"pack_consecutive_duplicates\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 779,
        "solution": "===START===\nfrom collections import defaultdict\n\ndef unique_sublists(list1):\n    sublist_count = defaultdict(int)\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        sublist_count[sublist_tuple] += 1\n    return dict(sublist_count)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\n### Signature\ndef unique_sublists(list1):",
        "timestamp": "2025-10-17T18:09:58.025067",
        "response_time": "2.84",
        "context": "{\"function_name\": \"unique_sublists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 780,
        "solution": "===START===\nfrom itertools import combinations\n\ndef find_combinations(test_list):\n    res = []\n    for idx in range(1, len(test_list) + 1):\n        for sub in combinations(test_list, idx):\n            res.append(sub)\n    return res\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\n### Signature\ndef find_combinations(test_list):",
        "timestamp": "2025-10-17T18:10:00.764715",
        "response_time": "2.73",
        "context": "{\"function_name\": \"find_combinations\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 781,
        "solution": "===START===\n```python\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count % 2 == 0\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\n### Signature\ndef count_divisors(n) :",
        "timestamp": "2025-10-17T18:10:04.570510",
        "response_time": "3.80",
        "context": "{\"function_name\": \"count_divisors\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 782,
        "solution": "===START===\n```python\ndef odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for i in range(n):\n        # Calculate the number of subarrays in which arr[i] is included\n        count = ((i + 1) * (n - i) + 1) // 2\n        total_sum += count * arr[i]\n    \n    return total_sum\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\n### Signature\ndef odd_length_sum(arr):",
        "timestamp": "2025-10-17T18:10:08.880620",
        "response_time": "4.30",
        "context": "{\"function_name\": \"odd_length_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 783,
        "solution": "===START===\n```python\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n\n    if mx == 0:\n        s = 0\n    else:\n        s = (df / mx) * 100\n\n    v = mx * 100\n\n    return h, s, v\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n### Signature\ndef rgb_to_hsv(r, g, b):",
        "timestamp": "2025-10-17T18:10:19.712171",
        "response_time": "10.83",
        "context": "{\"function_name\": \"rgb_to_hsv\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 784,
        "solution": "===START===\n```python\ndef mul_even_odd(list1):\n    even = None\n    odd = None\n    \n    for num in list1:\n        if even is None and num % 2 == 0:\n            even = num\n        if odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    \n    if even is not None and odd is not None:\n        return even * odd\n    else:\n        return None\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the product of first even and odd number of a given list.\n\n### Signature\ndef mul_even_odd(list1):",
        "timestamp": "2025-10-17T18:10:24.941452",
        "response_time": "5.22",
        "context": "{\"function_name\": \"mul_even_odd\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 785,
        "solution": "===START===\n```python\ndef tuple_str_int(test_str):\n    # Remove parentheses and split the string by commas\n    elements = test_str.strip('()').split(',')\n    # Convert each element to an integer and create a tuple\n    result = tuple(int(element.strip()) for element in elements)\n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert tuple string to integer tuple.\n\n### Signature\ndef tuple_str_int(test_str):",
        "timestamp": "2025-10-17T18:10:28.235811",
        "response_time": "3.29",
        "context": "{\"function_name\": \"tuple_str_int\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 786,
        "solution": "===START===\nimport bisect\n\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\n### Signature\ndef right_insertion(a, x):",
        "timestamp": "2025-10-17T18:10:29.797042",
        "response_time": "1.55",
        "context": "{\"function_name\": \"right_insertion\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 787,
        "solution": "===START===\nimport re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by three 'b'.\n\n### Signature\ndef text_match_three(text):",
        "timestamp": "2025-10-17T18:10:31.958468",
        "response_time": "2.15",
        "context": "{\"function_name\": \"text_match_three\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 788,
        "solution": "===START===\n```python\ndef new_tuple(test_list, test_str):\n    return tuple(test_list) + (test_str,)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to create a new tuple from the given string and list.\n\n### Signature\ndef new_tuple(test_list, test_str):",
        "timestamp": "2025-10-17T18:10:33.566442",
        "response_time": "1.60",
        "context": "{\"function_name\": \"new_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 790,
        "solution": "===START===\n```python\ndef even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether every even index contains even numbers of a given list.\n\n### Signature\ndef even_position(nums):",
        "timestamp": "2025-10-17T18:10:36.102083",
        "response_time": "2.53",
        "context": "{\"function_name\": \"even_position\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 791,
        "solution": "===START===\n```python\ndef remove_nested(test_tup):\n    res = tuple(ele for ele in test_tup if not isinstance(ele, tuple))\n    return res\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove tuples from the given tuple.\n\n### Signature\ndef remove_nested(test_tup):",
        "timestamp": "2025-10-17T18:10:38.064454",
        "response_time": "1.96",
        "context": "{\"function_name\": \"remove_nested\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 792,
        "solution": "===START===\n```python\ndef count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of lists in a given number of lists.\n\n### Signature\ndef count_list(input_list):",
        "timestamp": "2025-10-17T18:10:40.440043",
        "response_time": "2.37",
        "context": "{\"function_name\": \"count_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 793,
        "solution": "===START===\n```python\ndef last(arr, x):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the last position of an element in a sorted array.\n\n### Signature\ndef last(arr,x):",
        "timestamp": "2025-10-17T18:10:45.543074",
        "response_time": "5.10",
        "context": "{\"function_name\": \"last\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 794,
        "solution": "===START===\nimport re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n### Signature\ndef text_starta_endb(text):",
        "timestamp": "2025-10-17T18:10:47.405515",
        "response_time": "1.86",
        "context": "{\"function_name\": \"text_starta_endb\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 796,
        "solution": "===START===\n```python\ndef return_sum(dict):\n    return sum(dict.values())\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite function to find the sum of all items in the given dictionary.\n\n### Signature\ndef return_sum(dict):",
        "timestamp": "2025-10-17T18:10:48.632461",
        "response_time": "1.22",
        "context": "{\"function_name\": \"return_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 797,
        "solution": "===START===\n```python\ndef sum_odd(n):\n    return n * n\n\ndef sum_of_odd_numbers_in_range(l, r):\n    return sum_odd(r) - sum_odd(l - 1)\n\n# Example usage:\n# l = 1, r = 10\n# sum_of_odd_numbers_in_range(1, 10) should return 25 (1 + 3 + 5 + 7 + 9)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\n### Signature\ndef sum_odd(n):",
        "timestamp": "2025-10-17T18:10:53.139979",
        "response_time": "4.50",
        "context": "{\"function_name\": \"sum_in_range\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 798,
        "solution": "===START===\n```python\ndef _sum(arr):\n    return sum(arr)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of an array.\n\n### Signature\ndef _sum(arr):",
        "timestamp": "2025-10-17T18:10:54.283094",
        "response_time": "1.14",
        "context": "{\"function_name\": \"_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 799,
        "solution": "===START===\n```python\ndef left_rotate(n, d):\n    # Ensure d is within the range of 0 to 31\n    d = d % 32\n    # Perform left rotation\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n### Signature\ndef left_rotate(n,d):",
        "timestamp": "2025-10-17T18:10:57.729219",
        "response_time": "3.44",
        "context": "{\"function_name\": \"left_rotate\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 800,
        "solution": "===START===\n```python\ndef remove_all_spaces(text):\n    return ''.join(text.split())\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove all whitespaces from a string.\n\n### Signature\ndef remove_all_spaces(text):",
        "timestamp": "2025-10-17T18:10:59.068383",
        "response_time": "1.33",
        "context": "{\"function_name\": \"remove_all_spaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 801,
        "solution": "===START===\n```python\ndef test_three_equal(x, y, z):\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of equal numbers from three given integers.\n\n### Signature\ndef test_three_equal(x,y,z):",
        "timestamp": "2025-10-17T18:11:01.952685",
        "response_time": "2.88",
        "context": "{\"function_name\": \"test_three_equal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 802,
        "solution": "===START===\n```python\ndef count_rotation(arr):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        if arr[low] <= arr[high]:\n            return low\n        mid = (low + high) // 2\n        next_index = (mid + 1) % len(arr)\n        prev_index = (mid - 1 + len(arr)) % len(arr)\n        if arr[mid] <= arr[next_index] and arr[mid] <= arr[prev_index]:\n            return mid\n        elif arr[mid] <= arr[high]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return 0\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n### Signature\ndef count_rotation(arr):",
        "timestamp": "2025-10-17T18:11:09.086296",
        "response_time": "7.13",
        "context": "{\"function_name\": \"count_rotation\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 803,
        "solution": "===START===\nimport math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\n### Signature\ndef is_perfect_square(n) :",
        "timestamp": "2025-10-17T18:11:11.251172",
        "response_time": "2.16",
        "context": "{\"function_name\": \"is_perfect_square\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 804,
        "solution": "===START===\n```python\ndef is_product_even(arr):\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the product of numbers in a list is even or not.\n\n### Signature\ndef is_product_even(arr):",
        "timestamp": "2025-10-17T18:11:13.600929",
        "response_time": "2.34",
        "context": "{\"function_name\": \"is_product_even\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 805,
        "solution": "===START===\n```python\ndef max_sum_list(lists):\n    if not lists:\n        return None\n    return max(lists, key=sum)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\n### Signature\ndef max_sum_list(lists):",
        "timestamp": "2025-10-17T18:11:15.578158",
        "response_time": "1.97",
        "context": "{\"function_name\": \"max_sum_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 806,
        "solution": "===START===\n```python\ndef max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    \n    return max_run\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find maximum run of uppercase characters in the given string.\n\n### Signature\ndef max_run_uppercase(test_str):",
        "timestamp": "2025-10-17T18:11:19.355898",
        "response_time": "3.77",
        "context": "{\"function_name\": \"max_run_uppercase\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 807,
        "solution": "===START===\n```python\ndef first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the first odd number in a given list of numbers.\n\n### Signature\ndef first_odd(nums):",
        "timestamp": "2025-10-17T18:11:21.418720",
        "response_time": "2.06",
        "context": "{\"function_name\": \"first_odd\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 808,
        "solution": "===START===\n```python\ndef check_K(test_tup, K):\n    return K in test_tup\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given tuples contain the k or not.\n\n### Signature\ndef check_K(test_tup, K):",
        "timestamp": "2025-10-17T18:11:22.896177",
        "response_time": "1.47",
        "context": "{\"function_name\": \"check_K\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_second_half",
        "dataset_row_id": 809,
        "solution": "===START===\n```python\ndef check_smaller(test_tup1, test_tup2):\n    return all(x > y for x, y in zip(test_tup1, test_tup2))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n### Signature\ndef check_smaller(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T18:11:25.286779",
        "response_time": "2.38",
        "context": "{\"function_name\": \"check_smaller\"}"
    }
]