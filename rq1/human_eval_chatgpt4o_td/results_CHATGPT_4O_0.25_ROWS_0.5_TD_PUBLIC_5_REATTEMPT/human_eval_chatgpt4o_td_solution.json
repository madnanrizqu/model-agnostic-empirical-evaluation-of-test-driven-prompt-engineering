[
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 0,
        "solution": "```python\n# ===START===\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()  # Sort the list to make comparison easier\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n\n### Signature\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n\n### Test\nassert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\nassert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\nassert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True",
        "timestamp": "2025-08-15T08:08:15.295123",
        "response_time": "12.15"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 1,
        "solution": "```python\n# ===START===\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    result = []\n    stack = []\n    current_group = \"\"\n    \n    for char in paren_string:\n        current_group += char\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:  # If stack is empty, we have a complete group\n                result.append(current_group)\n                current_group = \"\"\n    \n    return result\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n\n### Signature\ndef separate_paren_groups(paren_string: str) -> List[str]:\n\n### Test\nassert candidate('(()()) ((())) () ((())()())') == [ '(()())', '((()))', '()', '((())()())' ]\nassert candidate('() (()) ((())) (((())))') == [ '()', '(())', '((()))', '(((())))' ]",
        "timestamp": "2025-08-15T08:08:16.960847",
        "response_time": "1.66"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 2,
        "solution": "```python\n===START===\ndef truncate_number(number: float) -> float:\n    # Extract the integer part\n    integer_part = int(number)\n    # Subtract the integer part from the original number to get the decimal part\n    decimal_part = number - integer_part\n    return decimal_part\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n### Signature\ndef truncate_number(number: float) -> float:\n\n### Test\nassert candidate(3.5) == 0.5",
        "timestamp": "2025-08-15T08:08:18.057513",
        "response_time": "1.10"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 3,
        "solution": "```python\n# ===START===\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n\n### Signature\ndef below_zero(operations: List[int]) -> bool:\n\n### Test\nassert candidate([]) == False\nassert candidate([1, 2, -3, 1, 2, -3]) == False\nassert candidate([1, 2, -4, 5, 6]) == True",
        "timestamp": "2025-08-15T08:08:19.488009",
        "response_time": "1.43"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 4,
        "solution": "```python\n# ===START===\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0  # Handle empty list case\n    \n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\n### Signature\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n\n### Test\nassert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6",
        "timestamp": "2025-08-15T08:08:20.760520",
        "response_time": "1.27"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 5,
        "solution": "```python\n# ===START===\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    \n    return result\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n\n### Signature\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n\n### Test\nassert candidate([], 7) == []",
        "timestamp": "2025-08-15T08:08:21.923104",
        "response_time": "1.16"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 6,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def max_depth(s: str) -> int:\n        depth = 0\n        max_depth = 0\n        for char in s:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n\n    groups = paren_string.split()\n    return [max_depth(group) for group in groups]\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n### Signature\ndef parse_nested_parens(paren_string: str) -> List[int]:\n\n### Test\nassert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
        "timestamp": "2025-08-15T08:08:23.637542",
        "response_time": "1.71"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 7,
        "solution": "```python\n# ===START===\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n\n### Signature\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n\n### Test\nassert candidate([], 'john') == []\nassert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']",
        "timestamp": "2025-08-15T08:08:24.864587",
        "response_time": "1.23"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 8,
        "solution": "```python\n===START===\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n\n### Signature\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n\n### Test\nassert candidate([]) == (0, 1)\nassert candidate([1, 1, 1]) == (3, 1)",
        "timestamp": "2025-08-15T08:08:25.915972",
        "response_time": "1.05"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 9,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    max_so_far = numbers[0]\n    result = []\n    \n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    \n    return result\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n\n### Signature\ndef rolling_max(numbers: List[int]) -> List[int]:\n\n### Test\nassert candidate([]) == []\nassert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]",
        "timestamp": "2025-08-15T08:08:27.171285",
        "response_time": "1.25"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 10,
        "solution": "```python\n# ===START===\ndef make_palindrome(string: str) -> str:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    \n    n = len(string)\n    for i in range(n):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string  # This case is redundant since the loop will always return a result.\n\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n\n### Signature\ndef make_palindrome(string: str) -> str:\n\n### Test\nassert candidate('') == ''\nassert candidate('x') == 'x'",
        "timestamp": "2025-08-15T08:08:28.512303",
        "response_time": "1.34"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 11,
        "solution": "===START===\ndef string_xor(a: str, b: str) -> str:\n    # Perform XOR operation on each pair of bits from the two strings\n    result = ''.join('1' if x != y else '0' for x, y in zip(a, b))\n    return result\n===END===",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\n### Signature\ndef string_xor(a: str, b: str) -> str:\n\n### Test\nassert candidate('111000', '101010') == '010010'",
        "timestamp": "2025-08-15T08:08:29.690142",
        "response_time": "1.18"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 12,
        "solution": "```python\n# ===START===\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:  # Check if the list is empty\n        return None\n    # Use max with key as length to find the longest string, default to None for empty list\n    return max(strings, key=len, default=None)\n\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n### Signature\ndef longest(strings: List[str]) -> Optional[str]:\n\n### Test\nassert candidate([]) == None",
        "timestamp": "2025-08-15T08:08:31.081752",
        "response_time": "1.39"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 13,
        "solution": "```python\n===START===\nfrom math import gcd\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return gcd(a, b)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n\n### Signature\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n### Test\nassert candidate(3, 7) == 1\nassert candidate(10, 15) == 5",
        "timestamp": "2025-08-15T08:08:32.182016",
        "response_time": "1.10"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 14,
        "solution": "```python\n# ===START===\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n\n### Signature\ndef all_prefixes(string: str) -> List[str]:\n\n### Test\nassert candidate('') == []",
        "timestamp": "2025-08-15T08:08:33.267725",
        "response_time": "1.08"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 15,
        "solution": "===START===\ndef string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))\n===END===",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n\n### Signature\ndef string_sequence(n: int) -> str:\n\n### Test\nassert candidate(0) == '0'",
        "timestamp": "2025-08-15T08:08:34.472630",
        "response_time": "1.20"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 16,
        "solution": "```python\n# ===START===\ndef count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase and use a set to find distinct characters\n    return len(set(string.lower()))\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n\n### Signature\ndef count_distinct_characters(string: str) -> int:\n\n### Test\nassert candidate('') == 0\nassert candidate('abcde') == 5",
        "timestamp": "2025-08-15T08:08:35.338792",
        "response_time": "0.86"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 17,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    if not music_string.strip():\n        return []\n    notes = music_string.split()\n    return [len(note) for note in notes]\n\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n### Signature\ndef parse_music(music_string: str) -> List[int]:\n\n### Test\nassert candidate('') == []\nassert candidate('o o o o') == [4, 4, 4, 4]",
        "timestamp": "2025-08-15T08:08:36.315094",
        "response_time": "0.97"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 18,
        "solution": "```python\n===START===\ndef how_many_times(string: str, substring: str) -> int:\n    if not string or not substring:\n        return 0\n    \n    count = 0\n    start = 0\n    \n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1  # Move one character forward to allow overlapping matches\n    \n    return count\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n\n### Signature\ndef how_many_times(string: str, substring: str) -> int:\n\n### Test\nassert candidate('', 'x') == 0\nassert candidate('xyxyxyx', 'x') == 4",
        "timestamp": "2025-08-15T08:08:37.674027",
        "response_time": "1.36"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 19,
        "solution": "```python\n===START===\ndef sort_numbers(numbers: str) -> str:\n    # Mapping of number words to their numeric values\n    number_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # If the input string is empty, return it as is\n    if not numbers.strip():\n        return numbers\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Sort the words based on their numeric values\n    sorted_words = sorted(words, key=lambda word: number_map[word])\n    \n    # Join the sorted words back into a string and return\n    return ' '.join(sorted_words)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n\n### Signature\ndef sort_numbers(numbers: str) -> str:\n\n### Test\nassert candidate('') == ''\nassert candidate('three') == 'three'",
        "timestamp": "2025-08-15T08:08:39.487819",
        "response_time": "1.81"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 20,
        "solution": "```python\n===START===\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the numbers to ensure they are in ascending order\n    numbers.sort()\n    # Initialize variables to store the minimum difference and the closest pair\n    min_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n    \n    # Iterate through the sorted list to find the closest pair\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n\n### Signature\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n\n### Test\nassert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\nassert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)",
        "timestamp": "2025-08-15T08:08:41.876265",
        "response_time": "2.39"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 21,
        "solution": "```python\n# ===START===\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    if range_val == 0:\n        return [0.0] * len(numbers)  # Handle edge case where all numbers are the same\n    return [(num - min_val) / range_val for num in numbers]\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\n### Signature\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n\n### Test\nassert candidate([2.0, 49.9]) == [0.0, 1.0]\nassert candidate([100.0, 49.9]) == [1.0, 0.0]",
        "timestamp": "2025-08-15T08:08:43.204101",
        "response_time": "1.33"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 22,
        "solution": "```python\n===START===\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n\n### Signature\ndef filter_integers(values: List[Any]) -> List[int]:\n\n### Test\nassert candidate([]) == []",
        "timestamp": "2025-08-15T08:08:44.072832",
        "response_time": "0.87"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 23,
        "solution": "===START===\ndef strlen(string: str) -> int:\n    return len(string)\n===END===",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n\n### Signature\ndef strlen(string: str) -> int:\n\n### Test\nassert candidate('') == 0",
        "timestamp": "2025-08-15T08:08:44.859421",
        "response_time": "0.78"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 24,
        "solution": "```python\n# ===START===\ndef largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n\n### Signature\ndef largest_divisor(n: int) -> int:\n\n### Test\nassert candidate(3) == 1\nassert candidate(7) == 1",
        "timestamp": "2025-08-15T08:08:45.712474",
        "response_time": "0.85"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 25,
        "solution": "```python\n# ===START===\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n\n### Signature\ndef factorize(n: int) -> List[int]:\n\n### Test\nassert candidate(2) == [2]\nassert candidate(4) == [2, 2]\nassert candidate(8) == [2, 2, 2]\nassert candidate(3 * 19) == [3, 19]",
        "timestamp": "2025-08-15T08:08:46.732132",
        "response_time": "1.02"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 26,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Create a dictionary to count occurrences of each number\n    count = {}\n    for num in numbers:\n        count[num] = count.get(num, 0) + 1\n    \n    # Filter out numbers that occur more than once\n    result = [num for num in numbers if count[num] == 1]\n    \n    return result\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n\n### Signature\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n\n### Test\nassert candidate([]) == []",
        "timestamp": "2025-08-15T08:08:47.897406",
        "response_time": "1.16"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 27,
        "solution": "```python\n===START===\ndef flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n\n### Signature\ndef flip_case(string: str) -> str:\n\n### Test\nassert candidate('') == ''",
        "timestamp": "2025-08-15T08:08:48.776549",
        "response_time": "0.88"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 28,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n\n### Signature\ndef concatenate(strings: List[str]) -> str:\n\n### Test\nassert candidate([]) == ''",
        "timestamp": "2025-08-15T08:08:49.544173",
        "response_time": "0.77"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 29,
        "solution": "```python\n# ===START===\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\n### Signature\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n\n### Test\nassert candidate([], 'john') == []",
        "timestamp": "2025-08-15T08:08:50.352442",
        "response_time": "0.81"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 30,
        "solution": "```python\n===START===\ndef get_positive(l: list) -> list:\n    return [x for x in l if x > 0]\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n\n### Signature\ndef get_positive(l: list):\n\n### Test\nassert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\nassert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]",
        "timestamp": "2025-08-15T08:08:51.069827",
        "response_time": "0.72"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 31,
        "solution": "```python\n# ===START===\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n\n### Signature\ndef is_prime(n):\n\n### Test\nassert candidate(6) == False\nassert candidate(101) == True\nassert candidate(11) == True\nassert candidate(13441) == True\nassert candidate(61) == True\nassert candidate(4) == False",
        "timestamp": "2025-08-15T08:08:52.745146",
        "response_time": "1.67"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 32,
        "solution": "```python\n===START===\nfrom typing import List\nimport math\n\ndef poly(xs: List[float], x: float) -> float:\n    result = 0\n    for i, coeff in enumerate(xs):\n        result += coeff * (x ** i)\n    return result\n\ndef find_zero(xs: List[float]) -> float:\n    # Using Newton's method to find a root\n    def derivative(xs: List[float]) -> List[float]:\n        return [i * xs[i] for i in range(1, len(xs))]\n\n    x = 0  # Initial guess\n    tolerance = 1e-7\n    max_iterations = 1000\n    for _ in range(max_iterations):\n        f_x = poly(xs, x)\n        if abs(f_x) < tolerance:\n            return x\n        f_prime_x = poly(derivative(xs), x)\n        if f_prime_x == 0:\n            raise ValueError(\"Derivative is zero. Newton's method fails.\")\n        x -= f_x / f_prime_x\n    raise ValueError(\"Failed to converge to a root.\")\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\n### Signature\ndef poly(xs: list, x: float):\n\n### Prompt\n     xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n\n### Signature\ndef find_zero(xs: list):\n\n### Test\nassert math.fabs(poly(coeffs, solution)) < 1e-4 ",
        "timestamp": "2025-08-15T08:08:55.145389",
        "response_time": "2.40"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 33,
        "solution": "```python\n# ===START===\ndef sort_third(l: list):\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three.sort()\n    \n    # Replace elements at indices divisible by 3 with sorted values\n    result = l[:]\n    for idx, value in enumerate(divisible_by_three):\n        result[idx * 3] = value\n    \n    return result\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n\n### Signature\ndef sort_third(l: list):\n\n### Test\nassert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\nassert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\nassert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))",
        "timestamp": "2025-08-15T08:08:56.723769",
        "response_time": "1.58"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 34,
        "solution": "```python\n# ===START===\ndef unique(l: list) -> list:\n    # Use set to get unique elements, then sort the result\n    return sorted(set(l))\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n\n### Signature\ndef unique(l: list):\n\n### Test\nassert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123] ",
        "timestamp": "2025-08-15T08:08:57.514515",
        "response_time": "0.79"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 35,
        "solution": "```python\n===START===\ndef max_element(l: list) -> int:\n    return max(l)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\n### Signature\ndef max_element(l: list):\n\n### Test\nassert candidate([1, 2, 3]) == 3",
        "timestamp": "2025-08-15T08:08:58.888039",
        "response_time": "1.37"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 36,
        "solution": "```python\n===START===\ndef fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n\n### Signature\ndef fizz_buzz(n: int):\n\n### Test\nassert candidate(50) == 0\nassert candidate(78) == 2\nassert candidate(79) == 3\nassert candidate(100) == 3",
        "timestamp": "2025-08-15T08:08:59.834436",
        "response_time": "0.94"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 37,
        "solution": "```python\n# ===START===\ndef sort_even(l: list):\n    # Extract the even indices\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    # Extract the values at even indices and sort them\n    sorted_even_values = sorted(l[i] for i in even_indices)\n    \n    # Create a new list with sorted even indices values and original odd indices values\n    result = l[:]\n    for idx, value in zip(even_indices, sorted_even_values):\n        result[idx] = value\n    \n    return result\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n\n### Signature\ndef sort_even(l: list):\n\n### Test\nassert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])",
        "timestamp": "2025-08-15T08:09:01.611331",
        "response_time": "1.77"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 38,
        "solution": "```python\n# ===START===\ndef encode_cyclic(s: str) -> str:\n    encoded = []\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        if len(group) == 3:\n            encoded.append(group[1] + group[2] + group[0])\n        else:\n            encoded.append(group)\n    return ''.join(encoded)\n\ndef decode_cyclic(s: str) -> str:\n    decoded = []\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        if len(group) == 3:\n            decoded.append(group[2] + group[0] + group[1])\n        else:\n            decoded.append(group)\n    return ''.join(decoded)\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    returns encoded string by cycling groups of three characters.\n\n### Signature\ndef encode_cyclic(s: str):\n\n### Prompt\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n\n### Signature\ndef decode_cyclic(s: str):\n\n### Test\nassert candidate(encoded_str) == str ",
        "timestamp": "2025-08-15T08:09:03.831458",
        "response_time": "2.22"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 39,
        "solution": "```python\n# ===START===\nfrom math import isqrt\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, isqrt(num) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    fib_sequence = [0, 1]\n    prime_fibs = []\n    \n    while len(prime_fibs) < n:\n        next_fib = fib_sequence[-1] + fib_sequence[-2]\n        fib_sequence.append(next_fib)\n        if is_prime(next_fib):\n            prime_fibs.append(next_fib)\n    \n    return prime_fibs[n - 1]\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n\n### Signature\ndef prime_fib(n: int):\n\n### Test\nassert candidate(1) == 2\nassert candidate(2) == 3\nassert candidate(3) == 5\nassert candidate(4) == 13\nassert candidate(5) == 89",
        "timestamp": "2025-08-15T08:09:05.356197",
        "response_time": "1.52"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_td",
        "dataset_row_id": 40,
        "solution": "```python\n# ===START===\nfrom typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()  # Sort the list to make it easier to find triplets\n    for i in range(n - 2):\n        # Use two pointers to find the other two numbers\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n### Signature\ndef triples_sum_to_zero(l: list):\n\n### Test\nassert candidate([1, 3, 5, 0]) == False\nassert candidate([1, 3, 5, -1]) == False\nassert candidate([1, 3, -2, 1]) == True\nassert candidate([1, 2, 3, 7]) == False",
        "timestamp": "2025-08-15T08:09:06.747671",
        "response_time": "1.39"
    }
]