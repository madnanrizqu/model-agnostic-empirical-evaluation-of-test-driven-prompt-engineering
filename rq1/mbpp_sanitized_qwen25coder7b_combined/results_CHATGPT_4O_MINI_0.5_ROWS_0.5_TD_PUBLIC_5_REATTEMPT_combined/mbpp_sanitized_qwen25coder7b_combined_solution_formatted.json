[
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 2,
    "solution": "from typing import List, Tuple\n\ndef similar_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> List[int]:\n    # Convert tuples to sets and find the intersection\n    shared_elements = list(set(test_tup1) & set(test_tup2))\n    return shared_elements",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T16:58:13.133993",
    "response_time": "2.99",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 3,
    "solution": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
    "timestamp": "2025-10-17T16:58:14.704172",
    "response_time": "1.57",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 4,
    "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
    "timestamp": "2025-10-17T16:58:15.538859",
    "response_time": "0.83",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 6,
    "solution": "import math\n\ndef differ_At_One_Bit_Pos(x):\n    return x > 0 and (x & (x - 1)) == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
    "timestamp": "2025-10-17T16:58:16.564418",
    "response_time": "1.02",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 7,
    "solution": "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
    "timestamp": "2025-10-17T16:58:17.484869",
    "response_time": "0.92",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 8,
    "solution": "import math\n\ndef square_nums(nums):\n    return [math.pow(num, 2) for num in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
    "timestamp": "2025-10-17T16:58:18.346253",
    "response_time": "0.86",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 9,
    "solution": "import math\n\ndef find_Rotations(str):\n    n = len(str)\n    for i in range(1, n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
    "timestamp": "2025-10-17T16:58:19.744731",
    "response_time": "1.40",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 11,
    "solution": "import re\n\ndef remove_Occ(s, ch):\n    # Remove the first occurrence\n    s = re.sub(re.escape(ch), '', s, count=1)\n    # Remove the last occurrence\n    s = re.sub(re.escape(ch), '', s[::-1], count=1)[::-1]\n    return s",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
    "timestamp": "2025-10-17T16:58:21.609895",
    "response_time": "1.86",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 12,
    "solution": "import numpy as np\n\ndef sort_matrix(M):\n    return M[np.argsort(np.sum(M, axis=1))]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
    "timestamp": "2025-10-17T16:58:22.501703",
    "response_time": "0.89",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 14,
    "solution": "import math\n\ndef find_Volume(l, b, h):\n    return 0.5 * l * b * h",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
    "timestamp": "2025-10-17T16:58:23.425018",
    "response_time": "0.92",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 16,
    "solution": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
    "timestamp": "2025-10-17T16:58:24.582042",
    "response_time": "1.16",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 17,
    "solution": "import math\n\ndef square_perimeter(a):\n    return 4 * a",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
    "timestamp": "2025-10-17T16:58:25.306372",
    "response_time": "0.72",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 18,
    "solution": "import string\n\ndef remove_dirty_chars(string):\n    return list(string)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
    "timestamp": "2025-10-17T16:58:25.957602",
    "response_time": "0.65",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 19,
    "solution": "import collections\n\ndef test_duplicate(arraynums):\n    return len(arraynums) != len(set(arraynums))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
    "timestamp": "2025-10-17T16:58:26.771562",
    "response_time": "0.81",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 20,
    "solution": "import math\n\ndef is_woodall(x):\n    if x <= 0:\n        return False\n    n = int(math.log2(x + 1))\n    return x == (2 ** n - 1) * n",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
    "timestamp": "2025-10-17T16:58:28.185738",
    "response_time": "1.41",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 56,
    "solution": "import math\n\ndef check(num):\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num //= 10\n    return reversed_num\n\ndef is_one_less_than_twice_reverse(num):\n    return num == 2 * rev(num) - 1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
    "timestamp": "2025-10-17T16:58:30.221236",
    "response_time": "2.03",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 57,
    "solution": "from functools import cmp_to_key\n\ndef find_Max_Num(x, y):\n    return int(y + x) - int(x + y)\n\ndef find_Max_Num(arr):\n    arr = [str(num) for num in arr]\n    arr.sort(key=cmp_to_key(compare))\n    max_num = ''.join(arr)\n    return int(max_num)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
    "timestamp": "2025-10-17T16:58:32.120292",
    "response_time": "1.90",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 58,
    "solution": "import operator\n\ndef opposite_Signs(x, y):\n    return operator.xor(x, y) < 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
    "timestamp": "2025-10-17T16:58:33.024401",
    "response_time": "0.90",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 59,
    "solution": "import math\n\ndef is_octagonal(n):\n    if n < 1:\n        return False\n    # The nth octagonal number formula is n * (3n - 2)\n    # Rearranging to solve for n gives a quadratic equation: 3n^2 - 2n - x = 0\n    # Using the quadratic formula to solve for n: n = (2 + sqrt(4 + 24x)) / 6\n    discriminant = 4 + 24 * n\n    if discriminant < 0:\n        return False\n    sqrt_discriminant = math.sqrt(discriminant)\n    n_candidate = (2 + sqrt_discriminant) / 6\n    return n_candidate.is_integer()",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
    "timestamp": "2025-10-17T16:58:36.916476",
    "response_time": "3.89",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 61,
    "solution": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    prefix_sum = 0\n    prefix_sum_dict = defaultdict(int)\n    prefix_sum_dict[0] = 1\n    \n    for char in s:\n        prefix_sum += int(char)\n        count += prefix_sum_dict[prefix_sum - (len(s) - prefix_sum)]\n        prefix_sum_dict[prefix_sum - (len(s) - prefix_sum)] += 1\n    \n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
    "timestamp": "2025-10-17T16:58:39.498981",
    "response_time": "2.58",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 62,
    "solution": "import sys\n\ndef smallest_num(xs):\n    if not xs:\n        return None\n    return min(xs)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
    "timestamp": "2025-10-17T16:58:40.358922",
    "response_time": "0.86",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 63,
    "solution": "import math\n\ndef max_difference(test_list):\n    # Calculate the absolute difference between each pair\n    differences = [abs(a - b) for a, b in test_list]\n    # Return the maximum difference found\n    return max(differences)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
    "timestamp": "2025-10-17T16:58:41.809924",
    "response_time": "1.45",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 64,
    "solution": "import operator\n\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=operator.itemgetter(1))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
    "timestamp": "2025-10-17T16:58:42.669929",
    "response_time": "0.86",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 65,
    "solution": "import functools\n\ndef recursive_list_sum(data_list):\n    return functools.reduce(lambda acc, x: acc + (recursive_list_sum(x) if isinstance(x, list) else x), data_list, 0)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
    "timestamp": "2025-10-17T16:58:43.966370",
    "response_time": "1.29",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 66,
    "solution": "import sys\n\ndef pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
    "timestamp": "2025-10-17T16:58:45.144414",
    "response_time": "1.18",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 67,
    "solution": "from math import factorial\n\ndef bell_number(n):\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        bell[i] = sum(bell[j] * binomial(i - 1, j) for j in range(i))\n    return bell[n]\n\ndef binomial(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
    "timestamp": "2025-10-17T16:58:47.741635",
    "response_time": "2.60",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 68,
    "solution": "import numpy as np\n\ndef is_Monotonic(A):\n    return (np.all(np.diff(A) >= 0) or np.all(np.diff(A) <= 0))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
    "timestamp": "2025-10-17T16:58:48.911417",
    "response_time": "1.17",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 69,
    "solution": "import itertools\n\ndef is_sublist(l, s):\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if list(itertools.islice(l, i, i + len(s))) == s:\n            return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
    "timestamp": "2025-10-17T16:58:50.980598",
    "response_time": "2.07",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 70,
    "solution": "import collections\n\ndef get_equal(Input):\n    # Check if all tuples in the input list have the same length\n    if not Input:  # Check if the input list is empty\n        return True  # An empty list is considered to have equal length tuples\n    \n    # Get the length of the first tuple to compare with others\n    first_tuple_length = len(Input[0])\n    \n    # Use a generator expression to check if all tuples have the same length\n    return all(len(t) == first_tuple_length for t in Input)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
    "timestamp": "2025-10-17T16:58:53.851535",
    "response_time": "2.87",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 71,
    "solution": "import math\n\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
    "timestamp": "2025-10-17T16:58:56.945802",
    "response_time": "3.09",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 72,
    "solution": "def dif_Square(n):\n    # A number can be represented as the difference of two squares if and only if it is not of the form 4k+2\n    return n % 4 != 2",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
    "timestamp": "2025-10-17T16:58:58.410221",
    "response_time": "1.46",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 74,
    "solution": "import collections\n\ndef is_samepatterns(colors, patterns):\n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern and color_to_pattern[color] != pattern:\n            return False\n        if pattern in pattern_to_color and pattern_to_pattern[pattern] != color:\n            return False\n        color_to_pattern[color] = pattern\n        pattern_to_color[pattern] = color\n    \n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
    "timestamp": "2025-10-17T16:59:01.011513",
    "response_time": "2.60",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 75,
    "solution": "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int]], K: int) -> List[Tuple[int]]:\n    result = [tup for tup in test_list if all(x % K == 0 for x in tup)]\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
    "timestamp": "2025-10-17T16:59:02.629467",
    "response_time": "1.62",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 77,
    "solution": "import math\n\ndef is_Diff(n):\n    return n % 11 == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
    "timestamp": "2025-10-17T16:59:03.417389",
    "response_time": "0.79",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 79,
    "solution": "import math\n\ndef word_len(s):\n    return math.ceil(len(s) / 2) != math.floor(len(s) / 2)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
    "timestamp": "2025-10-17T16:59:04.420699",
    "response_time": "1.00",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 80,
    "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
    "timestamp": "2025-10-17T16:59:05.503123",
    "response_time": "1.08",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 82,
    "solution": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
    "timestamp": "2025-10-17T16:59:06.408542",
    "response_time": "0.90",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 83,
    "solution": "import string\n\ndef get_Char(strr):\n    total_ascii = sum(ord(char) for char in strr)\n    result_ascii = total_ascii % 26\n    return chr(result_ascii + ord('a'))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
    "timestamp": "2025-10-17T16:59:07.740168",
    "response_time": "1.33",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 84,
    "solution": "import sys\n\ndef sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
    "timestamp": "2025-10-17T16:59:09.132751",
    "response_time": "1.39",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 85,
    "solution": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
    "timestamp": "2025-10-17T16:59:10.020034",
    "response_time": "0.89",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 86,
    "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
    "timestamp": "2025-10-17T16:59:11.007337",
    "response_time": "0.99",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 87,
    "solution": "import collections\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return collections.ChainMap(dict1, dict2, dict3)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
    "timestamp": "2025-10-17T16:59:12.067897",
    "response_time": "1.06",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 88,
    "solution": "from collections import Counter\n\ndef freq_count(list1):\n    return dict(Counter(list1))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):",
    "timestamp": "2025-10-17T16:59:12.831142",
    "response_time": "0.76",
    "context": "{\"function_name\": \"freq_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 89,
    "solution": "import math\n\ndef closest_num(N):\n    return N - 1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):",
    "timestamp": "2025-10-17T16:59:13.534941",
    "response_time": "0.70",
    "context": "{\"function_name\": \"closest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 90,
    "solution": "import sys\n\ndef len_log(list1):\n    if not list1:\n        return 0\n    return len(max(list1, key=len))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):",
    "timestamp": "2025-10-17T16:59:14.576694",
    "response_time": "1.04",
    "context": "{\"function_name\": \"len_log\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 91,
    "solution": "import re\n\ndef find_substring(str1, sub_str):\n    return bool(re.search(sub_str, str1))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):",
    "timestamp": "2025-10-17T16:59:15.476287",
    "response_time": "0.90",
    "context": "{\"function_name\": \"find_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 92,
    "solution": "import math\n\ndef is_undulating(n):\n    n = str(n)\n    if len(n) < 3 or len(n) % 2 != 0:\n        return False\n    for i in range(2, len(n), 2):\n        if n[i] != n[i-2]:\n            return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):",
    "timestamp": "2025-10-17T16:59:17.445731",
    "response_time": "1.97",
    "context": "{\"function_name\": \"is_undulating\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 93,
    "solution": "import math\n\ndef power(a, b):\n    return math.pow(a, b)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):",
    "timestamp": "2025-10-17T16:59:18.179949",
    "response_time": "0.73",
    "context": "{\"function_name\": \"power\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 94,
    "solution": "import sys\n\ndef index_minimum(test_list):\n    if not test_list:\n        return None\n    return min(test_list, key=lambda x: x[1])[0]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):",
    "timestamp": "2025-10-17T16:59:19.324866",
    "response_time": "1.14",
    "context": "{\"function_name\": \"index_minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 95,
    "solution": "import sys\n\ndef Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_length = sys.maxsize\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):",
    "timestamp": "2025-10-17T16:59:20.933206",
    "response_time": "1.61",
    "context": "{\"function_name\": \"Find_Min_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 96,
    "solution": "import math\n\ndef divisor(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):",
    "timestamp": "2025-10-17T16:59:22.776854",
    "response_time": "1.84",
    "context": "{\"function_name\": \"divisor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 97,
    "solution": "from collections import Counter\n\ndef frequency_lists(list1):\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):",
    "timestamp": "2025-10-17T16:59:23.958304",
    "response_time": "1.18",
    "context": "{\"function_name\": \"frequency_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 98,
    "solution": "import functools\n\ndef multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = functools.reduce(lambda x, y: x * y, numbers)\n    return product / len(numbers)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):",
    "timestamp": "2025-10-17T16:59:25.215190",
    "response_time": "1.26",
    "context": "{\"function_name\": \"multiply_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 99,
    "solution": "import math\n\ndef decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):",
    "timestamp": "2025-10-17T16:59:26.832880",
    "response_time": "1.62",
    "context": "{\"function_name\": \"decimal_to_binary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 100,
    "solution": "import math\n\ndef next_smallest_palindrome(num):\n    # Convert the number to a string to check for palindrome\n    num_str = str(num)\n    # Start checking from the next number\n    for i in range(num + 1, 10**len(num_str)):\n        # Check if the number is a palindrome\n        if str(i) == str(i)[::-1]:\n            return i",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):",
    "timestamp": "2025-10-17T16:59:29.150373",
    "response_time": "2.32",
    "context": "{\"function_name\": \"next_smallest_palindrome\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 101,
    "solution": "import random\n\ndef kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of bounds\")\n    return arr[k-1]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):",
    "timestamp": "2025-10-17T16:59:30.433075",
    "response_time": "1.28",
    "context": "{\"function_name\": \"kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 102,
    "solution": "import re\n\ndef snake_to_camel(word):\n    return re.sub(r'_([a-z])', lambda match: match.group(1).upper(), word)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
    "timestamp": "2025-10-17T16:59:31.525475",
    "response_time": "1.09",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 103,
    "solution": "import math\n\ndef eulerian_num(n, m):\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):",
    "timestamp": "2025-10-17T16:59:33.629931",
    "response_time": "2.10",
    "context": "{\"function_name\": \"eulerian_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 104,
    "solution": "import copy\n\ndef sort_sublists(input_list):\n    sorted_list = copy.deepcopy(input_list)\n    for sublist in sorted_list:\n        sublist.sort()\n    return sorted_list",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):",
    "timestamp": "2025-10-17T16:59:34.756907",
    "response_time": "1.13",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 105,
    "solution": "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return lst.count(True)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):",
    "timestamp": "2025-10-17T16:59:35.582464",
    "response_time": "0.82",
    "context": "{\"function_name\": \"count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 106,
    "solution": "import itertools\n\ndef add_lists(test_list, test_tup):\n    result = tuple(itertools.chain(test_tup, test_list))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):",
    "timestamp": "2025-10-17T16:59:36.610825",
    "response_time": "1.03",
    "context": "{\"function_name\": \"add_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 108,
    "solution": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    return list(heapq.merge(num1, num2, num3))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):",
    "timestamp": "2025-10-17T16:59:37.652275",
    "response_time": "1.04",
    "context": "{\"function_name\": \"merge_sorted_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 109,
    "solution": "import collections\n\ndef odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        if int(s, 2) % 2 != 0:\n            count += 1\n        s = s[-1] + s[:-1]\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):",
    "timestamp": "2025-10-17T16:59:39.440248",
    "response_time": "1.79",
    "context": "{\"function_name\": \"odd_Equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 111,
    "solution": "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    \n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    \n    return list(common_elements)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):",
    "timestamp": "2025-10-17T16:59:41.306487",
    "response_time": "1.86",
    "context": "{\"function_name\": \"common_in_nested_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 113,
    "solution": "import re\n\ndef check_integer(text):\n    # Regular expression to match an integer\n    pattern = r'^[-+]?\\d+$'\n    return bool(re.match(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):",
    "timestamp": "2025-10-17T16:59:42.513091",
    "response_time": "1.21",
    "context": "{\"function_name\": \"check_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 115,
    "solution": "import collections\n\ndef empty_dit(list1):\n    return all(isinstance(item, collections.abc.Mapping) and not item for item in list1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):",
    "timestamp": "2025-10-17T16:59:43.532021",
    "response_time": "1.02",
    "context": "{\"function_name\": \"empty_dit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 116,
    "solution": "import functools\n\ndef tuple_to_int(nums):\n    return functools.reduce(lambda x, y: x * 10 + y, nums)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):",
    "timestamp": "2025-10-17T16:59:44.523888",
    "response_time": "0.99",
    "context": "{\"function_name\": \"tuple_to_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 117,
    "solution": "import numbers\n\ndef list_to_float(test_list):\n    result = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            if isinstance(element, numbers.Number):\n                new_sublist.append(float(element))\n            else:\n                new_sublist.append(element)\n        result.append(new_sublist)\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):",
    "timestamp": "2025-10-17T16:59:46.458925",
    "response_time": "1.93",
    "context": "{\"function_name\": \"list_to_float\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 118,
    "solution": "import re\n\ndef string_to_list(string):\n    return re.split(r'\\s+', string)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):",
    "timestamp": "2025-10-17T16:59:47.210250",
    "response_time": "0.75",
    "context": "{\"function_name\": \"string_to_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 119,
    "solution": "import bisect\n\ndef search(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        # Ensure mid is even to maintain pairs\n        if mid % 2 == 1:\n            mid -= 1\n        # Check if the pair is broken\n        if arr[mid] != arr[mid + 1]:\n            right = mid\n        else:\n            left = mid + 2\n    return arr[left]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):",
    "timestamp": "2025-10-17T16:59:50.114301",
    "response_time": "2.90",
    "context": "{\"function_name\": \"search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 120,
    "solution": "import math\n\ndef max_product_tuple(list1):\n    max_product = float('-inf')\n    for tup in list1:\n        if len(tup) == 2:\n            product = abs(tup[0] * tup[1])\n            if product > max_product:\n                max_product = product\n    return max_product",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):",
    "timestamp": "2025-10-17T16:59:51.993454",
    "response_time": "1.88",
    "context": "{\"function_name\": \"max_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 123,
    "solution": "import math\n\ndef amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        return sum([i for i in range(1, n) if n % i == 0])\n\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner > num and sum_of_divisors(partner) == num:\n            amicable_sum += num + partner\n\n    return amicable_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):",
    "timestamp": "2025-10-17T16:59:54.642542",
    "response_time": "2.65",
    "context": "{\"function_name\": \"amicable_numbers_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 124,
    "solution": "import cmath\n\ndef angle_complex(a, b):\n    complex_num = complex(a, b)\n    return cmath.phase(complex_num)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):",
    "timestamp": "2025-10-17T16:59:55.650540",
    "response_time": "1.01",
    "context": "{\"function_name\": \"angle_complex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 125,
    "solution": "import sys\n\ndef find_length(string):\n    max_diff = 0\n    current_diff = 0\n    min_diff = 0\n    \n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        \n        if current_diff < min_diff:\n            min_diff = current_diff\n        \n        max_diff = max(max_diff, current_diff - min_diff)\n    \n    return max_diff",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):",
    "timestamp": "2025-10-17T16:59:58.131003",
    "response_time": "2.48",
    "context": "{\"function_name\": \"find_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 126,
    "solution": "import math\n\ndef sum(a, b):\n    gcd = math.gcd(a, b)\n    total_sum = 0\n    for i in range(1, gcd + 1):\n        if gcd % i == 0:\n            total_sum += i\n    return total_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):",
    "timestamp": "2025-10-17T16:59:59.794101",
    "response_time": "1.66",
    "context": "{\"function_name\": \"sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 127,
    "solution": "import operator\n\ndef multiply_int(x, y):\n    return operator.mul(x, y)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):",
    "timestamp": "2025-10-17T17:00:00.538592",
    "response_time": "0.74",
    "context": "{\"function_name\": \"multiply_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 128,
    "solution": "import re\n\ndef long_words(n, str):\n    words = re.findall(r'\\b\\w+\\b', str)\n    return [word for word in words if len(word) > n]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):",
    "timestamp": "2025-10-17T17:00:01.785904",
    "response_time": "1.25",
    "context": "{\"function_name\": \"long_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 129,
    "solution": "import numpy as np\n\ndef magic_square_test(my_matrix):\n    n = len(my_matrix)\n    if n == 0 or any(len(row) != n for row in my_matrix):\n        return False\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(my_matrix[0])\n    \n    # Check the sums of the rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check the sums of the columns\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(my_matrix[i][n-1-i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):",
    "timestamp": "2025-10-17T17:00:06.882477",
    "response_time": "5.09",
    "context": "{\"function_name\": \"magic_square_test\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 130,
    "solution": "from collections import Counter\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    count = Counter(nums)\n    max_count = max(count.values())\n    return [num for num, freq in count.items() if freq == max_count]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):",
    "timestamp": "2025-10-17T17:00:08.391053",
    "response_time": "1.51",
    "context": "{\"function_name\": \"max_occurrences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 131,
    "solution": "import re\n\ndef reverse_vowels(str1):\n    vowels = re.findall(r'[aeiouAEIOU]', str1)\n    return re.sub(r'[aeiouAEIOU]', lambda x: vowels.pop(), str1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):",
    "timestamp": "2025-10-17T17:00:09.821674",
    "response_time": "1.43",
    "context": "{\"function_name\": \"reverse_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 132,
    "solution": "import string\n\ndef tup_string(tup1):\n    return ''.join(tup1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):",
    "timestamp": "2025-10-17T17:00:10.550066",
    "response_time": "0.73",
    "context": "{\"function_name\": \"tup_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 133,
    "solution": "import numpy as np\n\ndef sum_negativenum(nums):\n    return np.sum(nums[nums < 0])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):",
    "timestamp": "2025-10-17T17:00:11.416726",
    "response_time": "0.87",
    "context": "{\"function_name\": \"sum_negativenum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 135,
    "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):",
    "timestamp": "2025-10-17T17:00:12.332196",
    "response_time": "0.91",
    "context": "{\"function_name\": \"hexagonal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 137,
    "solution": "import numpy as np\n\ndef zero_count(nums):\n    total_nums = len(nums)\n    zero_nums = np.sum(np.array(nums) == 0)\n    non_zero_nums = total_nums - zero_nums\n    if non_zero_nums == 0:\n        return 0\n    ratio = zero_nums / non_zero_nums\n    return ratio",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):",
    "timestamp": "2025-10-17T17:00:14.283765",
    "response_time": "1.95",
    "context": "{\"function_name\": \"zero_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 138,
    "solution": "import math\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n            if n % 2 == 0:\n                n //= 2\n            else:\n                return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):",
    "timestamp": "2025-10-17T17:00:16.299015",
    "response_time": "2.01",
    "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 139,
    "solution": "import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):",
    "timestamp": "2025-10-17T17:00:17.127598",
    "response_time": "0.83",
    "context": "{\"function_name\": \"circle_circumference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 140,
    "solution": "from typing import List\n\ndef extract_singly(test_list: List[List[int]]) -> set:\n    return set(num for sublist in test_list for num in sublist)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):",
    "timestamp": "2025-10-17T17:00:18.208884",
    "response_time": "1.08",
    "context": "{\"function_name\": \"extract_singly\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 141,
    "solution": "import sys\n\ndef pancake_sort(nums):\n    n = len(nums)\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in nums[0:i]\n        max_index = nums.index(max(nums[:i]))\n        \n        # Move the maximum element to the beginning\n        if max_index != i - 1:\n            # Flip the array from 0 to max_index\n            nums[:max_index+1] = reversed(nums[:max_index+1])\n            # Flip the array from 0 to i-1\n            nums[:i] = reversed(nums[:i])\n    \n    return nums",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):",
    "timestamp": "2025-10-17T17:00:21.611390",
    "response_time": "3.40",
    "context": "{\"function_name\": \"pancake_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 142,
    "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):",
    "timestamp": "2025-10-17T17:00:23.537620",
    "response_time": "1.92",
    "context": "{\"function_name\": \"count_samepair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 143,
    "solution": "import collections\n\ndef find_lists(Input):\n    return sum(isinstance(item, list) for item in Input)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):",
    "timestamp": "2025-10-17T17:00:24.409464",
    "response_time": "0.87",
    "context": "{\"function_name\": \"find_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 145,
    "solution": "import sys\n\ndef max_Abs_Diff(arr):\n    if not arr:\n        return 0\n    \n    min_element = sys.maxsize\n    max_element = -sys.maxsize\n    \n    for num in arr:\n        if num < min_element:\n            min_element = num\n        elif num > max_element:\n            max_element = num\n    \n    return max_element - min_element",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):",
    "timestamp": "2025-10-17T17:00:26.511779",
    "response_time": "2.10",
    "context": "{\"function_name\": \"max_Abs_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 160,
    "solution": "from math import gcd\n\ndef find_solution(a, b, n):\n    if n % gcd(a, b) != 0:\n        return None\n    x = (n // gcd(a, b)) * (b // gcd(a, b))\n    y = (n // gcd(a, b)) * (-a // gcd(a, b))\n    return (x, y)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):",
    "timestamp": "2025-10-17T17:00:28.633488",
    "response_time": "2.12",
    "context": "{\"function_name\": \"find_solution\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 161,
    "solution": "def remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):",
    "timestamp": "2025-10-17T17:00:29.650816",
    "response_time": "1.02",
    "context": "{\"function_name\": \"remove_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 162,
    "solution": "def sum_series(n):\n    return sum(n - 2*i for i in range(n // 2 + 1))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):",
    "timestamp": "2025-10-17T17:00:30.656461",
    "response_time": "1.00",
    "context": "{\"function_name\": \"sum_series\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 163,
    "solution": "import math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon.\n\n    Parameters:\n    s (int): The number of sides of the polygon.\n    l (float): The length of each side of the polygon.\n\n    Returns:\n    float: The area of the polygon.\n    \"\"\"\n    # Calculate the area using the formula: (s * l^2) / (4 * tan(pi / s))\n    area = (s * l ** 2) / (4 * math.tan(math.pi / s))\n    return area",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):",
    "timestamp": "2025-10-17T17:00:33.683987",
    "response_time": "3.02",
    "context": "{\"function_name\": \"area_polygon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 164,
    "solution": "import math\n\ndef are_equivalent(n):\n    total = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef are_div_sums_equal(a, b):\n    return div_sum(a) == div_sum(b)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):",
    "timestamp": "2025-10-17T17:00:35.953760",
    "response_time": "2.27",
    "context": "{\"function_name\": \"are_equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 165,
    "solution": "import string\n\ndef count_char_position(str1):\n    count = 0\n    str1 = str1.lower()\n    for i, char in enumerate(str1):\n        if char in string.ascii_lowercase and string.ascii_lowercase.index(char) == i:\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):",
    "timestamp": "2025-10-17T17:00:37.661909",
    "response_time": "1.71",
    "context": "{\"function_name\": \"count_char_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 166,
    "solution": "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):",
    "timestamp": "2025-10-17T17:00:39.696279",
    "response_time": "2.03",
    "context": "{\"function_name\": \"find_even_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 167,
    "solution": "import math\n\ndef next_power_of_2(n):\n    return 2 ** math.ceil(math.log2(n))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):",
    "timestamp": "2025-10-17T17:00:40.602210",
    "response_time": "0.90",
    "context": "{\"function_name\": \"next_power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 168,
    "solution": "import collections\n\ndef frequency(a, x):\n    return collections.Counter(a)[x]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):",
    "timestamp": "2025-10-17T17:00:41.331600",
    "response_time": "0.73",
    "context": "{\"function_name\": \"frequency\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 170,
    "solution": "import sys\n\ndef sum_range_list(list1, m, n):\n    return sum(list1[m:n+1])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):",
    "timestamp": "2025-10-17T17:00:42.205390",
    "response_time": "0.87",
    "context": "{\"function_name\": \"sum_range_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 171,
    "solution": "import math\n\ndef perimeter_pentagon(a):\n    return 5 * a",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):",
    "timestamp": "2025-10-17T17:00:42.925367",
    "response_time": "0.72",
    "context": "{\"function_name\": \"perimeter_pentagon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 172,
    "solution": "import re\n\ndef count_occurance(s):\n    return len(re.findall('std', s))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):",
    "timestamp": "2025-10-17T17:00:43.712913",
    "response_time": "0.79",
    "context": "{\"function_name\": \"count_occurance\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 222,
    "solution": "import collections\n\ndef check_type(test_tuple):\n    # Check if the tuple is empty\n    if not test_tuple:\n        return True  # An empty tuple is considered to have the same type\n    \n    # Get the type of the first element\n    first_type = type(test_tuple[0])\n    \n    # Check if all elements in the tuple have the same type as the first element\n    for element in test_tuple:\n        if not isinstance(element, first_type):\n            return False\n    \n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):",
    "timestamp": "2025-10-17T17:00:46.410803",
    "response_time": "2.70",
    "context": "{\"function_name\": \"check_type\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 223,
    "solution": "from typing import List\n\ndef binary_search(arr: List[int], n: int, x: int) -> bool:\n    first_occurrence = find_first_occurrence(arr, x, n)\n    if first_occurrence == -1:\n        return False\n    if first_occurrence + n // 2 < n and arr[first_occurrence + n // 2] == x:\n        return True\n    return False\n\ndef find_first_occurrence(arr: List[int], x: int, n: int) -> int:\n    low, high = 0, n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):",
    "timestamp": "2025-10-17T17:00:51.223475",
    "response_time": "4.81",
    "context": "{\"function_name\": \"binary_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 224,
    "solution": "import math\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):",
    "timestamp": "2025-10-17T17:00:52.421690",
    "response_time": "1.20",
    "context": "{\"function_name\": \"count_Set_Bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 226,
    "solution": "def odd_values_string(str):\n    return str[::2]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove the characters which have odd index values of a given string.\n\n### Signature\ndef odd_values_string(str):",
    "timestamp": "2025-10-17T17:00:53.150248",
    "response_time": "0.73",
    "context": "{\"function_name\": \"odd_values_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 227,
    "solution": "import sys\n\ndef min_of_three(a, b, c):\n    return min(a, b, c)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find minimum of three numbers.\n\n### Signature\ndef min_of_three(a,b,c):",
    "timestamp": "2025-10-17T17:00:53.968038",
    "response_time": "0.82",
    "context": "{\"function_name\": \"min_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 228,
    "solution": "import math\n\ndef all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a number with bits set in the given range [l, r]\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    \n    # Apply the mask to the number n\n    masked_n = n & mask\n    \n    # Check if all bits in the range [l, r] are set\n    return masked_n == ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether all the bits are unset in the given range or not.\n\n### Signature\ndef all_Bits_Set_In_The_Given_Range(n,l,r):",
    "timestamp": "2025-10-17T17:00:57.257175",
    "response_time": "3.29",
    "context": "{\"function_name\": \"all_Bits_Set_In_The_Given_Range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 229,
    "solution": "from typing import List\n\ndef re_arrange_array(arr: List[int], n: int) -> List[int]:\n    negative_part = arr[:n]\n    positive_part = arr[n:]\n    \n    negative_part.sort(key=lambda x: x < 0)\n    positive_part.sort(key=lambda x: x >= 0)\n    \n    return negative_part + positive_part",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n### Signature\ndef re_arrange_array(arr, n):",
    "timestamp": "2025-10-17T17:00:59.308793",
    "response_time": "2.05",
    "context": "{\"function_name\": \"re_arrange_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 230,
    "solution": "import re\n\ndef replace_blank(str1, char):\n    return re.sub(r'\\s', char, str1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n### Signature\ndef replace_blank(str1,char):",
    "timestamp": "2025-10-17T17:01:00.205529",
    "response_time": "0.90",
    "context": "{\"function_name\": \"replace_blank\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 232,
    "solution": "import heapq\n\ndef larg_nnum(list1, n):\n    return heapq.nlargest(n, list1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n### Signature\ndef larg_nnum(list1,n):",
    "timestamp": "2025-10-17T17:01:01.086971",
    "response_time": "0.88",
    "context": "{\"function_name\": \"larg_nnum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 233,
    "solution": "import math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cylinder.\n\n### Signature\ndef lateralsuface_cylinder(r,h):",
    "timestamp": "2025-10-17T17:01:02.033436",
    "response_time": "0.94",
    "context": "{\"function_name\": \"lateralsuface_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 234,
    "solution": "import math\n\ndef volume_cube(l):\n    return l ** 3",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the volume of a cube given its side length.\n\n### Signature\ndef volume_cube(l):",
    "timestamp": "2025-10-17T17:01:02.724871",
    "response_time": "0.69",
    "context": "{\"function_name\": \"volume_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 235,
    "solution": "import math\n\ndef even_bit_set_number(n):\n    # Calculate the number of bits in the binary representation of n\n    num_bits = math.floor(math.log2(n)) + 1 if n > 0 else 1\n    \n    # Iterate over the bits, setting even bits to 1\n    for i in range(0, num_bits, 2):\n        n |= (1 << i)\n    \n    return n",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to set all even bits of a given number.\n\n### Signature\ndef even_bit_set_number(n):",
    "timestamp": "2025-10-17T17:01:05.082252",
    "response_time": "2.36",
    "context": "{\"function_name\": \"even_bit_set_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 237,
    "solution": "from collections import defaultdict\n\ndef check_occurences(test_list):\n    result = defaultdict(int)\n    for item in test_list:\n        result[item] += 1\n    return dict(result)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n### Signature\ndef check_occurences(test_list):",
    "timestamp": "2025-10-17T17:01:06.311559",
    "response_time": "1.23",
    "context": "{\"function_name\": \"check_occurences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 238,
    "solution": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of non-empty substrings of a given string.\n\n### Signature\ndef number_of_substrings(str):",
    "timestamp": "2025-10-17T17:01:07.391813",
    "response_time": "1.08",
    "context": "{\"function_name\": \"number_of_substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 239,
    "solution": "from typing import *\nfrom collections import *\n\ndef get_total_number_of_sequences(m,n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(1, m+1):\n        dp[i][1] = i\n    for i in range(1, m+1):\n        for j in range(2, n+1):\n            dp[i][j] = dp[i-1][j] + dp[i//2][j-1]\n    return dp[m][n]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n### Signature\ndef get_total_number_of_sequences(m,n):",
    "timestamp": "2025-10-17T17:01:10.343705",
    "response_time": "2.95",
    "context": "{\"function_name\": \"get_total_number_of_sequences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 240,
    "solution": "import copy\n\ndef replace_list(list1, list2):\n    if list1:  # Check if list1 is not empty\n        list1[-1:] = copy.deepcopy(list2)  # Replace the last element of list1 with list2\n    else:\n        list1.extend(list2)  # If list1 is empty, extend it with list2\n    return list1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\n### Signature\ndef replace_list(list1,list2):",
    "timestamp": "2025-10-17T17:01:12.521640",
    "response_time": "2.18",
    "context": "{\"function_name\": \"replace_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 242,
    "solution": "def count_charac(str1):\n    return len(str1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the total number of characters in a string.\n\n### Signature\ndef count_charac(str1):",
    "timestamp": "2025-10-17T17:01:13.258515",
    "response_time": "0.74",
    "context": "{\"function_name\": \"count_charac\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 244,
    "solution": "import math\n\ndef next_Perfect_Square(N):\n    root = math.isqrt(N)\n    return (root + 1) ** 2",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the next perfect square greater than a given number.\n\n### Signature\ndef next_Perfect_Square(N):",
    "timestamp": "2025-10-17T17:01:14.286794",
    "response_time": "1.03",
    "context": "{\"function_name\": \"next_Perfect_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 245,
    "solution": "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize the arrays to store the maximum sum of increasing and decreasing subsequences\n    inc = arr.copy()\n    dec = arr.copy()\n    \n    # Calculate maximum sum of increasing subsequences\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Calculate maximum sum of decreasing subsequences\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_bitonic_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\n### Signature\ndef max_sum(arr):",
    "timestamp": "2025-10-17T17:01:20.480699",
    "response_time": "6.19",
    "context": "{\"function_name\": \"max_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 246,
    "solution": "import math\n\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot compute the square root of a negative number.\")\n    if number == 0:\n        return 0\n    guess = number / 2.0\n    while True:\n        next_guess = (guess + number / guess) / 2\n        if abs(next_guess - guess) < 1e-10:\n            return next_guess\n        guess = next_guess",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function for computing square roots using the babylonian method.\n\n### Signature\ndef babylonian_squareroot(number):",
    "timestamp": "2025-10-17T17:01:23.236174",
    "response_time": "2.75",
    "context": "{\"function_name\": \"babylonian_squareroot\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 247,
    "solution": "import sys\n\ndef lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n\n### Signature\ndef lps(str):",
    "timestamp": "2025-10-17T17:01:26.628568",
    "response_time": "3.39",
    "context": "{\"function_name\": \"lps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 248,
    "solution": "def harmonic_sum(n):\n    if n <= 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in an integer n and calculates the harmonic sum of n-1.\n\n### Signature\ndef harmonic_sum(n):",
    "timestamp": "2025-10-17T17:01:27.844511",
    "response_time": "1.21",
    "context": "{\"function_name\": \"harmonic_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 249,
    "solution": "import numpy as np\n\ndef intersection_array(array_nums1, array_nums2):\n    return np.intersect1d(array_nums1, array_nums2)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the intersection of two arrays.\n\n### Signature\ndef intersection_array(array_nums1,array_nums2):",
    "timestamp": "2025-10-17T17:01:28.889752",
    "response_time": "1.04",
    "context": "{\"function_name\": \"intersection_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 250,
    "solution": "import collections\n\ndef count_X(tup, x):\n    return collections.Counter(tup)[x]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\n### Signature\ndef count_X(tup, x):",
    "timestamp": "2025-10-17T17:01:29.686832",
    "response_time": "0.79",
    "context": "{\"function_name\": \"count_X\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 251,
    "solution": "import copy\n\ndef insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.extend([element, item])\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\n### Signature\ndef insert_element(list,element):",
    "timestamp": "2025-10-17T17:01:30.769431",
    "response_time": "1.08",
    "context": "{\"function_name\": \"insert_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 252,
    "solution": "import cmath\n\ndef convert(numbers):\n    return [cmath.polar(num) for num in numbers]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to convert complex numbers to polar coordinates.\n\n### Signature\ndef convert(numbers):",
    "timestamp": "2025-10-17T17:01:31.596990",
    "response_time": "0.83",
    "context": "{\"function_name\": \"convert\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 253,
    "solution": "import collections\n\ndef count_integer(list1):\n    return sum(isinstance(item, int) for item in list1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function that returns the number of integer elements in a given list.\n\n### Signature\ndef count_integer(list1):",
    "timestamp": "2025-10-17T17:01:32.996335",
    "response_time": "1.40",
    "context": "{\"function_name\": \"count_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 255,
    "solution": "from itertools import product\n\ndef combinations_colors(l, n):\n    return list(product(l, repeat=n))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\n### Signature\ndef combinations_colors(l, n):",
    "timestamp": "2025-10-17T17:01:34.066907",
    "response_time": "1.07",
    "context": "{\"function_name\": \"combinations_colors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 256,
    "solution": "import math\n\ndef count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n### Signature\ndef count_Primes_nums(n):",
    "timestamp": "2025-10-17T17:01:38.574971",
    "response_time": "4.51",
    "context": "{\"function_name\": \"count_Primes_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 257,
    "solution": "def swap_numbers(a, b):\n    return (b, a)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\n### Signature\ndef swap_numbers(a,b):",
    "timestamp": "2025-10-17T17:01:39.957716",
    "response_time": "1.38",
    "context": "{\"function_name\": \"swap_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 259,
    "solution": "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    return tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to maximize the given two tuples.\n\n### Signature\ndef maximize_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:01:41.532181",
    "response_time": "1.57",
    "context": "{\"function_name\": \"maximize_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 260,
    "solution": "import math\n\ndef newman_prime(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def newman_shanks_williams(n):\n        if n == 0:\n            return 2\n        if n == 1:\n            return 3\n        return (newman_shanks_williams(n - 1) ** 2 + 1) // 2\n\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n + 1:\n                return num\n        num = newman_shanks_williams(num)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n### Signature\ndef newman_prime(n):",
    "timestamp": "2025-10-17T17:01:46.958217",
    "response_time": "5.42",
    "context": "{\"function_name\": \"newman_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 261,
    "solution": "import operator\n\ndef division_elements(test_tup1, test_tup2):\n    result = tuple(map(operator.truediv, test_tup1, test_tup2))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n### Signature\ndef division_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:01:48.197009",
    "response_time": "1.24",
    "context": "{\"function_name\": \"division_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 262,
    "solution": "import math\n\ndef split_two_parts(list1, L):\n    return (list1[:L], list1[L:])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\n### Signature\ndef split_two_parts(list1, L):",
    "timestamp": "2025-10-17T17:01:49.061100",
    "response_time": "0.86",
    "context": "{\"function_name\": \"split_two_parts\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 264,
    "solution": "import math\n\ndef dog_age(h_age):\n    if h_age < 0:\n        raise ValueError(\"Age cannot be negative.\")\n    elif h_age <= 2:\n        d_age = h_age * 10.5\n    else:\n        d_age = 21 + (h_age - 2) * 4\n    return math.floor(d_age)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate a dog's age in dog's years.\n\n### Signature\ndef dog_age(h_age):",
    "timestamp": "2025-10-17T17:01:51.123729",
    "response_time": "2.06",
    "context": "{\"function_name\": \"dog_age\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 265,
    "solution": "import math\n\ndef list_split(S, step):\n    return [S[i:i+step] for i in range(0, len(S), step)]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\n### Signature\ndef list_split(S, step):",
    "timestamp": "2025-10-17T17:01:52.196359",
    "response_time": "1.07",
    "context": "{\"function_name\": \"list_split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 266,
    "solution": "import math\n\ndef lateralsurface_cube(l):\n    return 4 * l * l",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cube given its side length.\n\n### Signature\ndef lateralsurface_cube(l):",
    "timestamp": "2025-10-17T17:01:52.946434",
    "response_time": "0.75",
    "context": "{\"function_name\": \"lateralsurface_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 267,
    "solution": "def square_Sum(n):\n    return sum((2*i + 1)**2 for i in range(n))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n### Signature\ndef square_Sum(n):",
    "timestamp": "2025-10-17T17:01:53.904710",
    "response_time": "0.96",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 268,
    "solution": "def find_star_num(n):\n    return n * (5 * n - 3) // 2",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n'th star number.\n\n### Signature\ndef find_star_num(n):",
    "timestamp": "2025-10-17T17:01:54.847084",
    "response_time": "0.94",
    "context": "{\"function_name\": \"find_star_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 269,
    "solution": "import string\n\ndef ascii_value(k):\n    return ord(k)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the ascii value of a character.\n\n### Signature\ndef ascii_value(k):",
    "timestamp": "2025-10-17T17:01:55.460250",
    "response_time": "0.61",
    "context": "{\"function_name\": \"ascii_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 270,
    "solution": "import math\n\ndef sum_even_and_even_index(arr):\n    return sum(x for i, x in enumerate(arr) if i % 2 == 0 and x % 2 == 0)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of even numbers at even positions of a list.\n\n### Signature\ndef sum_even_and_even_index(arr):",
    "timestamp": "2025-10-17T17:01:56.710119",
    "response_time": "1.25",
    "context": "{\"function_name\": \"sum_even_and_even_index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 271,
    "solution": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    return total_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n### Signature\ndef even_Power_Sum(n):",
    "timestamp": "2025-10-17T17:01:58.379161",
    "response_time": "1.67",
    "context": "{\"function_name\": \"even_Power_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 272,
    "solution": "def rear_extract(test_list):\n    return [tup[-1] for tup in test_list]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n### Signature\ndef rear_extract(test_list):",
    "timestamp": "2025-10-17T17:01:59.276997",
    "response_time": "0.90",
    "context": "{\"function_name\": \"rear_extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 273,
    "solution": "import operator\n\ndef substract_elements(test_tup1, test_tup2):\n    result = tuple(map(operator.sub, test_tup1, test_tup2))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n### Signature\ndef substract_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:02:00.494596",
    "response_time": "1.22",
    "context": "{\"function_name\": \"substract_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 274,
    "solution": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    return sum(math.comb(n, k) for k in range(0, n+1, 2))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n### Signature\ndef even_binomial_Coeff_Sum( n):",
    "timestamp": "2025-10-17T17:02:01.687006",
    "response_time": "1.19",
    "context": "{\"function_name\": \"even_binomial_Coeff_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 276,
    "solution": "import math\n\ndef volume_cylinder(r, h):\n    return math.pi * r**2 * h",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n\n### Signature\ndef volume_cylinder(r,h):",
    "timestamp": "2025-10-17T17:02:02.505029",
    "response_time": "0.82",
    "context": "{\"function_name\": \"volume_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 277,
    "solution": "import collections\n\ndef dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n### Signature\ndef dict_filter(dict,n):",
    "timestamp": "2025-10-17T17:02:03.496501",
    "response_time": "0.99",
    "context": "{\"function_name\": \"dict_filter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 278,
    "solution": "from typing import Tuple\n\ndef count_first_elements(test_tup: Tuple) -> int:\n    for index, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return index\n    return 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n\n### Signature\ndef count_first_elements(test_tup):",
    "timestamp": "2025-10-17T17:02:04.881993",
    "response_time": "1.38",
    "context": "{\"function_name\": \"count_first_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 279,
    "solution": "import math\n\ndef is_num_decagonal(n):\n    if n < 1:\n        return False\n    # The nth decagonal number formula is 4n^2 - 3n\n    decagonal_number = 4 * n ** 2 - 3 * n\n    return decagonal_number == n",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth decagonal number.\n\n### Signature\ndef is_num_decagonal(n):",
    "timestamp": "2025-10-17T17:02:06.785483",
    "response_time": "1.90",
    "context": "{\"function_name\": \"is_num_decagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 280,
    "solution": "import sys\n\ndef sequential_search(dlist, item):\n    for index, element in enumerate(dlist):\n        if element == item:\n            return True, index\n    return False, -1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n### Signature\ndef sequential_search(dlist, item):",
    "timestamp": "2025-10-17T17:02:08.048625",
    "response_time": "1.26",
    "context": "{\"function_name\": \"sequential_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 281,
    "solution": "import collections\n\ndef all_unique(test_list):\n    return len(test_list) == len(set(test_list))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check if the elements of a given list are unique or not.\n\n### Signature\ndef all_unique(test_list):",
    "timestamp": "2025-10-17T17:02:08.873741",
    "response_time": "0.82",
    "context": "{\"function_name\": \"all_unique\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 282,
    "solution": "import operator\n\ndef sub_list(nums1, nums2):\n    return list(map(operator.sub, nums1, nums2))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to subtract two lists element-wise.\n\n### Signature\ndef sub_list(nums1,nums2):",
    "timestamp": "2025-10-17T17:02:09.770514",
    "response_time": "0.89",
    "context": "{\"function_name\": \"sub_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 283,
    "solution": "import collections\n\ndef validate(n):\n    digit_count = collections.Counter(str(n))\n    for digit, count in digit_count.items():\n        if int(digit) < count:\n            return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n### Signature\ndef validate(n):",
    "timestamp": "2025-10-17T17:02:11.103104",
    "response_time": "1.33",
    "context": "{\"function_name\": \"validate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 284,
    "solution": "import itertools\n\ndef check_element(lst, element):\n    return all(item == element for item in lst)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\n### Signature\ndef check_element(list,element):",
    "timestamp": "2025-10-17T17:02:11.913265",
    "response_time": "0.81",
    "context": "{\"function_name\": \"check_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 285,
    "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = 'ab{2,3}'\n    return bool(re.search(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n### Signature\ndef text_match_two_three(text):",
    "timestamp": "2025-10-17T17:02:12.910300",
    "response_time": "1.00",
    "context": "{\"function_name\": \"text_match_two_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 286,
    "solution": "import sys\n\ndef max_sub_array_sum_repeated(a, n, k):\n    max_current = max_global = -sys.maxsize - 1\n    for i in range(n * k):\n        max_current = max(a[i % n], max_current + a[i % n])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n### Signature\ndef max_sub_array_sum_repeated(a, n, k):",
    "timestamp": "2025-10-17T17:02:15.033706",
    "response_time": "2.12",
    "context": "{\"function_name\": \"max_sub_array_sum_repeated\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 287,
    "solution": "def square_Sum(n):\n    return sum((2*i)**2 for i in range(1, n+1))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n### Signature\ndef square_Sum(n):",
    "timestamp": "2025-10-17T17:02:16.044769",
    "response_time": "1.01",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 290,
    "solution": "import sys\n\ndef max_length(list1):\n    max_len = -sys.maxsize - 1\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = [sublist]\n        elif len(sublist) == max_len:\n            max_list.append(sublist)\n    return max_list",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the list of maximum length in a list of lists.\n\n### Signature\ndef max_length(list1):",
    "timestamp": "2025-10-17T17:02:18.211290",
    "response_time": "2.16",
    "context": "{\"function_name\": \"max_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 291,
    "solution": "from math import pow\n\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    mod = 1000000007\n    same = k\n    diff = k * (k - 1)\n    total = same + diff\n    for i in range(3, n + 1):\n        same = diff\n        diff = total * (k - 1)\n        total = (same + diff) % mod\n    return total",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n### Signature\ndef count_no_of_ways(n, k):",
    "timestamp": "2025-10-17T17:02:21.295137",
    "response_time": "3.08",
    "context": "{\"function_name\": \"count_no_of_ways\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 292,
    "solution": "import math\n\ndef find(n, m):\n    return math.floor(n / m)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n### Signature\ndef find(n,m):",
    "timestamp": "2025-10-17T17:02:22.017237",
    "response_time": "0.72",
    "context": "{\"function_name\": \"find\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 293,
    "solution": "import math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w**2 + h**2)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the third side of a right angled triangle.\n\n### Signature\ndef otherside_rightangle(w,h):",
    "timestamp": "2025-10-17T17:02:22.902435",
    "response_time": "0.88",
    "context": "{\"function_name\": \"otherside_rightangle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 294,
    "solution": "import functools\n\ndef max_val(listval):\n    return functools.reduce(lambda a, b: a if a > b else b, listval)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum value in a given heterogeneous list.\n\n### Signature\ndef max_val(listval):",
    "timestamp": "2025-10-17T17:02:23.904011",
    "response_time": "1.00",
    "context": "{\"function_name\": \"max_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 295,
    "solution": "import math\n\ndef sum_div(number):\n    if number <= 0:\n        return 0\n    \n    divisors_sum = 1  # 1 is a divisor of all numbers\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            divisors_sum += i\n            if i != number // i:\n                divisors_sum += number // i\n    return divisors_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to return the sum of all divisors of a number.\n\n### Signature\ndef sum_div(number):",
    "timestamp": "2025-10-17T17:02:26.387397",
    "response_time": "2.48",
    "context": "{\"function_name\": \"sum_div\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 296,
    "solution": "import sys\n\ndef get_Inv_Count(arr):\n    def merge_sort_and_count(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        mid = len(arr) // 2\n        left, left_count = merge_sort_and_count(arr[:mid])\n        right, right_count = merge_sort_and_count(arr[mid:])\n        merged, split_count = merge_and_count(left, right)\n        return merged, left_count + right_count + split_count\n\n    def merge_and_count(left, right):\n        result = []\n        i = j = inv_count = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result, inv_count\n\n    _, count = merge_sort_and_count(arr)\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count inversions in an array.\n\n### Signature\ndef get_Inv_Count(arr):",
    "timestamp": "2025-10-17T17:02:31.635752",
    "response_time": "5.25",
    "context": "{\"function_name\": \"get_Inv_Count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 297,
    "solution": "from collections import deque\n\ndef flatten_list(list1):\n    flattened = []\n    queue = deque([list1])\n    \n    while queue:\n        current = queue.popleft()\n        if isinstance(current, list):\n            queue.extendleft(reversed(current))\n        else:\n            flattened.append(current)\n    \n    return flattened",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to flatten a given nested list structure.\n\n### Signature\ndef flatten_list(list1):",
    "timestamp": "2025-10-17T17:02:33.418758",
    "response_time": "1.78",
    "context": "{\"function_name\": \"flatten_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 299,
    "solution": "import heapq\n\ndef max_aggregate(stdata):\n    return heapq.nlargest(1, stdata, key=sum)[0]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\n### Signature\ndef max_aggregate(stdata):",
    "timestamp": "2025-10-17T17:02:34.392294",
    "response_time": "0.97",
    "context": "{\"function_name\": \"max_aggregate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 300,
    "solution": "from math import comb\n\ndef count_binary_seq(n):\n    count = 0\n    for i in range(n + 1):\n        count += comb(n, i) ** 2\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n### Signature\ndef count_binary_seq(n):",
    "timestamp": "2025-10-17T17:02:35.749998",
    "response_time": "1.36",
    "context": "{\"function_name\": \"count_binary_seq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 301,
    "solution": "import collections\n\ndef dict_depth(d):\n    if isinstance(d, collections.abc.Mapping):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the depth of a dictionary.\n\n### Signature\ndef dict_depth(d):",
    "timestamp": "2025-10-17T17:02:37.083781",
    "response_time": "1.33",
    "context": "{\"function_name\": \"dict_depth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 304,
    "solution": "def find_Element(arr, ranges, rotations, index):\n    for i in range(rotations - 1, -1, -1):\n        left, right = ranges[i]\n        if left <= index <= right:\n            if index == left:\n                index = right\n            else:\n                index -= 1\n    return arr[index]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find element at a given index after number of rotations.\n\n### Signature\ndef find_Element(arr,ranges,rotations,index) :",
    "timestamp": "2025-10-17T17:02:39.171012",
    "response_time": "2.08",
    "context": "{\"function_name\": \"find_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 305,
    "solution": "import random\n\ndef start_withp(words):\n    p_words = [word for word in words if word.startswith('p')]\n    if len(p_words) < 2:\n        return None\n    return random.sample(p_words, 2)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to return two words from a list of words starting with letter 'p'.\n\n### Signature\ndef start_withp(words):",
    "timestamp": "2025-10-17T17:02:40.605065",
    "response_time": "1.43",
    "context": "{\"function_name\": \"start_withp\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 306,
    "solution": "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    # Initialize a list to store the maximum sum of increasing subsequence\n    dp = [0] * n\n    \n    # Base case: the maximum sum subsequence ending at index 0 is just the element at index 0\n    dp[0] = a[0]\n    \n    # Fill the dp array\n    for i in range(1, n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + a[i]:\n                dp[i] = dp[j] + a[i]\n    \n    # Include the kth element in the subsequence\n    max_sum = dp[index] + a[k]\n    \n    return max_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\n### Signature\ndef max_sum_increasing_subseq(a, n, index, k):",
    "timestamp": "2025-10-17T17:02:45.179118",
    "response_time": "4.57",
    "context": "{\"function_name\": \"max_sum_increasing_subseq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 307,
    "solution": "import copy\n\ndef colon_tuplex(tuplex, m, n):\n    return copy.deepcopy(tuplex[m:n])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to get a colon of a tuple.\n\n### Signature\ndef colon_tuplex(tuplex,m,n):",
    "timestamp": "2025-10-17T17:02:46.093636",
    "response_time": "0.91",
    "context": "{\"function_name\": \"colon_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 308,
    "solution": "import heapq\n\ndef large_product(nums1, nums2, N):\n    # Create a min heap to keep track of the largest products\n    min_heap = []\n    \n    # Iterate through both lists and calculate the product\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            # If the heap is not full, add the current product\n            if len(min_heap) < N:\n                heapq.heappush(min_heap, product)\n            # If the current product is larger than the smallest in the heap, replace it\n            elif product > min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, product)\n    \n    # The heap contains the N largest products\n    return sorted(min_heap, reverse=True)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n### Signature\ndef large_product(nums1, nums2, N):",
    "timestamp": "2025-10-17T17:02:50.263702",
    "response_time": "4.17",
    "context": "{\"function_name\": \"large_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 309,
    "solution": "def maximum(a, b):\n    return max(a, b)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the maximum of two numbers.\n\n### Signature\ndef maximum(a,b):",
    "timestamp": "2025-10-17T17:02:51.017248",
    "response_time": "0.75",
    "context": "{\"function_name\": \"maximum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 310,
    "solution": "def string_to_tuple(str1):\n    return tuple(str1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a given string to a tuple of characters.\n\n### Signature\ndef string_to_tuple(str1):",
    "timestamp": "2025-10-17T17:02:51.759886",
    "response_time": "0.74",
    "context": "{\"function_name\": \"string_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 311,
    "solution": "import math\n\ndef set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    return n | (1 << (int(math.log2(n)) + 1))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to set the left most unset bit.\n\n### Signature\ndef set_left_most_unset_bit(n):",
    "timestamp": "2025-10-17T17:02:53.052634",
    "response_time": "1.29",
    "context": "{\"function_name\": \"set_left_most_unset_bit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 312,
    "solution": "import math\n\ndef volume_cone(r, h):\n    return (1/3) * math.pi * r**2 * h",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the volume of a cone.\n\n### Signature\ndef volume_cone(r,h):",
    "timestamp": "2025-10-17T17:02:54.042183",
    "response_time": "0.99",
    "context": "{\"function_name\": \"volume_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 388,
    "solution": "import math\n\ndef highest_Power_of_2(n):\n    return 2 ** math.floor(math.log2(n))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\n### Signature\ndef highest_Power_of_2(n):",
    "timestamp": "2025-10-17T17:02:54.923767",
    "response_time": "0.88",
    "context": "{\"function_name\": \"highest_Power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 389,
    "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n'th lucas number.\n\n### Signature\ndef find_lucas(n):",
    "timestamp": "2025-10-17T17:02:57.028381",
    "response_time": "2.10",
    "context": "{\"function_name\": \"find_lucas\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 390,
    "solution": "import string\n\ndef add_string(list_, string):\n    return [string.format(item) for item in list_]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to apply a given format string to all of the elements in a list.\n\n### Signature\ndef add_string(list_, string):",
    "timestamp": "2025-10-17T17:02:57.879575",
    "response_time": "0.85",
    "context": "{\"function_name\": \"add_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 391,
    "solution": "from typing import List, Dict\n\ndef convert_list_dictionary(l1: List, l2: List, l3: List) -> Dict:\n    result = {}\n    for key1, key2, value in zip(l1, l2, l3):\n        if key1 not in result:\n            result[key1] = {}\n        if key2 not in result[key1]:\n            result[key1][key2] = value\n        else:\n            result[key1][key2].append(value)\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert more than one list to nested dictionary.\n\n### Signature\ndef convert_list_dictionary(l1, l2, l3):",
    "timestamp": "2025-10-17T17:03:00.667688",
    "response_time": "2.79",
    "context": "{\"function_name\": \"convert_list_dictionary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 392,
    "solution": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef get_max_sum (n):\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n### Signature\ndef get_max_sum (n):",
    "timestamp": "2025-10-17T17:03:02.601172",
    "response_time": "1.93",
    "context": "{\"function_name\": \"get_max_sum \"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 393,
    "solution": "import sys\n\ndef max_length_list(input_list):\n    max_length = -sys.maxsize - 1\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the list with maximum length.\n\n### Signature\ndef max_length_list(input_list):",
    "timestamp": "2025-10-17T17:03:04.352374",
    "response_time": "1.75",
    "context": "{\"function_name\": \"max_length_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 394,
    "solution": "import collections\n\ndef check_distinct(test_tup):\n    # Using collections.Counter to count occurrences of each element\n    counter = collections.Counter(test_tup)\n    # If all counts are 1, it means there are no duplicates\n    return all(count == 1 for count in counter.values())",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if given tuple contains no duplicates.\n\n### Signature\ndef check_distinct(test_tup):",
    "timestamp": "2025-10-17T17:03:06.090818",
    "response_time": "1.74",
    "context": "{\"function_name\": \"check_distinct\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 395,
    "solution": "import collections\n\ndef first_non_repeating_character(str1):\n    char_count = collections.Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the first non-repeated character in a given string.\n\n### Signature\ndef first_non_repeating_character(str1):",
    "timestamp": "2025-10-17T17:03:07.510305",
    "response_time": "1.42",
    "context": "{\"function_name\": \"first_non_repeating_character\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 396,
    "solution": "import string\n\ndef check_char(string):\n    if len(string) == 0:\n        return False\n    return string[0] == string[-1]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given string starts and ends with the same character or not.\n\n### Signature\ndef check_char(string):",
    "timestamp": "2025-10-17T17:03:08.597050",
    "response_time": "1.08",
    "context": "{\"function_name\": \"check_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 397,
    "solution": "import statistics\n\ndef median_numbers(a, b, c):\n    return statistics.median([a, b, c])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the median of three numbers.\n\n### Signature\ndef median_numbers(a,b,c):",
    "timestamp": "2025-10-17T17:03:09.450013",
    "response_time": "0.85",
    "context": "{\"function_name\": \"median_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 398,
    "solution": "import functools\n\ndef sum_of_digits(nums):\n    return [functools.reduce(lambda x, y: int(x) + int(y), str(num)) for num in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to compute the sum of digits of each number of a given list.\n\n### Signature\ndef sum_of_digits(nums):",
    "timestamp": "2025-10-17T17:03:10.601586",
    "response_time": "1.15",
    "context": "{\"function_name\": \"sum_of_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 399,
    "solution": "import operator\n\ndef bitwise_xor(test_tup1, test_tup2):\n    result = tuple(map(operator.xor, test_tup1, test_tup2))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\n### Signature\ndef bitwise_xor(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:03:11.826740",
    "response_time": "1.22",
    "context": "{\"function_name\": \"bitwise_xor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 400,
    "solution": "from collections import Counter\n\ndef extract_freq(test_list):\n    # Count the frequency of each tuple in the list\n    freq_counter = Counter(test_list)\n    # Return the number of unique tuples\n    return len(freq_counter)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract the number of unique tuples in the given list.\n\n### Signature\ndef extract_freq(test_list):",
    "timestamp": "2025-10-17T17:03:13.216859",
    "response_time": "1.39",
    "context": "{\"function_name\": \"extract_freq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 401,
    "solution": "import itertools\n\ndef add_nested_tuples(test_tup1, test_tup2):\n    result = tuple(tuple(sum(pair) for pair in zip(inner_tup1, inner_tup2))\n                   for inner_tup1, inner_tup2 in zip(test_tup1, test_tup2))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n### Signature\ndef add_nested_tuples(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:03:15.070255",
    "response_time": "1.85",
    "context": "{\"function_name\": \"add_nested_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 404,
    "solution": "import sys\n\ndef minimum(a, b):\n    return min(a, b)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the minimum of two numbers.\n\n### Signature\ndef minimum(a,b):",
    "timestamp": "2025-10-17T17:03:15.786028",
    "response_time": "0.71",
    "context": "{\"function_name\": \"minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 405,
    "solution": "import collections\n\ndef check_tuplex(tuplex, tuple1):\n    return collections.Counter(tuplex) == collections.Counter(tuple1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether an element exists within a tuple.\n\n### Signature\ndef check_tuplex(tuplex,tuple1):",
    "timestamp": "2025-10-17T17:03:16.786927",
    "response_time": "1.00",
    "context": "{\"function_name\": \"check_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 406,
    "solution": "import math\n\ndef find_Parity(x):\n    return x % 2 != 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find whether the parity of a given number is odd.\n\n### Signature\ndef find_Parity(x):",
    "timestamp": "2025-10-17T17:03:17.549937",
    "response_time": "0.76",
    "context": "{\"function_name\": \"find_Parity\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 407,
    "solution": "import sys\n\ndef rearrange_bigger(n):\n    digits = list(str(n))\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            right_part = digits[i:]\n            min_greater = min(filter(lambda x: x > right_part[0], right_part))\n            right_part.remove(min_greater)\n            right_part.sort()\n            digits[i:] = [min_greater] + right_part\n            return int(\"\".join(digits))\n    return -1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\n### Signature\ndef rearrange_bigger(n):",
    "timestamp": "2025-10-17T17:03:20.366023",
    "response_time": "2.81",
    "context": "{\"function_name\": \"rearrange_bigger\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 408,
    "solution": "import heapq\n\ndef push(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    min_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(min_heap, (num1 + num2, num1, num2))\n    \n    result = []\n    while min_heap and len(result) < k:\n        _, num1, num2 = heapq.heappop(min_heap)\n        result.append([num1, num2])\n    \n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n### Signature\ndef k_smallest_pairs(nums1, nums2, k):",
    "timestamp": "2025-10-17T17:03:23.418979",
    "response_time": "3.05",
    "context": "{\"function_name\": \"push\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 409,
    "solution": "import math\n\ndef min_product_tuple(list1):\n    min_product = math.inf\n    for tup in list1:\n        if len(tup) == 2:\n            product = tup[0] * tup[1]\n            if product < min_product:\n                min_product = product\n    return min_product if min_product != math.inf else None",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\n### Signature\ndef min_product_tuple(list1):",
    "timestamp": "2025-10-17T17:03:25.392360",
    "response_time": "1.97",
    "context": "{\"function_name\": \"min_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 410,
    "solution": "import sys\n\ndef min_val(listval):\n    min_value = sys.maxsize\n    for item in listval:\n        if isinstance(item, (int, float)):\n            if item < min_value:\n                min_value = item\n    return min_value",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the minimum value in a given heterogeneous list.\n\n### Signature\ndef min_val(listval):",
    "timestamp": "2025-10-17T17:03:26.927626",
    "response_time": "1.53",
    "context": "{\"function_name\": \"min_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 411,
    "solution": "import re\n\ndef snake_to_camel(word):\n    return re.sub(r'_([a-z])', lambda match: match.group(1).upper(), word)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert the given snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
    "timestamp": "2025-10-17T17:03:28.020019",
    "response_time": "1.09",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 412,
    "solution": "def remove_odd(l):\n    return [x for x in l if x % 2 == 0]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove odd numbers from a given list.\n\n### Signature\ndef remove_odd(l):",
    "timestamp": "2025-10-17T17:03:28.951551",
    "response_time": "0.93",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 413,
    "solution": "import random\n\ndef extract_nth_element(list1, n):\n    return [item[n] for item in list1]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract the nth element from a given list of tuples.\n\n### Signature\ndef extract_nth_element(list1, n):",
    "timestamp": "2025-10-17T17:03:29.833172",
    "response_time": "0.88",
    "context": "{\"function_name\": \"extract_nth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 414,
    "solution": "def overlapping(list1, list2):\n    return any(item in list2 for item in list1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\n### Signature\ndef overlapping(list1,list2):",
    "timestamp": "2025-10-17T17:03:30.856322",
    "response_time": "1.02",
    "context": "{\"function_name\": \"overlapping\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 415,
    "solution": "import sys\n\ndef max_Product(arr):\n    if len(arr) < 2:\n        return None  # Not enough elements to form a pair\n    \n    # Initialize the maximum product to the smallest possible integer\n    max_product = -sys.maxsize - 1\n    \n    # Iterate through the array to find the maximum product\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    \n    return max_product",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find a pair with highest product from a given array of integers.\n\n### Signature\ndef max_Product(arr):",
    "timestamp": "2025-10-17T17:03:33.836470",
    "response_time": "2.98",
    "context": "{\"function_name\": \"max_Product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 417,
    "solution": "from typing import List, Tuple\n\ndef group_tuples(Input: List[Tuple]) -> List[Tuple]:\n    if not Input:\n        return []\n    \n    first_elements = [t[0] for t in Input]\n    common_first_elements = set(first_elements)\n    \n    result = []\n    for element in common_first_elements:\n        result.append((element,))\n    \n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find common first element in given list of tuple.\n\n### Signature\ndef group_tuples(Input):",
    "timestamp": "2025-10-17T17:03:35.974151",
    "response_time": "2.13",
    "context": "{\"function_name\": \"group_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 418,
    "solution": "import operator\n\ndef Find_Max(lst):\n    return max(lst, key=len)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the element of a list having maximum length.\n\n### Signature\ndef Find_Max(lst):",
    "timestamp": "2025-10-17T17:03:36.712917",
    "response_time": "0.74",
    "context": "{\"function_name\": \"Find_Max\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 419,
    "solution": "import math\n\ndef round_and_sum(list1):\n    total_sum = sum(math.ceil(num) for num in list1)\n    return total_sum * len(list1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\n### Signature\ndef round_and_sum(list1):",
    "timestamp": "2025-10-17T17:03:37.824977",
    "response_time": "1.11",
    "context": "{\"function_name\": \"round_and_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 420,
    "solution": "def cube_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 3\n    return total",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the cube sum of first n even natural numbers.\n\n### Signature\ndef cube_Sum(n):",
    "timestamp": "2025-10-17T17:03:39.359123",
    "response_time": "1.53",
    "context": "{\"function_name\": \"cube_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 421,
    "solution": "import string\n\ndef concatenate_tuple(test_tup):\n    delimiter = '-'\n    result = delimiter.join(test_tup)\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to concatenate each element of tuple by the delimiter.\n\n### Signature\ndef concatenate_tuple(test_tup):",
    "timestamp": "2025-10-17T17:03:40.364638",
    "response_time": "1.00",
    "context": "{\"function_name\": \"concatenate_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 422,
    "solution": "def find_Average_Of_Cube(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += i ** 3\n    average = total_sum / n\n    return average",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the average of cubes of first n natural numbers.\n\n### Signature\ndef find_Average_Of_Cube(n):",
    "timestamp": "2025-10-17T17:03:41.968866",
    "response_time": "1.60",
    "context": "{\"function_name\": \"find_Average_Of_Cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b",
    "dataset_row_id": 424,
    "solution": "import operator\n\ndef extract_rear(test_tuple):\n    # Using map and operator.itemgetter to extract the last element of each string in the tuple\n    result = tuple(map(operator.itemgetter(-1), test_tuple))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract only the rear index element of each string in the given tuple.\n\n### Signature\ndef extract_rear(test_tuple):",
    "timestamp": "2025-10-17T17:03:43.415757",
    "response_time": "1.44",
    "context": "{\"function_name\": \"extract_rear\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 425,
    "solution": "import collections\n\ndef count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of sublists containing a particular element.\n\n### Signature\ndef count_element_in_list(list1, x):",
    "timestamp": "2025-10-17T16:58:12.681600",
    "response_time": "2.55",
    "context": "{\"function_name\": \"count_element_in_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 426,
    "solution": "import itertools\n\ndef filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to filter odd numbers.\n\n### Signature\ndef filter_oddnumbers(nums):",
    "timestamp": "2025-10-17T16:58:13.627621",
    "response_time": "0.94",
    "context": "{\"function_name\": \"filter_oddnumbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 427,
    "solution": "from datetime import datetime\n\ndef change_date_format(dt):\n    return dt.strftime('%d-%m-%Y')",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n### Signature\ndef change_date_format(dt):",
    "timestamp": "2025-10-17T16:58:14.450935",
    "response_time": "0.82",
    "context": "{\"function_name\": \"change_date_format\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 428,
    "solution": "import math\n\ndef shell_sort(my_list):\n    sublist_count = len(my_list) // 2\n    while sublist_count > 0:\n        for start_position in range(sublist_count):\n            gap_insertion_sort(my_list, start_position, sublist_count)\n        sublist_count = sublist_count // 2\n\ndef gap_insertion_sort(my_list, start, gap):\n    for i in range(start + gap, len(my_list), gap):\n        current_value = my_list[i]\n        position = i\n\n        while position >= gap and my_list[position - gap] > current_value:\n            my_list[position] = my_list[position - gap]\n            position = position - gap\n\n        my_list[position] = current_value",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort the given array by using shell sort.\n\n### Signature\ndef shell_sort(my_list):",
    "timestamp": "2025-10-17T16:58:18.154107",
    "response_time": "3.70",
    "context": "{\"function_name\": \"shell_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 429,
    "solution": "import itertools\n\ndef and_tuples(test_tup1, test_tup2):\n    # Using itertools.zip_longest to handle tuples of different lengths\n    result = tuple(x and y for x, y in itertools.zip_longest(test_tup1, test_tup2, fillvalue=False))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\n### Signature\ndef and_tuples(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T16:58:19.954701",
    "response_time": "1.80",
    "context": "{\"function_name\": \"and_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 430,
    "solution": "import math\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola given its quadratic equation coefficients.\n    \n    Args:\n    a (float): Coefficient of x^2\n    b (float): Coefficient of x\n    c (float): Constant term\n    \n    Returns:\n    float: The y-coordinate of the directrix of the parabola.\n    \"\"\"\n    # The formula for the directrix of a parabola y = ax^2 + bx + c is y = c - (1/(4a))\n    directrix = c - (1 / (4 * a))\n    return directrix",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the directrix of a parabola.\n\n### Signature\ndef parabola_directrix(a, b, c):",
    "timestamp": "2025-10-17T16:58:23.499562",
    "response_time": "3.54",
    "context": "{\"function_name\": \"parabola_directrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 431,
    "solution": "import collections\n\ndef common_element(list1, list2):\n    counter1 = collections.Counter(list1)\n    counter2 = collections.Counter(list2)\n    for element in counter1:\n        if element in counter2:\n            return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes two lists and returns true if they have at least one common element.\n\n### Signature\ndef common_element(list1, list2):",
    "timestamp": "2025-10-17T16:58:25.034519",
    "response_time": "1.53",
    "context": "{\"function_name\": \"common_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 432,
    "solution": "import math\n\ndef median_trapezium(base1, base2, height):\n    median = (base1 + base2) / 2\n    return median",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the median length of a trapezium.\n\n### Signature\ndef median_trapezium(base1,base2,height):",
    "timestamp": "2025-10-17T16:58:26.196548",
    "response_time": "1.16",
    "context": "{\"function_name\": \"median_trapezium\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 433,
    "solution": "import numpy as np\n\ndef check_greater(arr, number):\n    arr = np.array(arr)\n    return np.all(arr < number)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\n### Signature\ndef check_greater(arr, number):",
    "timestamp": "2025-10-17T16:58:27.139792",
    "response_time": "0.94",
    "context": "{\"function_name\": \"check_greater\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 434,
    "solution": "import re\n\ndef text_match_one(text):\n    pattern = 'ab+'\n    return bool(re.search(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by one or more b's.\n\n### Signature\ndef text_match_one(text):",
    "timestamp": "2025-10-17T16:58:28.032507",
    "response_time": "0.89",
    "context": "{\"function_name\": \"text_match_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 435,
    "solution": "def last_Digit(n):\n    return abs(n) % 10",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the last digit of a given number.\n\n### Signature\ndef last_Digit(n) :",
    "timestamp": "2025-10-17T16:58:28.842873",
    "response_time": "0.81",
    "context": "{\"function_name\": \"last_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 436,
    "solution": "def neg_nos(list1):\n    return [num for num in list1 if num < 0]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to return the negative numbers in a list.\n\n### Signature\ndef neg_nos(list1):",
    "timestamp": "2025-10-17T16:58:29.786137",
    "response_time": "0.94",
    "context": "{\"function_name\": \"neg_nos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 437,
    "solution": "def remove_odd(str1):\n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove odd characters in a string.\n\n### Signature\ndef remove_odd(str1):",
    "timestamp": "2025-10-17T16:58:30.901052",
    "response_time": "1.11",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 438,
    "solution": "from collections import Counter\n\ndef count_bidirectional(test_list):\n    # Flatten the list of tuples and count occurrences\n    flattened = [item for sublist in test_list for item in sublist]\n    count = Counter(flattened)\n    \n    # Calculate the number of bidirectional pairs\n    bidirectional_pairs = sum(count[item] * (count[item] - 1) // 2 for item in count)\n    \n    return bidirectional_pairs",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count bidirectional tuple pairs.\n\n### Signature\ndef count_bidirectional(test_list):",
    "timestamp": "2025-10-17T16:58:33.311492",
    "response_time": "2.41",
    "context": "{\"function_name\": \"count_bidirectional\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 439,
    "solution": "import functools\n\ndef multiple_to_single(L):\n    return functools.reduce(lambda x, y: x * 10 + y, L)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to join a list of multiple integers into a single integer.\n\n### Signature\ndef multiple_to_single(L):",
    "timestamp": "2025-10-17T16:58:34.286651",
    "response_time": "0.97",
    "context": "{\"function_name\": \"multiple_to_single\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 440,
    "solution": "import re\n\ndef find_adverb_position(text):\n    adverbs = re.findall(r\"\\b\\w+ly\\b\", text)\n    positions = [(match.start(), match.end()) for match in re.finditer(r\"\\b\\w+ly\\b\", text)]\n    return adverbs, positions",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the first adverb and their positions in a given sentence.\n\n### Signature\ndef find_adverb_position(text):",
    "timestamp": "2025-10-17T16:58:35.997832",
    "response_time": "1.71",
    "context": "{\"function_name\": \"find_adverb_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 441,
    "solution": "import math\n\ndef surfacearea_cube(l):\n    return 6 * l * l",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cube of a given size.\n\n### Signature\ndef surfacearea_cube(l):",
    "timestamp": "2025-10-17T16:58:36.741655",
    "response_time": "0.74",
    "context": "{\"function_name\": \"surfacearea_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 442,
    "solution": "import numpy as np\n\ndef positive_count(nums):\n    return np.mean(nums > 0)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the ration of positive numbers in an array of integers.\n\n### Signature\ndef positive_count(nums):",
    "timestamp": "2025-10-17T16:58:37.530478",
    "response_time": "0.79",
    "context": "{\"function_name\": \"positive_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 443,
    "solution": "import sys\n\ndef largest_neg(list1):\n    largest_neg = -sys.maxsize\n    for num in list1:\n        if num < 0 and num > largest_neg:\n            largest_neg = num\n    return largest_neg if largest_neg != -sys.maxsize else None",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the largest negative number from the given list.\n\n### Signature\ndef largest_neg(list1):",
    "timestamp": "2025-10-17T16:58:39.182224",
    "response_time": "1.65",
    "context": "{\"function_name\": \"largest_neg\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 444,
    "solution": "from typing import List, Tuple\n\ndef trim_tuple(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return [tuple(item[K:] for item in test_list)]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to trim each tuple by k in the given tuple list.\n\n### Signature\ndef trim_tuple(test_list, K):",
    "timestamp": "2025-10-17T16:58:40.436225",
    "response_time": "1.25",
    "context": "{\"function_name\": \"trim_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 445,
    "solution": "import itertools\n\ndef index_multiplication(test_tup1, test_tup2):\n    # Using map and lambda to multiply elements at the same index\n    result = tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n### Signature\ndef index_multiplication(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T16:58:42.098225",
    "response_time": "1.66",
    "context": "{\"function_name\": \"index_multiplication\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 446,
    "solution": "from collections import defaultdict\n\ndef count_Occurrence(tup, lst):\n    count_dict = defaultdict(int)\n    for item in tup:\n        if item in lst:\n            count_dict[item] += 1\n    return dict(count_dict)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the occurence of all elements of list in a tuple.\n\n### Signature\ndef count_Occurrence(tup, lst):",
    "timestamp": "2025-10-17T16:58:43.573416",
    "response_time": "1.47",
    "context": "{\"function_name\": \"count_Occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 447,
    "solution": "import math\n\ndef cube_nums(nums):\n    return [math.pow(num, 3) for num in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find cubes of individual elements in a list.\n\n### Signature\ndef cube_nums(nums):",
    "timestamp": "2025-10-17T16:58:44.434209",
    "response_time": "0.86",
    "context": "{\"function_name\": \"cube_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 448,
    "solution": "def cal_sum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    \n    perrin = [3, 0, 2]\n    for i in range(3, n):\n        next_val = perrin[i-2] + perrin[i-3]\n        perrin.append(next_val)\n    \n    return sum(perrin)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the sum of perrin numbers.\n\n### Signature\ndef cal_sum(n):",
    "timestamp": "2025-10-17T16:58:47.164853",
    "response_time": "2.73",
    "context": "{\"function_name\": \"cal_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 450,
    "solution": "import random\n\ndef extract_string(str, l):\n    return [random.choice(str) for _ in range(l)]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract specified size of strings from a given list of string values.\n\n### Signature\ndef extract_string(str, l):",
    "timestamp": "2025-10-17T16:58:48.023245",
    "response_time": "0.86",
    "context": "{\"function_name\": \"extract_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 451,
    "solution": "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from the given string.\n\n### Signature\ndef remove_whitespaces(text1):",
    "timestamp": "2025-10-17T16:58:48.862467",
    "response_time": "0.84",
    "context": "{\"function_name\": \"remove_whitespaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 452,
    "solution": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n### Signature\ndef loss_amount(actual_cost,sale_amount):",
    "timestamp": "2025-10-17T16:58:50.071367",
    "response_time": "1.21",
    "context": "{\"function_name\": \"loss_amount\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 453,
    "solution": "import math\n\ndef sumofFactors(n) :\n    result = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        count = 0\n        current_sum = 1\n        current_term = 1\n        while n % i == 0:\n            count += 1\n            n //= i\n            if count % 2 == 1:\n                current_sum += i\n                current_term *= i\n        result *= current_sum\n    if n >= 2:\n        result *= (1 + n)\n    return result - 1 if n % 2 == 0 else result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of even factors of a number.\n\n### Signature\ndef sumofFactors(n) :",
    "timestamp": "2025-10-17T16:58:53.457588",
    "response_time": "3.39",
    "context": "{\"function_name\": \"sumofFactors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 454,
    "solution": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a word containing 'z'.\n\n### Signature\ndef text_match_wordz(text):",
    "timestamp": "2025-10-17T16:58:54.563098",
    "response_time": "1.10",
    "context": "{\"function_name\": \"text_match_wordz\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 455,
    "solution": "def check_monthnumb_number(monthnum2):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the month number is in the list\n    if monthnum2 in months_with_31_days:\n        return True\n    else:\n        return False",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 31 days or not.\n\n### Signature\ndef check_monthnumb_number(monthnum2):",
    "timestamp": "2025-10-17T16:58:57.042137",
    "response_time": "2.48",
    "context": "{\"function_name\": \"check_monthnumb_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 456,
    "solution": "def reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to reverse each string in a given list of string values.\n\n### Signature\ndef reverse_string_list(stringlist):",
    "timestamp": "2025-10-17T16:58:57.932106",
    "response_time": "0.89",
    "context": "{\"function_name\": \"reverse_string_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 457,
    "solution": "import sys\n\ndef Find_Min(lst):\n    if not lst:\n        return []\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < len(min_sublist):\n            min_sublist = sublist\n    return min_sublist",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sublist having minimum length.\n\n### Signature\ndef Find_Min(lst):",
    "timestamp": "2025-10-17T16:58:59.558124",
    "response_time": "1.63",
    "context": "{\"function_name\": \"Find_Min\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 458,
    "solution": "import math\n\ndef rectangle_area(l, b):\n    return l * b",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the area of a rectangle.\n\n### Signature\ndef rectangle_area(l,b):",
    "timestamp": "2025-10-17T16:59:00.274474",
    "response_time": "0.72",
    "context": "{\"function_name\": \"rectangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 459,
    "solution": "import re\n\ndef remove_uppercase(str1):\n    return re.sub('[A-Z]+', '', str1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove uppercase substrings from a given string.\n\n### Signature\ndef remove_uppercase(str1):",
    "timestamp": "2025-10-17T16:59:01.135536",
    "response_time": "0.86",
    "context": "{\"function_name\": \"remove_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 460,
    "solution": "import itertools\n\ndef Extract(lst):\n    return [sublist[0] for sublist in lst if sublist]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to get the first element of each sublist.\n\n### Signature\ndef Extract(lst):",
    "timestamp": "2025-10-17T16:59:01.965786",
    "response_time": "0.83",
    "context": "{\"function_name\": \"Extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 461,
    "solution": "import string\n\ndef upper_ctr(str):\n    return sum(1 for char in str if char in string.ascii_uppercase)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the upper case characters in a given string.\n\n### Signature\ndef upper_ctr(str):",
    "timestamp": "2025-10-17T16:59:02.897346",
    "response_time": "0.93",
    "context": "{\"function_name\": \"upper_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 462,
    "solution": "from itertools import combinations\n\ndef combinations_list(list1):\n    result = []\n    for r in range(1, len(list1) + 1):\n        result.extend(combinations(list1, r))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find all possible combinations of the elements of a given list.\n\n### Signature\ndef combinations_list(list1):",
    "timestamp": "2025-10-17T16:59:04.259719",
    "response_time": "1.36",
    "context": "{\"function_name\": \"combinations_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 463,
    "solution": "import numpy as np\n\ndef max_subarray_product(arr):\n    max_product = np.iinfo(int).min\n    current_max = 1\n    current_min = 1\n    \n    for num in arr:\n        if num == 0:\n            current_max, current_min = 1, 1\n            continue\n        \n        temp = current_max * num\n        current_max = max(num, temp, current_min * num)\n        current_min = min(num, temp, current_min * num)\n        \n        max_product = max(max_product, current_max)\n    \n    return max_product",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum product subarray of the given array.\n\n### Signature\ndef max_subarray_product(arr):",
    "timestamp": "2025-10-17T16:59:07.337272",
    "response_time": "3.08",
    "context": "{\"function_name\": \"max_subarray_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 464,
    "solution": "import collections\n\ndef check_value(dict, n):\n    return all(value == n for value in dict.values())",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if all values are same in a dictionary.\n\n### Signature\ndef check_value(dict, n):",
    "timestamp": "2025-10-17T16:59:08.178468",
    "response_time": "0.84",
    "context": "{\"function_name\": \"check_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 465,
    "solution": "import copy\n\ndef drop_empty(dict1):\n    result = copy.deepcopy(dict1)\n    for key, value in list(result.items()):\n        if value == \"\":\n            del result[key]\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to drop empty items from a given dictionary.\n\n### Signature\ndef drop_empty(dict1):",
    "timestamp": "2025-10-17T16:59:09.441737",
    "response_time": "1.26",
    "context": "{\"function_name\": \"drop_empty\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 468,
    "solution": "import math\n\ndef max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize the list to store the maximum product subsequence ending at each index\n    max_product_subseq = arr[:]\n    \n    # Fill max_product_subseq array\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and max_product_subseq[i] < max_product_subseq[j] * arr[i]:\n                max_product_subseq[i] = max_product_subseq[j] * arr[i]\n    \n    # Return the maximum value from max_product_subseq\n    return max(max_product_subseq)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n### Signature\ndef max_product(arr):",
    "timestamp": "2025-10-17T16:59:13.072065",
    "response_time": "3.63",
    "context": "{\"function_name\": \"max_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 470,
    "solution": "import itertools\n\ndef add_pairwise(test_tup):\n    return tuple(a + b for a, b in itertools.pairwise(test_tup))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n### Signature\ndef add_pairwise(test_tup):",
    "timestamp": "2025-10-17T16:59:14.088273",
    "response_time": "1.02",
    "context": "{\"function_name\": \"add_pairwise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 471,
    "solution": "from functools import reduce\n\ndef find_remainder(arr, n):\n    return reduce(lambda x, y: (x * y) % n, arr, 1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the product of the array multiplication modulo n.\n\n### Signature\ndef find_remainder(arr, n):",
    "timestamp": "2025-10-17T16:59:15.234208",
    "response_time": "1.15",
    "context": "{\"function_name\": \"find_remainder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 472,
    "solution": "import math\n\ndef check_Consecutive(l):\n    if not l:\n        return False\n    sorted_l = sorted(l)\n    return all(math.isclose(sorted_l[i] + 1, sorted_l[i + 1]) for i in range(len(sorted_l) - 1))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\n### Signature\ndef check_Consecutive(l):",
    "timestamp": "2025-10-17T16:59:16.889918",
    "response_time": "1.65",
    "context": "{\"function_name\": \"check_Consecutive\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 473,
    "solution": "from typing import List, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> List[Tuple]:\n    # Convert each tuple in the lists to a sorted tuple to ensure order doesn't matter\n    sorted_list1 = [tuple(sorted(tup)) for tup in test_list1]\n    sorted_list2 = [tuple(sorted(tup)) for tup in test_list2]\n    \n    # Find the intersection of the two lists\n    intersection = list(set(sorted_list1) & set(sorted_list2))\n    \n    return intersection",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n### Signature\ndef tuple_intersection(test_list1, test_list2):",
    "timestamp": "2025-10-17T16:59:19.909120",
    "response_time": "3.02",
    "context": "{\"function_name\": \"tuple_intersection\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 474,
    "solution": "import string\n\ndef replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to replace characters in a string.\n\n### Signature\ndef replace_char(str1,ch,newch):",
    "timestamp": "2025-10-17T16:59:20.794163",
    "response_time": "0.88",
    "context": "{\"function_name\": \"replace_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 475,
    "solution": "import operator\n\ndef sort_counter(dict1):\n    return dict(sorted(dict1.items(), key=operator.itemgetter(1)))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a dictionary by value.\n\n### Signature\ndef sort_counter(dict1):",
    "timestamp": "2025-10-17T16:59:21.700086",
    "response_time": "0.91",
    "context": "{\"function_name\": \"sort_counter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 476,
    "solution": "import numpy as np\n\ndef big_sum(nums):\n    return np.max(nums) + np.min(nums)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\n### Signature\ndef big_sum(nums):",
    "timestamp": "2025-10-17T16:59:22.503810",
    "response_time": "0.80",
    "context": "{\"function_name\": \"big_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 477,
    "solution": "import string\n\ndef is_lower(string):\n    return string.islower()",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to convert the given string to lower case.\n\n### Signature\ndef is_lower(string):",
    "timestamp": "2025-10-17T16:59:23.180412",
    "response_time": "0.68",
    "context": "{\"function_name\": \"is_lower\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 478,
    "solution": "import re\n\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]', '', str1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove lowercase substrings from a given string.\n\n### Signature\ndef remove_lowercase(str1):",
    "timestamp": "2025-10-17T16:59:24.010198",
    "response_time": "0.83",
    "context": "{\"function_name\": \"remove_lowercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 479,
    "solution": "import math\n\ndef first_Digit(n) :\n    if n == 0:\n        return 0\n    elif n < 0:\n        n = -n\n    while n >= 10:\n        n = n // 10\n    return n",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the first digit of a given number.\n\n### Signature\ndef first_Digit(n) :",
    "timestamp": "2025-10-17T16:59:25.634131",
    "response_time": "1.62",
    "context": "{\"function_name\": \"first_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 554,
    "solution": "import sys\n\ndef Split(lst):\n    return [x for x in lst if x % 2 != 0]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and only returns the odd ones.\n\n### Signature\ndef Split(list):",
    "timestamp": "2025-10-17T16:59:26.535468",
    "response_time": "0.89",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 555,
    "solution": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n### Signature\ndef difference(n) :",
    "timestamp": "2025-10-17T16:59:28.141284",
    "response_time": "1.60",
    "context": "{\"function_name\": \"difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 556,
    "solution": "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose xor value is odd.\n\n### Signature\ndef find_Odd_Pair(A,N) :",
    "timestamp": "2025-10-17T16:59:30.220494",
    "response_time": "2.08",
    "context": "{\"function_name\": \"find_Odd_Pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 557,
    "solution": "def toggle_string(string):\n    return string.swapcase()",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to toggle the case of all characters in a string.\n\n### Signature\ndef toggle_string(string):",
    "timestamp": "2025-10-17T16:59:30.923548",
    "response_time": "0.70",
    "context": "{\"function_name\": \"toggle_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 558,
    "solution": "import math\n\ndef digit_distance_nums(n1, n2):\n    # Convert numbers to strings to easily access individual digits\n    str_n1 = str(abs(n1))\n    str_n2 = str(abs(n2))\n    \n    # Pad the shorter string with leading zeros\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    \n    # Calculate the sum of the absolute differences of each digit\n    digit_sum = sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str_n1, str_n2))\n    \n    return digit_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of the per-digit difference between two integers.\n\n### Signature\ndef digit_distance_nums(n1, n2):",
    "timestamp": "2025-10-17T16:59:34.656274",
    "response_time": "3.73",
    "context": "{\"function_name\": \"digit_distance_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 559,
    "solution": "import sys\n\ndef max_sub_array_sum(a, size):\n    max_so_far = -sys.maxsize - 1\n    max_ending_here = 0\n    \n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n            \n    return max_so_far",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n\n### Signature\ndef max_sub_array_sum(a, size):",
    "timestamp": "2025-10-17T16:59:37.365027",
    "response_time": "2.71",
    "context": "{\"function_name\": \"max_sub_array_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 560,
    "solution": "import collections\n\ndef union_elements(test_tup1, test_tup2):\n    # Combine both tuples and convert to a set to remove duplicates\n    combined_set = set(test_tup1) | set(test_tup2)\n    # Convert the set back to a sorted tuple\n    result = tuple(sorted(combined_set))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n\n### Signature\ndef union_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T16:59:39.341797",
    "response_time": "1.98",
    "context": "{\"function_name\": \"union_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 562,
    "solution": "import sys\n\ndef Find_Max_Length(lst):\n    if not lst:\n        return 0\n    max_length = 0\n    current_length = 1\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i - 1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    return max(max_length, current_length)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest sublists.\n\n### Signature\ndef Find_Max_Length(lst):",
    "timestamp": "2025-10-17T16:59:41.784125",
    "response_time": "2.44",
    "context": "{\"function_name\": \"Find_Max_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 563,
    "solution": "import re\n\ndef extract_values(text):\n    return re.findall(r'\"(.*?)\"', text)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks from a string.\n\n### Signature\ndef extract_values(text):",
    "timestamp": "2025-10-17T16:59:42.653648",
    "response_time": "0.87",
    "context": "{\"function_name\": \"extract_values\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 564,
    "solution": "from itertools import combinations\n\ndef count_Pairs(arr,n):\n    count = 0\n    for pair in combinations(arr, 2):\n        if pair[0] != pair[1]:\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n### Signature\ndef count_Pairs(arr,n):",
    "timestamp": "2025-10-17T16:59:44.104411",
    "response_time": "1.45",
    "context": "{\"function_name\": \"count_Pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 565,
    "solution": "def split(word):\n    return list(word)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to split a string into characters.\n\n### Signature\ndef split(word):",
    "timestamp": "2025-10-17T16:59:44.765612",
    "response_time": "0.66",
    "context": "{\"function_name\": \"split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 566,
    "solution": "import math\n\ndef sum_digits(n):\n    return sum(int(digit) for digit in str(n))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to get the sum of the digits of a non-negative integer.\n\n### Signature\ndef sum_digits(n):",
    "timestamp": "2025-10-17T16:59:45.592090",
    "response_time": "0.82",
    "context": "{\"function_name\": \"sum_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 567,
    "solution": "import sys\n\ndef issort_list(list1):\n    return list1 == sorted(list1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether a specified list is sorted or not.\n\n### Signature\ndef issort_list(list1):",
    "timestamp": "2025-10-17T16:59:46.353897",
    "response_time": "0.76",
    "context": "{\"function_name\": \"issort_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 568,
    "solution": "def empty_list(length):\n    return [{} for _ in range(length)]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to create a list of N empty dictionaries.\n\n### Signature\ndef empty_list(length):",
    "timestamp": "2025-10-17T16:59:47.188319",
    "response_time": "0.83",
    "context": "{\"function_name\": \"empty_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 569,
    "solution": "import copy\n\ndef sort_sublists(list1):\n    sorted_list = copy.deepcopy(list1)\n    for sublist in sorted_list:\n        sublist.sort()\n    return sorted_list",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(list1):",
    "timestamp": "2025-10-17T16:59:48.328851",
    "response_time": "1.14",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 572,
    "solution": "from typing import List\n\ndef two_unique_nums(nums: List[List[int]]) -> List[int]:\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums.update(num_list)\n    return list(unique_nums)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove duplicate numbers from a given number of lists.\n\n### Signature\ndef two_unique_nums(nums):",
    "timestamp": "2025-10-17T16:59:49.706889",
    "response_time": "1.38",
    "context": "{\"function_name\": \"two_unique_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 573,
    "solution": "from functools import reduce\nfrom operator import mul\n\ndef unique_product(list_data):\n    unique_numbers = set(list_data)\n    return reduce(mul, unique_numbers, 1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to calculate the product of the unique numbers in a given list.\n\n### Signature\ndef unique_product(list_data):",
    "timestamp": "2025-10-17T16:59:50.856654",
    "response_time": "1.15",
    "context": "{\"function_name\": \"unique_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 574,
    "solution": "import math\n\ndef surfacearea_cylinder(r, h):\n    return 2 * math.pi * r * (r + h)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cylinder.\n\n### Signature\ndef surfacearea_cylinder(r,h):",
    "timestamp": "2025-10-17T16:59:51.786171",
    "response_time": "0.93",
    "context": "{\"function_name\": \"surfacearea_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 576,
    "solution": "import sys\n\ndef is_Sub_Array(A, B):\n    if not A:\n        return True\n    if len(A) > len(B):\n        return False\n    for i in range(len(B) - len(A) + 1):\n        if B[i:i+len(A)] == A:\n            return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether a list is sublist of another or not.\n\n### Signature\ndef is_Sub_Array(A,B):",
    "timestamp": "2025-10-17T16:59:53.683501",
    "response_time": "1.90",
    "context": "{\"function_name\": \"is_Sub_Array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 577,
    "solution": "import math\n\ndef last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 4\n    else:\n        last_digit = 1\n        for i in range(5, n + 1):\n            last_digit = (last_digit * (i % 10)) % 10\n        return last_digit",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the last digit in factorial of a given number.\n\n### Signature\ndef last_Digit_Factorial(n):",
    "timestamp": "2025-10-17T16:59:56.586771",
    "response_time": "2.90",
    "context": "{\"function_name\": \"last_Digit_Factorial\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 578,
    "solution": "import itertools\n\ndef interleave_lists(list1, list2, list3):\n    return [item for sublist in itertools.zip_longest(list1, list2, list3) for item in sublist if item is not None]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to interleave 3 lists of the same length into a single flat list.\n\n### Signature\ndef interleave_lists(list1,list2,list3):",
    "timestamp": "2025-10-17T16:59:57.961652",
    "response_time": "1.37",
    "context": "{\"function_name\": \"interleave_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 579,
    "solution": "from typing import Tuple\n\ndef find_dissimilar(test_tup1: Tuple, test_tup2: Tuple) -> Tuple:\n    dissimilar_elements = tuple(item for item in test_tup1 if item not in test_tup2)\n    return dissimilar_elements",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the dissimilar elements in the given two tuples.\n\n### Signature\ndef find_dissimilar(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T16:59:59.594278",
    "response_time": "1.63",
    "context": "{\"function_name\": \"find_dissimilar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 580,
    "solution": "from typing import List, Tuple, Callable\n\ndef extract_even(test_tuple: Tuple, even_fnc: Callable[[int], bool]) -> Tuple:\n    result = tuple(even_fnc(item) for item in test_tuple)\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove uneven elements in the nested mixed tuple.\n\n### Signature\ndef even_ele(test_tuple, even_fnc):",
    "timestamp": "2025-10-17T17:00:01.085978",
    "response_time": "1.49",
    "context": "{\"function_name\": \"extract_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 581,
    "solution": "import math\n\ndef surface_Area(b, s):\n    base_area = b ** 2\n    slant_height = math.sqrt((s / 2) ** 2 + b ** 2)\n    lateral_area = 2 * b * slant_height\n    total_surface_area = base_area + lateral_area\n    return total_surface_area",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\n### Signature\ndef surface_Area(b,s):",
    "timestamp": "2025-10-17T17:00:03.033561",
    "response_time": "1.95",
    "context": "{\"function_name\": \"surface_Area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 582,
    "solution": "import collections\n\ndef my_dict(dict1):\n    return not bool(dict1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if a dictionary is empty\n\n### Signature\ndef my_dict(dict1):",
    "timestamp": "2025-10-17T17:00:03.722926",
    "response_time": "0.69",
    "context": "{\"function_name\": \"my_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 583,
    "solution": "import math\n\ndef catalan_number(num):\n    if num <= 1:\n        return 1\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, num + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[num]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function which returns nth catalan number.\n\n### Signature\ndef catalan_number(num):",
    "timestamp": "2025-10-17T17:00:06.573327",
    "response_time": "2.85",
    "context": "{\"function_name\": \"catalan_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 584,
    "solution": "import re\n\ndef find_adverbs(text):\n    adverbs = re.findall(r\"\\b\\w+ly\\b\", text)\n    positions = [(match.start(), match.end()) for match in re.finditer(r\"\\b\\w+ly\\b\", text)]\n    return adverbs, positions",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n\n### Signature\ndef find_adverbs(text):",
    "timestamp": "2025-10-17T17:00:08.259990",
    "response_time": "1.69",
    "context": "{\"function_name\": \"find_adverbs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 585,
    "solution": "import heapq\n\ndef expensive_items(items, n):\n    # Using heapq.nlargest to find the n most expensive items\n    return heapq.nlargest(n, items, key=lambda x: x['price'])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n most expensive items in a given dataset.\n\n### Signature\ndef expensive_items(items,n):",
    "timestamp": "2025-10-17T17:00:09.572757",
    "response_time": "1.31",
    "context": "{\"function_name\": \"expensive_items\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 586,
    "solution": "import copy\n\ndef split_Arr(l, n):\n    if n < 0 or n >= len(l):\n        return l  # Return the original list if n is out of bounds\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n\n### Signature\ndef split_Arr(l, n):",
    "timestamp": "2025-10-17T17:00:11.379461",
    "response_time": "1.81",
    "context": "{\"function_name\": \"split_Arr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 587,
    "solution": "import typing\n\ndef list_tuple(listx: typing.List[typing.Any]) -> typing.Tuple[typing.Any, ...]:\n    return tuple(listx)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a list to a tuple.\n\n### Signature\ndef list_tuple(listx):",
    "timestamp": "2025-10-17T17:00:12.436337",
    "response_time": "1.06",
    "context": "{\"function_name\": \"list_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 588,
    "solution": "import math\n\ndef big_diff(nums):\n    return max(nums) - min(nums)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the difference between largest and smallest value in a given list.\n\n### Signature\ndef big_diff(nums):",
    "timestamp": "2025-10-17T17:00:13.189770",
    "response_time": "0.75",
    "context": "{\"function_name\": \"big_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 589,
    "solution": "import math\n\ndef perfect_squares(a, b):\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [i**2 for i in range(start, end + 1)]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find perfect squares between two given numbers.\n\n### Signature\ndef perfect_squares(a, b):",
    "timestamp": "2025-10-17T17:00:14.584583",
    "response_time": "1.39",
    "context": "{\"function_name\": \"perfect_squares\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 590,
    "solution": "import math\n\ndef polar_rect(x, y):\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y, x)\n    return r, theta",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert polar coordinates to rectangular coordinates.\n\n### Signature\ndef polar_rect(x,y):",
    "timestamp": "2025-10-17T17:00:15.821662",
    "response_time": "1.24",
    "context": "{\"function_name\": \"polar_rect\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 591,
    "solution": "def swap_List(newList):\n    # Storing the first and last element\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last elements in a list.\n\n### Signature\ndef swap_List(newList):",
    "timestamp": "2025-10-17T17:00:17.289367",
    "response_time": "1.47",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 592,
    "solution": "import math\n\ndef sum_Of_product(n, k):\n    return math.comb(n, k)\n\ndef sum_of_consecutive_binomial_products(n):\n    total_sum = 0\n    for k in range(1, n):\n        total_sum += binomial_Coeff(n, k) * binomial_Coeff(n, k-1)\n    return total_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\n### Signature\ndef binomial_Coeff(n,k):",
    "timestamp": "2025-10-17T17:00:19.376667",
    "response_time": "2.09",
    "context": "{\"function_name\": \"sum_Of_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 593,
    "solution": "import re\n\ndef removezero_ip(ip):\n    return re.sub(r'\\b0+(\\d)', r'\\1', ip)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove leading zeroes from an ip address.\n\n### Signature\ndef removezero_ip(ip):",
    "timestamp": "2025-10-17T17:00:20.289284",
    "response_time": "0.91",
    "context": "{\"function_name\": \"removezero_ip\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 594,
    "solution": "import math\n\ndef diff_even_odd(list1):\n    first_even = math.inf\n    first_odd = math.inf\n    \n    for num in list1:\n        if num % 2 == 0 and num < first_even:\n            first_even = num\n        elif num % 2 != 0 and num < first_odd:\n            first_odd = num\n    \n    if first_even == math.inf or first_odd == math.inf:\n        return None  # Return None if there are no even or odd numbers in the list\n    \n    return first_even - first_odd",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the difference of the first even and first odd number of a given list.\n\n### Signature\ndef diff_even_odd(list1):",
    "timestamp": "2025-10-17T17:00:23.239012",
    "response_time": "2.95",
    "context": "{\"function_name\": \"diff_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 595,
    "solution": "import collections\n\ndef min_Swaps(str1, str2):\n    # Count the frequency of '1's and '0's in both strings\n    count1 = collections.Counter(str1)\n    count2 = collections.Counter(str2)\n    \n    # If the total number of '1's and '0's are not the same, return -1\n    if count1['1'] != count2['1'] or count1['0'] != count2['0']:\n        return -1\n    \n    # Initialize the number of swaps to 0\n    swaps = 0\n    \n    # Iterate over the strings and count the number of mismatches\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            swaps += 1\n    \n    # Since each mismatch requires one swap, return half the number of mismatches\n    return swaps // 2",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n### Signature\ndef min_Swaps(str1,str2) :",
    "timestamp": "2025-10-17T17:00:27.787759",
    "response_time": "4.55",
    "context": "{\"function_name\": \"min_Swaps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 596,
    "solution": "import sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the size in bytes of the given tuple.\n\n### Signature\ndef tuple_size(tuple_list):",
    "timestamp": "2025-10-17T17:00:28.502123",
    "response_time": "0.71",
    "context": "{\"function_name\": \"tuple_size\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 597,
    "solution": "import bisect\n\ndef find_kth(arr1, arr2, k):\n    if k < 0 or k >= len(arr1) + len(arr2):\n        raise ValueError(\"k is out of bounds\")\n    \n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    low, high = 0, len(arr1)\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n        \n        max_left1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        min_right1 = float('inf') if partition1 == len(arr1) else arr1[partition1]\n        \n        max_left2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        min_right2 = float('inf') if partition2 == len(arr2) else arr2[partition2]\n        \n        if max_left1 <= min_right2 and max_left2 <= min_right1:\n            if (len(arr1) + len(arr2)) % 2 == 0:\n                return (max(max_left1, max_left2) + min(min_right1, min_right2)) / 2\n            else:\n                return max(max_left1, max_left2)\n        elif max_left1 > min_right2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find kth element from the given two sorted arrays.\n\n### Signature\ndef find_kth(arr1, arr2, k):",
    "timestamp": "2025-10-17T17:00:36.100195",
    "response_time": "7.60",
    "context": "{\"function_name\": \"find_kth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 598,
    "solution": "def armstrong_number(number):\n    # Convert the number to a string to easily iterate over digits\n    num_str = str(number)\n    # Calculate the number of digits\n    num_digits = len(num_str)\n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)\n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == number",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given number is armstrong or not.\n\n### Signature\ndef armstrong_number(number):",
    "timestamp": "2025-10-17T17:00:38.921483",
    "response_time": "2.82",
    "context": "{\"function_name\": \"armstrong_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 599,
    "solution": "import math\n\ndef sum_average(number):\n    sum_natural = number * (number + 1) // 2\n    average = sum_natural / number\n    return sum_natural, average",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find sum and average of first n natural numbers.\n\n### Signature\ndef sum_average(number):",
    "timestamp": "2025-10-17T17:00:40.213624",
    "response_time": "1.29",
    "context": "{\"function_name\": \"sum_average\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 600,
    "solution": "def is_Even(n):\n    return n % 2 == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given number is even or not.\n\n### Signature\ndef is_Even(n) :",
    "timestamp": "2025-10-17T17:00:41.014165",
    "response_time": "0.80",
    "context": "{\"function_name\": \"is_Even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 602,
    "solution": "import collections\n\ndef first_repeated_char(str1):\n    char_count = collections.Counter(str1)\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    return None",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the first repeated character in a given string.\n\n### Signature\ndef first_repeated_char(str1):",
    "timestamp": "2025-10-17T17:00:42.366819",
    "response_time": "1.35",
    "context": "{\"function_name\": \"first_repeated_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 603,
    "solution": "import math\n\ndef get_ludic(n):\n    if n < 1:\n        return []\n    \n    ludic_numbers = list(range(1, n + 1))\n    index = 1\n    \n    while index < len(ludic_numbers):\n        step = ludic_numbers[index]\n        ludic_numbers = ludic_numbers[:index] + ludic_numbers[index + step:]\n        index += 1\n    \n    return ludic_numbers",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\n### Signature\ndef get_ludic(n):",
    "timestamp": "2025-10-17T17:00:44.785453",
    "response_time": "2.42",
    "context": "{\"function_name\": \"get_ludic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 604,
    "solution": "import re\n\ndef reverse_words(s):\n    words = re.findall(r'\\b\\w+\\b', s)\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to reverse words seperated by spaces in a given string.\n\n### Signature\ndef reverse_words(s):",
    "timestamp": "2025-10-17T17:00:46.167500",
    "response_time": "1.38",
    "context": "{\"function_name\": \"reverse_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 605,
    "solution": "import math\n\ndef prime_num(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given integer is a prime number.\n\n### Signature\ndef prime_num(num):",
    "timestamp": "2025-10-17T17:00:48.886624",
    "response_time": "2.72",
    "context": "{\"function_name\": \"prime_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 606,
    "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert degrees to radians.\n\n### Signature\ndef radian_degree(degree):",
    "timestamp": "2025-10-17T17:00:49.747643",
    "response_time": "0.86",
    "context": "{\"function_name\": \"radian_degree\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 607,
    "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\n### Signature\ndef find_literals(text, pattern):",
    "timestamp": "2025-10-17T17:00:51.088715",
    "response_time": "1.34",
    "context": "{\"function_name\": \"find_literals\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 608,
    "solution": "import math\n\ndef bell_Number(n):\n    B = [[0 for i in range(n+1)] for i in range(n+1)]\n    B[0][0] = 1\n    for i in range(1, n+1):\n        B[i][0] = B[i-1][i-1]\n        for j in range(1, i+1):\n            B[i][j] = B[i-1][j-1] + B[i][j-1]\n    return B[n][0]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find nth bell number.\n\n### Signature\ndef bell_Number(n):",
    "timestamp": "2025-10-17T17:00:53.948334",
    "response_time": "2.86",
    "context": "{\"function_name\": \"bell_Number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 610,
    "solution": "import copy\n\ndef remove_kth_element(list1, L):\n    # Create a copy of the list to avoid modifying the original list\n    result = copy.deepcopy(list1)\n    # Check if the index L is within the valid range\n    if 0 <= L < len(result):\n        # Remove the k'th element (index L)\n        del result[L]\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\n### Signature\ndef remove_kth_element(list1, L):",
    "timestamp": "2025-10-17T17:00:56.108917",
    "response_time": "2.16",
    "context": "{\"function_name\": \"remove_kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 611,
    "solution": "import numpy as np\n\ndef max_of_nth(test_list, N):\n    return np.max(np.array(test_list)[:, N])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\n### Signature\ndef max_of_nth(test_list, N):",
    "timestamp": "2025-10-17T17:00:57.051307",
    "response_time": "0.94",
    "context": "{\"function_name\": \"max_of_nth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 612,
    "solution": "from typing import List\n\ndef merge(lst: List[List]) -> List[List]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n### Signature\ndef merge(lst):",
    "timestamp": "2025-10-17T17:00:58.653631",
    "response_time": "1.60",
    "context": "{\"function_name\": \"merge\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 614,
    "solution": "import itertools\n\ndef cummulative_sum(test_list):\n    return sum(itertools.chain.from_iterable(test_list))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n### Signature\ndef cummulative_sum(test_list):",
    "timestamp": "2025-10-17T17:00:59.523464",
    "response_time": "0.87",
    "context": "{\"function_name\": \"cummulative_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 615,
    "solution": "import statistics\n\ndef average_tuple(nums):\n    return [statistics.mean(tup) for tup in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\n### Signature\ndef average_tuple(nums):",
    "timestamp": "2025-10-17T17:01:00.350056",
    "response_time": "0.83",
    "context": "{\"function_name\": \"average_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 616,
    "solution": "import operator\n\ndef tuple_modulo(test_tup1, test_tup2):\n    return tuple(map(operator.mod, test_tup1, test_tup2))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\n### Signature\ndef tuple_modulo(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:01:01.476679",
    "response_time": "1.13",
    "context": "{\"function_name\": \"tuple_modulo\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 617,
    "solution": "import math\n\ndef min_Jumps(steps, d):\n    # Calculate the minimum number of jumps required\n    jumps = math.ceil(d / steps)\n    return jumps",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n### Signature\ndef min_Jumps(steps, d):",
    "timestamp": "2025-10-17T17:01:02.587570",
    "response_time": "1.11",
    "context": "{\"function_name\": \"min_Jumps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 618,
    "solution": "import operator\n\ndef div_list(nums1, nums2):\n    return list(map(operator.truediv, nums1, nums2))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to divide two lists element wise.\n\n### Signature\ndef div_list(nums1,nums2):",
    "timestamp": "2025-10-17T17:01:03.526425",
    "response_time": "0.94",
    "context": "{\"function_name\": \"div_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 619,
    "solution": "import re\n\ndef move_num(test_str):\n    # Extract all numbers and non-numbers\n    nums = re.findall(r'\\d', test_str)\n    non_nums = re.findall(r'\\D', test_str)\n    \n    # Combine non-numbers and numbers\n    result = ''.join(non_nums + nums)\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to move all the numbers to the end of the given string.\n\n### Signature\ndef move_num(test_str):",
    "timestamp": "2025-10-17T17:01:05.419615",
    "response_time": "1.89",
    "context": "{\"function_name\": \"move_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 620,
    "solution": "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    \n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n### Signature\ndef largest_subset(a):",
    "timestamp": "2025-10-17T17:01:07.999063",
    "response_time": "2.58",
    "context": "{\"function_name\": \"largest_subset\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 622,
    "solution": "import bisect\n\ndef get_median(arr1, arr2, n):\n    if n <= 0:\n        raise ValueError(\"The size of the lists must be greater than 0\")\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    mid1 = arr1[n // 2]\n    mid2 = arr2[n // 2]\n\n    if mid1 < mid2:\n        if n % 2 == 0:\n            return (max(arr1[n // 2 - 1], arr2[n // 2 - 1]) + min(arr1[n // 2], arr2[n // 2])) / 2\n        else:\n            return max(arr1[n // 2 - 1], arr2[n // 2 - 1])\n    else:\n        if n % 2 == 0:\n            return (max(arr1[n // 2 - 1], arr2[n // 2 - 1]) + min(arr1[n // 2], arr2[n // 2])) / 2\n        else:\n            return max(arr1[n // 2 - 1], arr2[n // 2 - 1])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the median of two sorted lists of same size.\n\n### Signature\ndef get_median(arr1, arr2, n):",
    "timestamp": "2025-10-17T17:01:15.055722",
    "response_time": "7.06",
    "context": "{\"function_name\": \"get_median\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 623,
    "solution": "import math\n\ndef nth_nums(nums,n):\n    return [math.pow(num, n) for num in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to compute the n-th power of each number in a list.\n\n### Signature\ndef nth_nums(nums,n):",
    "timestamp": "2025-10-17T17:01:15.920001",
    "response_time": "0.86",
    "context": "{\"function_name\": \"nth_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 624,
    "solution": "import string\n\ndef is_upper(string):\n    return string.isupper()",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to convert a given string to uppercase.\n\n### Signature\ndef is_upper(string):",
    "timestamp": "2025-10-17T17:01:16.583115",
    "response_time": "0.66",
    "context": "{\"function_name\": \"is_upper\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 625,
    "solution": "def swap_List(newList):\n    # Storing the first and last element\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last element in a given list.\n\n### Signature\ndef swap_List(newList):",
    "timestamp": "2025-10-17T17:01:18.061649",
    "response_time": "1.48",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 626,
    "solution": "import math\n\ndef triangle_area(r):\n    # The largest triangle that can be inscribed in a semicircle is a right-angled triangle\n    # with the hypotenuse as the diameter of the semicircle.\n    # The area of such a triangle is given by (1/2) * base * height\n    # Here, the base is the diameter of the semicircle (2r) and the height is the radius (r).\n    base = 2 * r\n    height = r\n    area = 0.5 * base * height\n    return area",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n### Signature\ndef triangle_area(r) :",
    "timestamp": "2025-10-17T17:01:21.226314",
    "response_time": "3.16",
    "context": "{\"function_name\": \"triangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 627,
    "solution": "import bisect\n\ndef find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    if start > end:\n        return start\n    \n    mid = (start + end) // 2\n    \n    if array[mid] > mid + array[0]:\n        return find_First_Missing(array, start, mid)\n    else:\n        return find_First_Missing(array, mid + 1, end)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\n### Signature\ndef find_First_Missing(array,start=0,end=None):",
    "timestamp": "2025-10-17T17:01:23.802431",
    "response_time": "2.57",
    "context": "{\"function_name\": \"find_First_Missing\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 628,
    "solution": "import urllib.parse\n\ndef replace_spaces(string):\n    return urllib.parse.quote(string, safe='')",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to replace all spaces in the given string with '%20'.\n\n### Signature\ndef replace_spaces(string):",
    "timestamp": "2025-10-17T17:01:24.574490",
    "response_time": "0.77",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 629,
    "solution": "import sys\n\ndef Split(list):\n    even_numbers = [num for num in list if num % 2 == 0]\n    return even_numbers",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find even numbers from a list of numbers.\n\n### Signature\ndef Split(list):",
    "timestamp": "2025-10-17T17:01:25.644164",
    "response_time": "1.07",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 630,
    "solution": "from itertools import product\n\ndef get_coordinates(ele, sub = []):\n    if not ele:\n        return [tuple(sub)]\n    for i in range(-1, 2):\n        sub.append(ele[0] + i)\n        result = adjac(ele[1:], sub)\n        sub.pop()\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n### Signature\ndef adjac(ele, sub = []):",
    "timestamp": "2025-10-17T17:01:27.480476",
    "response_time": "1.83",
    "context": "{\"function_name\": \"get_coordinates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 631,
    "solution": "import re\n\ndef replace_spaces(text):\n    # Replace spaces with underscores\n    text_with_underscores = re.sub(r'\\s+', '_', text)\n    # Replace underscores with spaces\n    result = re.sub(r'_+', ' ', text_with_underscores)\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\n### Signature\ndef replace_spaces(text):",
    "timestamp": "2025-10-17T17:01:29.144857",
    "response_time": "1.66",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 632,
    "solution": "def move_zero(num_list):\n    non_zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] != 0:\n            num_list[non_zero_index], num_list[i] = num_list[i], num_list[non_zero_index]\n            non_zero_index += 1\n    return num_list",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to move all zeroes to the end of the given list.\n\n### Signature\ndef move_zero(num_list):",
    "timestamp": "2025-10-17T17:01:31.213273",
    "response_time": "2.07",
    "context": "{\"function_name\": \"move_zero\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 633,
    "solution": "def pair_xor_Sum(arr, n):\n    total_xor = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor += arr[i] ^ arr[j]\n    return total_xor",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\n### Signature\ndef pair_xor_Sum(arr,n) :",
    "timestamp": "2025-10-17T17:01:33.360825",
    "response_time": "2.14",
    "context": "{\"function_name\": \"pair_xor_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 635,
    "solution": "import heapq\n\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        heapq.heappush(h, value)\n    return [heapq.heappop(h) for _ in range(len(h))]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort the given list.\n\n### Signature\ndef heap_sort(iterable):",
    "timestamp": "2025-10-17T17:01:36.029854",
    "response_time": "2.67",
    "context": "{\"function_name\": \"heap_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 637,
    "solution": "import math\n\ndef noprofit_noloss(actual_cost, sale_amount):\n    return math.isclose(actual_cost, sale_amount, rel_tol=1e-9)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given amount has no profit and no loss\n\n### Signature\ndef noprofit_noloss(actual_cost,sale_amount):",
    "timestamp": "2025-10-17T17:01:38.504939",
    "response_time": "2.47",
    "context": "{\"function_name\": \"noprofit_noloss\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 638,
    "solution": "import math\n\ndef wind_chill(v, t):\n    return round(13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n### Signature\ndef wind_chill(v,t):",
    "timestamp": "2025-10-17T17:01:40.353068",
    "response_time": "1.85",
    "context": "{\"function_name\": \"wind_chill\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 639,
    "solution": "import re\n\ndef sample_nam(sample_names):\n    total_length = 0\n    for name in sample_names:\n        if re.match(r'^[A-Z]', name):\n            total_length += len(name)\n    return total_length",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n### Signature\ndef sample_nam(sample_names):",
    "timestamp": "2025-10-17T17:01:41.808468",
    "response_time": "1.45",
    "context": "{\"function_name\": \"sample_nam\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 640,
    "solution": "import re\n\ndef remove_parenthesis(items):\n    return re.sub(r'\\([^)]*\\)', '', items)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n\n### Signature\ndef remove_parenthesis(items):",
    "timestamp": "2025-10-17T17:01:42.688891",
    "response_time": "0.88",
    "context": "{\"function_name\": \"remove_parenthesis\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 641,
    "solution": "import math\n\ndef is_nonagonal(n):\n    if n < 1:\n        return False\n    return (7 * n * n - 5 * n) % 2 == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth nonagonal number.\n\n### Signature\ndef is_nonagonal(n):",
    "timestamp": "2025-10-17T17:01:43.994188",
    "response_time": "1.30",
    "context": "{\"function_name\": \"is_nonagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 643,
    "solution": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\n### Signature\ndef text_match_wordz_middle(text):",
    "timestamp": "2025-10-17T17:01:45.160110",
    "response_time": "1.16",
    "context": "{\"function_name\": \"text_match_wordz_middle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 644,
    "solution": "import sys\n\ndef reverse_Array_Upto_K(input, k):\n    # Ensure k is within the bounds of the array\n    k = min(k, len(input) - 1)\n    \n    # Reverse the array up to the k-th index\n    input[:k+1] = input[:k+1][::-1]\n    \n    return input",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to reverse an array upto a given position.\n\n### Signature\ndef reverse_Array_Upto_K(input, k):",
    "timestamp": "2025-10-17T17:01:47.171923",
    "response_time": "2.01",
    "context": "{\"function_name\": \"reverse_Array_Upto_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 720,
    "solution": "import collections\n\ndef add_dict_to_tuple(test_tup, test_dict):\n    # Convert the tuple to a list to allow modification\n    temp_list = list(test_tup)\n    # Append the dictionary to the list\n    temp_list.append(test_dict)\n    # Convert the list back to a tuple\n    result = tuple(temp_list)\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\n### Signature\ndef add_dict_to_tuple(test_tup, test_dict):",
    "timestamp": "2025-10-17T17:01:49.181874",
    "response_time": "2.01",
    "context": "{\"function_name\": \"add_dict_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 721,
    "solution": "import numpy as np\n\ndef maxAverageOfPath(cost):\n    N = len(cost)\n    dp = np.zeros((N, N))\n    \n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    total_cost = dp[N-1][N-1]\n    num_cells = N * N\n    max_average = total_cost / num_cells\n    \n    return max_average",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n### Signature\ndef maxAverageOfPath(cost):",
    "timestamp": "2025-10-17T17:01:53.814583",
    "response_time": "4.63",
    "context": "{\"function_name\": \"maxAverageOfPath\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 722,
    "solution": "def filter_data(students, h, w):\n    filtered_students = {name: data for name, data in students.items() if data[0] > h and data[1] > w}\n    return filtered_students",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\n### Signature\ndef filter_data(students,h,w):",
    "timestamp": "2025-10-17T17:01:55.305855",
    "response_time": "1.49",
    "context": "{\"function_name\": \"filter_data\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 723,
    "solution": "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum(1 for a, b in zip(nums1, nums2) if a == b)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\n### Signature\ndef count_same_pair(nums1, nums2):",
    "timestamp": "2025-10-17T17:01:56.690709",
    "response_time": "1.38",
    "context": "{\"function_name\": \"count_same_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 724,
    "solution": "import math\n\ndef power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\n### Signature\ndef power_base_sum(base, power):",
    "timestamp": "2025-10-17T17:01:57.736375",
    "response_time": "1.04",
    "context": "{\"function_name\": \"power_base_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 725,
    "solution": "import re\n\ndef extract_quotation(text1):\n    return re.findall(r'\"(.*?)\"', text1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks \" \" of the given string.\n\n### Signature\ndef extract_quotation(text1):",
    "timestamp": "2025-10-17T17:01:58.635306",
    "response_time": "0.90",
    "context": "{\"function_name\": \"extract_quotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 726,
    "solution": "import typing\n\ndef multiply_elements(test_t_t: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    return tuple(test_t_t[i] * test_t_t[i+1] for i in range(len(test_t_t)-1))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n### Signature\ndef multiply_elements(test_tup):",
    "timestamp": "2025-10-17T17:02:00.146430",
    "response_time": "1.51",
    "context": "{\"function_name\": \"multiply_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 728,
    "solution": "import itertools\n\ndef sum_list(lst1, lst2):\n    return [sum(pair) for pair in itertools.zip_longest(lst1, lst2, fillvalue=0)]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n### Signature\ndef sum_list(lst1,lst2):",
    "timestamp": "2025-10-17T17:02:01.320574",
    "response_time": "1.17",
    "context": "{\"function_name\": \"sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 730,
    "solution": "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    \n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    \n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove consecutive duplicates of a given list.\n\n### Signature\ndef consecutive_duplicates(nums):",
    "timestamp": "2025-10-17T17:02:03.052740",
    "response_time": "1.73",
    "context": "{\"function_name\": \"consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 731,
    "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\n### Signature\ndef lateralsurface_cone(r,h):",
    "timestamp": "2025-10-17T17:02:04.497924",
    "response_time": "1.44",
    "context": "{\"function_name\": \"lateralsurface_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 732,
    "solution": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[ ,.]', ':', text)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\n### Signature\ndef replace_specialchar(text):",
    "timestamp": "2025-10-17T17:02:05.338105",
    "response_time": "0.84",
    "context": "{\"function_name\": \"replace_specialchar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 733,
    "solution": "import bisect\n\ndef find_first_occurrence(A, x):\n    index = bisect.bisect_left(A, x)\n    if index != len(A) and A[index] == x:\n        return index\n    else:\n        return -1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\n### Signature\ndef find_first_occurrence(A, x):",
    "timestamp": "2025-10-17T17:02:06.831732",
    "response_time": "1.49",
    "context": "{\"function_name\": \"find_first_occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 734,
    "solution": "from itertools import combinations\n\ndef sum_Of_Subarray_Prod(arr):\n    total_sum = 0\n    n = len(arr)\n    for r in range(1, n + 1):\n        for subset in combinations(arr, r):\n            product = 1\n            for num in subset:\n                product *= num\n            total_sum += product\n    return total_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\n### Signature\ndef sum_Of_Subarray_Prod(arr):",
    "timestamp": "2025-10-17T17:02:08.954009",
    "response_time": "2.12",
    "context": "{\"function_name\": \"sum_Of_Subarray_Prod\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 735,
    "solution": "import math\n\ndef toggle_middle_bits(n):\n    # Calculate the number of bits in the number\n    num_bits = n.bit_length()\n    \n    # If the number has 2 or fewer bits, return the number as is\n    if num_bits <= 2:\n        return n\n    \n    # Create a mask with all bits set except the first and last bits\n    mask = (1 << (num_bits - 2)) - 1\n    \n    # Toggle the bits using the mask\n    result = n ^ mask\n    \n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\n### Signature\ndef set_middle_bits(n):",
    "timestamp": "2025-10-17T17:02:11.857975",
    "response_time": "2.90",
    "context": "{\"function_name\": \"toggle_middle_bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 736,
    "solution": "import bisect\n\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\n### Signature\ndef left_insertion(a, x):",
    "timestamp": "2025-10-17T17:02:12.766009",
    "response_time": "0.91",
    "context": "{\"function_name\": \"left_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 737,
    "solution": "import re\n\ndef check_str(string):\n    pattern = r'^[aeiouAEIOU]'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\n### Signature\ndef check_str(string):",
    "timestamp": "2025-10-17T17:02:14.001276",
    "response_time": "1.23",
    "context": "{\"function_name\": \"check_str\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 738,
    "solution": "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    else:\n        return 1 / (pow(2, n)) + geometric_sum(n - 1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\n### Signature\ndef geometric_sum(n):",
    "timestamp": "2025-10-17T17:02:15.359843",
    "response_time": "1.36",
    "context": "{\"function_name\": \"geometric_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 739,
    "solution": "import math\n\ndef find_Index(n):\n    # Calculate the smallest triangular number with n digits\n    lower_bound = 10**(n-1)\n    upper_bound = 10**n - 1\n    \n    # Using the formula for the nth triangular number: T_n = n * (n + 1) / 2\n    # We need to find the smallest n such that T_n >= lower_bound\n    # This can be approximated by solving the quadratic equation n^2 + n - 2*lower_bound = 0\n    a = 1\n    b = 1\n    c = -2 * lower_bound\n    \n    discriminant = b**2 - 4*a*c\n    n_approx = (-b + math.sqrt(discriminant)) / (2*a)\n    \n    # Since n must be an integer, we take the ceiling of the approximation\n    n = math.ceil(n_approx)\n    \n    # Verify that the calculated n gives a triangular number with at least n digits\n    triangular_number = n * (n + 1) // 2\n    while len(str(triangular_number)) < n:\n        n += 1\n        triangular_number = n * (n + 1) // 2\n    \n    return n",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\n### Signature\ndef find_Index(n):",
    "timestamp": "2025-10-17T17:02:21.743821",
    "response_time": "6.38",
    "context": "{\"function_name\": \"find_Index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 740,
    "solution": "def tuple_to_dict(test_tup):\n    res = dict(test_tup)\n    return res",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\n### Signature\ndef tuple_to_dict(test_tup):",
    "timestamp": "2025-10-17T17:02:22.676172",
    "response_time": "0.93",
    "context": "{\"function_name\": \"tuple_to_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 741,
    "solution": "def all_Characters_Same(s):\n    return len(set(s)) == 1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether all the characters are same or not.\n\n### Signature\ndef all_Characters_Same(s) :",
    "timestamp": "2025-10-17T17:02:23.531067",
    "response_time": "0.85",
    "context": "{\"function_name\": \"all_Characters_Same\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 742,
    "solution": "import math\n\ndef area_tetrahedron(side):\n    return (math.sqrt(3) / 4) * (side ** 2)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to caluclate the area of a tetrahedron.\n\n### Signature\ndef area_tetrahedron(side):",
    "timestamp": "2025-10-17T17:02:24.611786",
    "response_time": "1.08",
    "context": "{\"function_name\": \"area_tetrahedron\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 743,
    "solution": "def rotate_right(lst, m):\n    return lst[-m:] + lst[:-m]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\n### Signature\ndef rotate_right(list, m):",
    "timestamp": "2025-10-17T17:02:25.464965",
    "response_time": "0.85",
    "context": "{\"function_name\": \"rotate_right\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 744,
    "solution": "import sys\n\ndef check_none(test_tup):\n    return any(item is None for item in test_tup)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given tuple has any none value or not.\n\n### Signature\ndef check_none(test_tup):",
    "timestamp": "2025-10-17T17:02:26.363622",
    "response_time": "0.90",
    "context": "{\"function_name\": \"check_none\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 745,
    "solution": "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    return list(filter(lambda x: all(int(digit) != 0 and x % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1)))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\n### Signature\ndef divisible_by_digits(startnum, endnum):",
    "timestamp": "2025-10-17T17:02:28.194884",
    "response_time": "1.83",
    "context": "{\"function_name\": \"divisible_by_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 746,
    "solution": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    return 0.5 * r * r * a * (math.pi / 180)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\n### Signature\ndef sector_area(r,a):",
    "timestamp": "2025-10-17T17:02:29.753147",
    "response_time": "1.56",
    "context": "{\"function_name\": \"sector_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 747,
    "solution": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Create a 3D array to store lengths of longest common subsequence.\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    \n    # Build the L[][][] in bottom-up fashion\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n    \n    # L[m][n][o] contains the length of LCS for X[0..m-1], Y[0..n-1] and Z[0..o-1]\n    return L[m][n][o]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n### Signature\ndef lcs_of_three(X, Y, Z):",
    "timestamp": "2025-10-17T17:02:36.712613",
    "response_time": "6.96",
    "context": "{\"function_name\": \"lcs_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 748,
    "solution": "import re\n\ndef capital_words_spaces(str1):\n    return re.sub(r'([a-z])([A-Z])', r'\\1 \\2', str1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to put spaces between words starting with capital letters in a given string.\n\n### Signature\ndef capital_words_spaces(str1):",
    "timestamp": "2025-10-17T17:02:37.939610",
    "response_time": "1.22",
    "context": "{\"function_name\": \"capital_words_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 749,
    "solution": "import re\n\ndef sort_numeric_strings(nums_str):\n    # Extract numbers from strings and sort based on the numeric value\n    return sorted(nums_str, key=lambda x: int(re.search(r'\\d+', x).group()))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n### Signature\ndef sort_numeric_strings(nums_str):",
    "timestamp": "2025-10-17T17:02:39.328867",
    "response_time": "1.39",
    "context": "{\"function_name\": \"sort_numeric_strings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 750,
    "solution": "def add_tuple(test_list, test_tup):\n    test_list.append(test_tup)\n    return test_list",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to add the given tuple to the given list.\n\n### Signature\ndef add_tuple(test_list, test_tup):",
    "timestamp": "2025-10-17T17:02:40.288295",
    "response_time": "0.96",
    "context": "{\"function_name\": \"add_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 751,
    "solution": "import math\n\ndef check_min_heap(arr, i):\n    n = len(arr)\n    if i > (n // 2) - 1:\n        return True\n    if arr[i] <= arr[2 * i + 1] and arr[i] <= arr[2 * i + 2] and check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2):\n        return True\n    return False\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n### Signature\ndef check_min_heap_helper(arr, i):",
    "timestamp": "2025-10-17T17:02:44.089237",
    "response_time": "3.80",
    "context": "{\"function_name\": \"check_min_heap\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 752,
    "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\n### Signature\ndef jacobsthal_num(n):",
    "timestamp": "2025-10-17T17:02:46.309538",
    "response_time": "2.22",
    "context": "{\"function_name\": \"jacobsthal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 753,
    "solution": "import heapq\n\ndef min_k(test_list, K):\n    return heapq.nsmallest(K, test_list)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n### Signature\ndef min_k(test_list, K):",
    "timestamp": "2025-10-17T17:02:47.143731",
    "response_time": "0.83",
    "context": "{\"function_name\": \"min_k\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 754,
    "solution": "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\n### Signature\ndef extract_index_list(l1, l2, l3):",
    "timestamp": "2025-10-17T17:02:49.378739",
    "response_time": "2.23",
    "context": "{\"function_name\": \"extract_index_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 755,
    "solution": "import sys\n\ndef second_smallest(numbers):\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    \n    first, second = sys.maxsize, sys.maxsize\n    \n    for num in numbers:\n        if num <= first:\n            first, second = num, first\n        elif num < second:\n            second = num\n    \n    if second == sys.maxsize:\n        raise ValueError(\"List must contain at least two distinct elements\")\n    \n    return second",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the second smallest number in a list.\n\n### Signature\ndef second_smallest(numbers):",
    "timestamp": "2025-10-17T17:02:52.047427",
    "response_time": "2.67",
    "context": "{\"function_name\": \"second_smallest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 756,
    "solution": "import re\n\ndef text_match_zero_one(text):\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\n### Signature\ndef text_match_zero_one(text):",
    "timestamp": "2025-10-17T17:02:53.314301",
    "response_time": "1.26",
    "context": "{\"function_name\": \"text_match_zero_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 757,
    "solution": "from collections import Counter\n\ndef count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\n### Signature\ndef count_reverse_pairs(test_list):",
    "timestamp": "2025-10-17T17:02:55.160996",
    "response_time": "1.84",
    "context": "{\"function_name\": \"count_reverse_pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 758,
    "solution": "from collections import defaultdict\n\ndef unique_sublists(list1):\n    sublist_count = defaultdict(int)\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        sublist_count[tuple_sublist] += 1\n    return dict(sublist_count)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n### Signature\ndef unique_sublists(list1):",
    "timestamp": "2025-10-17T17:02:56.732416",
    "response_time": "1.57",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 759,
    "solution": "import re\n\ndef is_decimal(num):\n    decimal_pattern = re.compile(r\"^\\d+(\\.\\d{1,2})?$\")\n    return bool(decimal_pattern.match(num))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\n### Signature\ndef is_decimal(num):",
    "timestamp": "2025-10-17T17:02:57.884184",
    "response_time": "1.15",
    "context": "{\"function_name\": \"is_decimal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 760,
    "solution": "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\n### Signature\ndef unique_Element(arr):",
    "timestamp": "2025-10-17T17:02:58.817692",
    "response_time": "0.93",
    "context": "{\"function_name\": \"unique_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 762,
    "solution": "import calendar\n\ndef check_monthnumber_number(monthnum3):\n    return calendar.monthrange(2020, monthnum3)[1] == 30",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n### Signature\ndef check_monthnumber_number(monthnum3):",
    "timestamp": "2025-10-17T17:02:59.938637",
    "response_time": "1.12",
    "context": "{\"function_name\": \"check_monthnumber_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 763,
    "solution": "import sys\n\ndef find_min_diff(arr,n):\n    arr.sort()\n    min_diff = sys.maxsize\n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\n### Signature\ndef find_min_diff(arr,n):",
    "timestamp": "2025-10-17T17:03:01.491424",
    "response_time": "1.55",
    "context": "{\"function_name\": \"find_min_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 764,
    "solution": "import re\n\ndef number_ctr(str):\n    return len(re.findall(r'\\d', str))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count number of digits in a given string.\n\n### Signature\ndef number_ctr(str):",
    "timestamp": "2025-10-17T17:03:02.303564",
    "response_time": "0.81",
    "context": "{\"function_name\": \"number_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 765,
    "solution": "import math\n\ndef is_polite(n):\n    return n & (n - 1) != 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\n### Signature\ndef is_polite(n):",
    "timestamp": "2025-10-17T17:03:03.168277",
    "response_time": "0.86",
    "context": "{\"function_name\": \"is_polite\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 766,
    "solution": "from typing import List, Tuple\n\ndef pair_wise(l1: List) -> List[Tuple]:\n    return list(zip(l1, l1[1:]))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to return a list of all pairs of consecutive items in a given list.\n\n### Signature\ndef pair_wise(l1):",
    "timestamp": "2025-10-17T17:03:04.309284",
    "response_time": "1.14",
    "context": "{\"function_name\": \"pair_wise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 767,
    "solution": "from collections import Counter\n\ndef get_pairs_count(arr, sum):\n    count = 0\n    freq = Counter(arr)\n    \n    for num in arr:\n        complement = sum - num\n        if complement in freq:\n            count += freq[complement]\n            if complement == num:\n                count -= 1\n    \n    return count // 2",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\n### Signature\ndef get_pairs_count(arr, sum):",
    "timestamp": "2025-10-17T17:03:06.300820",
    "response_time": "1.99",
    "context": "{\"function_name\": \"get_pairs_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 769,
    "solution": "def Diff(li1, li2):\n    return list(set(li1) - set(li2))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to get the difference between two lists.\n\n### Signature\ndef Diff(li1,li2):",
    "timestamp": "2025-10-17T17:03:07.238885",
    "response_time": "0.94",
    "context": "{\"function_name\": \"Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 770,
    "solution": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(1, 2*n, 2):\n        total_sum += i**4\n    return total_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\n### Signature\ndef odd_num_sum(n) :",
    "timestamp": "2025-10-17T17:03:08.692505",
    "response_time": "1.45",
    "context": "{\"function_name\": \"odd_num_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 771,
    "solution": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in exp:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if not stack or mapping[char] != stack.pop():\n                return False\n        else:\n            continue\n    \n    return not stack",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\n### Signature\ndef check_expression(exp):",
    "timestamp": "2025-10-17T17:03:11.021632",
    "response_time": "2.33",
    "context": "{\"function_name\": \"check_expression\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 772,
    "solution": "import re\n\ndef remove_length(test_str, K):\n    # Using regular expression to find and replace words of length K\n    return re.sub(r'\\b\\w{K}\\b', '', test_str)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove all the words with k length in the given string.\n\n### Signature\ndef remove_length(test_str, K):",
    "timestamp": "2025-10-17T17:03:12.346545",
    "response_time": "1.32",
    "context": "{\"function_name\": \"remove_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 773,
    "solution": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start(), match.end()))\n    return result if result else None",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n### Signature\ndef occurance_substring(text,pattern):",
    "timestamp": "2025-10-17T17:03:13.893577",
    "response_time": "1.54",
    "context": "{\"function_name\": \"occurance_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 775,
    "solution": "import sys\n\ndef odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\n### Signature\ndef odd_position(nums):",
    "timestamp": "2025-10-17T17:03:15.189975",
    "response_time": "1.29",
    "context": "{\"function_name\": \"odd_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 776,
    "solution": "import re\n\ndef count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    pattern = r'(?<=[{}])[{}](?=[{}])'.format(vowels, vowels, vowels)\n    matches = re.findall(pattern, test_str)\n    return len(matches)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\n### Signature\ndef count_vowels(test_str):",
    "timestamp": "2025-10-17T17:03:16.984414",
    "response_time": "1.79",
    "context": "{\"function_name\": \"count_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 777,
    "solution": "from collections import Counter\n\ndef find_sum(arr):\n    count = Counter(arr)\n    return sum(x for x in count if count[x] == 1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of non-repeated elements in a given list.\n\n### Signature\ndef find_sum(arr):",
    "timestamp": "2025-10-17T17:03:18.038976",
    "response_time": "1.05",
    "context": "{\"function_name\": \"find_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 778,
    "solution": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for _, group in groupby(list1)]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\n### Signature\ndef pack_consecutive_duplicates(list1):",
    "timestamp": "2025-10-17T17:03:19.047508",
    "response_time": "1.01",
    "context": "{\"function_name\": \"pack_consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 779,
    "solution": "from collections import defaultdict\n\ndef unique_sublists(list1):\n    sublist_count = defaultdict(int)\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        sublist_count[tuple_sublist] += 1\n    return dict(sublist_count)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\n### Signature\ndef unique_sublists(list1):",
    "timestamp": "2025-10-17T17:03:20.626565",
    "response_time": "1.58",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 780,
    "solution": "from itertools import combinations\n\ndef find_combinations(test_list):\n    result = []\n    for tup in test_list:\n        for r in range(1, len(tup) + 1):\n            for combo in combinations(tup, r):\n                result.append((combo, sum(combo)))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\n### Signature\ndef find_combinations(test_list):",
    "timestamp": "2025-10-17T17:03:22.379798",
    "response_time": "1.75",
    "context": "{\"function_name\": \"find_combinations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 781,
    "solution": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count % 2 == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\n### Signature\ndef count_divisors(n) :",
    "timestamp": "2025-10-17T17:03:24.452323",
    "response_time": "2.07",
    "context": "{\"function_name\": \"count_divisors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 782,
    "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    # Iterate over all starting points\n    for start in range(n):\n        # Iterate over all ending points\n        for end in range(start, n):\n            # Check if the length of the subarray is odd\n            if (end - start + 1) % 2 != 0:\n                # Add the sum of the current subarray to the total sum\n                total_sum += sum(arr[start:end+1])\n    \n    return total_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\n### Signature\ndef odd_length_sum(arr):",
    "timestamp": "2025-10-17T17:03:27.517000",
    "response_time": "3.06",
    "context": "{\"function_name\": \"odd_length_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 783,
    "solution": "from math import floor, ceil\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df / mx) * 100\n    v = mx * 100\n    return h, s, v",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n### Signature\ndef rgb_to_hsv(r, g, b):",
    "timestamp": "2025-10-17T17:03:33.343908",
    "response_time": "5.82",
    "context": "{\"function_name\": \"rgb_to_hsv\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 784,
    "solution": "import math\n\ndef mul_even_odd(list1):\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2 != 0:\n            odd = num\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    else:\n        return None",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the product of first even and odd number of a given list.\n\n### Signature\ndef mul_even_odd(list1):",
    "timestamp": "2025-10-17T17:03:35.898725",
    "response_time": "2.55",
    "context": "{\"function_name\": \"mul_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 785,
    "solution": "import re\n\ndef tuple_str_int(test_str):\n    # Extract numbers from the string using regular expression\n    numbers = re.findall(r'\\d+', test_str)\n    # Convert extracted numbers to integers and create a tuple\n    result = tuple(map(int, numbers))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert tuple string to integer tuple.\n\n### Signature\ndef tuple_str_int(test_str):",
    "timestamp": "2025-10-17T17:03:37.583748",
    "response_time": "1.68",
    "context": "{\"function_name\": \"tuple_str_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 786,
    "solution": "import bisect\n\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\n### Signature\ndef right_insertion(a, x):",
    "timestamp": "2025-10-17T17:03:38.477093",
    "response_time": "0.89",
    "context": "{\"function_name\": \"right_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 787,
    "solution": "import re\n\ndef text_match_three(text):\n    pattern = 'ab{3}'\n    return bool(re.search(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by three 'b'.\n\n### Signature\ndef text_match_three(text):",
    "timestamp": "2025-10-17T17:03:39.403168",
    "response_time": "0.92",
    "context": "{\"function_name\": \"text_match_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 788,
    "solution": "import string\n\ndef new_tuple(test_list, test_str):\n    # Convert the string to a tuple\n    str_tuple = tuple(test_str)\n    \n    # Combine the list and the string tuple into a new tuple\n    result_tuple = tuple(test_list + list(str_tuple))\n    \n    return result_tuple",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to create a new tuple from the given string and list.\n\n### Signature\ndef new_tuple(test_list, test_str):",
    "timestamp": "2025-10-17T17:03:41.185264",
    "response_time": "1.78",
    "context": "{\"function_name\": \"new_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 790,
    "solution": "import sys\n\ndef even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether every even index contains even numbers of a given list.\n\n### Signature\ndef even_position(nums):",
    "timestamp": "2025-10-17T17:03:42.481609",
    "response_time": "1.29",
    "context": "{\"function_name\": \"even_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 791,
    "solution": "import collections\n\ndef remove_nested(test_tup):\n    # Using a generator expression to filter out tuples\n    result = tuple(item for item in test_tup if not isinstance(item, tuple))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove tuples from the given tuple.\n\n### Signature\ndef remove_nested(test_tup):",
    "timestamp": "2025-10-17T17:03:43.778561",
    "response_time": "1.29",
    "context": "{\"function_name\": \"remove_nested\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 792,
    "solution": "import sys\n\ndef count_list(input_list):\n    return len(input_list)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of lists in a given number of lists.\n\n### Signature\ndef count_list(input_list):",
    "timestamp": "2025-10-17T17:03:44.449205",
    "response_time": "0.67",
    "context": "{\"function_name\": \"count_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 793,
    "solution": "import bisect\n\ndef last(arr, x):\n    # Find the rightmost index where x should be inserted to maintain sorted order\n    index = bisect.bisect_right(arr, x)\n    # If the index is greater than 0 and the element at index-1 is x, return index-1\n    if index > 0 and arr[index-1] == x:\n        return index-1\n    # Otherwise, x is not in the array\n    return -1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the last position of an element in a sorted array.\n\n### Signature\ndef last(arr,x):",
    "timestamp": "2025-10-17T17:03:47.148199",
    "response_time": "2.70",
    "context": "{\"function_name\": \"last\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 794,
    "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n### Signature\ndef text_starta_endb(text):",
    "timestamp": "2025-10-17T17:03:48.193945",
    "response_time": "1.03",
    "context": "{\"function_name\": \"text_starta_endb\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 796,
    "solution": "def return_sum(dict):\n    return sum(dict.values())",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite function to find the sum of all items in the given dictionary.\n\n### Signature\ndef return_sum(dict):",
    "timestamp": "2025-10-17T17:03:48.887197",
    "response_time": "0.69",
    "context": "{\"function_name\": \"return_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 797,
    "solution": "def sum_in_range(n):\n    return sum(i for i in range(1, n+1, 2))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\n### Signature\ndef sum_odd(n):",
    "timestamp": "2025-10-17T17:03:49.839739",
    "response_time": "0.95",
    "context": "{\"function_name\": \"sum_in_range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 798,
    "solution": "def _sum(arr):\n    return sum(arr)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of an array.\n\n### Signature\ndef _sum(arr):",
    "timestamp": "2025-10-17T17:03:50.500613",
    "response_time": "0.66",
    "context": "{\"function_name\": \"_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 799,
    "solution": "import sys\n\ndef left_rotate(n, d):\n    # Ensure the number is treated as a 32-bit integer\n    n &= 0xFFFFFFFF\n    # Perform the left rotation\n    return (n << d) | (n >> (32 - d))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n### Signature\ndef left_rotate(n,d):",
    "timestamp": "2025-10-17T17:03:52.150724",
    "response_time": "1.65",
    "context": "{\"function_name\": \"left_rotate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 800,
    "solution": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from a string.\n\n### Signature\ndef remove_all_spaces(text):",
    "timestamp": "2025-10-17T17:03:52.954026",
    "response_time": "0.80",
    "context": "{\"function_name\": \"remove_all_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 801,
    "solution": "from typing import *\n\ndef test_three_equal(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of equal numbers from three given integers.\n\n### Signature\ndef test_three_equal(x,y,z):",
    "timestamp": "2025-10-17T17:03:54.648138",
    "response_time": "1.69",
    "context": "{\"function_name\": \"test_three_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 802,
    "solution": "import bisect\n\ndef count_rotation(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            return i\n    return 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n### Signature\ndef count_rotation(arr):",
    "timestamp": "2025-10-17T17:03:56.043305",
    "response_time": "1.39",
    "context": "{\"function_name\": \"count_rotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 803,
    "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return root * root == n",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\n### Signature\ndef is_perfect_square(n) :",
    "timestamp": "2025-10-17T17:03:57.230705",
    "response_time": "1.18",
    "context": "{\"function_name\": \"is_perfect_square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 804,
    "solution": "import math\n\ndef is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the product of numbers in a list is even or not.\n\n### Signature\ndef is_product_even(arr):",
    "timestamp": "2025-10-17T17:03:58.388965",
    "response_time": "1.16",
    "context": "{\"function_name\": \"is_product_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 805,
    "solution": "import functools\n\ndef max_sum_list(lists):\n    return max(lists, key=functools.reduce(lambda x, y: x + y, _))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\n### Signature\ndef max_sum_list(lists):",
    "timestamp": "2025-10-17T17:03:59.503370",
    "response_time": "1.11",
    "context": "{\"function_name\": \"max_sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 806,
    "solution": "import re\n\ndef max_run_uppercase(test_str):\n    # Use regular expression to find all sequences of uppercase letters\n    uppercase_sequences = re.findall(r'[A-Z]+', test_str)\n    # Find the length of the longest sequence\n    max_length = max(len(seq) for seq in uppercase_sequences)\n    return max_length",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find maximum run of uppercase characters in the given string.\n\n### Signature\ndef max_run_uppercase(test_str):",
    "timestamp": "2025-10-17T17:04:01.438785",
    "response_time": "1.93",
    "context": "{\"function_name\": \"max_run_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 807,
    "solution": "import itertools\n\ndef first_odd(nums):\n    return next((num for num in nums if num % 2 != 0), None)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the first odd number in a given list of numbers.\n\n### Signature\ndef first_odd(nums):",
    "timestamp": "2025-10-17T17:04:02.412389",
    "response_time": "0.97",
    "context": "{\"function_name\": \"first_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 808,
    "solution": "import collections\n\ndef check_K(test_tup, K):\n    # Convert the tuple to a Counter to count occurrences of each element\n    counter = collections.Counter(test_tup)\n    # Check if K is in the counter and its count is greater than 0\n    return K in counter and counter[K] > 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given tuples contain the k or not.\n\n### Signature\ndef check_K(test_tup, K):",
    "timestamp": "2025-10-17T17:04:04.286270",
    "response_time": "1.87",
    "context": "{\"function_name\": \"check_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half",
    "dataset_row_id": 809,
    "solution": "import itertools\n\ndef check_smaller(test_tup1, test_tup2):\n    return all(x < y for x, y in itertools.zip_longest(test_tup1, test_tup2, fillvalue=float('inf')))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n### Signature\ndef check_smaller(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:04:05.780368",
    "response_time": "1.49",
    "context": "{\"function_name\": \"check_smaller\"}"
  }
]