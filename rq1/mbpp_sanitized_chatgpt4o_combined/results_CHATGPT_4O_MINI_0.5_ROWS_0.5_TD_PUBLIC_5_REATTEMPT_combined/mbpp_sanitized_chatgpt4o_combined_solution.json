[
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 2,
    "solution": "```python\n===START===\ndef similar_elements(test_tup1, test_tup2):\n    # Convert both lists to sets to find the intersection\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the shared elements using set intersection\n    shared_elements = set1.intersection(set2)\n    \n    # Return the shared elements as a list\n    return list(shared_elements)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:43:30.309930",
    "response_time": "2.86",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 3,
    "solution": "```python\n===START===\nimport math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True  # 0 and 1 are not prime numbers\n    if n == 2:\n        return False  # 2 is a prime number\n    if n % 2 == 0:\n        return True  # Even numbers greater than 2 are not prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True  # Divisible by a number other than 1 and itself\n    return False  # If no divisors found, it's a prime number\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
    "timestamp": "2025-10-17T18:43:32.291954",
    "response_time": "1.98",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 4,
    "solution": "```python\n===START===\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    if n <= 0 or not nums:\n        return []\n    return sorted(heapq.nlargest(n, nums), reverse=True)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
    "timestamp": "2025-10-17T18:43:33.471010",
    "response_time": "1.18",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 6,
    "solution": "```python\n===START===\ndef is_Power_Of_Two(x):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only or not.\n    :param x: A tuple of two integers (a, b)\n    :return: True if the two numbers differ at one bit position only, False otherwise\n    \"\"\"\n    if not isinstance(x, tuple) or len(x) != 2 or not all(isinstance(i, int) for i in x):\n        raise ValueError(\"Input must be a tuple of two integers.\")\n    \n    a, b = x\n    # XOR the two numbers and check if the result is a power of two\n    # A number is a power of two if it has only one bit set in its binary representation\n    xor_result = a ^ b\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
    "timestamp": "2025-10-17T18:43:36.288891",
    "response_time": "2.82",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 7,
    "solution": "```python\n===START===\ndef find_char_long(text):\n    # Split the text into words\n    words = text.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
    "timestamp": "2025-10-17T18:43:40.502812",
    "response_time": "4.19",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 8,
    "solution": "```python\n===START===\ndef square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing the squares of each number.\n    \n    :param nums: List of numbers\n    :return: List of squared numbers\n    \"\"\"\n    return [num ** 2 for num in nums]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
    "timestamp": "2025-10-17T18:43:42.156933",
    "response_time": "1.65",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 9,
    "solution": "```python\n===START===\ndef find_Rotations(str):\n    \"\"\"\n    This function finds the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    # Concatenate the string with itself\n    temp = str + str\n    \n    # Iterate through the string to find the first occurrence of the original string\n    for i in range(1, n + 1):\n        if temp[i:i + n] == str:\n            return i\n    \n    return n  # In case no rotation matches, which shouldn't happen for valid inputs\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
    "timestamp": "2025-10-17T18:43:44.326198",
    "response_time": "2.17",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 11,
    "solution": "```python\n===START===\ndef remove_Occ(s, ch):\n    # Find the first occurrence of the character\n    first_occ = s.find(ch)\n    # Find the last occurrence of the character\n    last_occ = s.rfind(ch)\n    \n    # If the character is not found, return the original string\n    if first_occ == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_occ] + s[first_occ + 1:]\n    \n    # Adjust the last occurrence index if it comes after the first removal\n    if last_occ > first_occ:\n        last_occ -= 1\n    \n    # Remove the last occurrence\n    s = s[:last_occ] + s[last_occ + 1:]\n    \n    return s\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
    "timestamp": "2025-10-17T18:43:46.910853",
    "response_time": "2.58",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 12,
    "solution": "```python\n===START===\ndef sort_matrix(M):\n    # Calculate the sum of each row and pair it with the row\n    row_sums = [(sum(row), row) for row in M]\n    \n    # Sort the rows based on the sum\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in row_sums]\n    \n    return sorted_matrix\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
    "timestamp": "2025-10-17T18:43:48.576128",
    "response_time": "1.66",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 14,
    "solution": "```python\n===START===\ndef find_Volume(l, b, h):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    l (float): The length of the prism.\n    b (float): The base of the triangular face.\n    h (float): The height of the triangular face.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # The area of the triangular base is (1/2) * b * h\n    # The volume of the prism is the area of the base multiplied by the length\n    return 0.5 * b * h * l\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
    "timestamp": "2025-10-17T18:43:50.317868",
    "response_time": "1.74",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 16,
    "solution": "```python\n===START===\nimport re\n\ndef text_lowercase_underscore(text):\n    # Use regex to check if the string matches the pattern of lowercase letters joined by underscores\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
    "timestamp": "2025-10-17T18:43:51.581149",
    "response_time": "1.26",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 17,
    "solution": "===START===\ndef square_perimeter(a):\n    \"\"\"\n    Calculate the perimeter of a square given the side length.\n\n    Parameters:\n    a (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n    \"\"\"\n    return 4 * a\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
    "timestamp": "2025-10-17T18:43:52.887638",
    "response_time": "1.30",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 18,
    "solution": "```python\n===START===\ndef str_to_list(string):\n    def remove_chars_from_first_string(first_string, second_string):\n        \"\"\"\n        Removes characters from the first string that are present in the second string.\n        \"\"\"\n        # Create a set of characters from the second string for quick lookup\n        chars_to_remove = set(second_string)\n        \n        # Filter out characters from the first string that are in the set\n        result = ''.join(char for char in first_string if char not in chars_to_remove)\n        \n        return result\n\n    # Split the input string into two parts\n    strings = string.split(',')\n    if len(strings) != 2:\n        raise ValueError(\"Input string must contain exactly two comma-separated strings.\")\n    \n    first_string, second_string = strings[0].strip(), strings[1].strip()\n    \n    # Call the helper function to remove characters\n    return remove_chars_from_first_string(first_string, second_string)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
    "timestamp": "2025-10-17T18:43:56.278392",
    "response_time": "3.39",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 19,
    "solution": "```python\n===START===\ndef test_duplicate(arraynums):\n    \"\"\"\n    Function to check if there are any duplicate elements in the given array of integers.\n    \n    :param arraynums: List[int] - List of integers to check for duplicates.\n    :return: bool - True if duplicates are found, False otherwise.\n    \"\"\"\n    # Use a set to track seen numbers\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True  # Duplicate found\n        seen.add(num)\n    return False  # No duplicates found\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
    "timestamp": "2025-10-17T18:43:58.153096",
    "response_time": "1.87",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 20,
    "solution": "===START===\ndef is_woodall(x):\n    \"\"\"\n    Function to check if the given number is a Woodall number.\n    A Woodall number is of the form n * 2^n - 1, where n is a positive integer.\n    \n    Args:\n    x (int): The number to check.\n    \n    Returns:\n    bool: True if x is a Woodall number, False otherwise.\n    \"\"\"\n    if x < 1:\n        return False\n    \n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
    "timestamp": "2025-10-17T18:44:01.026413",
    "response_time": "2.87",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 56,
    "solution": "```python\n===START===\ndef rev(num):\n    # Function to reverse the digits of a number\n    def reverse_number(n):\n        reversed_num = 0\n        while n > 0:\n            reversed_num = reversed_num * 10 + n % 10\n            n //= 10\n        return reversed_num\n\n    # Reverse the given number\n    reversed_num = reverse_number(num)\n    \n    # Check if the number is one less than twice its reverse\n    return num == 2 * reversed_num - 1\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
    "timestamp": "2025-10-17T18:44:02.538743",
    "response_time": "1.51",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 57,
    "solution": "```python\n===START===\nfrom functools import cmp_to_key\n\ndef find_Max_Num(arr):\n    # Custom comparator to decide the order of digits\n    def compare(x, y):\n        # Compare concatenated strings in both possible orders\n        if x + y > y + x:\n            return -1\n        elif x + y < y + x:\n            return 1\n        else:\n            return 0\n\n    # Convert all integers to strings for comparison\n    str_arr = list(map(str, arr))\n    \n    # Sort the array using the custom comparator\n    sorted_arr = sorted(str_arr, key=cmp_to_key(compare))\n    \n    # Join the sorted array to form the largest number\n    largest_num = ''.join(sorted_arr)\n    \n    # Handle the case where the largest number is 0 (e.g., [0, 0])\n    return '0' if largest_num[0] == '0' else largest_num\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
    "timestamp": "2025-10-17T18:44:05.257492",
    "response_time": "2.72",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 58,
    "solution": "===START===\ndef opposite_Signs(x, y):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Args:\n    x (int): First integer.\n    y (int): Second integer.\n\n    Returns:\n    bool: True if x and y have opposite signs, False otherwise.\n    \"\"\"\n    # XOR operation between x and y, then check the sign bit\n    return (x ^ y) < 0\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
    "timestamp": "2025-10-17T18:44:07.040340",
    "response_time": "1.78",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 59,
    "solution": "```python\n===START===\ndef is_octagonal(n):\n    \"\"\"\n    Function to find the nth octagonal number.\n    Octagonal numbers are defined by the formula: n(3n - 2)\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (3 * n - 2)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
    "timestamp": "2025-10-17T18:44:09.770297",
    "response_time": "2.73",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 61,
    "solution": "```python\n===START===\ndef count_Substrings(s):\n    def sum_of_digits(substring):\n        return sum(int(char) for char in substring)\n\n    n = len(s)\n    count = 0\n\n    # Iterate over all possible substrings\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if sum_of_digits(substring) == len(substring):\n                count += 1\n\n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
    "timestamp": "2025-10-17T18:44:12.263978",
    "response_time": "2.49",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 62,
    "solution": "===START===\ndef smallest_num(xs):\n    if not xs:\n        raise ValueError(\"The list is empty\")\n    return min(xs)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
    "timestamp": "2025-10-17T18:44:13.311289",
    "response_time": "1.05",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 63,
    "solution": "```python\n===START===\ndef max_difference(test_list):\n    \"\"\"\n    Function to find the maximum difference between available pairs in the given tuple list.\n    \n    Args:\n    test_list (list of tuples): A list of tuples where each tuple contains two integers.\n    \n    Returns:\n    int: The maximum difference between the pairs in the tuple list.\n    \"\"\"\n    # Initialize the maximum difference to a very small value\n    max_diff = float('-inf')\n    \n    # Iterate through each tuple in the list\n    for a, b in test_list:\n        # Calculate the absolute difference and update max_diff if it's larger\n        max_diff = max(max_diff, abs(a - b))\n    \n    return max_diff\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
    "timestamp": "2025-10-17T18:44:15.487136",
    "response_time": "2.17",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 64,
    "solution": "```python\n===START===\ndef subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second value of each tuple\n    return sorted(subjectmarks, key=lambda x: x[1])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
    "timestamp": "2025-10-17T18:44:16.340468",
    "response_time": "0.85",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 65,
    "solution": "```python\n===START===\ndef recursive_list_sum(data_list):\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)  # Recursively sum nested lists\n        else:\n            total += item  # Add non-list items directly\n    return total\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
    "timestamp": "2025-10-17T18:44:17.784991",
    "response_time": "1.44",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 66,
    "solution": "```python\n===START===\ndef pos_count(list):\n    # Initialize a counter for positive numbers\n    count = 0\n    \n    # Iterate through the list\n    for num in list:\n        # Check if the number is positive\n        if num > 0:\n            count += 1\n    \n    # Return the count of positive numbers\n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
    "timestamp": "2025-10-17T18:44:19.455711",
    "response_time": "1.67",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 67,
    "solution": "===START===\ndef bell_number(n):\n    \"\"\"\n    Calculate the nth Bell number, which represents the number of ways to partition a set of n elements.\n    \n    Parameters:\n    n (int): The number of elements in the set.\n    \n    Returns:\n    int: The nth Bell number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    \n    # Create a table to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Base case: Bell(0) = 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # First value in each row is the last value of the previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # The nth Bell number is the first value in the nth row\n    return bell[n][0]\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
    "timestamp": "2025-10-17T18:44:22.978768",
    "response_time": "3.52",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 68,
    "solution": "```python\n===START===\ndef is_Monotonic(A):\n    if not A:  # If the array is empty, it's considered monotonic\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
    "timestamp": "2025-10-17T18:44:25.376401",
    "response_time": "2.40",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 69,
    "solution": "```python\n===START===\ndef is_sublist(l, s):\n    \"\"\"\n    Check whether the list `l` contains the sublist `s`.\n\n    Args:\n    l (list): The main list.\n    s (list): The sublist to check.\n\n    Returns:\n    bool: True if `s` is a sublist of `l`, False otherwise.\n    \"\"\"\n    if not s:  # An empty sublist is always a sublist\n        return True\n    if not l:  # If the main list is empty, no sublist can exist\n        return False\n\n    # Iterate through the main list to check for the sublist\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
    "timestamp": "2025-10-17T18:44:28.786530",
    "response_time": "3.40",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 70,
    "solution": "```python\n===START===\ndef find_equal_tuple(Input):\n    \"\"\"\n    This function checks if all tuples in the given list have the same length.\n    \n    :param Input: List of tuples\n    :return: True if all tuples have the same length, False otherwise\n    \"\"\"\n    if not Input:  # If the input list is empty, return True\n        return True\n    \n    # Get the length of the first tuple\n    first_length = len(Input[0])\n    \n    # Check if all tuples have the same length\n    for tup in Input:\n        if len(tup) != first_length:\n            return False\n    \n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
    "timestamp": "2025-10-17T18:44:31.444558",
    "response_time": "2.66",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 71,
    "solution": "```python\n===START===\ndef comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n    \n    Args:\n    nums (list): A list of elements to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3  # Shrink factor\n    sorted_flag = False\n\n    while not sorted_flag:\n        # Update the gap for the next comb\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted_flag = True  # Assume the list is sorted\n\n        # Perform a single comb pass\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                # Swap elements if they are in the wrong order\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted_flag = False  # If a swap is made, the list is not sorted\n            i += 1\n\n    return nums\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
    "timestamp": "2025-10-17T18:44:35.484897",
    "response_time": "4.04",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 72,
    "solution": "===START===\ndef dif_Square(n):\n    \"\"\"\n    Function to check whether the given number can be represented as the difference of two squares.\n    \"\"\"\n    # A number can be represented as the difference of two squares if and only if it is not of the form 4k+2.\n    # This is derived from the mathematical property:\n    # n = a^2 - b^2 = (a+b)(a-b)\n    # For n to be of the form 4k+2, it cannot be expressed as the product of two integers (a+b) and (a-b) \n    # where both are either even or odd.\n\n    # Check if n is of the form 4k+2\n    if n % 4 == 2:\n        return False\n    return True\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
    "timestamp": "2025-10-17T18:44:38.822536",
    "response_time": "3.34",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 74,
    "solution": "```python\n===START===\ndef is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n\n    color_to_pattern = {}\n    pattern_to_color = {}\n\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n\n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
    "timestamp": "2025-10-17T18:44:40.815851",
    "response_time": "1.99",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 75,
    "solution": "```python\n===START===\ndef find_tuples(test_list, K):\n    \"\"\"\n    This function finds and returns a list of tuples where all elements in each tuple are divisible by K.\n\n    :param test_list: List of tuples to be checked\n    :param K: The divisor\n    :return: List of tuples where all elements are divisible by K\n    \"\"\"\n    # Filter tuples where all elements are divisible by K\n    result = [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
    "timestamp": "2025-10-17T18:44:43.153483",
    "response_time": "2.34",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 77,
    "solution": "```python\n===START===\ndef is_Diff(n):\n    \"\"\"\n    Function to determine if a number is divisible by 11.\n    A number is divisible by 11 if the difference between the sum of its digits\n    in odd positions and the sum of its digits in even positions is divisible by 11.\n    \n    Args:\n    n (int): The number to check divisibility for.\n    \n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    # Convert the number to a string to process its digits\n    n_str = str(abs(n))  # Use absolute value to handle negative numbers\n    \n    # Initialize sums for odd and even positioned digits\n    odd_sum = 0\n    even_sum = 0\n    \n    # Iterate through the digits and calculate the sums\n    for i, digit in enumerate(n_str):\n        if i % 2 == 0:  # Odd position (0-based index)\n            odd_sum += int(digit)\n        else:  # Even position\n            even_sum += int(digit)\n    \n    # Calculate the difference\n    difference = abs(odd_sum - even_sum)\n    \n    # Check if the difference is divisible by 11\n    return difference % 11 == 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
    "timestamp": "2025-10-17T18:44:47.153640",
    "response_time": "4.00",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 79,
    "solution": "```python\n===START===\ndef word_len(s):\n    \"\"\"\n    This function checks whether the length of the given word is odd or not.\n    \n    Parameters:\n    s (str): The input word.\n    \n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(s) % 2 != 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
    "timestamp": "2025-10-17T18:44:49.885530",
    "response_time": "2.73",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 80,
    "solution": "```python\n===START===\ndef tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    A tetrahedral number is the sum of the first n triangular numbers.\n    It can also be calculated using the formula:\n    T(n) = n * (n + 1) * (n + 2) / 6\n    \n    Args:\n    n (int): The position of the tetrahedral number to calculate.\n    \n    Returns:\n    int: The nth tetrahedral number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    return n * (n + 1) * (n + 2) // 6\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
    "timestamp": "2025-10-17T18:44:53.220599",
    "response_time": "3.33",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 82,
    "solution": "===START===\nimport math\n\ndef volume_sphere(r):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    Parameters:\n    r (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return (4/3) * math.pi * (r**3)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
    "timestamp": "2025-10-17T18:44:55.430405",
    "response_time": "2.21",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 83,
    "solution": "```python\n===START===\ndef get_Char(strr):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in strr)\n    \n    # Find the result of the sum modulo 26\n    mod_value = ascii_sum % 26\n    \n    # Convert the result to a character by adding it to the ASCII value of 'a'\n    result_char = chr(mod_value + ord('a'))\n    \n    return result_char\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
    "timestamp": "2025-10-17T18:44:57.594610",
    "response_time": "2.16",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 84,
    "solution": "```python\n===START===\ndef sequence(n):\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Base cases\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    \n    # Create a list to store the sequence values\n    seq = [0] * (n + 1)\n    seq[1] = 1\n    seq[2] = 1\n    \n    # Compute the sequence iteratively\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    \n    return seq[n]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
    "timestamp": "2025-10-17T18:44:59.914358",
    "response_time": "2.31",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 85,
    "solution": "```python\n===START===\nimport math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n\n    Parameters:\n    r (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return 4 * math.pi * r**2\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
    "timestamp": "2025-10-17T18:45:01.447790",
    "response_time": "1.53",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 86,
    "solution": "===START===\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    A centered hexagonal number is given by the formula:\n    C_n = 3n(n-1) + 1\n\n    Args:\n    n (int): The position of the centered hexagonal number to calculate.\n\n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    return 3 * n * (n - 1) + 1\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
    "timestamp": "2025-10-17T18:45:05.996101",
    "response_time": "4.55",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 87,
    "solution": "```python\n===START===\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    If there are overlapping keys, the value from the later dictionary will overwrite the earlier ones.\n    \n    Args:\n    dict1 (dict): The first dictionary.\n    dict2 (dict): The second dictionary.\n    dict3 (dict): The third dictionary.\n    \n    Returns:\n    dict: A single merged dictionary.\n    \"\"\"\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
    "timestamp": "2025-10-17T18:45:07.874462",
    "response_time": "1.87",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 88,
    "solution": "```python\n===START===\ndef freq_count(list1):\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):",
    "timestamp": "2025-10-17T18:45:09.281441",
    "response_time": "1.40",
    "context": "{\"function_name\": \"freq_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 89,
    "solution": "```python\n===START===\ndef closest_num(N):\n    \"\"\"\n    This function finds the closest smaller number than N.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"Input must be a positive integer greater than 0.\")\n    \n    return N - 1\n\n# Example usage:\n# closest_num(10) -> 9\n# closest_num(1) -> 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):",
    "timestamp": "2025-10-17T18:45:11.171670",
    "response_time": "1.89",
    "context": "{\"function_name\": \"closest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 90,
    "solution": "```python\n===START===\ndef len_log(list1):\n    if not list1:  # Check if the list is empty\n        return 0\n    return max(len(word) for word in list1)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):",
    "timestamp": "2025-10-17T18:45:12.395337",
    "response_time": "1.22",
    "context": "{\"function_name\": \"len_log\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 91,
    "solution": "```python\n===START===\ndef find_substring(str1, sub_str):\n    \"\"\"\n    Check if a substring is present in a given list of string values.\n\n    :param str1: List of strings to search within.\n    :param sub_str: Substring to search for.\n    :return: True if the substring is found in any string in the list, False otherwise.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):",
    "timestamp": "2025-10-17T18:45:14.280804",
    "response_time": "1.88",
    "context": "{\"function_name\": \"find_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 92,
    "solution": "===START===\ndef is_undulating(n):\n    \"\"\"\n    Check if a number is undulating.\n    An undulating number has at least three digits and alternates between two digits.\n    For example, 121, 343, 565, 1212, 3434 are undulating numbers.\n\n    :param n: Integer to check\n    :return: True if the number is undulating, False otherwise\n    \"\"\"\n    # Convert the number to a string for easier processing\n    n_str = str(n)\n    \n    # An undulating number must have at least three digits\n    if len(n_str) < 3:\n        return False\n    \n    # Extract the first two digits\n    first_digit = n_str[0]\n    second_digit = n_str[1]\n    \n    # The two digits must be different\n    if first_digit == second_digit:\n        return False\n    \n    # Check if the digits alternate throughout the number\n    for i in range(len(n_str)):\n        if i % 2 == 0:  # Even index should match the first digit\n            if n_str[i] != first_digit:\n                return False\n        else:  # Odd index should match the second digit\n            if n_str[i] != second_digit:\n                return False\n    \n    return True\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):",
    "timestamp": "2025-10-17T18:45:24.220887",
    "response_time": "9.94",
    "context": "{\"function_name\": \"is_undulating\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 93,
    "solution": "===START===\ndef power(a, b):\n    return a ** b\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):",
    "timestamp": "2025-10-17T18:45:25.024455",
    "response_time": "0.80",
    "context": "{\"function_name\": \"power\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 94,
    "solution": "```python\n===START===\ndef index_minimum(test_list):\n    if not test_list:\n        return None  # Return None if the list is empty\n    \n    # Find the tuple with the smallest second value\n    min_tuple = min(test_list, key=lambda x: x[1])\n    \n    # Return the first value of the tuple with the smallest second value\n    return min_tuple[0]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):",
    "timestamp": "2025-10-17T18:45:26.285405",
    "response_time": "1.26",
    "context": "{\"function_name\": \"index_minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 95,
    "solution": "```python\n===START===\ndef Find_Min_Length(lst):\n    if not lst:  # Check if the input list is empty\n        return 0\n    return min(len(sublist) for sublist in lst)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):",
    "timestamp": "2025-10-17T18:45:27.737942",
    "response_time": "1.45",
    "context": "{\"function_name\": \"Find_Min_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 96,
    "solution": "```python\n===START===\ndef divisor(n):\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:  # Count the complementary divisor if it's not the same\n                count += 1\n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):",
    "timestamp": "2025-10-17T18:45:30.638952",
    "response_time": "2.90",
    "context": "{\"function_name\": \"divisor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 97,
    "solution": "```python\n===START===\nfrom collections import Counter\n\ndef frequency_lists(list1):\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    # Use Counter to count the frequency of each element\n    frequency_dict = dict(Counter(flattened_list))\n    return frequency_dict\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):",
    "timestamp": "2025-10-17T18:45:32.034559",
    "response_time": "1.39",
    "context": "{\"function_name\": \"frequency_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 98,
    "solution": "```python\n===START===\nfrom functools import reduce\n\ndef multiply_num(numbers):\n    if not numbers:  # Handle empty list case\n        return 0\n    \n    # Multiply all numbers in the list\n    product = reduce(lambda x, y: x * y, numbers)\n    \n    # Divide the product by the length of the list\n    result = product / len(numbers)\n    \n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):",
    "timestamp": "2025-10-17T18:45:34.432705",
    "response_time": "2.40",
    "context": "{\"function_name\": \"multiply_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 99,
    "solution": "```python\n===START===\ndef decimal_to_binary(n):\n    # Convert the decimal number to binary using bin() and remove the '0b' prefix\n    binary_representation = bin(n)[2:]\n    return binary_representation\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):",
    "timestamp": "2025-10-17T18:45:36.767562",
    "response_time": "2.33",
    "context": "{\"function_name\": \"decimal_to_binary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 100,
    "solution": "```python\n===START===\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    num += 1  # Start checking from the next number\n    while not is_palindrome(num):\n        num += 1\n    return num\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):",
    "timestamp": "2025-10-17T18:45:38.648086",
    "response_time": "1.88",
    "context": "{\"function_name\": \"next_smallest_palindrome\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 101,
    "solution": "```python\n===START===\ndef kth_element(arr, k):\n    # Check if k is within the valid range\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n    \n    # Return the kth element (1-based indexing)\n    return arr[k - 1]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):",
    "timestamp": "2025-10-17T18:45:42.682126",
    "response_time": "4.03",
    "context": "{\"function_name\": \"kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 102,
    "solution": "```python\n===START===\ndef snake_to_camel(word):\n    # Split the string by underscores\n    parts = word.split('_')\n    # Capitalize the first letter of each part except the first one\n    # Join them back together\n    return parts[0] + ''.join(part.capitalize() for part in parts[1:])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
    "timestamp": "2025-10-17T18:45:45.618349",
    "response_time": "2.93",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 103,
    "solution": "===START===\ndef eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n    \n    Eulerian numbers are defined recursively as:\n    a(n, m) = (m + 1) * a(n - 1, m) + (n - m) * a(n - 1, m - 1)\n    with the base cases:\n    a(0, 0) = 1\n    a(n, m) = 0 if m < 0 or m >= n\n    \"\"\"\n    # Base cases\n    if m < 0 or m >= n:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    \n    # Recursive formula\n    return (m + 1) * eulerian_num(n - 1, m) + (n - m) * eulerian_num(n - 1, m - 1)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):",
    "timestamp": "2025-10-17T18:45:54.612857",
    "response_time": "8.99",
    "context": "{\"function_name\": \"eulerian_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 104,
    "solution": "```python\n===START===\ndef sort_sublists(input_list):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n    input_list (list of lists): A list containing sublists of strings.\n\n    Returns:\n    list of lists: A list with each sublist sorted alphabetically.\n    \"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):",
    "timestamp": "2025-10-17T18:46:03.284190",
    "response_time": "8.67",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 105,
    "solution": "```python\n===START===\ndef count(lst):\n    \"\"\"\n    Counts the number of True boolean values in the given list.\n\n    Args:\n    lst (list): A list containing boolean values.\n\n    Returns:\n    int: The count of True values in the list.\n    \"\"\"\n    return sum(1 for item in lst if item is True)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):",
    "timestamp": "2025-10-17T18:46:06.415185",
    "response_time": "3.13",
    "context": "{\"function_name\": \"count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 106,
    "solution": "```python\n===START===\ndef add_lists(test_list, test_tup):\n    \"\"\"\n    Appends the given list to the given tuple.\n\n    Parameters:\n    test_list (list): The list to append.\n    test_tup (tuple): The tuple to which the list will be appended.\n\n    Returns:\n    tuple: A new tuple with the list appended.\n    \"\"\"\n    # Convert the tuple to a list, append the list, and convert back to a tuple\n    return tuple(list(test_tup) + [test_list])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):",
    "timestamp": "2025-10-17T18:46:09.143739",
    "response_time": "2.73",
    "context": "{\"function_name\": \"add_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 108,
    "solution": "```python\n===START===\ndef merge_sorted_list(num1, num2, num3):\n    # Combine all three lists\n    combined_list = num1 + num2 + num3\n    # Sort the combined list\n    combined_list.sort()\n    return combined_list\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):",
    "timestamp": "2025-10-17T18:46:11.339797",
    "response_time": "2.19",
    "context": "{\"function_name\": \"merge_sorted_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 109,
    "solution": "```python\n===START===\ndef odd_Equivalent(s, n):\n    # Helper function to check if a binary string represents an odd number\n    def is_odd(binary_str):\n        # A binary number is odd if its last digit is '1'\n        return binary_str[-1] == '1'\n    \n    count = 0\n    length = len(s)\n    \n    # Iterate through the number of rotations\n    for i in range(min(n, length)):\n        # Check if the current binary string is odd\n        if is_odd(s):\n            count += 1\n        # Rotate the binary string to the left by 1\n        s = s[1:] + s[0]\n    \n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):",
    "timestamp": "2025-10-17T18:46:15.682578",
    "response_time": "4.34",
    "context": "{\"function_name\": \"odd_Equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 111,
    "solution": "```python\n===START===\ndef common_in_nested_lists(nestedlist):\n    if not nestedlist:\n        return []\n    \n    # Start with the set of the first list\n    common_elements = set(nestedlist[0])\n    \n    # Intersect with the sets of the remaining lists\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    \n    # Return the common elements as a list\n    return list(common_elements)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):",
    "timestamp": "2025-10-17T18:46:17.286593",
    "response_time": "1.60",
    "context": "{\"function_name\": \"common_in_nested_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 113,
    "solution": "```python\n===START===\ndef check_integer(text):\n    \"\"\"\n    This function checks if the given string represents an integer.\n    \n    Args:\n    text (str): The input string to check.\n    \n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    if not isinstance(text, str):\n        return False\n    \n    text = text.strip()  # Remove leading and trailing whitespaces\n    \n    if not text:\n        return False  # Empty string is not an integer\n    \n    if text[0] in ('-', '+'):  # Check for optional sign\n        text = text[1:]\n    \n    return text.isdigit()\n\n# Example usage:\n# print(check_integer(\"123\"))  # True\n# print(check_integer(\"-123\"))  # True\n# print(check_integer(\"+123\"))  # True\n# print(check_integer(\"12.3\"))  # False\n# print(check_integer(\"abc\"))  # False\n# print(check_integer(\"  456  \"))  # True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):",
    "timestamp": "2025-10-17T18:46:22.790226",
    "response_time": "5.50",
    "context": "{\"function_name\": \"check_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 115,
    "solution": "```python\n===START===\ndef empty_dit(list1):\n    \"\"\"\n    This function checks whether all dictionaries in a list are empty or not.\n    \n    Args:\n    list1 (list): A list of dictionaries.\n    \n    Returns:\n    bool: True if all dictionaries in the list are empty, False otherwise.\n    \"\"\"\n    # Iterate through each dictionary in the list\n    for d in list1:\n        # Check if the current dictionary is not empty\n        if d:\n            return False\n    # If all dictionaries are empty, return True\n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):",
    "timestamp": "2025-10-17T18:46:26.633591",
    "response_time": "3.84",
    "context": "{\"function_name\": \"empty_dit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 116,
    "solution": "===START===\ndef tuple_to_int(nums):\n    \"\"\"\n    Converts a tuple of positive integers into a single integer by concatenating the digits.\n    \n    Args:\n    nums (tuple): A tuple of positive integers.\n    \n    Returns:\n    int: A single integer formed by concatenating the integers in the tuple.\n    \"\"\"\n    # Convert each integer in the tuple to a string, concatenate them, and convert back to an integer\n    return int(''.join(map(str, nums)))\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):",
    "timestamp": "2025-10-17T18:46:28.773926",
    "response_time": "2.14",
    "context": "{\"function_name\": \"tuple_to_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 117,
    "solution": "```python\n===START===\ndef list_to_float(test_list):\n    \"\"\"\n    Converts all possible convertible elements in a list of lists to floats.\n    \n    Args:\n    test_list (list of lists): A list containing sublists with elements to be converted.\n    \n    Returns:\n    list of lists: A new list of lists with convertible elements converted to floats.\n    \"\"\"\n    result = []\n    for sublist in test_list:\n        new_sublist = []\n        for item in sublist:\n            try:\n                # Attempt to convert the item to a float\n                new_sublist.append(float(item))\n            except (ValueError, TypeError):\n                # If conversion fails, keep the original item\n                new_sublist.append(item)\n        result.append(new_sublist)\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):",
    "timestamp": "2025-10-17T18:46:31.767433",
    "response_time": "2.99",
    "context": "{\"function_name\": \"list_to_float\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 118,
    "solution": "```python\n===START===\ndef string_to_list(string):\n    return string.split(\" \")\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):",
    "timestamp": "2025-10-17T18:46:32.860632",
    "response_time": "1.09",
    "context": "{\"function_name\": \"string_to_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 119,
    "solution": "```python\n===START===\ndef search(arr):\n    \"\"\"\n    Finds the element that appears only once in a sorted array where all other elements appear twice.\n    \n    :param arr: List[int] - A sorted array of integers where every element appears twice except for one.\n    :return: int - The element that appears only once.\n    \"\"\"\n    # Using binary search to find the single element\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Ensure mid is even for comparison\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the pair is valid\n        if arr[mid] == arr[mid + 1]:\n            # Single element must be on the right\n            left = mid + 2\n        else:\n            # Single element must be on the left\n            right = mid\n    \n    # The left pointer will point to the single element\n    return arr[left]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):",
    "timestamp": "2025-10-17T18:46:37.702392",
    "response_time": "4.84",
    "context": "{\"function_name\": \"search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 120,
    "solution": "```python\n===START===\ndef max_product_tuple(list1):\n    max_product = float('-inf')  # Initialize with negative infinity to handle all cases\n    for tup in list1:\n        if len(tup) == 2:  # Ensure the tuple has exactly two elements\n            product = abs(tup[0] * tup[1])  # Calculate the absolute product\n            if product > max_product:\n                max_product = product\n    return max_product\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):",
    "timestamp": "2025-10-17T18:46:40.599154",
    "response_time": "2.89",
    "context": "{\"function_name\": \"max_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 123,
    "solution": "===START===\ndef amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        \"\"\"Helper function to calculate the sum of proper divisors of n.\"\"\"\n        divisors_sum = 1  # 1 is a proper divisor of every number > 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors_sum += i\n                if i != n // i:  # Avoid adding the square root twice for perfect squares\n                    divisors_sum += n // i\n        return divisors_sum\n\n    amicable_sum = 0\n    for a in range(2, limit):\n        b = sum_of_divisors(a)\n        if b != a and b < limit and sum_of_divisors(b) == a:\n            amicable_sum += a\n\n    return amicable_sum\n\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):",
    "timestamp": "2025-10-17T18:46:43.763991",
    "response_time": "3.16",
    "context": "{\"function_name\": \"amicable_numbers_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 124,
    "solution": "```python\n===START===\nimport math\n\ndef angle_complex(a, b):\n    \"\"\"\n    Calculate the angle (in radians) of a complex number given its real and imaginary parts.\n\n    Args:\n    a (float): Real part of the complex number.\n    b (float): Imaginary part of the complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n    \"\"\"\n    return math.atan2(b, a)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):",
    "timestamp": "2025-10-17T18:46:45.375466",
    "response_time": "1.61",
    "context": "{\"function_name\": \"angle_complex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 125,
    "solution": "```python\n===START===\ndef find_length(string):\n    # Initialize variables to track the maximum difference and the current difference\n    max_diff = float('-inf')\n    current_diff = 0\n\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is '0', increment the current difference\n        if char == '0':\n            current_diff += 1\n        # If the character is '1', decrement the current difference\n        elif char == '1':\n            current_diff -= 1\n\n        # Update the maximum difference if the current difference is greater\n        max_diff = max(max_diff, current_diff)\n\n        # If the current difference becomes negative, reset it to 0\n        if current_diff < 0:\n            current_diff = 0\n\n    # If max_diff is still negative infinity, it means there were no '0's in the string\n    # In that case, return 0 as no valid substring exists\n    return max_diff if max_diff != float('-inf') else 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):",
    "timestamp": "2025-10-17T18:46:48.476097",
    "response_time": "3.10",
    "context": "{\"function_name\": \"find_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 126,
    "solution": "```python\n===START===\ndef sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    common_divisor = gcd(a, b)\n    result = 0\n\n    for i in range(1, common_divisor + 1):\n        if common_divisor % i == 0:\n            result += i\n\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):",
    "timestamp": "2025-10-17T18:46:49.858274",
    "response_time": "1.38",
    "context": "{\"function_name\": \"sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 127,
    "solution": "```python\n===START===\ndef multiply_int(x, y):\n    return x * y\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):",
    "timestamp": "2025-10-17T18:46:50.624884",
    "response_time": "0.76",
    "context": "{\"function_name\": \"multiply_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 128,
    "solution": "```python\n===START===\ndef long_words(n, str):\n    \"\"\"\n    This function takes an integer n and a list of words (str).\n    It returns a list of words that are longer than n characters.\n    \n    :param n: Integer, the minimum length of words to filter\n    :param str: List of words\n    :return: List of words longer than n characters\n    \"\"\"\n    return [word for word in str if len(word) > n]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):",
    "timestamp": "2025-10-17T18:46:53.519239",
    "response_time": "2.89",
    "context": "{\"function_name\": \"long_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 129,
    "solution": "```python\n===START===\ndef magic_square_test(my_matrix):\n    # Check if the matrix is empty or not square\n    if not my_matrix or not all(len(row) == len(my_matrix) for row in my_matrix):\n        return False\n\n    n = len(my_matrix)\n    # Calculate the sum of the first row to use as the target sum\n    target_sum = sum(my_matrix[0])\n\n    # Check sums of each row\n    for row in my_matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check sums of each column\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != target_sum:\n            return False\n\n    # Check sum of the main diagonal\n    if sum(my_matrix[i][i] for i in range(n)) != target_sum:\n        return False\n\n    # Check sum of the secondary diagonal\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != target_sum:\n        return False\n\n    # If all checks pass, it is a magic square\n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):",
    "timestamp": "2025-10-17T18:46:57.852445",
    "response_time": "4.33",
    "context": "{\"function_name\": \"magic_square_test\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 130,
    "solution": "===START===\nfrom collections import Counter\n\ndef max_occurrences(nums):\n    if not nums:\n        return None  # Return None if the list is empty\n    \n    frequency = Counter(nums)\n    max_item = max(frequency, key=frequency.get)\n    return max_item\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):",
    "timestamp": "2025-10-17T18:46:59.266074",
    "response_time": "1.41",
    "context": "{\"function_name\": \"max_occurrences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 131,
    "solution": "```python\n===START===\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str1) - 1\n\n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            # Swap the vowels\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n\n    return ''.join(str_list)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):",
    "timestamp": "2025-10-17T18:47:01.836058",
    "response_time": "2.56",
    "context": "{\"function_name\": \"reverse_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 132,
    "solution": "```python\n===START===\ndef tup_string(tup1):\n    \"\"\"\n    Converts a tuple to a string by concatenating its elements.\n    \n    Args:\n    tup1 (tuple): The input tuple to be converted to a string.\n    \n    Returns:\n    str: A string representation of the tuple's elements concatenated together.\n    \"\"\"\n    return ''.join(map(str, tup1))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):",
    "timestamp": "2025-10-17T18:47:03.372007",
    "response_time": "1.53",
    "context": "{\"function_name\": \"tup_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 133,
    "solution": "```python\n===START===\ndef sum_negativenum(nums):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list of numbers.\n\n    Args:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The sum of the negative numbers in the list.\n    \"\"\"\n    return sum(num for num in nums if num < 0)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):",
    "timestamp": "2025-10-17T18:47:05.593416",
    "response_time": "2.22",
    "context": "{\"function_name\": \"sum_negativenum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 135,
    "solution": "===START===\ndef hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n\n    A hexagonal number is given by the formula:\n    H(n) = n * (2n - 1)\n\n    Args:\n    n (int): The position of the hexagonal number to calculate.\n\n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    return n * (2 * n - 1)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):",
    "timestamp": "2025-10-17T18:47:07.848017",
    "response_time": "2.25",
    "context": "{\"function_name\": \"hexagonal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 137,
    "solution": "```python\n===START===\ndef zero_count(nums):\n    if not nums:  # Handle empty list\n        return 0\n    \n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    \n    if non_zeroes == 0:  # Avoid division by zero\n        return float('inf')  # Infinite ratio if all elements are zero\n    \n    return zeroes / non_zeroes\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):",
    "timestamp": "2025-10-17T18:47:09.723378",
    "response_time": "1.87",
    "context": "{\"function_name\": \"zero_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 138,
    "solution": "```python\n===START===\ndef is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Function to check whether the given number can be represented as a sum of non-zero powers of 2.\n    :param n: int - The number to check.\n    :return: bool - True if the number can be represented as a sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    if n <= 0:\n        return False\n\n    # Check if all bits in the binary representation of n are either 0 or 1\n    # This is because a number can be represented as a sum of non-zero powers of 2\n    # if and only if its binary representation contains only 1s and 0s.\n    while n > 0:\n        if n % 2 == 0 or n % 2 == 1:\n            n //= 2\n        else:\n            return False\n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):",
    "timestamp": "2025-10-17T18:47:14.232178",
    "response_time": "4.50",
    "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 139,
    "solution": "===START===\nimport math\n\ndef circle_circumference(r):\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return 2 * math.pi * r\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):",
    "timestamp": "2025-10-17T18:47:15.150171",
    "response_time": "0.92",
    "context": "{\"function_name\": \"circle_circumference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 140,
    "solution": "```python\n===START===\ndef extract_singly(test_list):\n    \"\"\"\n    Flattens a list of lists into a single set of numbers.\n\n    Args:\n    test_list (list): A list of lists containing numbers.\n\n    Returns:\n    set: A set containing all unique numbers from the input list of lists.\n    \"\"\"\n    result_set = set()\n    for sublist in test_list:\n        result_set.update(sublist)\n    return result_set\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):",
    "timestamp": "2025-10-17T18:47:16.892330",
    "response_time": "1.74",
    "context": "{\"function_name\": \"extract_singly\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 141,
    "solution": "```python\n===START===\ndef pancake_sort(nums):\n    def flip(sublist, k):\n        \"\"\"Helper function to reverse the first k elements of the sublist.\"\"\"\n        sublist[:k] = sublist[:k][::-1]\n\n    n = len(nums)\n    for size in range(n, 1, -1):\n        # Find the index of the maximum element in the current unsorted portion\n        max_index = nums.index(max(nums[:size]))\n        \n        # Bring the maximum element to the front if it's not already there\n        if max_index != 0:\n            flip(nums, max_index + 1)\n        \n        # Move the maximum element to its correct position\n        flip(nums, size)\n    \n    return nums\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):",
    "timestamp": "2025-10-17T18:47:20.268207",
    "response_time": "3.37",
    "context": "{\"function_name\": \"pancake_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 142,
    "solution": "```python\n===START===\ndef count_samepair(list1, list2, list3):\n    # Ensure all lists are of the same length\n    min_length = min(len(list1), len(list2), len(list3))\n    \n    # Count identical items in the same position\n    count = 0\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):",
    "timestamp": "2025-10-17T18:47:23.867180",
    "response_time": "3.60",
    "context": "{\"function_name\": \"count_samepair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 143,
    "solution": "```python\n===START===\ndef find_lists(Input):\n    \"\"\"\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    \n    :param Input: tuple\n    :return: int - number of lists in the tuple\n    \"\"\"\n    if not isinstance(Input, tuple):\n        raise ValueError(\"Input must be a tuple\")\n    \n    return sum(1 for item in Input if isinstance(item, list))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):",
    "timestamp": "2025-10-17T18:47:25.535183",
    "response_time": "1.66",
    "context": "{\"function_name\": \"find_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 145,
    "solution": "```python\n===START===\ndef max_Abs_Diff(arr):\n    if not arr or len(arr) < 2:\n        return 0  # If the array is empty or has less than 2 elements, return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val - min_val\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):",
    "timestamp": "2025-10-17T18:47:26.984327",
    "response_time": "1.45",
    "context": "{\"function_name\": \"max_Abs_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 160,
    "solution": "```python\n===START===\ndef find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y such that ax + by = n.\n    \n    Parameters:\n    a (int): Coefficient of x.\n    b (int): Coefficient of y.\n    n (int): Target value.\n    \n    Returns:\n    tuple: A tuple (x, y) if a solution exists, otherwise None.\n    \"\"\"\n    # Iterate over possible values of x\n    for x in range(-abs(n), abs(n) + 1):\n        # Calculate the corresponding y\n        if b != 0:\n            y = (n - a * x) / b\n            # Check if y is an integer\n            if y.is_integer():\n                return (x, int(y))\n    \n    # If no solution is found, return None\n    return None\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):",
    "timestamp": "2025-10-17T18:47:30.027708",
    "response_time": "3.04",
    "context": "{\"function_name\": \"find_solution\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 161,
    "solution": "```python\n===START===\ndef remove_elements(list1, list2):\n    \"\"\"\n    Removes all elements from list1 that are present in list2.\n\n    Args:\n    list1 (list): The list from which elements will be removed.\n    list2 (list): The list containing elements to be removed from list1.\n\n    Returns:\n    list: A new list with elements from list1 that are not in list2.\n    \"\"\"\n    return [item for item in list1 if item not in list2]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):",
    "timestamp": "2025-10-17T18:47:33.069065",
    "response_time": "3.04",
    "context": "{\"function_name\": \"remove_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 162,
    "solution": "```python\n===START===\ndef sum_series(n):\n    total = 0\n    i = 0\n    while n - 2 * i >= 0:\n        total += n - 2 * i\n        i += 1\n    return total\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):",
    "timestamp": "2025-10-17T18:47:35.505841",
    "response_time": "2.43",
    "context": "{\"function_name\": \"sum_series\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 163,
    "solution": "```python\n===START===\nimport math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon given the number of sides and the length of each side.\n\n    :param s: int, the number of sides of the polygon\n    :param l: float, the length of each side\n    :return: float, the area of the polygon\n    \"\"\"\n    if s < 3 or l <= 0:\n        raise ValueError(\"A polygon must have at least 3 sides and side length must be positive.\")\n    \n    # Formula for the area of a regular polygon: (s * l^2) / (4 * tan(pi / s))\n    area = (s * l**2) / (4 * math.tan(math.pi / s))\n    return area\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):",
    "timestamp": "2025-10-17T18:47:38.295728",
    "response_time": "2.79",
    "context": "{\"function_name\": \"area_polygon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 164,
    "solution": "```python\n===START===\ndef div_sum(n):\n    def sum_of_divisors(num):\n        divisors_sum = 0\n        for i in range(1, num // 2 + 1):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    if isinstance(n, tuple) and len(n) == 2 and all(isinstance(x, int) for x in n):\n        a, b = n\n        return sum_of_divisors(a) == sum_of_divisors(b)\n    else:\n        raise ValueError(\"Input must be a tuple of two integers.\")\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):",
    "timestamp": "2025-10-17T18:47:40.511979",
    "response_time": "2.21",
    "context": "{\"function_name\": \"are_equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 165,
    "solution": "```python\n===START===\ndef count_char_position(str1):\n    # Convert the string to lowercase for case-insensitive comparison\n    str1 = str1.lower()\n    count = 0\n    \n    # Iterate through the string and compare each character's position\n    for i, char in enumerate(str1):\n        # Check if the character is a letter and its position matches the alphabet\n        if char.isalpha() and (ord(char) - ord('a') == i):\n            count += 1\n    \n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):",
    "timestamp": "2025-10-17T18:47:44.613239",
    "response_time": "4.09",
    "context": "{\"function_name\": \"count_char_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 166,
    "solution": "```python\n===START===\ndef find_even_pair(A):\n    count = 0\n    n = len(A)\n    \n    # Iterate through all pairs in the list\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Check if the XOR of the pair is even\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    \n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):",
    "timestamp": "2025-10-17T18:47:46.647021",
    "response_time": "2.03",
    "context": "{\"function_name\": \"find_even_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 167,
    "solution": "```python\n===START===\ndef next_power_of_2(n):\n    if n <= 0:\n        return 1  # The smallest power of 2 is 1 (2^0)\n    \n    power = 1\n    while power < n:\n        power *= 2\n    \n    return power\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):",
    "timestamp": "2025-10-17T18:47:47.736762",
    "response_time": "1.09",
    "context": "{\"function_name\": \"next_power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 168,
    "solution": "```python\n# ===START===\ndef frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n\n    Parameters:\n    a (list): The list of numbers.\n    x (int/float): The number to count occurrences of.\n\n    Returns:\n    int: The count of occurrences of x in the list a.\n    \"\"\"\n    return a.count(x)\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):",
    "timestamp": "2025-10-17T18:47:49.273460",
    "response_time": "1.53",
    "context": "{\"function_name\": \"frequency\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 170,
    "solution": "```python\n===START===\ndef sum_range_list(list1, m, n):\n    \"\"\"\n    This function calculates the sum of numbers in a list within a range specified by two indices.\n    \n    Parameters:\n    list1 (list): The list of numbers.\n    m (int): The starting index of the range (inclusive).\n    n (int): The ending index of the range (inclusive).\n    \n    Returns:\n    int/float: The sum of the numbers in the specified range.\n    \"\"\"\n    # Ensure indices are within bounds\n    if m < 0 or n >= len(list1) or m > n:\n        raise ValueError(\"Invalid indices: Ensure 0 <= m <= n < len(list1)\")\n    \n    # Calculate the sum of the range\n    return sum(list1[m:n+1])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):",
    "timestamp": "2025-10-17T18:47:52.739367",
    "response_time": "3.46",
    "context": "{\"function_name\": \"sum_range_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 171,
    "solution": "===START===\ndef perimeter_pentagon(a):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its side.\n\n    Parameters:\n    a (float): The length of one side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    if a <= 0:\n        raise ValueError(\"The length of a side must be a positive number.\")\n    \n    return 5 * a\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):",
    "timestamp": "2025-10-17T18:47:54.958297",
    "response_time": "2.21",
    "context": "{\"function_name\": \"perimeter_pentagon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 172,
    "solution": "```python\n===START===\ndef count_occurance(s):\n    return s.count('std')\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):",
    "timestamp": "2025-10-17T18:47:55.702987",
    "response_time": "0.74",
    "context": "{\"function_name\": \"count_occurance\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 222,
    "solution": "```python\n===START===\ndef check_type(test_tuple):\n    # Check if the tuple is empty\n    if not test_tuple:\n        return True  # An empty tuple is considered to have all elements of the same type\n    \n    # Get the type of the first element\n    first_type = type(test_tuple[0])\n    \n    # Check if all elements have the same type as the first element\n    return all(isinstance(element, first_type) for element in test_tuple)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):",
    "timestamp": "2025-10-17T18:47:57.495791",
    "response_time": "1.79",
    "context": "{\"function_name\": \"check_type\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 223,
    "solution": "```python\n===START===\ndef is_majority(arr, n, x):\n    # A majority element must appear more than n/2 times\n    majority_count = n // 2 + 1\n    \n    # Binary search for the first occurrence of x\n    low, high = 0, n - 1\n    first_occurrence = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            first_occurrence = mid\n            high = mid - 1  # Continue searching in the left half\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # If x is not found in the array, it cannot be the majority element\n    if first_occurrence == -1:\n        return False\n    \n    # Check if the element at first_occurrence + majority_count - 1 is still x\n    if first_occurrence + majority_count - 1 < n and arr[first_occurrence + majority_count - 1] == x:\n        return True\n    return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):",
    "timestamp": "2025-10-17T18:48:01.012468",
    "response_time": "3.51",
    "context": "{\"function_name\": \"binary_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 224,
    "solution": "```python\n===START===\ndef count_Set_Bits(n):\n    # Convert the number to its binary representation and count the '1's\n    return bin(n).count('1')\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):",
    "timestamp": "2025-10-17T18:48:02.116624",
    "response_time": "1.10",
    "context": "{\"function_name\": \"count_Set_Bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 226,
    "solution": "```python\n===START===\ndef odd_values_string(str):\n    # Return a new string with characters at even indices\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to remove the characters which have odd index values of a given string.\n\n### Signature\ndef odd_values_string(str):",
    "timestamp": "2025-10-17T18:48:03.315883",
    "response_time": "1.20",
    "context": "{\"function_name\": \"odd_values_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 227,
    "solution": "```python\n===START===\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find minimum of three numbers.\n\n### Signature\ndef min_of_three(a,b,c):",
    "timestamp": "2025-10-17T18:48:04.417651",
    "response_time": "1.10",
    "context": "{\"function_name\": \"min_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 228,
    "solution": "```python\n===START===\ndef all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Function to check whether all the bits are unset in the given range or not.\n    \n    Parameters:\n    n (int): The number to check.\n    l (int): The starting position of the range (1-based index).\n    r (int): The ending position of the range (1-based index).\n    \n    Returns:\n    bool: True if all bits are unset in the given range, False otherwise.\n    \"\"\"\n    # Create a mask with bits set in the range [l, r]\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    \n    # Check if all bits in the range are unset\n    return (n & mask) == 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether all the bits are unset in the given range or not.\n\n### Signature\ndef all_Bits_Set_In_The_Given_Range(n,l,r):",
    "timestamp": "2025-10-17T18:48:07.160018",
    "response_time": "2.73",
    "context": "{\"function_name\": \"all_Bits_Set_In_The_Given_Range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 229,
    "solution": "```python\n===START===\ndef re_arrange_array(arr, n):\n    # Separate the first n elements\n    sub_array = arr[:n]\n    \n    # Separate negative and positive elements while maintaining their order\n    negatives = [x for x in sub_array if x < 0]\n    positives = [x for x in sub_array if x >= 0]\n    \n    # Combine negatives and positives\n    rearranged = negatives + positives\n    \n    # Replace the first n elements in the original array\n    arr[:n] = rearranged\n    \n    return arr\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n### Signature\ndef re_arrange_array(arr, n):",
    "timestamp": "2025-10-17T18:48:09.136630",
    "response_time": "1.97",
    "context": "{\"function_name\": \"re_arrange_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 230,
    "solution": "```python\n===START===\ndef replace_blank(str1, char):\n    # Replace blank spaces in the string with the given character\n    return str1.replace(' ', char)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n### Signature\ndef replace_blank(str1,char):",
    "timestamp": "2025-10-17T18:48:10.494862",
    "response_time": "1.35",
    "context": "{\"function_name\": \"replace_blank\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 232,
    "solution": "```python\n===START===\ndef larg_nnum(list1, n):\n    # Sort the list in descending order\n    sorted_list = sorted(list1, reverse=True)\n    # Return the first n elements\n    return sorted_list[:n]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n### Signature\ndef larg_nnum(list1,n):",
    "timestamp": "2025-10-17T18:48:12.362310",
    "response_time": "1.86",
    "context": "{\"function_name\": \"larg_nnum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 233,
    "solution": "===START===\nimport math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder's base.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    if r <= 0 or h <= 0:\n        raise ValueError(\"Radius and height must be positive values.\")\n    \n    # Lateral surface area formula: 2 * \u03c0 * r * h\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cylinder.\n\n### Signature\ndef lateralsuface_cylinder(r,h):",
    "timestamp": "2025-10-17T18:48:14.129689",
    "response_time": "1.76",
    "context": "{\"function_name\": \"lateralsuface_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 234,
    "solution": "===START===\ndef volume_cube(l):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Parameters:\n    l (float): The length of a side of the cube.\n\n    Returns:\n    float: The volume of the cube.\n    \"\"\"\n    if l < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return l ** 3\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the volume of a cube given its side length.\n\n### Signature\ndef volume_cube(l):",
    "timestamp": "2025-10-17T18:48:17.392380",
    "response_time": "3.26",
    "context": "{\"function_name\": \"volume_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 235,
    "solution": "```python\n===START===\ndef even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of the given number to 1.\n    \n    Parameters:\n    n (int): The input number.\n    \n    Returns:\n    int: The number with all even bits set to 1.\n    \"\"\"\n    # Create a mask with all even bits set to 1\n    # Even bits are 0, 2, 4, 6, ...\n    # Example: For a 32-bit number, the mask would be 0xAAAAAAAA\n    mask = 0\n    for i in range(0, 32, 2):  # Assuming a 32-bit integer\n        mask |= (1 << i)\n    \n    # Set all even bits of n using the mask\n    return n | mask\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to set all even bits of a given number.\n\n### Signature\ndef even_bit_set_number(n):",
    "timestamp": "2025-10-17T18:48:20.611912",
    "response_time": "3.22",
    "context": "{\"function_name\": \"even_bit_set_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 237,
    "solution": "```python\n===START===\ndef check_occurences(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns a dictionary mapping each unique tuple\n    to the number of times it occurs in the list.\n    \n    :param test_list: List of tuples\n    :return: Dictionary with tuples as keys and their occurrence counts as values\n    \"\"\"\n    occurrence_dict = {}\n    for item in test_list:\n        if item in occurrence_dict:\n            occurrence_dict[item] += 1\n        else:\n            occurrence_dict[item] = 1\n    return occurrence_dict\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n### Signature\ndef check_occurences(test_list):",
    "timestamp": "2025-10-17T18:48:23.152045",
    "response_time": "2.54",
    "context": "{\"function_name\": \"check_occurences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 238,
    "solution": "```python\n===START===\ndef number_of_substrings(str):\n    # The number of non-empty substrings of a string of length n is given by the formula:\n    # n * (n + 1) / 2\n    n = len(str)\n    return n * (n + 1) // 2\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of non-empty substrings of a given string.\n\n### Signature\ndef number_of_substrings(str):",
    "timestamp": "2025-10-17T18:48:24.941117",
    "response_time": "1.78",
    "context": "{\"function_name\": \"number_of_substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 239,
    "solution": "```python\n===START===\ndef get_total_number_of_sequences(m, n):\n    def count_sequences(current, remaining_length):\n        # Base case: if no more elements are needed, there's one valid sequence\n        if remaining_length == 0:\n            return 1\n        \n        # Recursive case: count sequences starting from `current`\n        total = 0\n        for next_element in range(current * 2, m + 1):\n            total += count_sequences(next_element, remaining_length - 1)\n        return total\n\n    # Start counting sequences for all possible starting values\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, n - 1)\n    \n    return total_sequences\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n### Signature\ndef get_total_number_of_sequences(m,n):",
    "timestamp": "2025-10-17T18:48:27.554723",
    "response_time": "2.61",
    "context": "{\"function_name\": \"get_total_number_of_sequences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 240,
    "solution": "```python\n# ===START===\ndef replace_list(list1, list2):\n    if list1:  # Check if list1 is not empty\n        list1[-1:] = list2  # Replace the last element of list1 with the elements of list2\n    return list1\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\n### Signature\ndef replace_list(list1,list2):",
    "timestamp": "2025-10-17T18:48:29.038284",
    "response_time": "1.48",
    "context": "{\"function_name\": \"replace_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 242,
    "solution": "```python\n===START===\ndef count_charac(str1):\n    return len(str1)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the total number of characters in a string.\n\n### Signature\ndef count_charac(str1):",
    "timestamp": "2025-10-17T18:48:29.722100",
    "response_time": "0.68",
    "context": "{\"function_name\": \"count_charac\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 244,
    "solution": "```python\n===START===\nimport math\n\ndef next_Perfect_Square(N):\n    # Find the square root of the given number\n    sqrt_N = math.sqrt(N)\n    \n    # Find the next integer greater than the square root\n    next_int = math.ceil(sqrt_N)\n    \n    # Return the square of the next integer\n    return next_int ** 2\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the next perfect square greater than a given number.\n\n### Signature\ndef next_Perfect_Square(N):",
    "timestamp": "2025-10-17T18:48:31.173751",
    "response_time": "1.45",
    "context": "{\"function_name\": \"next_Perfect_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 245,
    "solution": "```python\n===START===\ndef max_sum(arr):\n    n = len(arr)\n    \n    # Base case: if the array is empty, return 0\n    if n == 0:\n        return 0\n    \n    # Step 1: Create two arrays to store the maximum sum of increasing subsequence\n    # and decreasing subsequence for each element\n    inc = [0] * n  # Maximum sum of increasing subsequence ending at index i\n    dec = [0] * n  # Maximum sum of decreasing subsequence starting at index i\n    \n    # Step 2: Fill the `inc` array\n    for i in range(n):\n        inc[i] = arr[i]  # Initialize with the value of the element itself\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    \n    # Step 3: Fill the `dec` array\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]  # Initialize with the value of the element itself\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    \n    # Step 4: Calculate the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        # Subtract arr[i] because it is added twice (once in inc and once in dec)\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_bitonic_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\n### Signature\ndef max_sum(arr):",
    "timestamp": "2025-10-17T18:48:37.190015",
    "response_time": "6.01",
    "context": "{\"function_name\": \"max_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 246,
    "solution": "```python\n===START===\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot compute the square root of a negative number.\")\n    \n    # Initial guess\n    guess = number / 2.0 if number != 0 else 0\n    tolerance = 1e-10  # Precision tolerance\n    \n    while True:\n        # Compute a better approximation\n        next_guess = (guess + number / guess) / 2.0\n        \n        # Check if the difference is within the tolerance\n        if abs(next_guess - guess) < tolerance:\n            return next_guess\n        \n        # Update the guess\n        guess = next_guess\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function for computing square roots using the babylonian method.\n\n### Signature\ndef babylonian_squareroot(number):",
    "timestamp": "2025-10-17T18:48:39.778791",
    "response_time": "2.58",
    "context": "{\"function_name\": \"babylonian_squareroot\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 247,
    "solution": "```python\n===START===\ndef lps(str):\n    n = len(str)\n    \n    # Create a 2D array to store the length of palindromic subsequence\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    # Strings of length 1 are palindromes of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the table. The bottom-up approach is used here.\n    for cl in range(2, n + 1):  # cl is the length of the substring\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    \n    # The length of the longest palindromic subsequence is in dp[0][n-1]\n    return dp[0][n - 1]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n\n### Signature\ndef lps(str):",
    "timestamp": "2025-10-17T18:48:45.334610",
    "response_time": "5.55",
    "context": "{\"function_name\": \"lps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 248,
    "solution": "```python\n===START===\ndef harmonic_sum(n):\n    if n <= 1:\n        return 0\n    return sum(1 / i for i in range(1, n))\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in an integer n and calculates the harmonic sum of n-1.\n\n### Signature\ndef harmonic_sum(n):",
    "timestamp": "2025-10-17T18:48:46.560855",
    "response_time": "1.22",
    "context": "{\"function_name\": \"harmonic_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 249,
    "solution": "===START===\ndef intersection_array(array_nums1, array_nums2):\n    # Convert both arrays to sets to remove duplicates and allow set intersection\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Find the intersection of the two sets\n    intersection = set1 & set2\n    \n    # Convert the result back to a list\n    return list(intersection)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the intersection of two arrays.\n\n### Signature\ndef intersection_array(array_nums1,array_nums2):",
    "timestamp": "2025-10-17T18:48:48.022036",
    "response_time": "1.46",
    "context": "{\"function_name\": \"intersection_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 250,
    "solution": "```python\n===START===\ndef count_X(tup, x):\n    \"\"\"\n    Counts the occurrences of an element x in a tuple tup.\n\n    Parameters:\n    tup (tuple): The tuple in which to count occurrences of x.\n    x (any): The element to count in the tuple.\n\n    Returns:\n    int: The number of times x appears in tup.\n    \"\"\"\n    return tup.count(x)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\n### Signature\ndef count_X(tup, x):",
    "timestamp": "2025-10-17T18:48:49.501709",
    "response_time": "1.48",
    "context": "{\"function_name\": \"count_X\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 251,
    "solution": "```python\n===START===\ndef insert_element(list, element):\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\n### Signature\ndef insert_element(list,element):",
    "timestamp": "2025-10-17T18:48:50.567860",
    "response_time": "1.06",
    "context": "{\"function_name\": \"insert_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 252,
    "solution": "```python\n===START===\nimport cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert a list of complex numbers to their polar coordinates.\n    \n    Args:\n    numbers (list of complex): A list of complex numbers.\n    \n    Returns:\n    list of tuple: A list of tuples where each tuple contains the magnitude and phase of the corresponding complex number.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        polar_coordinates.append(cmath.polar(number))\n    return polar_coordinates\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to convert complex numbers to polar coordinates.\n\n### Signature\ndef convert(numbers):",
    "timestamp": "2025-10-17T18:48:52.316274",
    "response_time": "1.74",
    "context": "{\"function_name\": \"convert\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 253,
    "solution": "```python\n===START===\ndef count_integer(list1):\n    \"\"\"\n    This function takes a list as input and returns the count of integer elements in the list.\n    \n    :param list1: List of elements\n    :return: Count of integer elements in the list\n    \"\"\"\n    return sum(1 for item in list1 if isinstance(item, int))\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that returns the number of integer elements in a given list.\n\n### Signature\ndef count_integer(list1):",
    "timestamp": "2025-10-17T18:48:54.481042",
    "response_time": "2.16",
    "context": "{\"function_name\": \"count_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 255,
    "solution": "```python\n===START===\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\n### Signature\ndef combinations_colors(l, n):",
    "timestamp": "2025-10-17T18:48:55.877629",
    "response_time": "1.39",
    "context": "{\"function_name\": \"combinations_colors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 256,
    "solution": "```python\n===START===\nimport math\n\ndef count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    # Sieve of Eratosthenes\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False  # 0 and 1 are not prime numbers\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n### Signature\ndef count_Primes_nums(n):",
    "timestamp": "2025-10-17T18:48:57.634235",
    "response_time": "1.75",
    "context": "{\"function_name\": \"count_Primes_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 257,
    "solution": "===START===\ndef swap_numbers(a, b):\n    return (b, a)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\n### Signature\ndef swap_numbers(a,b):",
    "timestamp": "2025-10-17T18:48:58.467163",
    "response_time": "0.83",
    "context": "{\"function_name\": \"swap_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 259,
    "solution": "```python\n===START===\ndef maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and returns a tuple\n    where each element is the maximum of the corresponding elements in the input tuples.\n    \"\"\"\n    # Use zip to pair elements from both tuples and take the maximum of each pair\n    return tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to maximize the given two tuples.\n\n### Signature\ndef maximize_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:49:00.629539",
    "response_time": "2.16",
    "context": "{\"function_name\": \"maximize_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 260,
    "solution": "```python\n===START===\ndef newman_prime(n):\n    # Helper function to calculate the Newman\u2013Shanks\u2013Williams sequence\n    def nsw_sequence(k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return 1\n        else:\n            a, b = 1, 1\n            for _ in range(2, k + 1):\n                a, b = b, 2 * b + a\n            return b\n\n    # Helper function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Find the nth Newman\u2013Shanks\u2013Williams prime\n    count = 0\n    k = 0\n    while True:\n        nsw_num = nsw_sequence(k)\n        if is_prime(nsw_num):\n            count += 1\n            if count == n:\n                return nsw_num\n        k += 1\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n### Signature\ndef newman_prime(n):",
    "timestamp": "2025-10-17T18:49:03.525105",
    "response_time": "2.89",
    "context": "{\"function_name\": \"newman_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 261,
    "solution": "```python\n===START===\ndef division_elements(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    result = []\n    for a, b in zip(test_tup1, test_tup2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero encountered in tuple elements.\")\n        result.append(a / b)\n    \n    return tuple(result)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n### Signature\ndef division_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:49:05.217815",
    "response_time": "1.67",
    "context": "{\"function_name\": \"division_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 262,
    "solution": "```python\n===START===\ndef split_two_parts(list1, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part is L.\n    \n    Parameters:\n    list1 (list): The list to be split.\n    L (int): The length of the first part of the list.\n    \n    Returns:\n    tuple: A tuple containing two lists, the first with length L and the second with the remaining elements.\n    \"\"\"\n    # Ensure L is not greater than the length of the list\n    L = min(L, len(list1))\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return (part1, part2)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\n### Signature\ndef split_two_parts(list1, L):",
    "timestamp": "2025-10-17T18:49:10.503686",
    "response_time": "5.28",
    "context": "{\"function_name\": \"split_two_parts\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 264,
    "solution": "===START===\ndef dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n    \n    Parameters:\n    h_age (int): The human age of the dog in years.\n    \n    Returns:\n    int: The dog's age in dog's years.\n    \"\"\"\n    if h_age <= 0:\n        return 0  # Invalid age, return 0\n    \n    if h_age == 1:\n        return 15  # First year of a dog's life is equivalent to 15 human years\n    elif h_age == 2:\n        return 15 + 9  # Second year adds 9 human years\n    else:\n        return 15 + 9 + (h_age - 2) * 5  # Each additional year adds 5 human years\n\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate a dog's age in dog's years.\n\n### Signature\ndef dog_age(h_age):",
    "timestamp": "2025-10-17T18:49:12.763731",
    "response_time": "2.26",
    "context": "{\"function_name\": \"dog_age\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 265,
    "solution": "```python\n===START===\ndef list_split(S, step):\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\n### Signature\ndef list_split(S, step):",
    "timestamp": "2025-10-17T18:49:13.881529",
    "response_time": "1.11",
    "context": "{\"function_name\": \"list_split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 266,
    "solution": "===START===\ndef lateralsurface_cube(l):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    l (float): The side length of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    if l < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    \n    # Lateral surface area of a cube is 4 times the area of one side\n    return 4 * (l ** 2)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cube given its side length.\n\n### Signature\ndef lateralsurface_cube(l):",
    "timestamp": "2025-10-17T18:49:15.750673",
    "response_time": "1.86",
    "context": "{\"function_name\": \"lateralsurface_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 267,
    "solution": "```python\n===START===\ndef square_Sum(n):\n    # Initialize the sum\n    sum_of_squares = 0\n    \n    # Generate the first n odd numbers and calculate their squares\n    for i in range(n):\n        odd_number = 2 * i + 1\n        sum_of_squares += odd_number ** 2\n    \n    return sum_of_squares\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n### Signature\ndef square_Sum(n):",
    "timestamp": "2025-10-17T18:49:17.244429",
    "response_time": "1.49",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 268,
    "solution": "```python\n===START===\ndef find_star_num(n):\n    \"\"\"\n    Function to find the nth star number.\n    A star number is a centered figurate number that represents a centered hexagram (six-pointed star).\n    The formula for the nth star number is: 6 * n * (n - 1) + 1\n    \n    :param n: The position of the star number to find (n >= 1)\n    :return: The nth star number\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    return 6 * n * (n - 1) + 1\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the n'th star number.\n\n### Signature\ndef find_star_num(n):",
    "timestamp": "2025-10-17T18:49:19.625944",
    "response_time": "2.38",
    "context": "{\"function_name\": \"find_star_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 269,
    "solution": "===START===\ndef ascii_value(k):\n    \"\"\"\n    This function takes a single character as input and returns its ASCII value.\n    \n    :param k: A single character string\n    :return: Integer ASCII value of the character\n    \"\"\"\n    if len(k) != 1:\n        raise ValueError(\"Input must be a single character.\")\n    return ord(k)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the ascii value of a character.\n\n### Signature\ndef ascii_value(k):",
    "timestamp": "2025-10-17T18:49:21.486914",
    "response_time": "1.86",
    "context": "{\"function_name\": \"ascii_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 270,
    "solution": "```python\n===START===\ndef sum_even_and_even_index(arr):\n    # Initialize the sum to 0\n    total = 0\n    \n    # Iterate through the list with index and value\n    for index, value in enumerate(arr):\n        # Check if the index is even and the value is even\n        if index % 2 == 0 and value % 2 == 0:\n            total += value\n    \n    return total\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of even numbers at even positions of a list.\n\n### Signature\ndef sum_even_and_even_index(arr):",
    "timestamp": "2025-10-17T18:49:22.928014",
    "response_time": "1.44",
    "context": "{\"function_name\": \"sum_even_and_even_index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 271,
    "solution": "```python\n===START===\ndef even_Power_Sum(n):\n    # Initialize the sum\n    total_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i  # Calculate the ith even number\n        total_sum += even_number ** 5  # Add its fifth power to the sum\n    \n    return total_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n### Signature\ndef even_Power_Sum(n):",
    "timestamp": "2025-10-17T18:49:24.642881",
    "response_time": "1.69",
    "context": "{\"function_name\": \"even_Power_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 272,
    "solution": "```python\n===START===\ndef rear_extract(test_list):\n    # Extract the last element of each tuple in the list\n    return [tup[-1] for tup in test_list]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n### Signature\ndef rear_extract(test_list):",
    "timestamp": "2025-10-17T18:49:25.452445",
    "response_time": "0.80",
    "context": "{\"function_name\": \"rear_extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 273,
    "solution": "```python\n===START===\ndef substract_elements(test_tup1, test_tup2):\n    # Ensure both tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    # Subtract elements of the tuples\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n### Signature\ndef substract_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:49:26.844146",
    "response_time": "1.39",
    "context": "{\"function_name\": \"substract_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 274,
    "solution": "```python\n===START===\nfrom math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function calculates the sum of binomial coefficients at even indices for a given positive integer n.\n    \"\"\"\n    # Sum binomial coefficients at even indices\n    return sum(comb(n, k) for k in range(0, n + 1, 2))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n### Signature\ndef even_binomial_Coeff_Sum( n):",
    "timestamp": "2025-10-17T18:49:28.591978",
    "response_time": "1.74",
    "context": "{\"function_name\": \"even_binomial_Coeff_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 276,
    "solution": "===START===\nimport math\n\ndef volume_cylinder(r, h):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * r**2 * h\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n\n### Signature\ndef volume_cylinder(r,h):",
    "timestamp": "2025-10-17T18:49:30.066155",
    "response_time": "1.47",
    "context": "{\"function_name\": \"volume_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 277,
    "solution": "```python\n===START===\ndef dict_filter(dict, n):\n    # Filter the dictionary to include only entries with values >= n\n    return {key: value for key, value in dict.items() if value >= n}\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n### Signature\ndef dict_filter(dict,n):",
    "timestamp": "2025-10-17T18:49:31.830573",
    "response_time": "1.76",
    "context": "{\"function_name\": \"dict_filter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 278,
    "solution": "```python\n===START===\ndef count_first_elements(test_tup):\n    \"\"\"\n    This function takes a tuple of elements and returns the count of elements\n    that occur before the first tuple element in the given tuple.\n    \n    :param test_tup: A tuple containing elements, which may include other tuples.\n    :return: An integer count of elements before the first tuple element.\n    \"\"\"\n    # Iterate through the tuple and find the first occurrence of a tuple element\n    for idx, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            return idx  # Return the index, which is the count of elements before the tuple\n    \n    # If no tuple element is found, return the length of the tuple\n    return len(test_tup)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n\n### Signature\ndef count_first_elements(test_tup):",
    "timestamp": "2025-10-17T18:49:39.568301",
    "response_time": "7.73",
    "context": "{\"function_name\": \"count_first_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 279,
    "solution": "```python\n===START===\ndef is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n    A decagonal number is a figurate number that represents a decagon.\n    The formula for the nth decagonal number is: n * (4n - 3)\n    \n    Args:\n    n (int): The position of the decagonal number to find.\n    \n    Returns:\n    int: The nth decagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    return n * (4 * n - 3)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth decagonal number.\n\n### Signature\ndef is_num_decagonal(n):",
    "timestamp": "2025-10-17T18:49:42.395708",
    "response_time": "2.82",
    "context": "{\"function_name\": \"is_num_decagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 280,
    "solution": "```python\n===START===\ndef sequential_search(dlist, item):\n    \"\"\"\n    Perform a sequential search on the list to find the item.\n\n    Args:\n    dlist (list): The list to search through.\n    item: The item to search for.\n\n    Returns:\n    tuple: A tuple containing a boolean indicating if the item is found,\n           and the index of the item (or -1 if not found).\n    \"\"\"\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n### Signature\ndef sequential_search(dlist, item):",
    "timestamp": "2025-10-17T18:49:44.749460",
    "response_time": "2.35",
    "context": "{\"function_name\": \"sequential_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 281,
    "solution": "```python\n===START===\ndef all_unique(test_list):\n    \"\"\"\n    Check if all elements in the given list are unique.\n\n    Args:\n    test_list (list): The list to check for uniqueness.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(test_list) == len(set(test_list))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check if the elements of a given list are unique or not.\n\n### Signature\ndef all_unique(test_list):",
    "timestamp": "2025-10-17T18:49:46.408407",
    "response_time": "1.65",
    "context": "{\"function_name\": \"all_unique\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 282,
    "solution": "```python\n===START===\ndef sub_list(nums1, nums2):\n    # Ensure both lists are of the same length\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    # Subtract elements of nums2 from nums1 element-wise\n    return [a - b for a, b in zip(nums1, nums2)]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to subtract two lists element-wise.\n\n### Signature\ndef sub_list(nums1,nums2):",
    "timestamp": "2025-10-17T18:49:48.014961",
    "response_time": "1.60",
    "context": "{\"function_name\": \"sub_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 283,
    "solution": "```python\n===START===\ndef validate(n):\n    # Convert the number to a string to process each digit\n    n_str = str(abs(n))  # Use abs to handle negative numbers\n    digit_count = {}\n    \n    # Count the frequency of each digit\n    for digit in n_str:\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    \n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n### Signature\ndef validate(n):",
    "timestamp": "2025-10-17T18:49:50.433978",
    "response_time": "2.41",
    "context": "{\"function_name\": \"validate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 284,
    "solution": "```python\n===START===\ndef check_element(list, element):\n    return all(item == element for item in list)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\n### Signature\ndef check_element(list,element):",
    "timestamp": "2025-10-17T18:49:52.071889",
    "response_time": "1.63",
    "context": "{\"function_name\": \"check_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 285,
    "solution": "```python\n===START===\nimport re\n\ndef text_match_two_three(text):\n    # Define the regex pattern for 'a' followed by two or three 'b's\n    pattern = r'a(bb|bbb)'\n    # Use re.search to check if the pattern exists in the text\n    return bool(re.search(pattern, text))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n### Signature\ndef text_match_two_three(text):",
    "timestamp": "2025-10-17T18:49:53.676696",
    "response_time": "1.60",
    "context": "{\"function_name\": \"text_match_two_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 286,
    "solution": "```python\n===START===\ndef max_sub_array_sum_repeated(a, n, k):\n    def kadane(arr):\n        \"\"\"Helper function to find the maximum subarray sum using Kadane's algorithm.\"\"\"\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    # Case 1: If k == 1, we just need to find the max subarray sum in the single array\n    if k == 1:\n        return kadane(a)\n\n    # Case 2: If k > 1, we need to consider the contribution of the first array, the last array,\n    # and the sum of the middle arrays (if applicable).\n    # Compute the sum of the array\n    array_sum = sum(a)\n\n    # Compute the maximum prefix sum\n    max_prefix_sum = float('-inf')\n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n\n    # Compute the maximum suffix sum\n    max_suffix_sum = float('-inf')\n    current_suffix_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n\n    # Compute the maximum subarray sum for two concatenated arrays\n    max_two_concat_sum = kadane(a * 2)\n\n    # If the total sum of the array is positive, consider the contribution of the middle arrays\n    if array_sum > 0:\n        return max(max_two_concat_sum, max_prefix_sum + max_suffix_sum + (k - 2) * array_sum)\n    else:\n        # If the total sum is not positive, the middle arrays do not contribute positively\n        return max(max_two_concat_sum, max_prefix_sum + max_suffix_sum)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n### Signature\ndef max_sub_array_sum_repeated(a, n, k):",
    "timestamp": "2025-10-17T18:50:01.622549",
    "response_time": "7.94",
    "context": "{\"function_name\": \"max_sub_array_sum_repeated\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 287,
    "solution": "```python\n===START===\ndef square_Sum(n):\n    # Initialize the sum\n    sum_of_squares = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i  # Calculate the ith even number\n        sum_of_squares += even_number ** 2  # Add its square to the sum\n    \n    return sum_of_squares\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n### Signature\ndef square_Sum(n):",
    "timestamp": "2025-10-17T18:50:03.339390",
    "response_time": "1.71",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 290,
    "solution": "```python\n===START===\ndef max_length(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns the list with the maximum length.\n    If there are multiple lists with the same maximum length, the first one encountered is returned.\n    \"\"\"\n    if not list1:  # Handle the case where the input list is empty\n        return []\n    \n    # Find the list with the maximum length\n    max_list = max(list1, key=len)\n    return max_list\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the list of maximum length in a list of lists.\n\n### Signature\ndef max_length(list1):",
    "timestamp": "2025-10-17T18:50:05.308042",
    "response_time": "1.96",
    "context": "{\"function_name\": \"max_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 291,
    "solution": "```python\n===START===\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n\n    # Initialize variables for the first two posts\n    same = k  # Ways to paint the first two posts with the same color\n    diff = k * (k - 1)  # Ways to paint the first two posts with different colors\n    total = same + diff  # Total ways to paint the first two posts\n\n    # Iterate for the remaining posts\n    for i in range(3, n + 1):\n        same = diff  # If the current post has the same color as the previous one\n        diff = total * (k - 1)  # If the current post has a different color\n        total = same + diff  # Update the total ways\n\n    return total\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n### Signature\ndef count_no_of_ways(n, k):",
    "timestamp": "2025-10-17T18:50:16.981583",
    "response_time": "11.67",
    "context": "{\"function_name\": \"count_no_of_ways\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 292,
    "solution": "===START===\ndef find(n, m):\n    if m == 0:\n        raise ValueError(\"Division by zero is not allowed.\")\n    return n // m\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n### Signature\ndef find(n,m):",
    "timestamp": "2025-10-17T18:50:18.070316",
    "response_time": "1.08",
    "context": "{\"function_name\": \"find\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 293,
    "solution": "```python\n===START===\nimport math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Calculate the third side of a right-angled triangle given two sides.\n    \n    Parameters:\n    w (float): One side of the triangle.\n    h (float): Another side of the triangle.\n    \n    Returns:\n    float: The length of the third side.\n    \"\"\"\n    # Using the Pythagorean theorem: a^2 + b^2 = c^2\n    # If w and h are the two shorter sides, the hypotenuse is calculated as:\n    if w > h:\n        return math.sqrt(w**2 - h**2)\n    else:\n        return math.sqrt(h**2 - w**2)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the third side of a right angled triangle.\n\n### Signature\ndef otherside_rightangle(w,h):",
    "timestamp": "2025-10-17T18:50:22.084813",
    "response_time": "4.01",
    "context": "{\"function_name\": \"otherside_rightangle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 294,
    "solution": "```python\n===START===\ndef max_val(listval):\n    \"\"\"\n    This function takes a heterogeneous list as input and returns the maximum value.\n    It filters out non-numeric values and computes the maximum among numeric values.\n    \"\"\"\n    # Filter out numeric values from the list\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    \n    # Return the maximum value among numeric values, or None if no numeric values exist\n    return max(numeric_values) if numeric_values else None\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum value in a given heterogeneous list.\n\n### Signature\ndef max_val(listval):",
    "timestamp": "2025-10-17T18:50:23.961646",
    "response_time": "1.87",
    "context": "{\"function_name\": \"max_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 295,
    "solution": "```python\n===START===\ndef sum_div(number):\n    # Initialize the sum of divisors\n    total = 0\n    \n    # Iterate through all numbers from 1 to the given number\n    for i in range(1, number + 1):\n        # Check if i is a divisor of the number\n        if number % i == 0:\n            total += i\n    \n    return total\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to return the sum of all divisors of a number.\n\n### Signature\ndef sum_div(number):",
    "timestamp": "2025-10-17T18:50:25.809377",
    "response_time": "1.84",
    "context": "{\"function_name\": \"sum_div\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 296,
    "solution": "```python\n===START===\ndef get_Inv_Count(arr):\n    \"\"\"\n    Function to count inversions in an array.\n    An inversion is a pair (arr[i], arr[j]) such that i < j and arr[i] > arr[j].\n    \"\"\"\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left    # Starting index for left subarray\n        j = mid + 1 # Starting index for right subarray\n        k = left    # Starting index to be sorted\n        inv_count = 0\n\n        # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                # There are mid - i inversions, because all the remaining elements in the left subarray\n                # (arr[i], arr[i+1], ..., arr[mid]) are greater than arr[j]\n                temp_arr[k] = arr[j]\n                inv_count += (mid-i + 1)\n                j += 1\n            k += 1\n\n        # Copy the remaining elements of left subarray, if any\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n\n        # Copy the remaining elements of right subarray, if any\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n\n        # Copy the sorted subarray into Original array\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right)//2\n\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n        return inv_count\n\n    n = len(arr)\n    temp_arr = [0]*n\n    return merge_sort_and_count(arr, temp_arr, 0, n-1)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count inversions in an array.\n\n### Signature\ndef get_Inv_Count(arr):",
    "timestamp": "2025-10-17T18:50:30.900549",
    "response_time": "5.09",
    "context": "{\"function_name\": \"get_Inv_Count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 297,
    "solution": "```python\n===START===\ndef flatten_list(list1):\n    \"\"\"\n    Flattens a nested list structure into a single list.\n    \n    Args:\n    list1 (list): A nested list structure.\n    \n    Returns:\n    list: A flattened list containing all elements from the nested structure.\n    \"\"\"\n    flattened = []\n    \n    def flatten(sublist):\n        for item in sublist:\n            if isinstance(item, list):\n                flatten(item)\n            else:\n                flattened.append(item)\n    \n    flatten(list1)\n    return flattened\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to flatten a given nested list structure.\n\n### Signature\ndef flatten_list(list1):",
    "timestamp": "2025-10-17T18:50:32.525379",
    "response_time": "1.62",
    "context": "{\"function_name\": \"flatten_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 299,
    "solution": "```python\n===START===\ndef max_aggregate(stdata):\n    \"\"\"\n    Calculate the maximum aggregate from the list of tuples.\n\n    Args:\n    stdata (list of tuples): Each tuple contains a name (str) and a score (int).\n\n    Returns:\n    tuple: The name and the maximum aggregate score.\n    \"\"\"\n    # Dictionary to store the aggregate scores for each name\n    aggregate_scores = {}\n\n    # Calculate the aggregate scores\n    for name, score in stdata:\n        if name in aggregate_scores:\n            aggregate_scores[name] += score\n        else:\n            aggregate_scores[name] = score\n\n    # Find the name with the maximum aggregate score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    max_score = aggregate_scores[max_name]\n\n    return (max_name, max_score)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\n### Signature\ndef max_aggregate(stdata):",
    "timestamp": "2025-10-17T18:50:35.532760",
    "response_time": "3.00",
    "context": "{\"function_name\": \"max_aggregate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 300,
    "solution": "```python\n===START===\ndef count_binary_seq(n):\n    # Helper function to calculate factorial\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        result = 1\n        for i in range(2, x + 1):\n            result *= i\n        return result\n\n    # Helper function to calculate combinations (n choose k)\n    def combinations(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    # The sum of the first n bits and the last n bits must be equal.\n    # This means we need to distribute the same number of 1s in both halves.\n    # For each possible sum (from 0 to n), calculate the number of valid sequences.\n    total_count = 0\n    for sum_bits in range(n + 1):\n        # Number of ways to choose `sum_bits` 1s in the first half\n        first_half = combinations(n, sum_bits)\n        # Number of ways to choose `sum_bits` 1s in the second half\n        second_half = combinations(n, sum_bits)\n        # Multiply the two to get the total combinations for this sum\n        total_count += first_half * second_half\n\n    return total_count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n### Signature\ndef count_binary_seq(n):",
    "timestamp": "2025-10-17T18:50:39.187667",
    "response_time": "3.65",
    "context": "{\"function_name\": \"count_binary_seq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 301,
    "solution": "```python\n===START===\ndef dict_depth(d):\n    \"\"\"\n    Function to find the depth of a dictionary.\n    :param d: Dictionary whose depth is to be calculated\n    :return: Integer representing the depth of the dictionary\n    \"\"\"\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max(dict_depth(value) for value in d.values() if isinstance(value, dict)) if d else 1\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the depth of a dictionary.\n\n### Signature\ndef dict_depth(d):",
    "timestamp": "2025-10-17T18:50:43.009846",
    "response_time": "3.82",
    "context": "{\"function_name\": \"dict_depth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 304,
    "solution": "```python\n===START===\ndef find_Element(arr, ranges, rotations, index):\n    # Calculate the effective number of rotations\n    effective_rotations = rotations % len(ranges)\n    \n    # Apply the rotations in reverse order\n    for i in range(effective_rotations - 1, -1, -1):\n        start, end = ranges[i]\n        # Reverse the rotation effect\n        if start <= index <= end:\n            if index == start:\n                index = end\n            else:\n                index -= 1\n    \n    # Return the element at the final index\n    return arr[index]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find element at a given index after number of rotations.\n\n### Signature\ndef find_Element(arr,ranges,rotations,index) :",
    "timestamp": "2025-10-17T18:50:45.527712",
    "response_time": "2.51",
    "context": "{\"function_name\": \"find_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 305,
    "solution": "```python\n===START===\ndef start_withp(words):\n    # Filter words that start with the letter 'p' or 'P'\n    p_words = [word for word in words if word.lower().startswith('p')]\n    \n    # Return the first two words from the filtered list\n    return p_words[:2]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to return two words from a list of words starting with letter 'p'.\n\n### Signature\ndef start_withp(words):",
    "timestamp": "2025-10-17T18:50:47.615889",
    "response_time": "2.08",
    "context": "{\"function_name\": \"start_withp\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 306,
    "solution": "```python\n===START===\ndef max_sum_increasing_subseq(a, n, index, k):\n    # Ensure k is greater than index\n    if k <= index or k >= n:\n        return 0\n\n    # Initialize dp array to store the maximum sum of increasing subsequences\n    dp = [0] * n\n\n    # Fill dp array for the prefix until index\n    for i in range(index + 1):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n\n    # Include the kth element in the subsequence\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_sum = max(max_sum, dp[i] + a[k])\n\n    return max_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\n### Signature\ndef max_sum_increasing_subseq(a, n, index, k):",
    "timestamp": "2025-10-17T18:50:50.807930",
    "response_time": "3.19",
    "context": "{\"function_name\": \"max_sum_increasing_subseq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 307,
    "solution": "```python\n===START===\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Extracts a slice (colon) from a tuple based on the given start (m) and end (n) indices.\n\n    Parameters:\n    tuplex (tuple): The input tuple.\n    m (int): The starting index of the slice (inclusive).\n    n (int): The ending index of the slice (exclusive).\n\n    Returns:\n    tuple: A new tuple containing the sliced elements.\n    \"\"\"\n    return tuplex[m:n]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get a colon of a tuple.\n\n### Signature\ndef colon_tuplex(tuplex,m,n):",
    "timestamp": "2025-10-17T18:50:52.913874",
    "response_time": "2.10",
    "context": "{\"function_name\": \"colon_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 308,
    "solution": "```python\n===START===\nfrom heapq import nlargest\nfrom itertools import product\n\ndef large_product(nums1, nums2, N):\n    # Generate all possible products of elements from nums1 and nums2\n    all_products = (a * b for a, b in product(nums1, nums2))\n    \n    # Use nlargest to find the N largest products\n    return nlargest(N, all_products)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n### Signature\ndef large_product(nums1, nums2, N):",
    "timestamp": "2025-10-17T18:50:54.412731",
    "response_time": "1.49",
    "context": "{\"function_name\": \"large_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 309,
    "solution": "```python\n===START===\ndef maximum(a, b):\n    return a if a > b else b\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the maximum of two numbers.\n\n### Signature\ndef maximum(a,b):",
    "timestamp": "2025-10-17T18:50:55.305812",
    "response_time": "0.89",
    "context": "{\"function_name\": \"maximum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 310,
    "solution": "```python\n===START===\ndef string_to_tuple(str1):\n    \"\"\"\n    Converts a given string to a tuple of characters.\n\n    Args:\n    str1 (str): The input string.\n\n    Returns:\n    tuple: A tuple containing the characters of the input string.\n    \"\"\"\n    return tuple(str1)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a given string to a tuple of characters.\n\n### Signature\ndef string_to_tuple(str1):",
    "timestamp": "2025-10-17T18:50:56.549586",
    "response_time": "1.24",
    "context": "{\"function_name\": \"string_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 311,
    "solution": "```python\n===START===\ndef set_left_most_unset_bit(n):\n    # Convert the number to binary and find the leftmost unset bit\n    binary_representation = bin(n)[2:]  # Get binary representation without '0b' prefix\n    length = len(binary_representation)\n    \n    # Iterate through the binary representation from left to right\n    for i in range(length):\n        if binary_representation[i] == '0':  # Find the first unset bit\n            # Calculate the position of the unset bit from the right\n            position_from_right = length - i - 1\n            # Set the bit at the found position\n            n |= (1 << position_from_right)\n            return n\n    \n    # If no unset bit is found, set a new bit to the left\n    return n | (1 << length)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to set the left most unset bit.\n\n### Signature\ndef set_left_most_unset_bit(n):",
    "timestamp": "2025-10-17T18:51:01.667203",
    "response_time": "5.11",
    "context": "{\"function_name\": \"set_left_most_unset_bit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 312,
    "solution": "===START===\nimport math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n    \n    return (1/3) * math.pi * r**2 * h\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the volume of a cone.\n\n### Signature\ndef volume_cone(r,h):",
    "timestamp": "2025-10-17T18:51:03.207384",
    "response_time": "1.53",
    "context": "{\"function_name\": \"volume_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 388,
    "solution": "```python\n===START===\ndef highest_Power_of_2(n):\n    if n < 1:\n        return 0  # Return 0 for invalid or non-positive input\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\n### Signature\ndef highest_Power_of_2(n):",
    "timestamp": "2025-10-17T18:51:05.204731",
    "response_time": "1.99",
    "context": "{\"function_name\": \"highest_Power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 389,
    "solution": "```python\n===START===\ndef find_lucas(n):\n    \"\"\"\n    Function to find the nth Lucas number.\n    Lucas numbers are similar to Fibonacci numbers, but start with 2 and 1.\n    The sequence is defined as:\n    L(0) = 2, L(1) = 1, and L(n) = L(n-1) + L(n-2) for n > 1.\n    \n    :param n: The index of the Lucas number to find (non-negative integer).\n    :return: The nth Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    prev, curr = 2, 1\n    \n    # Compute the nth Lucas number iteratively\n    for _ in range(2, n + 1):\n        prev, curr = curr, prev + curr\n    \n    return curr\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the n'th lucas number.\n\n### Signature\ndef find_lucas(n):",
    "timestamp": "2025-10-17T18:51:08.587707",
    "response_time": "3.38",
    "context": "{\"function_name\": \"find_lucas\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 390,
    "solution": "```python\n===START===\ndef add_string(list_, string):\n    \"\"\"\n    This function applies a given format string to all elements in a list.\n    The format string should contain a placeholder '{}' where the list element will be inserted.\n\n    Args:\n    list_ (list): A list of elements to be formatted.\n    string (str): A format string containing '{}' as a placeholder.\n\n    Returns:\n    list: A new list with formatted strings.\n    \"\"\"\n    if not isinstance(list_, list):\n        raise ValueError(\"The first argument must be a list.\")\n    if not isinstance(string, str):\n        raise ValueError(\"The second argument must be a string.\")\n    if '{}' not in string:\n        raise ValueError(\"The format string must contain '{}' as a placeholder.\")\n\n    return [string.format(item) for item in list_]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to apply a given format string to all of the elements in a list.\n\n### Signature\ndef add_string(list_, string):",
    "timestamp": "2025-10-17T18:51:14.837039",
    "response_time": "6.24",
    "context": "{\"function_name\": \"add_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 391,
    "solution": "```python\n===START===\ndef convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Converts three lists into a nested dictionary.\n    The first list (l1) will be the keys of the outer dictionary.\n    The second list (l2) will be the keys of the inner dictionaries.\n    The third list (l3) will be the values of the inner dictionaries.\n    \n    Assumes that l1, l2, and l3 are of the same length and aligned such that\n    l1[i], l2[i], and l3[i] correspond to a single key-value pair in the nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for key1, key2, value in zip(l1, l2, l3):\n        if key1 not in nested_dict:\n            nested_dict[key1] = {}\n        nested_dict[key1][key2] = value\n    return nested_dict\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert more than one list to nested dictionary.\n\n### Signature\ndef convert_list_dictionary(l1, l2, l3):",
    "timestamp": "2025-10-17T18:51:18.775183",
    "response_time": "3.93",
    "context": "{\"function_name\": \"convert_list_dictionary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 392,
    "solution": "```python\n===START===\ndef get_max_sum(n):\n    # Memoization dictionary to store results of subproblems\n    memo = {}\n\n    def helper(x):\n        # Base case: if x is 0, the maximum sum is 0\n        if x == 0:\n            return 0\n\n        # If the result for x is already computed, return it\n        if x in memo:\n            return memo[x]\n\n        # Compute the maximum sum for x\n        max_sum = max(helper(x // 2) + helper(x // 3) + helper(x // 4) + helper(x // 5), x)\n\n        # Store the result in the memo dictionary\n        memo[x] = max_sum\n\n        return max_sum\n\n    # Call the helper function for the given n\n    return helper(n)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n### Signature\ndef get_max_sum (n):",
    "timestamp": "2025-10-17T18:51:21.034246",
    "response_time": "2.25",
    "context": "{\"function_name\": \"get_max_sum \"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 393,
    "solution": "```python\n===START===\ndef max_length_list(input_list):\n    \"\"\"\n    This function takes a list of lists as input and returns the list with the maximum length.\n    If there are multiple lists with the same maximum length, the first one encountered is returned.\n    \"\"\"\n    if not input_list:\n        return None  # Return None if the input list is empty\n    \n    # Use max with key as len to find the list with the maximum length\n    return max(input_list, key=len)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the list with maximum length.\n\n### Signature\ndef max_length_list(input_list):",
    "timestamp": "2025-10-17T18:51:22.651443",
    "response_time": "1.61",
    "context": "{\"function_name\": \"max_length_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 394,
    "solution": "```python\n===START===\ndef check_distinct(test_tup):\n    \"\"\"\n    Function to check if a given tuple contains no duplicates.\n    \n    Parameters:\n    test_tup (tuple): The tuple to check for duplicates.\n    \n    Returns:\n    bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    # Convert the tuple to a set and compare its length with the tuple's length\n    return len(test_tup) == len(set(test_tup))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if given tuple contains no duplicates.\n\n### Signature\ndef check_distinct(test_tup):",
    "timestamp": "2025-10-17T18:51:24.667704",
    "response_time": "2.01",
    "context": "{\"function_name\": \"check_distinct\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 395,
    "solution": "```python\n===START===\ndef first_non_repeating_character(str1):\n    # Create a dictionary to store the frequency of each character\n    char_count = {}\n    \n    # Count the frequency of each character in the string\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Find the first character with a frequency of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the first non-repeated character in a given string.\n\n### Signature\ndef first_non_repeating_character(str1):",
    "timestamp": "2025-10-17T18:51:26.140190",
    "response_time": "1.47",
    "context": "{\"function_name\": \"first_non_repeating_character\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 396,
    "solution": "```python\n===START===\ndef check_char(string):\n    # Check if the string is not empty\n    if not string:\n        return False\n    \n    # Compare the first and last character\n    return string[0] == string[-1]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given string starts and ends with the same character or not.\n\n### Signature\ndef check_char(string):",
    "timestamp": "2025-10-17T18:51:27.263367",
    "response_time": "1.12",
    "context": "{\"function_name\": \"check_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 397,
    "solution": "```python\n===START===\ndef median_numbers(a, b, c):\n    # Sort the three numbers\n    sorted_numbers = sorted([a, b, c])\n    # Return the middle number\n    return sorted_numbers[1]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the median of three numbers.\n\n### Signature\ndef median_numbers(a,b,c):",
    "timestamp": "2025-10-17T18:51:28.267694",
    "response_time": "1.00",
    "context": "{\"function_name\": \"median_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 398,
    "solution": "```python\n===START===\ndef sum_of_digits(nums):\n    \"\"\"\n    Compute the sum of digits of each number in the given list.\n\n    Args:\n    nums (list of int): A list of integers.\n\n    Returns:\n    list of int: A list where each element is the sum of digits of the corresponding number in the input list.\n    \"\"\"\n    result = []\n    for num in nums:\n        # Take the absolute value to handle negative numbers\n        num = abs(num)\n        # Calculate the sum of digits\n        digit_sum = sum(int(digit) for digit in str(num))\n        result.append(digit_sum)\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to compute the sum of digits of each number of a given list.\n\n### Signature\ndef sum_of_digits(nums):",
    "timestamp": "2025-10-17T18:51:30.714715",
    "response_time": "2.44",
    "context": "{\"function_name\": \"sum_of_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 399,
    "solution": "```python\n===START===\ndef bitwise_xor(test_tup1, test_tup2):\n    # Ensure both tuples are of the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    # Perform bitwise XOR operation element-wise\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\n### Signature\ndef bitwise_xor(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:51:32.058432",
    "response_time": "1.34",
    "context": "{\"function_name\": \"bitwise_xor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 400,
    "solution": "```python\n===START===\ndef extract_freq(test_list):\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # Return the number of unique tuples\n    return len(unique_tuples)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract the number of unique tuples in the given list.\n\n### Signature\ndef extract_freq(test_list):",
    "timestamp": "2025-10-17T18:51:33.280600",
    "response_time": "1.22",
    "context": "{\"function_name\": \"extract_freq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 401,
    "solution": "```python\n===START===\ndef add_nested_tuples(test_tup1, test_tup2):\n    # Ensure both tuples have the same structure\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Perform index-wise addition\n    result = tuple(\n        tuple(a + b for a, b in zip(sub_tup1, sub_tup2))\n        for sub_tup1, sub_tup2 in zip(test_tup1, test_tup2)\n    )\n    \n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n### Signature\ndef add_nested_tuples(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:51:35.747634",
    "response_time": "2.46",
    "context": "{\"function_name\": \"add_nested_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 404,
    "solution": "```python\n===START===\ndef minimum(a, b):\n    return a if a < b else b\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the minimum of two numbers.\n\n### Signature\ndef minimum(a,b):",
    "timestamp": "2025-10-17T18:51:37.262577",
    "response_time": "1.51",
    "context": "{\"function_name\": \"minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 405,
    "solution": "```python\n===START===\ndef check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Check whether an element exists within a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple to check for the element.\n    tuple1 (any): The element to check for in the tuple.\n\n    Returns:\n    bool: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return tuple1 in tuplex\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether an element exists within a tuple.\n\n### Signature\ndef check_tuplex(tuplex,tuple1):",
    "timestamp": "2025-10-17T18:51:39.772995",
    "response_time": "2.50",
    "context": "{\"function_name\": \"check_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 406,
    "solution": "```python\n===START===\ndef find_Parity(x):\n    \"\"\"\n    This function checks whether the parity of a given number is odd.\n    Parity is odd if the number of 1s in the binary representation of the number is odd.\n    \n    :param x: Integer input\n    :return: True if the parity is odd, False otherwise\n    \"\"\"\n    # Count the number of 1s in the binary representation of x\n    count_of_ones = bin(x).count('1')\n    \n    # Check if the count of 1s is odd\n    return count_of_ones % 2 != 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find whether the parity of a given number is odd.\n\n### Signature\ndef find_Parity(x):",
    "timestamp": "2025-10-17T18:51:42.953891",
    "response_time": "3.17",
    "context": "{\"function_name\": \"find_Parity\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 407,
    "solution": "```python\n===START===\ndef rearrange_bigger(n):\n    # Convert the number to a list of its digits\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Step 1: Find the first digit that is smaller than the digit to its right\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, return -1 (no bigger number can be formed)\n        return -1\n    \n    # Step 2: Find the smallest digit to the right of digits[i] that is larger than digits[i]\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            # Swap the two digits\n            digits[i], digits[j] = digits[j], digits[i]\n            break\n    \n    # Step 3: Sort the digits to the right of i in ascending order\n    digits = digits[:i + 1] + sorted(digits[i + 1:])\n    \n    # Convert the list of digits back to an integer\n    return int(''.join(digits))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\n### Signature\ndef rearrange_bigger(n):",
    "timestamp": "2025-10-17T18:51:45.686700",
    "response_time": "2.73",
    "context": "{\"function_name\": \"rearrange_bigger\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 408,
    "solution": "```python\n===START===\nimport heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2 or k <= 0:\n        return []\n    \n    # Min-heap to store the pairs with their sums\n    min_heap = []\n    result = []\n    \n    # Initialize the heap with the first element of nums1 paired with every element of nums2\n    for i in range(min(k, len(nums1))):  # Only need the first k elements from nums1\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n    \n    # Extract the k smallest pairs\n    while k > 0 and min_heap:\n        current_sum, i, j = heapq.heappop(min_heap)\n        result.append((nums1[i], nums2[j]))\n        k -= 1\n        \n        # If there is a next element in nums2 for the current nums1[i], push it into the heap\n        if j + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    \n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n### Signature\ndef k_smallest_pairs(nums1, nums2, k):",
    "timestamp": "2025-10-17T18:51:51.839500",
    "response_time": "6.15",
    "context": "{\"function_name\": \"push\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 409,
    "solution": "```python\n===START===\ndef min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples, where each tuple contains two integers.\n    It calculates the product of the integers in each tuple and returns the minimum product.\n    \n    :param list1: List of tuples, where each tuple contains two integers\n    :return: Minimum product from the pairs of tuples\n    \"\"\"\n    if not list1:\n        return None  # Return None if the list is empty\n    \n    # Calculate the product for each tuple and find the minimum\n    min_product = float('inf')\n    for a, b in list1:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    \n    return min_product\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\n### Signature\ndef min_product_tuple(list1):",
    "timestamp": "2025-10-17T18:51:54.333029",
    "response_time": "2.49",
    "context": "{\"function_name\": \"min_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 410,
    "solution": "```python\n===START===\ndef min_val(listval):\n    # Filter out only comparable elements (numbers) from the list\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    \n    # If no numeric values are found, return None\n    if not numeric_values:\n        return None\n    \n    # Return the minimum value from the numeric values\n    return min(numeric_values)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the minimum value in a given heterogeneous list.\n\n### Signature\ndef min_val(listval):",
    "timestamp": "2025-10-17T18:51:55.867010",
    "response_time": "1.53",
    "context": "{\"function_name\": \"min_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 411,
    "solution": "```python\n===START===\ndef snake_to_camel(word):\n    # Split the string by underscores\n    parts = word.split('_')\n    # Capitalize the first letter of each part except the first one\n    # and join them together\n    return parts[0] + ''.join(part.capitalize() for part in parts[1:])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert the given snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
    "timestamp": "2025-10-17T18:51:57.304767",
    "response_time": "1.43",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 412,
    "solution": "```python\n===START===\ndef remove_odd(l):\n    \"\"\"\n    Removes odd numbers from the given list.\n\n    Parameters:\n    l (list): A list of integers.\n\n    Returns:\n    list: A list with all odd numbers removed.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to remove odd numbers from a given list.\n\n### Signature\ndef remove_odd(l):",
    "timestamp": "2025-10-17T18:51:59.046172",
    "response_time": "1.73",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 413,
    "solution": "```python\n===START===\ndef extract_nth_element(list1, n):\n    \"\"\"\n    Extract the nth element from each tuple in the given list of tuples.\n\n    Args:\n    list1 (list): A list of tuples.\n    n (int): The index of the element to extract from each tuple.\n\n    Returns:\n    list: A list containing the nth element from each tuple in the input list.\n    \"\"\"\n    # Extract the nth element from each tuple in the list\n    return [t[n] for t in list1 if len(t) > n]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract the nth element from a given list of tuples.\n\n### Signature\ndef extract_nth_element(list1, n):",
    "timestamp": "2025-10-17T18:52:01.729367",
    "response_time": "2.68",
    "context": "{\"function_name\": \"extract_nth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 414,
    "solution": "```python\n===START===\ndef overlapping(list1, list2):\n    \"\"\"\n    Check if any value in list1 exists in list2.\n\n    Args:\n    list1: A sequence of elements.\n    list2: A sequence of elements.\n\n    Returns:\n    True if any element of list1 is found in list2, otherwise False.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\n### Signature\ndef overlapping(list1,list2):",
    "timestamp": "2025-10-17T18:52:03.292395",
    "response_time": "1.56",
    "context": "{\"function_name\": \"overlapping\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 415,
    "solution": "```python\n===START===\ndef max_Product(arr):\n    if len(arr) < 2:\n        return None  # Not enough elements to form a pair\n\n    # Initialize variables to store the two largest and two smallest numbers\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n\n    for num in arr:\n        # Update the two largest numbers\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n        # Update the two smallest numbers\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    # Calculate the products of the two largest and two smallest numbers\n    product1 = max1 * max2\n    product2 = min1 * min2\n\n    # Return the pair with the highest product\n    if product1 > product2:\n        return (max1, max2)\n    else:\n        return (min1, min2)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find a pair with highest product from a given array of integers.\n\n### Signature\ndef max_Product(arr):",
    "timestamp": "2025-10-17T18:52:06.082280",
    "response_time": "2.78",
    "context": "{\"function_name\": \"max_Product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 417,
    "solution": "```python\n===START===\nfrom collections import defaultdict\n\ndef group_tuples(Input):\n    grouped = defaultdict(list)\n    for t in Input:\n        grouped[t[0]].append(t)\n    return dict(grouped)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find common first element in given list of tuple.\n\n### Signature\ndef group_tuples(Input):",
    "timestamp": "2025-10-17T18:52:07.496815",
    "response_time": "1.41",
    "context": "{\"function_name\": \"group_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 418,
    "solution": "```python\n===START===\ndef Find_Max(lst):\n    if not lst:  # Check if the list is empty\n        return None\n    \n    # Find the element with the maximum length\n    max_length_element = max(lst, key=len)\n    return max_length_element\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the element of a list having maximum length.\n\n### Signature\ndef Find_Max(lst):",
    "timestamp": "2025-10-17T18:52:08.661025",
    "response_time": "1.16",
    "context": "{\"function_name\": \"Find_Max\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 419,
    "solution": "```python\n===START===\ndef round_and_sum(list1):\n    # Round each number in the list\n    rounded_list = [round(num) for num in list1]\n    \n    # Calculate the sum of the rounded numbers\n    total_sum = sum(rounded_list)\n    \n    # Multiply the sum by the length of the list\n    result = total_sum * len(list1)\n    \n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\n### Signature\ndef round_and_sum(list1):",
    "timestamp": "2025-10-17T18:52:11.593831",
    "response_time": "2.93",
    "context": "{\"function_name\": \"round_and_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 420,
    "solution": "```python\n===START===\ndef cube_Sum(n):\n    # Calculate the cube sum of the first n even natural numbers\n    return sum((2 * i) ** 3 for i in range(1, n + 1))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the cube sum of first n even natural numbers.\n\n### Signature\ndef cube_Sum(n):",
    "timestamp": "2025-10-17T18:52:12.654555",
    "response_time": "1.05",
    "context": "{\"function_name\": \"cube_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 421,
    "solution": "```python\n===START===\ndef concatenate_tuple(test_tup):\n    \"\"\"\n    Concatenates each element of a tuple by the delimiter provided as the first element of the tuple.\n    \n    Parameters:\n    test_tup (tuple): A tuple where the first element is the delimiter (string) and the rest are the strings to be concatenated.\n    \n    Returns:\n    str: A single string with the elements concatenated using the delimiter.\n    \"\"\"\n    if not test_tup or len(test_tup) < 2:\n        return \"\"\n    \n    delimiter = test_tup[0]\n    elements = test_tup[1:]\n    \n    return delimiter.join(elements)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to concatenate each element of tuple by the delimiter.\n\n### Signature\ndef concatenate_tuple(test_tup):",
    "timestamp": "2025-10-17T18:52:15.351795",
    "response_time": "2.69",
    "context": "{\"function_name\": \"concatenate_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 422,
    "solution": "```python\n===START===\ndef find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0  # Return 0 for non-positive n as there are no natural numbers to consider\n    \n    # Calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n + 1))\n    \n    # Calculate the average\n    average = sum_of_cubes / n\n    \n    return average\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the average of cubes of first n natural numbers.\n\n### Signature\ndef find_Average_Of_Cube(n):",
    "timestamp": "2025-10-17T18:52:17.771245",
    "response_time": "2.41",
    "context": "{\"function_name\": \"find_Average_Of_Cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 424,
    "solution": "```python\n===START===\ndef extract_rear(test_tuple):\n    \"\"\"\n    Extracts the last character of each string in the given tuple.\n\n    Args:\n    test_tuple (tuple): A tuple containing strings.\n\n    Returns:\n    list: A list containing the last character of each string in the tuple.\n    \"\"\"\n    return [s[-1] for s in test_tuple if isinstance(s, str) and len(s) > 0]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract only the rear index element of each string in the given tuple.\n\n### Signature\ndef extract_rear(test_tuple):",
    "timestamp": "2025-10-17T18:52:19.257929",
    "response_time": "1.48",
    "context": "{\"function_name\": \"extract_rear\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 425,
    "solution": "```python\n===START===\ndef count_element_in_list(list1, x):\n    \"\"\"\n    Counts the number of sublists in the given list that contain the specified element.\n\n    Args:\n    list1 (list): A list of sublists.\n    x: The element to search for in the sublists.\n\n    Returns:\n    int: The count of sublists containing the element x.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if isinstance(sublist, list) and x in sublist:\n            count += 1\n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of sublists containing a particular element.\n\n### Signature\ndef count_element_in_list(list1, x):",
    "timestamp": "2025-10-17T18:43:30.318027",
    "response_time": "3.01",
    "context": "{\"function_name\": \"count_element_in_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 426,
    "solution": "===START===\ndef filter_oddnumbers(nums):\n    \"\"\"\n    Filters out odd numbers from the given list of integers.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    list: A list containing only the odd numbers from the input list.\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to filter odd numbers.\n\n### Signature\ndef filter_oddnumbers(nums):",
    "timestamp": "2025-10-17T18:43:32.336434",
    "response_time": "2.02",
    "context": "{\"function_name\": \"filter_oddnumbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 427,
    "solution": "```python\n===START===\ndef change_date_format(dt):\n    # Split the input date string by '-'\n    parts = dt.split('-')\n    # Rearrange the parts to dd-mm-yyyy format\n    return f\"{parts[2]}-{parts[1]}-{parts[0]}\"\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n### Signature\ndef change_date_format(dt):",
    "timestamp": "2025-10-17T18:43:34.582660",
    "response_time": "2.24",
    "context": "{\"function_name\": \"change_date_format\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 428,
    "solution": "```python\n===START===\ndef shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2  # Initialize the gap size\n\n    # Perform a shell sort\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # Perform a gapped insertion sort\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2  # Reduce the gap size for the next iteration\n\n    return my_list\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort the given array by using shell sort.\n\n### Signature\ndef shell_sort(my_list):",
    "timestamp": "2025-10-17T18:43:37.314371",
    "response_time": "2.73",
    "context": "{\"function_name\": \"shell_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 429,
    "solution": "```python\n===START===\ndef and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Extracts the elementwise AND tuples from the given two tuples.\n    The AND operation is performed on corresponding elements of the tuples.\n    \n    Args:\n    test_tup1 (tuple): First input tuple containing integers.\n    test_tup2 (tuple): Second input tuple containing integers.\n    \n    Returns:\n    tuple: A tuple containing the result of elementwise AND operation.\n    \"\"\"\n    # Perform elementwise AND operation using zip and bitwise AND operator\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\n### Signature\ndef and_tuples(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:43:42.969379",
    "response_time": "5.65",
    "context": "{\"function_name\": \"and_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 430,
    "solution": "===START===\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    This function calculates the directrix of a parabola given its equation in the form:\n    y = ax^2 + bx + c\n\n    The directrix of a parabola is a horizontal line given by the equation:\n    y = k - (1 / (4a))\n    where k is the y-coordinate of the vertex.\n\n    Parameters:\n    a (float): Coefficient of x^2\n    b (float): Coefficient of x\n    c (float): Constant term\n\n    Returns:\n    float: The y-coordinate of the directrix\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"The coefficient 'a' cannot be zero for a parabola.\")\n\n    # Calculate the x-coordinate of the vertex\n    x_vertex = -b / (2 * a)\n\n    # Calculate the y-coordinate of the vertex\n    y_vertex = a * (x_vertex ** 2) + b * x_vertex + c\n\n    # Calculate the y-coordinate of the directrix\n    directrix = y_vertex - (1 / (4 * a))\n\n    return directrix\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the directrix of a parabola.\n\n### Signature\ndef parabola_directrix(a, b, c):",
    "timestamp": "2025-10-17T18:43:46.159459",
    "response_time": "3.19",
    "context": "{\"function_name\": \"parabola_directrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 431,
    "solution": "```python\n===START===\ndef common_element(list1, list2):\n    # Convert the lists to sets and check for intersection\n    return not set(list1).isdisjoint(set(list2))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes two lists and returns true if they have at least one common element.\n\n### Signature\ndef common_element(list1, list2):",
    "timestamp": "2025-10-17T18:43:48.112624",
    "response_time": "1.95",
    "context": "{\"function_name\": \"common_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 432,
    "solution": "===START===\ndef median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    The median of a trapezium is the line segment that connects the midpoints of the non-parallel sides.\n    Its length is the average of the lengths of the two parallel sides (bases).\n\n    Parameters:\n    base1 (float): Length of the first base of the trapezium.\n    base2 (float): Length of the second base of the trapezium.\n    height (float): Height of the trapezium (not used in median calculation).\n\n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n    return (base1 + base2) / 2\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the median length of a trapezium.\n\n### Signature\ndef median_trapezium(base1,base2,height):",
    "timestamp": "2025-10-17T18:43:50.376156",
    "response_time": "2.26",
    "context": "{\"function_name\": \"median_trapezium\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 433,
    "solution": "```python\n===START===\ndef check_greater(arr, number):\n    \"\"\"\n    This function checks whether the given number is greater than all elements in the array.\n\n    :param arr: List of integers or floats\n    :param number: Integer or float to compare with the array elements\n    :return: Boolean value, True if the number is greater than all elements in the array, False otherwise\n    \"\"\"\n    for element in arr:\n        if number <= element:\n            return False\n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\n### Signature\ndef check_greater(arr, number):",
    "timestamp": "2025-10-17T18:43:53.586454",
    "response_time": "3.21",
    "context": "{\"function_name\": \"check_greater\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 434,
    "solution": "===START===\nimport re\n\ndef text_match_one(text):\n    \"\"\"\n    Matches a string that has an 'a' followed by one or more 'b's.\n    \n    Args:\n    text (str): The input string to be matched.\n    \n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a+b+'\n    return bool(re.fullmatch(pattern, text))\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by one or more b's.\n\n### Signature\ndef text_match_one(text):",
    "timestamp": "2025-10-17T18:43:55.213266",
    "response_time": "1.62",
    "context": "{\"function_name\": \"text_match_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 435,
    "solution": "```python\n===START===\ndef last_Digit(n):\n    \"\"\"\n    This function returns the last digit of a given number.\n    \n    Parameters:\n    n (int): The input number.\n    \n    Returns:\n    int: The last digit of the number.\n    \"\"\"\n    return abs(n) % 10\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the last digit of a given number.\n\n### Signature\ndef last_Digit(n) :",
    "timestamp": "2025-10-17T18:43:56.299628",
    "response_time": "1.08",
    "context": "{\"function_name\": \"last_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 436,
    "solution": "```python\n===START===\ndef neg_nos(list1):\n    \"\"\"\n    This function takes a list of numbers and returns a list of negative numbers from the input list.\n    \n    :param list1: List of numbers\n    :return: List of negative numbers\n    \"\"\"\n    return [num for num in list1 if num < 0]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to return the negative numbers in a list.\n\n### Signature\ndef neg_nos(list1):",
    "timestamp": "2025-10-17T18:43:57.646927",
    "response_time": "1.34",
    "context": "{\"function_name\": \"neg_nos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 437,
    "solution": "```python\n===START===\ndef remove_odd(str1):\n    # Remove characters at odd indices\n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove odd characters in a string.\n\n### Signature\ndef remove_odd(str1):",
    "timestamp": "2025-10-17T18:43:59.147134",
    "response_time": "1.50",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 438,
    "solution": "```python\n# ===START===\nfrom collections import Counter\n\ndef count_bidirectional(test_list):\n    # Create a Counter object to count occurrences of each tuple and its reverse\n    counter = Counter()\n    \n    for a, b in test_list:\n        # Sort the tuple to ensure bidirectional pairs are treated the same\n        sorted_tuple = tuple(sorted((a, b)))\n        counter[sorted_tuple] += 1\n    \n    # Count the number of bidirectional pairs\n    bidirectional_count = sum(1 for count in counter.values() if count > 1)\n    \n    return bidirectional_count\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count bidirectional tuple pairs.\n\n### Signature\ndef count_bidirectional(test_list):",
    "timestamp": "2025-10-17T18:44:04.047624",
    "response_time": "4.90",
    "context": "{\"function_name\": \"count_bidirectional\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 439,
    "solution": "===START===\ndef multiple_to_single(L):\n    \"\"\"\n    Joins a list of integers into a single integer.\n\n    Args:\n    L (list): A list of integers.\n\n    Returns:\n    int: A single integer formed by concatenating the integers in the list.\n    \"\"\"\n    # Convert each integer in the list to a string, join them, and convert back to an integer\n    return int(''.join(map(str, L)))\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to join a list of multiple integers into a single integer.\n\n### Signature\ndef multiple_to_single(L):",
    "timestamp": "2025-10-17T18:44:05.879966",
    "response_time": "1.83",
    "context": "{\"function_name\": \"multiple_to_single\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 440,
    "solution": "```python\n===START===\nimport re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Finds the first adverb and its position in the given sentence.\n    An adverb is identified as a word ending with 'ly'.\n    \n    Args:\n    text (str): The input sentence.\n    \n    Returns:\n    tuple: A tuple containing the first adverb and its position (index in the sentence).\n           If no adverb is found, returns (None, -1).\n    \"\"\"\n    # Regular expression to find words ending with 'ly'\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    \n    if match:\n        return match.group(), match.start()\n    else:\n        return None, -1\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the first adverb and their positions in a given sentence.\n\n### Signature\ndef find_adverb_position(text):",
    "timestamp": "2025-10-17T18:44:08.478051",
    "response_time": "2.60",
    "context": "{\"function_name\": \"find_adverb_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 441,
    "solution": "===START===\ndef surfacearea_cube(l):\n    \"\"\"\n    Calculate the surface area of a cube given the length of one side.\n\n    Parameters:\n    l (float): The length of one side of the cube.\n\n    Returns:\n    float: The surface area of the cube.\n    \"\"\"\n    if l < 0:\n        raise ValueError(\"The length of the cube's side must be non-negative.\")\n    \n    # Surface area of a cube = 6 * (side length)^2\n    return 6 * (l ** 2)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cube of a given size.\n\n### Signature\ndef surfacearea_cube(l):",
    "timestamp": "2025-10-17T18:44:10.415511",
    "response_time": "1.94",
    "context": "{\"function_name\": \"surfacearea_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 442,
    "solution": "```python\n===START===\ndef positive_count(nums):\n    if not nums:  # Handle empty list case\n        return 0\n    \n    positive_numbers = [num for num in nums if num > 0]\n    return len(positive_numbers) / len(nums)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the ration of positive numbers in an array of integers.\n\n### Signature\ndef positive_count(nums):",
    "timestamp": "2025-10-17T18:44:12.258124",
    "response_time": "1.84",
    "context": "{\"function_name\": \"positive_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 443,
    "solution": "```python\n===START===\ndef largest_neg(list1):\n    # Filter out negative numbers from the list\n    negative_numbers = [num for num in list1 if num < 0]\n    \n    # If there are no negative numbers, return None\n    if not negative_numbers:\n        return None\n    \n    # Return the largest negative number\n    return max(negative_numbers)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the largest negative number from the given list.\n\n### Signature\ndef largest_neg(list1):",
    "timestamp": "2025-10-17T18:44:13.945148",
    "response_time": "1.68",
    "context": "{\"function_name\": \"largest_neg\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 444,
    "solution": "```python\n===START===\ndef trim_tuple(test_list, K):\n    \"\"\"\n    Trims each tuple in the given list of tuples by K elements from both ends.\n    \n    Parameters:\n    test_list (list of tuples): The list of tuples to be trimmed.\n    K (int): The number of elements to trim from both ends of each tuple.\n    \n    Returns:\n    list of tuples: A new list of tuples with each tuple trimmed by K elements.\n    \"\"\"\n    # Trim each tuple by slicing from K to -K\n    return [t[K:len(t)-K] for t in test_list]\n\n# Example usage:\n# test_list = [(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15)]\n# K = 1\n# print(trim_tuple(test_list, K))  # Output: [(2, 3, 4), (7, 8, 9), (12, 13, 14)]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to trim each tuple by k in the given tuple list.\n\n### Signature\ndef trim_tuple(test_list, K):",
    "timestamp": "2025-10-17T18:44:16.882640",
    "response_time": "2.94",
    "context": "{\"function_name\": \"trim_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 445,
    "solution": "```python\n===START===\ndef index_multiplication(test_tup1, test_tup2):\n    # Ensure both tuples are of the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    # Perform index-wise multiplication\n    result = tuple(a * b for a, b in zip(test_tup1, test_tup2))\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n### Signature\ndef index_multiplication(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:44:18.148514",
    "response_time": "1.26",
    "context": "{\"function_name\": \"index_multiplication\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 446,
    "solution": "```python\n===START===\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Count the occurrence of all elements of a list in a tuple.\n\n    Parameters:\n    tup (tuple): The tuple in which to count occurrences.\n    lst (list): The list of elements to count in the tuple.\n\n    Returns:\n    dict: A dictionary with elements of the list as keys and their counts in the tuple as values.\n    \"\"\"\n    # Initialize a dictionary to store the counts\n    occurrence_dict = {}\n    \n    # Iterate through each element in the list\n    for element in lst:\n        # Count the occurrences of the element in the tuple\n        occurrence_dict[element] = tup.count(element)\n    \n    return occurrence_dict\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the occurence of all elements of list in a tuple.\n\n### Signature\ndef count_Occurrence(tup, lst):",
    "timestamp": "2025-10-17T18:44:20.288851",
    "response_time": "2.14",
    "context": "{\"function_name\": \"count_Occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 447,
    "solution": "```python\n===START===\ndef cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a list of their cubes.\n    \n    Args:\n    nums (list): A list of numbers.\n    \n    Returns:\n    list: A list containing the cubes of the input numbers.\n    \"\"\"\n    return [num ** 3 for num in nums]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find cubes of individual elements in a list.\n\n### Signature\ndef cube_nums(nums):",
    "timestamp": "2025-10-17T18:44:21.649277",
    "response_time": "1.36",
    "context": "{\"function_name\": \"cube_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 448,
    "solution": "```python\n===START===\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n    \n    The Perrin sequence is defined as:\n    P(0) = 3, P(1) = 0, P(2) = 2\n    P(n) = P(n-2) + P(n-3) for n > 2\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    # Base cases\n    perrin = [3, 0, 2]\n    \n    # Generate Perrin numbers up to n\n    for i in range(3, n):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    \n    # Return the sum of the first n Perrin numbers\n    return sum(perrin[:n])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the sum of perrin numbers.\n\n### Signature\ndef cal_sum(n):",
    "timestamp": "2025-10-17T18:44:25.398240",
    "response_time": "3.75",
    "context": "{\"function_name\": \"cal_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 450,
    "solution": "```python\n===START===\ndef extract_string(str_list, l):\n    \"\"\"\n    Extract strings of a specified size from a given list of string values.\n\n    Parameters:\n    str_list (list): A list of string values.\n    l (int): The desired length of strings to extract.\n\n    Returns:\n    list: A list of strings from the input list that have the specified length.\n    \"\"\"\n    return [s for s in str_list if len(s) == l]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract specified size of strings from a given list of string values.\n\n### Signature\ndef extract_string(str, l):",
    "timestamp": "2025-10-17T18:44:28.202729",
    "response_time": "2.80",
    "context": "{\"function_name\": \"extract_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 451,
    "solution": "```python\n===START===\ndef remove_whitespaces(text1):\n    return text1.replace(\" \", \"\")\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from the given string.\n\n### Signature\ndef remove_whitespaces(text1):",
    "timestamp": "2025-10-17T18:44:29.533206",
    "response_time": "1.33",
    "context": "{\"function_name\": \"remove_whitespaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 452,
    "solution": "```python\n===START===\ndef loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the loss amount on a sale if there is a loss, otherwise return 0.\n\n    Parameters:\n    actual_cost (float): The actual cost of the item.\n    sale_amount (float): The sale amount of the item.\n\n    Returns:\n    float: The loss amount if there is a loss, otherwise 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    return 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n### Signature\ndef loss_amount(actual_cost,sale_amount):",
    "timestamp": "2025-10-17T18:44:31.224088",
    "response_time": "1.69",
    "context": "{\"function_name\": \"loss_amount\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 453,
    "solution": "```python\n===START===\ndef sumofFactors(n):\n    # Function to calculate the sum of even factors of a number\n    def is_even(x):\n        return x % 2 == 0\n\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and is_even(i):\n            sum_even_factors += i\n\n    return sum_even_factors\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of even factors of a number.\n\n### Signature\ndef sumofFactors(n) :",
    "timestamp": "2025-10-17T18:44:32.625071",
    "response_time": "1.40",
    "context": "{\"function_name\": \"sumofFactors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 454,
    "solution": "```python\n===START===\nimport re\n\ndef text_match_wordz(text):\n    \"\"\"\n    This function checks if the input text contains a word with the letter 'z'.\n    Returns True if such a word exists, otherwise False.\n    \"\"\"\n    # Regular expression to find words containing 'z' or 'Z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a word containing 'z'.\n\n### Signature\ndef text_match_wordz(text):",
    "timestamp": "2025-10-17T18:44:34.194684",
    "response_time": "1.57",
    "context": "{\"function_name\": \"text_match_wordz\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 455,
    "solution": "===START===\ndef check_monthnumb_number(monthnum2):\n    \"\"\"\n    This function checks whether the given month number contains 31 days or not.\n    \n    Args:\n    monthnum2 (int): The month number (1 for January, 2 for February, ..., 12 for December)\n    \n    Returns:\n    bool: True if the month contains 31 days, False otherwise\n    \"\"\"\n    # Months with 31 days: January, March, May, July, August, October, December\n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    \n    return monthnum2 in months_with_31_days\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 31 days or not.\n\n### Signature\ndef check_monthnumb_number(monthnum2):",
    "timestamp": "2025-10-17T18:44:36.429904",
    "response_time": "2.23",
    "context": "{\"function_name\": \"check_monthnumb_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 456,
    "solution": "```python\n===START===\ndef reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to reverse each string in a given list of string values.\n\n### Signature\ndef reverse_string_list(stringlist):",
    "timestamp": "2025-10-17T18:44:37.595455",
    "response_time": "1.16",
    "context": "{\"function_name\": \"reverse_string_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 457,
    "solution": "```python\n===START===\ndef Find_Min(lst):\n    \"\"\"\n    This function finds the sublist with the minimum length in a list of lists.\n    \n    Parameters:\n    lst (list): A list containing sublists.\n    \n    Returns:\n    list: The sublist with the minimum length. If there are multiple sublists with the same minimum length,\n          the first one encountered is returned. If the input list is empty, return an empty list.\n    \"\"\"\n    if not lst:  # If the input list is empty, return an empty list\n        return []\n    \n    # Find the sublist with the minimum length\n    min_sublist = min(lst, key=len)\n    return min_sublist\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sublist having minimum length.\n\n### Signature\ndef Find_Min(lst):",
    "timestamp": "2025-10-17T18:44:40.193325",
    "response_time": "2.60",
    "context": "{\"function_name\": \"Find_Min\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 458,
    "solution": "===START===\ndef rectangle_area(l, b):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    l (float): The length of the rectangle.\n    b (float): The breadth of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n    \"\"\"\n    if l < 0 or b < 0:\n        raise ValueError(\"Length and breadth must be non-negative.\")\n    return l * b\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the area of a rectangle.\n\n### Signature\ndef rectangle_area(l,b):",
    "timestamp": "2025-10-17T18:44:41.822471",
    "response_time": "1.63",
    "context": "{\"function_name\": \"rectangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 459,
    "solution": "```python\n===START===\ndef remove_uppercase(str1):\n    import re\n    # Use regex to find and remove uppercase substrings\n    return re.sub(r'[A-Z]+', '', str1)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove uppercase substrings from a given string.\n\n### Signature\ndef remove_uppercase(str1):",
    "timestamp": "2025-10-17T18:44:42.910272",
    "response_time": "1.08",
    "context": "{\"function_name\": \"remove_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 460,
    "solution": "```python\n===START===\ndef Extract(lst):\n    \"\"\"\n    This function takes a list of sublists and returns a list containing the first element of each sublist.\n    \n    :param lst: List of sublists\n    :return: List of first elements of each sublist\n    \"\"\"\n    return [sublist[0] for sublist in lst if sublist]\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to get the first element of each sublist.\n\n### Signature\ndef Extract(lst):",
    "timestamp": "2025-10-17T18:44:44.527587",
    "response_time": "1.61",
    "context": "{\"function_name\": \"Extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 461,
    "solution": "```python\n===START===\ndef upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the upper case characters in a given string.\n\n### Signature\ndef upper_ctr(str):",
    "timestamp": "2025-10-17T18:44:45.556216",
    "response_time": "1.03",
    "context": "{\"function_name\": \"upper_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 462,
    "solution": "```python\n===START===\nfrom itertools import combinations\n\ndef combinations_list(list1):\n    result = []\n    for r in range(1, len(list1) + 1):\n        result.extend(combinations(list1, r))\n    return [list(comb) for comb in result]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find all possible combinations of the elements of a given list.\n\n### Signature\ndef combinations_list(list1):",
    "timestamp": "2025-10-17T18:44:47.070611",
    "response_time": "1.51",
    "context": "{\"function_name\": \"combinations_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 463,
    "solution": "```python\n===START===\ndef max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    # Initialize variables to store the maximum product, minimum product, and result\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        num = arr[i]\n\n        # If the current number is negative, swap max_product and min_product\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        # Update max_product and min_product\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        # Update the result with the maximum product found so far\n        result = max(result, max_product)\n\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum product subarray of the given array.\n\n### Signature\ndef max_subarray_product(arr):",
    "timestamp": "2025-10-17T18:44:49.271907",
    "response_time": "2.20",
    "context": "{\"function_name\": \"max_subarray_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 464,
    "solution": "```python\n===START===\ndef check_value(dict, n):\n    \"\"\"\n    Check if all values in the dictionary are the same as the given value n.\n\n    Args:\n    dict (dict): The dictionary to check.\n    n: The value to compare against.\n\n    Returns:\n    bool: True if all values in the dictionary are the same as n, False otherwise.\n    \"\"\"\n    for value in dict.values():\n        if value != n:\n            return False\n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if all values are same in a dictionary.\n\n### Signature\ndef check_value(dict, n):",
    "timestamp": "2025-10-17T18:44:51.955247",
    "response_time": "2.68",
    "context": "{\"function_name\": \"check_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 465,
    "solution": "```python\n===START===\ndef drop_empty(dict1):\n    \"\"\"\n    Removes keys with empty values from the given dictionary.\n    \n    Args:\n    dict1 (dict): The input dictionary.\n    \n    Returns:\n    dict: A new dictionary with empty values removed.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to drop empty items from a given dictionary.\n\n### Signature\ndef drop_empty(dict1):",
    "timestamp": "2025-10-17T18:44:53.735712",
    "response_time": "1.78",
    "context": "{\"function_name\": \"drop_empty\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 468,
    "solution": "```python\n===START===\nfrom itertools import combinations\n\ndef max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize a list to store the maximum product for each index\n    max_product_dp = [0] * n\n    \n    # Initialize the maximum product to 0\n    overall_max_product = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        # Start with the current element as the product\n        max_product_dp[i] = arr[i]\n        \n        # Check all previous elements to find increasing subsequences\n        for j in range(i):\n            if arr[j] < arr[i]:\n                # Update the maximum product for the current index\n                max_product_dp[i] = max(max_product_dp[i], max_product_dp[j] * arr[i])\n        \n        # Update the overall maximum product\n        overall_max_product = max(overall_max_product, max_product_dp[i])\n    \n    return overall_max_product\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n### Signature\ndef max_product(arr):",
    "timestamp": "2025-10-17T18:44:57.603208",
    "response_time": "3.86",
    "context": "{\"function_name\": \"max_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 470,
    "solution": "```python\n===START===\ndef add_pairwise(test_tup):\n    \"\"\"\n    This function takes a tuple of numbers and returns a list containing the pairwise addition\n    of neighboring elements in the tuple.\n    \n    :param test_tup: Tuple of numbers\n    :return: List of pairwise sums of neighboring elements\n    \"\"\"\n    # Ensure the input is a tuple\n    if not isinstance(test_tup, tuple):\n        raise ValueError(\"Input must be a tuple\")\n    \n    # Compute pairwise addition of neighboring elements\n    return [test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n### Signature\ndef add_pairwise(test_tup):",
    "timestamp": "2025-10-17T18:45:00.637080",
    "response_time": "3.03",
    "context": "{\"function_name\": \"add_pairwise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 471,
    "solution": "```python\n===START===\ndef find_remainder(arr, n):\n    # Initialize the product to 1\n    product = 1\n    \n    # Calculate the product of all elements in the array\n    for num in arr:\n        product *= num\n    \n    # Return the product modulo n\n    return product % n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the product of the array multiplication modulo n.\n\n### Signature\ndef find_remainder(arr, n):",
    "timestamp": "2025-10-17T18:45:02.373771",
    "response_time": "1.73",
    "context": "{\"function_name\": \"find_remainder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 472,
    "solution": "===START===\ndef check_Consecutive(l):\n    if not l:  # Check if the list is empty\n        return False\n    \n    # Sort the list\n    sorted_list = sorted(l)\n    \n    # Check if each element is consecutive\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i] + 1 != sorted_list[i + 1]:\n            return False\n    \n    return True\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\n### Signature\ndef check_Consecutive(l):",
    "timestamp": "2025-10-17T18:45:05.735754",
    "response_time": "3.36",
    "context": "{\"function_name\": \"check_Consecutive\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 473,
    "solution": "```python\n===START===\ndef tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function finds the intersection of elements in two lists of tuples,\n    irrespective of the order of elements in the tuples.\n    \"\"\"\n    # Normalize tuples by sorting their elements\n    normalized_list1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_list2 = {tuple(sorted(t)) for t in test_list2}\n    \n    # Find the intersection of the two sets\n    intersection = normalized_list1 & normalized_list2\n    \n    # Return the result as a list of tuples\n    return list(intersection)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n### Signature\ndef tuple_intersection(test_list1, test_list2):",
    "timestamp": "2025-10-17T18:45:08.568216",
    "response_time": "2.83",
    "context": "{\"function_name\": \"tuple_intersection\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 474,
    "solution": "===START===\ndef replace_char(str1, ch, newch):\n    \"\"\"\n    Replaces all occurrences of a character in a string with a new character.\n\n    Parameters:\n    str1 (str): The original string.\n    ch (str): The character to be replaced.\n    newch (str): The character to replace with.\n\n    Returns:\n    str: The modified string with replacements.\n    \"\"\"\n    return str1.replace(ch, newch)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to replace characters in a string.\n\n### Signature\ndef replace_char(str1,ch,newch):",
    "timestamp": "2025-10-17T18:45:10.465022",
    "response_time": "1.89",
    "context": "{\"function_name\": \"replace_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 475,
    "solution": "```python\n===START===\ndef sort_counter(dict1):\n    \"\"\"\n    Sorts a dictionary by its values in ascending order.\n\n    Args:\n    dict1 (dict): The dictionary to be sorted.\n\n    Returns:\n    dict: A new dictionary sorted by its values.\n    \"\"\"\n    # Sort the dictionary by its values and return a new dictionary\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a dictionary by value.\n\n### Signature\ndef sort_counter(dict1):",
    "timestamp": "2025-10-17T18:45:14.616906",
    "response_time": "4.15",
    "context": "{\"function_name\": \"sort_counter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 476,
    "solution": "```python\n===START===\ndef big_sum(nums):\n    if not nums:  # Check if the list is empty\n        return 0\n    smallest = min(nums)  # Find the smallest value\n    largest = max(nums)   # Find the largest value\n    return smallest + largest  # Return their sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\n### Signature\ndef big_sum(nums):",
    "timestamp": "2025-10-17T18:45:15.881972",
    "response_time": "1.26",
    "context": "{\"function_name\": \"big_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 477,
    "solution": "```python\n===START===\ndef is_lower(string):\n    \"\"\"\n    Converts the given string to lower case.\n    \n    Args:\n    string (str): The input string to be converted.\n    \n    Returns:\n    str: The input string converted to lower case.\n    \"\"\"\n    return string.lower()\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to convert the given string to lower case.\n\n### Signature\ndef is_lower(string):",
    "timestamp": "2025-10-17T18:45:17.293370",
    "response_time": "1.41",
    "context": "{\"function_name\": \"is_lower\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 478,
    "solution": "```python\n===START===\ndef remove_lowercase(str1):\n    result = []\n    i = 0\n    while i < len(str1):\n        if str1[i].islower():\n            # Skip over the lowercase substring\n            while i < len(str1) and str1[i].islower():\n                i += 1\n        else:\n            # Add non-lowercase characters to the result\n            result.append(str1[i])\n            i += 1\n    return ''.join(result)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove lowercase substrings from a given string.\n\n### Signature\ndef remove_lowercase(str1):",
    "timestamp": "2025-10-17T18:45:18.805632",
    "response_time": "1.50",
    "context": "{\"function_name\": \"remove_lowercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 479,
    "solution": "```python\n===START===\ndef first_Digit(n):\n    # Convert the number to a string to handle its digits\n    n_str = str(abs(n))  # Use abs() to handle negative numbers\n    # Return the first character converted back to an integer\n    return int(n_str[0])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the first digit of a given number.\n\n### Signature\ndef first_Digit(n) :",
    "timestamp": "2025-10-17T18:45:20.511798",
    "response_time": "1.70",
    "context": "{\"function_name\": \"first_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 554,
    "solution": "```python\n===START===\ndef Split(list):\n    # Filter the list to include only odd numbers\n    return [num for num in list if num % 2 != 0]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and only returns the odd ones.\n\n### Signature\ndef Split(list):",
    "timestamp": "2025-10-17T18:45:21.740220",
    "response_time": "1.22",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 555,
    "solution": "```python\n===START===\ndef difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = n * (n + 1) // 2\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    \n    # Return the difference\n    return sum_of_cubes - sum_of_numbers\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n### Signature\ndef difference(n) :",
    "timestamp": "2025-10-17T18:45:24.703463",
    "response_time": "2.96",
    "context": "{\"function_name\": \"difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 556,
    "solution": "```python\n===START===\ndef find_Odd_Pair(A, N):\n    # Count the number of odd and even numbers in the array\n    odd_count = sum(1 for x in A if x % 2 != 0)\n    even_count = N - odd_count  # Remaining numbers are even\n    \n    # XOR of an odd and an even number is always odd\n    # The number of such pairs is odd_count * even_count\n    return odd_count * even_count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose xor value is odd.\n\n### Signature\ndef find_Odd_Pair(A,N) :",
    "timestamp": "2025-10-17T18:45:27.888837",
    "response_time": "3.18",
    "context": "{\"function_name\": \"find_Odd_Pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 557,
    "solution": "===START===\ndef toggle_string(string):\n    return string.swapcase()\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to toggle the case of all characters in a string.\n\n### Signature\ndef toggle_string(string):",
    "timestamp": "2025-10-17T18:45:28.841250",
    "response_time": "0.95",
    "context": "{\"function_name\": \"toggle_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 558,
    "solution": "```python\n===START===\ndef digit_distance_nums(n1, n2):\n    # Convert both numbers to strings to process each digit\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # Pad the shorter number with leading zeros to make them the same length\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    \n    # Calculate the sum of per-digit differences\n    total_distance = 0\n    for digit1, digit2 in zip(str_n1, str_n2):\n        total_distance += abs(int(digit1) - int(digit2))\n    \n    return total_distance\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of the per-digit difference between two integers.\n\n### Signature\ndef digit_distance_nums(n1, n2):",
    "timestamp": "2025-10-17T18:45:31.499465",
    "response_time": "2.66",
    "context": "{\"function_name\": \"digit_distance_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 559,
    "solution": "```python\n===START===\ndef max_sub_array_sum(a, size):\n    # Initialize variables\n    max_so_far = float('-inf')  # To store the maximum sum found so far\n    max_ending_here = 0         # To store the sum of the current subarray\n\n    for i in range(size):\n        max_ending_here += a[i]  # Add the current element to the current subarray sum\n\n        # Update max_so_far if the current subarray sum is greater\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n        # If the current subarray sum becomes negative, reset it to 0\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n\n### Signature\ndef max_sub_array_sum(a, size):",
    "timestamp": "2025-10-17T18:45:35.215346",
    "response_time": "3.71",
    "context": "{\"function_name\": \"max_sub_array_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 560,
    "solution": "```python\n===START===\ndef union_elements(test_tup1, test_tup2):\n    # Combine the elements of both tuples into a set to remove duplicates\n    union_set = set(test_tup1).union(set(test_tup2))\n    # Convert the set back to a sorted list\n    sorted_union = sorted(union_set)\n    return sorted_union\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n\n### Signature\ndef union_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:45:36.665960",
    "response_time": "1.45",
    "context": "{\"function_name\": \"union_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 562,
    "solution": "```python\n===START===\ndef Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list of lists and returns the length of the longest sublist.\n    \n    :param lst: List of lists\n    :return: Integer representing the length of the longest sublist\n    \"\"\"\n    if not lst:  # If the input list is empty, return 0\n        return 0\n    \n    max_length = 0\n    for sublist in lst:\n        if isinstance(sublist, list):  # Ensure the element is a list\n            max_length = max(max_length, len(sublist))\n    \n    return max_length\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest sublists.\n\n### Signature\ndef Find_Max_Length(lst):",
    "timestamp": "2025-10-17T18:45:39.940380",
    "response_time": "3.27",
    "context": "{\"function_name\": \"Find_Max_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 563,
    "solution": "```python\n===START===\nimport re\n\ndef extract_values(text):\n    \"\"\"\n    Extracts all values enclosed in quotation marks from the given string.\n\n    Args:\n    text (str): The input string.\n\n    Returns:\n    list: A list of strings found between quotation marks.\n    \"\"\"\n    # Use regex to find all substrings enclosed in single or double quotes\n    return re.findall(r'\"(.*?)\"|\\'(.*?)\\'', text)\n\n    # Flatten the list of tuples returned by re.findall\n    return [item for sublist in matches for item in sublist if item]\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks from a string.\n\n### Signature\ndef extract_values(text):",
    "timestamp": "2025-10-17T18:45:43.849332",
    "response_time": "3.91",
    "context": "{\"function_name\": \"extract_values\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 564,
    "solution": "```python\n===START===\ndef count_Pairs(arr, n):\n    # Initialize a dictionary to count occurrences of each number\n    freq = {}\n    \n    # Count the frequency of each number in the array\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Total number of pairs\n    total_pairs = n * (n - 1) // 2\n    \n    # Subtract pairs where both elements are equal\n    for count in freq.values():\n        total_pairs -= count * (count - 1) // 2\n    \n    return total_pairs\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n### Signature\ndef count_Pairs(arr,n):",
    "timestamp": "2025-10-17T18:45:47.569438",
    "response_time": "3.72",
    "context": "{\"function_name\": \"count_Pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 565,
    "solution": "```python\n===START===\ndef split(word):\n    return list(word)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to split a string into characters.\n\n### Signature\ndef split(word):",
    "timestamp": "2025-10-17T18:45:48.303697",
    "response_time": "0.73",
    "context": "{\"function_name\": \"split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 566,
    "solution": "```python\n===START===\ndef sum_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Args:\n    n (int): A non-negative integer.\n\n    Returns:\n    int: The sum of the digits of the integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return sum(int(digit) for digit in str(n))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get the sum of the digits of a non-negative integer.\n\n### Signature\ndef sum_digits(n):",
    "timestamp": "2025-10-17T18:45:52.413251",
    "response_time": "4.11",
    "context": "{\"function_name\": \"sum_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 567,
    "solution": "```python\n===START===\ndef issort_list(list1):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Args:\n    list1 (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return list1 == sorted(list1)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether a specified list is sorted or not.\n\n### Signature\ndef issort_list(list1):",
    "timestamp": "2025-10-17T18:45:59.148691",
    "response_time": "6.73",
    "context": "{\"function_name\": \"issort_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 568,
    "solution": "===START===\ndef empty_list(length):\n    return [{} for _ in range(length)]\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to create a list of N empty dictionaries.\n\n### Signature\ndef empty_list(length):",
    "timestamp": "2025-10-17T18:46:02.445515",
    "response_time": "3.29",
    "context": "{\"function_name\": \"empty_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 569,
    "solution": "```python\n===START===\ndef sort_sublists(list1):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n    list1 (list of lists): A list containing sublists of strings.\n\n    Returns:\n    list of lists: A list with each sublist sorted alphabetically.\n    \"\"\"\n    return [sorted(sublist) for sublist in list1]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(list1):",
    "timestamp": "2025-10-17T18:46:06.519822",
    "response_time": "4.07",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 572,
    "solution": "```python\n===START===\ndef two_unique_nums(nums):\n    # Use a set to store unique numbers\n    unique_nums = set()\n    \n    # Iterate through each list in nums\n    for sublist in nums:\n        # Add each number in the sublist to the set\n        for num in sublist:\n            unique_nums.add(num)\n    \n    # Convert the set back to a sorted list and return\n    return sorted(unique_nums)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to remove duplicate numbers from a given number of lists.\n\n### Signature\ndef two_unique_nums(nums):",
    "timestamp": "2025-10-17T18:46:09.273472",
    "response_time": "2.75",
    "context": "{\"function_name\": \"two_unique_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 573,
    "solution": "```python\n===START===\ndef unique_product(list_data):\n    # Use a set to store unique numbers\n    unique_numbers = set(list_data)\n    \n    # Initialize the product to 1\n    product = 1\n    \n    # Calculate the product of unique numbers\n    for num in unique_numbers:\n        product *= num\n    \n    return product\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to calculate the product of the unique numbers in a given list.\n\n### Signature\ndef unique_product(list_data):",
    "timestamp": "2025-10-17T18:46:10.665470",
    "response_time": "1.39",
    "context": "{\"function_name\": \"unique_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 574,
    "solution": "===START===\nimport math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder's base.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The surface area of the cylinder.\n    \"\"\"\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n    \n    # Surface area formula: 2\u03c0r\u00b2 + 2\u03c0rh\n    base_area = 2 * math.pi * r**2\n    lateral_area = 2 * math.pi * r * h\n    return base_area + lateral_area\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cylinder.\n\n### Signature\ndef surfacearea_cylinder(r,h):",
    "timestamp": "2025-10-17T18:46:13.140807",
    "response_time": "2.47",
    "context": "{\"function_name\": \"surfacearea_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 576,
    "solution": "```python\n===START===\ndef is_Sub_Array(A, B):\n    \"\"\"\n    Function to check whether list A is a sublist of list B.\n    \n    Parameters:\n    A (list): The list to check if it is a sublist.\n    B (list): The list in which to check for the sublist.\n    \n    Returns:\n    bool: True if A is a sublist of B, False otherwise.\n    \"\"\"\n    # Check if A is empty, an empty list is always a sublist\n    if not A:\n        return True\n    \n    # Check if A is a sublist of B\n    for i in range(len(B) - len(A) + 1):\n        if B[i:i+len(A)] == A:\n            return True\n    \n    return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether a list is sublist of another or not.\n\n### Signature\ndef is_Sub_Array(A,B):",
    "timestamp": "2025-10-17T18:46:18.547849",
    "response_time": "5.40",
    "context": "{\"function_name\": \"is_Sub_Array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 577,
    "solution": "```python\n===START===\ndef last_Digit_Factorial(n):\n    # If n is 0 or 1, the factorial is 1, and the last digit is also 1\n    if n == 0 or n == 1:\n        return 1\n    \n    # For n >= 5, the factorial will always have a trailing zero\n    if n >= 5:\n        return 0\n    \n    # Calculate factorial for n < 5 and return the last digit\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    \n    return factorial % 10\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the last digit in factorial of a given number.\n\n### Signature\ndef last_Digit_Factorial(n):",
    "timestamp": "2025-10-17T18:46:21.916507",
    "response_time": "3.37",
    "context": "{\"function_name\": \"last_Digit_Factorial\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 578,
    "solution": "```python\n===START===\ndef interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for a, b, c in zip(list1, list2, list3):\n        interleaved_list.extend([a, b, c])\n    return interleaved_list\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to interleave 3 lists of the same length into a single flat list.\n\n### Signature\ndef interleave_lists(list1,list2,list3):",
    "timestamp": "2025-10-17T18:46:23.598281",
    "response_time": "1.68",
    "context": "{\"function_name\": \"interleave_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 579,
    "solution": "```python\n===START===\ndef find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a tuple containing elements\n    that are dissimilar (i.e., elements that are in one tuple but not in the other).\n    \"\"\"\n    # Convert tuples to sets to find the symmetric difference\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find dissimilar elements using symmetric difference\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    # Convert the result back to a tuple\n    return tuple(dissimilar_elements)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the dissimilar elements in the given two tuples.\n\n### Signature\ndef find_dissimilar(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:46:26.058647",
    "response_time": "2.45",
    "context": "{\"function_name\": \"find_dissimilar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 580,
    "solution": "```python\n===START===\ndef even_ele(test_tuple, even_fnc):\n    def is_even(value):\n        # Check if the value is an integer and even\n        return isinstance(value, int) and even_fnc(value)\n    \n    def filter_tuple(tup):\n        # Recursively filter the tuple\n        filtered = []\n        for item in tup:\n            if isinstance(item, tuple):\n                # If the item is a tuple, recursively filter it\n                filtered_item = filter_tuple(item)\n                if filtered_item:  # Only add non-empty tuples\n                    filtered.append(tuple(filtered_item))\n            elif is_even(item):\n                # Add even integers\n                filtered.append(item)\n        return filtered\n    \n    # Filter the input tuple and return as a tuple\n    return tuple(filter_tuple(test_tuple))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove uneven elements in the nested mixed tuple.\n\n### Signature\ndef even_ele(test_tuple, even_fnc):",
    "timestamp": "2025-10-17T18:46:29.919640",
    "response_time": "3.86",
    "context": "{\"function_name\": \"extract_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 581,
    "solution": "```python\n===START===\nimport math\n\ndef surface_Area(b, s):\n    # Calculate the slant height using the Pythagorean theorem\n    slant_height = math.sqrt((b / 2) ** 2 + s ** 2)\n    \n    # Calculate the lateral surface area (4 triangles)\n    lateral_area = 2 * b * slant_height\n    \n    # Calculate the base area (square)\n    base_area = b ** 2\n    \n    # Total surface area is the sum of lateral area and base area\n    total_surface_area = lateral_area + base_area\n    \n    return total_surface_area\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\n### Signature\ndef surface_Area(b,s):",
    "timestamp": "2025-10-17T18:46:32.556673",
    "response_time": "2.63",
    "context": "{\"function_name\": \"surface_Area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 582,
    "solution": "```python\n===START===\ndef my_dict(dict1):\n    \"\"\"\n    This function checks if a dictionary is empty.\n    \n    Parameters:\n    dict1 (dict): The dictionary to check.\n    \n    Returns:\n    bool: True if the dictionary is empty, False otherwise.\n    \"\"\"\n    return len(dict1) == 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if a dictionary is empty\n\n### Signature\ndef my_dict(dict1):",
    "timestamp": "2025-10-17T18:46:34.291955",
    "response_time": "1.73",
    "context": "{\"function_name\": \"my_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 583,
    "solution": "===START===\ndef catalan_number(num):\n    if num < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Base case\n    if num == 0 or num == 1:\n        return 1\n    \n    # Recursive calculation of nth Catalan number\n    catalan = [0] * (num + 1)\n    catalan[0], catalan[1] = 1, 1\n    \n    for i in range(2, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[num]\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function which returns nth catalan number.\n\n### Signature\ndef catalan_number(num):",
    "timestamp": "2025-10-17T18:46:37.825587",
    "response_time": "3.53",
    "context": "{\"function_name\": \"catalan_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 584,
    "solution": "```python\n===START===\nimport re\n\ndef find_adverbs(text):\n    # Use regex to find words ending with 'ly'\n    match = re.search(r'\\b\\w+ly\\b', text)\n    if match:\n        # Return the first adverb and its start and end positions\n        return match.group(), match.start(), match.end()\n    else:\n        # Return None if no adverb is found\n        return None\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n\n### Signature\ndef find_adverbs(text):",
    "timestamp": "2025-10-17T18:46:40.843589",
    "response_time": "3.01",
    "context": "{\"function_name\": \"find_adverbs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 585,
    "solution": "```python\n===START===\ndef expensive_items(items, n):\n    \"\"\"\n    Finds the n most expensive items in a given dataset.\n\n    Args:\n    items (list of tuples): A list where each tuple contains the name of the item and its price.\n                            Example: [(\"item1\", 10), (\"item2\", 20), (\"item3\", 15)]\n    n (int): The number of most expensive items to return.\n\n    Returns:\n    list of tuples: A list of the n most expensive items sorted by price in descending order.\n                    If two items have the same price, their order in the result is undefined.\n    \"\"\"\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    \n    # Return the top n items\n    return sorted_items[:n]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the n most expensive items in a given dataset.\n\n### Signature\ndef expensive_items(items,n):",
    "timestamp": "2025-10-17T18:46:43.734895",
    "response_time": "2.89",
    "context": "{\"function_name\": \"expensive_items\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 586,
    "solution": "```python\n===START===\ndef split_Arr(l, n):\n    # Ensure n is within the bounds of the list\n    if n < 0 or n > len(l):\n        raise ValueError(\"n must be within the range of the list length\")\n    \n    # Split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    \n    # Combine the second part with the first part at the end\n    return second_part + first_part\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n\n### Signature\ndef split_Arr(l, n):",
    "timestamp": "2025-10-17T18:46:45.971327",
    "response_time": "2.23",
    "context": "{\"function_name\": \"split_Arr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 587,
    "solution": "```python\n===START===\ndef list_tuple(listx):\n    \"\"\"\n    Converts a list to a tuple.\n\n    Args:\n    listx (list): The list to be converted.\n\n    Returns:\n    tuple: The converted tuple.\n    \"\"\"\n    return tuple(listx)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a list to a tuple.\n\n### Signature\ndef list_tuple(listx):",
    "timestamp": "2025-10-17T18:46:48.856185",
    "response_time": "2.88",
    "context": "{\"function_name\": \"list_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 588,
    "solution": "```python\n===START===\ndef big_diff(nums):\n    if not nums:  # Check if the list is empty\n        return 0\n    return max(nums) - min(nums)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the difference between largest and smallest value in a given list.\n\n### Signature\ndef big_diff(nums):",
    "timestamp": "2025-10-17T18:46:50.695153",
    "response_time": "1.83",
    "context": "{\"function_name\": \"big_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 589,
    "solution": "===START===\nimport math\n\ndef perfect_squares(a, b):\n    \"\"\"\n    This function finds all perfect squares between two given numbers a and b (inclusive).\n    \n    Args:\n    a (int): The lower bound of the range.\n    b (int): The upper bound of the range.\n    \n    Returns:\n    list: A list of perfect squares between a and b.\n    \"\"\"\n    if a > b:\n        return []\n    \n    # Find the smallest integer whose square is >= a\n    start = math.ceil(math.sqrt(a))\n    # Find the largest integer whose square is <= b\n    end = math.floor(math.sqrt(b))\n    \n    # Generate the list of perfect squares\n    return [i**2 for i in range(start, end + 1)]\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find perfect squares between two given numbers.\n\n### Signature\ndef perfect_squares(a, b):",
    "timestamp": "2025-10-17T18:46:53.536054",
    "response_time": "2.84",
    "context": "{\"function_name\": \"perfect_squares\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 590,
    "solution": "```python\n===START===\nimport math\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius or distance from the origin.\n    theta (float): The angle in radians.\n\n    Returns:\n    tuple: A tuple (x, y) representing the rectangular coordinates.\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert polar coordinates to rectangular coordinates.\n\n### Signature\ndef polar_rect(x,y):",
    "timestamp": "2025-10-17T18:46:55.622190",
    "response_time": "2.08",
    "context": "{\"function_name\": \"polar_rect\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 591,
    "solution": "===START===\ndef swap_List(newList):\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList  # No swap needed for lists with less than 2 elements\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last elements in a list.\n\n### Signature\ndef swap_List(newList):",
    "timestamp": "2025-10-17T18:46:59.427805",
    "response_time": "3.80",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 592,
    "solution": "```python\n===START===\nfrom math import comb\n\ndef binomial_Coeff(n, k):\n    \"\"\"\n    Function to find the sum of the product of consecutive binomial coefficients.\n    \"\"\"\n    if n < 0 or k < 0 or k > n:\n        return 0\n    \n    # Calculate the sum of the product of consecutive binomial coefficients\n    total_sum = 0\n    for i in range(k):\n        total_sum += comb(n, i) * comb(n, i + 1)\n    \n    return total_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\n### Signature\ndef binomial_Coeff(n,k):",
    "timestamp": "2025-10-17T18:47:03.706492",
    "response_time": "4.27",
    "context": "{\"function_name\": \"sum_Of_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 593,
    "solution": "```python\n===START===\ndef removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Remove leading zeros from each part\n    cleaned_parts = [str(int(part)) for part in parts]\n    # Join the cleaned parts back into an IP address\n    cleaned_ip = '.'.join(cleaned_parts)\n    return cleaned_ip\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove leading zeroes from an ip address.\n\n### Signature\ndef removezero_ip(ip):",
    "timestamp": "2025-10-17T18:47:05.893324",
    "response_time": "2.18",
    "context": "{\"function_name\": \"removezero_ip\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 594,
    "solution": "```python\n===START===\ndef diff_even_odd(list1):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        # Break the loop if both are found\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # If either even or odd number is not found, return None\n    if first_even is None or first_odd is None:\n        return None\n    \n    # Return the difference between the first even and first odd numbers\n    return first_even - first_odd\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the difference of the first even and first odd number of a given list.\n\n### Signature\ndef diff_even_odd(list1):",
    "timestamp": "2025-10-17T18:47:08.826595",
    "response_time": "2.93",
    "context": "{\"function_name\": \"diff_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 595,
    "solution": "```python\n===START===\ndef min_Swaps(str1, str2):\n    # Check if the two strings have the same length\n    if len(str1) != len(str2):\n        return -1  # Return -1 if lengths are not equal, as conversion is not possible\n\n    # Check if the two strings have the same number of 1s and 0s\n    if str1.count('1') != str2.count('1') or str1.count('0') != str2.count('0'):\n        return -1  # Return -1 if the counts of 1s and 0s are not equal\n\n    # Initialize variables\n    swaps = 0\n    str1_list = list(str1)\n\n    # Iterate through the strings\n    for i in range(len(str1)):\n        if str1_list[i] != str2[i]:\n            # Find the next position where a swap can be made\n            for j in range(i + 1, len(str1)):\n                if str1_list[j] != str2[j] and str1_list[j] == str2[i]:\n                    # Swap the characters\n                    str1_list[i], str1_list[j] = str1_list[j], str1_list[i]\n                    swaps += 1\n                    break\n\n    return swaps\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n### Signature\ndef min_Swaps(str1,str2) :",
    "timestamp": "2025-10-17T18:47:15.279404",
    "response_time": "6.45",
    "context": "{\"function_name\": \"min_Swaps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 596,
    "solution": "```python\n===START===\nimport sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the size in bytes of the given tuple.\n\n### Signature\ndef tuple_size(tuple_list):",
    "timestamp": "2025-10-17T18:47:16.267495",
    "response_time": "0.98",
    "context": "{\"function_name\": \"tuple_size\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 597,
    "solution": "```python\n===START===\ndef find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the two sorted arrays.\n\n    :param arr1: List[int] - First sorted array\n    :param arr2: List[int] - Second sorted array\n    :param k: int - The kth position (1-based index)\n    :return: int - The kth element in the merged sorted array\n    \"\"\"\n    # Initialize pointers for both arrays\n    i, j = 0, 0\n    # Counter for the merged array position\n    count = 0\n\n    # Loop until we find the kth element\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n        else:\n            count += 1\n            if count == k:\n                return arr2[j]\n            j += 1\n\n    # If one of the arrays is exhausted, continue with the other array\n    while i < len(arr1):\n        count += 1\n        if count == k:\n            return arr1[i]\n        i += 1\n\n    while j < len(arr2):\n        count += 1\n        if count == k:\n            return arr2[j]\n        j += 1\n\n    # If k is out of bounds, return None\n    return None\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find kth element from the given two sorted arrays.\n\n### Signature\ndef find_kth(arr1, arr2, k):",
    "timestamp": "2025-10-17T18:47:22.516674",
    "response_time": "6.24",
    "context": "{\"function_name\": \"find_kth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 598,
    "solution": "```python\n===START===\ndef armstrong_number(number):\n    \"\"\"\n    Check if a number is an Armstrong number.\n    \n    An Armstrong number (also known as a narcissistic number) is a number that is equal to the sum of its own digits\n    each raised to the power of the number of digits.\n    \n    Args:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string to easily iterate over its digits\n    digits = str(number)\n    # Calculate the number of digits\n    num_digits = len(digits)\n    # Calculate the sum of each digit raised to the power of the number of digits\n    armstrong_sum = sum(int(digit) ** num_digits for digit in digits)\n    # Check if the sum is equal to the original number\n    return armstrong_sum == number\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given number is armstrong or not.\n\n### Signature\ndef armstrong_number(number):",
    "timestamp": "2025-10-17T18:47:25.791539",
    "response_time": "3.27",
    "context": "{\"function_name\": \"armstrong_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 599,
    "solution": "```python\n===START===\ndef sum_average(number):\n    if number < 1:\n        return (0, 0)  # Return (0, 0) for invalid input (e.g., negative or zero)\n    \n    # Calculate the sum of first n natural numbers\n    total_sum = number * (number + 1) // 2\n    \n    # Calculate the average\n    average = total_sum / number\n    \n    return (total_sum, average)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find sum and average of first n natural numbers.\n\n### Signature\ndef sum_average(number):",
    "timestamp": "2025-10-17T18:47:27.982204",
    "response_time": "2.19",
    "context": "{\"function_name\": \"sum_average\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 600,
    "solution": "```python\n===START===\ndef is_Even(n):\n    \"\"\"\n    Function to check whether the given number is even or not.\n    \n    Parameters:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return n % 2 == 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given number is even or not.\n\n### Signature\ndef is_Even(n) :",
    "timestamp": "2025-10-17T18:47:29.145715",
    "response_time": "1.16",
    "context": "{\"function_name\": \"is_Even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 602,
    "solution": "```python\n===START===\ndef first_repeated_char(str1):\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the first repeated character in a given string.\n\n### Signature\ndef first_repeated_char(str1):",
    "timestamp": "2025-10-17T18:47:30.397303",
    "response_time": "1.25",
    "context": "{\"function_name\": \"first_repeated_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 603,
    "solution": "===START===\ndef get_ludic(n):\n    \"\"\"\n    Function to get all ludic numbers smaller than or equal to a given integer n.\n    \"\"\"\n    if n < 1:\n        return []\n    \n    # Initialize the list of numbers from 1 to n\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    \n    while numbers:\n        # The first number in the list is always a ludic number\n        current_ludic = numbers[0]\n        ludic_numbers.append(current_ludic)\n        \n        # Remove every current_ludic-th number from the list, starting from the current_ludic-th position\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % current_ludic != 0]\n    \n    return ludic_numbers\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\n### Signature\ndef get_ludic(n):",
    "timestamp": "2025-10-17T18:47:35.646748",
    "response_time": "5.25",
    "context": "{\"function_name\": \"get_ludic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 604,
    "solution": "```python\n===START===\ndef reverse_words(s):\n    # Split the string into words using spaces as the delimiter\n    words = s.split()\n    # Reverse the list of words\n    reversed_words = words[::-1]\n    # Join the reversed list of words back into a string with spaces\n    return ' '.join(reversed_words)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to reverse words seperated by spaces in a given string.\n\n### Signature\ndef reverse_words(s):",
    "timestamp": "2025-10-17T18:47:36.838630",
    "response_time": "1.19",
    "context": "{\"function_name\": \"reverse_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 605,
    "solution": "```python\n===START===\ndef prime_num(num):\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given integer is a prime number.\n\n### Signature\ndef prime_num(num):",
    "timestamp": "2025-10-17T18:47:38.115044",
    "response_time": "1.27",
    "context": "{\"function_name\": \"prime_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 606,
    "solution": "===START===\nimport math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert degrees to radians.\n\n### Signature\ndef radian_degree(degree):",
    "timestamp": "2025-10-17T18:47:38.928230",
    "response_time": "0.81",
    "context": "{\"function_name\": \"radian_degree\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 607,
    "solution": "```python\n===START===\nimport re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None, -1, -1\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\n### Signature\ndef find_literals(text, pattern):",
    "timestamp": "2025-10-17T18:47:40.143982",
    "response_time": "1.21",
    "context": "{\"function_name\": \"find_literals\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 608,
    "solution": "```python\n===START===\ndef bell_Number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Base case: Bell(0, 0) is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # First value in every row is the last value of the previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the entries in the current row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # The nth Bell number is the first value in the nth row\n    return bell[n][0]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find nth bell number.\n\n### Signature\ndef bell_Number(n):",
    "timestamp": "2025-10-17T18:47:43.311390",
    "response_time": "3.16",
    "context": "{\"function_name\": \"bell_Number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 610,
    "solution": "```python\n===START===\ndef remove_kth_element(list1, L):\n    \"\"\"\n    Removes the k'th element from the list.\n\n    Parameters:\n    list1 (list): The input list.\n    L (int): The index of the element to remove.\n\n    Returns:\n    list: A new list with the k'th element removed.\n    \"\"\"\n    if L < 0 or L >= len(list1):\n        raise IndexError(\"Index L is out of range for the list.\")\n    \n    return list1[:L] + list1[L+1:]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\n### Signature\ndef remove_kth_element(list1, L):",
    "timestamp": "2025-10-17T18:47:45.308724",
    "response_time": "1.99",
    "context": "{\"function_name\": \"remove_kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 611,
    "solution": "```python\n===START===\ndef max_of_nth(test_list, N):\n    # Check if the matrix is empty or N is out of bounds\n    if not test_list or N < 0 or N >= len(test_list[0]):\n        raise ValueError(\"Invalid column index or empty matrix\")\n    \n    # Extract the N'th column and find the maximum value\n    nth_column = [row[N] for row in test_list]\n    return max(nth_column)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\n### Signature\ndef max_of_nth(test_list, N):",
    "timestamp": "2025-10-17T18:47:46.897193",
    "response_time": "1.58",
    "context": "{\"function_name\": \"max_of_nth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 612,
    "solution": "```python\n===START===\ndef merge(lst):\n    first_elements = []\n    second_elements = []\n    \n    for sublist in lst:\n        if len(sublist) == 2:  # Ensure the sublist has exactly two elements\n            first_elements.append(sublist[0])\n            second_elements.append(sublist[1])\n    \n    return [first_elements, second_elements]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n### Signature\ndef merge(lst):",
    "timestamp": "2025-10-17T18:47:48.295953",
    "response_time": "1.40",
    "context": "{\"function_name\": \"merge\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 614,
    "solution": "```python\n===START===\ndef cummulative_sum(test_list):\n    \"\"\"\n    This function calculates the cumulative sum of all the values present in the given tuple list.\n    \n    :param test_list: List of tuples containing numeric values\n    :return: Cumulative sum of all the values in the tuples\n    \"\"\"\n    # Initialize cumulative sum\n    total_sum = 0\n    \n    # Iterate through the list of tuples\n    for tpl in test_list:\n        # Add all elements of the tuple to the cumulative sum\n        total_sum += sum(tpl)\n    \n    return total_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n### Signature\ndef cummulative_sum(test_list):",
    "timestamp": "2025-10-17T18:47:50.451028",
    "response_time": "2.15",
    "context": "{\"function_name\": \"cummulative_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 615,
    "solution": "```python\n===START===\ndef average_tuple(nums):\n    # Calculate the average for each tuple in the input tuple of tuples\n    return [sum(t) / len(t) for t in nums]\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\n### Signature\ndef average_tuple(nums):",
    "timestamp": "2025-10-17T18:47:51.888346",
    "response_time": "1.43",
    "context": "{\"function_name\": \"average_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 616,
    "solution": "```python\n===START===\ndef tuple_modulo(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\n### Signature\ndef tuple_modulo(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:47:53.284365",
    "response_time": "1.39",
    "context": "{\"function_name\": \"tuple_modulo\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 617,
    "solution": "```python\n===START===\ndef min_Jumps(steps, d):\n    \"\"\"\n    Calculate the minimum number of jumps required to reach the point (d, 0) from the origin (0, 0)\n    using jumps of a given length.\n\n    :param steps: Length of each jump\n    :param d: Target x-coordinate\n    :return: Minimum number of jumps required\n    \"\"\"\n    if steps <= 0:\n        raise ValueError(\"Step length must be a positive integer.\")\n    if d < 0:\n        raise ValueError(\"Target distance must be a non-negative integer.\")\n    \n    # Calculate the minimum number of jumps\n    jumps = d // steps\n    if d % steps != 0:\n        jumps += 1\n    \n    return jumps\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n### Signature\ndef min_Jumps(steps, d):",
    "timestamp": "2025-10-17T18:47:56.307481",
    "response_time": "3.02",
    "context": "{\"function_name\": \"min_Jumps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 618,
    "solution": "```python\n===START===\ndef div_list(nums1, nums2):\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    result = []\n    for a, b in zip(nums1, nums2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero encountered in the second list.\")\n        result.append(a / b)\n    \n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to divide two lists element wise.\n\n### Signature\ndef div_list(nums1,nums2):",
    "timestamp": "2025-10-17T18:47:57.738938",
    "response_time": "1.43",
    "context": "{\"function_name\": \"div_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 619,
    "solution": "```python\n===START===\ndef move_num(test_str):\n    # Separate characters and digits\n    chars = []\n    digits = []\n    \n    for char in test_str:\n        if char.isdigit():\n            digits.append(char)\n        else:\n            chars.append(char)\n    \n    # Combine characters and digits\n    return ''.join(chars) + ''.join(digits)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to move all the numbers to the end of the given string.\n\n### Signature\ndef move_num(test_str):",
    "timestamp": "2025-10-17T18:48:00.468298",
    "response_time": "2.73",
    "context": "{\"function_name\": \"move_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 620,
    "solution": "```python\n===START===\nfrom collections import defaultdict\n\ndef largest_subset(a):\n    # Sort the array to ensure divisors come before their multiples\n    a.sort()\n    n = len(a)\n    \n    # dp[i] will store the size of the largest subset ending with a[i]\n    dp = [1] * n\n    # To reconstruct the subset, we keep track of the previous index\n    prev = [-1] * n\n    \n    # Variable to track the maximum size and its index\n    max_size = 0\n    max_index = -1\n    \n    # Fill dp array\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:  # Check divisibility\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n        # Update max_size and max_index\n        if dp[i] > max_size:\n            max_size = dp[i]\n            max_index = i\n    \n    # Reconstruct the largest subset\n    subset = []\n    while max_index != -1:\n        subset.append(a[max_index])\n        max_index = prev[max_index]\n    \n    subset.reverse()  # Reverse to get the subset in the correct order\n    return subset\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n### Signature\ndef largest_subset(a):",
    "timestamp": "2025-10-17T18:48:03.897019",
    "response_time": "3.43",
    "context": "{\"function_name\": \"largest_subset\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 622,
    "solution": "```python\n===START===\ndef get_median(arr1, arr2, n):\n    \"\"\"\n    Function to find the median of two sorted lists of the same size.\n    \n    Parameters:\n    arr1 (list): First sorted list.\n    arr2 (list): Second sorted list.\n    n (int): Size of each list.\n    \n    Returns:\n    float: Median of the two sorted lists.\n    \"\"\"\n    # Merge the two sorted arrays\n    merged = []\n    i, j = 0, 0\n    \n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    \n    # Append remaining elements from arr1\n    while i < n:\n        merged.append(arr1[i])\n        i += 1\n    \n    # Append remaining elements from arr2\n    while j < n:\n        merged.append(arr2[j])\n        j += 1\n    \n    # Calculate the median\n    total_length = 2 * n\n    mid = total_length // 2\n    \n    if total_length % 2 == 0:\n        # If even, median is the average of the two middle elements\n        return (merged[mid - 1] + merged[mid]) / 2.0\n    else:\n        # If odd, median is the middle element\n        return merged[mid]\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the median of two sorted lists of same size.\n\n### Signature\ndef get_median(arr1, arr2, n):",
    "timestamp": "2025-10-17T18:48:07.457316",
    "response_time": "3.56",
    "context": "{\"function_name\": \"get_median\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 623,
    "solution": "```python\n===START===\ndef nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n    nums (list): A list of numbers.\n    n (int): The power to which each number in the list should be raised.\n\n    Returns:\n    list: A list containing each number in the input list raised to the n-th power.\n    \"\"\"\n    return [x ** n for x in nums]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to compute the n-th power of each number in a list.\n\n### Signature\ndef nth_nums(nums,n):",
    "timestamp": "2025-10-17T18:48:10.424284",
    "response_time": "2.95",
    "context": "{\"function_name\": \"nth_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 624,
    "solution": "```python\n===START===\ndef is_upper(string):\n    \"\"\"\n    Converts the given string to uppercase.\n\n    Args:\n    string (str): The input string to be converted.\n\n    Returns:\n    str: The uppercase version of the input string.\n    \"\"\"\n    return string.upper()\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to convert a given string to uppercase.\n\n### Signature\ndef is_upper(string):",
    "timestamp": "2025-10-17T18:48:11.363234",
    "response_time": "0.93",
    "context": "{\"function_name\": \"is_upper\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 625,
    "solution": "```python\n===START===\ndef swap_List(newList):\n    # Check if the list has at least two elements to swap\n    if len(newList) < 2:\n        return newList\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last element in a given list.\n\n### Signature\ndef swap_List(newList):",
    "timestamp": "2025-10-17T18:48:13.012593",
    "response_time": "1.64",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 626,
    "solution": "```python\n===START===\nimport math\n\ndef triangle_area(r):\n    # The largest triangle that can be inscribed in a semicircle is a right triangle\n    # with its hypotenuse as the diameter of the semicircle.\n    # The base and height of this triangle will both be equal to the radius of the semicircle.\n    \n    # Base and height of the triangle\n    base = r\n    height = r\n    \n    # Area of the triangle\n    area = 0.5 * base * height\n    return area\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n### Signature\ndef triangle_area(r) :",
    "timestamp": "2025-10-17T18:48:15.326393",
    "response_time": "2.31",
    "context": "{\"function_name\": \"triangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 627,
    "solution": "```python\n===START===\ndef find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    # Base case: If the array is empty\n    if start > end:\n        return start\n\n    mid = (start + end) // 2\n\n    # If the mid index matches the value at mid, the missing number is in the right half\n    if array[mid] == mid:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        # Otherwise, the missing number is in the left half\n        return find_First_Missing(array, start, mid - 1)\n\n# Example usage:\n# array = [0, 1, 2, 3, 5, 6]\n# print(find_First_Missing(array))  # Output: 4\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\n### Signature\ndef find_First_Missing(array,start=0,end=None):",
    "timestamp": "2025-10-17T18:48:18.006314",
    "response_time": "2.68",
    "context": "{\"function_name\": \"find_First_Missing\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 628,
    "solution": "```python\n===START===\ndef replace_spaces(string):\n    return string.replace(' ', '%20')\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to replace all spaces in the given string with '%20'.\n\n### Signature\ndef replace_spaces(string):",
    "timestamp": "2025-10-17T18:48:18.958415",
    "response_time": "0.95",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 629,
    "solution": "```python\n===START===\ndef Split(list):\n    # Filter the list to include only even numbers\n    even_numbers = [num for num in list if num % 2 == 0]\n    return even_numbers\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find even numbers from a list of numbers.\n\n### Signature\ndef Split(list):",
    "timestamp": "2025-10-17T18:48:20.109296",
    "response_time": "1.14",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 630,
    "solution": "```python\n===START===\ndef adjac(ele, sub=[]):\n    \"\"\"\n    Extract all the adjacent coordinates of the given coordinate tuple.\n\n    Args:\n    ele (tuple): A tuple representing the coordinate (x, y).\n    sub (list): Optional list to store the adjacent coordinates (default is an empty list).\n\n    Returns:\n    list: A list of tuples representing all adjacent coordinates.\n    \"\"\"\n    x, y = ele\n    # Define all possible adjacent moves (up, down, left, right, and diagonals)\n    moves = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]\n    \n    # Calculate adjacent coordinates\n    adjacent_coords = [(x + dx, y + dy) for dx, dy in moves]\n    \n    return adjacent_coords\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n### Signature\ndef adjac(ele, sub = []):",
    "timestamp": "2025-10-17T18:48:22.781121",
    "response_time": "2.67",
    "context": "{\"function_name\": \"get_coordinates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 631,
    "solution": "```python\n===START===\ndef replace_spaces(text):\n    # Replace whitespaces with underscores and underscores with whitespaces\n    return text.replace(' ', '_').replace('_', ' ', 1)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\n### Signature\ndef replace_spaces(text):",
    "timestamp": "2025-10-17T18:48:24.771636",
    "response_time": "1.99",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 632,
    "solution": "```python\n===START===\ndef move_zero(num_list):\n    \"\"\"\n    Moves all zeroes in the given list to the end while maintaining the order of non-zero elements.\n\n    :param num_list: List of integers\n    :return: List with all zeroes moved to the end\n    \"\"\"\n    # Initialize a list to store non-zero elements\n    non_zero_elements = [num for num in num_list if num != 0]\n    \n    # Count the number of zeroes in the list\n    zero_count = num_list.count(0)\n    \n    # Append the zeroes to the end of the non-zero elements\n    return non_zero_elements + [0] * zero_count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to move all zeroes to the end of the given list.\n\n### Signature\ndef move_zero(num_list):",
    "timestamp": "2025-10-17T18:48:26.702198",
    "response_time": "1.93",
    "context": "{\"function_name\": \"move_zero\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 633,
    "solution": "```python\n===START===\ndef pair_xor_Sum(arr, n):\n    # Initialize result\n    result = 0\n    \n    # Iterate over all bits (assuming 32-bit integers)\n    for i in range(32):\n        # Count of numbers with i-th bit set\n        count_set = 0\n        \n        for num in arr:\n            if num & (1 << i):\n                count_set += 1\n        \n        # Count of numbers with i-th bit not set\n        count_unset = n - count_set\n        \n        # Each pair contributes 2^i to the XOR sum if one number has the i-th bit set and the other does not\n        result += (1 << i) * count_set * count_unset\n    \n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\n### Signature\ndef pair_xor_Sum(arr,n) :",
    "timestamp": "2025-10-17T18:48:31.120411",
    "response_time": "4.41",
    "context": "{\"function_name\": \"pair_xor_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 635,
    "solution": "```python\n===START===\ndef heap_sort(iterable):\n    import heapq\n\n    # Convert the iterable into a list\n    lst = list(iterable)\n    \n    # Create a min-heap from the list\n    heapq.heapify(lst)\n    \n    # Extract elements from the heap in sorted order\n    sorted_list = [heapq.heappop(lst) for _ in range(len(lst))]\n    \n    return sorted_list\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort the given list.\n\n### Signature\ndef heap_sort(iterable):",
    "timestamp": "2025-10-17T18:48:35.462238",
    "response_time": "4.34",
    "context": "{\"function_name\": \"heap_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 637,
    "solution": "```python\n===START===\ndef noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    \n    Parameters:\n    actual_cost (float): The actual cost of the item.\n    sale_amount (float): The sale amount of the item.\n    \n    Returns:\n    bool: True if there is no profit and no loss, False otherwise.\n    \"\"\"\n    return actual_cost == sale_amount\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given amount has no profit and no loss\n\n### Signature\ndef noprofit_noloss(actual_cost,sale_amount):",
    "timestamp": "2025-10-17T18:48:37.303376",
    "response_time": "1.84",
    "context": "{\"function_name\": \"noprofit_noloss\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 638,
    "solution": "```python\n===START===\nimport math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer.\n    \n    Parameters:\n    v (float): Wind velocity in km/h\n    t (float): Temperature in Celsius\n    \n    Returns:\n    int: Wind chill index rounded to the next integer\n    \"\"\"\n    if v < 4.8 or t > 10:\n        # Wind chill formula is not applicable for wind speeds less than 4.8 km/h or temperatures above 10\u00b0C\n        return round(t)\n    \n    # Convert wind velocity from km/h to m/s\n    v_m_s = v / 3.6\n    \n    # Wind chill formula\n    wci = 13.12 + 0.6215 * t - 11.37 * (v_m_s ** 0.16) + 0.3965 * t * (v_m_s ** 0.16)\n    \n    # Return the wind chill index rounded to the next integer\n    return math.ceil(wci)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n### Signature\ndef wind_chill(v,t):",
    "timestamp": "2025-10-17T18:48:41.069583",
    "response_time": "3.76",
    "context": "{\"function_name\": \"wind_chill\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 639,
    "solution": "```python\n===START===\ndef sample_nam(sample_names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    # Calculate the sum of the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n### Signature\ndef sample_nam(sample_names):",
    "timestamp": "2025-10-17T18:48:43.733396",
    "response_time": "2.66",
    "context": "{\"function_name\": \"sample_nam\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 640,
    "solution": "```python\n===START===\ndef remove_parenthesis(items):\n    result = []\n    for item in items:\n        new_item = \"\"\n        skip = 0\n        for char in item:\n            if char == '(':\n                skip += 1\n            elif char == ')':\n                if skip > 0:\n                    skip -= 1\n            elif skip == 0:\n                new_item += char\n        result.append(new_item)\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n\n### Signature\ndef remove_parenthesis(items):",
    "timestamp": "2025-10-17T18:48:45.787388",
    "response_time": "2.05",
    "context": "{\"function_name\": \"remove_parenthesis\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 641,
    "solution": "```python\n===START===\ndef is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n    A nonagonal number is a figurate number that extends the concept of triangular and square numbers to the nonagon (a nine-sided polygon).\n    The formula for the nth nonagonal number is:\n        N(n) = n * (7n - 5) / 2\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Calculate the nth nonagonal number using the formula\n    nonagonal_number = n * (7 * n - 5) // 2\n    return nonagonal_number\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth nonagonal number.\n\n### Signature\ndef is_nonagonal(n):",
    "timestamp": "2025-10-17T18:48:48.589969",
    "response_time": "2.80",
    "context": "{\"function_name\": \"is_nonagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 643,
    "solution": "```python\n===START===\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if the string contains the letter 'z', \n    except at the start and end of the word.\n    \"\"\"\n    # Check if the string is empty or too short to have 'z' in the middle\n    if len(text) <= 2:\n        return False\n    \n    # Check for 'z' in the middle of the string (excluding first and last characters)\n    return 'z' in text[1:-1]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\n### Signature\ndef text_match_wordz_middle(text):",
    "timestamp": "2025-10-17T18:48:52.942057",
    "response_time": "4.35",
    "context": "{\"function_name\": \"text_match_wordz_middle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 644,
    "solution": "```python\n===START===\ndef reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Reverses the elements of the array up to the given position k (inclusive).\n    \n    Parameters:\n    input (list): The array to be reversed.\n    k (int): The position up to which the array should be reversed (0-based index).\n    \n    Returns:\n    list: The array with elements reversed up to position k.\n    \"\"\"\n    if not isinstance(input, list) or not isinstance(k, int):\n        raise ValueError(\"Input must be a list and k must be an integer.\")\n    \n    if k < 0 or k >= len(input):\n        raise ValueError(\"k must be within the range of the array indices.\")\n    \n    # Reverse the array up to position k\n    return input[:k+1][::-1] + input[k+1:]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to reverse an array upto a given position.\n\n### Signature\ndef reverse_Array_Upto_K(input, k):",
    "timestamp": "2025-10-17T18:48:55.353602",
    "response_time": "2.41",
    "context": "{\"function_name\": \"reverse_Array_Upto_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 720,
    "solution": "```python\n===START===\ndef add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Adds a dictionary to the given tuple and returns the resulting tuple.\n\n    Parameters:\n    test_tup (tuple): The original tuple.\n    test_dict (dict): The dictionary to add to the tuple.\n\n    Returns:\n    tuple: A new tuple with the dictionary added.\n    \"\"\"\n    # Convert the tuple to a list, append the dictionary, and convert back to a tuple\n    return test_tup + (test_dict,)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\n### Signature\ndef add_dict_to_tuple(test_tup, test_dict):",
    "timestamp": "2025-10-17T18:48:57.994771",
    "response_time": "2.64",
    "context": "{\"function_name\": \"add_dict_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 721,
    "solution": "```python\n===START===\ndef maxAverageOfPath(cost):\n    n = len(cost)\n    # Create a dp table to store the maximum sum for each cell\n    dp = [[0] * n for _ in range(n)]\n    \n    # Initialize the top-left cell\n    dp[0][0] = cost[0][0]\n    \n    # Fill the first row\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    \n    # Fill the first column\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    \n    # Fill the rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    \n    # The maximum sum is stored in the bottom-right cell\n    max_sum = dp[n - 1][n - 1]\n    \n    # The number of cells in the path is 2n - 1 (n rows + n columns - 1 overlap)\n    num_cells = 2 * n - 1\n    \n    # Calculate the maximum average\n    max_average = max_sum / num_cells\n    \n    return max_average\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n### Signature\ndef maxAverageOfPath(cost):",
    "timestamp": "2025-10-17T18:49:02.091268",
    "response_time": "4.09",
    "context": "{\"function_name\": \"maxAverageOfPath\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 722,
    "solution": "```python\n===START===\ndef filter_data(students, h, w):\n    \"\"\"\n    Filters students based on minimum height and weight criteria.\n\n    Args:\n    students (dict): A dictionary where keys are student names and values are tuples of (height, weight).\n    h (float): Minimum height.\n    w (float): Minimum weight.\n\n    Returns:\n    dict: A dictionary of students who meet the height and weight criteria.\n    \"\"\"\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\n### Signature\ndef filter_data(students,h,w):",
    "timestamp": "2025-10-17T18:49:04.145209",
    "response_time": "2.05",
    "context": "{\"function_name\": \"filter_data\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 723,
    "solution": "```python\n===START===\ndef count_same_pair(nums1, nums2):\n    # Ensure both lists are of the same length\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    # Count indices where the values in both lists are the same\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    \n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\n### Signature\ndef count_same_pair(nums1, nums2):",
    "timestamp": "2025-10-17T18:49:05.925901",
    "response_time": "1.78",
    "context": "{\"function_name\": \"count_same_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 724,
    "solution": "```python\n===START===\ndef power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string, iterate over each character, convert back to integer, and sum them\n    digit_sum = sum(int(digit) for digit in str(result))\n    \n    return digit_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\n### Signature\ndef power_base_sum(base, power):",
    "timestamp": "2025-10-17T18:49:07.725954",
    "response_time": "1.80",
    "context": "{\"function_name\": \"power_base_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 725,
    "solution": "```python\n===START===\nimport re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Extracts all values between quotation marks in the given string.\n\n    Args:\n    text1 (str): The input string.\n\n    Returns:\n    list: A list of strings found between quotation marks.\n    \"\"\"\n    return re.findall(r'\"(.*?)\"', text1)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks \" \" of the given string.\n\n### Signature\ndef extract_quotation(text1):",
    "timestamp": "2025-10-17T18:49:09.386539",
    "response_time": "1.66",
    "context": "{\"function_name\": \"extract_quotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 726,
    "solution": "```python\n# ===START===\ndef multiply_elements(test_tup):\n    return tuple(test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1))\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n### Signature\ndef multiply_elements(test_tup):",
    "timestamp": "2025-10-17T18:49:10.568937",
    "response_time": "1.18",
    "context": "{\"function_name\": \"multiply_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 728,
    "solution": "```python\n===START===\ndef sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n### Signature\ndef sum_list(lst1,lst2):",
    "timestamp": "2025-10-17T18:49:11.754601",
    "response_time": "1.18",
    "context": "{\"function_name\": \"sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 730,
    "solution": "```python\n===START===\ndef consecutive_duplicates(nums):\n    result = []\n    for i, num in enumerate(nums):\n        if i == 0 or num != nums[i - 1]:\n            result.append(num)\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove consecutive duplicates of a given list.\n\n### Signature\ndef consecutive_duplicates(nums):",
    "timestamp": "2025-10-17T18:49:13.137012",
    "response_time": "1.38",
    "context": "{\"function_name\": \"consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 731,
    "solution": "===START===\nimport math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone given its radius and height.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n    # Calculate the slant height of the cone\n    slant_height = math.sqrt(r**2 + h**2)\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * slant_height\n    \n    return lateral_surface_area\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\n### Signature\ndef lateralsurface_cone(r,h):",
    "timestamp": "2025-10-17T18:49:15.770775",
    "response_time": "2.63",
    "context": "{\"function_name\": \"lateralsurface_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 732,
    "solution": "```python\n===START===\ndef replace_specialchar(text):\n    # Replace spaces, commas, and dots with a colon\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\n### Signature\ndef replace_specialchar(text):",
    "timestamp": "2025-10-17T18:49:16.861030",
    "response_time": "1.09",
    "context": "{\"function_name\": \"replace_specialchar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 733,
    "solution": "```python\n===START===\ndef find_first_occurrence(A, x):\n    \"\"\"\n    Finds the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    A (list): A sorted list of integers.\n    x (int): The number to find.\n\n    Returns:\n    int: The index of the first occurrence of x in A, or -1 if x is not in A.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1  # Continue searching in the left half for the first occurrence\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\n### Signature\ndef find_first_occurrence(A, x):",
    "timestamp": "2025-10-17T18:49:19.492925",
    "response_time": "2.63",
    "context": "{\"function_name\": \"find_first_occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 734,
    "solution": "```python\n===START===\ndef sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n\n    # Iterate through each element of the array\n    for i in range(n):\n        # Calculate the contribution of arr[i] to the sum of products\n        # arr[i] is part of (i + 1) subarrays starting from the left\n        # and (n - i) subarrays ending at the right\n        contribution = arr[i] * (i + 1) * (n - i)\n        result += contribution\n\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\n### Signature\ndef sum_Of_Subarray_Prod(arr):",
    "timestamp": "2025-10-17T18:49:22.210662",
    "response_time": "2.71",
    "context": "{\"function_name\": \"sum_Of_Subarray_Prod\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 735,
    "solution": "```python\n===START===\ndef set_middle_bits(n):\n    # Convert the number to its binary representation\n    binary = bin(n)[2:]  # Remove the '0b' prefix\n    \n    # If the binary representation has less than 3 bits, return the number as is\n    if len(binary) <= 2:\n        return n\n    \n    # Extract the first and last bits\n    first_bit = binary[0]\n    last_bit = binary[-1]\n    \n    # Toggle the middle bits\n    middle_bits = ''.join('1' if bit == '0' else '0' for bit in binary[1:-1])\n    \n    # Reconstruct the binary string with the toggled middle bits\n    toggled_binary = first_bit + middle_bits + last_bit\n    \n    # Convert the binary string back to an integer\n    return int(toggled_binary, 2)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\n### Signature\ndef set_middle_bits(n):",
    "timestamp": "2025-10-17T18:49:24.973077",
    "response_time": "2.76",
    "context": "{\"function_name\": \"toggle_middle_bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 736,
    "solution": "```python\n===START===\nfrom bisect import bisect_left\n\ndef left_insertion(a, x):\n    \"\"\"\n    Locate the leftmost insertion point for a specified value in sorted order.\n    \n    Parameters:\n    a (list): A sorted list of elements.\n    x (any): The value to find the leftmost insertion point for.\n    \n    Returns:\n    int: The index where the value x should be inserted to maintain sorted order.\n    \"\"\"\n    return bisect_left(a, x)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\n### Signature\ndef left_insertion(a, x):",
    "timestamp": "2025-10-17T18:49:26.798870",
    "response_time": "1.82",
    "context": "{\"function_name\": \"left_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 737,
    "solution": "===START===\nimport re\n\ndef check_str(string):\n    # Define a regex pattern to check if the string starts with a vowel (case insensitive)\n    pattern = r'^[aeiouAEIOU]'\n    # Use re.match to check if the string matches the pattern\n    return bool(re.match(pattern, string))\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\n### Signature\ndef check_str(string):",
    "timestamp": "2025-10-17T18:49:28.783468",
    "response_time": "1.98",
    "context": "{\"function_name\": \"check_str\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 738,
    "solution": "```python\n===START===\ndef geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1 using recursion.\n    The geometric sum is defined as: 1 + 1/2 + 1/4 + ... + 1/(2^(n-1)).\n    \n    :param n: The number of terms in the geometric series.\n    :return: The geometric sum of n-1.\n    \"\"\"\n    if n < 1:\n        return 0\n    return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\n### Signature\ndef geometric_sum(n):",
    "timestamp": "2025-10-17T18:49:31.334316",
    "response_time": "2.55",
    "context": "{\"function_name\": \"geometric_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 739,
    "solution": "```python\n===START===\nimport math\n\ndef find_Index(n):\n    # A triangular number T(k) is given by the formula T(k) = k * (k + 1) / 2\n    # We need to find the smallest k such that T(k) has n digits.\n    # This means T(k) >= 10^(n-1)\n    \n    # Rearrange the formula for T(k) to find k:\n    # k * (k + 1) / 2 >= 10^(n-1)\n    # k^2 + k - 2 * 10^(n-1) >= 0\n    \n    # Solve the quadratic equation k^2 + k - 2 * 10^(n-1) = 0\n    # Using the quadratic formula: k = (-b + sqrt(b^2 - 4ac)) / 2a\n    # Here, a = 1, b = 1, c = -2 * 10^(n-1)\n    \n    c = -2 * 10**(n-1)\n    discriminant = 1 - 4 * 1 * c  # b^2 - 4ac\n    \n    # Calculate the positive root of the quadratic equation\n    k = (-1 + math.sqrt(discriminant)) / 2\n    \n    # Since k must be an integer, take the ceiling of k\n    k = math.ceil(k)\n    \n    return k\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\n### Signature\ndef find_Index(n):",
    "timestamp": "2025-10-17T18:49:35.473448",
    "response_time": "4.13",
    "context": "{\"function_name\": \"find_Index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 740,
    "solution": "```python\n===START===\ndef tuple_to_dict(test_tup):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n    \n    Parameters:\n    test_tup (tuple): A tuple containing elements to be converted into a dictionary.\n    \n    Returns:\n    dict: A dictionary where adjacent elements of the tuple are key-value pairs.\n    \"\"\"\n    # Ensure the tuple has an even number of elements\n    if len(test_tup) % 2 != 0:\n        raise ValueError(\"The tuple must have an even number of elements to form key-value pairs.\")\n    \n    # Use dictionary comprehension to create key-value pairs from adjacent elements\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\n### Signature\ndef tuple_to_dict(test_tup):",
    "timestamp": "2025-10-17T18:49:38.431825",
    "response_time": "2.95",
    "context": "{\"function_name\": \"tuple_to_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 741,
    "solution": "```python\n===START===\ndef all_Characters_Same(s):\n    if not s:  # Check for empty string\n        return False\n    return all(char == s[0] for char in s)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether all the characters are same or not.\n\n### Signature\ndef all_Characters_Same(s) :",
    "timestamp": "2025-10-17T18:49:39.829919",
    "response_time": "1.39",
    "context": "{\"function_name\": \"all_Characters_Same\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 742,
    "solution": "```python\n===START===\nimport math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given the length of its side.\n    \n    Parameters:\n    side (float): The length of a side of the tetrahedron.\n    \n    Returns:\n    float: The surface area of the tetrahedron.\n    \"\"\"\n    if side <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    \n    # Surface area of a regular tetrahedron = sqrt(3) * side^2\n    surface_area = math.sqrt(3) * (side ** 2)\n    return surface_area\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to caluclate the area of a tetrahedron.\n\n### Signature\ndef area_tetrahedron(side):",
    "timestamp": "2025-10-17T18:49:42.278756",
    "response_time": "2.44",
    "context": "{\"function_name\": \"area_tetrahedron\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 743,
    "solution": "```python\n===START===\ndef rotate_right(lst, m):\n    \"\"\"\n    Rotates a given list to the right by m positions.\n\n    Parameters:\n    lst (list): The list to be rotated.\n    m (int): The number of positions to rotate the list.\n\n    Returns:\n    list: The rotated list.\n    \"\"\"\n    if not lst:  # If the list is empty, return it as is\n        return lst\n    \n    m = m % len(lst)  # Handle cases where m is greater than the length of the list\n    return lst[-m:] + lst[:-m]\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\n### Signature\ndef rotate_right(list, m):",
    "timestamp": "2025-10-17T18:49:45.155952",
    "response_time": "2.87",
    "context": "{\"function_name\": \"rotate_right\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 744,
    "solution": "```python\n===START===\ndef check_none(test_tup):\n    \"\"\"\n    This function checks if the given tuple has any None value or not.\n    \n    Parameters:\n    test_tup (tuple): The tuple to check for None values.\n    \n    Returns:\n    bool: True if the tuple contains any None value, False otherwise.\n    \"\"\"\n    return any(item is None for item in test_tup)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given tuple has any none value or not.\n\n### Signature\ndef check_none(test_tup):",
    "timestamp": "2025-10-17T18:49:47.135695",
    "response_time": "1.97",
    "context": "{\"function_name\": \"check_none\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 745,
    "solution": "```python\n===START===\ndef divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = [int(d) for d in str(num) if d != '0']  # Exclude '0' to avoid division by zero\n        return all(num % d == 0 for d in digits)\n    \n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\n### Signature\ndef divisible_by_digits(startnum, endnum):",
    "timestamp": "2025-10-17T18:49:49.055367",
    "response_time": "1.91",
    "context": "{\"function_name\": \"divisible_by_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 746,
    "solution": "```python\n===START===\nimport math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    return (a / 360) * math.pi * r**2\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\n### Signature\ndef sector_area(r,a):",
    "timestamp": "2025-10-17T18:49:50.487933",
    "response_time": "1.43",
    "context": "{\"function_name\": \"sector_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 747,
    "solution": "```python\n===START===\ndef lcs_of_three(X, Y, Z):\n    # Get the lengths of the three strings\n    m, n, o = len(X), len(Y), len(Z)\n    \n    # Create a 3D DP array to store lengths of LCS\n    dp = [[[0 for _ in range(o + 1)] for __ in range(n + 1)] for ___ in range(m + 1)]\n    \n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    \n    # The length of the LCS of the three strings is stored in dp[m][n][o]\n    return dp[m][n][o]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n### Signature\ndef lcs_of_three(X, Y, Z):",
    "timestamp": "2025-10-17T18:49:53.963664",
    "response_time": "3.47",
    "context": "{\"function_name\": \"lcs_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 748,
    "solution": "```python\n===START===\ndef capital_words_spaces(str1):\n    result = []\n    for char in str1:\n        if char.isupper() and result:\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)\n\n# Example usage:\n# print(capital_words_spaces(\"HelloWorld\"))  # Output: \"Hello World\"\n# print(capital_words_spaces(\"ThisIsATest\"))  # Output: \"This Is A Test\"\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to put spaces between words starting with capital letters in a given string.\n\n### Signature\ndef capital_words_spaces(str1):",
    "timestamp": "2025-10-17T18:49:55.915996",
    "response_time": "1.95",
    "context": "{\"function_name\": \"capital_words_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 749,
    "solution": "```python\n===START===\ndef sort_numeric_strings(nums_str):\n    # Convert strings to integers for sorting, then sort and convert back to strings\n    return sorted(nums_str, key=lambda x: int(x))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n### Signature\ndef sort_numeric_strings(nums_str):",
    "timestamp": "2025-10-17T18:49:57.071090",
    "response_time": "1.15",
    "context": "{\"function_name\": \"sort_numeric_strings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 750,
    "solution": "```python\n===START===\ndef add_tuple(test_list, test_tup):\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Parameters:\n    test_list (list): The list to which the tuple will be added.\n    test_tup (tuple): The tuple to add to the list.\n\n    Returns:\n    list: The updated list with the tuple added.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to add the given tuple to the given list.\n\n### Signature\ndef add_tuple(test_list, test_tup):",
    "timestamp": "2025-10-17T18:49:58.713803",
    "response_time": "1.64",
    "context": "{\"function_name\": \"add_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 751,
    "solution": "```python\n===START===\ndef check_min_heap_helper(arr, i):\n    \"\"\"\n    Function to check if the given array represents a min heap or not.\n    :param arr: List[int] - The array to check.\n    :param i: int - The current index in the array.\n    :return: bool - True if the array represents a min heap, False otherwise.\n    \"\"\"\n    n = len(arr)\n    \n    # If the current index is a leaf node, return True\n    if i >= n // 2:\n        return True\n    \n    # Get the indices of the left and right children\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # Check if the current node is smaller than its children\n    # and recursively check for the left and right subtrees\n    if (left < n and arr[i] > arr[left]) or (right < n and arr[i] > arr[right]):\n        return False\n    \n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n### Signature\ndef check_min_heap_helper(arr, i):",
    "timestamp": "2025-10-17T18:50:02.396135",
    "response_time": "3.68",
    "context": "{\"function_name\": \"check_min_heap\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 752,
    "solution": "===START===\ndef jacobsthal_num(n):\n    \"\"\"\n    Calculate the nth Jacobsthal number using the recurrence relation:\n    J(n) = J(n-1) + 2 * J(n-2)\n    with base cases:\n    J(0) = 0\n    J(1) = 1\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Jacobsthal numbers\n    prev2 = 0  # J(0)\n    prev1 = 1  # J(1)\n    \n    # Compute Jacobsthal numbers iteratively up to J(n)\n    for _ in range(2, n + 1):\n        current = prev1 + 2 * prev2\n        prev2 = prev1\n        prev1 = current\n    \n    return prev1\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\n### Signature\ndef jacobsthal_num(n):",
    "timestamp": "2025-10-17T18:50:05.339277",
    "response_time": "2.94",
    "context": "{\"function_name\": \"jacobsthal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 753,
    "solution": "```python\n===START===\nfrom heapq import nsmallest\n\ndef min_k(test_list, K):\n    \"\"\"\n    Function to find minimum K records from a tuple list.\n    \n    Parameters:\n    test_list (list): List of tuples where each tuple contains comparable elements.\n    K (int): Number of minimum records to find.\n    \n    Returns:\n    list: List of K minimum tuples from the input list.\n    \"\"\"\n    return nsmallest(K, test_list)\n\n# Example test cases\nif __name__ == \"__main__\":\n    test_list = [(4, 5), (2, 3), (6, 7), (2, 5), (1, 9)]\n    K = 3\n    print(\"The original list is:\", test_list)\n    print(\"The minimum K records are:\", min_k(test_list, K))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n### Signature\ndef min_k(test_list, K):",
    "timestamp": "2025-10-17T18:50:09.490890",
    "response_time": "4.15",
    "context": "{\"function_name\": \"min_k\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 754,
    "solution": "```python\n===START===\ndef extract_index_list(l1, l2, l3):\n    # Find the minimum length of the three lists to avoid index out of range errors\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Iterate through the indices up to the minimum length\n    for i in range(min_length):\n        # Check if the elements at the same index in all three lists are equal\n        if l1[i] == l2[i] == l3[i]:\n            # Add the common element to the result list\n            common_elements.append(l1[i])\n    \n    return common_elements\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\n### Signature\ndef extract_index_list(l1, l2, l3):",
    "timestamp": "2025-10-17T18:50:12.170389",
    "response_time": "2.67",
    "context": "{\"function_name\": \"extract_index_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 755,
    "solution": "```python\n===START===\ndef second_smallest(numbers):\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two distinct numbers.\")\n    \n    # Initialize two variables to track the smallest and second smallest\n    smallest = float('inf')\n    second = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second = smallest\n            smallest = num\n        elif smallest < num < second:\n            second = num\n    \n    if second == float('inf'):\n        raise ValueError(\"List must contain at least two distinct numbers.\")\n    \n    return second\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the second smallest number in a list.\n\n### Signature\ndef second_smallest(numbers):",
    "timestamp": "2025-10-17T18:50:15.184334",
    "response_time": "3.01",
    "context": "{\"function_name\": \"second_smallest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 756,
    "solution": "```python\n===START===\nimport re\n\ndef text_match_zero_one(text):\n    # Define the regex pattern for 'a' followed by one or more 'b's\n    pattern = r'ab+'\n    # Use re.fullmatch to check if the entire string matches the pattern\n    if re.fullmatch(pattern, text):\n        return True\n    else:\n        return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\n### Signature\ndef text_match_zero_one(text):",
    "timestamp": "2025-10-17T18:50:17.266966",
    "response_time": "2.08",
    "context": "{\"function_name\": \"text_match_zero_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 757,
    "solution": "```python\n===START===\ndef count_reverse_pairs(test_list):\n    # Initialize a set to store unique strings\n    seen = set()\n    # Initialize a counter for reverse pairs\n    count = 0\n    \n    # Iterate through each string in the list\n    for string in test_list:\n        # Check if the reverse of the current string exists in the set\n        if string[::-1] in seen:\n            count += 1\n        # Add the current string to the set\n        seen.add(string)\n    \n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\n### Signature\ndef count_reverse_pairs(test_list):",
    "timestamp": "2025-10-17T18:50:19.580200",
    "response_time": "2.31",
    "context": "{\"function_name\": \"count_reverse_pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 758,
    "solution": "```python\n===START===\ndef unique_sublists(list1):\n    from collections import Counter\n    \n    # Convert all sublists to tuples\n    tuple_list = [tuple(sublist) for sublist in list1 if isinstance(sublist, list)]\n    \n    # Count occurrences of each tuple\n    counts = Counter(tuple_list)\n    \n    # Convert Counter to dictionary and return\n    return dict(counts)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n### Signature\ndef unique_sublists(list1):",
    "timestamp": "2025-10-17T18:50:21.135275",
    "response_time": "1.55",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 759,
    "solution": "```python\n===START===\ndef is_decimal(num):\n    \"\"\"\n    Check if the given string is a decimal number with a precision of 2.\n    \n    Args:\n    num (str): The string to check.\n    \n    Returns:\n    bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    if not isinstance(num, str):\n        return False\n    \n    # Split the string into integer and fractional parts\n    parts = num.split('.')\n    \n    # Check if there are exactly two parts (integer and fractional)\n    if len(parts) != 2:\n        return False\n    \n    integer_part, fractional_part = parts\n    \n    # Check if the integer part is a valid number (can be empty for cases like \".12\")\n    if integer_part and not integer_part.isdigit() and not (integer_part[0] == '-' and integer_part[1:].isdigit()):\n        return False\n    \n    # Check if the fractional part is exactly 2 digits and is numeric\n    if len(fractional_part) != 2 or not fractional_part.isdigit():\n        return False\n    \n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\n### Signature\ndef is_decimal(num):",
    "timestamp": "2025-10-17T18:50:27.493798",
    "response_time": "6.35",
    "context": "{\"function_name\": \"is_decimal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 760,
    "solution": "```python\n===START===\ndef unique_Element(arr):\n    # Check if the set of the array has only one unique element\n    return len(set(arr)) == 1\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\n### Signature\ndef unique_Element(arr):",
    "timestamp": "2025-10-17T18:50:28.762948",
    "response_time": "1.26",
    "context": "{\"function_name\": \"unique_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 762,
    "solution": "```python\n===START===\ndef check_monthnumber_number(monthnum3):\n    \"\"\"\n    Function to check if the given month number contains 30 days.\n    \n    Args:\n    monthnum3 (int): The month number (1 to 12).\n    \n    Returns:\n    bool: True if the month has 30 days, False otherwise.\n    \"\"\"\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    months_with_30_days = {4, 6, 9, 11}\n    return monthnum3 in months_with_30_days\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n### Signature\ndef check_monthnumber_number(monthnum3):",
    "timestamp": "2025-10-17T18:50:30.763722",
    "response_time": "1.99",
    "context": "{\"function_name\": \"check_monthnumber_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 763,
    "solution": "```python\n===START===\ndef find_min_diff(arr, n):\n    # If there are less than 2 elements, return None as no difference can be calculated\n    if n < 2:\n        return None\n    \n    # Sort the array to bring elements closer to their nearest neighbors\n    arr.sort()\n    \n    # Initialize the minimum difference to a large value\n    min_diff = float('inf')\n    \n    # Iterate through the array and find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\n### Signature\ndef find_min_diff(arr,n):",
    "timestamp": "2025-10-17T18:50:32.874936",
    "response_time": "2.11",
    "context": "{\"function_name\": \"find_min_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 764,
    "solution": "===START===\ndef number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count number of digits in a given string.\n\n### Signature\ndef number_ctr(str):",
    "timestamp": "2025-10-17T18:50:34.066981",
    "response_time": "1.19",
    "context": "{\"function_name\": \"number_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 765,
    "solution": "```python\n===START===\ndef is_polite(n):\n    \"\"\"\n    Function to find the nth polite number.\n    A polite number is a number that is not a power of 2.\n    \"\"\"\n    def is_power_of_two(x):\n        # Check if a number is a power of 2\n        return (x & (x - 1)) == 0 and x != 0\n\n    count = 0\n    current = 1\n\n    while True:\n        if not is_power_of_two(current):\n            count += 1\n            if count == n:\n                return current\n        current += 1\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\n### Signature\ndef is_polite(n):",
    "timestamp": "2025-10-17T18:50:36.085419",
    "response_time": "2.01",
    "context": "{\"function_name\": \"is_polite\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 766,
    "solution": "```python\n===START===\ndef pair_wise(l1):\n    # Return a list of tuples containing consecutive pairs\n    return [(l1[i], l1[i+1]) for i in range(len(l1) - 1)]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to return a list of all pairs of consecutive items in a given list.\n\n### Signature\ndef pair_wise(l1):",
    "timestamp": "2025-10-17T18:50:37.547440",
    "response_time": "1.46",
    "context": "{\"function_name\": \"pair_wise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 767,
    "solution": "```python\n===START===\ndef get_pairs_count(arr, sum):\n    # Dictionary to store the frequency of each element\n    freq = {}\n    count = 0\n\n    # Iterate through the array\n    for num in arr:\n        # Calculate the complement that would sum up to the given sum\n        complement = sum - num\n\n        # If the complement exists in the frequency dictionary, add its frequency to the count\n        if complement in freq:\n            count += freq[complement]\n\n        # Update the frequency of the current number in the dictionary\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\n### Signature\ndef get_pairs_count(arr, sum):",
    "timestamp": "2025-10-17T18:50:39.769451",
    "response_time": "2.22",
    "context": "{\"function_name\": \"get_pairs_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 769,
    "solution": "```python\n===START===\ndef Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a list containing the elements\n    that are present in the first list but not in the second list.\n    \n    :param li1: List 1\n    :param li2: List 2\n    :return: List of elements in li1 but not in li2\n    \"\"\"\n    return [item for item in li1 if item not in li2]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to get the difference between two lists.\n\n### Signature\ndef Diff(li1,li2):",
    "timestamp": "2025-10-17T18:50:41.541530",
    "response_time": "1.77",
    "context": "{\"function_name\": \"Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 770,
    "solution": "```python\n===START===\ndef odd_num_sum(n):\n    # Initialize the sum\n    total_sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(n):\n        # Calculate the odd number\n        odd_number = 2 * i + 1\n        # Add the fourth power of the odd number to the total sum\n        total_sum += odd_number ** 4\n    \n    return total_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\n### Signature\ndef odd_num_sum(n) :",
    "timestamp": "2025-10-17T18:50:43.236228",
    "response_time": "1.69",
    "context": "{\"function_name\": \"odd_num_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 771,
    "solution": "```python\n===START===\ndef check_expression(exp):\n    # Stack to keep track of opening brackets\n    stack = []\n    \n    # Dictionary to map closing brackets to their corresponding opening brackets\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    # Iterate through each character in the expression\n    for char in exp:\n        # If the character is an opening bracket, push it onto the stack\n        if char in bracket_map.values():\n            stack.append(char)\n        # If the character is a closing bracket\n        elif char in bracket_map:\n            # Check if the stack is empty or the top of the stack doesn't match the corresponding opening bracket\n            if not stack or stack[-1] != bracket_map[char]:\n                return False\n            # If it matches, pop the top of the stack\n            stack.pop()\n    \n    # If the stack is empty, the expression is balanced\n    return not stack\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\n### Signature\ndef check_expression(exp):",
    "timestamp": "2025-10-17T18:50:45.918901",
    "response_time": "2.68",
    "context": "{\"function_name\": \"check_expression\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 772,
    "solution": "```python\n===START===\ndef remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    \n    # Filter out words with length K\n    filtered_words = [word for word in words if len(word) != K]\n    \n    # Join the filtered words back into a string\n    result = ' '.join(filtered_words)\n    \n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove all the words with k length in the given string.\n\n### Signature\ndef remove_length(test_str, K):",
    "timestamp": "2025-10-17T18:50:47.165634",
    "response_time": "1.24",
    "context": "{\"function_name\": \"remove_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 773,
    "solution": "```python\n===START===\ndef occurance_substring(text, pattern):\n    if not text or not pattern:\n        return None\n    \n    occurrences = []\n    start = 0\n    \n    while start < len(text):\n        start = text.find(pattern, start)\n        if start == -1:\n            break\n        occurrences.append((start, start + len(pattern) - 1))\n        start += 1  # Move to the next character to find overlapping matches\n    \n    return occurrences if occurrences else None\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n### Signature\ndef occurance_substring(text,pattern):",
    "timestamp": "2025-10-17T18:50:49.681168",
    "response_time": "2.51",
    "context": "{\"function_name\": \"occurance_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 775,
    "solution": "```python\n===START===\ndef odd_position(nums):\n    for i in range(1, len(nums), 2):  # Iterate over odd indices\n        if nums[i] % 2 == 0:  # Check if the number at the odd index is even\n            return False\n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\n### Signature\ndef odd_position(nums):",
    "timestamp": "2025-10-17T18:50:51.208799",
    "response_time": "1.52",
    "context": "{\"function_name\": \"odd_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 776,
    "solution": "```python\n===START===\ndef count_vowels(test_str):\n    vowels = set(\"aeiouAEIOU\")\n    count = 0\n    \n    for i in range(1, len(test_str) - 1):\n        if test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    \n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\n### Signature\ndef count_vowels(test_str):",
    "timestamp": "2025-10-17T18:50:52.647161",
    "response_time": "1.43",
    "context": "{\"function_name\": \"count_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 777,
    "solution": "```python\n===START===\ndef find_sum(arr):\n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Sum up elements that appear only once\n    non_repeated_sum = sum(num for num, count in element_count.items() if count == 1)\n    \n    return non_repeated_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of non-repeated elements in a given list.\n\n### Signature\ndef find_sum(arr):",
    "timestamp": "2025-10-17T18:50:54.689541",
    "response_time": "2.04",
    "context": "{\"function_name\": \"find_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 778,
    "solution": "```python\n===START===\ndef pack_consecutive_duplicates(list1):\n    if not list1:\n        return []\n    \n    packed_list = []\n    current_sublist = [list1[0]]\n    \n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_sublist.append(list1[i])\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [list1[i]]\n    \n    packed_list.append(current_sublist)\n    return packed_list\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\n### Signature\ndef pack_consecutive_duplicates(list1):",
    "timestamp": "2025-10-17T18:50:57.772593",
    "response_time": "3.08",
    "context": "{\"function_name\": \"pack_consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 779,
    "solution": "```python\n===START===\ndef unique_sublists(list1):\n    from collections import Counter\n    \n    # Filter out only the sublists\n    sublists = [tuple(sublist) for sublist in list1 if isinstance(sublist, list)]\n    \n    # Count occurrences of each sublist\n    sublist_counts = Counter(sublists)\n    \n    # Convert Counter to dictionary and return\n    return dict(sublist_counts)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\n### Signature\ndef unique_sublists(list1):",
    "timestamp": "2025-10-17T18:51:00.262184",
    "response_time": "2.48",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 780,
    "solution": "```python\n===START===\nfrom itertools import combinations\n\ndef find_combinations(test_list):\n    # Extract all tuples from the list\n    all_tuples = [item for sublist in test_list for item in sublist]\n    \n    # Initialize result list\n    result = []\n    \n    # Iterate over all possible lengths of combinations\n    for r in range(1, len(all_tuples) + 1):\n        # Generate all combinations of length r\n        for comb in combinations(all_tuples, r):\n            # Calculate the sum of the current combination\n            comb_sum = sum(comb)\n            # Append the combination and its sum as a tuple to the result\n            result.append((comb, comb_sum))\n    \n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\n### Signature\ndef find_combinations(test_list):",
    "timestamp": "2025-10-17T18:51:02.445580",
    "response_time": "2.18",
    "context": "{\"function_name\": \"find_combinations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 781,
    "solution": "```python\n===START===\ndef count_divisors(n):\n    \"\"\"\n    Function to check whether the count of divisors of a number is even.\n    \n    Parameters:\n    n (int): The number to check divisors for.\n    \n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1  # Count the divisor i\n            if i != n // i:\n                count += 1  # Count the paired divisor n // i\n    \n    return count % 2 == 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\n### Signature\ndef count_divisors(n) :",
    "timestamp": "2025-10-17T18:51:06.007907",
    "response_time": "3.56",
    "context": "{\"function_name\": \"count_divisors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 782,
    "solution": "```python\n===START===\ndef odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        # Calculate the number of subarrays in which arr[i] is included\n        # (i + 1) is the number of subarrays starting before or at index i\n        # (n - i) is the number of subarrays ending after or at index i\n        # Total subarrays including arr[i] = (i + 1) * (n - i)\n        total_subarrays = (i + 1) * (n - i)\n        \n        # Only odd-length subarrays contribute to the sum\n        # Count of odd-length subarrays including arr[i]\n        odd_subarrays = (total_subarrays + 1) // 2\n        \n        # Add the contribution of arr[i] to the total sum\n        total_sum += arr[i] * odd_subarrays\n    \n    return total_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\n### Signature\ndef odd_length_sum(arr):",
    "timestamp": "2025-10-17T18:51:09.490637",
    "response_time": "3.48",
    "context": "{\"function_name\": \"odd_length_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 783,
    "solution": "```python\n===START===\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \n    Parameters:\n    r (int): Red component (0-255)\n    g (int): Green component (0-255)\n    b (int): Blue component (0-255)\n    \n    Returns:\n    tuple: (h, s, v) where\n        h (float): Hue (0-360 degrees)\n        s (float): Saturation (0-1)\n        v (float): Value (0-1)\n    \"\"\"\n    # Normalize RGB values to the range [0, 1]\n    r_norm = r / 255.0\n    g_norm = g / 255.0\n    b_norm = b / 255.0\n\n    # Find the maximum and minimum values among r, g, b\n    c_max = max(r_norm, g_norm, b_norm)\n    c_min = min(r_norm, g_norm, b_norm)\n    delta = c_max - c_min\n\n    # Calculate Hue (h)\n    if delta == 0:\n        h = 0\n    elif c_max == r_norm:\n        h = 60 * (((g_norm - b_norm) / delta) % 6)\n    elif c_max == g_norm:\n        h = 60 * (((b_norm - r_norm) / delta) + 2)\n    elif c_max == b_norm:\n        h = 60 * (((r_norm - g_norm) / delta) + 4)\n\n    # Ensure h is non-negative\n    if h < 0:\n        h += 360\n\n    # Calculate Saturation (s)\n    s = 0 if c_max == 0 else (delta / c_max)\n\n    # Calculate Value (v)\n    v = c_max\n\n    return h, s, v\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n### Signature\ndef rgb_to_hsv(r, g, b):",
    "timestamp": "2025-10-17T18:51:15.575398",
    "response_time": "6.08",
    "context": "{\"function_name\": \"rgb_to_hsv\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 784,
    "solution": "```python\n===START===\ndef mul_even_odd(list1):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in list1:\n        if first_even is None and num % 2 == 0:  # Check for even number\n            first_even = num\n        if first_odd is None and num % 2 != 0:  # Check for odd number\n            first_odd = num\n        # Break the loop if both even and odd numbers are found\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # If either even or odd number is not found, return None\n    if first_even is None or first_odd is None:\n        return None\n    \n    # Return the product of the first even and odd numbers\n    return first_even * first_odd\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the product of first even and odd number of a given list.\n\n### Signature\ndef mul_even_odd(list1):",
    "timestamp": "2025-10-17T18:51:17.932330",
    "response_time": "2.35",
    "context": "{\"function_name\": \"mul_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 785,
    "solution": "```python\n===START===\ndef tuple_str_int(test_str):\n    \"\"\"\n    Convert a tuple string to an integer tuple.\n\n    Args:\n    test_str (str): A string representation of a tuple with integers.\n\n    Returns:\n    tuple: A tuple of integers.\n    \"\"\"\n    # Remove parentheses and split the string by commas\n    elements = test_str.strip(\"()\").split(\",\")\n    # Convert each element to an integer and return as a tuple\n    return tuple(map(int, elements))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert tuple string to integer tuple.\n\n### Signature\ndef tuple_str_int(test_str):",
    "timestamp": "2025-10-17T18:51:20.202468",
    "response_time": "2.26",
    "context": "{\"function_name\": \"tuple_str_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 786,
    "solution": "```python\n===START===\nfrom bisect import bisect_right\n\ndef right_insertion(a, x):\n    \"\"\"\n    Locate the rightmost insertion point for a specified value in sorted order.\n    \n    Parameters:\n    a (list): A sorted list of elements.\n    x (any): The value to find the right insertion point for.\n    \n    Returns:\n    int: The index where the value x should be inserted to maintain sorted order.\n    \"\"\"\n    return bisect_right(a, x)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\n### Signature\ndef right_insertion(a, x):",
    "timestamp": "2025-10-17T18:51:21.607548",
    "response_time": "1.40",
    "context": "{\"function_name\": \"right_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 787,
    "solution": "```python\n===START===\nimport re\n\ndef text_match_three(text):\n    # Define the regex pattern for 'a' followed by exactly three 'b's\n    pattern = r'ab{3}'\n    # Use re.search to find if the pattern exists in the text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by three 'b'.\n\n### Signature\ndef text_match_three(text):",
    "timestamp": "2025-10-17T18:51:23.128213",
    "response_time": "1.51",
    "context": "{\"function_name\": \"text_match_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 788,
    "solution": "```python\n===START===\ndef new_tuple(test_list, test_str):\n    \"\"\"\n    This function takes a list and a string as input and returns a new tuple\n    containing the elements of the list followed by the characters of the string.\n    \"\"\"\n    # Convert the string into a tuple of its characters\n    str_tuple = tuple(test_str)\n    \n    # Combine the list and the string tuple into a new tuple\n    result_tuple = tuple(test_list) + str_tuple\n    \n    return result_tuple\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to create a new tuple from the given string and list.\n\n### Signature\ndef new_tuple(test_list, test_str):",
    "timestamp": "2025-10-17T18:51:25.427785",
    "response_time": "2.29",
    "context": "{\"function_name\": \"new_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 790,
    "solution": "```python\n===START===\ndef even_position(nums):\n    for i in range(0, len(nums), 2):  # Iterate over even indices\n        if nums[i] % 2 != 0:  # Check if the number at the even index is not even\n            return False\n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether every even index contains even numbers of a given list.\n\n### Signature\ndef even_position(nums):",
    "timestamp": "2025-10-17T18:51:27.100646",
    "response_time": "1.67",
    "context": "{\"function_name\": \"even_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 791,
    "solution": "```python\n===START===\ndef remove_nested(test_tup):\n    \"\"\"\n    This function removes all nested tuples from the given tuple.\n    \n    Parameters:\n    test_tup (tuple): The input tuple which may contain nested tuples.\n    \n    Returns:\n    tuple: A tuple with all nested tuples removed.\n    \"\"\"\n    # Filter out elements that are tuples\n    return tuple(item for item in test_tup if not isinstance(item, tuple))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove tuples from the given tuple.\n\n### Signature\ndef remove_nested(test_tup):",
    "timestamp": "2025-10-17T18:51:28.859454",
    "response_time": "1.75",
    "context": "{\"function_name\": \"remove_nested\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 792,
    "solution": "```python\n===START===\ndef count_list(input_list):\n    \"\"\"\n    This function counts the number of lists within the given input list.\n    \n    :param input_list: A list that may contain other lists\n    :return: The count of lists within the input list\n    \"\"\"\n    if not isinstance(input_list, list):\n        raise ValueError(\"Input must be a list\")\n    \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of lists in a given number of lists.\n\n### Signature\ndef count_list(input_list):",
    "timestamp": "2025-10-17T18:51:30.842814",
    "response_time": "1.98",
    "context": "{\"function_name\": \"count_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 793,
    "solution": "```python\n===START===\ndef last(arr, x):\n    \"\"\"\n    Finds the last position of an element x in a sorted array arr.\n    \n    Parameters:\n    arr (list): A sorted list of elements.\n    x (any): The element to find the last position of.\n    \n    Returns:\n    int: The last position (0-based index) of the element x in the array, or -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1  # Continue searching in the right half\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the last position of an element in a sorted array.\n\n### Signature\ndef last(arr,x):",
    "timestamp": "2025-10-17T18:51:33.512859",
    "response_time": "2.66",
    "context": "{\"function_name\": \"last\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 794,
    "solution": "```python\n===START===\nimport re\n\ndef text_starta_endb(text):\n    # Use regex to match a string that has an 'a' followed by anything, ending in 'b'\n    pattern = r'a.*b$'\n    return bool(re.match(pattern, text))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n### Signature\ndef text_starta_endb(text):",
    "timestamp": "2025-10-17T18:51:35.397537",
    "response_time": "1.88",
    "context": "{\"function_name\": \"text_starta_endb\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 796,
    "solution": "```python\n===START===\ndef return_sum(dict):\n    return sum(dict.values())\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite function to find the sum of all items in the given dictionary.\n\n### Signature\ndef return_sum(dict):",
    "timestamp": "2025-10-17T18:51:36.391993",
    "response_time": "0.99",
    "context": "{\"function_name\": \"return_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 797,
    "solution": "```python\n===START===\ndef sum_odd(n):\n    l, r = n\n    # Ensure l and r are integers and l <= r\n    if not isinstance(l, int) or not isinstance(r, int) or l > r:\n        raise ValueError(\"Input must be a tuple of two integers (l, r) where l <= r.\")\n    \n    # Calculate the sum of odd numbers in the range [l, r]\n    return sum(i for i in range(l, r + 1) if i % 2 != 0)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\n### Signature\ndef sum_odd(n):",
    "timestamp": "2025-10-17T18:51:38.444995",
    "response_time": "2.05",
    "context": "{\"function_name\": \"sum_in_range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 798,
    "solution": "```python\n===START===\ndef _sum(arr):\n    \"\"\"\n    This function takes an array of numbers as input and returns the sum of its elements.\n    \n    :param arr: List of numbers\n    :return: Sum of the numbers in the array\n    \"\"\"\n    return sum(arr)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of an array.\n\n### Signature\ndef _sum(arr):",
    "timestamp": "2025-10-17T18:51:39.995982",
    "response_time": "1.54",
    "context": "{\"function_name\": \"_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 799,
    "solution": "```python\n===START===\ndef left_rotate(n, d):\n    # Ensure n is within 32-bit unsigned integer range\n    n = n & 0xFFFFFFFF\n    \n    # Perform left rotation\n    rotated = ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n    \n    return rotated\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n### Signature\ndef left_rotate(n,d):",
    "timestamp": "2025-10-17T18:51:41.308966",
    "response_time": "1.31",
    "context": "{\"function_name\": \"left_rotate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 800,
    "solution": "```python\n===START===\ndef remove_all_spaces(text):\n    return text.replace(\" \", \"\")\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from a string.\n\n### Signature\ndef remove_all_spaces(text):",
    "timestamp": "2025-10-17T18:51:42.119023",
    "response_time": "0.80",
    "context": "{\"function_name\": \"remove_all_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 801,
    "solution": "```python\n===START===\ndef test_three_equal(x, y, z):\n    \"\"\"\n    Counts the number of equal numbers among three given integers.\n    \n    Args:\n    x (int): First integer.\n    y (int): Second integer.\n    z (int): Third integer.\n    \n    Returns:\n    int: The count of equal numbers.\n    \"\"\"\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of equal numbers from three given integers.\n\n### Signature\ndef test_three_equal(x,y,z):",
    "timestamp": "2025-10-17T18:51:43.949956",
    "response_time": "1.82",
    "context": "{\"function_name\": \"test_three_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 802,
    "solution": "```python\n===START===\ndef count_rotation(arr):\n    \"\"\"\n    This function counts the number of rotations required to generate a sorted array.\n    It assumes the array is a rotated sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0  # If the array is empty, no rotations are needed.\n\n    # Find the index of the minimum element in the array\n    # The index of the minimum element is equal to the number of rotations\n    low, high = 0, n - 1\n\n    while low <= high:\n        # If the array is already sorted, the minimum element is at index 0\n        if arr[low] <= arr[high]:\n            return low\n\n        mid = (low + high) // 2\n        next_idx = (mid + 1) % n\n        prev_idx = (mid - 1 + n) % n\n\n        # Check if the mid element is the minimum element\n        if arr[mid] <= arr[next_idx] and arr[mid] <= arr[prev_idx]:\n            return mid\n\n        # Decide whether to go to the left half or the right half\n        if arr[mid] <= arr[high]:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return 0  # Default return, though this line should not be reached for valid input\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n### Signature\ndef count_rotation(arr):",
    "timestamp": "2025-10-17T18:51:50.310923",
    "response_time": "6.35",
    "context": "{\"function_name\": \"count_rotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 803,
    "solution": "```python\n===START===\nimport math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    return sqrt_n * sqrt_n == n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\n### Signature\ndef is_perfect_square(n) :",
    "timestamp": "2025-10-17T18:51:51.436194",
    "response_time": "1.12",
    "context": "{\"function_name\": \"is_perfect_square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 804,
    "solution": "```python\n===START===\ndef is_product_even(arr):\n    \"\"\"\n    This function checks whether the product of numbers in a list is even or not.\n    If the product is even, it returns True. Otherwise, it returns False.\n    \"\"\"\n    for num in arr:\n        # If any number in the list is even, the product will be even\n        if num % 2 == 0:\n            return True\n    # If no even number is found, the product is odd\n    return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the product of numbers in a list is even or not.\n\n### Signature\ndef is_product_even(arr):",
    "timestamp": "2025-10-17T18:51:53.357703",
    "response_time": "1.92",
    "context": "{\"function_name\": \"is_product_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 805,
    "solution": "```python\n===START===\ndef max_sum_list(lists):\n    if not lists:  # Handle the case where the input list is empty\n        return None\n    \n    # Find the list with the maximum sum\n    return max(lists, key=lambda x: sum(x) if isinstance(x, list) else float('-inf'))\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\n### Signature\ndef max_sum_list(lists):",
    "timestamp": "2025-10-17T18:51:55.445077",
    "response_time": "2.08",
    "context": "{\"function_name\": \"max_sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 806,
    "solution": "```python\n===START===\ndef max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find maximum run of uppercase characters in the given string.\n\n### Signature\ndef max_run_uppercase(test_str):",
    "timestamp": "2025-10-17T18:51:56.804930",
    "response_time": "1.35",
    "context": "{\"function_name\": \"max_run_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 807,
    "solution": "===START===\ndef first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the first odd number in a given list of numbers.\n\n### Signature\ndef first_odd(nums):",
    "timestamp": "2025-10-17T18:51:57.613627",
    "response_time": "0.80",
    "context": "{\"function_name\": \"first_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 808,
    "solution": "```python\n===START===\ndef check_K(test_tup, K):\n    \"\"\"\n    Function to check if the given tuples contain the value K or not.\n\n    Parameters:\n    test_tup (tuple): The tuple to check.\n    K (any): The value to search for in the tuple.\n\n    Returns:\n    bool: True if K is found in the tuple, False otherwise.\n    \"\"\"\n    return K in test_tup\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given tuples contain the k or not.\n\n### Signature\ndef check_K(test_tup, K):",
    "timestamp": "2025-10-17T18:51:59.502741",
    "response_time": "1.88",
    "context": "{\"function_name\": \"check_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 809,
    "solution": "```python\n===START===\ndef check_smaller(test_tup1, test_tup2):\n    # Check if both tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    # Check if each element in test_tup2 is smaller than the corresponding element in test_tup1\n    for a, b in zip(test_tup1, test_tup2):\n        if b >= a:\n            return False\n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n### Signature\ndef check_smaller(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:52:01.263730",
    "response_time": "1.75",
    "context": "{\"function_name\": \"check_smaller\"}"
  }
]