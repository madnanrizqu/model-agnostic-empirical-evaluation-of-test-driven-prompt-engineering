[
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 2,
        "solution": "===START===\nfrom typing import List\n\ndef similar_elements(test_tup1: List, test_tup2: List) -> str:\n    # Convert lists to sets for efficient intersection operation\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find common elements using set intersection\n    common_elements = set1.intersection(set2)\n    \n    # Convert result back to list and sort for consistent output\n    result = sorted(list(common_elements))\n    \n    # Return formatted string of shared elements\n    return str(result)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
        "timestamp": "2025-08-13T11:12:52.411873",
        "response_time": "4.11",
        "context": "{\"function_name\": \"similar_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 3,
        "solution": "===START===\ndef is_not_prime(n):\n    # Handle edge cases\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    \n    # Check if n is divisible by any number from 2 to sqrt(n)\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    \n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
        "timestamp": "2025-08-13T11:12:55.325698",
        "response_time": "2.91",
        "context": "{\"function_name\": \"is_not_prime\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 4,
        "solution": "===START===\nimport heapq\nfrom typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> str:\n    # Convert numbers to negative for max heap behavior\n    neg_nums = [-x for x in nums]\n    # Create heap from negative numbers\n    heapq.heapify(neg_nums)\n    \n    # Get n largest by getting n smallest negative numbers\n    result = []\n    for _ in range(min(n, len(nums))):\n        result.append(-heapq.heappop(neg_nums))\n    \n    # Return result as comma-separated string\n    return ','.join(map(str, result))\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
        "timestamp": "2025-08-13T11:12:59.543035",
        "response_time": "4.21",
        "context": "{\"function_name\": \"heap_queue_largest\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 6,
        "solution": "===START===\ndef is_Power_Of_Two(x):\n    # Count the number of set bits in x using bit manipulation\n    # For numbers that differ at exactly one bit position, \n    # their XOR should have exactly one bit set (i.e., be a power of 2)\n    \n    # If x is 0 or negative, it's not a power of 2\n    if x <= 0:\n        return False\n        \n    # Check if x has exactly one bit set\n    # A power of 2 has the property that x & (x-1) is 0\n    # Because a power of 2 has only one 1 bit, and x-1 has all 1s after that bit\n    return (x & (x-1)) == 0\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
        "timestamp": "2025-08-13T11:13:03.699314",
        "response_time": "4.15",
        "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 7,
        "solution": "===START===\nimport re\nfrom typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    # Use regex to find all words (sequences of letters) that are 4 or more characters long\n    pattern = r'\\b[a-zA-Z]{4,}\\b'\n    words = re.findall(pattern, text)\n    return words\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
        "timestamp": "2025-08-13T11:13:07.353621",
        "response_time": "3.65",
        "context": "{\"function_name\": \"find_char_long\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 8,
        "solution": "===START===\nfrom typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n    Returns a list containing squares of individual elements from the input list\n    \n    Args:\n        nums: List of integers\n        \n    Returns:\n        List of integers containing squares of input elements\n    \"\"\"\n    return [num * num for num in nums]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
        "timestamp": "2025-08-13T11:13:10.608492",
        "response_time": "3.25",
        "context": "{\"function_name\": \"square_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 9,
        "solution": "===START===\ndef find_Rotations(str):\n    if not str:\n        return 0\n    \n    n = len(str)\n    if n <= 1:\n        return 0\n        \n    # Create concatenated string to handle rotations\n    temp = str + str\n    \n    # Start from position 1 since we need rotations > 0\n    for i in range(1, n):\n        # Check if substring matches original string\n        if temp[i:i+n] == str:\n            return i\n            \n    return n\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
        "timestamp": "2025-08-13T11:13:15.441333",
        "response_time": "4.83",
        "context": "{\"function_name\": \"find_Rotations\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 11,
        "solution": "===START===\ndef remove_Occ(s, ch):\n    # Find first occurrence\n    first = s.find(ch)\n    \n    # If character not found, return original string\n    if first == -1:\n        return s\n        \n    # Convert to list for easier manipulation\n    s_list = list(s)\n    \n    # Remove first occurrence\n    s_list.pop(first)\n    \n    # Find last occurrence in remaining string\n    # Convert back to string to search from end\n    remaining = ''.join(s_list)\n    last = remaining.rfind(ch)\n    \n    # If no second occurrence found, return string with just first removal\n    if last == -1:\n        return remaining\n        \n    # Remove last occurrence and return final string\n    s_list = list(remaining)\n    s_list.pop(last)\n    return ''.join(s_list)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
        "timestamp": "2025-08-13T11:13:19.690645",
        "response_time": "4.24",
        "context": "{\"function_name\": \"remove_Occ\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 12,
        "solution": "===START===\nfrom typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    # Calculate row sums and create pairs of (sum, row)\n    row_sums = [(sum(row), i, row) for i, row in enumerate(M)]\n    \n    # Sort based on row sums\n    row_sums.sort()\n    \n    # Return sorted matrix by extracting rows in sorted order\n    return [row for _, _, row in row_sums]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
        "timestamp": "2025-08-13T11:13:23.245470",
        "response_time": "3.55",
        "context": "{\"function_name\": \"sort_matrix\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 14,
        "solution": "===START===\ndef find_Volume(l,b,h):\n    \"\"\"\n    Calculate the volume of a triangular prism\n    \n    Args:\n        l (float): length of the triangular prism\n        b (float): base of the triangular face\n        h (float): height of the triangular face\n    \n    Returns:\n        float: volume of the triangular prism\n    \"\"\"\n    # Volume = (1/2 * base * height) * length\n    # First calculate area of triangle\n    triangle_area = 0.5 * b * h\n    # Multiply by length to get volume\n    volume = triangle_area * l\n    return volume\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
        "timestamp": "2025-08-13T11:13:26.800408",
        "response_time": "3.55",
        "context": "{\"function_name\": \"find_Volume\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 16,
        "solution": "===START===\nimport re\n\ndef text_lowercase_underscore(text):\n    # Pattern matches one or more sequences of lowercase letters joined by underscores\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
        "timestamp": "2025-08-13T11:13:29.784180",
        "response_time": "2.98",
        "context": "{\"function_name\": \"text_lowercase_underscore\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 17,
        "solution": "===START===\ndef square_perimeter(a):\n    return 4 * a\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
        "timestamp": "2025-08-13T11:13:32.519243",
        "response_time": "2.73",
        "context": "{\"function_name\": \"square_perimeter\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 18,
        "solution": "===START===\ndef str_to_list(string):\n    # If either string is empty, return empty string\n    if not string:\n        return \"\"\n    \n    # Convert string to list of characters\n    result = []\n    for char in string:\n        result.append(char)\n    \n    return ''.join(result)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
        "timestamp": "2025-08-13T11:13:36.392756",
        "response_time": "3.87",
        "context": "{\"function_name\": \"remove_dirty_chars\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 19,
        "solution": "===START===\nfrom typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    # Using set to track unique numbers\n    seen = set()\n    \n    # Iterate through array\n    for num in arraynums:\n        # If number already in set, we found a duplicate\n        if num in seen:\n            return True\n        # Add new number to set\n        seen.add(num)\n    \n    # No duplicates found\n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
        "timestamp": "2025-08-13T11:13:40.850123",
        "response_time": "4.46",
        "context": "{\"function_name\": \"test_duplicate\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 20,
        "solution": "===START===\ndef is_woodall(x):\n    \"\"\"\n    Check if a number is a Woodall number.\n    A Woodall number is a number of the form n * 2^n - 1, where n is a positive integer.\n    \n    Args:\n        x (int): The number to check\n        \n    Returns:\n        bool: True if x is a Woodall number, False otherwise\n    \"\"\"\n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == x:\n            return True\n        if woodall > x:\n            return False\n        n += 1\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
        "timestamp": "2025-08-13T11:13:46.293924",
        "response_time": "5.44",
        "context": "{\"function_name\": \"is_woodall\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 56,
        "solution": "===START===\ndef rev(num):\n    # Convert number to string to reverse it\n    num_str = str(num)\n    # Reverse the string and convert back to integer\n    reversed_num = int(num_str[::-1])\n    \n    # Check if number is one less than twice its reverse\n    return num == (2 * reversed_num - 1)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
        "timestamp": "2025-08-13T11:13:49.244556",
        "response_time": "2.95",
        "context": "{\"function_name\": \"check\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 57,
        "solution": "===START===\ndef find_Max_Num(arr):\n    # Convert integers to strings for easier comparison\n    arr = [str(num) for num in arr]\n    \n    # Custom comparison function for sorting\n    def compare(a, b):\n        if a + b > b + a:\n            return -1\n        elif a + b < b + a:\n            return 1\n        return 0\n    \n    # Sort using custom comparison\n    from functools import cmp_to_key\n    arr.sort(key=cmp_to_key(compare))\n    \n    # Join the sorted array to form the largest number\n    result = ''.join(arr)\n    \n    # Remove leading zeros if any and handle case of all zeros\n    result = result.lstrip('0')\n    return result if result else '0'\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
        "timestamp": "2025-08-13T11:13:55.654777",
        "response_time": "6.41",
        "context": "{\"function_name\": \"find_Max_Num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 58,
        "solution": "===START===\ndef opposite_Signs(x, y):\n    # If product is negative, numbers have opposite signs\n    # If product is positive or zero, numbers have same sign\n    return (x * y) < 0\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
        "timestamp": "2025-08-13T11:13:58.485113",
        "response_time": "2.83",
        "context": "{\"function_name\": \"opposite_Signs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 59,
        "solution": "===START===\ndef is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    Formula: n * (3n - 2)\n    \n    Args:\n        n (int): Position of the octagonal number to find (must be positive)\n    \n    Returns:\n        int: The nth octagonal number\n    \"\"\"\n    return n * (3 * n - 2)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
        "timestamp": "2025-08-13T11:14:00.897202",
        "response_time": "2.41",
        "context": "{\"function_name\": \"is_octagonal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 61,
        "solution": "===START===\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    # For each possible substring\n    for i in range(n):\n        for j in range(i, n):\n            substr = s[i:j+1]\n            length = len(substr)\n            \n            # Calculate sum of digits in substring\n            digit_sum = sum(int(c) for c in substr)\n            \n            # Check if sum equals length\n            if digit_sum == length:\n                count += 1\n    \n    return str(count)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
        "timestamp": "2025-08-13T11:14:04.438707",
        "response_time": "3.54",
        "context": "{\"function_name\": \"count_Substrings\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 62,
        "solution": "===START===\ndef smallest_num(xs):\n    if not xs:  # Handle empty list case\n        return None\n    \n    smallest = xs[0]  # Start with first element\n    for x in xs:\n        if x < smallest:\n            smallest = x\n            \n    return smallest\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
        "timestamp": "2025-08-13T11:14:06.793179",
        "response_time": "2.35",
        "context": "{\"function_name\": \"smallest_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 63,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    if not test_list or len(test_list) < 2:\n        return 0\n        \n    # Extract all numbers from tuples into a single list\n    all_numbers = []\n    for tup in test_list:\n        all_numbers.extend(tup)\n    \n    if not all_numbers:\n        return 0\n        \n    # Find max difference by subtracting min from max\n    return max(all_numbers) - min(all_numbers)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
        "timestamp": "2025-08-13T11:14:10.343506",
        "response_time": "3.55",
        "context": "{\"function_name\": \"max_difference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 64,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple]) -> List[Tuple]:\n    \"\"\"\n    Sort a list of tuples based on the second value of each tuple.\n    \n    Args:\n        subjectmarks: List of tuples where each tuple contains two values\n        \n    Returns:\n        List of tuples sorted by the second value in ascending order\n    \"\"\"\n    return sorted(subjectmarks, key=lambda x: x[1])\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
        "timestamp": "2025-08-13T11:14:13.096201",
        "response_time": "2.75",
        "context": "{\"function_name\": \"subject_marks\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 65,
        "solution": "===START===\nfrom typing import Union, List\n\ndef recursive_list_sum(data_list: List[Union[int, float, list]]) -> Union[int, float]:\n    \"\"\"\n    Recursively flattens a nested list and returns the sum of all numeric elements.\n    \n    Args:\n        data_list: A list that may contain numbers and/or nested lists\n        \n    Returns:\n        The sum of all numeric elements in the flattened list\n    \"\"\"\n    total = 0\n    for element in data_list:\n        if isinstance(element, (list, tuple)):\n            total += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            total += element\n    return total\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
        "timestamp": "2025-08-13T11:14:17.984244",
        "response_time": "4.89",
        "context": "{\"function_name\": \"recursive_list_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 66,
        "solution": "===START===\nfrom typing import List\n\ndef pos_count(list: List[int]) -> int:\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
        "timestamp": "2025-08-13T11:14:19.950386",
        "response_time": "1.96",
        "context": "{\"function_name\": \"pos_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 67,
        "solution": "===START===\ndef bell_number(n):\n    \"\"\"\n    Calculate the Bell number for a given n, which represents the number of ways\n    to partition a set of n elements.\n    Uses Bell triangle (similar to Pascal's triangle) to compute the result.\n    \"\"\"\n    # Create first row with first Bell number\n    bell = [[1]]\n    \n    # Generate Bell triangle\n    for i in range(n):\n        # Create new row starting with last number of previous row\n        curr_row = [bell[i][i]]\n        \n        # Fill in the rest of the row\n        for j in range(i + 1):\n            # Get next number using Bell triangle property:\n            # Next number is sum of number above and number to the left\n            curr_row.append(curr_row[j] + bell[i][j])\n            \n        bell.append(curr_row)\n    \n    # Return first number in last row\n    return bell[n][0]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
        "timestamp": "2025-08-13T11:14:25.908694",
        "response_time": "5.95",
        "context": "{\"function_name\": \"bell_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 68,
        "solution": "===START===\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    # Check if array has 0 or 1 element - it's always monotonic\n    if len(A) <= 1:\n        return True\n        \n    # Check for both increasing and decreasing monotonic conditions\n    increasing = decreasing = True\n    \n    # Compare adjacent elements\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            increasing = False\n        if A[i] > A[i-1]:\n            decreasing = False\n        # If neither increasing nor decreasing, return False\n        if not increasing and not decreasing:\n            return False\n            \n    # Return True if array is either increasing or decreasing\n    return increasing or decreasing\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
        "timestamp": "2025-08-13T11:14:31.342359",
        "response_time": "5.43",
        "context": "{\"function_name\": \"is_Monotonic\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 69,
        "solution": "===START===\nfrom typing import List\n\ndef is_sublist(l: List, s: List) -> bool:\n    # Handle empty sublist case\n    if not s:\n        return True\n        \n    # If sublist is longer than main list, it can't be a sublist\n    if len(s) > len(l):\n        return False\n        \n    # Check each possible starting position in the main list\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n            \n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
        "timestamp": "2025-08-13T11:14:36.576542",
        "response_time": "5.22",
        "context": "{\"function_name\": \"is_sublist\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 70,
        "solution": "===START===\nfrom typing import List, Tuple, Any\n\ndef find_equal_tuple(Input: List[Tuple[Any, ...]]) -> str:\n    if not Input:\n        return \"Empty input\"\n    \n    # Get length of first tuple\n    first_len = len(Input[0])\n    \n    # Compare length of all tuples with first tuple\n    for tup in Input[1:]:\n        if len(tup) != first_len:\n            return \"Not Equal\"\n    \n    return \"Equal\"\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
        "timestamp": "2025-08-13T11:14:39.784591",
        "response_time": "3.21",
        "context": "{\"function_name\": \"get_equal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 71,
        "solution": "===START===\nfrom typing import List\n\ndef comb_sort(nums: List) -> List:\n    \"\"\"\n    Implementation of comb sort algorithm to sort a list of elements.\n    Comb sort improves on bubble sort by eliminating small values near the end of the list.\n    \n    Args:\n        nums: List of comparable elements to be sorted\n        \n    Returns:\n        Sorted list in ascending order\n    \"\"\"\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        # Update gap value\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n            \n        # Compare elements with current gap\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n                \n    return nums\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
        "timestamp": "2025-08-13T11:14:45.612744",
        "response_time": "5.83",
        "context": "{\"function_name\": \"comb_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 72,
        "solution": "===START===\ndef dif_Square(n):\n    # For a number to be difference of squares\n    # n = a\u00b2 - b\u00b2 where a and b are integers\n    # n = (a+b)(a-b)\n    # So n should be product of two numbers with same parity (both odd or both even)\n    \n    # Handle negative numbers\n    if n < 0:\n        return \"NO\"\n    \n    # Handle 0\n    if n == 0:\n        return \"YES\"\n        \n    # Find all factors of n\n    factors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if i != n//i:\n                factors.append(n//i)\n    \n    # Sort factors\n    factors.sort()\n    \n    # Check each pair of factors\n    for i in range(len(factors)):\n        for j in range(i, len(factors)):\n            # If sum of factors is even\n            if (factors[i] + factors[j]) % 2 == 0:\n                # Calculate a and b\n                a = (factors[j] + factors[i]) // 2\n                b = (factors[j] - factors[i]) // 2\n                # If a and b are integers and a\u00b2 - b\u00b2 equals n\n                if a*a - b*b == n:\n                    return \"YES\"\n    \n    return \"NO\"\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
        "timestamp": "2025-08-13T11:14:52.647966",
        "response_time": "7.03",
        "context": "{\"function_name\": \"dif_Square\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 74,
        "solution": "===START===\ndef is_samepatterns(colors, patterns):\n    # Check if lengths are different\n    if len(colors) != len(patterns):\n        return \"false\"\n    \n    # Create dictionaries to store mappings\n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    # Check each pair of elements\n    for c, p in zip(colors, patterns):\n        # If color already mapped\n        if c in color_to_pattern:\n            # Check if it maps to same pattern\n            if color_to_pattern[c] != p:\n                return \"false\"\n        # If pattern already mapped\n        elif p in pattern_to_color:\n            # Check if it maps to same color\n            if pattern_to_color[p] != c:\n                return \"false\"\n        else:\n            # Create new mappings\n            color_to_pattern[c] = p\n            pattern_to_color[p] = c\n    \n    return \"true\"\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
        "timestamp": "2025-08-13T11:14:58.144701",
        "response_time": "5.49",
        "context": "{\"function_name\": \"is_samepatterns\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 75,
        "solution": "===START===\ndef find_tuples(test_list, K):\n    # Filter tuples where all elements are divisible by K\n    result = [tup for tup in test_list if all(num % K == 0 for num in tup)]\n    return str(result)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
        "timestamp": "2025-08-13T11:14:59.986417",
        "response_time": "1.84",
        "context": "{\"function_name\": \"find_tuples\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 77,
        "solution": "===START===\ndef is_Diff(n):\n    # Convert number to string to process digits\n    num_str = str(abs(n))\n    \n    # Initialize sums for even and odd positions\n    even_sum = 0\n    odd_sum = 0\n    \n    # Calculate alternating sum of digits\n    for i in range(len(num_str)):\n        if i % 2 == 0:\n            even_sum += int(num_str[i])\n        else:\n            odd_sum += int(num_str[i])\n            \n    # A number is divisible by 11 if the difference between\n    # sum of alternating digits is either 0 or divisible by 11\n    diff = abs(even_sum - odd_sum)\n    \n    return diff == 0 or diff % 11 == 0\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
        "timestamp": "2025-08-13T11:15:04.609062",
        "response_time": "4.62",
        "context": "{\"function_name\": \"is_Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 79,
        "solution": "===START===\ndef word_len(s: str) -> bool:\n    \"\"\"\n    Check if the length of the word is odd\n    Args:\n        s: input string\n    Returns:\n        True if word length is odd, False otherwise\n    \"\"\"\n    return len(s) % 2 == 1\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
        "timestamp": "2025-08-13T11:15:07.246798",
        "response_time": "2.64",
        "context": "{\"function_name\": \"word_len\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 80,
        "solution": "===START===\ndef tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    A tetrahedral number is a figurate number that represents a pyramid with a triangular base and three sides.\n    The formula is: T(n) = n(n+1)(n+2)/6\n    \"\"\"\n    if n < 0:\n        return 0\n    return (n * (n + 1) * (n + 2)) // 6\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
        "timestamp": "2025-08-13T11:15:10.263928",
        "response_time": "3.01",
        "context": "{\"function_name\": \"tetrahedral_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 82,
        "solution": "===START===\nimport math\n\ndef volume_sphere(r):\n    \"\"\"\n    Calculate the volume of a sphere given its radius\n    Args:\n        r (float): radius of the sphere\n    Returns:\n        float: volume of the sphere\n    \"\"\"\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
        "timestamp": "2025-08-13T11:15:12.394129",
        "response_time": "2.13",
        "context": "{\"function_name\": \"volume_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 83,
        "solution": "===START===\ndef get_Char(strr):\n    # Calculate sum of ASCII values of all characters\n    ascii_sum = sum(ord(c) for c in strr)\n    \n    # Take modulo 26 to get value between 0-25\n    mod_value = ascii_sum % 26\n    \n    # Convert to corresponding character (a=0, b=1, etc)\n    # Add 97 to get lowercase ASCII value\n    result_char = chr(mod_value + 97)\n    \n    return result_char\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
        "timestamp": "2025-08-13T11:15:15.952725",
        "response_time": "3.56",
        "context": "{\"function_name\": \"get_Char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 84,
        "solution": "===START===\ndef sequence(n):\n    if n <= 0:\n        return 0\n    \n    # First two numbers are always 1\n    if n <= 2:\n        return 1\n        \n    # Create array to store sequence\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = 1\n    newman_conway[2] = 1\n    \n    # Generate sequence up to nth number\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i-1]] + newman_conway[i - newman_conway[i-1]]\n    \n    return newman_conway[n]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
        "timestamp": "2025-08-13T11:15:20.228238",
        "response_time": "4.24",
        "context": "{\"function_name\": \"sequence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 85,
        "solution": "===START===\nimport math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius\n    Args:\n        r (float): radius of the sphere\n    Returns:\n        float: surface area of the sphere\n    \"\"\"\n    return 4 * math.pi * r * r\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
        "timestamp": "2025-08-13T11:15:22.949451",
        "response_time": "2.72",
        "context": "{\"function_name\": \"surfacearea_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 86,
        "solution": "===START===\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n    A centered hexagonal number is a centered figurate number that represents a hexagon \n    with a dot in the center and all other dots surrounding the center in a hexagonal lattice.\n    Formula: 3n^2 - 3n + 1\n    \n    Args:\n        n (int): The position of the centered hexagonal number to find (n >= 1)\n    \n    Returns:\n        int: The nth centered hexagonal number\n    \"\"\"\n    return 3 * n * n - 3 * n + 1\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
        "timestamp": "2025-08-13T11:15:26.921434",
        "response_time": "3.97",
        "context": "{\"function_name\": \"centered_hexagonal_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet",
        "dataset_row_id": 87,
        "solution": "===START===\nfrom typing import Dict, Any\n\ndef merge_dictionaries_three(dict1: Dict[Any, Any], dict2: Dict[Any, Any], dict3: Dict[Any, Any]) -> Dict[Any, Any]:\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
        "timestamp": "2025-08-13T11:15:29.828285",
        "response_time": "2.90",
        "context": "{\"function_name\": \"merge_dictionaries_three\"}"
    }
]