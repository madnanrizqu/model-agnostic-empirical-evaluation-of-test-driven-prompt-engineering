[
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 2,
    "solution": "def similar_elements(test_tup1, test_tup2):\n    # Convert lists to sets for efficient comparison\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find intersection of both sets\n    common_elements = list(set1.intersection(set2))\n    \n    return common_elements",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T19:06:31.678834",
    "response_time": "3.49",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 3,
    "solution": "def is_not_prime(n):\n    # Handle numbers less than 2\n    if n < 2:\n        return True\n    \n    # Check for divisibility from 2 to square root of n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    \n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
    "timestamp": "2025-10-17T19:06:35.642452",
    "response_time": "3.96",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 4,
    "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return sorted(heapq.nlargest(n, nums), reverse=True)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
    "timestamp": "2025-10-17T19:06:37.807952",
    "response_time": "2.16",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 6,
    "solution": "def differ_At_One_Bit_Pos(x):\n    # Check if x is less than or equal to 0\n    if x <= 0:\n        return False\n    \n    # Count the number of set bits (1s) in the binary representation\n    # If it's a power of 2, there should be exactly one set bit\n    return (x & (x - 1)) == 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
    "timestamp": "2025-10-17T19:06:41.406179",
    "response_time": "3.60",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 7,
    "solution": "import re\n\ndef find_char_long(text):\n    # Use regex to find all words with 4 or more characters\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
    "timestamp": "2025-10-17T19:06:43.017495",
    "response_time": "1.61",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 8,
    "solution": "def square_nums(nums):\n    return [num * num for num in nums]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
    "timestamp": "2025-10-17T19:06:45.452652",
    "response_time": "2.43",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 9,
    "solution": "def find_Rotations(str):\n    if not str:\n        return 0\n    \n    n = len(str)\n    if n == 1:\n        return 1\n        \n    # Create concatenated string\n    temp = str + str\n    \n    for i in range(1, n):\n        # Get substring of length n starting from index i\n        rotated = temp[i:i+n]\n        # If we found the original string, return number of rotations\n        if rotated == str:\n            return i\n            \n    return n",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
    "timestamp": "2025-10-17T19:06:50.158063",
    "response_time": "4.70",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 11,
    "solution": "def remove_Occ(s, ch):\n    # Find first occurrence\n    first = s.find(ch)\n    \n    # If character not found, return original string\n    if first == -1:\n        return s\n    \n    # Find last occurrence\n    last = s.rfind(ch)\n    \n    # If only one occurrence, remove it and return\n    if first == last:\n        return s[:first] + s[first+1:]\n    \n    # Remove first and last occurrence\n    return s[:first] + s[first+1:last] + s[last+1:]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
    "timestamp": "2025-10-17T19:06:54.243354",
    "response_time": "4.08",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 12,
    "solution": "def sort_matrix(M):\n    # Create a list of tuples with (row_sum, row_index, row)\n    row_sums = [(sum(row), i, row) for i, row in enumerate(M)]\n    \n    # Sort based on row sums\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Return the sorted matrix by extracting the rows in sorted order\n    return [row for _, _, row in row_sums]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
    "timestamp": "2025-10-17T19:06:58.190197",
    "response_time": "3.95",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 14,
    "solution": "def find_Volume(l,b,h):\n    # Volume of triangular prism = (1/2 * base * height) * length\n    # where base and height are of the triangle\n    # and length is the length of the prism\n    area_of_triangle = 0.5 * b * h\n    volume = area_of_triangle * l\n    return volume",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
    "timestamp": "2025-10-17T19:07:00.616078",
    "response_time": "2.42",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 16,
    "solution": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
    "timestamp": "2025-10-17T19:07:02.557044",
    "response_time": "1.94",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 17,
    "solution": "def square_perimeter(a):\n    return 4 * a",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
    "timestamp": "2025-10-17T19:07:05.090744",
    "response_time": "2.53",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 18,
    "solution": "def remove_dirty_chars(string):\n    # Convert string to list for easier manipulation\n    result = list(string)\n    return result\n\ndef remove_chars(str1, str2):\n    # Convert strings to lists\n    list1 = str_to_list(str1)\n    list2 = str_to_list(str2)\n    \n    # Create a new list with characters that are not in str2\n    result = [char for char in list1 if char not in list2]\n    \n    # Join the characters back into a string\n    return ''.join(result)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
    "timestamp": "2025-10-17T19:07:09.525431",
    "response_time": "4.43",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 19,
    "solution": "def test_duplicate(arraynums):\n    # Create a set from the array\n    # If length of set is less than array length, duplicates exist\n    return len(set(arraynums)) < len(arraynums)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
    "timestamp": "2025-10-17T19:07:11.195907",
    "response_time": "1.67",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 20,
    "solution": "def is_woodall(x):\n    \"\"\"\n    Check if a number is a Woodall number.\n    A Woodall number is a number of the form n * 2^n - 1, where n is a positive integer.\n    \"\"\"\n    if x <= 0:\n        return False\n    \n    # Try values of n starting from 1\n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == x:\n            return True\n        if woodall > x:\n            return False\n        n += 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
    "timestamp": "2025-10-17T19:07:15.099904",
    "response_time": "3.90",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 56,
    "solution": "def check(num):\n    # Convert number to string for easier reversal\n    num_str = str(num)\n    # Reverse the string and convert back to integer\n    reversed_num = int(num_str[::-1])\n    # Check if number is one less than twice its reverse\n    return num == (2 * reversed_num - 1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
    "timestamp": "2025-10-17T19:07:17.586993",
    "response_time": "2.49",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 57,
    "solution": "def find_Max_Num(arr):\n    # Convert all numbers to strings to use string comparison\n    arr = [str(num) for num in arr]\n    \n    # Custom comparison function for sorting\n    def compare(a, b):\n        if a + b > b + a:\n            return -1\n        elif a + b < b + a:\n            return 1\n        return 0\n    \n    # Sort using custom comparison\n    from functools import cmp_to_key\n    arr.sort(key=cmp_to_key(compare))\n    \n    # Join all numbers and convert to integer\n    result = ''.join(arr)\n    \n    # Handle case where result starts with 0\n    return '0' if result[0] == '0' else result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
    "timestamp": "2025-10-17T19:07:23.296770",
    "response_time": "5.71",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 58,
    "solution": "def opposite_Signs(x,y):\n    return (x < 0 and y > 0) or (x > 0 and y < 0)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
    "timestamp": "2025-10-17T19:07:25.323845",
    "response_time": "2.02",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 59,
    "solution": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    Formula: n * (3n - 2)\n    \"\"\"\n    return n * (3 * n - 2)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
    "timestamp": "2025-10-17T19:07:27.111803",
    "response_time": "1.79",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 61,
    "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    # Check all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            # Get current substring\n            substr = s[i:j+1]\n            length = len(substr)\n            \n            # Calculate sum of digits in substring\n            digit_sum = sum(int(digit) for digit in substr)\n            \n            # If sum of digits equals length of substring\n            if digit_sum == length:\n                count += 1\n                \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
    "timestamp": "2025-10-17T19:07:31.431990",
    "response_time": "4.32",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 62,
    "solution": "def smallest_num(xs):\n    if not xs:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
    "timestamp": "2025-10-17T19:07:33.766527",
    "response_time": "2.33",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 63,
    "solution": "def max_difference(test_list):\n    if not test_list or len(test_list) < 2:\n        return 0\n    \n    # Flatten the tuple list into a single list of numbers\n    flat_list = [num for tup in test_list for num in tup]\n    \n    if not flat_list:\n        return 0\n        \n    # Find the maximum difference by subtracting minimum from maximum\n    return max(flat_list) - min(flat_list)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
    "timestamp": "2025-10-17T19:07:37.382945",
    "response_time": "3.61",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 64,
    "solution": "def subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second element (index 1)\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
    "timestamp": "2025-10-17T19:07:41.304503",
    "response_time": "3.92",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 65,
    "solution": "from typing import Union, List\n\ndef recursive_list_sum(data_list: List[Union[int, float, list]]) -> Union[int, float]:\n    total = 0\n    for element in data_list:\n        if isinstance(element, (list, tuple)):\n            total += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            total += element\n    return total",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
    "timestamp": "2025-10-17T19:07:44.920304",
    "response_time": "3.61",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 66,
    "solution": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
    "timestamp": "2025-10-17T19:07:46.732032",
    "response_time": "1.81",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 67,
    "solution": "def bell_number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    \n    # Base case: Bell number for n = 0\n    bell[0][0] = 1\n    \n    # Calculate Bell numbers\n    for i in range(1, n + 1):\n        # First value in row is last value in previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Calculate remaining values in row\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
    "timestamp": "2025-10-17T19:07:50.700737",
    "response_time": "3.97",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 68,
    "solution": "def is_Monotonic(A):\n    # Check if array is monotonically increasing\n    increasing = all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n    \n    # Check if array is monotonically decreasing\n    decreasing = all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n    \n    # Return True if array is either monotonically increasing or decreasing\n    return increasing or decreasing",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
    "timestamp": "2025-10-17T19:07:54.098483",
    "response_time": "3.40",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 69,
    "solution": "def is_sublist(l, s):\n    if not s:  # empty sublist is always present\n        return True\n    \n    if len(s) > len(l):  # sublist cannot be longer than main list\n        return False\n        \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n            \n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
    "timestamp": "2025-10-17T19:07:57.237258",
    "response_time": "3.14",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 70,
    "solution": "def get_equal(Input):\n    if not Input:  # Check if input is empty\n        return True\n    \n    # Get length of first tuple\n    first_length = len(Input[0])\n    \n    # Compare length of all tuples with first tuple\n    for tup in Input:\n        if len(tup) != first_length:\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
    "timestamp": "2025-10-17T19:07:59.599609",
    "response_time": "2.36",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 71,
    "solution": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n    \n    return nums",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
    "timestamp": "2025-10-17T19:08:03.110195",
    "response_time": "3.51",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 72,
    "solution": "def dif_Square(n):\n    # For any number n, if it can be represented as difference of squares,\n    # then n = a\u00b2 - b\u00b2 where a and b are integers\n    # This can be written as n = (a+b)(a-b)\n    # So we need to find factors of n that when added and divided by 2 give an integer\n    \n    if n == 0:\n        return True  # 0 = 0\u00b2 - 0\u00b2\n        \n    # Find all factors of n\n    factors = []\n    for i in range(1, abs(n) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if -i not in factors:  # Include negative factors\n                factors.append(-i)\n    \n    # Check each pair of factors\n    for i in factors:\n        for j in factors:\n            if i * j == n:  # If they multiply to give n\n                # Check if (i+j)/2 and (i-j)/2 are both integers\n                if (i + j) % 2 == 0 and (i - j) % 2 == 0:\n                    return True\n    \n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
    "timestamp": "2025-10-17T19:08:10.151629",
    "response_time": "7.04",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 74,
    "solution": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for c, p in zip(colors, patterns):\n        # If color already mapped, check if it maps to same pattern\n        if c in color_to_pattern:\n            if color_to_pattern[c] != p:\n                return False\n        # If pattern already mapped, check if it maps to same color\n        elif p in pattern_to_color:\n            if pattern_to_color[p] != c:\n                return False\n        else:\n            # Create new mappings\n            color_to_pattern[c] = p\n            pattern_to_color[p] = c\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
    "timestamp": "2025-10-17T19:08:13.398634",
    "response_time": "3.24",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 75,
    "solution": "def find_tuples(test_list, K):\n    # Using list comprehension to filter tuples where all elements are divisible by K\n    result = [tup for tup in test_list if all(num % K == 0 for num in tup)]\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
    "timestamp": "2025-10-17T19:08:15.470178",
    "response_time": "2.07",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 77,
    "solution": "def is_Diff(n):\n    # Convert number to string to process digits\n    num_str = str(abs(n))\n    \n    # If single digit, check if it's divisible by 11\n    if len(num_str) == 1:\n        return n % 11 == 0\n    \n    # Calculate alternating sum of digits\n    odd_sum = sum(int(num_str[i]) for i in range(0, len(num_str), 2))\n    even_sum = sum(int(num_str[i]) for i in range(1, len(num_str), 2))\n    \n    # If difference is divisible by 11, number is divisible by 11\n    return (odd_sum - even_sum) % 11 == 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
    "timestamp": "2025-10-17T19:08:18.603991",
    "response_time": "3.13",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 79,
    "solution": "def word_len(s):\n    # Get the length of the word\n    length = len(s)\n    \n    # Check if length is odd\n    return length % 2 != 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
    "timestamp": "2025-10-17T19:08:19.974306",
    "response_time": "1.37",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 80,
    "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    A tetrahedral number is the sum of the first n triangular numbers.\n    Formula: T(n) = n(n+1)(n+2)/6\n    \"\"\"\n    if n < 0:\n        return 0\n    return (n * (n + 1) * (n + 2)) // 6",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
    "timestamp": "2025-10-17T19:08:22.837756",
    "response_time": "2.86",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 82,
    "solution": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n    \n    Args:\n        r (float): radius of the sphere\n        \n    Returns:\n        float: volume of the sphere\n    \"\"\"\n    return (4/3) * math.pi * r**3",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
    "timestamp": "2025-10-17T19:08:24.424967",
    "response_time": "1.58",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 83,
    "solution": "def get_Char(strr):\n    # Calculate sum of ASCII values of all characters\n    ascii_sum = sum(ord(char) for char in strr)\n    \n    # Take modulo 26 to get a value between 0 and 25\n    char_index = ascii_sum % 26\n    \n    # Convert to corresponding character (a=0, b=1, ..., z=25)\n    # Add 97 to get ASCII value of lowercase letter\n    result_char = chr(char_index + 97)\n    \n    return result_char",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
    "timestamp": "2025-10-17T19:08:28.149713",
    "response_time": "3.72",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 84,
    "solution": "def sequence(n):\n    if n <= 0:\n        return 0\n    \n    # Initialize array to store sequence values\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = 1\n    newman_conway[2] = 1\n    \n    # Generate sequence up to nth number\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i-1]] + newman_conway[i - newman_conway[i-1]]\n    \n    return newman_conway[n]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
    "timestamp": "2025-10-17T19:08:33.304861",
    "response_time": "5.15",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 85,
    "solution": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n    \n    Args:\n        r (float): radius of the sphere\n        \n    Returns:\n        float: surface area of the sphere\n    \"\"\"\n    return 4 * math.pi * r * r",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
    "timestamp": "2025-10-17T19:08:35.524602",
    "response_time": "2.22",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 86,
    "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n    A centered hexagonal number is a centered figurate number that represents a hexagon\n    with a dot in the center and all other dots surrounding the center in a hexagonal lattice.\n    Formula: 3n^2 - 3n + 1\n    \"\"\"\n    return 3 * n * n - 3 * n + 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
    "timestamp": "2025-10-17T19:08:39.731697",
    "response_time": "4.20",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 87,
    "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
    "timestamp": "2025-10-17T19:08:42.236564",
    "response_time": "2.50",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 88,
    "solution": "from collections import defaultdict\n\ndef freq_count(list1):\n    freq = defaultdict(int)\n    for item in list1:\n        freq[item] += 1\n    return dict(freq)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):",
    "timestamp": "2025-10-17T19:08:44.210244",
    "response_time": "1.97",
    "context": "{\"function_name\": \"freq_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 89,
    "solution": "def closest_num(N):\n    # If N is less than or equal to 0, return None as there's no smaller positive number\n    if N <= 0:\n        return None\n    \n    # Return N-1 as it's the closest smaller number\n    return N - 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):",
    "timestamp": "2025-10-17T19:08:46.035315",
    "response_time": "1.82",
    "context": "{\"function_name\": \"closest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 90,
    "solution": "def len_log(list1):\n    if not list1:\n        return 0\n    return len(max(list1, key=len))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):",
    "timestamp": "2025-10-17T19:08:48.280575",
    "response_time": "2.24",
    "context": "{\"function_name\": \"len_log\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 91,
    "solution": "def find_substring(str1, sub_str):\n    \"\"\"\n    Check if a substring is present in any string from a list of strings\n    \n    Args:\n        str1: List of strings to search in\n        sub_str: Substring to search for\n        \n    Returns:\n        bool: True if substring is found in any string, False otherwise\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):",
    "timestamp": "2025-10-17T19:08:51.859363",
    "response_time": "3.58",
    "context": "{\"function_name\": \"find_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 92,
    "solution": "def is_undulating(n):\n    # Convert number to string for easier digit comparison\n    num_str = str(n)\n    \n    # Undulating numbers must have at least 3 digits\n    if len(num_str) < 3:\n        return False\n    \n    # Get first two digits that should alternate\n    digit1 = num_str[0]\n    digit2 = num_str[1]\n    \n    # First two digits must be different\n    if digit1 == digit2:\n        return False\n    \n    # Check if digits alternate throughout the number\n    for i in range(len(num_str)):\n        if i % 2 == 0 and num_str[i] != digit1:\n            return False\n        if i % 2 == 1 and num_str[i] != digit2:\n            return False\n            \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):",
    "timestamp": "2025-10-17T19:08:55.332918",
    "response_time": "3.47",
    "context": "{\"function_name\": \"is_undulating\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 93,
    "solution": "def power(a, b):\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    elif b % 2 == 0:\n        temp = power(a, b//2)\n        return temp * temp\n    else:\n        temp = power(a, b//2)\n        return temp * temp * a",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):",
    "timestamp": "2025-10-17T19:08:58.714292",
    "response_time": "3.38",
    "context": "{\"function_name\": \"power\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 94,
    "solution": "def index_minimum(test_list):\n    if not test_list:\n        return None\n    return min(test_list, key=lambda x: x[1])[0]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):",
    "timestamp": "2025-10-17T19:09:00.367156",
    "response_time": "1.65",
    "context": "{\"function_name\": \"index_minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 95,
    "solution": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    return min(len(sublist) for sublist in lst)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):",
    "timestamp": "2025-10-17T19:09:01.620118",
    "response_time": "1.25",
    "context": "{\"function_name\": \"Find_Min_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 96,
    "solution": "def divisor(n):\n    if n <= 0:\n        return 0\n    \n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            # If divisors are equal, count only one\n            if i * i == n:\n                count += 1\n            else:\n                # Otherwise count both divisors\n                count += 2\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):",
    "timestamp": "2025-10-17T19:09:05.637632",
    "response_time": "4.01",
    "context": "{\"function_name\": \"divisor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 97,
    "solution": "from collections import Counter\nfrom typing import List, Dict\n\ndef frequency_lists(list1: List) -> Dict:\n    # Flatten the list using list comprehension\n    flattened = [item for sublist in list1 for item in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    # Use Counter to count frequency of each element\n    return dict(Counter(flattened))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):",
    "timestamp": "2025-10-17T19:09:07.730883",
    "response_time": "2.09",
    "context": "{\"function_name\": \"frequency_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 98,
    "solution": "from functools import reduce\nfrom operator import mul\n\ndef multiply_num(numbers):\n    if not numbers:\n        return 0\n    return reduce(mul, numbers) / len(numbers)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):",
    "timestamp": "2025-10-17T19:09:10.385019",
    "response_time": "2.65",
    "context": "{\"function_name\": \"multiply_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 99,
    "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    \n    binary = \"\"\n    num = abs(n)\n    \n    while num > 0:\n        binary = str(num % 2) + binary\n        num //= 2\n    \n    if n < 0:\n        binary = \"-\" + binary\n        \n    return binary",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):",
    "timestamp": "2025-10-17T19:09:13.905228",
    "response_time": "3.52",
    "context": "{\"function_name\": \"decimal_to_binary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 100,
    "solution": "def next_smallest_palindrome(num):\n    num += 1\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        num += 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):",
    "timestamp": "2025-10-17T19:09:15.931539",
    "response_time": "2.02",
    "context": "{\"function_name\": \"next_smallest_palindrome\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 101,
    "solution": "def kth_element(arr, k):\n    if not arr or k < 1 or k > len(arr):\n        return None\n    return arr[k-1]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):",
    "timestamp": "2025-10-17T19:09:18.336236",
    "response_time": "2.40",
    "context": "{\"function_name\": \"kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 102,
    "solution": "def snake_to_camel(word):\n    components = word.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
    "timestamp": "2025-10-17T19:09:19.964613",
    "response_time": "1.63",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 103,
    "solution": "def eulerian_num(n, m):\n    if n == 0 and m == 0:\n        return 1\n    if m < 0 or m >= n:\n        return 0\n    \n    # Using the recurrence relation for Eulerian numbers:\n    # A(n,m) = (n-m)*A(n-1,m-1) + (m+1)*A(n-1,m)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n    \n    for i in range(1, n):\n        for j in range(i + 1):\n            if j > 0:\n                dp[i][j] += (i - j + 1) * dp[i-1][j-1]\n            if j < i:\n                dp[i][j] += (j + 1) * dp[i-1][j]\n    \n    return dp[n-1][m]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):",
    "timestamp": "2025-10-17T19:09:26.409840",
    "response_time": "6.44",
    "context": "{\"function_name\": \"eulerian_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 104,
    "solution": "def sort_sublists(input_list):\n    return [sorted(sublist) for sublist in input_list]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):",
    "timestamp": "2025-10-17T19:09:27.611004",
    "response_time": "1.20",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 105,
    "solution": "def count(lst):\n    return sum(1 for item in lst if item is True)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):",
    "timestamp": "2025-10-17T19:09:29.303209",
    "response_time": "1.69",
    "context": "{\"function_name\": \"count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 106,
    "solution": "def add_lists(test_list, test_tup):\n    # Convert tuple to list\n    tup_as_list = list(test_tup)\n    \n    # Extend the list with test_list\n    tup_as_list.extend(test_list)\n    \n    # Convert back to tuple and return\n    return tuple(tup_as_list)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):",
    "timestamp": "2025-10-17T19:09:31.311602",
    "response_time": "2.01",
    "context": "{\"function_name\": \"add_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 108,
    "solution": "def merge_sorted_list(num1, num2, num3):\n    # Combine all three lists\n    merged = num1 + num2 + num3\n    # Sort the combined list\n    merged.sort()\n    return merged",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):",
    "timestamp": "2025-10-17T19:09:33.672937",
    "response_time": "2.36",
    "context": "{\"function_name\": \"merge_sorted_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 109,
    "solution": "def odd_Equivalent(s,n):\n    count = 0\n    length = len(s)\n    \n    # Check n rotations\n    for i in range(n):\n        # Rotate string by i positions\n        rotated = s[i:] + s[:i]\n        # Convert binary string to integer\n        value = int(rotated, 2)\n        # Check if value is odd\n        if value % 2 == 1:\n            count += 1\n            \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):",
    "timestamp": "2025-10-17T19:09:36.829974",
    "response_time": "3.15",
    "context": "{\"function_name\": \"odd_Equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 111,
    "solution": "from typing import List, Any\nfrom collections import Counter\nfrom itertools import chain\n\ndef common_in_nested_lists(nestedlist: List[List[Any]]) -> List[Any]:\n    if not nestedlist:\n        return []\n    \n    # Flatten each sublist into a set to remove duplicates within each sublist\n    sets = [set(sublist) for sublist in nestedlist]\n    \n    # Get the intersection of all sets\n    common = sets[0].intersection(*sets[1:])\n    \n    # Convert back to list and sort for consistent output\n    return sorted(list(common))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):",
    "timestamp": "2025-10-17T19:09:39.813520",
    "response_time": "2.98",
    "context": "{\"function_name\": \"common_in_nested_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 113,
    "solution": "def check_integer(text):\n    # Handle empty string\n    if not text:\n        return False\n    \n    # Handle negative numbers by checking first character\n    if text[0] == '-':\n        text = text[1:]  # Remove the negative sign\n        if not text:  # If only negative sign was present\n            return False\n    \n    # Check if all remaining characters are digits\n    return text.isdigit()",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):",
    "timestamp": "2025-10-17T19:09:43.941017",
    "response_time": "4.13",
    "context": "{\"function_name\": \"check_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 115,
    "solution": "def empty_dit(list1):\n    return all(not bool(d) for d in list1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):",
    "timestamp": "2025-10-17T19:09:46.060658",
    "response_time": "2.12",
    "context": "{\"function_name\": \"empty_dit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 116,
    "solution": "def tuple_to_int(nums):\n    # Convert each number to string and concatenate\n    result = ''.join(str(num) for num in nums)\n    # Convert the concatenated string back to integer\n    return int(result)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):",
    "timestamp": "2025-10-17T19:09:47.776891",
    "response_time": "1.71",
    "context": "{\"function_name\": \"tuple_to_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 117,
    "solution": "def list_to_float(test_list):\n    result = []\n    for sublist in test_list:\n        converted_sublist = []\n        for item in sublist:\n            try:\n                converted_sublist.append(float(item))\n            except (ValueError, TypeError):\n                converted_sublist.append(item)\n        result.append(converted_sublist)\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):",
    "timestamp": "2025-10-17T19:09:49.503649",
    "response_time": "1.72",
    "context": "{\"function_name\": \"list_to_float\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 118,
    "solution": "def string_to_list(string):\n    return string.split()",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):",
    "timestamp": "2025-10-17T19:09:50.888738",
    "response_time": "1.38",
    "context": "{\"function_name\": \"string_to_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 119,
    "solution": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n    \n    # Using XOR operation\n    # When same numbers are XORed, they cancel out (become 0)\n    # The remaining number will be the one that appears only once\n    result = 0\n    for num in arr:\n        result ^= num\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):",
    "timestamp": "2025-10-17T19:09:54.865036",
    "response_time": "3.97",
    "context": "{\"function_name\": \"search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 120,
    "solution": "def max_product_tuple(list1):\n    if not list1 or len(list1) < 2:\n        return 0\n    \n    max_product = float('-inf')\n    n = len(list1)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            # Calculate product of corresponding elements in tuples\n            product = 1\n            for x, y in zip(list1[i], list1[j]):\n                product *= abs(x - y)\n            max_product = max(max_product, product)\n    \n    return max_product",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):",
    "timestamp": "2025-10-17T19:09:59.512624",
    "response_time": "4.64",
    "context": "{\"function_name\": \"max_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 123,
    "solution": "def amicable_numbers_sum(n):\n    if n == 1:\n        return 0\n    divisors_sum = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit):\n    total = 0\n    for a in range(1, limit):\n        b = sum_of_proper_divisors(a)\n        if b > a and b <= limit and sum_of_proper_divisors(b) == a:\n            total += a + b\n    return total",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):",
    "timestamp": "2025-10-17T19:10:02.746791",
    "response_time": "3.23",
    "context": "{\"function_name\": \"amicable_numbers_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 124,
    "solution": "import math\n\ndef angle_complex(a,b):\n    \"\"\"\n    Calculate the angle (in radians) of a complex number given its real and imaginary parts.\n    \n    Args:\n        a (float): Real part of the complex number\n        b (float): Imaginary part of the complex number\n    \n    Returns:\n        float: Angle in radians between -pi and pi\n    \"\"\"\n    return math.atan2(b, a)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):",
    "timestamp": "2025-10-17T19:10:05.836465",
    "response_time": "3.09",
    "context": "{\"function_name\": \"angle_complex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 125,
    "solution": "def find_length(string):\n    n = len(string)\n    # Convert string to array of integers where '0' becomes 1 and '1' becomes -1\n    arr = [1 if c == '0' else -1 for c in string]\n    \n    # Initialize variables for Kadane's algorithm\n    max_diff = 0\n    curr_sum = 0\n    min_sum = 0\n    \n    # Apply Kadane's algorithm to find maximum subarray sum\n    for i in range(n):\n        curr_sum += arr[i]\n        # Update max_diff if current difference is greater\n        max_diff = max(max_diff, curr_sum - min_sum)\n        # Update minimum sum seen so far\n        min_sum = min(min_sum, curr_sum)\n    \n    return max_diff",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):",
    "timestamp": "2025-10-17T19:10:10.775126",
    "response_time": "4.94",
    "context": "{\"function_name\": \"find_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 126,
    "solution": "def sum(a,b):\n    # Find minimum of a and b\n    smaller = min(a, b)\n    \n    # Initialize sum of common divisors\n    divisor_sum = 0\n    \n    # Check for each number from 1 to smaller number\n    for i in range(1, smaller + 1):\n        # If i is a divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            divisor_sum += i\n            \n    return divisor_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):",
    "timestamp": "2025-10-17T19:10:14.654022",
    "response_time": "3.87",
    "context": "{\"function_name\": \"sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 127,
    "solution": "def multiply_int(x, y):\n    return x * y",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):",
    "timestamp": "2025-10-17T19:10:16.030916",
    "response_time": "1.37",
    "context": "{\"function_name\": \"multiply_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 128,
    "solution": "def long_words(n, str):\n    # Split the string into words\n    words = str.split()\n    \n    # Use list comprehension to find words longer than n characters\n    result = [word for word in words if len(word) > n]\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):",
    "timestamp": "2025-10-17T19:10:17.776310",
    "response_time": "1.74",
    "context": "{\"function_name\": \"long_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 129,
    "solution": "def magic_square_test(my_matrix):\n    # Check if matrix is square\n    n = len(my_matrix)\n    if not all(len(row) == n for row in my_matrix):\n        return False\n\n    # Calculate the expected sum (sum of first row as reference)\n    expected_sum = sum(my_matrix[0])\n\n    # Check rows\n    for row in my_matrix:\n        if sum(row) != expected_sum:\n            return False\n\n    # Check columns\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != expected_sum:\n            return False\n\n    # Check main diagonal (top-left to bottom-right)\n    if sum(my_matrix[i][i] for i in range(n)) != expected_sum:\n        return False\n\n    # Check secondary diagonal (top-right to bottom-left)\n    if sum(my_matrix[i][n-1-i] for i in range(n)) != expected_sum:\n        return False\n\n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):",
    "timestamp": "2025-10-17T19:10:21.450296",
    "response_time": "3.67",
    "context": "{\"function_name\": \"magic_square_test\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 130,
    "solution": "from collections import Counter\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    \n    # Use Counter to count occurrences of each item\n    count_dict = Counter(nums)\n    \n    # Find the item with maximum frequency\n    max_item = max(count_dict.items(), key=lambda x: x[1])\n    \n    return max_item[0]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):",
    "timestamp": "2025-10-17T19:10:23.403962",
    "response_time": "1.95",
    "context": "{\"function_name\": \"max_occurrences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 131,
    "solution": "def reverse_vowels(str1):\n    # Convert string to list for easier manipulation\n    str_list = list(str1)\n    # Define vowels\n    vowels = set('aeiouAEIOU')\n    \n    # Get positions and values of vowels\n    vowel_positions = []\n    vowel_chars = []\n    \n    for i, char in enumerate(str1):\n        if char in vowels:\n            vowel_positions.append(i)\n            vowel_chars.append(char)\n    \n    # Reverse vowels\n    vowel_chars.reverse()\n    \n    # Put reversed vowels back in their positions\n    for pos, vowel in zip(vowel_positions, vowel_chars):\n        str_list[pos] = vowel\n    \n    # Convert back to string\n    return ''.join(str_list)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):",
    "timestamp": "2025-10-17T19:10:26.847723",
    "response_time": "3.44",
    "context": "{\"function_name\": \"reverse_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 132,
    "solution": "def tup_string(tup1):\n    return str(tup1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):",
    "timestamp": "2025-10-17T19:10:28.539101",
    "response_time": "1.68",
    "context": "{\"function_name\": \"tup_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 133,
    "solution": "def sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):",
    "timestamp": "2025-10-17T19:10:29.631457",
    "response_time": "1.09",
    "context": "{\"function_name\": \"sum_negativenum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 135,
    "solution": "def hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n    Formula: n(2n-1)\n    \"\"\"\n    return n * (2 * n - 1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):",
    "timestamp": "2025-10-17T19:10:31.087010",
    "response_time": "1.45",
    "context": "{\"function_name\": \"hexagonal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 137,
    "solution": "def zero_count(nums):\n    if not nums:\n        return 0.0\n    \n    zero_count = sum(1 for num in nums if num == 0)\n    non_zero_count = len(nums) - zero_count\n    \n    if non_zero_count == 0:\n        return float('inf')\n    \n    return zero_count / non_zero_count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):",
    "timestamp": "2025-10-17T19:10:33.098782",
    "response_time": "1.98",
    "context": "{\"function_name\": \"zero_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 138,
    "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    # If number is less than 1, return False\n    if n < 1:\n        return False\n    \n    # Count number of set bits in binary representation\n    count = 0\n    while n:\n        if n & 1:  # Check if least significant bit is 1\n            count += 1\n        n = n >> 1  # Right shift by 1\n    \n    # If count is 1, then number is a power of 2\n    # and cannot be represented as sum of non-zero powers of 2\n    return count != 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):",
    "timestamp": "2025-10-17T19:10:38.088644",
    "response_time": "4.99",
    "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 139,
    "solution": "import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):",
    "timestamp": "2025-10-17T19:10:40.529301",
    "response_time": "2.44",
    "context": "{\"function_name\": \"circle_circumference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 140,
    "solution": "def extract_singly(test_list):\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):",
    "timestamp": "2025-10-17T19:10:42.893425",
    "response_time": "2.36",
    "context": "{\"function_name\": \"extract_singly\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 141,
    "solution": "def pancake_sort(nums):\n    if len(nums) <= 1:\n        return nums\n    \n    for size in range(len(nums), 1, -1):\n        # Find the index of the maximum element in the unsorted portion\n        max_idx = nums.index(max(nums[0:size]))\n        \n        if max_idx != size - 1:\n            # If the maximum element is not at its correct position\n            if max_idx != 0:\n                # Flip the sublist from index 0 to max_idx\n                nums[:max_idx + 1] = nums[:max_idx + 1][::-1]\n            \n            # Flip the sublist from index 0 to size-1\n            nums[:size] = nums[:size][::-1]\n    \n    return nums",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):",
    "timestamp": "2025-10-17T19:10:48.225328",
    "response_time": "5.33",
    "context": "{\"function_name\": \"pancake_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 142,
    "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    min_len = min(len(list1), len(list2), len(list3))\n    \n    for i in range(min_len):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n            \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):",
    "timestamp": "2025-10-17T19:10:49.964670",
    "response_time": "1.74",
    "context": "{\"function_name\": \"count_samepair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 143,
    "solution": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):",
    "timestamp": "2025-10-17T19:10:51.347080",
    "response_time": "1.38",
    "context": "{\"function_name\": \"find_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 145,
    "solution": "def max_Abs_Diff(arr):\n    if len(arr) < 2:\n        return 0\n    \n    min_element = arr[0]\n    max_element = arr[0]\n    \n    for num in arr:\n        if num < min_element:\n            min_element = num\n        if num > max_element:\n            max_element = num\n    \n    return max_element - min_element",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):",
    "timestamp": "2025-10-17T19:10:54.529843",
    "response_time": "3.18",
    "context": "{\"function_name\": \"max_Abs_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 160,
    "solution": "def find_solution(a, b, n):\n    # Using Extended Euclidean Algorithm to find GCD and coefficients\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return gcd, x, y\n\n    # Handle special cases\n    if a == 0 and b == 0:\n        return None if n != 0 else (0, 0)\n    if a == 0:\n        return (0, n//b) if n % b == 0 else None\n    if b == 0:\n        return (n//a, 0) if n % a == 0 else None\n\n    # Find GCD and coefficients\n    gcd, x, y = extended_gcd(abs(a), abs(b))\n\n    # Check if solution exists\n    if n % gcd != 0:\n        return None\n\n    # Scale the solution\n    x = x * (n // gcd)\n    y = y * (n // gcd)\n\n    # Adjust for negative inputs\n    if a < 0:\n        x = -x\n    if b < 0:\n        y = -y\n\n    return (x, y)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):",
    "timestamp": "2025-10-17T19:11:02.083125",
    "response_time": "7.55",
    "context": "{\"function_name\": \"find_solution\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 161,
    "solution": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):",
    "timestamp": "2025-10-17T19:11:03.336721",
    "response_time": "1.25",
    "context": "{\"function_name\": \"remove_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 162,
    "solution": "def sum_series(n):\n    total = 0\n    for i in range((n // 2) + 1):\n        current = n - (2 * i)\n        if current <= 0:\n            break\n        total += current\n    return total",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):",
    "timestamp": "2025-10-17T19:11:05.687613",
    "response_time": "2.35",
    "context": "{\"function_name\": \"sum_series\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 163,
    "solution": "import math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon.\n    \n    Args:\n        s (int): Number of sides of the polygon\n        l (float): Length of each side\n        \n    Returns:\n        float: Area of the regular polygon\n    \"\"\"\n    # Area = (n * s^2) / (4 * tan(\u03c0/n))\n    # where n is number of sides and s is side length\n    area = (s * l * l) / (4 * math.tan(math.pi / s))\n    return area",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):",
    "timestamp": "2025-10-17T19:11:08.726113",
    "response_time": "3.03",
    "context": "{\"function_name\": \"area_polygon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 164,
    "solution": "def are_equivalent(n):\n    if n <= 0:\n        return 0\n    \n    divisors_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors_sum += i\n            \n    return divisors_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):",
    "timestamp": "2025-10-17T19:11:11.476663",
    "response_time": "2.75",
    "context": "{\"function_name\": \"are_equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 165,
    "solution": "def count_char_position(str1):\n    if not str1:\n        return 0\n    \n    count = 0\n    # Convert string to lowercase for case-insensitive comparison\n    str1 = str1.lower()\n    \n    # Iterate through the string\n    for i, char in enumerate(str1):\n        # Check if character is a letter and its position matches alphabet position (a=0, b=1, etc.)\n        if char.isalpha() and ord(char) - ord('a') == i:\n            count += 1\n            \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):",
    "timestamp": "2025-10-17T19:11:15.865380",
    "response_time": "4.38",
    "context": "{\"function_name\": \"count_char_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 166,
    "solution": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    \n    # Check each possible pair\n    for i in range(n):\n        for j in range(i + 1, n):\n            # If XOR of pair is even (last bit is 0)\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n                \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):",
    "timestamp": "2025-10-17T19:11:19.099122",
    "response_time": "3.23",
    "context": "{\"function_name\": \"find_even_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 167,
    "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    \n    # Subtract 1 from n to handle the case when n is already a power of 2\n    n -= 1\n    # Set all bits after the leftmost 1 to 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    # Add 1 to get the next power of 2\n    return n + 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):",
    "timestamp": "2025-10-17T19:11:23.661216",
    "response_time": "4.56",
    "context": "{\"function_name\": \"next_power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 168,
    "solution": "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):",
    "timestamp": "2025-10-17T19:11:25.156671",
    "response_time": "1.49",
    "context": "{\"function_name\": \"frequency\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 170,
    "solution": "def sum_range_list(list1, m, n):\n    # Check if indices are valid\n    if m < 0 or n >= len(list1) or m > n:\n        return 0\n    \n    # Calculate sum of elements from index m to n (inclusive)\n    return sum(list1[m:n+1])",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):",
    "timestamp": "2025-10-17T19:11:27.494817",
    "response_time": "2.33",
    "context": "{\"function_name\": \"sum_range_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 171,
    "solution": "def perimeter_pentagon(a):\n    return 5 * a",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):",
    "timestamp": "2025-10-17T19:11:28.504400",
    "response_time": "1.00",
    "context": "{\"function_name\": \"perimeter_pentagon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 172,
    "solution": "def count_occurance(s):\n    return s.count('std')",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):",
    "timestamp": "2025-10-17T19:11:30.604875",
    "response_time": "2.10",
    "context": "{\"function_name\": \"count_occurance\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 222,
    "solution": "def check_type(test_tuple):\n    if not test_tuple:  # Check if tuple is empty\n        return True\n    \n    # Get type of first element\n    first_type = type(test_tuple[0])\n    \n    # Check if all elements are of same type as first element\n    return all(isinstance(x, first_type) for x in test_tuple)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):",
    "timestamp": "2025-10-17T19:11:33.373432",
    "response_time": "2.76",
    "context": "{\"function_name\": \"check_type\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 223,
    "solution": "def binary_search(arr, n, x):\n    # Find first occurrence of x using binary search\n    first = binary_search_first(arr, 0, n-1, x)\n    \n    # If element is not present at all, return False\n    if first == -1:\n        return False\n    \n    # If first occurrence is at last n/2 elements, return False\n    if first > n//2:\n        return False\n        \n    # Check if the element at (first + n/2) is also x\n    # If it is, then x appears more than n/2 times\n    if first + n//2 < n and arr[first + n//2] == x:\n        return True\n    \n    return False\n\ndef binary_search_first(arr, low, high, x):\n    if high >= low:\n        mid = (low + high) // 2\n        \n        # Check if x is present at mid and either mid is first occurrence\n        # or element before mid is smaller than x\n        if (mid == 0 or x > arr[mid-1]) and arr[mid] == x:\n            return mid\n        # If x is greater than element at mid, search in right half\n        elif x > arr[mid]:\n            return binary_search_first(arr, mid+1, high, x)\n        # If x is smaller or equal to element at mid, search in left half\n        else:\n            return binary_search_first(arr, low, mid-1, x)\n    \n    return -1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):",
    "timestamp": "2025-10-17T19:11:38.939166",
    "response_time": "5.56",
    "context": "{\"function_name\": \"binary_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 224,
    "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):",
    "timestamp": "2025-10-17T19:11:40.495669",
    "response_time": "1.55",
    "context": "{\"function_name\": \"count_Set_Bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 226,
    "solution": "def odd_values_string(str):\n    return str[::2]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to remove the characters which have odd index values of a given string.\n\n### Signature\ndef odd_values_string(str):",
    "timestamp": "2025-10-17T19:11:42.229937",
    "response_time": "1.73",
    "context": "{\"function_name\": \"odd_values_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 227,
    "solution": "def min_of_three(a, b, c):\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find minimum of three numbers.\n\n### Signature\ndef min_of_three(a,b,c):",
    "timestamp": "2025-10-17T19:11:44.574012",
    "response_time": "2.34",
    "context": "{\"function_name\": \"min_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 228,
    "solution": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a mask with 1's in the range [l, r]\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    \n    # Check if all bits in the range are unset (0)\n    # by performing AND operation with the mask\n    return (n & mask) == 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether all the bits are unset in the given range or not.\n\n### Signature\ndef all_Bits_Set_In_The_Given_Range(n,l,r):",
    "timestamp": "2025-10-17T19:11:47.648477",
    "response_time": "3.07",
    "context": "{\"function_name\": \"all_Bits_Set_In_The_Given_Range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 229,
    "solution": "def re_arrange_array(arr, n):\n    # Create temporary arrays to store negative and positive numbers\n    neg = []\n    pos = []\n    \n    # Traverse through first n elements and separate negative and positive numbers\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    \n    # Copy negative numbers back to array\n    k = 0\n    for i in range(len(neg)):\n        arr[k] = neg[i]\n        k += 1\n    \n    # Copy positive numbers back to array\n    for i in range(len(pos)):\n        arr[k] = pos[i]\n        k += 1\n    \n    return arr",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n### Signature\ndef re_arrange_array(arr, n):",
    "timestamp": "2025-10-17T19:11:52.018030",
    "response_time": "4.36",
    "context": "{\"function_name\": \"re_arrange_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 230,
    "solution": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n### Signature\ndef replace_blank(str1,char):",
    "timestamp": "2025-10-17T19:11:53.620149",
    "response_time": "1.60",
    "context": "{\"function_name\": \"replace_blank\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 232,
    "solution": "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    if not list1 or n <= 0 or n > len(list1):\n        return []\n    \n    # Sort the list in descending order and return first n elements\n    sorted_list = sorted(list1, reverse=True)\n    return sorted_list[:n]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n### Signature\ndef larg_nnum(list1,n):",
    "timestamp": "2025-10-17T19:11:56.369764",
    "response_time": "2.75",
    "context": "{\"function_name\": \"larg_nnum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 233,
    "solution": "import math\n\ndef lateralsuface_cylinder(r,h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder\n    \n    Args:\n        r (float): radius of the cylinder\n        h (float): height of the cylinder\n    \n    Returns:\n        float: lateral surface area of the cylinder\n    \"\"\"\n    lateral_area = 2 * math.pi * r * h\n    return lateral_area",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cylinder.\n\n### Signature\ndef lateralsuface_cylinder(r,h):",
    "timestamp": "2025-10-17T19:11:58.736909",
    "response_time": "2.36",
    "context": "{\"function_name\": \"lateralsuface_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 234,
    "solution": "def volume_cube(l):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n    \n    Args:\n        l (int or float): The length of one side of the cube\n        \n    Returns:\n        float: The volume of the cube\n    \"\"\"\n    return l ** 3",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the volume of a cube given its side length.\n\n### Signature\ndef volume_cube(l):",
    "timestamp": "2025-10-17T19:12:01.564151",
    "response_time": "2.82",
    "context": "{\"function_name\": \"volume_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 235,
    "solution": "def even_bit_set_number(n):\n    # Convert number to binary string and pad with zeros\n    binary = bin(n)[2:]\n    length = len(binary)\n    \n    # Create a mask with 1's at even positions (from right)\n    mask = 0\n    for i in range(length):\n        if i % 2 == 1:  # even position from right (1-based indexing)\n            mask |= (1 << i)\n    \n    # Set all even bits by OR operation\n    result = n | mask\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to set all even bits of a given number.\n\n### Signature\ndef even_bit_set_number(n):",
    "timestamp": "2025-10-17T19:12:04.628161",
    "response_time": "3.06",
    "context": "{\"function_name\": \"even_bit_set_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 237,
    "solution": "from collections import defaultdict\n\ndef check_occurences(test_list):\n    frequency = defaultdict(int)\n    for item in test_list:\n        frequency[item] += 1\n    return dict(frequency)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n### Signature\ndef check_occurences(test_list):",
    "timestamp": "2025-10-17T19:12:06.660325",
    "response_time": "2.03",
    "context": "{\"function_name\": \"check_occurences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 238,
    "solution": "def number_of_substrings(str):\n    n = len(str)\n    # Number of non-empty substrings = n*(n+1)/2\n    # where n is the length of string\n    return (n * (n + 1)) // 2",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count the number of non-empty substrings of a given string.\n\n### Signature\ndef number_of_substrings(str):",
    "timestamp": "2025-10-17T19:12:08.624849",
    "response_time": "1.96",
    "context": "{\"function_name\": \"number_of_substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 239,
    "solution": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    \n    def count_sequences(prev, remaining_length, memo={}):\n        if remaining_length == 0:\n            return 1\n        \n        state = (prev, remaining_length)\n        if state in memo:\n            return memo[state]\n        \n        count = 0\n        start = max(1, 2 * prev)\n        \n        if start > m:\n            return 0\n            \n        for next_num in range(start, m + 1):\n            count += count_sequences(next_num, remaining_length - 1, memo)\n            \n        memo[state] = count\n        return count\n    \n    total = 0\n    for first in range(1, m + 1):\n        total += count_sequences(first, n - 1)\n        \n    return total",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n### Signature\ndef get_total_number_of_sequences(m,n):",
    "timestamp": "2025-10-17T19:12:12.555374",
    "response_time": "3.93",
    "context": "{\"function_name\": \"get_total_number_of_sequences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 240,
    "solution": "def replace_list(list1, list2):\n    if not list1:  # If list1 is empty\n        return list2\n    return list1[:-1] + list2",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\n### Signature\ndef replace_list(list1,list2):",
    "timestamp": "2025-10-17T19:12:13.996190",
    "response_time": "1.43",
    "context": "{\"function_name\": \"replace_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 242,
    "solution": "def count_charac(str1):\n    return len(str1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to count the total number of characters in a string.\n\n### Signature\ndef count_charac(str1):",
    "timestamp": "2025-10-17T19:12:15.365073",
    "response_time": "1.36",
    "context": "{\"function_name\": \"count_charac\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 244,
    "solution": "import math\n\ndef next_Perfect_Square(N):\n    # Find the square root of N\n    sqrt_N = math.isqrt(N)\n    \n    # If N is a perfect square, we need the next one\n    # If N is not a perfect square, we need to use the ceiling of its square root\n    if sqrt_N * sqrt_N == N:\n        next_sqrt = sqrt_N + 1\n    else:\n        next_sqrt = sqrt_N + 1\n    \n    # Return the square of next_sqrt\n    return next_sqrt * next_sqrt",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the next perfect square greater than a given number.\n\n### Signature\ndef next_Perfect_Square(N):",
    "timestamp": "2025-10-17T19:12:18.110128",
    "response_time": "2.74",
    "context": "{\"function_name\": \"next_Perfect_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 245,
    "solution": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize arrays for increasing and decreasing sequences\n    inc = [0] * n  # stores max sum of increasing sequence ending at i\n    dec = [0] * n  # stores max sum of decreasing sequence starting at i\n    \n    # Fill increasing sequence sums\n    inc[0] = arr[0]\n    for i in range(1, n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    \n    # Fill decreasing sequence sums\n    dec[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    \n    # Find maximum sum by combining increasing and decreasing sequences\n    max_bitonic = 0\n    for i in range(n):\n        max_bitonic = max(max_bitonic, inc[i] + dec[i] - arr[i])\n    \n    return max_bitonic",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\n### Signature\ndef max_sum(arr):",
    "timestamp": "2025-10-17T19:12:24.800851",
    "response_time": "6.68",
    "context": "{\"function_name\": \"max_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 246,
    "solution": "def babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot calculate square root of negative number\")\n    if number == 0:\n        return 0\n    \n    x = number  # Initial guess\n    y = 1.0\n    # Use 1e-10 as tolerance for accuracy\n    epsilon = 1e-10\n    \n    while abs(x - y) > epsilon:\n        x = (x + y) / 2\n        y = number / x\n        \n    return x",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function for computing square roots using the babylonian method.\n\n### Signature\ndef babylonian_squareroot(number):",
    "timestamp": "2025-10-17T19:12:29.723667",
    "response_time": "4.92",
    "context": "{\"function_name\": \"babylonian_squareroot\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 247,
    "solution": "def lps(str):\n    n = len(str)\n    # Create a table to store results of subproblems\n    L = [[0 for x in range(n)] for x in range(n)]\n    \n    # Strings of length 1 are palindrome of length 1\n    for i in range(n):\n        L[i][i] = 1\n    \n    # Build the table in bottom up manner\n    # cl is length of substring\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j])\n    \n    return L[0][n - 1]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n\n### Signature\ndef lps(str):",
    "timestamp": "2025-10-17T19:12:33.884481",
    "response_time": "4.16",
    "context": "{\"function_name\": \"lps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 248,
    "solution": "def harmonic_sum(n):\n    if n <= 1:\n        return 0\n    \n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in an integer n and calculates the harmonic sum of n-1.\n\n### Signature\ndef harmonic_sum(n):",
    "timestamp": "2025-10-17T19:12:36.133577",
    "response_time": "2.24",
    "context": "{\"function_name\": \"harmonic_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 249,
    "solution": "def intersection_array(array_nums1, array_nums2):\n    # Convert arrays to sets for efficient intersection operation\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Find intersection using set intersection operation\n    intersection = list(set1.intersection(set2))\n    \n    return intersection",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the intersection of two arrays.\n\n### Signature\ndef intersection_array(array_nums1,array_nums2):",
    "timestamp": "2025-10-17T19:12:38.156232",
    "response_time": "2.02",
    "context": "{\"function_name\": \"intersection_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 250,
    "solution": "def count_X(tup, x):\n    return tup.count(x)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\n### Signature\ndef count_X(tup, x):",
    "timestamp": "2025-10-17T19:12:40.036802",
    "response_time": "1.88",
    "context": "{\"function_name\": \"count_X\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 251,
    "solution": "def insert_element(list, element):\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\n### Signature\ndef insert_element(list,element):",
    "timestamp": "2025-10-17T19:12:41.440008",
    "response_time": "1.40",
    "context": "{\"function_name\": \"insert_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 252,
    "solution": "import math\nfrom typing import List, Tuple, Union\n\ndef convert(numbers: Union[complex, List[complex]]) -> Union[Tuple[float, float], List[Tuple[float, float]]]:\n    \"\"\"\n    Convert complex numbers to polar coordinates (r, \u03b8).\n    r is the magnitude (distance from origin)\n    \u03b8 is the angle in radians from the positive real axis\n    \n    Args:\n        numbers: A single complex number or list of complex numbers\n        \n    Returns:\n        For single input: Tuple of (r, \u03b8)\n        For list input: List of tuples [(r, \u03b8), ...]\n    \"\"\"\n    def to_polar(z: complex) -> Tuple[float, float]:\n        r = abs(z)\n        theta = math.atan2(z.imag, z.real)\n        return (r, theta)\n    \n    if isinstance(numbers, list):\n        return [to_polar(z) for z in numbers]\n    return to_polar(numbers)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to convert complex numbers to polar coordinates.\n\n### Signature\ndef convert(numbers):",
    "timestamp": "2025-10-17T19:12:45.217896",
    "response_time": "3.77",
    "context": "{\"function_name\": \"convert\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 253,
    "solution": "def count_integer(list1):\n    return sum(1 for item in list1 if isinstance(item, int))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function that returns the number of integer elements in a given list.\n\n### Signature\ndef count_integer(list1):",
    "timestamp": "2025-10-17T19:12:47.324799",
    "response_time": "2.10",
    "context": "{\"function_name\": \"count_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 255,
    "solution": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\n### Signature\ndef combinations_colors(l, n):",
    "timestamp": "2025-10-17T19:12:48.743411",
    "response_time": "1.41",
    "context": "{\"function_name\": \"combinations_colors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 256,
    "solution": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    \n    # Initialize boolean array \"is_prime[0..n]\" and mark all entries as true\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    # Use Sieve of Eratosthenes to mark non-prime numbers as False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            # Update all multiples of i starting from i*i\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    \n    # Count number of prime numbers\n    return sum(is_prime)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n### Signature\ndef count_Primes_nums(n):",
    "timestamp": "2025-10-17T19:12:53.556223",
    "response_time": "4.81",
    "context": "{\"function_name\": \"count_Primes_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 257,
    "solution": "def swap_numbers(a, b):\n    return (b, a)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\n### Signature\ndef swap_numbers(a,b):",
    "timestamp": "2025-10-17T19:12:55.228896",
    "response_time": "1.67",
    "context": "{\"function_name\": \"swap_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 259,
    "solution": "def maximize_elements(test_tup1, test_tup2):\n    # Convert tuples to lists for manipulation\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Get the length of both tuples\n    n = len(test_tup1)\n    \n    # Compare and swap elements to maximize both tuples\n    for i in range(n):\n        if list1[i] < list2[i]:\n            list1[i], list2[i] = list2[i], list1[i]\n    \n    # Convert lists back to tuples\n    return (tuple(list1), tuple(list2))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to maximize the given two tuples.\n\n### Signature\ndef maximize_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T19:12:59.412101",
    "response_time": "4.18",
    "context": "{\"function_name\": \"maximize_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 260,
    "solution": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def nsw_sequence(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        return 2 * nsw_sequence(n-1) + nsw_sequence(n-2)\n    \n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(nsw_sequence(i)):\n            count += 1\n        i += 1\n    return nsw_sequence(i-1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n### Signature\ndef newman_prime(n):",
    "timestamp": "2025-10-17T19:13:02.718377",
    "response_time": "3.30",
    "context": "{\"function_name\": \"newman_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 261,
    "solution": "def division_elements(test_tup1, test_tup2):\n    # Check if tuples have same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    # Check for division by zero and perform element-wise division\n    result = []\n    for num1, num2 in zip(test_tup1, test_tup2):\n        if num2 == 0:\n            raise ZeroDivisionError(\"Division by zero is not allowed\")\n        result.append(num1 / num2)\n    \n    return tuple(result)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n### Signature\ndef division_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T19:13:07.407739",
    "response_time": "4.68",
    "context": "{\"function_name\": \"division_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 262,
    "solution": "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return list1[:L], list1[L:]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\n### Signature\ndef split_two_parts(list1, L):",
    "timestamp": "2025-10-17T19:13:09.783206",
    "response_time": "2.37",
    "context": "{\"function_name\": \"split_two_parts\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 264,
    "solution": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog years.\n    First two years count as 10.5 years each\n    After that each human year counts as 4 dog years\n    \n    Args:\n        h_age (float): Age of the dog in human years\n        \n    Returns:\n        float: Age of the dog in dog years\n    \"\"\"\n    if h_age <= 0:\n        return 0\n    elif h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to calculate a dog's age in dog's years.\n\n### Signature\ndef dog_age(h_age):",
    "timestamp": "2025-10-17T19:13:14.352500",
    "response_time": "4.56",
    "context": "{\"function_name\": \"dog_age\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 265,
    "solution": "def list_split(S, step):\n    if not S or step <= 0:\n        return []\n    return [S[i:i+step] for i in range(0, len(S), step)]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\n### Signature\ndef list_split(S, step):",
    "timestamp": "2025-10-17T19:13:17.027936",
    "response_time": "2.67",
    "context": "{\"function_name\": \"list_split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 266,
    "solution": "def lateralsurface_cube(l):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    Lateral surface area of a cube = 4 * side length * side length\n    \n    Args:\n        l (int or float): Side length of the cube\n        \n    Returns:\n        float: Lateral surface area of the cube\n    \"\"\"\n    return 4 * l * l",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cube given its side length.\n\n### Signature\ndef lateralsurface_cube(l):",
    "timestamp": "2025-10-17T19:13:20.208420",
    "response_time": "3.18",
    "context": "{\"function_name\": \"lateralsurface_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 267,
    "solution": "def square_Sum(n):\n    sum = 0\n    odd_num = 1\n    for i in range(n):\n        sum += odd_num * odd_num\n        odd_num += 2\n    return sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n### Signature\ndef square_Sum(n):",
    "timestamp": "2025-10-17T19:13:21.708264",
    "response_time": "1.49",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 268,
    "solution": "def find_star_num(n):\n    \"\"\"\n    Calculate the n'th star number.\n    A star number is a centered figurate number that represents a centered hexagram.\n    The formula for the n'th star number is: 6n(n-1) + 1\n    \"\"\"\n    return 6 * n * (n - 1) + 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the n'th star number.\n\n### Signature\ndef find_star_num(n):",
    "timestamp": "2025-10-17T19:13:24.963883",
    "response_time": "3.25",
    "context": "{\"function_name\": \"find_star_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 269,
    "solution": "def ascii_value(k):\n    return ord(k)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the ascii value of a character.\n\n### Signature\ndef ascii_value(k):",
    "timestamp": "2025-10-17T19:13:27.103831",
    "response_time": "2.14",
    "context": "{\"function_name\": \"ascii_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 270,
    "solution": "def sum_even_and_even_index(arr):\n    total = 0\n    for i in range(0, len(arr), 2):  # Step by 2 to get even indices (0, 2, 4, ...)\n        if arr[i] % 2 == 0:  # Check if number at even index is even\n            total += arr[i]\n    return total",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the sum of even numbers at even positions of a list.\n\n### Signature\ndef sum_even_and_even_index(arr):",
    "timestamp": "2025-10-17T19:13:29.789717",
    "response_time": "2.68",
    "context": "{\"function_name\": \"sum_even_and_even_index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 271,
    "solution": "def even_Power_Sum(n):\n    sum = 0\n    count = 0\n    num = 2  # Start with first even number\n    \n    while count < n:\n        sum += num ** 5\n        num += 2  # Move to next even number\n        count += 1\n    \n    return sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n### Signature\ndef even_Power_Sum(n):",
    "timestamp": "2025-10-17T19:13:32.434746",
    "response_time": "2.64",
    "context": "{\"function_name\": \"even_Power_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 272,
    "solution": "def rear_extract(test_list):\n    return [tup[-1] for tup in test_list]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n### Signature\ndef rear_extract(test_list):",
    "timestamp": "2025-10-17T19:13:34.155090",
    "response_time": "1.71",
    "context": "{\"function_name\": \"rear_extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 273,
    "solution": "def substract_elements(test_tup1, test_tup2):\n    # Convert tuples to lists for element-wise subtraction\n    result = [x - y for x, y in zip(test_tup1, test_tup2)]\n    # Convert back to tuple and return\n    return tuple(result)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n### Signature\ndef substract_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T19:13:36.902140",
    "response_time": "2.74",
    "context": "{\"function_name\": \"substract_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 274,
    "solution": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    if n < 0:\n        return 0\n    \n    sum_even = 0\n    for i in range(0, n + 1, 2):\n        sum_even += comb(n, i)\n    \n    return sum_even",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n### Signature\ndef even_binomial_Coeff_Sum( n):",
    "timestamp": "2025-10-17T19:13:40.410913",
    "response_time": "3.50",
    "context": "{\"function_name\": \"even_binomial_Coeff_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 276,
    "solution": "import math\n\ndef volume_cylinder(r,h):\n    return math.pi * r * r * h",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n\n### Signature\ndef volume_cylinder(r,h):",
    "timestamp": "2025-10-17T19:13:42.370409",
    "response_time": "1.95",
    "context": "{\"function_name\": \"volume_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 277,
    "solution": "def dict_filter(dict,n):\n    return {key: value for key, value in dict.items() if value >= n}",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n### Signature\ndef dict_filter(dict,n):",
    "timestamp": "2025-10-17T19:13:44.208801",
    "response_time": "1.83",
    "context": "{\"function_name\": \"dict_filter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 278,
    "solution": "def count_first_elements(test_tup):\n    # Find the first tuple element in the input tuple\n    for i, item in enumerate(test_tup):\n        if isinstance(item, tuple):\n            return i\n    # If no tuple is found, return 0\n    return 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n\n### Signature\ndef count_first_elements(test_tup):",
    "timestamp": "2025-10-17T19:13:46.998942",
    "response_time": "2.78",
    "context": "{\"function_name\": \"count_first_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 279,
    "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Calculate the nth decagonal number.\n    A decagonal number is a figurate number that extends the concept of triangular and square numbers to a decagon (10-sided polygon).\n    The formula for the nth decagonal number is: n * (8n - 3)\n    \"\"\"\n    return n * (8 * n - 3)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the nth decagonal number.\n\n### Signature\ndef is_num_decagonal(n):",
    "timestamp": "2025-10-17T19:13:49.026289",
    "response_time": "2.02",
    "context": "{\"function_name\": \"is_num_decagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 280,
    "solution": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    \n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n            \n    if not found:\n        pos = -1\n        \n    return (found, pos)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n### Signature\ndef sequential_search(dlist, item):",
    "timestamp": "2025-10-17T19:13:51.742673",
    "response_time": "2.71",
    "context": "{\"function_name\": \"sequential_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 281,
    "solution": "def all_unique(test_list):\n    # Convert list to set to remove duplicates\n    # Compare lengths to determine if all elements were unique\n    return len(set(test_list)) == len(test_list)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check if the elements of a given list are unique or not.\n\n### Signature\ndef all_unique(test_list):",
    "timestamp": "2025-10-17T19:13:53.628278",
    "response_time": "1.88",
    "context": "{\"function_name\": \"all_unique\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 282,
    "solution": "def sub_list(nums1, nums2):\n    return [a - b for a, b in zip(nums1, nums2)]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to subtract two lists element-wise.\n\n### Signature\ndef sub_list(nums1,nums2):",
    "timestamp": "2025-10-17T19:13:55.945013",
    "response_time": "2.31",
    "context": "{\"function_name\": \"sub_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 283,
    "solution": "def validate(n):\n    # Convert number to string to iterate through digits\n    num_str = str(n)\n    \n    # Count frequency of each digit\n    digit_freq = {}\n    for digit in num_str:\n        digit_freq[digit] = digit_freq.get(digit, 0) + 1\n    \n    # Check if frequency is less than or equal to the digit itself\n    for digit, freq in digit_freq.items():\n        if freq > int(digit):\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n### Signature\ndef validate(n):",
    "timestamp": "2025-10-17T19:13:58.348290",
    "response_time": "2.40",
    "context": "{\"function_name\": \"validate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 284,
    "solution": "def check_element(list, element):\n    return all(item == element for item in list)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\n### Signature\ndef check_element(list,element):",
    "timestamp": "2025-10-17T19:14:00.345148",
    "response_time": "1.99",
    "context": "{\"function_name\": \"check_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 285,
    "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = 'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n### Signature\ndef text_match_two_three(text):",
    "timestamp": "2025-10-17T19:14:01.927226",
    "response_time": "1.58",
    "context": "{\"function_name\": \"text_match_two_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 286,
    "solution": "def max_sub_array_sum_repeated(a, n, k):\n    # Handle empty array case\n    if n == 0:\n        return 0\n    \n    # Calculate sum of the array\n    array_sum = sum(a)\n    \n    # If k == 1, use Kadane's algorithm on the original array\n    if k == 1:\n        curr_sum = max_sum = a[0]\n        for i in range(1, n):\n            curr_sum = max(a[i], curr_sum + a[i])\n            max_sum = max(max_sum, curr_sum)\n        return max_sum\n    \n    # Use Kadane's algorithm for first two copies\n    curr_sum = max_sum = a[0]\n    # First iteration\n    for i in range(1, n):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    \n    # Second iteration\n    for i in range(n):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    \n    # If array_sum > 0, middle copies will contribute to maximum sum\n    if array_sum > 0:\n        max_sum = max(max_sum, max_sum + array_sum * (k - 2))\n    \n    return max_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n### Signature\ndef max_sub_array_sum_repeated(a, n, k):",
    "timestamp": "2025-10-17T19:14:08.984908",
    "response_time": "7.05",
    "context": "{\"function_name\": \"max_sub_array_sum_repeated\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 287,
    "solution": "def square_Sum(n):\n    sum = 0\n    count = 0\n    num = 2\n    \n    while count < n:\n        sum += num * num\n        num += 2\n        count += 1\n    \n    return sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n### Signature\ndef square_Sum(n):",
    "timestamp": "2025-10-17T19:14:12.699941",
    "response_time": "3.71",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 290,
    "solution": "def max_length(list1):\n    if not list1:\n        return []\n    max_len = len(list1[0])\n    max_list = list1[0]\n    \n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n            \n    return max_list",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the list of maximum length in a list of lists.\n\n### Signature\ndef max_length(list1):",
    "timestamp": "2025-10-17T19:14:14.712717",
    "response_time": "2.01",
    "context": "{\"function_name\": \"max_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 291,
    "solution": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    # Initialize same and diff for n = 2\n    same = k  # ways when color of last two posts is same\n    diff = k * (k - 1)  # ways when color of last two posts is different\n    \n    # Calculate for n >= 3\n    for i in range(3, n + 1):\n        # Previous diff can be used to paint current post with same color\n        # Previous same and diff both can be used to paint with different color\n        prev_same = same\n        prev_diff = diff\n        same = prev_diff\n        diff = (prev_same + prev_diff) * (k - 1)\n    \n    return same + diff",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n### Signature\ndef count_no_of_ways(n, k):",
    "timestamp": "2025-10-17T19:14:20.223297",
    "response_time": "5.50",
    "context": "{\"function_name\": \"count_no_of_ways\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 292,
    "solution": "import math\n\ndef find(n,m):\n    return math.floor(n/m)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n### Signature\ndef find(n,m):",
    "timestamp": "2025-10-17T19:14:21.715644",
    "response_time": "1.49",
    "context": "{\"function_name\": \"find\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 293,
    "solution": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    Calculate the third side of a right-angled triangle using the Pythagorean theorem.\n    \n    Args:\n        w (float): First side of the triangle\n        h (float): Second side of the triangle\n    \n    Returns:\n        float: Length of the third side (hypotenuse)\n    \"\"\"\n    return math.sqrt(w**2 + h**2)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the third side of a right angled triangle.\n\n### Signature\ndef otherside_rightangle(w,h):",
    "timestamp": "2025-10-17T19:14:24.773118",
    "response_time": "3.05",
    "context": "{\"function_name\": \"otherside_rightangle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 294,
    "solution": "from typing import List, Union\n\ndef max_val(listval):\n    if not listval:\n        return None\n    \n    max_value = float('-inf')\n    \n    for item in listval:\n        try:\n            # Convert item to float for numerical comparison\n            num_value = float(item)\n            max_value = max(max_value, num_value)\n        except (ValueError, TypeError):\n            # Skip non-numeric values\n            continue\n    \n    # If no numeric values were found\n    if max_value == float('-inf'):\n        return None\n        \n    return max_value",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the maximum value in a given heterogeneous list.\n\n### Signature\ndef max_val(listval):",
    "timestamp": "2025-10-17T19:14:28.445100",
    "response_time": "3.67",
    "context": "{\"function_name\": \"max_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 295,
    "solution": "def sum_div(number):\n    if number <= 0:\n        return 0\n    \n    divisors_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors_sum += i\n            \n    return divisors_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to return the sum of all divisors of a number.\n\n### Signature\ndef sum_div(number):",
    "timestamp": "2025-10-17T19:14:30.825384",
    "response_time": "2.37",
    "context": "{\"function_name\": \"sum_div\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 296,
    "solution": "def get_Inv_Count(arr):\n    inv_count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n                \n    return inv_count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count inversions in an array.\n\n### Signature\ndef get_Inv_Count(arr):",
    "timestamp": "2025-10-17T19:14:33.413350",
    "response_time": "2.58",
    "context": "{\"function_name\": \"get_Inv_Count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 297,
    "solution": "def flatten_list(list1):\n    flattened = []\n    for item in list1:\n        if isinstance(item, (list, tuple)):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to flatten a given nested list structure.\n\n### Signature\ndef flatten_list(list1):",
    "timestamp": "2025-10-17T19:14:35.638455",
    "response_time": "2.22",
    "context": "{\"function_name\": \"flatten_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 299,
    "solution": "def max_aggregate(stdata):\n    if not stdata:\n        return 0\n    \n    # Calculate sum for each tuple and find maximum\n    max_sum = max(sum(t) for t in stdata)\n    return max_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\n### Signature\ndef max_aggregate(stdata):",
    "timestamp": "2025-10-17T19:14:37.289865",
    "response_time": "1.65",
    "context": "{\"function_name\": \"max_aggregate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 300,
    "solution": "def count_binary_seq(n):\n    # For each possible sum in first half (0 to n), we need to find combinations\n    # that give same sum in second half\n    total_sequences = 0\n    \n    # For first n bits\n    for sum1 in range(n + 1):\n        # Count ways to get sum1 in first n bits\n        ways_first = count_combinations(n, sum1)\n        # Count ways to get same sum in last n bits\n        ways_second = count_combinations(n, sum1)\n        # Multiply ways as we can combine any sequence from first half\n        # with any sequence from second half having same sum\n        total_sequences += ways_first * ways_second\n    \n    return total_sequences\n\ndef count_combinations(n, k):\n    \"\"\"\n    Returns number of ways to choose k 1's from n positions\n    Using combination formula: C(n,k)\n    \"\"\"\n    if k > n:\n        return 0\n    \n    result = 1\n    # Calculate C(n,k) = n!/(k!(n-k)!)\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n### Signature\ndef count_binary_seq(n):",
    "timestamp": "2025-10-17T19:14:42.871638",
    "response_time": "5.58",
    "context": "{\"function_name\": \"count_binary_seq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 301,
    "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 1\n    \n    max_depth = 1\n    for value in d.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, dict_depth(value) + 1)\n    \n    return max_depth",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the depth of a dictionary.\n\n### Signature\ndef dict_depth(d):",
    "timestamp": "2025-10-17T19:14:45.564069",
    "response_time": "2.69",
    "context": "{\"function_name\": \"dict_depth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 304,
    "solution": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    # Process all rotations one by one\n    for i in range(rotations):\n        # Range for current rotation\n        left = ranges[i][0]\n        right = ranges[i][1]\n        \n        # Rotate the array for current range\n        # Store first element of range\n        temp = arr[left]\n        \n        # Shift rest of the elements in range one position ahead\n        for j in range(left, right):\n            arr[j] = arr[j + 1]\n            \n        # Place temp at its correct position\n        arr[right] = temp\n    \n    # Return element at given index\n    return arr[index]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find element at a given index after number of rotations.\n\n### Signature\ndef find_Element(arr,ranges,rotations,index) :",
    "timestamp": "2025-10-17T19:14:48.977446",
    "response_time": "3.41",
    "context": "{\"function_name\": \"find_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 305,
    "solution": "def start_withp(words):\n    p_words = [word for word in words if word.lower().startswith('p')]\n    return p_words[:2] if len(p_words) >= 2 else p_words",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to return two words from a list of words starting with letter 'p'.\n\n### Signature\ndef start_withp(words):",
    "timestamp": "2025-10-17T19:14:51.638490",
    "response_time": "2.65",
    "context": "{\"function_name\": \"start_withp\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 306,
    "solution": "def max_sum_increasing_subseq(a, n, index, k):\n    # Base case: if index is negative\n    if index < 0:\n        return 0\n    \n    # Initialize maximum sum\n    max_sum = 0\n    \n    # Consider all elements before index i\n    for i in range(index):\n        # If current element is less than both\n        # element at index and k-th element\n        if a[i] < a[index] and a[i] < a[k]:\n            # Recursively find sum of increasing subsequence\n            curr_sum = max_sum_increasing_subseq(a, n, i, k)\n            # Update max_sum if current sum is greater\n            max_sum = max(max_sum, curr_sum)\n    \n    # Add current element to the sum\n    max_sum += a[index]\n    \n    return max_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\n### Signature\ndef max_sum_increasing_subseq(a, n, index, k):",
    "timestamp": "2025-10-17T19:14:56.728766",
    "response_time": "5.08",
    "context": "{\"function_name\": \"max_sum_increasing_subseq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 307,
    "solution": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Returns a slice of a tuple from index m to n\n    \n    Args:\n        tuplex: Input tuple\n        m: Starting index (inclusive)\n        n: Ending index (exclusive)\n    \n    Returns:\n        A new tuple containing elements from index m to n\n    \"\"\"\n    return tuplex[m:n]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to get a colon of a tuple.\n\n### Signature\ndef colon_tuplex(tuplex,m,n):",
    "timestamp": "2025-10-17T19:14:59.493918",
    "response_time": "2.76",
    "context": "{\"function_name\": \"colon_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 308,
    "solution": "def large_product(nums1, nums2, N):\n    # Sort both lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize result list and set to track seen combinations\n    result = []\n    seen = set()\n    \n    # Create a max heap with initial product from first elements\n    # Format: (-product, i, j) - negative product for max heap behavior\n    import heapq\n    heap = [(-nums1[0] * nums2[0], 0, 0)]\n    seen.add((0, 0))\n    \n    # Find N largest products\n    while len(result) < N and heap:\n        # Get current largest product\n        prod, i, j = heapq.heappop(heap)\n        result.append(-prod)  # Convert back to positive\n        \n        # Add next possible combinations\n        if i + 1 < len(nums1) and (i + 1, j) not in seen:\n            heapq.heappush(heap, (-nums1[i + 1] * nums2[j], i + 1, j))\n            seen.add((i + 1, j))\n            \n        if j + 1 < len(nums2) and (i, j + 1) not in seen:\n            heapq.heappush(heap, (-nums1[i] * nums2[j + 1], i, j + 1))\n            seen.add((i, j + 1))\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n### Signature\ndef large_product(nums1, nums2, N):",
    "timestamp": "2025-10-17T19:15:08.082700",
    "response_time": "8.58",
    "context": "{\"function_name\": \"large_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 309,
    "solution": "def maximum(a,b):\n    if a > b:\n        return a\n    return b",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the maximum of two numbers.\n\n### Signature\ndef maximum(a,b):",
    "timestamp": "2025-10-17T19:15:09.898547",
    "response_time": "1.81",
    "context": "{\"function_name\": \"maximum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 310,
    "solution": "def string_to_tuple(str1):\n    return tuple(str1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert a given string to a tuple of characters.\n\n### Signature\ndef string_to_tuple(str1):",
    "timestamp": "2025-10-17T19:15:11.875281",
    "response_time": "1.97",
    "context": "{\"function_name\": \"string_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 311,
    "solution": "def set_left_most_unset_bit(n):\n    # If all bits are set, return the number as is\n    if n & (n + 1) == 0:\n        return n\n    \n    # Find position of leftmost unset bit\n    pos = 0\n    temp = n\n    \n    # Find the number of bits in the number\n    while temp:\n        pos += 1\n        temp >>= 1\n        \n    # Check each bit from left to right\n    for i in range(pos-1, -1, -1):\n        # If current bit is 0, set it to 1\n        if not (n & (1 << i)):\n            n = n | (1 << i)\n            break\n            \n    return n",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to set the left most unset bit.\n\n### Signature\ndef set_left_most_unset_bit(n):",
    "timestamp": "2025-10-17T19:15:16.213357",
    "response_time": "4.33",
    "context": "{\"function_name\": \"set_left_most_unset_bit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 312,
    "solution": "import math\n\ndef volume_cone(r,h):\n    \"\"\"\n    Calculate the volume of a cone given radius and height\n    Args:\n        r (float): radius of the cone base\n        h (float): height of the cone\n    Returns:\n        float: volume of the cone\n    \"\"\"\n    volume = (1/3) * math.pi * r * r * h\n    return volume",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the volume of a cone.\n\n### Signature\ndef volume_cone(r,h):",
    "timestamp": "2025-10-17T19:15:19.530559",
    "response_time": "3.31",
    "context": "{\"function_name\": \"volume_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 388,
    "solution": "import math\n\ndef highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    return 2 ** int(math.log2(n))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\n### Signature\ndef highest_Power_of_2(n):",
    "timestamp": "2025-10-17T19:15:26.605892",
    "response_time": "7.07",
    "context": "{\"function_name\": \"highest_Power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 389,
    "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    \n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the n'th lucas number.\n\n### Signature\ndef find_lucas(n):",
    "timestamp": "2025-10-17T19:15:29.085168",
    "response_time": "2.47",
    "context": "{\"function_name\": \"find_lucas\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 390,
    "solution": "def add_string(list_, string):\n    \"\"\"\n    Apply a format string to all elements in a list.\n    \n    Args:\n        list_: List of elements to format\n        string: Format string to apply\n        \n    Returns:\n        List with format string applied to each element\n    \"\"\"\n    return [string.format(item) for item in list_]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to apply a given format string to all of the elements in a list.\n\n### Signature\ndef add_string(list_, string):",
    "timestamp": "2025-10-17T19:15:32.458372",
    "response_time": "3.37",
    "context": "{\"function_name\": \"add_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 391,
    "solution": "def convert_list_dictionary(l1, l2, l3):\n    result = {}\n    for i in range(len(l1)):\n        if i < len(l1) and i < len(l2) and i < len(l3):\n            if l1[i] not in result:\n                result[l1[i]] = {}\n            if l2[i] not in result[l1[i]]:\n                result[l1[i]][l2[i]] = []\n            result[l1[i]][l2[i]].append(l3[i])\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert more than one list to nested dictionary.\n\n### Signature\ndef convert_list_dictionary(l1, l2, l3):",
    "timestamp": "2025-10-17T19:15:35.791582",
    "response_time": "3.33",
    "context": "{\"function_name\": \"convert_list_dictionary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 392,
    "solution": "from math import floor\n\ndef get_max_sum (n):\n    # Create a dictionary to store memoized values\n    memo = {}\n    \n    def calculate_sum(num):\n        # Base cases\n        if num <= 0:\n            return 0\n        \n        # If already calculated, return from memo\n        if num in memo:\n            return memo[num]\n        \n        # Calculate sum of broken down parts\n        sum_parts = (calculate_sum(floor(num/2)) + \n                    calculate_sum(floor(num/3)) + \n                    calculate_sum(floor(num/4)) + \n                    calculate_sum(floor(num/5)))\n        \n        # Store maximum value in memo and return\n        memo[num] = max(num, sum_parts)\n        return memo[num]\n    \n    return calculate_sum(n)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n### Signature\ndef get_max_sum (n):",
    "timestamp": "2025-10-17T19:15:39.959597",
    "response_time": "4.16",
    "context": "{\"function_name\": \"get_max_sum \"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 393,
    "solution": "def max_length_list(input_list):\n    if not input_list:\n        return None\n    return max(input_list, key=len)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the list with maximum length.\n\n### Signature\ndef max_length_list(input_list):",
    "timestamp": "2025-10-17T19:15:41.708667",
    "response_time": "1.74",
    "context": "{\"function_name\": \"max_length_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 394,
    "solution": "def check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if given tuple contains no duplicates.\n\n### Signature\ndef check_distinct(test_tup):",
    "timestamp": "2025-10-17T19:15:42.886497",
    "response_time": "1.17",
    "context": "{\"function_name\": \"check_distinct\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 395,
    "solution": "from collections import OrderedDict\n\ndef first_non_repeating_character(str1):\n    char_count = OrderedDict()\n    \n    # Count occurrences of each character while maintaining order\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Find the first character with count 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n            \n    return None",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the first non-repeated character in a given string.\n\n### Signature\ndef first_non_repeating_character(str1):",
    "timestamp": "2025-10-17T19:15:46.241347",
    "response_time": "3.35",
    "context": "{\"function_name\": \"first_non_repeating_character\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 396,
    "solution": "def check_char(string):\n    if not string:  # Check if string is empty\n        return False\n    return string[0] == string[-1]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether the given string starts and ends with the same character or not.\n\n### Signature\ndef check_char(string):",
    "timestamp": "2025-10-17T19:15:48.672856",
    "response_time": "2.42",
    "context": "{\"function_name\": \"check_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 397,
    "solution": "def median_numbers(a,b,c):\n    # Sort the three numbers\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # Return the middle number\n    return numbers[1]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the median of three numbers.\n\n### Signature\ndef median_numbers(a,b,c):",
    "timestamp": "2025-10-17T19:15:50.591701",
    "response_time": "1.91",
    "context": "{\"function_name\": \"median_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 398,
    "solution": "def sum_of_digits(nums):\n    result = []\n    for num in nums:\n        # Convert number to positive if negative\n        num = abs(num)\n        # Convert to string to process each digit\n        digit_sum = sum(int(digit) for digit in str(num))\n        result.append(digit_sum)\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to compute the sum of digits of each number of a given list.\n\n### Signature\ndef sum_of_digits(nums):",
    "timestamp": "2025-10-17T19:15:53.346391",
    "response_time": "2.75",
    "context": "{\"function_name\": \"sum_of_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 399,
    "solution": "from operator import xor\nfrom functools import reduce\n\ndef bitwise_xor(test_tup1, test_tup2):\n    # Convert tuples to lists for easier manipulation\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Make sure both lists are of equal length by padding shorter one with zeros\n    max_len = max(len(list1), len(list2))\n    list1.extend([0] * (max_len - len(list1)))\n    list2.extend([0] * (max_len - len(list2)))\n    \n    # Perform XOR operation element by element\n    result = tuple(xor(x, y) for x, y in zip(list1, list2))\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\n### Signature\ndef bitwise_xor(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T19:15:58.207012",
    "response_time": "4.85",
    "context": "{\"function_name\": \"bitwise_xor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 400,
    "solution": "def extract_freq(test_list):\n    # Convert list of tuples to frozenset for hashable comparison\n    unique_tuples = set(map(tuple, test_list))\n    # Return count of unique tuples\n    return len(unique_tuples)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to extract the number of unique tuples in the given list.\n\n### Signature\ndef extract_freq(test_list):",
    "timestamp": "2025-10-17T19:16:00.346677",
    "response_time": "2.13",
    "context": "{\"function_name\": \"extract_freq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 401,
    "solution": "def add_nested_tuples(test_tup1, test_tup2):\n    # Convert nested tuples to list for manipulation\n    result = []\n    \n    # Iterate through both tuples simultaneously\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        # Create temporary list for inner tuple addition\n        temp = []\n        \n        # Add corresponding elements from inner tuples\n        for x, y in zip(tup1, tup2):\n            temp.append(x + y)\n            \n        # Convert inner list back to tuple and add to result\n        result.append(tuple(temp))\n    \n    # Convert final result back to tuple and return\n    return tuple(result)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n### Signature\ndef add_nested_tuples(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T19:16:06.433504",
    "response_time": "6.08",
    "context": "{\"function_name\": \"add_nested_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 404,
    "solution": "def minimum(a,b):\n    if a < b:\n        return a\n    return b",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the minimum of two numbers.\n\n### Signature\ndef minimum(a,b):",
    "timestamp": "2025-10-17T19:16:08.232679",
    "response_time": "1.79",
    "context": "{\"function_name\": \"minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 405,
    "solution": "def check_tuplex(tuplex, tuple1):\n    return tuplex in tuple1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether an element exists within a tuple.\n\n### Signature\ndef check_tuplex(tuplex,tuple1):",
    "timestamp": "2025-10-17T19:16:09.568349",
    "response_time": "1.33",
    "context": "{\"function_name\": \"check_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 406,
    "solution": "def find_Parity(x):\n    # Initialize parity to 0\n    parity = 0\n    \n    # Loop while x is not 0\n    while x:\n        # XOR the parity with 1\n        parity = parity ^ 1\n        # Right shift x by 1 to remove the last bit\n        x = x & (x - 1)\n    \n    # Return True if parity is odd (1), False if even (0)\n    return bool(parity)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find whether the parity of a given number is odd.\n\n### Signature\ndef find_Parity(x):",
    "timestamp": "2025-10-17T19:16:13.118020",
    "response_time": "3.54",
    "context": "{\"function_name\": \"find_Parity\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 407,
    "solution": "def rearrange_bigger(n):\n    # Convert number to list of digits\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Find the first pair of adjacent digits from right where left < right\n    i = length - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    # If no such pair found, return -1\n    if i < 0:\n        return -1\n    \n    # Find the smallest digit on the right side of digits[i]\n    # that is greater than digits[i]\n    j = length - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Swap the digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the subarray to the right of i\n    left = i + 1\n    right = length - 1\n    while left < right:\n        digits[left], digits[right] = digits[right], digits[left]\n        left += 1\n        right -= 1\n    \n    # Convert back to number\n    result = int(''.join(digits))\n    \n    return result if result > n else -1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\n### Signature\ndef rearrange_bigger(n):",
    "timestamp": "2025-10-17T19:16:17.187770",
    "response_time": "4.06",
    "context": "{\"function_name\": \"rearrange_bigger\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 408,
    "solution": "import heapq\nfrom typing import List\n\ndef push(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    if not nums1 or not nums2:\n        return []\n    \n    result = []\n    heap = []\n    visited = set()\n    \n    # Push the first pair and its indices to the heap\n    heapq.heappush(heap, (nums1[0] + nums2[0], 0, 0))\n    visited.add((0, 0))\n    \n    while heap and len(result) < k:\n        _, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        \n        # Try next element in nums1\n        if i + 1 < len(nums1) and (i + 1, j) not in visited:\n            heapq.heappush(heap, (nums1[i + 1] + nums2[j], i + 1, j))\n            visited.add((i + 1, j))\n            \n        # Try next element in nums2\n        if j + 1 < len(nums2) and (i, j + 1) not in visited:\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n            visited.add((i, j + 1))\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n### Signature\ndef k_smallest_pairs(nums1, nums2, k):",
    "timestamp": "2025-10-17T19:16:24.295649",
    "response_time": "7.10",
    "context": "{\"function_name\": \"push\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 409,
    "solution": "def min_product_tuple(list1):\n    if not list1 or len(list1) < 1:\n        return None\n    \n    min_prod = float('inf')\n    for tup in list1:\n        if len(tup) >= 2:\n            product = tup[0] * tup[1]\n            min_prod = min(min_prod, product)\n    \n    return min_prod if min_prod != float('inf') else None",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\n### Signature\ndef min_product_tuple(list1):",
    "timestamp": "2025-10-17T19:16:27.291125",
    "response_time": "2.98",
    "context": "{\"function_name\": \"min_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 410,
    "solution": "from typing import List, Union\n\ndef min_val(listval: List[Union[int, float, str]]) -> Union[int, float, str]:\n    if not listval:\n        raise ValueError(\"List cannot be empty\")\n    \n    min_value = listval[0]\n    for item in listval[1:]:\n        try:\n            if item < min_value:\n                min_value = item\n        except TypeError:\n            continue\n    \n    return min_value",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the minimum value in a given heterogeneous list.\n\n### Signature\ndef min_val(listval):",
    "timestamp": "2025-10-17T19:16:29.716824",
    "response_time": "2.42",
    "context": "{\"function_name\": \"min_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 411,
    "solution": "def snake_to_camel(word):\n    # Split the string by underscore\n    components = word.split('_')\n    \n    # First word remains lowercase, capitalize subsequent words\n    result = components[0] + ''.join(x.title() for x in components[1:])\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert the given snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
    "timestamp": "2025-10-17T19:16:31.812383",
    "response_time": "2.09",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 412,
    "solution": "def remove_odd(l):\n    return [num for num in l if num % 2 == 0]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to remove odd numbers from a given list.\n\n### Signature\ndef remove_odd(l):",
    "timestamp": "2025-10-17T19:16:32.984183",
    "response_time": "1.17",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 413,
    "solution": "from typing import List, Tuple, Any\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List[Any]:\n    return [tup[n] for tup in list1]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to extract the nth element from a given list of tuples.\n\n### Signature\ndef extract_nth_element(list1, n):",
    "timestamp": "2025-10-17T19:16:34.592313",
    "response_time": "1.60",
    "context": "{\"function_name\": \"extract_nth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 414,
    "solution": "def overlapping(list1, list2):\n    # Convert lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Check if there's any intersection between the sets\n    return bool(set1.intersection(set2))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\n### Signature\ndef overlapping(list1,list2):",
    "timestamp": "2025-10-17T19:16:37.049964",
    "response_time": "2.45",
    "context": "{\"function_name\": \"overlapping\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 415,
    "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max1 = arr[0]\n    max2 = float('-inf')\n    min1 = arr[0]\n    min2 = float('inf')\n    \n    for i in range(1, len(arr)):\n        # Update max values\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n            \n        # Update min values\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    \n    # Compare product of max numbers with product of min numbers\n    # (in case of negative numbers)\n    if max1 * max2 > min1 * min2:\n        return [max2, max1]\n    else:\n        return [min1, min2]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find a pair with highest product from a given array of integers.\n\n### Signature\ndef max_Product(arr):",
    "timestamp": "2025-10-17T19:16:42.043434",
    "response_time": "4.98",
    "context": "{\"function_name\": \"max_Product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 417,
    "solution": "def group_tuples(Input):\n    if not Input:  # Check if input list is empty\n        return None\n    \n    # Get first element from first tuple\n    first_element = Input[0][0] if Input[0] else None\n    \n    # Check if all tuples have same first element\n    for tup in Input:\n        if not tup or tup[0] != first_element:\n            return None\n    \n    return first_element",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find common first element in given list of tuple.\n\n### Signature\ndef group_tuples(Input):",
    "timestamp": "2025-10-17T19:16:46.398768",
    "response_time": "4.35",
    "context": "{\"function_name\": \"group_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 418,
    "solution": "def Find_Max(lst):\n    if not lst:\n        return None\n    \n    max_element = lst[0]\n    max_length = len(str(lst[0]))\n    \n    for item in lst:\n        current_length = len(str(item))\n        if current_length > max_length:\n            max_length = current_length\n            max_element = item\n    \n    return max_element",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the element of a list having maximum length.\n\n### Signature\ndef Find_Max(lst):",
    "timestamp": "2025-10-17T19:16:49.695128",
    "response_time": "3.29",
    "context": "{\"function_name\": \"Find_Max\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 419,
    "solution": "def round_and_sum(list1):\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(list1)\n    print(result)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\n### Signature\ndef round_and_sum(list1):",
    "timestamp": "2025-10-17T19:16:52.633586",
    "response_time": "2.93",
    "context": "{\"function_name\": \"round_and_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 420,
    "solution": "def cube_Sum(n):\n    sum = 0\n    count = 0\n    num = 2\n    \n    while count < n:\n        sum += num ** 3\n        num += 2\n        count += 1\n    \n    return sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the cube sum of first n even natural numbers.\n\n### Signature\ndef cube_Sum(n):",
    "timestamp": "2025-10-17T19:16:54.850041",
    "response_time": "2.21",
    "context": "{\"function_name\": \"cube_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 421,
    "solution": "def concatenate_tuple(test_tup):\n    return '-'.join(str(x) for x in test_tup)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to concatenate each element of tuple by the delimiter.\n\n### Signature\ndef concatenate_tuple(test_tup):",
    "timestamp": "2025-10-17T19:16:56.843170",
    "response_time": "1.99",
    "context": "{\"function_name\": \"concatenate_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 422,
    "solution": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0\n    \n    # Calculate sum of cubes of first n natural numbers\n    cube_sum = sum(i**3 for i in range(1, n+1))\n    \n    # Calculate average by dividing sum by n\n    average = cube_sum / n\n    \n    return average",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the average of cubes of first n natural numbers.\n\n### Signature\ndef find_Average_Of_Cube(n):",
    "timestamp": "2025-10-17T19:16:58.790780",
    "response_time": "1.94",
    "context": "{\"function_name\": \"find_Average_Of_Cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet",
    "dataset_row_id": 424,
    "solution": "def extract_rear(test_tuple):\n    return tuple(item[-1] for item in test_tuple)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to extract only the rear index element of each string in the given tuple.\n\n### Signature\ndef extract_rear(test_tuple):",
    "timestamp": "2025-10-17T19:17:00.042929",
    "response_time": "1.24",
    "context": "{\"function_name\": \"extract_rear\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 425,
    "solution": "def count_element_in_list(list1, x):\n    count = 0\n    for item in list1:\n        if isinstance(item, list):\n            if x in item:\n                count += 1\n        elif item == x:\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to count the number of sublists containing a particular element.\n\n### Signature\ndef count_element_in_list(list1, x):",
    "timestamp": "2025-10-17T19:07:25.032684",
    "response_time": "3.06",
    "context": "{\"function_name\": \"count_element_in_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 426,
    "solution": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to filter odd numbers.\n\n### Signature\ndef filter_oddnumbers(nums):",
    "timestamp": "2025-10-17T19:07:27.012866",
    "response_time": "1.98",
    "context": "{\"function_name\": \"filter_oddnumbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 427,
    "solution": "from datetime import datetime\n\ndef change_date_format(dt):\n    try:\n        # Parse the input date string\n        date_obj = datetime.strptime(dt, '%Y-%m-%d')\n        # Convert to desired format\n        return date_obj.strftime('%d-%m-%Y')\n    except ValueError:\n        return \"Invalid date format\"",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n### Signature\ndef change_date_format(dt):",
    "timestamp": "2025-10-17T19:07:30.092687",
    "response_time": "3.08",
    "context": "{\"function_name\": \"change_date_format\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 428,
    "solution": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sort the given array by using shell sort.\n\n### Signature\ndef shell_sort(my_list):",
    "timestamp": "2025-10-17T19:07:33.721575",
    "response_time": "3.63",
    "context": "{\"function_name\": \"shell_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 429,
    "solution": "def and_tuples(test_tup1, test_tup2):\n    # Convert tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert back to tuple\n    result = tuple(common_elements)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\n### Signature\ndef and_tuples(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T19:07:35.778918",
    "response_time": "2.06",
    "context": "{\"function_name\": \"and_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 430,
    "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola given its quadratic equation in the form ax\u00b2 + bx + c\n    Returns the y-coordinate of the directrix line\n    \n    Parameters:\n    a (float): coefficient of x\u00b2\n    b (float): coefficient of x\n    c (float): constant term\n    \n    Returns:\n    float: y-coordinate of the directrix\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"Not a parabola: coefficient of x\u00b2 must not be zero\")\n        \n    # Find vertex coordinates\n    h = -b / (2*a)  # x-coordinate of vertex\n    k = a*h*h + b*h + c  # y-coordinate of vertex\n    \n    # Find focal length (p)\n    p = 1/(4*a)\n    \n    # Directrix is p units below vertex for a > 0\n    # and p units above vertex for a < 0\n    directrix = k - p if a > 0 else k + p\n    \n    return directrix",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the directrix of a parabola.\n\n### Signature\ndef parabola_directrix(a, b, c):",
    "timestamp": "2025-10-17T19:07:40.290691",
    "response_time": "4.51",
    "context": "{\"function_name\": \"parabola_directrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 431,
    "solution": "def common_element(list1, list2):\n    # Convert lists to sets for efficient comparison\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Return True if intersection is not empty\n    return bool(set1.intersection(set2))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes two lists and returns true if they have at least one common element.\n\n### Signature\ndef common_element(list1, list2):",
    "timestamp": "2025-10-17T19:07:42.580003",
    "response_time": "2.29",
    "context": "{\"function_name\": \"common_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 432,
    "solution": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium.\n    The median length is the line segment parallel to the bases that connects the midpoints of the non-parallel sides.\n    \n    Args:\n        base1 (float): Length of first parallel side\n        base2 (float): Length of second parallel side\n        height (float): Height of the trapezium\n        \n    Returns:\n        float: Length of the median\n    \"\"\"\n    return (base1 + base2) / 2",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the median length of a trapezium.\n\n### Signature\ndef median_trapezium(base1,base2,height):",
    "timestamp": "2025-10-17T19:07:45.011677",
    "response_time": "2.43",
    "context": "{\"function_name\": \"median_trapezium\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 433,
    "solution": "def check_greater(arr, number):\n    for element in arr:\n        if number <= element:\n            return False\n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\n### Signature\ndef check_greater(arr, number):",
    "timestamp": "2025-10-17T19:07:46.822020",
    "response_time": "1.81",
    "context": "{\"function_name\": \"check_greater\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 434,
    "solution": "import re\n\ndef text_match_one(text):\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by one or more b's.\n\n### Signature\ndef text_match_one(text):",
    "timestamp": "2025-10-17T19:07:48.184870",
    "response_time": "1.36",
    "context": "{\"function_name\": \"text_match_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 435,
    "solution": "def last_Digit(n):\n    # Convert negative numbers to positive\n    n = abs(n)\n    # Return the last digit using modulo operator\n    return n % 10",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the last digit of a given number.\n\n### Signature\ndef last_Digit(n) :",
    "timestamp": "2025-10-17T19:07:49.789544",
    "response_time": "1.60",
    "context": "{\"function_name\": \"last_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 436,
    "solution": "def neg_nos(list1):\n    return [num for num in list1 if num < 0]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to return the negative numbers in a list.\n\n### Signature\ndef neg_nos(list1):",
    "timestamp": "2025-10-17T19:07:52.006987",
    "response_time": "2.21",
    "context": "{\"function_name\": \"neg_nos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 437,
    "solution": "def remove_odd(str1):\n    # Return empty string if input is empty\n    if not str1:\n        return \"\"\n    \n    # Create a new string with characters at even indices (0-based)\n    return str1[::2]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to remove odd characters in a string.\n\n### Signature\ndef remove_odd(str1):",
    "timestamp": "2025-10-17T19:07:53.783641",
    "response_time": "1.77",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 438,
    "solution": "def count_bidirectional(test_list):\n    # Create a set to store unique bidirectional pairs\n    bidirectional_pairs = set()\n    \n    # Count for bidirectional pairs\n    count = 0\n    \n    # Iterate through each tuple in the list\n    for pair in test_list:\n        # Create reverse of current tuple\n        reverse_pair = (pair[1], pair[0])\n        \n        # If either pair or its reverse is not in set\n        if pair not in bidirectional_pairs and reverse_pair not in bidirectional_pairs:\n            bidirectional_pairs.add(pair)\n        else:\n            # If found a bidirectional pair, increment count\n            if pair not in bidirectional_pairs:\n                count += 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to count bidirectional tuple pairs.\n\n### Signature\ndef count_bidirectional(test_list):",
    "timestamp": "2025-10-17T19:07:58.614949",
    "response_time": "4.83",
    "context": "{\"function_name\": \"count_bidirectional\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 439,
    "solution": "def multiple_to_single(L):\n    # Convert each integer to string and join them\n    return int(''.join(map(str, L)))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to join a list of multiple integers into a single integer.\n\n### Signature\ndef multiple_to_single(L):",
    "timestamp": "2025-10-17T19:08:00.832700",
    "response_time": "2.22",
    "context": "{\"function_name\": \"multiple_to_single\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 440,
    "solution": "import re\n\ndef find_adverb_position(text):\n    # Common adverb endings pattern\n    adverb_pattern = r'\\b\\w+ly\\b'\n    \n    # Find the first match\n    match = re.search(adverb_pattern, text)\n    \n    if match:\n        # Return tuple with adverb and its position\n        return (match.group(), match.start())\n    else:\n        # Return None if no adverb is found\n        return None",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the first adverb and their positions in a given sentence.\n\n### Signature\ndef find_adverb_position(text):",
    "timestamp": "2025-10-17T19:08:04.983298",
    "response_time": "4.15",
    "context": "{\"function_name\": \"find_adverb_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 441,
    "solution": "def surfacearea_cube(l):\n    \"\"\"\n    Calculate the surface area of a cube given its length.\n    \n    Args:\n        l (int/float): Length of one side of the cube\n        \n    Returns:\n        float: Surface area of the cube\n    \"\"\"\n    return 6 * l * l",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cube of a given size.\n\n### Signature\ndef surfacearea_cube(l):",
    "timestamp": "2025-10-17T19:08:08.025296",
    "response_time": "3.04",
    "context": "{\"function_name\": \"surfacearea_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 442,
    "solution": "def positive_count(nums):\n    if not nums:\n        return 0\n    \n    positive_numbers = sum(1 for num in nums if num > 0)\n    return positive_numbers / len(nums)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the ration of positive numbers in an array of integers.\n\n### Signature\ndef positive_count(nums):",
    "timestamp": "2025-10-17T19:08:09.591389",
    "response_time": "1.56",
    "context": "{\"function_name\": \"positive_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 443,
    "solution": "def largest_neg(list1):\n    # Initialize with None to handle cases where no negative numbers exist\n    largest_negative = None\n    \n    # Iterate through the list\n    for num in list1:\n        # Check if the number is negative\n        if num < 0:\n            # Update largest_negative if it's None or if current number is larger\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n    \n    return largest_negative",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the largest negative number from the given list.\n\n### Signature\ndef largest_neg(list1):",
    "timestamp": "2025-10-17T19:08:13.093840",
    "response_time": "3.50",
    "context": "{\"function_name\": \"largest_neg\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 444,
    "solution": "def trim_tuple(test_list, K):\n    # Return empty list if input list is empty\n    if not test_list:\n        return []\n    \n    # Process each tuple in the list\n    result = []\n    for tup in test_list:\n        # If K is greater than or equal to tuple length, skip this tuple\n        if K >= len(tup):\n            continue\n        # Add trimmed tuple (removing K elements from start and end)\n        result.append(tup[K:-K] if K > 0 else tup)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to trim each tuple by k in the given tuple list.\n\n### Signature\ndef trim_tuple(test_list, K):",
    "timestamp": "2025-10-17T19:08:16.115021",
    "response_time": "3.02",
    "context": "{\"function_name\": \"trim_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 445,
    "solution": "def index_multiplication(test_tup1, test_tup2):\n    # Convert tuples to lists for easier manipulation\n    result = []\n    \n    # Get the minimum length of both tuples to avoid index out of range\n    min_length = min(len(test_tup1), len(test_tup2))\n    \n    # Multiply elements at corresponding indices\n    for i in range(min_length):\n        result.append(test_tup1[i] * test_tup2[i])\n    \n    # Convert back to tuple and return\n    return tuple(result)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n### Signature\ndef index_multiplication(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T19:08:20.025601",
    "response_time": "3.91",
    "context": "{\"function_name\": \"index_multiplication\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 446,
    "solution": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    # Convert list to Counter object to get frequency of each element\n    lst_counter = Counter(lst)\n    \n    # Create a list to store counts of each tuple element\n    result = []\n    \n    # For each element in tuple, get its count from list\n    for item in tup:\n        count = lst_counter.get(item, 0)\n        result.append(count)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count the occurence of all elements of list in a tuple.\n\n### Signature\ndef count_Occurrence(tup, lst):",
    "timestamp": "2025-10-17T19:08:24.191514",
    "response_time": "4.16",
    "context": "{\"function_name\": \"count_Occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 447,
    "solution": "def cube_nums(nums):\n    \"\"\"\n    Returns a list containing cubes of individual elements from the input list.\n    \n    Args:\n        nums: List of numbers\n    Returns:\n        List containing cubes of input numbers\n    \"\"\"\n    return [num ** 3 for num in nums]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find cubes of individual elements in a list.\n\n### Signature\ndef cube_nums(nums):",
    "timestamp": "2025-10-17T19:08:27.114369",
    "response_time": "2.92",
    "context": "{\"function_name\": \"cube_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 448,
    "solution": "def cal_sum(n):\n    if n <= 0:\n        return 0\n    \n    # Initialize first three numbers of Perrin sequence\n    p0, p1, p2 = 3, 0, 2\n    perrin_sum = p0 + p1 + p2\n    \n    if n <= 3:\n        return sum([p0, p1, p2][:n])\n    \n    # Calculate remaining Perrin numbers and their sum\n    for i in range(3, n):\n        # Next Perrin number is sum of numbers at (n-3) and (n-2) positions\n        next_num = p0 + p1\n        perrin_sum += next_num\n        # Update values for next iteration\n        p0, p1, p2 = p1, p2, next_num\n    \n    return perrin_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to calculate the sum of perrin numbers.\n\n### Signature\ndef cal_sum(n):",
    "timestamp": "2025-10-17T19:08:32.882050",
    "response_time": "5.76",
    "context": "{\"function_name\": \"cal_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 450,
    "solution": "def extract_string(str_list, l):\n    \"\"\"\n    Extract strings of specified length from a list of strings\n    \n    Args:\n        str_list: List of strings to process\n        l: Length of strings to extract\n        \n    Returns:\n        List containing strings of specified length\n    \"\"\"\n    return [s for s in str_list if len(s) == l]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to extract specified size of strings from a given list of string values.\n\n### Signature\ndef extract_string(str, l):",
    "timestamp": "2025-10-17T19:08:34.918670",
    "response_time": "2.04",
    "context": "{\"function_name\": \"extract_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 451,
    "solution": "def remove_whitespaces(text1):\n    return ''.join(text1.split())",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from the given string.\n\n### Signature\ndef remove_whitespaces(text1):",
    "timestamp": "2025-10-17T19:08:36.166302",
    "response_time": "1.25",
    "context": "{\"function_name\": \"remove_whitespaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 452,
    "solution": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    return 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n### Signature\ndef loss_amount(actual_cost,sale_amount):",
    "timestamp": "2025-10-17T19:08:38.308645",
    "response_time": "2.14",
    "context": "{\"function_name\": \"loss_amount\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 453,
    "solution": "def sumofFactors(n):\n    # Initialize sum of factors\n    sum = 0\n    \n    # Check for all numbers from 1 to n\n    for i in range(1, n + 1):\n        # If i is a factor of n and is even\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n            \n    return sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the sum of even factors of a number.\n\n### Signature\ndef sumofFactors(n) :",
    "timestamp": "2025-10-17T19:08:41.561575",
    "response_time": "3.25",
    "context": "{\"function_name\": \"sumofFactors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 454,
    "solution": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\w*z\\w*'\n    if re.search(pattern, text):\n        return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that matches a word containing 'z'.\n\n### Signature\ndef text_match_wordz(text):",
    "timestamp": "2025-10-17T19:08:43.751043",
    "response_time": "2.19",
    "context": "{\"function_name\": \"text_match_wordz\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 455,
    "solution": "def check_monthnumb_number(monthnum2):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the month number is valid (between 1 and 12)\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    \n    # Check if the month has 31 days\n    return monthnum2 in months_with_31_days",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 31 days or not.\n\n### Signature\ndef check_monthnumb_number(monthnum2):",
    "timestamp": "2025-10-17T19:08:47.252698",
    "response_time": "3.50",
    "context": "{\"function_name\": \"check_monthnumb_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 456,
    "solution": "def reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to reverse each string in a given list of string values.\n\n### Signature\ndef reverse_string_list(stringlist):",
    "timestamp": "2025-10-17T19:08:48.697597",
    "response_time": "1.44",
    "context": "{\"function_name\": \"reverse_string_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 457,
    "solution": "def Find_Min(lst):\n    if not lst:\n        return None\n    \n    min_length = float('inf')\n    min_sublist = None\n    \n    for item in lst:\n        if isinstance(item, (list, tuple)):\n            current_length = len(item)\n            if current_length < min_length:\n                min_length = current_length\n                min_sublist = item\n    \n    return min_sublist",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the sublist having minimum length.\n\n### Signature\ndef Find_Min(lst):",
    "timestamp": "2025-10-17T19:08:51.314189",
    "response_time": "2.61",
    "context": "{\"function_name\": \"Find_Min\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 458,
    "solution": "def rectangle_area(l,b):\n    \"\"\"\n    Calculate the area of a rectangle.\n    \n    Args:\n        l (float): Length of the rectangle\n        b (float): Breadth of the rectangle\n    \n    Returns:\n        float: Area of the rectangle\n    \"\"\"\n    return l * b",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the area of a rectangle.\n\n### Signature\ndef rectangle_area(l,b):",
    "timestamp": "2025-10-17T19:08:54.162305",
    "response_time": "2.85",
    "context": "{\"function_name\": \"rectangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 459,
    "solution": "def remove_uppercase(str1):\n    if not str1:\n        return \"\"\n    \n    result = []\n    i = 0\n    while i < len(str1):\n        # If current character is not uppercase, add it to result\n        if not str1[i].isupper():\n            result.append(str1[i])\n            i += 1\n        else:\n            # Skip all consecutive uppercase characters\n            while i < len(str1) and str1[i].isupper():\n                i += 1\n    \n    return \"\".join(result)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to remove uppercase substrings from a given string.\n\n### Signature\ndef remove_uppercase(str1):",
    "timestamp": "2025-10-17T19:08:57.987762",
    "response_time": "3.82",
    "context": "{\"function_name\": \"remove_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 460,
    "solution": "def Extract(lst):\n    return [item[0] for item in lst if item]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to get the first element of each sublist.\n\n### Signature\ndef Extract(lst):",
    "timestamp": "2025-10-17T19:08:59.903818",
    "response_time": "1.91",
    "context": "{\"function_name\": \"Extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 461,
    "solution": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count the upper case characters in a given string.\n\n### Signature\ndef upper_ctr(str):",
    "timestamp": "2025-10-17T19:09:01.644079",
    "response_time": "1.74",
    "context": "{\"function_name\": \"upper_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 462,
    "solution": "from itertools import combinations\n\ndef combinations_list(list1):\n    all_combinations = []\n    for r in range(1, len(list1) + 1):\n        all_combinations.extend(list(combinations(list1, r)))\n    return all_combinations",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find all possible combinations of the elements of a given list.\n\n### Signature\ndef combinations_list(list1):",
    "timestamp": "2025-10-17T19:09:03.869737",
    "response_time": "2.22",
    "context": "{\"function_name\": \"combinations_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 463,
    "solution": "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    max_product = arr[0]\n    curr_max = arr[0]\n    curr_min = arr[0]\n    \n    for i in range(1, n):\n        # Store the current max since we'll update it\n        temp = curr_max\n        \n        # Compare current number with products of current number with \n        # previous max and min\n        curr_max = max(arr[i], max(curr_max * arr[i], curr_min * arr[i]))\n        curr_min = min(arr[i], min(temp * arr[i], curr_min * arr[i]))\n        \n        # Update global maximum\n        max_product = max(max_product, curr_max)\n    \n    return max_product",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the maximum product subarray of the given array.\n\n### Signature\ndef max_subarray_product(arr):",
    "timestamp": "2025-10-17T19:09:08.242412",
    "response_time": "4.37",
    "context": "{\"function_name\": \"max_subarray_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 464,
    "solution": "def check_value(dict, n):\n    # Get the first value from the dictionary\n    first_value = next(iter(dict.values()))\n    \n    # Compare all values with the first value\n    for value in dict.values():\n        if value != first_value:\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if all values are same in a dictionary.\n\n### Signature\ndef check_value(dict, n):",
    "timestamp": "2025-10-17T19:09:10.609262",
    "response_time": "2.37",
    "context": "{\"function_name\": \"check_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 465,
    "solution": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None and v != \"\" and v != [] and v != {}}",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to drop empty items from a given dictionary.\n\n### Signature\ndef drop_empty(dict1):",
    "timestamp": "2025-10-17T19:09:12.434097",
    "response_time": "1.82",
    "context": "{\"function_name\": \"drop_empty\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 468,
    "solution": "def max_product(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    # dp[i] stores the maximum product ending at index i\n    dp = [1] * n\n    \n    # Initialize dp with the numbers themselves\n    for i in range(n):\n        dp[i] = arr[i]\n    \n    # For each position, check all previous positions\n    for i in range(1, n):\n        for j in range(i):\n            # If current number is greater than previous number\n            if arr[i] > arr[j]:\n                # Update dp[i] if product with previous subsequence gives larger value\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    \n    # Return the maximum value in dp array\n    return max(dp)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n### Signature\ndef max_product(arr):",
    "timestamp": "2025-10-17T19:09:18.649147",
    "response_time": "6.21",
    "context": "{\"function_name\": \"max_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 470,
    "solution": "def add_pairwise(test_tup):\n    # Convert tuple to list for easier manipulation\n    result = []\n    \n    # Iterate through tuple elements up to second-to-last element\n    for i in range(len(test_tup) - 1):\n        # Add current element with next element\n        pair_sum = test_tup[i] + test_tup[i + 1]\n        result.append(pair_sum)\n    \n    # Convert result back to tuple and return\n    return tuple(result)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n### Signature\ndef add_pairwise(test_tup):",
    "timestamp": "2025-10-17T19:09:22.052077",
    "response_time": "3.40",
    "context": "{\"function_name\": \"add_pairwise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 471,
    "solution": "def find_remainder(arr, n):\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the product of the array multiplication modulo n.\n\n### Signature\ndef find_remainder(arr, n):",
    "timestamp": "2025-10-17T19:09:23.765213",
    "response_time": "1.71",
    "context": "{\"function_name\": \"find_remainder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 472,
    "solution": "def check_Consecutive(l):\n    # Sort the list first\n    l = sorted(l)\n    \n    # Check if each element is consecutive\n    for i in range(1, len(l)):\n        if l[i] - l[i-1] != 1:\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\n### Signature\ndef check_Consecutive(l):",
    "timestamp": "2025-10-17T19:09:26.503735",
    "response_time": "2.74",
    "context": "{\"function_name\": \"check_Consecutive\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 473,
    "solution": "def tuple_intersection(test_list1, test_list2):\n    # Convert tuples in lists to sets for order-independent comparison\n    set_list1 = [set(t) for t in test_list1]\n    set_list2 = [set(t) for t in test_list2]\n    \n    # Find common elements using set intersection\n    common_sets = []\n    for s1 in set_list1:\n        if s1 in set_list2:\n            # Convert back to tuple and add to result\n            common_sets.append(tuple(sorted(s1)))\n    \n    return common_sets",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n### Signature\ndef tuple_intersection(test_list1, test_list2):",
    "timestamp": "2025-10-17T19:09:31.447521",
    "response_time": "4.94",
    "context": "{\"function_name\": \"tuple_intersection\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 474,
    "solution": "def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to replace characters in a string.\n\n### Signature\ndef replace_char(str1,ch,newch):",
    "timestamp": "2025-10-17T19:09:32.842749",
    "response_time": "1.39",
    "context": "{\"function_name\": \"replace_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 475,
    "solution": "def sort_counter(dict1):\n    return dict(sorted(dict1.items(), key=lambda x: x[1]))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sort a dictionary by value.\n\n### Signature\ndef sort_counter(dict1):",
    "timestamp": "2025-10-17T19:09:34.878176",
    "response_time": "2.03",
    "context": "{\"function_name\": \"sort_counter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 476,
    "solution": "def big_sum(nums):\n    if not nums:\n        return 0\n    return max(nums) + min(nums)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\n### Signature\ndef big_sum(nums):",
    "timestamp": "2025-10-17T19:09:36.876212",
    "response_time": "2.00",
    "context": "{\"function_name\": \"big_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 477,
    "solution": "def is_lower(string):\n    return string.lower()",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to convert the given string to lower case.\n\n### Signature\ndef is_lower(string):",
    "timestamp": "2025-10-17T19:09:40.106887",
    "response_time": "3.23",
    "context": "{\"function_name\": \"is_lower\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 478,
    "solution": "def remove_lowercase(str1):\n    if not str1:\n        return \"\"\n    \n    result = []\n    i = 0\n    while i < len(str1):\n        # If current character is uppercase, keep it\n        if str1[i].isupper():\n            result.append(str1[i])\n            i += 1\n        else:\n            # Skip all lowercase characters\n            while i < len(str1) and str1[i].islower():\n                i += 1\n    \n    return \"\".join(result)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to remove lowercase substrings from a given string.\n\n### Signature\ndef remove_lowercase(str1):",
    "timestamp": "2025-10-17T19:09:42.575403",
    "response_time": "2.47",
    "context": "{\"function_name\": \"remove_lowercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 479,
    "solution": "def first_Digit(n) :\n    # Convert number to absolute value to handle negative numbers\n    n = abs(n)\n    \n    # Keep dividing by 10 until we get a single digit\n    while n >= 10:\n        n = n // 10\n        \n    return n",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the first digit of a given number.\n\n### Signature\ndef first_Digit(n) :",
    "timestamp": "2025-10-17T19:09:45.169666",
    "response_time": "2.59",
    "context": "{\"function_name\": \"first_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 554,
    "solution": "def Split(list):\n    return [num for num in list if num % 2 != 0]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and only returns the odd ones.\n\n### Signature\ndef Split(list):",
    "timestamp": "2025-10-17T19:09:47.264067",
    "response_time": "2.09",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 555,
    "solution": "def difference(n) :\n    # Calculate sum of cubes of first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    \n    # Calculate sum of first n natural numbers\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    \n    # Return the difference\n    return sum_of_cubes - sum_of_numbers",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n### Signature\ndef difference(n) :",
    "timestamp": "2025-10-17T19:09:51.102169",
    "response_time": "3.83",
    "context": "{\"function_name\": \"difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 556,
    "solution": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose xor value is odd.\n\n### Signature\ndef find_Odd_Pair(A,N) :",
    "timestamp": "2025-10-17T19:09:53.396586",
    "response_time": "2.29",
    "context": "{\"function_name\": \"find_Odd_Pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 557,
    "solution": "def toggle_string(string):\n    return string.swapcase()",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to toggle the case of all characters in a string.\n\n### Signature\ndef toggle_string(string):",
    "timestamp": "2025-10-17T19:09:54.501026",
    "response_time": "1.10",
    "context": "{\"function_name\": \"toggle_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 558,
    "solution": "def digit_distance_nums(n1, n2):\n    # Convert numbers to strings for digit manipulation\n    str1 = str(abs(n1))\n    str2 = str(abs(n2))\n    \n    # Make strings equal length by padding with zeros\n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    \n    # Calculate sum of absolute differences between corresponding digits\n    total = sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str1, str2))\n    \n    return total",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the sum of the per-digit difference between two integers.\n\n### Signature\ndef digit_distance_nums(n1, n2):",
    "timestamp": "2025-10-17T19:09:59.136565",
    "response_time": "4.63",
    "context": "{\"function_name\": \"digit_distance_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 559,
    "solution": "def max_sub_array_sum(a, size):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        \n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            \n        if max_ending_here < 0:\n            max_ending_here = 0\n            \n    return max_so_far",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n\n### Signature\ndef max_sub_array_sum(a, size):",
    "timestamp": "2025-10-17T19:10:01.624609",
    "response_time": "2.48",
    "context": "{\"function_name\": \"max_sub_array_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 560,
    "solution": "def union_elements(test_tup1, test_tup2):\n    # Convert tuples to sets and perform union\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # Convert back to sorted tuple\n    return tuple(sorted(union_set))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n\n### Signature\ndef union_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T19:10:03.460832",
    "response_time": "1.83",
    "context": "{\"function_name\": \"union_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 562,
    "solution": "def Find_Max_Length(lst):\n    if not lst:\n        return 0\n    max_length = 0\n    for item in lst:\n        if isinstance(item, list):\n            current_length = len(item)\n            max_length = max(max_length, current_length)\n    return max_length",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest sublists.\n\n### Signature\ndef Find_Max_Length(lst):",
    "timestamp": "2025-10-17T19:10:05.337713",
    "response_time": "1.87",
    "context": "{\"function_name\": \"Find_Max_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 563,
    "solution": "import re\n\ndef extract_values(text):\n    pattern = r'[\"\\']([^\"\\']*)[\"\\']'\n    matches = re.findall(pattern, text)\n    return matches",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks from a string.\n\n### Signature\ndef extract_values(text):",
    "timestamp": "2025-10-17T19:10:07.321165",
    "response_time": "1.98",
    "context": "{\"function_name\": \"extract_values\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 564,
    "solution": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n### Signature\ndef count_Pairs(arr,n):",
    "timestamp": "2025-10-17T19:10:10.200234",
    "response_time": "2.87",
    "context": "{\"function_name\": \"count_Pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 565,
    "solution": "def split(word):\n    return list(word)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to split a string into characters.\n\n### Signature\ndef split(word):",
    "timestamp": "2025-10-17T19:10:11.974453",
    "response_time": "1.77",
    "context": "{\"function_name\": \"split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 566,
    "solution": "def sum_digits(n):\n    if n == 0:\n        return 0\n    return sum(int(digit) for digit in str(n))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to get the sum of the digits of a non-negative integer.\n\n### Signature\ndef sum_digits(n):",
    "timestamp": "2025-10-17T19:10:13.720087",
    "response_time": "1.74",
    "context": "{\"function_name\": \"sum_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 567,
    "solution": "def issort_list(list1):\n    if len(list1) <= 1:\n        return True\n    \n    # Check if list is sorted in ascending order\n    is_ascending = all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\n    \n    # Check if list is sorted in descending order\n    is_descending = all(list1[i] >= list1[i + 1] for i in range(len(list1) - 1))\n    \n    return is_ascending or is_descending",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether a specified list is sorted or not.\n\n### Signature\ndef issort_list(list1):",
    "timestamp": "2025-10-17T19:10:17.269217",
    "response_time": "3.55",
    "context": "{\"function_name\": \"issort_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 568,
    "solution": "def empty_list(length):\n    return [{} for _ in range(length)]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to create a list of N empty dictionaries.\n\n### Signature\ndef empty_list(length):",
    "timestamp": "2025-10-17T19:10:19.129715",
    "response_time": "1.86",
    "context": "{\"function_name\": \"empty_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 569,
    "solution": "def sort_sublists(list1):\n    return [sorted(sublist) for sublist in list1]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(list1):",
    "timestamp": "2025-10-17T19:10:20.872411",
    "response_time": "1.74",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 572,
    "solution": "def two_unique_nums(nums):\n    # Convert list to set to remove duplicates and back to list\n    unique_nums = list(set(nums))\n    return unique_nums",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to remove duplicate numbers from a given number of lists.\n\n### Signature\ndef two_unique_nums(nums):",
    "timestamp": "2025-10-17T19:10:22.730556",
    "response_time": "1.85",
    "context": "{\"function_name\": \"two_unique_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 573,
    "solution": "from typing import List\n\ndef unique_product(list_data):\n    # Convert list to set to get unique numbers\n    unique_numbers = set(list_data)\n    \n    # Initialize product as 1\n    product = 1\n    \n    # Multiply all unique numbers\n    for num in unique_numbers:\n        product *= num\n    \n    return product",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to calculate the product of the unique numbers in a given list.\n\n### Signature\ndef unique_product(list_data):",
    "timestamp": "2025-10-17T19:10:24.742148",
    "response_time": "2.01",
    "context": "{\"function_name\": \"unique_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 574,
    "solution": "import math\n\ndef surfacearea_cylinder(r,h):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n    \n    Args:\n        r (float): radius of the cylinder\n        h (float): height of the cylinder\n        \n    Returns:\n        float: total surface area of the cylinder\n    \"\"\"\n    # Surface area = 2\u03c0r\u00b2 + 2\u03c0rh\n    # where r is radius and h is height\n    \n    circle_area = 2 * math.pi * (r ** 2)  # area of top and bottom circles\n    lateral_area = 2 * math.pi * r * h     # lateral surface area\n    total_area = circle_area + lateral_area\n    \n    return total_area",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cylinder.\n\n### Signature\ndef surfacearea_cylinder(r,h):",
    "timestamp": "2025-10-17T19:10:27.685394",
    "response_time": "2.94",
    "context": "{\"function_name\": \"surfacearea_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 576,
    "solution": "def is_Sub_Array(A, B):\n    if not B:  # If B is empty, it's considered a sublist\n        return True\n    \n    if len(B) > len(A):  # If B is longer than A, it can't be a sublist\n        return False\n    \n    # Check for sublist by comparing slices of A with B\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    \n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether a list is sublist of another or not.\n\n### Signature\ndef is_Sub_Array(A,B):",
    "timestamp": "2025-10-17T19:10:31.924653",
    "response_time": "4.24",
    "context": "{\"function_name\": \"is_Sub_Array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 577,
    "solution": "def last_Digit_Factorial(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n        \n    factorial = 1\n    for i in range(2, n + 1):\n        factorial = (factorial * i) % 10\n        \n    return factorial",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the last digit in factorial of a given number.\n\n### Signature\ndef last_Digit_Factorial(n):",
    "timestamp": "2025-10-17T19:10:35.021016",
    "response_time": "3.09",
    "context": "{\"function_name\": \"last_Digit_Factorial\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 578,
    "solution": "def interleave_lists(list1,list2,list3):\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i], list2[i], list3[i]])\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to interleave 3 lists of the same length into a single flat list.\n\n### Signature\ndef interleave_lists(list1,list2,list3):",
    "timestamp": "2025-10-17T19:10:37.833544",
    "response_time": "2.81",
    "context": "{\"function_name\": \"interleave_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 579,
    "solution": "def find_dissimilar(test_tup1, test_tup2):\n    # Convert tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find symmetric difference between sets\n    dissimilar = set1.symmetric_difference(set2)\n    \n    # Convert result back to tuple and return\n    return tuple(dissimilar)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the dissimilar elements in the given two tuples.\n\n### Signature\ndef find_dissimilar(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T19:10:39.966899",
    "response_time": "2.13",
    "context": "{\"function_name\": \"find_dissimilar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 580,
    "solution": "def extract_even(test_tuple, even_fnc):\n    if isinstance(test_tuple, tuple):\n        return tuple(even_ele(item, even_fnc) for item in test_tuple if not isinstance(item, (int, float)) or even_fnc(item))\n    return test_tuple",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to remove uneven elements in the nested mixed tuple.\n\n### Signature\ndef even_ele(test_tuple, even_fnc):",
    "timestamp": "2025-10-17T19:10:42.586084",
    "response_time": "2.62",
    "context": "{\"function_name\": \"extract_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 581,
    "solution": "import math\n\ndef surface_Area(b, s):\n    \"\"\"\n    Calculate the surface area of a square pyramid\n    b: length of base edge\n    s: slant height (height of triangular face)\n    \"\"\"\n    # Area of square base\n    base_area = b * b\n    \n    # Area of four triangular faces\n    triangular_faces_area = 2 * b * s\n    \n    # Total surface area\n    total_surface_area = base_area + triangular_faces_area\n    \n    return total_surface_area",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\n### Signature\ndef surface_Area(b,s):",
    "timestamp": "2025-10-17T19:10:45.089055",
    "response_time": "2.50",
    "context": "{\"function_name\": \"surface_Area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 582,
    "solution": "def my_dict(dict1):\n    return len(dict1) == 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if a dictionary is empty\n\n### Signature\ndef my_dict(dict1):",
    "timestamp": "2025-10-17T19:10:46.144953",
    "response_time": "1.05",
    "context": "{\"function_name\": \"my_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 583,
    "solution": "def catalan_number(num):\n    if num <= 1:\n        return 1\n    \n    # Initialize first catalan number\n    catalan = [0] * (num + 1)\n    catalan[0] = catalan[1] = 1\n    \n    # Calculate subsequent catalan numbers\n    for i in range(2, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-1-j]\n            \n    return catalan[num]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function which returns nth catalan number.\n\n### Signature\ndef catalan_number(num):",
    "timestamp": "2025-10-17T19:10:50.467680",
    "response_time": "4.32",
    "context": "{\"function_name\": \"catalan_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 584,
    "solution": "def find_adverbs(text):\n    if not text:\n        return None, -1, -1\n    \n    words = text.split()\n    for i, word in enumerate(words):\n        if word.endswith('ly'):\n            # Calculate start and end positions\n            start = len(' '.join(words[:i]))\n            if i > 0:\n                start += 1  # Add space for words after first word\n            end = start + len(word)\n            return word, start, end\n    \n    return None, -1, -1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n\n### Signature\ndef find_adverbs(text):",
    "timestamp": "2025-10-17T19:10:54.768741",
    "response_time": "4.30",
    "context": "{\"function_name\": \"find_adverbs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 585,
    "solution": "from typing import List, Dict\nfrom heapq import nlargest\n\ndef expensive_items(items: List[Dict[str, float]], n: int) -> List[Dict[str, float]]:\n    \"\"\"\n    Find the n most expensive items in a list of items.\n    \n    Args:\n        items: List of dictionaries where each dictionary represents an item with a 'price' key\n        n: Number of most expensive items to return\n        \n    Returns:\n        List of n most expensive items sorted by price in descending order\n    \"\"\"\n    return nlargest(n, items, key=lambda x: x['price'])",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the n most expensive items in a given dataset.\n\n### Signature\ndef expensive_items(items,n):",
    "timestamp": "2025-10-17T19:10:57.352394",
    "response_time": "2.58",
    "context": "{\"function_name\": \"expensive_items\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 586,
    "solution": "def split_Arr(l, n):\n    if not l or n <= 0 or n >= len(l):\n        return l\n    return l[n:] + l[:n]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n\n### Signature\ndef split_Arr(l, n):",
    "timestamp": "2025-10-17T19:10:59.624360",
    "response_time": "2.27",
    "context": "{\"function_name\": \"split_Arr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 587,
    "solution": "def list_tuple(listx):\n    return tuple(listx)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert a list to a tuple.\n\n### Signature\ndef list_tuple(listx):",
    "timestamp": "2025-10-17T19:11:01.278108",
    "response_time": "1.65",
    "context": "{\"function_name\": \"list_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 588,
    "solution": "def big_diff(nums):\n    if not nums:\n        return 0\n    return max(nums) - min(nums)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the difference between largest and smallest value in a given list.\n\n### Signature\ndef big_diff(nums):",
    "timestamp": "2025-10-17T19:11:03.431371",
    "response_time": "2.15",
    "context": "{\"function_name\": \"big_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 589,
    "solution": "def perfect_squares(a, b):\n    \"\"\"\n    Find all perfect squares between two numbers a and b (inclusive).\n    Returns a list of perfect squares in ascending order.\n    \"\"\"\n    result = []\n    # Find the ceiling of square root of a\n    start = int((a ** 0.5) + 0.5)\n    # If start^2 is less than a, increment start\n    if start * start < a:\n        start += 1\n    \n    # Find all perfect squares until we exceed b\n    current = start\n    while current * current <= b:\n        result.append(current * current)\n        current += 1\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find perfect squares between two given numbers.\n\n### Signature\ndef perfect_squares(a, b):",
    "timestamp": "2025-10-17T19:11:07.453391",
    "response_time": "4.02",
    "context": "{\"function_name\": \"perfect_squares\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 590,
    "solution": "import math\n\ndef polar_rect(x, y):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y)\n    x represents radius (r)\n    y represents angle in radians (theta)\n    Returns tuple (x, y) of rectangular coordinates\n    \"\"\"\n    rect_x = x * math.cos(y)\n    rect_y = x * math.sin(y)\n    return (rect_x, rect_y)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert polar coordinates to rectangular coordinates.\n\n### Signature\ndef polar_rect(x,y):",
    "timestamp": "2025-10-17T19:11:09.646710",
    "response_time": "2.19",
    "context": "{\"function_name\": \"polar_rect\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 591,
    "solution": "def swap_List(newList):\n    # Check if list has at least one element\n    if len(newList) < 1:\n        return newList\n        \n    # Store first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last elements in a list.\n\n### Signature\ndef swap_List(newList):",
    "timestamp": "2025-10-17T19:11:12.626856",
    "response_time": "2.98",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 592,
    "solution": "def sum_Of_product(n, k):\n    # Base cases\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    \n    # Calculate binomial coefficient using Pascal's triangle concept\n    res = 1\n    for i in range(k):\n        res = res * (n - i)\n        res = res // (i + 1)\n    return res\n\ndef sum_consecutive_binomial_products(n):\n    sum = 0\n    for k in range(n):\n        # Calculate product of consecutive binomial coefficients\n        product = binomial_Coeff(n, k) * binomial_Coeff(n, k + 1)\n        sum += product\n    return sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\n### Signature\ndef binomial_Coeff(n,k):",
    "timestamp": "2025-10-17T19:11:16.404668",
    "response_time": "3.77",
    "context": "{\"function_name\": \"sum_Of_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 593,
    "solution": "def removezero_ip(ip):\n    # Split the IP address into octets\n    octets = ip.split('.')\n    \n    # Remove leading zeros from each octet and join back\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    \n    # Return the cleaned IP address\n    return '.'.join(cleaned_octets)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to remove leading zeroes from an ip address.\n\n### Signature\ndef removezero_ip(ip):",
    "timestamp": "2025-10-17T19:11:19.239863",
    "response_time": "2.83",
    "context": "{\"function_name\": \"removezero_ip\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 594,
    "solution": "def diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return 0\n    \n    return first_even - first_odd",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the difference of the first even and first odd number of a given list.\n\n### Signature\ndef diff_even_odd(list1):",
    "timestamp": "2025-10-17T19:11:21.457073",
    "response_time": "2.21",
    "context": "{\"function_name\": \"diff_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 595,
    "solution": "def min_Swaps(str1, str2):\n    # Check if lengths are equal\n    if len(str1) != len(str2):\n        return -1\n    \n    # Check if both strings have same number of 1's and 0's\n    if str1.count('1') != str2.count('1'):\n        return -1\n    \n    swaps = 0\n    n = len(str1)\n    \n    # Convert strings to lists for easier manipulation\n    s1 = list(str1)\n    s2 = list(str2)\n    \n    i = 0\n    while i < n:\n        if s1[i] != s2[i]:\n            # Find next position where s1 has the required character\n            j = i + 1\n            while j < n and s1[j] != s2[i]:\n                j += 1\n            \n            # Swap characters\n            if j < n:\n                s1[i], s1[j] = s1[j], s1[i]\n                swaps += 1\n        i += 1\n    \n    return swaps",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n### Signature\ndef min_Swaps(str1,str2) :",
    "timestamp": "2025-10-17T19:11:27.700871",
    "response_time": "6.24",
    "context": "{\"function_name\": \"min_Swaps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 596,
    "solution": "import sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the size in bytes of the given tuple.\n\n### Signature\ndef tuple_size(tuple_list):",
    "timestamp": "2025-10-17T19:11:29.760551",
    "response_time": "2.06",
    "context": "{\"function_name\": \"tuple_size\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 597,
    "solution": "def find_kth(arr1, arr2, k):\n    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n    \n    mid1, mid2 = len(arr1) // 2, len(arr2) // 2\n    \n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find kth element from the given two sorted arrays.\n\n### Signature\ndef find_kth(arr1, arr2, k):",
    "timestamp": "2025-10-17T19:11:35.256589",
    "response_time": "5.49",
    "context": "{\"function_name\": \"find_kth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 598,
    "solution": "def armstrong_number(number):\n    # Convert number to string to count digits\n    num_str = str(number)\n    num_digits = len(num_str)\n    \n    # Calculate sum of each digit raised to power of number of digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)\n    \n    # Return True if number is armstrong number, False otherwise\n    return sum_of_powers == number",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether the given number is armstrong or not.\n\n### Signature\ndef armstrong_number(number):",
    "timestamp": "2025-10-17T19:11:38.134960",
    "response_time": "2.87",
    "context": "{\"function_name\": \"armstrong_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 599,
    "solution": "def sum_average(number):\n    if number <= 0:\n        return 0, 0\n    \n    # Calculate sum of first n natural numbers\n    total_sum = (number * (number + 1)) // 2\n    \n    # Calculate average\n    average = total_sum / number\n    \n    return total_sum, average",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find sum and average of first n natural numbers.\n\n### Signature\ndef sum_average(number):",
    "timestamp": "2025-10-17T19:11:40.817156",
    "response_time": "2.68",
    "context": "{\"function_name\": \"sum_average\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 600,
    "solution": "def is_Even(n):\n    return n % 2 == 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether the given number is even or not.\n\n### Signature\ndef is_Even(n) :",
    "timestamp": "2025-10-17T19:11:42.646293",
    "response_time": "1.83",
    "context": "{\"function_name\": \"is_Even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 602,
    "solution": "def first_repeated_char(str1):\n    # Create a set to store characters\n    char_set = set()\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If character is already in set, it's the first repeat\n        if char in char_set:\n            return char\n        # Add character to set\n        char_set.add(char)\n    \n    # If no repeated character is found\n    return None",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the first repeated character in a given string.\n\n### Signature\ndef first_repeated_char(str1):",
    "timestamp": "2025-10-17T19:11:45.575362",
    "response_time": "2.93",
    "context": "{\"function_name\": \"first_repeated_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 603,
    "solution": "def get_ludic(n):\n    if n < 1:\n        return []\n    \n    # Initialize list with numbers from 1 to n\n    numbers = list(range(1, n + 1))\n    numbers[0] = 0  # Mark 1 as non-ludic\n    ludic = []\n    \n    i = 1  # Start from index 1 (number 2)\n    while i < len(numbers):\n        if numbers[i] == 0:\n            i += 1\n            continue\n            \n        current = numbers[i]\n        ludic.append(current)\n        \n        # Remove every current-th number after current\n        j = i + current\n        while j < len(numbers):\n            numbers[j] = 0\n            j += current\n            \n        i += 1\n    \n    return sorted(ludic)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\n### Signature\ndef get_ludic(n):",
    "timestamp": "2025-10-17T19:11:49.450754",
    "response_time": "3.87",
    "context": "{\"function_name\": \"get_ludic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 604,
    "solution": "def reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    # Reverse the list of words\n    words = words[::-1]\n    # Join the words back with spaces\n    return ' '.join(words)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to reverse words seperated by spaces in a given string.\n\n### Signature\ndef reverse_words(s):",
    "timestamp": "2025-10-17T19:11:51.010115",
    "response_time": "1.56",
    "context": "{\"function_name\": \"reverse_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 605,
    "solution": "def prime_num(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if the given integer is a prime number.\n\n### Signature\ndef prime_num(num):",
    "timestamp": "2025-10-17T19:11:53.138609",
    "response_time": "2.12",
    "context": "{\"function_name\": \"prime_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 606,
    "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert degrees to radians.\n\n### Signature\ndef radian_degree(degree):",
    "timestamp": "2025-10-17T19:11:54.549074",
    "response_time": "1.41",
    "context": "{\"function_name\": \"radian_degree\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 607,
    "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None, -1, -1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\n### Signature\ndef find_literals(text, pattern):",
    "timestamp": "2025-10-17T19:11:56.042227",
    "response_time": "1.49",
    "context": "{\"function_name\": \"find_literals\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 608,
    "solution": "def bell_Number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Initialize first Bell number\n    bell[0][0] = 1\n    \n    # Calculate Bell Numbers\n    for i in range(1, n+1):\n        # First number of current row is last number\n        # of previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill entries in current row using the recursive\n        # formula\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find nth bell number.\n\n### Signature\ndef bell_Number(n):",
    "timestamp": "2025-10-17T19:12:00.892633",
    "response_time": "4.85",
    "context": "{\"function_name\": \"bell_Number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 610,
    "solution": "def remove_kth_element(list1, k):\n    if not list1 or k < 0 or k >= len(list1):\n        return list1\n    return list1[:k] + list1[k+1:]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\n### Signature\ndef remove_kth_element(list1, L):",
    "timestamp": "2025-10-17T19:12:03.363917",
    "response_time": "2.47",
    "context": "{\"function_name\": \"remove_kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 611,
    "solution": "def max_of_nth(test_list, N):\n    # Extract the N-th column from the matrix\n    nth_column = [row[N] for row in test_list]\n    # Return the maximum value in the column\n    return max(nth_column)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\n### Signature\ndef max_of_nth(test_list, N):",
    "timestamp": "2025-10-17T19:12:05.753856",
    "response_time": "2.39",
    "context": "{\"function_name\": \"max_of_nth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 612,
    "solution": "def merge(lst):\n    first_elements = []\n    second_elements = []\n    \n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    return [first_elements, second_elements]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n### Signature\ndef merge(lst):",
    "timestamp": "2025-10-17T19:12:08.200469",
    "response_time": "2.44",
    "context": "{\"function_name\": \"merge\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 614,
    "solution": "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple]) -> int:\n    total = 0\n    for tup in test_list:\n        total += sum(tup)\n    return total",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n### Signature\ndef cummulative_sum(test_list):",
    "timestamp": "2025-10-17T19:12:09.751044",
    "response_time": "1.55",
    "context": "{\"function_name\": \"cummulative_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 615,
    "solution": "from typing import Tuple, List\n\ndef average_tuple(nums: Tuple[Tuple[int, ...], ...]) -> List[float]:\n    if not nums or not nums[0]:\n        return []\n    \n    # Get the length of inner tuples\n    length = len(nums[0])\n    \n    # Initialize sums for each position\n    sums = [0] * length\n    \n    # Sum up values at each position\n    for tup in nums:\n        for i in range(length):\n            sums[i] += tup[i]\n    \n    # Calculate averages by dividing by number of tuples\n    return [sum_val / len(nums) for sum_val in sums]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\n### Signature\ndef average_tuple(nums):",
    "timestamp": "2025-10-17T19:12:14.368515",
    "response_time": "4.61",
    "context": "{\"function_name\": \"average_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 616,
    "solution": "def tuple_modulo(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of equal length\")\n    \n    result = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\n### Signature\ndef tuple_modulo(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T19:12:17.021260",
    "response_time": "2.65",
    "context": "{\"function_name\": \"tuple_modulo\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 617,
    "solution": "def min_Jumps(steps, d):\n    # Convert d to positive as jumps will be same for -d\n    d = abs(d)\n    \n    # Initialize current position sum\n    curr_sum = 0\n    # Initialize number of jumps\n    jumps = 0\n    \n    # Keep taking jumps until we reach or cross target\n    while curr_sum < d:\n        jumps += 1\n        curr_sum += steps\n        \n        # If we've reached exactly d, return jumps\n        if curr_sum == d:\n            return jumps\n    \n    # If we've crossed d, we need to check if we can reach d\n    # by changing some jumps to negative\n    while (curr_sum - d) % 2 != 0:\n        jumps += 1\n        curr_sum += steps\n    \n    return jumps",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n### Signature\ndef min_Jumps(steps, d):",
    "timestamp": "2025-10-17T19:12:22.141592",
    "response_time": "5.12",
    "context": "{\"function_name\": \"min_Jumps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 618,
    "solution": "def div_list(nums1, nums2):\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must be of equal length\")\n    \n    result = []\n    for n1, n2 in zip(nums1, nums2):\n        if n2 == 0:\n            raise ZeroDivisionError(\"Division by zero is not allowed\")\n        result.append(n1 / n2)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to divide two lists element wise.\n\n### Signature\ndef div_list(nums1,nums2):",
    "timestamp": "2025-10-17T19:12:26.630768",
    "response_time": "4.48",
    "context": "{\"function_name\": \"div_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 619,
    "solution": "def move_num(test_str):\n    # Initialize empty strings for numbers and non-numbers\n    numbers = ''\n    non_numbers = ''\n    \n    # Iterate through each character in the string\n    for char in test_str:\n        # If character is a digit, add to numbers string\n        if char.isdigit():\n            numbers += char\n        # If character is not a digit, add to non_numbers string\n        else:\n            non_numbers += char\n    \n    # Return concatenated string with non-numbers followed by numbers\n    return non_numbers + numbers",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to move all the numbers to the end of the given string.\n\n### Signature\ndef move_num(test_str):",
    "timestamp": "2025-10-17T19:12:30.585418",
    "response_time": "3.95",
    "context": "{\"function_name\": \"move_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 620,
    "solution": "def largest_subset(a):\n    if not a:\n        return 0\n    \n    # Sort the array to ensure we check divisibility from smaller to larger numbers\n    a.sort()\n    n = len(a)\n    \n    # dp[i] represents the length of the largest divisible subset ending at index i\n    dp = [1] * n\n    \n    # For tracking the maximum subset\n    max_len = 1\n    \n    # Check each number with all previous numbers\n    for i in range(1, n):\n        for j in range(i):\n            # If current number is divisible by previous number\n            if a[i] % a[j] == 0:\n                # Update dp[i] if we can form a longer subset\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_len = max(max_len, dp[i])\n    \n    return max_len",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n### Signature\ndef largest_subset(a):",
    "timestamp": "2025-10-17T19:12:37.319940",
    "response_time": "6.73",
    "context": "{\"function_name\": \"largest_subset\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 622,
    "solution": "def get_median(arr1, arr2, n):\n    # Initialize pointers for both arrays\n    i = 0  # pointer for arr1\n    j = 0  # pointer for arr2\n    count = 0\n    m1 = m2 = -1\n\n    # Loop until we reach the median position\n    while count <= n:\n        # If arr1 pointer reaches end, take elements from arr2\n        if i == n:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        # If arr2 pointer reaches end, take elements from arr1\n        elif j == n:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        # Compare elements from both arrays\n        elif arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        count += 1\n\n    # Return average of middle elements\n    return (m1 + m2) / 2",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the median of two sorted lists of same size.\n\n### Signature\ndef get_median(arr1, arr2, n):",
    "timestamp": "2025-10-17T19:12:43.243502",
    "response_time": "5.92",
    "context": "{\"function_name\": \"get_median\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 623,
    "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to compute the n-th power of each number in a list.\n\n### Signature\ndef nth_nums(nums,n):",
    "timestamp": "2025-10-17T19:12:44.996396",
    "response_time": "1.75",
    "context": "{\"function_name\": \"nth_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 624,
    "solution": "def is_upper(string):\n    return string.upper()",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to convert a given string to uppercase.\n\n### Signature\ndef is_upper(string):",
    "timestamp": "2025-10-17T19:12:46.242488",
    "response_time": "1.24",
    "context": "{\"function_name\": \"is_upper\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 625,
    "solution": "def swap_List(newList):\n    # Check if list has at least 2 elements\n    if len(newList) >= 2:\n        # Store first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last element in a given list.\n\n### Signature\ndef swap_List(newList):",
    "timestamp": "2025-10-17T19:12:48.490813",
    "response_time": "2.24",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 626,
    "solution": "import math\n\ndef triangle_area(r):\n    # The largest inscribed triangle in a semicircle is isosceles\n    # with the diameter as its base\n    # The height of this triangle can be found using trigonometry\n    \n    # Base is the diameter\n    base = 2 * r\n    \n    # Height can be calculated using the radius\n    # The height is r * sin(60\u00b0) = r * (\u221a3/2)\n    height = r * math.sqrt(3) / 2\n    \n    # Area of triangle = (1/2) * base * height\n    area = 0.5 * base * height\n    \n    return area",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n### Signature\ndef triangle_area(r) :",
    "timestamp": "2025-10-17T19:12:51.299356",
    "response_time": "2.80",
    "context": "{\"function_name\": \"triangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 627,
    "solution": "def find_First_Missing(array, start=0, end=None):\n    if not array:\n        return start\n    \n    if end is None:\n        end = len(array) - 1\n        \n    if start > end:\n        return start\n        \n    if start != array[start]:\n        return start\n        \n    mid = (start + end) // 2\n    \n    # If this is true then left half has no missing number\n    if array[mid] == mid:\n        return find_First_Missing(array, mid + 1, end)\n    \n    return find_First_Missing(array, start, mid)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\n### Signature\ndef find_First_Missing(array,start=0,end=None):",
    "timestamp": "2025-10-17T19:12:55.605158",
    "response_time": "4.30",
    "context": "{\"function_name\": \"find_First_Missing\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 628,
    "solution": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to replace all spaces in the given string with '%20'.\n\n### Signature\ndef replace_spaces(string):",
    "timestamp": "2025-10-17T19:12:57.067233",
    "response_time": "1.46",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 629,
    "solution": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find even numbers from a list of numbers.\n\n### Signature\ndef Split(list):",
    "timestamp": "2025-10-17T19:12:58.604804",
    "response_time": "1.53",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 630,
    "solution": "def get_coordinates(ele, sub = []):\n    \"\"\"\n    Returns a list of adjacent coordinates for a given coordinate tuple.\n    \n    Args:\n        ele (tuple): A tuple of coordinates (x, y)\n        sub (list): Optional list of coordinates to exclude from the result\n    \n    Returns:\n        list: List of adjacent coordinate tuples\n    \"\"\"\n    x, y = ele\n    adjacent = [\n        (x-1, y-1), (x-1, y), (x-1, y+1),\n        (x, y-1),             (x, y+1),\n        (x+1, y-1), (x+1, y), (x+1, y+1)\n    ]\n    \n    # Remove any coordinates that are in the sub list\n    if sub:\n        adjacent = [coord for coord in adjacent if coord not in sub]\n        \n    return adjacent",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n### Signature\ndef adjac(ele, sub = []):",
    "timestamp": "2025-10-17T19:13:03.012044",
    "response_time": "4.40",
    "context": "{\"function_name\": \"get_coordinates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 631,
    "solution": "def replace_spaces(text):\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\n### Signature\ndef replace_spaces(text):",
    "timestamp": "2025-10-17T19:13:05.517772",
    "response_time": "2.50",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 632,
    "solution": "def move_zero(num_list):\n    non_zero = [x for x in num_list if x != 0]\n    zeros = [0] * (len(num_list) - len(non_zero))\n    num_list[:] = non_zero + zeros",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to move all zeroes to the end of the given list.\n\n### Signature\ndef move_zero(num_list):",
    "timestamp": "2025-10-17T19:13:07.691332",
    "response_time": "2.17",
    "context": "{\"function_name\": \"move_zero\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 633,
    "solution": "def pair_xor_Sum(arr,n) :\n    xor_sum = 0\n    # Calculate XOR of all possible pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\n### Signature\ndef pair_xor_Sum(arr,n) :",
    "timestamp": "2025-10-17T19:13:10.381341",
    "response_time": "2.69",
    "context": "{\"function_name\": \"pair_xor_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 635,
    "solution": "def heap_sort(iterable):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    arr = list(iterable)\n    n = len(arr)\n\n    # Build max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements from heap one by one\n    for i in range(n - 1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n\n    return arr",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sort the given list.\n\n### Signature\ndef heap_sort(iterable):",
    "timestamp": "2025-10-17T19:13:13.822881",
    "response_time": "3.44",
    "context": "{\"function_name\": \"heap_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 637,
    "solution": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether the given amount has no profit and no loss\n\n### Signature\ndef noprofit_noloss(actual_cost,sale_amount):",
    "timestamp": "2025-10-17T19:13:15.906449",
    "response_time": "2.08",
    "context": "{\"function_name\": \"noprofit_noloss\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 638,
    "solution": "import math\n\ndef wind_chill(v, t):\n    # Convert temperature from Celsius to Fahrenheit\n    tf = (t * 9/5) + 32\n    \n    # Convert wind velocity from km/h to mph\n    mph = v * 0.621371\n    \n    # Calculate wind chill using the formula\n    # Wind Chill = 35.74 + 0.6215T - 35.75(V^0.16) + 0.4275T(V^0.16)\n    # where T is temperature in Fahrenheit and V is wind speed in mph\n    wc = 35.74 + (0.6215 * tf) - (35.75 * (mph ** 0.16)) + (0.4275 * tf * (mph ** 0.16))\n    \n    # Convert wind chill back to Celsius\n    wc_celsius = (wc - 32) * 5/9\n    \n    # Round to the next integer\n    return math.ceil(wc_celsius)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n### Signature\ndef wind_chill(v,t):",
    "timestamp": "2025-10-17T19:13:20.485053",
    "response_time": "4.57",
    "context": "{\"function_name\": \"wind_chill\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 639,
    "solution": "def sample_nam(sample_names):\n    # Filter names that start with uppercase and sum their lengths\n    return sum(len(name) for name in sample_names if name and name[0].isupper())",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n### Signature\ndef sample_nam(sample_names):",
    "timestamp": "2025-10-17T19:13:22.582011",
    "response_time": "2.09",
    "context": "{\"function_name\": \"sample_nam\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 640,
    "solution": "def remove_parenthesis(items):\n    stack = []\n    skip = 0\n    result = \"\"\n    \n    for char in items:\n        if char == '(':\n            stack.append(char)\n            skip += 1\n        elif char == ')' and stack:\n            stack.pop()\n            skip -= 1\n        elif skip == 0:\n            result += char\n            \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n\n### Signature\ndef remove_parenthesis(items):",
    "timestamp": "2025-10-17T19:13:25.235356",
    "response_time": "2.65",
    "context": "{\"function_name\": \"remove_parenthesis\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 641,
    "solution": "def is_nonagonal(n):\n    \"\"\"\n    Calculate the nth nonagonal number.\n    A nonagonal number is a figurate number that extends the concept of triangular and square numbers\n    to a nonagon (9-sided polygon).\n    Formula: n * (7n - 5) / 2\n    \"\"\"\n    return n * (7 * n - 5) // 2",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the nth nonagonal number.\n\n### Signature\ndef is_nonagonal(n):",
    "timestamp": "2025-10-17T19:13:27.166368",
    "response_time": "1.93",
    "context": "{\"function_name\": \"is_nonagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 643,
    "solution": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\w+z\\w+'\n    if re.search(pattern, text):\n        return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\n### Signature\ndef text_match_wordz_middle(text):",
    "timestamp": "2025-10-17T19:13:28.709373",
    "response_time": "1.54",
    "context": "{\"function_name\": \"text_match_wordz_middle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 644,
    "solution": "def reverse_Array_Upto_K(input, k):\n    if not input or k <= 0 or k > len(input):\n        return input\n    \n    # Convert k to 0-based index\n    k = k - 1\n    \n    # Initialize pointers\n    left = 0\n    right = k\n    \n    # Reverse array elements from start to k\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    \n    return input",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to reverse an array upto a given position.\n\n### Signature\ndef reverse_Array_Upto_K(input, k):",
    "timestamp": "2025-10-17T19:13:31.448075",
    "response_time": "2.73",
    "context": "{\"function_name\": \"reverse_Array_Upto_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 720,
    "solution": "def add_dict_to_tuple(test_tup, test_dict):\n    # Convert tuple to list\n    temp_list = list(test_tup)\n    # Append dictionary to list\n    temp_list.append(test_dict)\n    # Convert back to tuple and return\n    return tuple(temp_list)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\n### Signature\ndef add_dict_to_tuple(test_tup, test_dict):",
    "timestamp": "2025-10-17T19:13:34.348215",
    "response_time": "2.90",
    "context": "{\"function_name\": \"add_dict_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 721,
    "solution": "def maxAverageOfPath(cost):\n    if not cost or not cost[0]:\n        return 0.0\n    \n    n = len(cost)\n    # dp[i][j][k] stores maximum sum for path of length k+1 ending at (i,j)\n    dp = [[[float('-inf')] * (2*n) for _ in range(n)] for _ in range(n)]\n    \n    # Initialize starting point\n    dp[0][0][0] = cost[0][0]\n    \n    # For each path length\n    for k in range(1, 2*n-1):\n        # For each possible ending position (i,j)\n        for i in range(n):\n            for j in range(n):\n                # Skip if this position cannot be reached with current path length\n                if i + j != k:\n                    continue\n                    \n                # Get value from top cell (if exists)\n                if i > 0:\n                    dp[i][j][k] = max(dp[i][j][k], dp[i-1][j][k-1] + cost[i][j])\n                \n                # Get value from left cell (if exists)\n                if j > 0:\n                    dp[i][j][k] = max(dp[i][j][k], dp[i][j-1][k-1] + cost[i][j])\n    \n    # Find maximum average among all possible path lengths ending at (n-1,n-1)\n    max_avg = float('-inf')\n    for k in range(n-1, 2*n-1):  # minimum path length is n-1\n        if dp[n-1][n-1][k] != float('-inf'):\n            avg = dp[n-1][n-1][k] / (k + 1)\n            max_avg = max(max_avg, avg)\n    \n    return max_avg",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n### Signature\ndef maxAverageOfPath(cost):",
    "timestamp": "2025-10-17T19:13:41.580797",
    "response_time": "7.23",
    "context": "{\"function_name\": \"maxAverageOfPath\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 722,
    "solution": "def filter_data(students, h, w):\n    \"\"\"\n    Filter students based on minimum height and weight requirements.\n    \n    Args:\n        students (dict): Dictionary with student names as keys and (height, weight) tuples as values\n        h (float): Minimum height requirement\n        w (float): Minimum weight requirement\n    \n    Returns:\n        dict: Filtered dictionary containing only students meeting both requirements\n    \"\"\"\n    return {name: measurements for name, measurements in students.items() \n            if measurements[0] >= h and measurements[1] >= w}",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\n### Signature\ndef filter_data(students,h,w):",
    "timestamp": "2025-10-17T19:13:43.878521",
    "response_time": "2.29",
    "context": "{\"function_name\": \"filter_data\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 723,
    "solution": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\n### Signature\ndef count_same_pair(nums1, nums2):",
    "timestamp": "2025-10-17T19:13:46.342935",
    "response_time": "2.46",
    "context": "{\"function_name\": \"count_same_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 724,
    "solution": "def power_base_sum(base, power):\n    # Calculate base raised to power\n    result = base ** power\n    \n    # Convert number to string to iterate through digits\n    result_str = str(result)\n    \n    # Sum all digits\n    digit_sum = sum(int(digit) for digit in result_str)\n    \n    return digit_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\n### Signature\ndef power_base_sum(base, power):",
    "timestamp": "2025-10-17T19:13:49.321964",
    "response_time": "2.97",
    "context": "{\"function_name\": \"power_base_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 725,
    "solution": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks \" \" of the given string.\n\n### Signature\ndef extract_quotation(text1):",
    "timestamp": "2025-10-17T19:13:51.394297",
    "response_time": "2.07",
    "context": "{\"function_name\": \"extract_quotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 726,
    "solution": "def multiply_elements(test_tup):\n    return tuple(test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n### Signature\ndef multiply_elements(test_tup):",
    "timestamp": "2025-10-17T19:13:53.231416",
    "response_time": "1.83",
    "context": "{\"function_name\": \"multiply_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 728,
    "solution": "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n### Signature\ndef sum_list(lst1,lst2):",
    "timestamp": "2025-10-17T19:13:55.293852",
    "response_time": "2.06",
    "context": "{\"function_name\": \"sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 730,
    "solution": "def consecutive_duplicates(nums):\n    if not nums:\n        return []\n    \n    result = [nums[0]]\n    for i in range(1, len(nums)):\n        if nums[i] != nums[i-1]:\n            result.append(nums[i])\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to remove consecutive duplicates of a given list.\n\n### Signature\ndef consecutive_duplicates(nums):",
    "timestamp": "2025-10-17T19:13:57.490846",
    "response_time": "2.19",
    "context": "{\"function_name\": \"consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 731,
    "solution": "import math\n\ndef lateralsurface_cone(r,h):\n    # Calculate slant height using Pythagorean theorem\n    slant_height = math.sqrt(r**2 + h**2)\n    # Calculate lateral surface area using formula: \u03c0 * r * s\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\n### Signature\ndef lateralsurface_cone(r,h):",
    "timestamp": "2025-10-17T19:13:59.561013",
    "response_time": "2.06",
    "context": "{\"function_name\": \"lateralsurface_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 732,
    "solution": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\n### Signature\ndef replace_specialchar(text):",
    "timestamp": "2025-10-17T19:14:01.002890",
    "response_time": "1.44",
    "context": "{\"function_name\": \"replace_specialchar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 733,
    "solution": "def find_first_occurrence(A, x):\n    left = 0\n    right = len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\n### Signature\ndef find_first_occurrence(A, x):",
    "timestamp": "2025-10-17T19:14:04.484743",
    "response_time": "3.48",
    "context": "{\"function_name\": \"find_first_occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 734,
    "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    # Generate all possible subarrays\n    for start in range(n):\n        for end in range(start, n):\n            # Calculate product of current subarray\n            product = 1\n            for i in range(start, end + 1):\n                product *= arr[i]\n            total_sum += product\n            \n    return total_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\n### Signature\ndef sum_Of_Subarray_Prod(arr):",
    "timestamp": "2025-10-17T19:14:06.765378",
    "response_time": "2.27",
    "context": "{\"function_name\": \"sum_Of_Subarray_Prod\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 735,
    "solution": "def toggle_middle_bits(n):\n    # If number has less than 3 bits, no middle bits to toggle\n    if n < 4:\n        return n\n    \n    # Find position of leftmost bit\n    position = 0\n    temp = n\n    while temp:\n        position += 1\n        temp = temp >> 1\n    \n    # Create a mask with all bits set except first and last\n    # First shift 1 to leftmost position and subtract 1 to get all 1s\n    # Then shift right by 1 to unset last bit\n    mask = (1 << position) - 1\n    # Unset first bit by XORing with appropriate mask\n    mask = mask ^ (1 << (position - 1))\n    # Now mask has all 1s except for first and last positions\n    \n    # Toggle middle bits using XOR with mask\n    return n ^ mask",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\n### Signature\ndef set_middle_bits(n):",
    "timestamp": "2025-10-17T19:14:12.615624",
    "response_time": "5.84",
    "context": "{\"function_name\": \"toggle_middle_bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 736,
    "solution": "from bisect import bisect_left\n\ndef left_insertion(a, x):\n    \"\"\"\n    Find the index where x should be inserted in sorted list a to maintain order.\n    \n    Args:\n        a: A sorted list of numbers\n        x: The value to find insertion point for\n        \n    Returns:\n        The index where x should be inserted\n    \"\"\"\n    return bisect_left(a, x)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\n### Signature\ndef left_insertion(a, x):",
    "timestamp": "2025-10-17T19:14:15.792677",
    "response_time": "3.17",
    "context": "{\"function_name\": \"left_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 737,
    "solution": "import re\n\ndef check_str(string):\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\n### Signature\ndef check_str(string):",
    "timestamp": "2025-10-17T19:14:17.813994",
    "response_time": "2.02",
    "context": "{\"function_name\": \"check_str\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 738,
    "solution": "def geometric_sum(n):\n    if n < 1:\n        return 0\n    return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\n### Signature\ndef geometric_sum(n):",
    "timestamp": "2025-10-17T19:14:20.556570",
    "response_time": "2.74",
    "context": "{\"function_name\": \"geometric_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 739,
    "solution": "import math\n\ndef find_Index(n):\n    # Function to count digits in a number\n    def count_digits(num):\n        return len(str(num))\n    \n    # Function to get triangular number for given index\n    def get_triangular_number(index):\n        return (index * (index + 1)) // 2\n    \n    # Binary search to find the index\n    left = 1\n    right = 10**n  # A reasonable upper bound\n    \n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        tri_num = get_triangular_number(mid)\n        digits = count_digits(tri_num)\n        \n        if digits == n:\n            result = mid\n            right = mid - 1  # Try to find a smaller index\n        elif digits < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\n### Signature\ndef find_Index(n):",
    "timestamp": "2025-10-17T19:14:25.449549",
    "response_time": "4.89",
    "context": "{\"function_name\": \"find_Index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 740,
    "solution": "def tuple_to_dict(test_tup):\n    # Check if tuple length is even\n    if len(test_tup) % 2 != 0:\n        return {}\n    \n    # Create dictionary using dictionary comprehension\n    # Taking elements at even indices as keys and odd indices as values\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\n### Signature\ndef tuple_to_dict(test_tup):",
    "timestamp": "2025-10-17T19:14:27.809939",
    "response_time": "2.35",
    "context": "{\"function_name\": \"tuple_to_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 741,
    "solution": "def all_Characters_Same(s) :\n    # If string is empty or has only one character, return True\n    if len(s) <= 1:\n        return True\n    \n    # Compare all characters with first character\n    first_char = s[0]\n    for char in s[1:]:\n        if char != first_char:\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether all the characters are same or not.\n\n### Signature\ndef all_Characters_Same(s) :",
    "timestamp": "2025-10-17T19:14:30.592126",
    "response_time": "2.78",
    "context": "{\"function_name\": \"all_Characters_Same\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 742,
    "solution": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given its side length.\n    The formula for surface area is: A = sqrt(3) * side^2\n    \"\"\"\n    return math.sqrt(3) * side * side",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to caluclate the area of a tetrahedron.\n\n### Signature\ndef area_tetrahedron(side):",
    "timestamp": "2025-10-17T19:14:32.864802",
    "response_time": "2.27",
    "context": "{\"function_name\": \"area_tetrahedron\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 743,
    "solution": "def rotate_right(list, m):\n    if not list:\n        return list\n    \n    # Handle cases where m is larger than list length\n    m = m % len(list)\n    \n    # Slice the list and concatenate\n    return list[-m:] + list[:-m]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\n### Signature\ndef rotate_right(list, m):",
    "timestamp": "2025-10-17T19:14:34.892205",
    "response_time": "2.02",
    "context": "{\"function_name\": \"rotate_right\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 744,
    "solution": "def check_none(test_tup):\n    return None in test_tup",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if the given tuple has any none value or not.\n\n### Signature\ndef check_none(test_tup):",
    "timestamp": "2025-10-17T19:14:36.115400",
    "response_time": "1.22",
    "context": "{\"function_name\": \"check_none\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 745,
    "solution": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        # Convert number to string to iterate through digits\n        num_str = str(num)\n        # Check if number is divisible by all its digits\n        for digit in num_str:\n            # Skip if digit is 0\n            if digit == '0':\n                return False\n            if num % int(digit) != 0:\n                return False\n        return True\n    \n    # Create list of numbers that satisfy the condition\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\n### Signature\ndef divisible_by_digits(startnum, endnum):",
    "timestamp": "2025-10-17T19:14:39.852159",
    "response_time": "3.73",
    "context": "{\"function_name\": \"divisible_by_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 746,
    "solution": "import math\n\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    area = (math.pi * r * r * a) / 360\n    return area",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\n### Signature\ndef sector_area(r,a):",
    "timestamp": "2025-10-17T19:14:42.013794",
    "response_time": "2.16",
    "context": "{\"function_name\": \"sector_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 747,
    "solution": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    \n    # Create a 3D table to store results of subproblems\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    \n    # Fill L[m][n][o] in bottom up fashion\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n    \n    return L[m][n][o]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n### Signature\ndef lcs_of_three(X, Y, Z):",
    "timestamp": "2025-10-17T19:14:46.734999",
    "response_time": "4.71",
    "context": "{\"function_name\": \"lcs_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 748,
    "solution": "def capital_words_spaces(str1):\n    if not str1:\n        return str1\n    \n    result = str1[0]\n    for i in range(1, len(str1)):\n        if str1[i].isupper():\n            result += ' ' + str1[i]\n        else:\n            result += str1[i]\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to put spaces between words starting with capital letters in a given string.\n\n### Signature\ndef capital_words_spaces(str1):",
    "timestamp": "2025-10-17T19:14:49.573205",
    "response_time": "2.83",
    "context": "{\"function_name\": \"capital_words_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 749,
    "solution": "def sort_numeric_strings(nums_str):\n    return sorted(nums_str, key=int)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n### Signature\ndef sort_numeric_strings(nums_str):",
    "timestamp": "2025-10-17T19:14:50.812675",
    "response_time": "1.23",
    "context": "{\"function_name\": \"sort_numeric_strings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 750,
    "solution": "def add_tuple(test_list, test_tup):\n    test_list.append(test_tup)\n    return test_list",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to add the given tuple to the given list.\n\n### Signature\ndef add_tuple(test_list, test_tup):",
    "timestamp": "2025-10-17T19:14:52.897653",
    "response_time": "2.08",
    "context": "{\"function_name\": \"add_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 751,
    "solution": "def check_min_heap(arr, i):\n    # Get array length\n    n = len(arr)\n    \n    # Get left and right child indices\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # If current node is leaf node, return True as it follows min heap property\n    if left >= n:\n        return True\n    \n    # Check if current node is smaller than its children\n    # and recursively check for left and right subtrees\n    is_heap = arr[i] <= arr[left]  # Current node should be smaller than left child\n    \n    if right < n:  # If right child exists\n        is_heap = is_heap and arr[i] <= arr[right]  # Current node should be smaller than right child\n    \n    # If current node follows min heap property,\n    # recursively check for left and right subtrees\n    if is_heap:\n        return check_min_heap_helper(arr, left) and (right >= n or check_min_heap_helper(arr, right))\n    \n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n### Signature\ndef check_min_heap_helper(arr, i):",
    "timestamp": "2025-10-17T19:14:57.514523",
    "response_time": "4.61",
    "context": "{\"function_name\": \"check_min_heap\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 752,
    "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Using the formula: J(n) = J(n-1) + 2*J(n-2)\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, b + 2 * a\n    return b",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\n### Signature\ndef jacobsthal_num(n):",
    "timestamp": "2025-10-17T19:14:59.664737",
    "response_time": "2.14",
    "context": "{\"function_name\": \"jacobsthal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 753,
    "solution": "def min_k(test_list, K):\n    # Sort the list based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Return first K elements\n    return sorted_list[:K]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n### Signature\ndef min_k(test_list, K):",
    "timestamp": "2025-10-17T19:15:01.264879",
    "response_time": "1.59",
    "context": "{\"function_name\": \"min_k\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 754,
    "solution": "def extract_index_list(l1, l2, l3):\n    # Find the minimum length among the three lists\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Initialize result list\n    common_elements = []\n    \n    # Check elements at each index up to min_length\n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n            \n    return common_elements",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\n### Signature\ndef extract_index_list(l1, l2, l3):",
    "timestamp": "2025-10-17T19:15:05.221310",
    "response_time": "3.95",
    "context": "{\"function_name\": \"extract_index_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 755,
    "solution": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest_num = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest_num = smallest\n            smallest = num\n        elif num < second_smallest_num and num != smallest:\n            second_smallest_num = num\n    \n    if second_smallest_num == float('inf'):\n        return None\n        \n    return second_smallest_num",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the second smallest number in a list.\n\n### Signature\ndef second_smallest(numbers):",
    "timestamp": "2025-10-17T19:15:08.026224",
    "response_time": "2.80",
    "context": "{\"function_name\": \"second_smallest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 756,
    "solution": "import re\n\ndef text_match_zero_one(text):\n    pattern = 'ab+?'\n    if re.search(pattern, text):\n        return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\n### Signature\ndef text_match_zero_one(text):",
    "timestamp": "2025-10-17T19:15:09.601183",
    "response_time": "1.57",
    "context": "{\"function_name\": \"text_match_zero_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 757,
    "solution": "def count_reverse_pairs(test_list):\n    # Initialize counter for reverse pairs\n    count = 0\n    \n    # Get length of list\n    n = len(test_list)\n    \n    # Compare each string with all other strings\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Check if current string is reverse of compared string\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\n### Signature\ndef count_reverse_pairs(test_list):",
    "timestamp": "2025-10-17T19:15:13.943081",
    "response_time": "4.34",
    "context": "{\"function_name\": \"count_reverse_pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 758,
    "solution": "from collections import defaultdict\n\ndef unique_sublists(list1):\n    # Create a defaultdict to store counts\n    count_dict = defaultdict(int)\n    \n    # Iterate through the list\n    for item in list1:\n        # Check if item is a list\n        if isinstance(item, list):\n            # Convert list to tuple for hashability and count\n            count_dict[tuple(item)] += 1\n    \n    # Convert defaultdict to regular dict\n    return dict(count_dict)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n### Signature\ndef unique_sublists(list1):",
    "timestamp": "2025-10-17T19:15:17.077441",
    "response_time": "3.13",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 759,
    "solution": "import re\n\ndef is_decimal(num):\n    # Regular expression pattern for decimal number with exactly 2 decimal places\n    pattern = r'^\\d+\\.\\d{2}$'\n    \n    # Check if the string matches the pattern\n    if re.match(pattern, num):\n        return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\n### Signature\ndef is_decimal(num):",
    "timestamp": "2025-10-17T19:15:19.365050",
    "response_time": "2.28",
    "context": "{\"function_name\": \"is_decimal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 760,
    "solution": "def unique_Element(arr):\n    # Return True if all elements are same, False otherwise\n    return len(set(arr)) == 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\n### Signature\ndef unique_Element(arr):",
    "timestamp": "2025-10-17T19:15:21.713632",
    "response_time": "2.34",
    "context": "{\"function_name\": \"unique_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 762,
    "solution": "def check_monthnumber_number(monthnum3):\n    # List of months with 30 days (April, June, September, November)\n    months_with_30_days = [4, 6, 9, 11]\n    \n    # Check if the input month number is in the list of months with 30 days\n    return monthnum3 in months_with_30_days",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n### Signature\ndef check_monthnumber_number(monthnum3):",
    "timestamp": "2025-10-17T19:15:25.839173",
    "response_time": "4.12",
    "context": "{\"function_name\": \"check_monthnumber_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 763,
    "solution": "def find_min_diff(arr, n):\n    # If array has less than 2 elements, return -1\n    if n < 2:\n        return -1\n    \n    # Sort the array\n    arr.sort()\n    \n    # Initialize minimum difference as the largest possible value\n    min_diff = float('inf')\n    \n    # Compare adjacent elements to find minimum difference\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        min_diff = min(min_diff, diff)\n    \n    return min_diff",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\n### Signature\ndef find_min_diff(arr,n):",
    "timestamp": "2025-10-17T19:15:29.368604",
    "response_time": "3.52",
    "context": "{\"function_name\": \"find_min_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 764,
    "solution": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count number of digits in a given string.\n\n### Signature\ndef number_ctr(str):",
    "timestamp": "2025-10-17T19:15:31.129495",
    "response_time": "1.75",
    "context": "{\"function_name\": \"number_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 765,
    "solution": "def is_polite(n):\n    # Function to find nth polite number\n    count = 0\n    num = 1\n    \n    while count < n:\n        # For each number, try to find consecutive sum starting from 2\n        current = num + 1\n        sum_so_far = current\n        found = False\n        \n        # Try different lengths of consecutive numbers\n        while sum_so_far <= num:\n            if sum_so_far == num:\n                found = True\n                break\n            current += 1\n            sum_so_far += current\n        \n        if found:\n            count += 1\n            if count == n:\n                return num\n        num += 1\n    \n    return num",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\n### Signature\ndef is_polite(n):",
    "timestamp": "2025-10-17T19:15:35.017344",
    "response_time": "3.88",
    "context": "{\"function_name\": \"is_polite\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 766,
    "solution": "from typing import List, Any\n\ndef pair_wise(l1: List[Any]) -> List[tuple]:\n    if len(l1) < 2:\n        return []\n    return list(zip(l1[:-1], l1[1:]))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to return a list of all pairs of consecutive items in a given list.\n\n### Signature\ndef pair_wise(l1):",
    "timestamp": "2025-10-17T19:15:37.141794",
    "response_time": "2.12",
    "context": "{\"function_name\": \"pair_wise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 767,
    "solution": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    \n    # Consider all possible pairs\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\n### Signature\ndef get_pairs_count(arr, sum):",
    "timestamp": "2025-10-17T19:15:39.149715",
    "response_time": "2.00",
    "context": "{\"function_name\": \"get_pairs_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 769,
    "solution": "def Diff(li1,li2):\n    return list(set(li1) - set(li2)) + list(set(li2) - set(li1))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to get the difference between two lists.\n\n### Signature\ndef Diff(li1,li2):",
    "timestamp": "2025-10-17T19:15:41.010620",
    "response_time": "1.86",
    "context": "{\"function_name\": \"Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 770,
    "solution": "def odd_num_sum(n):\n    sum = 0\n    num = 1  # First odd number\n    count = 0\n    \n    while count < n:\n        sum += num ** 4  # Adding fourth power of odd number\n        num += 2  # Moving to next odd number\n        count += 1\n        \n    return sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\n### Signature\ndef odd_num_sum(n) :",
    "timestamp": "2025-10-17T19:15:43.947091",
    "response_time": "2.93",
    "context": "{\"function_name\": \"odd_num_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 771,
    "solution": "def check_expression(exp):\n    stack = []\n    # Dictionary to store opening and closing brackets mapping\n    brackets = {')': '(', '}': '{', ']': '['}\n    \n    # Traverse each character in the expression\n    for char in exp:\n        # If character is an opening bracket, push it to stack\n        if char in '({[':\n            stack.append(char)\n        # If character is a closing bracket\n        elif char in ')}]':\n            # If stack is empty or top of stack doesn't match\n            if not stack or stack.pop() != brackets[char]:\n                return False\n    \n    # Expression is balanced only if stack is empty at the end\n    return len(stack) == 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\n### Signature\ndef check_expression(exp):",
    "timestamp": "2025-10-17T19:15:48.485766",
    "response_time": "4.53",
    "context": "{\"function_name\": \"check_expression\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 772,
    "solution": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    \n    # Filter out words with length K\n    filtered_words = [word for word in words if len(word) != K]\n    \n    # Join the filtered words back into a string\n    return ' '.join(filtered_words)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to remove all the words with k length in the given string.\n\n### Signature\ndef remove_length(test_str, K):",
    "timestamp": "2025-10-17T19:15:51.050635",
    "response_time": "2.56",
    "context": "{\"function_name\": \"remove_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 773,
    "solution": "def occurance_substring(text, pattern):\n    if not text or not pattern:\n        return None\n    \n    pattern_length = len(pattern)\n    text_length = len(text)\n    result = []\n    \n    # If pattern is longer than text, no match possible\n    if pattern_length > text_length:\n        return None\n    \n    # Check each possible starting position in text\n    for i in range(text_length - pattern_length + 1):\n        # If we find a match at current position\n        if text[i:i + pattern_length] == pattern:\n            result.append((i, i + pattern_length - 1))\n    \n    # Return None if no matches found, otherwise return list of positions\n    return result if result else None",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n### Signature\ndef occurance_substring(text,pattern):",
    "timestamp": "2025-10-17T19:15:55.925488",
    "response_time": "4.87",
    "context": "{\"function_name\": \"occurance_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 775,
    "solution": "def odd_position(nums):\n    # Check if list is empty or has only one element\n    if len(nums) <= 1:\n        return True\n    \n    # Check each odd index (1, 3, 5, ...) for odd numbers\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:  # if number at odd index is even\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\n### Signature\ndef odd_position(nums):",
    "timestamp": "2025-10-17T19:15:59.958280",
    "response_time": "4.03",
    "context": "{\"function_name\": \"odd_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 776,
    "solution": "def count_vowels(test_str):\n    if len(test_str) < 3:\n        return 0\n        \n    vowels = set('aeiouAEIOU')\n    count = 0\n    \n    for i in range(1, len(test_str) - 1):\n        # Check if current character has vowels as neighbors\n        if (test_str[i-1] in vowels) and (test_str[i+1] in vowels):\n            count += 1\n            \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\n### Signature\ndef count_vowels(test_str):",
    "timestamp": "2025-10-17T19:16:04.331190",
    "response_time": "4.37",
    "context": "{\"function_name\": \"count_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 777,
    "solution": "def find_sum(arr):\n    # Convert list to set to remove duplicates, then sum the unique elements\n    return sum(set(arr))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the sum of non-repeated elements in a given list.\n\n### Signature\ndef find_sum(arr):",
    "timestamp": "2025-10-17T19:16:06.308078",
    "response_time": "1.97",
    "context": "{\"function_name\": \"find_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 778,
    "solution": "def pack_consecutive_duplicates(list1):\n    if not list1:\n        return []\n    \n    result = []\n    current_group = [list1[0]]\n    \n    for item in list1[1:]:\n        if item == current_group[0]:\n            current_group.append(item)\n        else:\n            result.append(current_group)\n            current_group = [item]\n    \n    result.append(current_group)\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\n### Signature\ndef pack_consecutive_duplicates(list1):",
    "timestamp": "2025-10-17T19:16:09.055008",
    "response_time": "2.74",
    "context": "{\"function_name\": \"pack_consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 779,
    "solution": "from collections import defaultdict\nfrom typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List) -> Dict[Tuple, int]:\n    count_dict = defaultdict(int)\n    \n    for item in list1:\n        if isinstance(item, list):\n            count_dict[tuple(item)] += 1\n            \n    return dict(count_dict)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\n### Signature\ndef unique_sublists(list1):",
    "timestamp": "2025-10-17T19:16:12.087814",
    "response_time": "3.03",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 780,
    "solution": "from itertools import combinations\n\ndef find_combinations(test_list):\n    # Extract all possible combinations of tuples\n    all_combs = []\n    for r in range(1, len(test_list) + 1):\n        all_combs.extend(list(combinations(test_list, r)))\n    \n    # Create a dictionary to store sum combinations\n    result = {}\n    \n    # Calculate sum for each combination and group them\n    for comb in all_combs:\n        curr_sum = sum(sum(x) for x in comb)\n        if curr_sum in result:\n            result[curr_sum].append(comb)\n        else:\n            result[curr_sum] = [comb]\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\n### Signature\ndef find_combinations(test_list):",
    "timestamp": "2025-10-17T19:16:15.535217",
    "response_time": "3.44",
    "context": "{\"function_name\": \"find_combinations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 781,
    "solution": "def count_divisors(n) :\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\n### Signature\ndef count_divisors(n) :",
    "timestamp": "2025-10-17T19:16:17.863991",
    "response_time": "2.32",
    "context": "{\"function_name\": \"count_divisors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 782,
    "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    # Consider all possible odd lengths from 1 to n\n    for length in range(1, n + 1, 2):\n        # Consider all possible starting positions for current length\n        for start in range(n - length + 1):\n            # Sum elements from start to start+length\n            for i in range(start, start + length):\n                total_sum += arr[i]\n    \n    return total_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\n### Signature\ndef odd_length_sum(arr):",
    "timestamp": "2025-10-17T19:16:21.392401",
    "response_time": "3.52",
    "context": "{\"function_name\": \"odd_length_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 783,
    "solution": "def rgb_to_hsv(r, g, b):\n    # Scale RGB values to range 0-1\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # Find maximum and minimum values\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    \n    # Initialize h\n    h = 0\n    \n    # Calculate h (hue)\n    if diff == 0:\n        h = 0\n    elif cmax == r:\n        h = (60 * ((g-b)/diff) + 360) % 360\n    elif cmax == g:\n        h = (60 * ((b-r)/diff) + 120) % 360\n    elif cmax == b:\n        h = (60 * ((r-g)/diff) + 240) % 360\n    \n    # Calculate s (saturation)\n    s = 0 if cmax == 0 else (diff / cmax) * 100\n    \n    # Calculate v (value)\n    v = cmax * 100\n    \n    return (h, s, v)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n### Signature\ndef rgb_to_hsv(r, g, b):",
    "timestamp": "2025-10-17T19:16:28.131724",
    "response_time": "6.73",
    "context": "{\"function_name\": \"rgb_to_hsv\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 784,
    "solution": "from typing import List\n\ndef mul_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return None\n    \n    return first_even * first_odd",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the product of first even and odd number of a given list.\n\n### Signature\ndef mul_even_odd(list1):",
    "timestamp": "2025-10-17T19:16:30.455341",
    "response_time": "2.32",
    "context": "{\"function_name\": \"mul_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 785,
    "solution": "def tuple_str_int(test_str):\n    # Remove parentheses and split by comma\n    str_nums = test_str.strip('()').split(',')\n    # Convert each string number to integer and create tuple\n    return tuple(int(num.strip()) for num in str_nums)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert tuple string to integer tuple.\n\n### Signature\ndef tuple_str_int(test_str):",
    "timestamp": "2025-10-17T19:16:32.926818",
    "response_time": "2.47",
    "context": "{\"function_name\": \"tuple_str_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 786,
    "solution": "from bisect import bisect_right\n\ndef right_insertion(a, x):\n    \"\"\"\n    Find the rightmost position where x should be inserted in sorted array a.\n    \n    Args:\n        a: List of comparable elements in sorted order\n        x: Element to find insertion point for\n        \n    Returns:\n        Integer index where x should be inserted to maintain sorted order\n    \"\"\"\n    return bisect_right(a, x)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\n### Signature\ndef right_insertion(a, x):",
    "timestamp": "2025-10-17T19:16:36.082192",
    "response_time": "3.15",
    "context": "{\"function_name\": \"right_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 787,
    "solution": "import re\n\ndef text_match_three(text):\n    pattern = 'ab{3}'\n    if re.search(pattern, text):\n        return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by three 'b'.\n\n### Signature\ndef text_match_three(text):",
    "timestamp": "2025-10-17T19:16:38.152146",
    "response_time": "2.06",
    "context": "{\"function_name\": \"text_match_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 788,
    "solution": "def new_tuple(test_list, test_str):\n    # Convert string to tuple\n    str_tuple = tuple(test_str)\n    \n    # Convert list to tuple\n    list_tuple = tuple(test_list)\n    \n    # Combine both tuples\n    result_tuple = str_tuple + list_tuple\n    \n    return result_tuple",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to create a new tuple from the given string and list.\n\n### Signature\ndef new_tuple(test_list, test_str):",
    "timestamp": "2025-10-17T19:16:40.183256",
    "response_time": "2.02",
    "context": "{\"function_name\": \"new_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 790,
    "solution": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether every even index contains even numbers of a given list.\n\n### Signature\ndef even_position(nums):",
    "timestamp": "2025-10-17T19:16:42.160654",
    "response_time": "1.97",
    "context": "{\"function_name\": \"even_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 791,
    "solution": "def remove_nested(test_tup):\n    return tuple(item for item in test_tup if not isinstance(item, tuple))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to remove tuples from the given tuple.\n\n### Signature\ndef remove_nested(test_tup):",
    "timestamp": "2025-10-17T19:16:43.939803",
    "response_time": "1.77",
    "context": "{\"function_name\": \"remove_nested\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 792,
    "solution": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count the number of lists in a given number of lists.\n\n### Signature\ndef count_list(input_list):",
    "timestamp": "2025-10-17T19:16:45.278182",
    "response_time": "1.33",
    "context": "{\"function_name\": \"count_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 793,
    "solution": "def last(arr, x):\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            # Continue searching in the right half for last occurrence\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the last position of an element in a sorted array.\n\n### Signature\ndef last(arr,x):",
    "timestamp": "2025-10-17T19:16:48.709671",
    "response_time": "3.42",
    "context": "{\"function_name\": \"last\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 794,
    "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n### Signature\ndef text_starta_endb(text):",
    "timestamp": "2025-10-17T19:16:50.458842",
    "response_time": "1.74",
    "context": "{\"function_name\": \"text_starta_endb\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 796,
    "solution": "def return_sum(dict):\n    total = 0\n    for value in dict.values():\n        if isinstance(value, (int, float)):\n            total += value\n    return total",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite function to find the sum of all items in the given dictionary.\n\n### Signature\ndef return_sum(dict):",
    "timestamp": "2025-10-17T19:16:51.995414",
    "response_time": "1.53",
    "context": "{\"function_name\": \"return_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 797,
    "solution": "def sum_in_range(n):\n    # Initialize variables for range\n    l = 1\n    r = n\n    \n    # Initialize sum\n    total = 0\n    \n    # Loop through range and add odd numbers\n    for num in range(l, r + 1):\n        if num % 2 != 0:  # Check if number is odd\n            total += num\n            \n    return total",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\n### Signature\ndef sum_odd(n):",
    "timestamp": "2025-10-17T19:16:55.398932",
    "response_time": "3.40",
    "context": "{\"function_name\": \"sum_in_range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 798,
    "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the sum of an array.\n\n### Signature\ndef _sum(arr):",
    "timestamp": "2025-10-17T19:16:56.851045",
    "response_time": "1.44",
    "context": "{\"function_name\": \"_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 799,
    "solution": "def left_rotate(n,d):\n    # Normalize d to be within 0-31 range since we're working with 32 bits\n    d = d % 32\n    \n    # Convert to 32 bit by using mask\n    n = n & 0xFFFFFFFF\n    \n    # Left shift by d bits\n    left = (n << d) & 0xFFFFFFFF\n    \n    # Right shift by (32-d) bits\n    right = (n >> (32 - d)) & 0xFFFFFFFF\n    \n    # Combine both parts and return\n    return (left | right) & 0xFFFFFFFF",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n### Signature\ndef left_rotate(n,d):",
    "timestamp": "2025-10-17T19:17:01.923854",
    "response_time": "5.07",
    "context": "{\"function_name\": \"left_rotate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 800,
    "solution": "def remove_all_spaces(text):\n    return \"\".join(text.split())",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from a string.\n\n### Signature\ndef remove_all_spaces(text):",
    "timestamp": "2025-10-17T19:17:03.674895",
    "response_time": "1.74",
    "context": "{\"function_name\": \"remove_all_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 801,
    "solution": "def test_three_equal(x,y,z):\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count the number of equal numbers from three given integers.\n\n### Signature\ndef test_three_equal(x,y,z):",
    "timestamp": "2025-10-17T19:17:05.886800",
    "response_time": "2.21",
    "context": "{\"function_name\": \"test_three_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 802,
    "solution": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n        \n    # Find the minimum element's index\n    # That will be the number of rotations\n    min_idx = 0\n    for i in range(1, n):\n        if arr[i] < arr[min_idx]:\n            min_idx = i\n            \n    return min_idx",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n### Signature\ndef count_rotation(arr):",
    "timestamp": "2025-10-17T19:17:08.973172",
    "response_time": "3.08",
    "context": "{\"function_name\": \"count_rotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 803,
    "solution": "import math\n\ndef is_perfect_square(n):\n    # For negative numbers, return False as they cannot be perfect squares\n    if n < 0:\n        return False\n    \n    # Find the square root\n    sqrt = int(math.sqrt(n))\n    \n    # Check if the square of the square root equals the original number\n    return sqrt * sqrt == n",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\n### Signature\ndef is_perfect_square(n) :",
    "timestamp": "2025-10-17T19:17:11.019421",
    "response_time": "2.04",
    "context": "{\"function_name\": \"is_perfect_square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 804,
    "solution": "from functools import reduce\nfrom operator import mul\n\ndef is_product_even(arr):\n    if not arr:\n        return False\n    product = reduce(mul, arr, 1)\n    return product % 2 == 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether the product of numbers in a list is even or not.\n\n### Signature\ndef is_product_even(arr):",
    "timestamp": "2025-10-17T19:17:13.625815",
    "response_time": "2.60",
    "context": "{\"function_name\": \"is_product_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 805,
    "solution": "def max_sum_list(lists):\n    if not lists:\n        return None\n    return max(lists, key=sum)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\n### Signature\ndef max_sum_list(lists):",
    "timestamp": "2025-10-17T19:17:15.509547",
    "response_time": "1.88",
    "context": "{\"function_name\": \"max_sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 806,
    "solution": "def max_run_uppercase(test_str):\n    if not test_str:\n        return 0\n    \n    max_count = 0\n    current_count = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n            \n    return max_count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find maximum run of uppercase characters in the given string.\n\n### Signature\ndef max_run_uppercase(test_str):",
    "timestamp": "2025-10-17T19:17:18.587794",
    "response_time": "3.07",
    "context": "{\"function_name\": \"max_run_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 807,
    "solution": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the first odd number in a given list of numbers.\n\n### Signature\ndef first_odd(nums):",
    "timestamp": "2025-10-17T19:17:20.423958",
    "response_time": "1.83",
    "context": "{\"function_name\": \"first_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 808,
    "solution": "def check_K(test_tup, K):\n    # Convert tuple to string to handle nested tuples\n    str_tup = str(test_tup)\n    # Check if K exists in the string representation\n    return str(K) in str_tup",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if the given tuples contain the k or not.\n\n### Signature\ndef check_K(test_tup, K):",
    "timestamp": "2025-10-17T19:17:22.454189",
    "response_time": "2.02",
    "context": "{\"function_name\": \"check_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_second_half",
    "dataset_row_id": 809,
    "solution": "def check_smaller(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return False\n    return all(y < x for x, y in zip(test_tup1, test_tup2))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n### Signature\ndef check_smaller(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T19:17:24.688247",
    "response_time": "2.23",
    "context": "{\"function_name\": \"check_smaller\"}"
  }
]