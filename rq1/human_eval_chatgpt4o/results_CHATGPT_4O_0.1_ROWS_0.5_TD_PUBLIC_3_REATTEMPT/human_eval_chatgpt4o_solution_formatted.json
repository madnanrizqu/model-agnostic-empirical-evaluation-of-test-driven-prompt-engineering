[
  {
    "dataset_name": "human_eval_chatgpt4o",
    "dataset_row_id": 0,
    "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the numbers to ensure we only need to compare adjacent elements\n    numbers.sort()\n    \n    # Iterate through the sorted list and check the difference between adjacent elements\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    \n    return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\n     Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n\n### Signature\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:",
    "timestamp": "2025-08-13T11:06:13.546365",
    "response_time": "2.37"
  },
  {
    "dataset_name": "human_eval_chatgpt4o",
    "dataset_row_id": 1,
    "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    result = []\n    current_group = \"\"\n    balance = 0\n    \n    for char in paren_string:\n        current_group += char\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        # If balance is zero, we have a complete group\n        if balance == 0:\n            result.append(current_group)\n            current_group = \"\"\n    \n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\n     Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n\n### Signature\ndef separate_paren_groups(paren_string: str) -> List[str]:",
    "timestamp": "2025-08-13T11:06:15.232562",
    "response_time": "1.68"
  },
  {
    "dataset_name": "human_eval_chatgpt4o",
    "dataset_row_id": 2,
    "solution": "def truncate_number(number: float) -> float:\n    # Extract the integer part using int() which truncates the decimal part\n    integer_part = int(number)\n    # Calculate the decimal part by subtracting the integer part from the original number\n    decimal_part = number - integer_part\n    # Return the decimal part\n    return decimal_part\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\n     Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n### Signature\ndef truncate_number(number: float) -> float:",
    "timestamp": "2025-08-13T11:06:17.070602",
    "response_time": "1.84"
  },
  {
    "dataset_name": "human_eval_chatgpt4o",
    "dataset_row_id": 3,
    "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\n     You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n\n### Signature\ndef below_zero(operations: List[int]) -> bool:",
    "timestamp": "2025-08-13T11:06:18.366308",
    "response_time": "1.30"
  },
  {
    "dataset_name": "human_eval_chatgpt4o",
    "dataset_row_id": 4,
    "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0  # Return 0.0 for an empty list as MAD is undefined\n    \n    # Calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the mean absolute deviation\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    \n    return mad",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\n     For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\n### Signature\ndef mean_absolute_deviation(numbers: List[float]) -> float:",
    "timestamp": "2025-08-13T11:06:19.775347",
    "response_time": "1.41"
  },
  {
    "dataset_name": "human_eval_chatgpt4o",
    "dataset_row_id": 5,
    "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    \n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\n     Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n\n### Signature\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:",
    "timestamp": "2025-08-13T11:06:21.298004",
    "response_time": "1.52"
  },
  {
    "dataset_name": "human_eval_chatgpt4o",
    "dataset_row_id": 6,
    "solution": "def parse_nested_parens(paren_string: str) -> List[int]:\n    def max_depth(s: str) -> int:\n        depth = 0\n        max_depth = 0\n        for char in s:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n\n    groups = paren_string.split()\n    return [max_depth(group) for group in groups]\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\n     Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n### Signature\ndef parse_nested_parens(paren_string: str) -> List[int]:",
    "timestamp": "2025-08-13T11:06:23.146493",
    "response_time": "1.85"
  },
  {
    "dataset_name": "human_eval_chatgpt4o",
    "dataset_row_id": 7,
    "solution": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\n     Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n\n### Signature\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:",
    "timestamp": "2025-08-13T11:06:24.180056",
    "response_time": "1.03"
  },
  {
    "dataset_name": "human_eval_chatgpt4o",
    "dataset_row_id": 8,
    "solution": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    return (total_sum, total_product)\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\n     For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n\n### Signature\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:",
    "timestamp": "2025-08-13T11:06:26.354777",
    "response_time": "2.17"
  },
  {
    "dataset_name": "human_eval_chatgpt4o",
    "dataset_row_id": 9,
    "solution": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')  # Initialize with negative infinity\n    for num in numbers:\n        current_max = max(current_max, num)  # Update the rolling maximum\n        result.append(current_max)  # Append the current maximum to the result list\n    return result\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\n     From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n\n### Signature\ndef rolling_max(numbers: List[int]) -> List[int]:",
    "timestamp": "2025-08-13T11:06:28.231956",
    "response_time": "1.87"
  },
  {
    "dataset_name": "human_eval_chatgpt4o",
    "dataset_row_id": 10,
    "solution": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    \n    n = len(string)\n    for i in range(n):\n        if is_palindrome(string[i:]):\n            # Append the reverse of the prefix before the palindromic suffix\n            return string + string[:i][::-1]\n    return string  # This handles the case where the string is empty",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\n     Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n\n### Signature\ndef make_palindrome(string: str) -> str:",
    "timestamp": "2025-08-13T11:06:30.431083",
    "response_time": "2.20"
  },
  {
    "dataset_name": "human_eval_chatgpt4o",
    "dataset_row_id": 11,
    "solution": "def string_xor(a: str, b: str) -> str:\n    # Perform XOR operation on each pair of bits from a and b\n    result = ''.join('1' if x != y else '0' for x, y in zip(a, b))\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\n     Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\n### Signature\ndef string_xor(a: str, b: str) -> str:",
    "timestamp": "2025-08-13T11:06:31.827005",
    "response_time": "1.40"
  },
  {
    "dataset_name": "human_eval_chatgpt4o",
    "dataset_row_id": 12,
    "solution": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len, default=None)\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\n     Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n### Signature\ndef longest(strings: List[str]) -> Optional[str]:",
    "timestamp": "2025-08-13T11:06:33.297000",
    "response_time": "1.47"
  },
  {
    "dataset_name": "human_eval_chatgpt4o",
    "dataset_row_id": 13,
    "solution": "from math import gcd\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return gcd(a, b)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\n     Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n\n### Signature\ndef greatest_common_divisor(a: int, b: int) -> int:",
    "timestamp": "2025-08-13T11:06:34.857088",
    "response_time": "1.56"
  },
  {
    "dataset_name": "human_eval_chatgpt4o",
    "dataset_row_id": 14,
    "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\n     Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n\n### Signature\ndef all_prefixes(string: str) -> List[str]:",
    "timestamp": "2025-08-13T11:06:35.890321",
    "response_time": "1.03"
  },
  {
    "dataset_name": "human_eval_chatgpt4o",
    "dataset_row_id": 15,
    "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\n     Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n\n### Signature\ndef string_sequence(n: int) -> str:",
    "timestamp": "2025-08-13T11:06:37.010144",
    "response_time": "1.12"
  }
]