[
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 0,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the numbers to ensure we only need to compare adjacent elements\n    numbers.sort()\n    \n    # Iterate through the sorted list and check the difference between adjacent elements\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    \n    return False\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n\n### Signature\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:",
        "timestamp": "2025-10-17T22:44:11.999150",
        "response_time": "2.16"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 1,
        "solution": "```python\nfrom typing import List\n\n# ===START===\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    result = []\n    stack = []\n    current_group = \"\"\n    \n    for char in paren_string:\n        current_group += char\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:  # If stack is empty, we have a complete group\n                result.append(current_group)\n                current_group = \"\"\n    \n    return result\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n\n### Signature\ndef separate_paren_groups(paren_string: str) -> List[str]:",
        "timestamp": "2025-10-17T22:44:14.906241",
        "response_time": "2.90"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 2,
        "solution": "```python\n===START===\ndef truncate_number(number: float) -> float:\n    \"\"\"\n    Decomposes a positive floating point number into its integer part and decimal part.\n    Returns the decimal part of the number.\n    \n    Args:\n    number (float): A positive floating point number.\n    \n    Returns:\n    float: The decimal part of the number.\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"The input number must be positive.\")\n    \n    integer_part = int(number)  # Largest integer smaller than the given number\n    decimal_part = number - integer_part  # Leftover part smaller than 1\n    return decimal_part\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n### Signature\ndef truncate_number(number: float) -> float:",
        "timestamp": "2025-10-17T22:44:17.700883",
        "response_time": "2.79"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 3,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n\n### Signature\ndef below_zero(operations: List[int]) -> bool:",
        "timestamp": "2025-10-17T22:44:18.746515",
        "response_time": "1.04"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 4,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0  # Handle empty list case\n    \n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(numbers)\n    return mad\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\n### Signature\ndef mean_absolute_deviation(numbers: List[float]) -> float:",
        "timestamp": "2025-10-17T22:44:21.185094",
        "response_time": "2.44"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 5,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    \n    return result\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n\n### Signature\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:",
        "timestamp": "2025-10-17T22:44:22.574321",
        "response_time": "1.39"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 6,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def max_nesting_level(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for char in s:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        return max_depth\n\n    groups = paren_string.split()\n    return [max_nesting_level(group) for group in groups]\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n### Signature\ndef parse_nested_parens(paren_string: str) -> List[int]:",
        "timestamp": "2025-10-17T22:44:24.427006",
        "response_time": "1.85"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 7,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n\n### Signature\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:",
        "timestamp": "2025-10-17T22:44:25.306677",
        "response_time": "0.88"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 8,
        "solution": "```python\nfrom typing import List, Tuple\n\n===START===\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    return (total_sum, total_product)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n\n### Signature\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:",
        "timestamp": "2025-10-17T22:44:26.668801",
        "response_time": "1.36"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 9,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')  # Initialize with negative infinity\n    for num in numbers:\n        current_max = max(current_max, num)  # Update the rolling maximum\n        result.append(current_max)  # Append the current maximum to the result list\n    return result\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n\n### Signature\ndef rolling_max(numbers: List[int]) -> List[int]:",
        "timestamp": "2025-10-17T22:44:28.813812",
        "response_time": "2.14"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 10,
        "solution": "```python\n===START===\ndef make_palindrome(string: str) -> str:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    \n    n = len(string)\n    for i in range(n):\n        if is_palindrome(string[i:]):\n            # Append the reverse of the prefix before the palindromic suffix\n            return string + string[:i][::-1]\n    return string  # In case the string is empty or already a palindrome\n\n# Examples\nif __name__ == \"__main__\":\n    print(make_palindrome(''))  # ''\n    print(make_palindrome('cat'))  # 'catac'\n    print(make_palindrome('cata'))  # 'catac'\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n\n### Signature\ndef make_palindrome(string: str) -> str:",
        "timestamp": "2025-10-17T22:44:30.717345",
        "response_time": "1.90"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 11,
        "solution": "```python\n===START===\ndef string_xor(a: str, b: str) -> str:\n    # Perform XOR operation on each pair of bits from the two strings\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\n### Signature\ndef string_xor(a: str, b: str) -> str:",
        "timestamp": "2025-10-17T22:44:31.868113",
        "response_time": "1.15"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 12,
        "solution": "===START===\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda s: (len(s), -strings.index(s)))\n\n===END===",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n### Signature\ndef longest(strings: List[str]) -> Optional[str]:",
        "timestamp": "2025-10-17T22:44:33.155525",
        "response_time": "1.29"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 13,
        "solution": "===START===\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n===END===",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n\n### Signature\ndef greatest_common_divisor(a: int, b: int) -> int:",
        "timestamp": "2025-10-17T22:44:34.318782",
        "response_time": "1.16"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 14,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n\n### Signature\ndef all_prefixes(string: str) -> List[str]:",
        "timestamp": "2025-10-17T22:44:35.342351",
        "response_time": "1.02"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 15,
        "solution": "===START===\ndef string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))\n===END===",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n\n### Signature\ndef string_sequence(n: int) -> str:",
        "timestamp": "2025-10-17T22:44:36.160164",
        "response_time": "0.81"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 16,
        "solution": "```python\n===START===\ndef count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to make it case-insensitive\n    string = string.lower()\n    # Use a set to store distinct characters\n    distinct_characters = set(string)\n    # Return the number of distinct characters\n    return len(distinct_characters)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n\n### Signature\ndef count_distinct_characters(string: str) -> int:",
        "timestamp": "2025-10-17T22:44:37.640693",
        "response_time": "1.48"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 17,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parses a string representing musical notes in a special ASCII format and returns a list of integers\n    corresponding to how many beats each note lasts.\n\n    Args:\n    music_string (str): A string representing musical notes in a special ASCII format.\n\n    Returns:\n    List[int]: A list of integers where each integer represents the duration of a note in beats.\n    \"\"\"\n    beats = []\n    current_beat = 0\n\n    for char in music_string:\n        if char == '-':\n            current_beat += 1\n        elif char == ' ':\n            if current_beat > 0:\n                beats.append(current_beat)\n                current_beat = 0\n        else:\n            if current_beat > 0:\n                beats.append(current_beat)\n            beats.append(1)\n            current_beat = 0\n\n    if current_beat > 0:\n        beats.append(current_beat)\n\n    return beats\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n### Signature\ndef parse_music(music_string: str) -> List[int]:",
        "timestamp": "2025-10-17T22:44:40.464953",
        "response_time": "2.82"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 18,
        "solution": "```python\n===START===\ndef how_many_times(string: str, substring: str) -> int:\n    if not substring:\n        return 0\n    \n    count = 0\n    start = 0\n    \n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1  # Move one character forward to allow overlapping matches\n    \n    return count\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n\n### Signature\ndef how_many_times(string: str, substring: str) -> int:",
        "timestamp": "2025-10-17T22:44:42.048820",
        "response_time": "1.58"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 19,
        "solution": "```python\n===START===\ndef sort_numbers(numbers: str) -> str:\n    # Mapping of number words to their numeric values\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of words\n    number_words = numbers.split()\n    \n    # Sort the words based on their numeric value using the mapping\n    sorted_words = sorted(number_words, key=lambda word: number_map[word])\n    \n    # Join the sorted words back into a space-delimited string\n    return ' '.join(sorted_words)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n\n### Signature\ndef sort_numbers(numbers: str) -> str:",
        "timestamp": "2025-10-17T22:44:44.705699",
        "response_time": "2.66"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 20,
        "solution": "```python\n===START===\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the numbers to ensure they are in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize variables to track the closest pair and the smallest difference\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    smallest_difference = abs(sorted_numbers[1] - sorted_numbers[0])\n    \n    # Iterate through the sorted list to find the closest pair\n    for i in range(len(sorted_numbers) - 1):\n        current_difference = abs(sorted_numbers[i + 1] - sorted_numbers[i])\n        if current_difference < smallest_difference:\n            smallest_difference = current_difference\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    \n    return closest_pair\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n\n### Signature\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:",
        "timestamp": "2025-10-17T22:44:47.467640",
        "response_time": "2.76"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 21,
        "solution": "```python\nfrom typing import List\n\n# ===START===\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    \n    # Avoid division by zero if all numbers are the same\n    if range_val == 0:\n        return [0.0 for _ in numbers]\n    \n    return [(num - min_val) / range_val for num in numbers]\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\n### Signature\ndef rescale_to_unit(numbers: List[float]) -> List[float]:",
        "timestamp": "2025-10-17T22:44:49.984591",
        "response_time": "2.51"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 22,
        "solution": "```python\n===START===\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n\n### Signature\ndef filter_integers(values: List[Any]) -> List[int]:",
        "timestamp": "2025-10-17T22:44:50.861149",
        "response_time": "0.87"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 23,
        "solution": "===START===\ndef strlen(string: str) -> int:\n    return len(string)\n===END===",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n\n### Signature\ndef strlen(string: str) -> int:",
        "timestamp": "2025-10-17T22:44:51.682637",
        "response_time": "0.82"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 24,
        "solution": "```python\n===START===\ndef largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n\n### Signature\ndef largest_divisor(n: int) -> int:",
        "timestamp": "2025-10-17T22:44:52.535011",
        "response_time": "0.85"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 25,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n\n### Signature\ndef factorize(n: int) -> List[int]:",
        "timestamp": "2025-10-17T22:44:54.347954",
        "response_time": "1.81"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 26,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Create a dictionary to count occurrences of each number\n    count = {}\n    for num in numbers:\n        count[num] = count.get(num, 0) + 1\n    \n    # Filter out numbers that occur more than once\n    result = [num for num in numbers if count[num] == 1]\n    \n    return result\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n\n### Signature\ndef remove_duplicates(numbers: List[int]) -> List[int]:",
        "timestamp": "2025-10-17T22:44:56.166762",
        "response_time": "1.81"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 27,
        "solution": "===START===\ndef flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)\n===END===",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n\n### Signature\ndef flip_case(string: str) -> str:",
        "timestamp": "2025-10-17T22:44:57.402821",
        "response_time": "1.23"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 28,
        "solution": "===START===\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n===END===",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n\n### Signature\ndef concatenate(strings: List[str]) -> str:",
        "timestamp": "2025-10-17T22:44:58.391455",
        "response_time": "0.99"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 29,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\n### Signature\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:",
        "timestamp": "2025-10-17T22:44:59.548223",
        "response_time": "1.15"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 30,
        "solution": "===START===\ndef get_positive(l: list):\n    return [x for x in l if x > 0]\n===END===",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n\n### Signature\ndef get_positive(l: list):",
        "timestamp": "2025-10-17T22:45:00.314665",
        "response_time": "0.76"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 31,
        "solution": "```python\n# ===START===\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n\n### Signature\ndef is_prime(n):",
        "timestamp": "2025-10-17T22:45:01.697752",
        "response_time": "1.38"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 32,
        "solution": "```python\n===START===\nfrom typing import List\n\ndef poly(xs: List[float], x: float) -> float:\n    result = 0\n    for i, coeff in enumerate(xs):\n        result += coeff * (x ** i)\n    return result\n\ndef find_zero(xs: List[float]) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    \n    # Use a simple numerical method to find the root, such as the bisection method\n    def bisection_method(f, a, b, tol=1e-7):\n        if f(a) * f(b) > 0:\n            raise ValueError(\"The function must have opposite signs at the endpoints a and b.\")\n        while (b - a) / 2 > tol:\n            midpoint = (a + b) / 2\n            if f(midpoint) == 0:\n                return midpoint\n            elif f(a) * f(midpoint) < 0:\n                b = midpoint\n            else:\n                a = midpoint\n        return (a + b) / 2\n\n    # Define the polynomial function\n    def polynomial(x):\n        return poly(xs, x)\n\n    # Find an interval where the root exists\n    a, b = -1000, 1000  # Start with a large interval\n    while polynomial(a) * polynomial(b) > 0:\n        a *= 2\n        b *= 2\n        if abs(a) > 1e6 or abs(b) > 1e6:  # Prevent infinite loop\n            raise ValueError(\"Unable to find a suitable interval for the root.\")\n\n    # Use the bisection method to find the root\n    return bisection_method(polynomial, a, b)\n\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\n### Signature\ndef poly(xs: list, x: float):\n\n### Prompt\n     xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n\n### Signature\ndef find_zero(xs: list):",
        "timestamp": "2025-10-17T22:45:07.368532",
        "response_time": "5.67"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 33,
        "solution": "```python\n===START===\ndef sort_third(l: list):\n    # Extract values at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort the extracted values\n    divisible_by_three_sorted = sorted(divisible_by_three)\n    \n    # Replace the values at indices divisible by 3 with the sorted values\n    result = l[:]\n    for idx, value in zip(range(0, len(l), 3), divisible_by_three_sorted):\n        result[idx] = value\n    \n    return result\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n\n### Signature\ndef sort_third(l: list):",
        "timestamp": "2025-10-17T22:45:09.488864",
        "response_time": "2.12"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 34,
        "solution": "```python\n===START===\ndef unique(l: list):\n    return sorted(set(l))\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n\n### Signature\ndef unique(l: list):",
        "timestamp": "2025-10-17T22:45:11.011977",
        "response_time": "1.52"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 35,
        "solution": "```python\n===START===\ndef max_element(l: list):\n    if not l:  # Check if the list is empty\n        return None\n    max_val = l[0]  # Initialize the maximum value with the first element\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\n### Signature\ndef max_element(l: list):",
        "timestamp": "2025-10-17T22:45:12.392503",
        "response_time": "1.38"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 36,
        "solution": "```python\n===START===\ndef fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n\n### Signature\ndef fizz_buzz(n: int):",
        "timestamp": "2025-10-17T22:45:13.618385",
        "response_time": "1.22"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 37,
        "solution": "```python\n===START===\ndef sort_even(l: list):\n    # Extract values at even indices\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    # Sort the values at even indices\n    even_indices_values.sort()\n    # Create the result list\n    result = l[:]\n    # Replace the even indices in the result list with the sorted values\n    for i, value in zip(range(0, len(l), 2), even_indices_values):\n        result[i] = value\n    return result\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n\n### Signature\ndef sort_even(l: list):",
        "timestamp": "2025-10-17T22:45:17.610920",
        "response_time": "3.99"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 38,
        "solution": "```python\n===START===\ndef encode_cyclic(s: str):\n    encoded = []\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        if len(group) == 3:\n            encoded.append(group[1] + group[2] + group[0])\n        else:\n            encoded.append(group)\n    return ''.join(encoded)\n\ndef decode_cyclic(s: str):\n    decoded = []\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        if len(group) == 3:\n            decoded.append(group[2] + group[0] + group[1])\n        else:\n            decoded.append(group)\n    return ''.join(decoded)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    returns encoded string by cycling groups of three characters.\n\n### Signature\ndef encode_cyclic(s: str):\n\n### Prompt\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n\n### Signature\ndef decode_cyclic(s: str):",
        "timestamp": "2025-10-17T22:45:20.436151",
        "response_time": "2.82"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 39,
        "solution": "```python\n===START===\nfrom math import isqrt\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, isqrt(num) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    fibs = [0, 1]\n    prime_fibs = []\n    while len(prime_fibs) < n:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        if is_prime(next_fib):\n            prime_fibs.append(next_fib)\n    return prime_fibs[n - 1]\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n\n### Signature\ndef prime_fib(n: int):",
        "timestamp": "2025-10-17T22:45:22.279615",
        "response_time": "1.84"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 40,
        "solution": "```python\n===START===\ndef triples_sum_to_zero(l: list):\n    n = len(l)\n    if n < 3:\n        return False\n    \n    # Sort the list to use two-pointer technique\n    l.sort()\n    \n    for i in range(n - 2):\n        # Avoid duplicates for the first element\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        \n        # Two-pointer approach\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n### Signature\ndef triples_sum_to_zero(l: list):",
        "timestamp": "2025-10-17T22:45:24.379414",
        "response_time": "2.10"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 41,
        "solution": "```python\n# ===START===\ndef car_race_collision(n: int):\n    \"\"\"\n    Given n cars moving left to right and n cars moving right to left, this function calculates\n    the number of collisions that occur. Since the cars are infinitely sturdy and continue moving\n    in their trajectory, the number of collisions is simply equal to n.\n    \n    Args:\n    n (int): The number of cars moving in each direction.\n    \n    Returns:\n    int: The number of collisions.\n    \"\"\"\n    # Each car moving left to right will collide with each car moving right to left.\n    # Since there are n cars in each direction, the number of collisions is n.\n    return n\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n### Signature\ndef car_race_collision(n: int):",
        "timestamp": "2025-10-17T22:45:27.140079",
        "response_time": "2.76"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 42,
        "solution": "```python\n===START===\ndef incr_list(l: list):\n    return [x + 1 for x in l]\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n\n### Signature\ndef incr_list(l: list):",
        "timestamp": "2025-10-17T22:45:28.563831",
        "response_time": "1.42"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 43,
        "solution": "```python\n===START===\ndef pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n\n### Signature\ndef pairs_sum_to_zero(l):",
        "timestamp": "2025-10-17T22:45:29.644355",
        "response_time": "1.08"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 44,
        "solution": "```python\n===START===\ndef change_base(x: int, base: int) -> str:\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9 inclusive.\")\n    \n    if x == 0:\n        return \"0\"\n    \n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    \n    return ''.join(reversed(result))\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n\n### Signature\ndef change_base(x: int, base: int):",
        "timestamp": "2025-10-17T22:45:30.998422",
        "response_time": "1.35"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 45,
        "solution": "```python\n===START===\ndef triangle_area(a, h):\n    \"\"\"\n    Calculate the area of a triangle given the length of its base (a) and height (h).\n    \n    Args:\n    a (float): The length of the base of the triangle.\n    h (float): The height of the triangle.\n    \n    Returns:\n    float: The area of the triangle.\n    \"\"\"\n    return 0.5 * a * h\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n\n### Signature\ndef triangle_area(a, h):",
        "timestamp": "2025-10-17T22:45:32.675708",
        "response_time": "1.67"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 46,
        "solution": "```python\n===START===\ndef fib4(n: int):\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    # Initialize the first four values of the sequence\n    a, b, c, d = 0, 0, 2, 0\n\n    # Compute the sequence iteratively\n    for _ in range(4, n + 1):\n        next_value = a + b + c + d\n        a, b, c, d = b, c, d, next_value\n\n    return d\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n\n### Signature\ndef fib4(n: int):",
        "timestamp": "2025-10-17T22:45:36.009828",
        "response_time": "3.33"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 47,
        "solution": "```python\n# ===START===\ndef median(l: list):\n    # Sort the list\n    l.sort()\n    n = len(l)\n    \n    # If the number of elements is odd, return the middle element\n    if n % 2 == 1:\n        return l[n // 2]\n    # If the number of elements is even, return the average of the two middle elements\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n\n### Signature\ndef median(l: list):",
        "timestamp": "2025-10-17T22:45:37.454176",
        "response_time": "1.44"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 48,
        "solution": "```python\n===START===\ndef is_palindrome(text: str) -> bool:\n    # A string is a palindrome if it reads the same forwards and backwards\n    return text == text[::-1]\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n\n### Signature\ndef is_palindrome(text: str):",
        "timestamp": "2025-10-17T22:45:38.740457",
        "response_time": "1.28"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 49,
        "solution": "```python\n===START===\ndef modp(n: int, p: int):\n    # Calculate 2^n % p using modular exponentiation\n    return pow(2, n, p)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n\n### Signature\ndef modp(n: int, p: int):",
        "timestamp": "2025-10-17T22:45:39.759148",
        "response_time": "1.02"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 50,
        "solution": "```python\n===START===\ndef encode_shift(s: str) -> str:\n    encoded = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encoded.append(chr((ord(char) - ord('a') + 5) % 26 + ord('a')))\n            elif char.isupper():\n                encoded.append(chr((ord(char) - ord('A') + 5) % 26 + ord('A')))\n        else:\n            encoded.append(char)\n    return ''.join(encoded)\n\ndef decode_shift(s: str) -> str:\n    decoded = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                decoded.append(chr((ord(char) - ord('a') - 5) % 26 + ord('a')))\n            elif char.isupper():\n                decoded.append(chr((ord(char) - ord('A') - 5) % 26 + ord('A')))\n        else:\n            decoded.append(char)\n    return ''.join(decoded)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    returns encoded string by shifting every character by 5 in the alphabet.\n\n### Signature\ndef encode_shift(s: str):\n\n### Prompt\n    takes as input string encoded with encode_shift function. Returns decoded string.\n\n### Signature\ndef decode_shift(s: str):",
        "timestamp": "2025-10-17T22:45:41.944204",
        "response_time": "2.18"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 51,
        "solution": "===START===\ndef remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)\n===END===",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n\n### Signature\ndef remove_vowels(text):",
        "timestamp": "2025-10-17T22:45:43.381705",
        "response_time": "1.43"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 52,
        "solution": "===START===\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n===END===",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n\n### Signature\ndef below_threshold(l: list, t: int):",
        "timestamp": "2025-10-17T22:45:44.366925",
        "response_time": "0.98"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 53,
        "solution": "===START===\ndef add(x: int, y: int):\n    return x + y\n===END===",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\n### Signature\ndef add(x: int, y: int):",
        "timestamp": "2025-10-17T22:45:45.444848",
        "response_time": "1.08"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 54,
        "solution": "```python\n===START===\ndef same_chars(s0: str, s1: str):\n    # Convert both strings to sets of unique characters\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n    \n    # Check if the sets are equal\n    return set_s0 == set_s1\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n\n### Signature\ndef same_chars(s0: str, s1: str):",
        "timestamp": "2025-10-17T22:45:47.266269",
        "response_time": "1.82"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 55,
        "solution": "===START===\ndef fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n===END===",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n\n### Signature\ndef fib(n: int):",
        "timestamp": "2025-10-17T22:45:48.785829",
        "response_time": "1.52"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 56,
        "solution": "```python\n===START===\ndef correct_bracketing(brackets: str):\n    # Initialize a counter to track the balance of brackets\n    balance = 0\n    \n    # Iterate through each character in the string\n    for char in brackets:\n        if char == \"<\":\n            # Increment the balance for an opening bracket\n            balance += 1\n        elif char == \">\":\n            # Decrement the balance for a closing bracket\n            balance -= 1\n            \n            # If balance goes negative, it means there's a closing bracket without a matching opening bracket\n            if balance < 0:\n                return False\n    \n    # If balance is zero, all opening brackets have matching closing brackets\n    return balance == 0\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n### Signature\ndef correct_bracketing(brackets: str):",
        "timestamp": "2025-10-17T22:45:53.381808",
        "response_time": "4.59"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 57,
        "solution": "```python\n===START===\ndef monotonic(l: list):\n    if len(l) <= 1:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n\n### Signature\ndef monotonic(l: list):",
        "timestamp": "2025-10-17T22:45:56.224791",
        "response_time": "2.84"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 58,
        "solution": "```python\n# ===START===\ndef common(l1: list, l2: list):\n    # Find the intersection of the two lists, remove duplicates, and sort the result\n    return sorted(set(l1) & set(l2))\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n### Signature\ndef common(l1: list, l2: list):",
        "timestamp": "2025-10-17T22:45:57.796693",
        "response_time": "1.57"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 59,
        "solution": "```python\n===START===\nfrom math import isqrt\n\ndef largest_prime_factor(n: int):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, isqrt(num) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_factor = 1\n    factor = 2\n\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_factor = factor\n        else:\n            factor += 1\n            while not is_prime(factor):\n                factor += 1\n\n    return largest_factor\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n\n### Signature\ndef largest_prime_factor(n: int):",
        "timestamp": "2025-10-17T22:45:59.787481",
        "response_time": "1.99"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 60,
        "solution": "```python\n===START===\ndef sum_to_n(n: int):\n    return n * (n + 1) // 2\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n\n### Signature\ndef sum_to_n(n: int):",
        "timestamp": "2025-10-17T22:46:00.584774",
        "response_time": "0.79"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 61,
        "solution": "```python\n===START===\ndef correct_bracketing(brackets: str):\n    # Initialize a counter to track the balance of brackets\n    balance = 0\n    \n    # Iterate through each character in the string\n    for char in brackets:\n        # Increment the balance for an opening bracket\n        if char == '(':\n            balance += 1\n        # Decrement the balance for a closing bracket\n        elif char == ')':\n            balance -= 1\n        \n        # If balance goes negative, it means there's an unmatched closing bracket\n        if balance < 0:\n            return False\n    \n    # If balance is zero, all brackets are matched; otherwise, return False\n    return balance == 0\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n### Signature\ndef correct_bracketing(brackets: str):",
        "timestamp": "2025-10-17T22:46:03.400009",
        "response_time": "2.81"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 62,
        "solution": "```python\n===START===\ndef derivative(xs: list):\n    # The derivative of a constant term (xs[0]) is 0, so we skip it\n    # The derivative of xs[i] * x^i is i * xs[i]\n    return [i * xs[i] for i in range(1, len(xs))]\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\n### Signature\ndef derivative(xs: list):",
        "timestamp": "2025-10-17T22:46:05.188190",
        "response_time": "1.78"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 63,
        "solution": "```python\n===START===\ndef fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Initialize the first three values of the sequence\n    a, b, c = 0, 0, 1\n\n    # Compute the sequence iteratively\n    for _ in range(3, n + 1):\n        next_value = a + b + c\n        a, b, c = b, c, next_value\n\n    return c\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n\n### Signature\ndef fibfib(n: int):",
        "timestamp": "2025-10-17T22:46:07.022870",
        "response_time": "1.83"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 64,
        "solution": "```python\n===START===\ndef vowels_count(s):\n    # Define the set of vowels\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    \n    # Iterate through the string and count vowels\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            count += 1\n        # Check if 'y' is at the end of the word\n        elif char.lower() == 'y' and i == len(s) - 1:\n            count += 1\n    \n    return count\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n### Signature\ndef vowels_count(s):",
        "timestamp": "2025-10-17T22:46:09.233204",
        "response_time": "2.21"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 65,
        "solution": "```python\n===START===\ndef circular_shift(x, shift):\n    # Convert the integer to a string to manipulate its digits\n    x_str = str(x)\n    n = len(x_str)\n    \n    # If shift is greater than the number of digits, return the reversed string\n    if shift > n:\n        return x_str[::-1]\n    \n    # Perform the circular shift\n    shift = shift % n  # Handle cases where shift is greater than the number of digits\n    result = x_str[-shift:] + x_str[:-shift]\n    \n    return result\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n\n### Signature\ndef circular_shift(x, shift):",
        "timestamp": "2025-10-17T22:46:11.223762",
        "response_time": "1.99"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 66,
        "solution": "```python\n===START===\ndef digitSum(s):\n    # Initialize the sum to 0\n    total = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII value of the uppercase character to the total\n            total += ord(char)\n    \n    return total\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n### Signature\ndef digitSum(s):",
        "timestamp": "2025-10-17T22:46:12.721088",
        "response_time": "1.49"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 67,
        "solution": "```python\n===START===\nimport re\n\ndef fruit_distribution(s, n):\n    # Extract numbers from the string using regular expressions\n    numbers = list(map(int, re.findall(r'\\d+', s)))\n    # Calculate the number of mangoes\n    mangoes = n - sum(numbers)\n    return mangoes\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\n### Signature\ndef fruit_distribution(s,n):",
        "timestamp": "2025-10-17T22:46:14.918422",
        "response_time": "2.19"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 68,
        "solution": "```python\n===START===\ndef pluck(arr):\n    # Initialize variables to store the smallest even value and its index\n    smallest_even = float('inf')\n    smallest_index = -1\n    \n    # Iterate through the array to find the smallest even value\n    for i, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if value < smallest_even or (value == smallest_even and i < smallest_index):\n                smallest_even = value\n                smallest_index = i\n    \n    # If no even value is found, return None\n    if smallest_index == -1:\n        return None\n    \n    # Return the smallest even value\n    return arr[smallest_index]\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n### Signature\ndef pluck(arr):",
        "timestamp": "2025-10-17T22:46:17.778977",
        "response_time": "2.86"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 69,
        "solution": "```python\n# ===START===\nfrom collections import Counter\n\ndef search(lst):\n    # Count the frequency of each integer in the list\n    freq = Counter(lst)\n    \n    # Initialize the result as -1 (default if no valid integer is found)\n    result = -1\n    \n    # Iterate through the frequency dictionary\n    for num, count in freq.items():\n        # Check if the integer satisfies the condition\n        if count >= num:\n            # Update the result to the maximum valid integer\n            result = max(result, num)\n    \n    return result\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n\n### Signature\ndef search(lst):",
        "timestamp": "2025-10-17T22:46:20.227440",
        "response_time": "2.45"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 70,
        "solution": "```python\n# ===START===\ndef strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    result = []\n    while lst:\n        # Append the smallest element\n        result.append(lst.pop(0))\n        if lst:\n            # Append the largest element\n            result.append(lst.pop(-1))\n    return result\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n### Signature\ndef strange_sort_list(lst):",
        "timestamp": "2025-10-17T22:46:22.045467",
        "response_time": "1.81"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 71,
        "solution": "```python\n===START===\nimport math\n\ndef triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the sides do not form a valid triangle\n        return -1\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n\n### Signature\ndef triangle_area(a, b, c):",
        "timestamp": "2025-10-17T22:46:23.916099",
        "response_time": "1.87"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 72,
        "solution": "```python\n===START===\ndef will_it_fly(q, w):\n    # Check if the list is palindromic\n    is_palindromic = q == q[::-1]\n    \n    # Check if the sum of elements is less than or equal to the maximum weight\n    is_within_weight = sum(q) <= w\n    \n    # The object will fly if both conditions are met\n    return is_palindromic and is_within_weight\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n### Signature\ndef will_it_fly(q,w):",
        "timestamp": "2025-10-17T22:46:25.765060",
        "response_time": "1.84"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 73,
        "solution": "```python\n===START===\ndef smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    \n    # Compare elements from the start and end of the array\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    \n    return changes\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n### Signature\ndef smallest_change(arr):",
        "timestamp": "2025-10-17T22:46:27.124956",
        "response_time": "1.36"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 74,
        "solution": "```python\n===START===\ndef total_match(lst1, lst2):\n    # Calculate the total number of characters in all strings of lst1\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    \n    # Calculate the total number of characters in all strings of lst2\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Return the list with fewer total characters\n    return lst1 if total_chars_lst1 < total_chars_lst2 else lst2\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n### Signature\ndef total_match(lst1, lst2):",
        "timestamp": "2025-10-17T22:46:28.888987",
        "response_time": "1.76"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 75,
        "solution": "```python\n===START===\nfrom math import isqrt\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, isqrt(n) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2:\n        return False\n\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\n### Signature\ndef is_multiply_prime(a):",
        "timestamp": "2025-10-17T22:46:31.924142",
        "response_time": "3.03"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 76,
        "solution": "```python\n===START===\ndef is_simple_power(x, n):\n    if x < 1 or n < 1:\n        return False\n    if x == 1:\n        return True  # 1 is a power of any number (n**0 = 1)\n    current = n\n    while current <= x:\n        if current == x:\n            return True\n        current *= n\n    return False\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\n### Signature\ndef is_simple_power(x, n):",
        "timestamp": "2025-10-17T22:46:34.829637",
        "response_time": "2.90"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 77,
        "solution": "```python\n===START===\ndef iscube(a):\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(abs(a) ** (1/3))\n    # Check if the cube of the cube_root equals the original number\n    return cube_root ** 3 == abs(a)\n\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Write a function that takes an integer a and returns True\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n\n### Signature\ndef iscube(a):",
        "timestamp": "2025-10-17T22:46:36.618841",
        "response_time": "1.79"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 78,
        "solution": "```python\n===START===\ndef hex_key(num):\n    # Define the set of hexadecimal digits that are prime numbers\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n\n### Signature\ndef hex_key(num):",
        "timestamp": "2025-10-17T22:46:38.435835",
        "response_time": "1.81"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 79,
        "solution": "```python\n===START===\ndef decimal_to_binary(decimal):\n    # Convert the decimal number to binary using bin() and remove the '0b' prefix\n    return bin(decimal)[2:]\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n### Signature\ndef decimal_to_binary(decimal):",
        "timestamp": "2025-10-17T22:46:39.417324",
        "response_time": "0.98"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 80,
        "solution": "```python\n===START===\ndef is_happy(s):\n    # A string must have at least 3 characters to be considered happy\n    if len(s) < 3:\n        return False\n    \n    # Check every group of 3 consecutive characters\n    for i in range(len(s) - 2):\n        # If any group of 3 consecutive characters are not distinct, return False\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    # If all groups of 3 consecutive characters are distinct, return True\n    return True\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n\n### Signature\ndef is_happy(s):",
        "timestamp": "2025-10-17T22:46:43.390964",
        "response_time": "3.97"
    },
    {
        "dataset_name": "human_eval_chatgpt4o",
        "dataset_row_id": 81,
        "solution": "```python\n# ===START===\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grades.append(\"A\")\n        elif gpa > 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grades.append(\"B\")\n        elif gpa > 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grades.append(\"C\")\n        elif gpa > 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grades.append(\"D\")\n        elif gpa > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n### Signature\ndef numerical_letter_grade(grades):",
        "timestamp": "2025-10-17T22:46:47.083377",
        "response_time": "3.69"
    }
]