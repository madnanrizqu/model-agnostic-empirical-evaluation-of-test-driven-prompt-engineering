[
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 82,
        "solution": "===START===\ndef prime_length(string):\n    length = len(string)\n    \n    # Handle special cases\n    if length < 2:\n        return False\n    \n    # Check if length is prime\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    \n    return True\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n\n### Signature\ndef prime_length(string):",
        "timestamp": "2025-10-17T18:58:46.782318",
        "response_time": "2.88"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 83,
        "solution": "===START===\ndef starts_one_ends(n):\n    # For n-digit numbers, range is from 10^(n-1) to 10^n - 1\n    # Count numbers that start with 1: 1xxxx (10^(n-1) numbers)\n    # Count numbers that end with 1: xxxx1 (10^(n-1) numbers)\n    # Subtract overlap: numbers that both start and end with 1: 1xxx1 (10^(n-2) numbers)\n    \n    if n == 1:\n        return 1  # Only the number 1 itself\n    \n    # Numbers starting with 1: 10^(n-1)\n    start_with_one = 10 ** (n-1)\n    \n    # Numbers ending with 1: 10^(n-1)\n    end_with_one = 10 ** (n-1)\n    \n    # Numbers both starting and ending with 1: 10^(n-2)\n    both_one = 10 ** (n-2)\n    \n    # Total count = start_with_one + end_with_one - both_one\n    return start_with_one + end_with_one - both_one\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n\n### Signature\ndef starts_one_ends(n):",
        "timestamp": "2025-10-17T18:58:53.283362",
        "response_time": "6.50"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 84,
        "solution": "===START===\ndef solve(N):\n    # Convert N to string to iterate through digits\n    digit_sum = sum(int(digit) for digit in str(N))\n    # Convert sum to binary string and remove '0b' prefix\n    return bin(digit_sum)[2:]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a positive integer N, return the total sum of its digits in binary.\n\n### Signature\ndef solve(N):",
        "timestamp": "2025-10-17T18:58:55.093225",
        "response_time": "1.81"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 85,
        "solution": "===START===\ndef add(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 1 and num % 2 == 0)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n### Signature\ndef add(lst):",
        "timestamp": "2025-10-17T18:58:56.495472",
        "response_time": "1.40"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 86,
        "solution": "===START===\ndef anti_shuffle(s):\n    # Split the string into words while preserving spaces\n    words = s.split(' ')\n    \n    # Process each word\n    ordered_words = []\n    for word in words:\n        if word:  # If word is not empty\n            # Sort the characters in the word\n            sorted_chars = sorted(word)\n            # Join the sorted characters back into a word\n            ordered_word = ''.join(sorted_chars)\n            ordered_words.append(ordered_word)\n        else:  # If word is empty (represents multiple spaces)\n            ordered_words.append('')\n    \n    # Join the words back together with spaces\n    return ' '.join(ordered_words)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n### Signature\ndef anti_shuffle(s):",
        "timestamp": "2025-10-17T18:58:59.344108",
        "response_time": "2.85"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 87,
        "solution": "===START===\ndef get_row(lst, x):\n    # Initialize result list to store coordinates\n    coordinates = []\n    \n    # Iterate through each row\n    for row_idx in range(len(lst)):\n        # Iterate through each column in current row\n        for col_idx in range(len(lst[row_idx])):\n            # If value matches x, add coordinate tuple\n            if lst[row_idx][col_idx] == x:\n                coordinates.append((row_idx, col_idx))\n    \n    # Sort coordinates by row ascending, then by column descending\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n### Signature\ndef get_row(lst, x):",
        "timestamp": "2025-10-17T18:59:03.402825",
        "response_time": "4.06"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 88,
        "solution": "===START===\ndef sort_array(array):\n    # Handle empty array case\n    if not array:\n        return []\n    \n    # Calculate sum of first and last elements\n    sum_first_last = array[0] + array[-1]\n    \n    # Create a copy of the array\n    result = array.copy()\n    \n    # Sort in ascending order if sum is odd, descending if sum is even\n    if sum_first_last % 2 == 1:\n        result.sort()  # ascending order\n    else:\n        result.sort(reverse=True)  # descending order\n    \n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n### Signature\ndef sort_array(array):",
        "timestamp": "2025-10-17T18:59:08.321491",
        "response_time": "4.92"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 89,
        "solution": "===START===\ndef encrypt(s):\n    # Create a mapping of original letters to shifted letters\n    original = 'abcdefghijklmnopqrstuvwxyz'\n    shift = 4  # 2 * 2 places\n    shifted = original[shift:] + original[:shift]\n    \n    # Create translation table\n    trans_table = str.maketrans(original, shifted)\n    \n    # Return encrypted string\n    return s.translate(trans_table)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\n### Signature\ndef encrypt(s):",
        "timestamp": "2025-10-17T18:59:11.132545",
        "response_time": "2.81"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 90,
        "solution": "===START===\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    # Remove duplicates and sort the list\n    unique_sorted = sorted(set(lst))\n    \n    # If after removing duplicates we have less than 2 elements, return None\n    if len(unique_sorted) < 2:\n        return None\n    \n    # Return the second element (index 1) which is the 2nd smallest\n    return unique_sorted[1]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n### Signature\ndef next_smallest(lst):",
        "timestamp": "2025-10-17T18:59:15.167549",
        "response_time": "4.03"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 91,
        "solution": "===START===\nimport re\n\ndef is_bored(S):\n    # Split the string into sentences using multiple delimiters\n    sentences = re.split('[.!?]', S)\n    \n    # Count sentences that start with 'I ' (I followed by a space)\n    boredom_count = sum(1 for sentence in sentences \n                       if sentence.strip() and sentence.strip().startswith('I '))\n    \n    return boredom_count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n### Signature\ndef is_bored(S):",
        "timestamp": "2025-10-17T18:59:18.691564",
        "response_time": "3.52"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 92,
        "solution": "===START===\ndef any_int(x, y, z):\n    # Check if all numbers are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    \n    # Check if any number equals the sum of other two\n    return x == y + z or y == x + z or z == x + y\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n### Signature\ndef any_int(x, y, z):",
        "timestamp": "2025-10-17T18:59:20.496881",
        "response_time": "1.80"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 93,
        "solution": "===START===\ndef encode(message):\n    vowels = 'aeiouAEIOU'\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n                 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    result = ''\n    for char in message:\n        if char in vowels:\n            result += vowel_map[char]\n        else:\n            result += char.swapcase()\n    \n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n### Signature\ndef encode(message):",
        "timestamp": "2025-10-17T18:59:23.033332",
        "response_time": "2.53"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 94,
        "solution": "===START===\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    # Find the largest prime number in the list\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    \n    # If no prime number found, return 0\n    if largest_prime == -1:\n        return 0\n    \n    # Calculate sum of digits\n    return sum(int(digit) for digit in str(largest_prime))\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n### Signature\ndef skjkasdkd(lst):",
        "timestamp": "2025-10-17T18:59:27.607074",
        "response_time": "4.57"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 95,
        "solution": "===START===\ndef check_dict_case(dict):\n    # Return False if dictionary is empty\n    if not dict:\n        return False\n    \n    # Get all keys from dictionary\n    keys = list(dict.keys())\n    \n    # Check if all keys are strings\n    if not all(isinstance(key, str) for key in keys):\n        return False\n    \n    # Check if all keys are lowercase\n    all_lower = all(key.islower() for key in keys)\n    \n    # Check if all keys are uppercase\n    all_upper = all(key.isupper() for key in keys)\n    \n    # Return True if all keys are either lowercase or uppercase\n    return all_lower or all_upper\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\n### Signature\ndef check_dict_case(dict):",
        "timestamp": "2025-10-17T18:59:30.439539",
        "response_time": "2.83"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 96,
        "solution": "===START===\ndef count_up_to(n):\n    if n <= 1:\n        return []\n    \n    # Initialize array to track prime numbers\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    # Sieve of Eratosthenes algorithm\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    \n    # Collect all prime numbers less than n\n    return [i for i in range(n) if is_prime[i]]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n\n### Signature\ndef count_up_to(n):",
        "timestamp": "2025-10-17T18:59:35.587442",
        "response_time": "5.15"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 97,
        "solution": "===START===\ndef multiply(a, b):\n    # Get the absolute values to handle negative numbers\n    a_unit = abs(a) % 10\n    b_unit = abs(b) % 10\n    \n    # Return the product of unit digits\n    return a_unit * b_unit\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n\n### Signature\ndef multiply(a, b):",
        "timestamp": "2025-10-17T18:59:38.720219",
        "response_time": "3.13"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 98,
        "solution": "===START===\ndef count_upper(s):\n    vowels = set('AEIOU')\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a string s, count the number of uppercase vowels in even indices.\n\n### Signature\ndef count_upper(s):",
        "timestamp": "2025-10-17T18:59:40.985100",
        "response_time": "2.26"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 99,
        "solution": "===START===\ndef closest_integer(value):\n    num = float(value)\n    decimal_part = num - int(num)\n    \n    if decimal_part == 0.5:\n        # For 0.5, round to the nearest even integer\n        return int(round(num))\n    else:\n        # For all other cases, round to the nearest integer\n        return int(round(num))\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n\n### Signature\ndef closest_integer(value):",
        "timestamp": "2025-10-17T18:59:44.291287",
        "response_time": "3.30"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 100,
        "solution": "===START===\ndef make_a_pile(n):\n    result = [n]\n    current = n\n    \n    for _ in range(n-1):\n        if current % 2 == 0:  # if current is even\n            current += 2      # next even number\n        else:                 # if current is odd\n            current += 2      # next odd number\n        result.append(current)\n    \n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n### Signature\ndef make_a_pile(n):",
        "timestamp": "2025-10-17T18:59:48.408733",
        "response_time": "4.12"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 101,
        "solution": "===START===\ndef words_string(s):\n    # Replace commas with spaces to handle both separators\n    s = s.replace(',', ' ')\n    # Split by spaces and filter out empty strings\n    return [word for word in s.split() if word]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n### Signature\ndef words_string(s):",
        "timestamp": "2025-10-17T18:59:50.207765",
        "response_time": "1.80"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 102,
        "solution": "===START===\ndef choose_num(x, y):\n    # Convert x to the next even number if it's odd\n    if x % 2 != 0:\n        x = x + 1\n    \n    # Convert y to the previous even number if it's odd\n    if y % 2 != 0:\n        y = y - 1\n    \n    # If x is greater than y after adjustments, or if x is greater than y initially\n    if x > y:\n        return -1\n    \n    # Return the largest even number in range\n    return y if y % 2 == 0 else y - 1\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n### Signature\ndef choose_num(x, y):",
        "timestamp": "2025-10-17T18:59:53.818678",
        "response_time": "3.61"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 103,
        "solution": "===START===\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    # Calculate average\n    total = sum(range(n, m + 1))\n    count = m - n + 1\n    avg = total / count\n    \n    # Round to nearest integer\n    rounded = round(avg)\n    \n    # Convert to binary string\n    return bin(rounded)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n\n### Signature\ndef rounded_avg(n, m):",
        "timestamp": "2025-10-17T18:59:55.726250",
        "response_time": "1.91"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 104,
        "solution": "===START===\ndef unique_digits(x):\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 == 1 for digit in str(num))\n    \n    return sorted([num for num in x if has_no_even_digit(num)])\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n### Signature\ndef unique_digits(x):",
        "timestamp": "2025-10-17T18:59:58.384450",
        "response_time": "2.66"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 105,
        "solution": "===START===\ndef by_length(arr):\n    # Dictionary to map numbers to their word representation\n    num_to_word = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter numbers between 1 and 9, sort them, and reverse\n    filtered_nums = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    \n    # Convert numbers to words\n    return [num_to_word[num] for num in filtered_nums]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n### Signature\ndef by_length(arr):",
        "timestamp": "2025-10-17T19:00:04.644336",
        "response_time": "6.26"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 106,
        "solution": "===START===\ndef f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # even number\n            # Calculate factorial\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:  # odd number\n            # Calculate sum from 1 to i\n            sum_numbers = sum(range(1, i + 1))\n            result.append(sum_numbers)\n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n     Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n\n### Signature\ndef f(n):",
        "timestamp": "2025-10-17T19:00:06.872030",
        "response_time": "2.23"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 107,
        "solution": "===START===\ndef even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n### Signature\ndef even_odd_palindrome(n):",
        "timestamp": "2025-10-17T19:00:10.325853",
        "response_time": "3.45"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 108,
        "solution": "===START===\ndef count_nums(arr):\n    def sum_digits(num):\n        # Convert number to string, keeping the sign for first digit if negative\n        str_num = str(abs(num))\n        digits = [int(d) for d in str_num]\n        \n        # If original number was negative, make first digit negative\n        if num < 0:\n            digits[0] = -digits[0]\n            \n        return sum(digits)\n    \n    # Count numbers where sum of digits is greater than 0\n    return sum(1 for num in arr if sum_digits(num) > 0)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\n### Signature\ndef count_nums(arr):",
        "timestamp": "2025-10-17T19:00:14.651865",
        "response_time": "4.32"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 109,
        "solution": "===START===\ndef move_one_ball(arr):\n    if not arr:\n        return True\n        \n    # Create a copy of original array\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    \n    # Try all possible rotations\n    for i in range(n):\n        # Rotate the original array by i positions\n        rotated = arr[i:] + arr[:i]\n        \n        # Check if this rotation gives us sorted array\n        if rotated == sorted_arr:\n            return True\n            \n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n### Signature\ndef move_one_ball(arr):",
        "timestamp": "2025-10-17T19:00:19.219892",
        "response_time": "4.57"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 110,
        "solution": "===START===\ndef exchange(lst1, lst2):\n    # Count odd numbers in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # Count even numbers in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If we have enough even numbers in lst2 to replace all odd numbers in lst1\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    return \"NO\"\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n\n### Signature\ndef exchange(lst1, lst2):",
        "timestamp": "2025-10-17T19:00:21.759336",
        "response_time": "2.54"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 111,
        "solution": "===START===\nfrom collections import Counter\n\ndef histogram(test):\n    if not test:\n        return {}\n    \n    # Split the string into letters and count occurrences\n    letters = test.split()\n    letter_counts = Counter(letters)\n    \n    if not letter_counts:\n        return {}\n    \n    # Find the maximum count\n    max_count = max(letter_counts.values())\n    \n    # Create dictionary with letters having maximum count\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n### Signature\ndef histogram(test):",
        "timestamp": "2025-10-17T19:00:24.512458",
        "response_time": "2.75"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 112,
        "solution": "===START===\ndef reverse_delete(s,c):\n    # Create a set of characters to remove for O(1) lookup\n    chars_to_remove = set(c)\n    \n    # Filter out characters that are in c\n    result = ''.join(char for char in s if char not in chars_to_remove)\n    \n    # Check if the resulting string is palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\n### Signature\ndef reverse_delete(s,c):",
        "timestamp": "2025-10-17T19:00:28.887996",
        "response_time": "4.37"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 113,
        "solution": "===START===\ndef odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for digit in s if int(digit) % 2 == 1)\n        result.append(odd_count)\n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n### Signature\ndef odd_count(lst):",
        "timestamp": "2025-10-17T19:00:31.648125",
        "response_time": "2.76"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 114,
        "solution": "===START===\ndef minSubArraySum(nums):\n    n = len(nums)\n    min_sum = float('inf')\n    \n    # Check all possible subarrays\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n            \n    return min_sum\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n\n### Signature\ndef minSubArraySum(nums):",
        "timestamp": "2025-10-17T19:00:34.675112",
        "response_time": "3.02"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 115,
        "solution": "===START===\ndef max_fill(grid, capacity):\n    # Initialize result to store the maximum number of bucket fills needed\n    max_fills = 0\n    \n    # Iterate through each well (row)\n    for well in grid:\n        # Count number of water units (1s) in current well\n        water_units = sum(well)\n        \n        # Calculate how many times bucket needs to be lowered for this well\n        # Using ceiling division to handle cases where water units don't divide evenly by capacity\n        fills_needed = (water_units + capacity - 1) // capacity if water_units > 0 else 0\n        \n        # Update max_fills if current well needs more fills\n        max_fills = max(max_fills, fills_needed)\n    \n    return max_fills\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n### Signature\ndef max_fill(grid, capacity):",
        "timestamp": "2025-10-17T19:00:38.658066",
        "response_time": "3.98"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 116,
        "solution": "===START===\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n### Signature\ndef sort_array(arr):",
        "timestamp": "2025-10-17T19:00:39.821006",
        "response_time": "1.16"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 117,
        "solution": "===START===\ndef select_words(s, n):\n    if not s:\n        return []\n    \n    # Define consonants\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    # Split string into words\n    words = s.split()\n    \n    # Function to count consonants in a word\n    def count_consonants(word):\n        return sum(1 for char in word if char in consonants)\n    \n    # Filter words that have exactly n consonants\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\n### Signature\ndef select_words(s, n):",
        "timestamp": "2025-10-17T19:00:43.597894",
        "response_time": "3.77"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 118,
        "solution": "===START===\ndef get_closest_vowel(word):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    # Iterate through the word from right to left\n    for i in range(len(word)-2, 0, -1):\n        # Check if current character is a vowel\n        if word[i] in vowels:\n            # Check if it's between consonants\n            if word[i-1] in consonants and word[i+1] in consonants:\n                return word[i]\n    \n    return ''\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n### Signature\ndef get_closest_vowel(word):",
        "timestamp": "2025-10-17T19:00:47.546044",
        "response_time": "3.95"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 119,
        "solution": "===START===\ndef match_parens(lst):\n    # Helper function to check if a string has balanced parentheses\n    def is_balanced(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    # Try both possible concatenations\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    \n    # If either concatenation results in balanced parentheses, return 'Yes'\n    if is_balanced(s1) or is_balanced(s2):\n        return 'Yes'\n    return 'No'\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n### Signature\ndef match_parens(lst):",
        "timestamp": "2025-10-17T19:00:52.230619",
        "response_time": "4.68"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 120,
        "solution": "===START===\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    # Sort array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    # Return first k elements\n    return sorted_arr[:k]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n### Signature\ndef maximum(arr, k):",
        "timestamp": "2025-10-17T19:00:54.235595",
        "response_time": "2.00"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 121,
        "solution": "===START===\ndef solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 == 1)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n### Signature\ndef solution(lst):",
        "timestamp": "2025-10-17T19:00:55.608447",
        "response_time": "1.37"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 122,
        "solution": "===START===\ndef add_elements(arr, k):\n    # Ensure k doesn't exceed array length\n    k = min(k, len(arr))\n    \n    # Initialize sum\n    total = 0\n    \n    # Process first k elements\n    for i in range(k):\n        # Convert number to string to check digits\n        num_str = str(abs(arr[i]))\n        # Add to total if number has at most 2 digits\n        if len(num_str) <= 2:\n            total += arr[i]\n    \n    return total\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n### Signature\ndef add_elements(arr, k):",
        "timestamp": "2025-10-17T19:01:01.804612",
        "response_time": "6.19"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 123,
        "solution": "===START===\ndef get_odd_collatz(n):\n    if n <= 0:\n        return []\n    \n    result = []\n    current = n\n    \n    while current != 1:\n        if current % 2 != 0:  # if number is odd\n            result.append(current)\n        \n        if current % 2 == 0:  # if even\n            current = current // 2\n        else:\n            current = 3 * current + 1\n    \n    result.append(1)  # append the final 1\n    return sorted(result)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n### Signature\ndef get_odd_collatz(n):",
        "timestamp": "2025-10-17T19:01:06.737838",
        "response_time": "4.93"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 124,
        "solution": "===START===\nimport re\nfrom datetime import datetime\n\ndef valid_date(date):\n    if not date:\n        return False\n    \n    # Check if the format matches mm-dd-yyyy\n    pattern = r'^\\d{2}-\\d{2}-\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n        \n        # Check month range\n        if month < 1 or month > 12:\n            return False\n            \n        # Check days based on month\n        if month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        else:  # months with 31 days\n            if day < 1 or day > 31:\n                return False\n                \n        # Final validation using datetime\n        datetime(year, month, day)\n        return True\n        \n    except ValueError:\n        return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n### Signature\ndef valid_date(date):",
        "timestamp": "2025-10-17T19:01:13.974714",
        "response_time": "7.23"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 125,
        "solution": "===START===\ndef split_words(txt):\n    # Check for whitespace\n    if ' ' in txt:\n        return txt.split()\n    \n    # Check for commas\n    if ',' in txt:\n        return txt.split(',')\n    \n    # Count lowercase letters with odd position in alphabet\n    count = 0\n    for char in txt:\n        if char.isalpha() and char.islower():\n            # Calculate position in alphabet (0-25)\n            position = ord(char) - ord('a')\n            if position % 2 == 1:  # Check if position is odd\n                count += 1\n    \n    return count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n\n### Signature\ndef split_words(txt):",
        "timestamp": "2025-10-17T19:01:17.398880",
        "response_time": "3.42"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 126,
        "solution": "===START===\ndef is_sorted(lst):\n    if not lst:\n        return True\n    \n    # Check for duplicates using a set\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    \n    # Check if sorted by comparing adjacent elements\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return False\n            \n    return True\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n### Signature\ndef is_sorted(lst):",
        "timestamp": "2025-10-17T19:01:20.175867",
        "response_time": "2.77"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 127,
        "solution": "===START===\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    # Find the intersection points\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # If no intersection\n    if start > end:\n        return \"NO\"\n    \n    # Calculate length of intersection\n    length = end - start + 1\n    \n    # Check if length is prime\n    return \"YES\" if is_prime(length) else \"NO\"\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n### Signature\ndef intersection(interval1, interval2):",
        "timestamp": "2025-10-17T19:01:23.022047",
        "response_time": "2.84"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 128,
        "solution": "===START===\ndef prod_signs(arr):\n    if not arr:\n        return None\n    \n    magnitude_sum = 0\n    sign_product = 1\n    \n    for num in arr:\n        # Calculate sum of magnitudes\n        magnitude_sum += abs(num)\n        \n        # Calculate product of signs\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:  # num == 0\n            sign_product *= 0\n    \n    return magnitude_sum * sign_product\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n### Signature\ndef prod_signs(arr):",
        "timestamp": "2025-10-17T19:01:25.657488",
        "response_time": "2.63"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 129,
        "solution": "===START===\ndef minPath(grid, k):\n    n = len(grid)\n    total_cells = n * n\n    \n    # Create a mapping of value to position\n    value_to_pos = {}\n    for i in range(n):\n        for j in range(n):\n            value_to_pos[grid[i][j]] = (i, j)\n    \n    # Calculate minimum path length\n    min_steps = 0\n    current_pos = value_to_pos[1]  # Start from value 1\n    \n    for value in range(2, total_cells + 1):\n        next_pos = value_to_pos[value]\n        # Calculate Manhattan distance\n        steps = abs(next_pos[0] - current_pos[0]) + abs(next_pos[1] - current_pos[1])\n        \n        # If steps > k, we need to count this move\n        if steps > k:\n            min_steps += 1\n        \n        current_pos = next_pos\n    \n    return min_steps\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n### Signature\ndef minPath(grid, k):",
        "timestamp": "2025-10-17T19:01:31.024372",
        "response_time": "5.36"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 130,
        "solution": "===START===\ndef tri(n):\n    if n < 0:\n        return []\n    \n    # Initialize the sequence with first element as 1\n    sequence = [1]\n    \n    # If n is 0, return just [1]\n    if n == 0:\n        return sequence\n    \n    # Helper function to calculate tribonacci value for a single position\n    def calculate_tri(pos):\n        if pos == 1:\n            return 3\n        if pos % 2 == 0:  # even numbers\n            return 1 + pos / 2\n        else:  # odd numbers\n            # For odd numbers, we need values of n-1, n-2, and n+1\n            return calculate_tri(pos - 1) + calculate_tri(pos - 2) + calculate_tri(pos + 1)\n    \n    # Calculate values from position 1 to n\n    for i in range(1, n + 1):\n        sequence.append(calculate_tri(i))\n    \n    return sequence\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n\n### Signature\ndef tri(n):",
        "timestamp": "2025-10-17T19:01:36.299075",
        "response_time": "5.27"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 131,
        "solution": "===START===\ndef digits(n):\n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:  # if digit is odd\n            product *= digit\n            has_odd = True\n        n //= 10\n    \n    return product if has_odd else 0\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n\n### Signature\ndef digits(n):",
        "timestamp": "2025-10-17T19:01:39.568698",
        "response_time": "3.27"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 132,
        "solution": "===START===\ndef is_nested(string):\n    n = len(string)\n    # For each possible pair of opening and closing brackets\n    for i in range(n-1):\n        if string[i] == '[':\n            # Find matching closing bracket\n            count = 1\n            for j in range(i+1, n):\n                if string[j] == '[':\n                    count += 1\n                elif string[j] == ']':\n                    count -= 1\n                    if count == 0:\n                        # Found matching pair, now check if there's a complete pair within\n                        inner = string[i+1:j]\n                        stack = []\n                        valid_inner = False\n                        for char in inner:\n                            if char == '[':\n                                stack.append(char)\n                            elif char == ']' and stack:\n                                stack.pop()\n                                valid_inner = True\n                        if valid_inner and not stack:\n                            return True\n                        break\n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n### Signature\ndef is_nested(string):",
        "timestamp": "2025-10-17T19:01:45.944671",
        "response_time": "6.37"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 133,
        "solution": "===START===\nimport math\n\ndef sum_squares(lst):\n    # Round each number up to the nearest integer using ceiling\n    rounded_list = [math.ceil(num) for num in lst]\n    # Square each rounded number and sum them\n    return sum(num * num for num in rounded_list)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n### Signature\ndef sum_squares(lst):",
        "timestamp": "2025-10-17T19:01:47.665180",
        "response_time": "1.72"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 134,
        "solution": "===START===\ndef check_if_last_char_is_a_letter(txt):\n    # If string is empty, return False\n    if not txt:\n        return False\n    \n    # Get the last character\n    last_char = txt[-1]\n    \n    # Check if last character is alphabetical\n    if not last_char.isalpha():\n        return False\n    \n    # Check if string has at least two characters and if second to last is a space\n    if len(txt) >= 2 and txt[-2].isspace():\n        return True\n    \n    # If string has only one character and it's alphabetical\n    if len(txt) == 1 and last_char.isalpha():\n        return True\n        \n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n### Signature\ndef check_if_last_char_is_a_letter(txt):",
        "timestamp": "2025-10-17T19:01:52.415840",
        "response_time": "4.75"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 135,
        "solution": "===START===\ndef can_arrange(arr):\n    if len(arr) <= 1:\n        return -1\n    \n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n            \n    return -1\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n### Signature\ndef can_arrange(arr):",
        "timestamp": "2025-10-17T19:01:54.287320",
        "response_time": "1.87"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 136,
        "solution": "===START===\ndef largest_smallest_integers(lst):\n    neg_nums = [x for x in lst if isinstance(x, int) and x < 0]\n    pos_nums = [x for x in lst if isinstance(x, int) and x > 0]\n    \n    largest_neg = max(neg_nums) if neg_nums else None\n    smallest_pos = min(pos_nums) if pos_nums else None\n    \n    return (largest_neg, smallest_pos)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n### Signature\ndef largest_smallest_integers(lst):",
        "timestamp": "2025-10-17T19:01:57.855258",
        "response_time": "3.56"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 137,
        "solution": "===START===\ndef compare_one(a, b):\n    # Convert inputs to comparable format\n    def convert_to_float(val):\n        if isinstance(val, (int, float)):\n            return float(val)\n        if isinstance(val, str):\n            # Handle both . and , as decimal separators\n            try:\n                return float(val.replace(',', '.'))\n            except ValueError:\n                return None\n        return None\n\n    # Convert both values to float for comparison\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float is None or b_float is None:\n        return None\n    \n    if a_float == b_float:\n        return None\n    \n    # Return the larger value in its original type\n    if a_float > b_float:\n        return a\n    return b\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n### Signature\ndef compare_one(a, b):",
        "timestamp": "2025-10-17T19:02:03.561791",
        "response_time": "5.70"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 138,
        "solution": "===START===\ndef is_equal_to_sum_even(n):\n    # If n is less than 8 (minimum sum of 4 even numbers: 2+2+2+2), return False\n    if n < 8:\n        return False\n    \n    # If n is odd, it can't be sum of even numbers\n    if n % 2 != 0:\n        return False\n    \n    # If n is less than 4 times the smallest even number (2), return False\n    if n < 8:\n        return False\n        \n    return True\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n\n### Signature\ndef is_equal_to_sum_even(n):",
        "timestamp": "2025-10-17T19:02:07.532307",
        "response_time": "3.97"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 139,
        "solution": "===START===\ndef special_factorial(n):\n    if n <= 0:\n        return None\n    \n    result = 1\n    for i in range(1, n + 1):\n        factorial = 1\n        for j in range(1, i + 1):\n            factorial *= j\n        result *= factorial\n    \n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n### Signature\ndef special_factorial(n):",
        "timestamp": "2025-10-17T19:02:10.918805",
        "response_time": "3.38"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 140,
        "solution": "===START===\ndef fix_spaces(text):\n    # First, replace 3 or more consecutive spaces with a hyphen\n    while '   ' in text:\n        text = text.replace('   ', '-')\n    \n    # Then replace any remaining single spaces with underscores\n    text = text.replace(' ', '_')\n    \n    return text\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n### Signature\ndef fix_spaces(text):",
        "timestamp": "2025-10-17T19:02:13.720227",
        "response_time": "2.80"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 141,
        "solution": "===START===\ndef file_name_check(file_name):\n    # Check if there's exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split into name and extension\n    name, ext = file_name.split('.')\n    \n    # Check if name is empty\n    if not name:\n        return 'No'\n    \n    # Check if extension is valid\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if name starts with a letter\n    if not name[0].isalpha():\n        return 'No'\n    \n    # Count digits in name\n    digit_count = sum(1 for char in name if char.isdigit())\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\n### Signature\ndef file_name_check(file_name):",
        "timestamp": "2025-10-17T19:02:17.394816",
        "response_time": "3.67"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 142,
        "solution": "===START===\ndef sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n### Signature\ndef sum_squares(lst):",
        "timestamp": "2025-10-17T19:02:19.619812",
        "response_time": "2.22"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 143,
        "solution": "===START===\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n### Signature\ndef words_in_sentence(sentence):",
        "timestamp": "2025-10-17T19:02:22.925324",
        "response_time": "3.30"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 144,
        "solution": "===START===\nfrom fractions import Fraction\n\ndef simplify(x, n):\n    try:\n        # Convert string fractions to Fraction objects\n        x_frac = Fraction(*map(int, x.split('/')))\n        n_frac = Fraction(*map(int, n.split('/')))\n        \n        # Multiply the fractions\n        result = x_frac * n_frac\n        \n        # Check if the result is a whole number\n        # A fraction is a whole number if its denominator is 1\n        return result.denominator == 1\n    except:\n        return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n### Signature\ndef simplify(x, n):",
        "timestamp": "2025-10-17T19:02:27.071438",
        "response_time": "4.14"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 145,
        "solution": "===START===\ndef order_by_points(nums):\n    def digit_sum(n):\n        return sum(int(d) for d in str(abs(n)))\n    \n    # Create tuples of (original_index, number, digit_sum)\n    indexed_nums = list(enumerate(nums))\n    # Sort by digit sum first, then by original index for stable sort\n    sorted_nums = sorted(indexed_nums, key=lambda x: (digit_sum(x[1]), x[0]))\n    # Extract only the numbers from sorted list\n    return [num for _, num in sorted_nums]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n### Signature\ndef order_by_points(nums):",
        "timestamp": "2025-10-17T19:02:29.869339",
        "response_time": "2.80"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 146,
        "solution": "===START===\ndef specialFilter(nums):\n    def is_first_last_odd(num):\n        # Convert to positive number for processing\n        num = abs(num)\n        # Convert to string to easily get first and last digits\n        num_str = str(num)\n        first_digit = int(num_str[0])\n        last_digit = int(num_str[-1])\n        return first_digit % 2 == 1 and last_digit % 2 == 1\n\n    # Count numbers that are > 10 and have odd first and last digits\n    count = sum(1 for num in nums if abs(num) > 10 and is_first_last_odd(num))\n    return count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n\n### Signature\ndef specialFilter(nums):",
        "timestamp": "2025-10-17T19:02:34.188940",
        "response_time": "4.31"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 147,
        "solution": "===START===\ndef get_max_triples(n):\n    # Create array a according to the formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Counter for valid triples\n    count = 0\n    \n    # Check all possible triples where i < j < k\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if sum is divisible by 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n### Signature\ndef get_max_triples(n):",
        "timestamp": "2025-10-17T19:02:38.683937",
        "response_time": "4.49"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 148,
        "solution": "===START===\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planets exist in the solar system\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    \n    # Get indices of the planets\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    \n    # Sort indices to get correct order\n    start_idx = min(idx1, idx2)\n    end_idx = max(idx1, idx2)\n    \n    # Return tuple of planets between start_idx and end_idx\n    return tuple(planets[start_idx + 1:end_idx])\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\n### Signature\ndef bf(planet1, planet2):",
        "timestamp": "2025-10-17T19:02:44.070441",
        "response_time": "5.38"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 149,
        "solution": "===START===\ndef sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort by length first, then alphabetically\n    return sorted(even_length_strings, key=lambda x: (len(x), x))\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\n### Signature\ndef sorted_list_sum(lst):",
        "timestamp": "2025-10-17T19:02:47.296860",
        "response_time": "3.22"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 150,
        "solution": "===START===\ndef x_or_y(n, x, y):\n    if n < 2:\n        return y\n    \n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    \n    return x\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n### Signature\ndef x_or_y(n, x, y):",
        "timestamp": "2025-10-17T19:02:49.603605",
        "response_time": "2.30"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 151,
        "solution": "===START===\ndef double_the_difference(lst):\n    return sum(x * x for x in lst if isinstance(x, (int, float)) and x > 0 and x % 1 == 0 and x % 2 == 1)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n### Signature\ndef double_the_difference(lst):",
        "timestamp": "2025-10-17T19:02:52.121489",
        "response_time": "2.51"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 152,
        "solution": "===START===\ndef compare(game,guess):\n    \"\"\"\n    Compare actual game scores with guessed scores and return array of differences.\n    \n    Args:\n        game: List of actual game scores\n        guess: List of guessed scores\n    \n    Returns:\n        List of absolute differences between actual and guessed scores\n    \"\"\"\n    return [abs(g - s) for g, s in zip(guess, game)]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n### Signature\ndef compare(game,guess):",
        "timestamp": "2025-10-17T19:02:54.253662",
        "response_time": "2.13"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 153,
        "solution": "===START===\ndef Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        uppercase_count = sum(1 for c in extension if c.isupper())\n        lowercase_count = sum(1 for c in extension if c.islower())\n        return uppercase_count - lowercase_count\n\n    if not extensions:\n        return class_name\n\n    strongest = extensions[0]\n    max_strength = calculate_strength(strongest)\n\n    for ext in extensions[1:]:\n        current_strength = calculate_strength(ext)\n        if current_strength > max_strength:\n            max_strength = current_strength\n            strongest = ext\n\n    return f\"{class_name}.{strongest}\"\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\n### Signature\ndef Strongest_Extension(class_name, extensions):",
        "timestamp": "2025-10-17T19:02:57.179795",
        "response_time": "2.92"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 154,
        "solution": "===START===\ndef cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    \n    # Generate all possible rotations of b\n    n = len(b)\n    rotations = [b[i:] + b[:i] for i in range(n)]\n    \n    # Check if any rotation is a substring of a\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    \n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n### Signature\ndef cycpattern_check(a , b):",
        "timestamp": "2025-10-17T19:03:00.407796",
        "response_time": "3.22"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 155,
        "solution": "===START===\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    # Convert negative numbers to positive\n    num = abs(num)\n    \n    # Convert number to string to process each digit\n    num_str = str(num)\n    \n    for digit in num_str:\n        # Convert character back to integer\n        digit_int = int(digit)\n        if digit_int % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count, odd_count)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n### Signature\ndef even_odd_count(num):",
        "timestamp": "2025-10-17T19:03:05.041889",
        "response_time": "4.63"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 156,
        "solution": "===START===\ndef int_to_mini_roman(number):\n    roman_values = [\n        (1000, 'm'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i')\n    ]\n    \n    result = ''\n    for value, symbol in roman_values:\n        while number >= value:\n            result += symbol\n            number -= value\n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n### Signature\ndef int_to_mini_roman(number):",
        "timestamp": "2025-10-17T19:03:08.027950",
        "response_time": "2.98"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 157,
        "solution": "===START===\ndef right_angle_triangle(a, b, c):\n    # Sort the sides to ensure the longest side is 'c'\n    sides = sorted([a, b, c])\n    a, b, c = sides[0], sides[1], sides[2]\n    \n    # Check if it's a valid triangle\n    if a <= 0 or b <= 0 or c <= 0 or (a + b <= c):\n        return False\n    \n    # Check if it satisfies the Pythagorean theorem\n    # a\u00b2 + b\u00b2 = c\u00b2\n    return abs(a*a + b*b - c*c) < 1e-10\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n\n### Signature\ndef right_angle_triangle(a, b, c):",
        "timestamp": "2025-10-17T19:03:12.040989",
        "response_time": "4.01"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 158,
        "solution": "===START===\ndef find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    \n    max_unique = 0\n    result = \"\"\n    \n    for word in words:\n        unique_count = count_unique_chars(word)\n        if unique_count > max_unique:\n            max_unique = unique_count\n            result = word\n        elif unique_count == max_unique:\n            result = min(result, word)\n    \n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n### Signature\ndef find_max(words):",
        "timestamp": "2025-10-17T19:03:14.450732",
        "response_time": "2.41"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 159,
        "solution": "===START===\ndef eat(number, need, remaining):\n    \"\"\"\n    Calculate total eaten carrots and remaining carrots after meals\n    \n    Args:\n        number (int): Number of carrots already eaten\n        need (int): Number of additional carrots needed\n        remaining (int): Number of carrots available\n    \n    Returns:\n        list: [total carrots eaten, carrots remaining]\n    \"\"\"\n    # Calculate how many carrots can actually be eaten\n    can_eat = min(need, remaining)\n    \n    # Calculate total eaten (already eaten + what can be eaten now)\n    total_eaten = number + can_eat\n    \n    # Calculate remaining carrots\n    carrots_left = remaining - can_eat\n    \n    return [total_eaten, carrots_left]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n### Signature\ndef eat(number, need, remaining):",
        "timestamp": "2025-10-17T19:03:19.588068",
        "response_time": "5.13"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 160,
        "solution": "===START===\ndef do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i + 1])\n    return eval(expression)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n### Signature\ndef do_algebra(operator, operand):",
        "timestamp": "2025-10-17T19:03:21.701664",
        "response_time": "2.11"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 161,
        "solution": "===START===\ndef solve(s):\n    # Check if string contains any letters\n    has_letters = any(c.isalpha() for c in s)\n    \n    if not has_letters:\n        # If no letters, reverse the entire string\n        return s[::-1]\n    \n    # If letters exist, swap case for letters and keep others as is\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n\n### Signature\ndef solve(s):",
        "timestamp": "2025-10-17T19:03:24.859881",
        "response_time": "3.16"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 162,
        "solution": "===START===\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n### Signature\ndef string_to_md5(text):",
        "timestamp": "2025-10-17T19:03:26.273908",
        "response_time": "1.41"
    },
    {
        "dataset_name": "human_eval_claude35sonnet_second_half",
        "dataset_row_id": 163,
        "solution": "===START===\ndef generate_integers(a, b):\n    result = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return sorted(result)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n### Signature\ndef generate_integers(a, b):",
        "timestamp": "2025-10-17T19:03:28.439536",
        "response_time": "2.15"
    }
]