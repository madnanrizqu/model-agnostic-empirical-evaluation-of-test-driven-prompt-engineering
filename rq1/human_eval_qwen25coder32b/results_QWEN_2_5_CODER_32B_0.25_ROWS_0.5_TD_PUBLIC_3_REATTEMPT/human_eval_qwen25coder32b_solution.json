[
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 0,
        "solution": "===START===\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n\n### Signature\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:",
        "timestamp": "2025-08-14T07:55:31.819430",
        "response_time": "2.83"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 1,
        "solution": "===START===\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current_group = []\n    balance = 0\n\n    for char in paren_string:\n        current_group.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n\n        if balance == 0 and current_group:\n            result.append(''.join(current_group))\n            current_group = []\n\n    return result\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n\n### Signature\ndef separate_paren_groups(paren_string: str) -> List[str]:",
        "timestamp": "2025-08-14T07:55:35.309256",
        "response_time": "3.49"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 2,
        "solution": "===START===\nfrom typing import Tuple\n\ndef truncate_number(number: float) -> float:\n    integer_part = int(number)\n    return integer_part\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n### Signature\ndef truncate_number(number: float) -> float:",
        "timestamp": "2025-08-14T07:55:36.998803",
        "response_time": "1.69"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 3,
        "solution": "===START===\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n\n### Signature\ndef below_zero(operations: List[int]) -> bool:",
        "timestamp": "2025-08-14T07:55:38.572093",
        "response_time": "1.57"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 4,
        "solution": "===START===\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\n### Signature\ndef mean_absolute_deviation(numbers: List[float]) -> float:",
        "timestamp": "2025-08-14T07:55:41.549515",
        "response_time": "2.98"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 5,
        "solution": "===START===\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    \n    return result\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n\n### Signature\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:",
        "timestamp": "2025-08-14T07:55:43.237088",
        "response_time": "1.68"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 6,
        "solution": "===START===\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def max_depth(s: str) -> int:\n        depth = 0\n        max_depth = 0\n        for char in s:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        return max_depth\n\n    return [max_depth(group) for group in paren_string.split()]\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n### Signature\ndef parse_nested_parens(paren_string: str) -> List[int]:",
        "timestamp": "2025-08-14T07:55:46.137462",
        "response_time": "2.90"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 7,
        "solution": "===START===\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n\n### Signature\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:",
        "timestamp": "2025-08-14T07:55:47.851541",
        "response_time": "1.71"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 8,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = 0\n    total_product = 1\n    \n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    \n    return (total_sum, total_product)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n\n### Signature\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:",
        "timestamp": "2025-08-14T07:55:50.412500",
        "response_time": "2.56"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 9,
        "solution": "===START===\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    max_list = []\n    current_max = numbers[0]\n    \n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    \n    return max_list\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n\n### Signature\ndef rolling_max(numbers: List[int]) -> List[int]:",
        "timestamp": "2025-08-14T07:55:53.175304",
        "response_time": "2.76"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 10,
        "solution": "===START===\nfrom typing import List\n\ndef make_palindrome(string: str) -> str:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    \n    if not string:\n        return string\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i:][::-1]\n    \n    return string + string[::-1]\n\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n\n### Signature\ndef make_palindrome(string: str) -> str:",
        "timestamp": "2025-08-14T07:55:55.659084",
        "response_time": "2.48"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 11,
        "solution": "===START===\nfrom typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    # Ensure both strings are of the same length\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n    \n    # Perform XOR operation character by character\n    result = []\n    for char_a, char_b in zip(a, b):\n        # XOR operation: 1 if characters are different, 0 if they are the same\n        xor_result = '1' if char_a != char_b else '0'\n        result.append(xor_result)\n    \n    # Join the list into a string and return\n    return ''.join(result)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\n### Signature\ndef string_xor(a: str, b: str) -> str:",
        "timestamp": "2025-08-14T07:55:59.684498",
        "response_time": "4.02"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 12,
        "solution": "===START===\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    max_length = 0\n    longest_string = None\n    \n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n    \n    return longest_string\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n### Signature\ndef longest(strings: List[str]) -> Optional[str]:",
        "timestamp": "2025-08-14T07:56:01.718300",
        "response_time": "2.03"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 13,
        "solution": "===START===\nfrom typing import Tuple\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n\n### Signature\ndef greatest_common_divisor(a: int, b: int) -> int:",
        "timestamp": "2025-08-14T07:56:03.535356",
        "response_time": "1.81"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 14,
        "solution": "===START===\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n\n### Signature\ndef all_prefixes(string: str) -> List[str]:",
        "timestamp": "2025-08-14T07:56:04.922719",
        "response_time": "1.39"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 15,
        "solution": "===START===\nfrom typing import List\n\ndef string_sequence(n: int) -> str:\n    numbers: List[int] = list(range(n + 1))\n    return ' '.join(map(str, numbers))\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n\n### Signature\ndef string_sequence(n: int) -> str:",
        "timestamp": "2025-08-14T07:56:06.319227",
        "response_time": "1.40"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 16,
        "solution": "===START===\nfrom typing import Set\n\ndef count_distinct_characters(string: str) -> int:\n    distinct_chars: Set[str] = set()\n    for char in string:\n        distinct_chars.add(char.lower())\n    return len(distinct_chars)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n\n### Signature\ndef count_distinct_characters(string: str) -> int:",
        "timestamp": "2025-08-14T07:56:08.980036",
        "response_time": "2.66"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 17,
        "solution": "===START===\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'W':\n            beats.append(4)\n            i += 1\n        elif music_string[i] == 'H':\n            beats.append(2)\n            i += 1\n        elif music_string[i] == 'Q':\n            beats.append(1)\n            i += 1\n        else:\n            i += 1\n    return beats\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n### Signature\ndef parse_music(music_string: str) -> List[int]:",
        "timestamp": "2025-08-14T07:56:11.399252",
        "response_time": "2.42"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 18,
        "solution": "===START===\nfrom typing import List\n\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start <= len(string) - len(substring):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n\n### Signature\ndef how_many_times(string: str, substring: str) -> int:",
        "timestamp": "2025-08-14T07:56:13.200663",
        "response_time": "1.80"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 19,
        "solution": "===START===\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of words\n    words = numbers.split()\n    \n    # Sort the list based on the numeric value of each word\n    sorted_words = sorted(words, key=lambda word: numeral_map[word])\n    \n    # Join the sorted list back into a string\n    return ' '.join(sorted_words)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n\n### Signature\ndef sort_numbers(numbers: str) -> str:",
        "timestamp": "2025-08-14T07:56:17.266382",
        "response_time": "4.06"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 20,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    \n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n\n### Signature\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:",
        "timestamp": "2025-08-14T07:56:20.557861",
        "response_time": "3.29"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 21,
        "solution": "===START===\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers]\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\n### Signature\ndef rescale_to_unit(numbers: List[float]) -> List[float]:",
        "timestamp": "2025-08-14T07:56:22.389931",
        "response_time": "1.83"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 22,
        "solution": "===START===\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n\n### Signature\ndef filter_integers(values: List[Any]) -> List[int]:",
        "timestamp": "2025-08-14T07:56:23.821413",
        "response_time": "1.43"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 23,
        "solution": "===START===\nfrom typing import List\n\ndef strlen(string: str) -> int:\n    return len(string)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n\n### Signature\ndef strlen(string: str) -> int:",
        "timestamp": "2025-08-14T07:56:24.746115",
        "response_time": "0.92"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 24,
        "solution": "===START===\nfrom typing import List\n\ndef largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n\n### Signature\ndef largest_divisor(n: int) -> int:",
        "timestamp": "2025-08-14T07:56:26.940503",
        "response_time": "2.19"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 25,
        "solution": "===START===\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n >= 2:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n\n### Signature\ndef factorize(n: int) -> List[int]:",
        "timestamp": "2025-08-14T07:56:30.179291",
        "response_time": "3.24"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 26,
        "solution": "===START===\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for number in numbers:\n        if number in count:\n            count[number] += 1\n        else:\n            count[number] = 1\n    \n    result = []\n    for number in numbers:\n        if count[number] == 1:\n            result.append(number)\n    \n    return result\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n\n### Signature\ndef remove_duplicates(numbers: List[int]) -> List[int]:",
        "timestamp": "2025-08-14T07:56:31.938902",
        "response_time": "1.76"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 27,
        "solution": "===START===\nfrom typing import List\n\ndef flip_case(string: str) -> str:\n    flipped_chars: List[str] = []\n    for char in string:\n        if char.islower():\n            flipped_chars.append(char.upper())\n        elif char.isupper():\n            flipped_chars.append(char.lower())\n        else:\n            flipped_chars.append(char)\n    return ''.join(flipped_chars)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n\n### Signature\ndef flip_case(string: str) -> str:",
        "timestamp": "2025-08-14T07:56:33.525125",
        "response_time": "1.59"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 28,
        "solution": "===START===\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n\n### Signature\ndef concatenate(strings: List[str]) -> str:",
        "timestamp": "2025-08-14T07:56:34.567111",
        "response_time": "1.04"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 29,
        "solution": "===START===\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n     Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\n### Signature\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:",
        "timestamp": "2025-08-14T07:56:37.263326",
        "response_time": "2.70"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 30,
        "solution": "===START===\nfrom typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n    Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n\n### Signature\ndef get_positive(l: list):",
        "timestamp": "2025-08-14T07:56:38.491899",
        "response_time": "1.23"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 31,
        "solution": "===START===\nfrom typing import List\n\ndef is_prime(n):\n    if n <= 1:\n        return \"False\"\n    if n <= 3:\n        return \"True\"\n    if n % 2 == 0 or n % 3 == 0:\n        return \"False\"\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return \"False\"\n        i += 6\n    return \"True\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n\n### Signature\ndef is_prime(n):",
        "timestamp": "2025-08-14T07:56:40.743449",
        "response_time": "2.25"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 32,
        "solution": "===START===\nfrom typing import List\n\ndef poly(xs: List[float], x: float) -> float:\n    result = 0.0\n    for i, coeff in enumerate(xs):\n        result += coeff * (x ** i)\n    return result\n\ndef find_zero(xs: List[float]) -> float:\n    # Using the bisection method to find a root\n    low, high = -1000.0, 1000.0  # Initial bounds, can be adjusted\n    epsilon = 1e-7  # Precision\n\n    while high - low > epsilon:\n        mid = (low + high) / 2.0\n        if poly(xs, low) * poly(xs, mid) <= 0:\n            high = mid\n        else:\n            low = mid\n\n    return (low + high) / 2.0\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\n### Signature\ndef poly(xs: list, x: float):\n\n### Prompt\n     xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n\n### Signature\ndef find_zero(xs: list):",
        "timestamp": "2025-08-14T07:56:46.765190",
        "response_time": "6.02"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 33,
        "solution": "===START===\nfrom typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    # Extract elements at indices divisible by three\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort these extracted elements\n    divisible_by_three.sort()\n    \n    # Create a new list to store the result\n    result = l[:]\n    \n    # Replace elements at indices divisible by three with sorted elements\n    sorted_index = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = divisible_by_three[sorted_index]\n            sorted_index += 1\n    \n    return result\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n\n### Signature\ndef sort_third(l: list):",
        "timestamp": "2025-08-14T07:56:49.653392",
        "response_time": "2.89"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 34,
        "solution": "===START===\nfrom typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n    Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n\n### Signature\ndef unique(l: list):",
        "timestamp": "2025-08-14T07:56:50.849410",
        "response_time": "1.20"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 35,
        "solution": "===START===\nfrom typing import List\n\ndef max_element(l: List[int]) -> int:\n    if not l:\n        raise ValueError(\"The list is empty\")\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n    Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\n### Signature\ndef max_element(l: list):",
        "timestamp": "2025-08-14T07:56:53.939844",
        "response_time": "3.09"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 36,
        "solution": "===START===\nfrom typing import List\n\ndef fizz_buzz(n: int) -> str:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return str(count)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n\n### Signature\ndef fizz_buzz(n: int):",
        "timestamp": "2025-08-14T07:56:56.273721",
        "response_time": "2.33"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 37,
        "solution": "===START===\nfrom typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort()\n    \n    result = l[:]\n    for idx, value in enumerate(even_indices_values):\n        result[idx * 2] = value\n    \n    return result\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n\n### Signature\ndef sort_even(l: list):",
        "timestamp": "2025-08-14T07:56:58.860919",
        "response_time": "2.59"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 38,
        "solution": "===START===\nfrom typing import List\n\ndef encode_cyclic(s: str) -> str:\n    def cycle_group(group: str) -> str:\n        if len(group) == 3:\n            return group[1:] + group[0]\n        return group\n    \n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    cycled_groups = [cycle_group(group) for group in groups]\n    return ''.join(cycled_groups)\n\ndef decode_cyclic(s: str) -> str:\n    def decycle_group(group: str) -> str:\n        if len(group) == 3:\n            return group[-1] + group[:-1]\n        return group\n    \n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    decycled_groups = [decycle_group(group) for group in groups]\n    return ''.join(decycled_groups)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n    returns encoded string by cycling groups of three characters.\n\n### Signature\ndef encode_cyclic(s: str):\n\n### Prompt\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n\n### Signature\ndef decode_cyclic(s: str):",
        "timestamp": "2025-08-14T07:57:02.464719",
        "response_time": "3.60"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 39,
        "solution": "===START===\nfrom typing import List\n\ndef is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int) -> str:\n    fib_sequence: List[int] = [0, 1]\n    prime_fibs: List[int] = []\n    \n    while len(prime_fibs) < n:\n        next_fib = fib_sequence[-1] + fib_sequence[-2]\n        fib_sequence.append(next_fib)\n        if is_prime(next_fib):\n            prime_fibs.append(next_fib)\n    \n    return str(prime_fibs[n-1])\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n\n### Signature\ndef prime_fib(n: int):",
        "timestamp": "2025-08-14T07:57:06.396277",
        "response_time": "3.93"
    },
    {
        "dataset_name": "human_eval_qwen25coder32b",
        "dataset_row_id": 40,
        "solution": "===START===\nfrom typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> str:\n    n = len(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return \"True\"\n    return \"False\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n### Signature\ndef triples_sum_to_zero(l: list):",
        "timestamp": "2025-08-14T07:57:09.182436",
        "response_time": "2.79"
    }
]