[
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 0,
    "solution": "===START===\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n\n### Signature\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:",
    "timestamp": "2025-10-17T16:42:55.407678",
    "response_time": "2.75"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 1,
    "solution": "===START===\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string.replace(\" \", \"\"):\n        if char == '(':\n            depth += 1\n            current_group.append(char)\n        elif char == ')':\n            depth -= 1\n            current_group.append(char)\n            if depth == 0:\n                result.append(''.join(current_group))\n                current_group = []\n\n    return result\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n\n### Signature\ndef separate_paren_groups(paren_string: str) -> List[str]:",
    "timestamp": "2025-10-17T16:42:58.239832",
    "response_time": "2.83"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 2,
    "solution": "===START===\nimport math\n\ndef truncate_number(number: float) -> float:\n    return math.floor(number)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n### Signature\ndef truncate_number(number: float) -> float:",
    "timestamp": "2025-10-17T16:42:58.999649",
    "response_time": "0.76"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 3,
    "solution": "===START===\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n\n### Signature\ndef below_zero(operations: List[int]) -> bool:",
    "timestamp": "2025-10-17T16:43:00.465313",
    "response_time": "1.47"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 4,
    "solution": "===START===\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\n### Signature\ndef mean_absolute_deviation(numbers: List[float]) -> float:",
    "timestamp": "2025-10-17T16:43:01.940440",
    "response_time": "1.47"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 5,
    "solution": "===START===\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n\n### Signature\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:",
    "timestamp": "2025-10-17T16:43:03.697263",
    "response_time": "1.76"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 6,
    "solution": "===START===\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n### Signature\ndef parse_nested_parens(paren_string: str) -> List[int]:",
    "timestamp": "2025-10-17T16:43:06.284140",
    "response_time": "2.59"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 7,
    "solution": "===START===\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n\n### Signature\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:",
    "timestamp": "2025-10-17T16:43:07.439164",
    "response_time": "1.15"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 8,
    "solution": "===START===\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    total_sum = sum(numbers)\n    total_product = 1\n    for number in numbers:\n        total_product *= number\n    return (total_sum, total_product)\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n\n### Signature\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:",
    "timestamp": "2025-10-17T16:43:09.413626",
    "response_time": "1.97"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 9,
    "solution": "===START===\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = []\n    current_max = numbers[0]\n    for number in numbers:\n        current_max = max(current_max, number)\n        result.append(current_max)\n    \n    return result\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n\n### Signature\ndef rolling_max(numbers: List[int]) -> List[int]:",
    "timestamp": "2025-10-17T16:43:11.240158",
    "response_time": "1.83"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 10,
    "solution": "===START===\nimport sys\n\ndef make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    \n    for i in range(len(string), -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[i:][::-1]\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n\n### Signature\ndef make_palindrome(string: str) -> str:",
    "timestamp": "2025-10-17T16:43:13.058030",
    "response_time": "1.82"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 11,
    "solution": "===START===\nimport operator\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(str(operator.xor(int(x), int(y))) for x, y in zip(a, b))\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\n### Signature\ndef string_xor(a: str, b: str) -> str:",
    "timestamp": "2025-10-17T16:43:14.314906",
    "response_time": "1.26"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 12,
    "solution": "===START===\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n### Signature\ndef longest(strings: List[str]) -> Optional[str]:",
    "timestamp": "2025-10-17T16:43:15.427924",
    "response_time": "1.11"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 13,
    "solution": "===START===\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n\n### Signature\ndef greatest_common_divisor(a: int, b: int) -> int:",
    "timestamp": "2025-10-17T16:43:16.411292",
    "response_time": "0.98"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 14,
    "solution": "===START===\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n\n### Signature\ndef all_prefixes(string: str) -> List[str]:",
    "timestamp": "2025-10-17T16:43:17.609071",
    "response_time": "1.20"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 15,
    "solution": "===START===\n```python\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n\n### Signature\ndef string_sequence(n: int) -> str:",
    "timestamp": "2025-10-17T16:43:18.679968",
    "response_time": "1.07"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 16,
    "solution": "===START===\n```python\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n\n### Signature\ndef count_distinct_characters(string: str) -> int:",
    "timestamp": "2025-10-17T16:43:19.561223",
    "response_time": "0.88"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 17,
    "solution": "===START===\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string.split():\n        if note == 'A':\n            beats.append(4)\n        elif note == 'B':\n            beats.append(2)\n        elif note == 'C':\n            beats.append(1)\n    return beats\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n### Signature\ndef parse_music(music_string: str) -> List[int]:",
    "timestamp": "2025-10-17T16:43:21.563622",
    "response_time": "2.00"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 18,
    "solution": "===START===\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n\n### Signature\ndef how_many_times(string: str, substring: str) -> int:",
    "timestamp": "2025-10-17T16:43:23.623568",
    "response_time": "2.06"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 19,
    "solution": "===START===\nimport re\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    sorted_nums = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_nums)\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n\n### Signature\ndef sort_numbers(numbers: str) -> str:",
    "timestamp": "2025-10-17T16:43:26.391276",
    "response_time": "2.77"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 20,
    "solution": "===START===\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    \n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n\n### Signature\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:",
    "timestamp": "2025-10-17T16:43:29.369352",
    "response_time": "2.98"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 21,
    "solution": "===START===\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\n### Signature\ndef rescale_to_unit(numbers: List[float]) -> List[float]:",
    "timestamp": "2025-10-17T16:43:31.162121",
    "response_time": "1.79"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 22,
    "solution": "===START===\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n\n### Signature\ndef filter_integers(values: List[Any]) -> List[int]:",
    "timestamp": "2025-10-17T16:43:32.302844",
    "response_time": "1.14"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 23,
    "solution": "===START===\n```python\ndef strlen(string: str) -> int:\n    return len(string)\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n\n### Signature\ndef strlen(string: str) -> int:",
    "timestamp": "2025-10-17T16:43:33.084974",
    "response_time": "0.78"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 24,
    "solution": "===START===\ndef largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n\n### Signature\ndef largest_divisor(n: int) -> int:",
    "timestamp": "2025-10-17T16:43:34.414723",
    "response_time": "1.33"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 25,
    "solution": "===START===\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    # Start with the smallest prime number\n    divisor = 2\n    while n >= divisor:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n\n### Signature\ndef factorize(n: int) -> List[int]:",
    "timestamp": "2025-10-17T16:43:36.455136",
    "response_time": "2.04"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 26,
    "solution": "===START===\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n\n### Signature\ndef remove_duplicates(numbers: List[int]) -> List[int]:",
    "timestamp": "2025-10-17T16:43:38.008596",
    "response_time": "1.55"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 27,
    "solution": "===START===\n```python\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n\n### Signature\ndef flip_case(string: str) -> str:",
    "timestamp": "2025-10-17T16:43:38.814280",
    "response_time": "0.80"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 28,
    "solution": "===START===\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n\n### Signature\ndef concatenate(strings: List[str]) -> str:",
    "timestamp": "2025-10-17T16:43:39.663262",
    "response_time": "0.85"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 29,
    "solution": "===START===\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\n### Signature\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:",
    "timestamp": "2025-10-17T16:43:40.798150",
    "response_time": "1.13"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 30,
    "solution": "===START===\n```python\ndef get_positive(l: list):\n    return [x for x in l if x > 0]\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n\n### Signature\ndef get_positive(l: list):",
    "timestamp": "2025-10-17T16:43:41.721690",
    "response_time": "0.92"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 31,
    "solution": "===START===\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n\n### Signature\ndef is_prime(n):",
    "timestamp": "2025-10-17T16:43:44.382542",
    "response_time": "2.66"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 32,
    "solution": "===START===\nimport math\n\ndef poly(xs: list, x: float) -> float:\n    return sum(coef * x**i for i, coef in enumerate(xs))\n\ndef find_zero(xs: list) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError(\"List must have an even number of coefficients.\")\n    \n    a = xs[-1]\n    b = xs[-2]\n    c = xs[-3]\n    \n    # Using the quadratic formula to find the root\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        raise ValueError(\"No real roots exist.\")\n    \n    root1 = (-b + math.sqrt(discriminant)) / (2*a)\n    root2 = (-b - math.sqrt(discriminant)) / (2*a)\n    \n    # Return the larger root\n    return max(root1, root2)\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\n### Signature\ndef poly(xs: list, x: float):\n\n### Prompt\n     xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n\n### Signature\ndef find_zero(xs: list):",
    "timestamp": "2025-10-17T16:43:48.974463",
    "response_time": "4.59"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 33,
    "solution": "===START===\nimport copy\n\ndef sort_third(l: list):\n    sorted_list = copy.deepcopy(l)\n    sorted_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted([l[i] for i in sorted_indices])\n    for i, value in zip(sorted_indices, sorted_values):\n        sorted_list[i] = value\n    return sorted_list\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n\n### Signature\ndef sort_third(l: list):",
    "timestamp": "2025-10-17T16:43:51.335006",
    "response_time": "2.36"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 34,
    "solution": "===START===\nfrom typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n\n### Signature\ndef unique(l: list):",
    "timestamp": "2025-10-17T16:43:52.203083",
    "response_time": "0.87"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 35,
    "solution": "===START===\nimport sys\n\ndef max_element(l: list):\n    if not l:\n        return None\n    max_val = -sys.maxsize - 1\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\n### Signature\ndef max_element(l: list):",
    "timestamp": "2025-10-17T16:43:53.809680",
    "response_time": "1.61"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 36,
    "solution": "===START===\n```python\ndef fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n\n### Signature\ndef fizz_buzz(n: int):",
    "timestamp": "2025-10-17T16:43:55.653697",
    "response_time": "1.84"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 37,
    "solution": "===START===\nfrom typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted([l[i] for i in even_indices])\n    result = l[:]\n    for i, value in zip(even_indices, even_values):\n        result[i] = value\n    return result\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n\n### Signature\ndef sort_even(l: list):",
    "timestamp": "2025-10-17T16:43:57.928321",
    "response_time": "2.27"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 38,
    "solution": "===START===\nimport math\n\ndef encode_cyclic(s: str) -> str:\n    encoded = []\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        if len(group) == 3:\n            encoded.append(group[1:] + group[0])\n        else:\n            encoded.append(group)\n    return ''.join(encoded)\n\ndef decode_cyclic(s: str) -> str:\n    decoded = []\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        if len(group) == 3:\n            decoded.append(group[-1] + group[:-1])\n        else:\n            decoded.append(group)\n    return ''.join(decoded)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    returns encoded string by cycling groups of three characters.\n\n### Signature\ndef encode_cyclic(s: str):\n\n### Prompt\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n\n### Signature\ndef decode_cyclic(s: str):",
    "timestamp": "2025-10-17T16:44:01.678519",
    "response_time": "3.75"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 39,
    "solution": "===START===\nimport math\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int):\n    fib1, fib2 = 0, 1\n    count = 0\n    while True:\n        fib_next = fib1 + fib2\n        fib1, fib2 = fib2, fib_next\n        if is_prime(fib_next):\n            count += 1\n            if count == n:\n                return fib_next\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n\n### Signature\ndef prime_fib(n: int):",
    "timestamp": "2025-10-17T16:44:06.119134",
    "response_time": "4.44"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 40,
    "solution": "===START===\nfrom typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n### Signature\ndef triples_sum_to_zero(l: list):",
    "timestamp": "2025-10-17T16:44:08.297587",
    "response_time": "2.18"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 41,
    "solution": "===START===\n```python\ndef car_race_collision(n: int) -> int:\n    return n * n\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n### Signature\ndef car_race_collision(n: int):",
    "timestamp": "2025-10-17T16:44:09.135649",
    "response_time": "0.84"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 42,
    "solution": "===START===\n```python\ndef incr_list(l: list):\n    return [x + 1 for x in l]\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n\n### Signature\ndef incr_list(l: list):",
    "timestamp": "2025-10-17T16:44:10.035701",
    "response_time": "0.90"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 43,
    "solution": "===START===\n```python\ndef pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n\n### Signature\ndef pairs_sum_to_zero(l):",
    "timestamp": "2025-10-17T16:44:11.337759",
    "response_time": "1.30"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 44,
    "solution": "===START===\n```python\ndef change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return ''.join(str(x) for x in digits[::-1])\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n\n### Signature\ndef change_base(x: int, base: int):",
    "timestamp": "2025-10-17T16:44:13.250016",
    "response_time": "1.91"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 45,
    "solution": "===START===\nimport math\n\ndef triangle_area(a, h):\n    return 0.5 * a * h\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n\n### Signature\ndef triangle_area(a, h):",
    "timestamp": "2025-10-17T16:44:14.068000",
    "response_time": "0.82"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 46,
    "solution": "===START===\nfrom typing import *\nfrom collections import *\n\ndef fib4(n: int) -> int:\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n\n### Signature\ndef fib4(n: int):",
    "timestamp": "2025-10-17T16:44:17.068628",
    "response_time": "3.00"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 47,
    "solution": "===START===\nimport statistics\n\ndef median(l: list):\n    return statistics.median(l)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n\n### Signature\ndef median(l: list):",
    "timestamp": "2025-10-17T16:44:17.743536",
    "response_time": "0.67"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 48,
    "solution": "===START===\ndef is_palindrome(text: str):\n    return text == text[::-1]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n\n### Signature\ndef is_palindrome(text: str):",
    "timestamp": "2025-10-17T16:44:18.471768",
    "response_time": "0.73"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 49,
    "solution": "===START===\n```python\ndef modp(n: int, p: int) -> int:\n    return pow(n, p, p)\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n\n### Signature\ndef modp(n: int, p: int):",
    "timestamp": "2025-10-17T16:44:19.429485",
    "response_time": "0.96"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 50,
    "solution": "===START===\nimport string\n\ndef encode_shift(s: str) -> str:\n    alphabet = string.ascii_lowercase\n    shifted_alphabet = alphabet[5:] + alphabet[:5]\n    table = str.maketrans(alphabet, shifted_alphabet)\n    return s.translate(table)\n\ndef decode_shift(s: str) -> str:\n    alphabet = string.ascii_lowercase\n    shifted_alphabet = alphabet[5:] + alphabet[:5]\n    table = str.maketrans(shifted_alphabet, alphabet)\n    return s.translate(table)\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    returns encoded string by shifting every character by 5 in the alphabet.\n\n### Signature\ndef encode_shift(s: str):\n\n### Prompt\n    takes as input string encoded with encode_shift function. Returns decoded string.\n\n### Signature\ndef decode_shift(s: str):",
    "timestamp": "2025-10-17T16:44:22.219963",
    "response_time": "2.79"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 51,
    "solution": "===START===\n```python\ndef remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n\n### Signature\ndef remove_vowels(text):",
    "timestamp": "2025-10-17T16:44:23.436471",
    "response_time": "1.22"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 52,
    "solution": "===START===\n```python\ndef below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n\n### Signature\ndef below_threshold(l: list, t: int):",
    "timestamp": "2025-10-17T16:44:24.474037",
    "response_time": "1.04"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 53,
    "solution": "===START===\n```python\ndef add(x: int, y: int) -> int:\n    return x + y\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\n### Signature\ndef add(x: int, y: int):",
    "timestamp": "2025-10-17T16:44:25.350917",
    "response_time": "0.88"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 54,
    "solution": "===START===\nfrom collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n\n### Signature\ndef same_chars(s0: str, s1: str):",
    "timestamp": "2025-10-17T16:44:26.426660",
    "response_time": "1.07"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 55,
    "solution": "===START===\n```python\ndef fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n\n### Signature\ndef fib(n: int):",
    "timestamp": "2025-10-17T16:44:28.576691",
    "response_time": "2.15"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 56,
    "solution": "===START===\nfrom collections import deque\n\ndef correct_bracketing(brackets: str) -> bool:\n    stack = deque()\n    \n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return not stack\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n### Signature\ndef correct_bracketing(brackets: str):",
    "timestamp": "2025-10-17T16:44:30.464920",
    "response_time": "1.89"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 57,
    "solution": "===START===\nfrom typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n\n### Signature\ndef monotonic(l: list):",
    "timestamp": "2025-10-17T16:44:32.215351",
    "response_time": "1.75"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 58,
    "solution": "===START===\nfrom typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n### Signature\ndef common(l1: list, l2: list):",
    "timestamp": "2025-10-17T16:44:33.357373",
    "response_time": "1.14"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 59,
    "solution": "===START===\nimport math\n\ndef largest_prime_factor(n: int) -> int:\n    # Initialize the largest prime factor\n    largest_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # n must be odd at this point, so we can skip one element (Note i = i + 2)\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # While i divides n, remove i and set largest_prime to i\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n\n### Signature\ndef largest_prime_factor(n: int):",
    "timestamp": "2025-10-17T16:44:37.746204",
    "response_time": "4.39"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 60,
    "solution": "===START===\n```python\ndef sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n\n### Signature\ndef sum_to_n(n: int):",
    "timestamp": "2025-10-17T16:44:38.810127",
    "response_time": "1.06"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 61,
    "solution": "===START===\nfrom collections import deque\n\ndef correct_bracketing(brackets: str) -> bool:\n    stack = deque()\n    \n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return not stack\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n### Signature\ndef correct_bracketing(brackets: str):",
    "timestamp": "2025-10-17T16:44:40.695675",
    "response_time": "1.88"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 62,
    "solution": "===START===\nfrom typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * x for i, x in enumerate(xs)][1:]\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\n### Signature\ndef derivative(xs: list):",
    "timestamp": "2025-10-17T16:44:41.782165",
    "response_time": "1.09"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 63,
    "solution": "===START===\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n\n### Signature\ndef fibfib(n: int):",
    "timestamp": "2025-10-17T16:44:43.924687",
    "response_time": "2.14"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 64,
    "solution": "===START===\n```python\ndef vowels_count(s):\n    vowels = \"aeiou\"\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n### Signature\ndef vowels_count(s):",
    "timestamp": "2025-10-17T16:44:45.575662",
    "response_time": "1.65"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 65,
    "solution": "===START===\nimport math\n\ndef circular_shift(x, shift):\n    digits = str(x)\n    num_digits = len(digits)\n    \n    if shift > num_digits:\n        return digits[::-1]\n    \n    shift = shift % num_digits\n    return digits[-shift:] + digits[:-shift]\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n\n### Signature\ndef circular_shift(x, shift):",
    "timestamp": "2025-10-17T16:44:47.184917",
    "response_time": "1.61"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 66,
    "solution": "===START===\nimport string\n\ndef digitSum(s):\n    return sum(ord(c) for c in s if c in string.ascii_uppercase)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n### Signature\ndef digitSum(s):",
    "timestamp": "2025-10-17T16:44:48.158073",
    "response_time": "0.97"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 67,
    "solution": "===START===\nimport re\n\ndef fruit_distribution(s, n):\n    # Extract the numbers from the string\n    numbers = re.findall(r'\\d+', s)\n    # Convert the extracted numbers to integers\n    apples = int(numbers[0])\n    oranges = int(numbers[1])\n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    return mangoes\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\n### Signature\ndef fruit_distribution(s,n):",
    "timestamp": "2025-10-17T16:44:50.364042",
    "response_time": "2.20"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 68,
    "solution": "===START===\nimport sys\n\ndef pluck(arr):\n    min_even_value = sys.maxsize\n    min_index = -1\n    \n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < min_even_value:\n            min_even_value = value\n            min_index = i\n    \n    if min_index == -1:\n        return None\n    else:\n        return arr.pop(min_index)\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n### Signature\ndef pluck(arr):",
    "timestamp": "2025-10-17T16:44:52.618425",
    "response_time": "2.25"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 69,
    "solution": "===START===\nfrom collections import Counter\n\ndef search(lst):\n    freq = Counter(lst)\n    for num in sorted(freq, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n\n### Signature\ndef search(lst):",
    "timestamp": "2025-10-17T16:44:53.931383",
    "response_time": "1.31"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 70,
    "solution": "===START===\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n### Signature\ndef strange_sort_list(lst):",
    "timestamp": "2025-10-17T16:44:55.637603",
    "response_time": "1.70"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 71,
    "solution": "===START===\nimport math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n\n### Signature\ndef triangle_area(a, b, c):",
    "timestamp": "2025-10-17T16:44:57.994120",
    "response_time": "2.35"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 72,
    "solution": "===START===\nimport sys\n\ndef def_it_fly(q, w):\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    \n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n    \n    # Check if the sum is less than or equal to the maximum possible weight\n    if total_weight <= w:\n        return True\n    else:\n        return False\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n### Signature\ndef will_it_fly(q,w):",
    "timestamp": "2025-10-17T16:45:00.396388",
    "response_time": "2.40"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 73,
    "solution": "===START===\nfrom typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n### Signature\ndef smallest_change(arr):",
    "timestamp": "2025-10-17T16:45:02.458222",
    "response_time": "2.06"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 74,
    "solution": "===START===\n```python\ndef total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n### Signature\ndef total_match(lst1, lst2):",
    "timestamp": "2025-10-17T16:45:04.444167",
    "response_time": "1.98"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 75,
    "solution": "===START===\nimport math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    if a < 2:\n        return False\n\n    prime_factors = 0\n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            if is_prime(i):\n                prime_factors += 1\n                while a % i == 0:\n                    a //= i\n            if is_prime(a):\n                prime_factors += 1\n                break\n\n    return prime_factors == 3\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\n### Signature\ndef is_multiply_prime(a):",
    "timestamp": "2025-10-17T16:45:09.432928",
    "response_time": "4.99"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 76,
    "solution": "===START===\nimport math\n\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = round(math.log(x, n))\n    return n ** power == x\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\n### Signature\ndef is_simple_power(x, n):",
    "timestamp": "2025-10-17T16:45:10.761919",
    "response_time": "1.33"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 77,
    "solution": "===START===\nimport math\n\ndef iscube(a):\n    if a == 0:\n        return True\n    abs_a = abs(a)\n    cube_root = round(abs_a ** (1/3))\n    return cube_root ** 3 == abs_a\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Write a function that takes an integer a and returns True\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n\n### Signature\ndef iscube(a):",
    "timestamp": "2025-10-17T16:45:12.227436",
    "response_time": "1.46"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 78,
    "solution": "===START===\n```python\ndef hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_hex_digits)\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n\n### Signature\ndef hex_key(num):",
    "timestamp": "2025-10-17T16:45:13.675841",
    "response_time": "1.45"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 79,
    "solution": "===START===\n```python\ndef decimal_to_binary(decimal):\n    if decimal == 0:\n        return \"0\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n### Signature\ndef decimal_to_binary(decimal):",
    "timestamp": "2025-10-17T16:45:15.324961",
    "response_time": "1.65"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 80,
    "solution": "===START===\n```python\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n\n### Signature\ndef is_happy(s):",
    "timestamp": "2025-10-17T16:45:16.988817",
    "response_time": "1.66"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b",
    "dataset_row_id": 81,
    "solution": "===START===\n```python\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n### Signature\ndef numerical_letter_grade(grades):",
    "timestamp": "2025-10-17T16:45:23.420834",
    "response_time": "6.43"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 82,
    "solution": "===START===\nimport math\n\ndef prime_length(string):\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n\n### Signature\ndef prime_length(string):",
    "timestamp": "2025-10-17T16:42:54.948778",
    "response_time": "2.60"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 83,
    "solution": "===START===\n```python\ndef starts_one_ends(n):\n    if n == 1:\n        return 1\n    return 18 * (10 ** (n - 2))\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n\n### Signature\ndef starts_one_ends(n):",
    "timestamp": "2025-10-17T16:42:56.311040",
    "response_time": "1.36"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 84,
    "solution": "===START===\nimport math\n\ndef solve(N):\n    total_sum = 0\n    while N > 0:\n        total_sum += N % 10\n        N //= 10\n    return bin(total_sum)[2:]\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer N, return the total sum of its digits in binary.\n\n### Signature\ndef solve(N):",
    "timestamp": "2025-10-17T16:42:57.701703",
    "response_time": "1.39"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 85,
    "solution": "===START===\n```python\ndef add(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n### Signature\ndef add(lst):",
    "timestamp": "2025-10-17T16:42:58.906338",
    "response_time": "1.20"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 86,
    "solution": "===START===\nimport re\n\ndef anti_shuffle(s):\n    words = re.findall(r'\\b\\w+\\b', s)\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return re.sub(r'\\b\\w+\\b', lambda match: ordered_words.pop(0), s)\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n### Signature\ndef anti_shuffle(s):",
    "timestamp": "2025-10-17T16:43:00.674932",
    "response_time": "1.77"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 87,
    "solution": "===START===\n```python\ndef get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n### Signature\ndef get_row(lst, x):",
    "timestamp": "2025-10-17T16:43:02.592928",
    "response_time": "1.92"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 88,
    "solution": "===START===\nimport numpy as np\n\ndef sort_array(array):\n    if not array:  # Check if the array is empty\n        return []\n    \n    if (array[0] + array[-1]) % 2 == 0:\n        return np.sort(array)[::-1].tolist()  # Sort in descending order\n    else:\n        return np.sort(array).tolist()  # Sort in ascending order\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n### Signature\ndef sort_array(array):",
    "timestamp": "2025-10-17T16:43:04.903758",
    "response_time": "2.31"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 89,
    "solution": "===START===\nimport string\n\ndef encrypt(s):\n    alphabet = string.ascii_lowercase\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            new_index = (alphabet.index(char) + (2 * 2)) % 26\n            encrypted += alphabet[new_index]\n        else:\n            encrypted += char\n    return encrypted\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\n### Signature\ndef encrypt(s):",
    "timestamp": "2025-10-17T16:43:06.856234",
    "response_time": "1.95"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 90,
    "solution": "===START===\nimport heapq\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest, second_smallest = heapq.nsmallest(2, lst)\n    return second_smallest if smallest != second_smallest else None\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n### Signature\ndef next_smallest(lst):",
    "timestamp": "2025-10-17T16:43:08.382803",
    "response_time": "1.53"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 91,
    "solution": "===START===\nimport re\n\ndef is_bored(S):\n    # Split the string into sentences using regex to match '.', '?' or '!'\n    sentences = re.split(r'[.?!]\\s*', S)\n    # Count sentences that start with the word \"I\"\n    boredom_count = sum(sentence.startswith('I') for sentence in sentences)\n    return boredom_count\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n### Signature\ndef is_bored(S):",
    "timestamp": "2025-10-17T16:43:10.395953",
    "response_time": "2.01"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 92,
    "solution": "===START===\nimport math\n\ndef any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and \n            (x == y + z or y == x + z or z == x + y))\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n### Signature\ndef any_int(x, y, z):",
    "timestamp": "2025-10-17T16:43:11.982321",
    "response_time": "1.59"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 93,
    "solution": "===START===\nimport string\n\ndef encode(message):\n    vowels = 'aeiou'\n    shifted_vowels = {v: chr((ord(v) - ord('a') + 2) % 26 + ord('a')) for v in vowels}\n    shifted_vowels.update({v.upper(): shifted_vowels[v].upper() for v in vowels})\n    \n    encoded_message = []\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message.append(char.upper())\n            else:\n                encoded_message.append(char.lower())\n            \n            if char.lower() in shifted_vowels:\n                encoded_message[-1] = shifted_vowels[char.lower()]\n        else:\n            encoded_message.append(char)\n    \n    return ''.join(encoded_message)\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n### Signature\ndef encode(message):",
    "timestamp": "2025-10-17T16:43:15.938584",
    "response_time": "3.96"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 94,
    "solution": "===START===\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef skjkasdkd(lst):\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    if max_prime == 0:\n        return 0\n    return sum(int(digit) for digit in str(max_prime))\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n### Signature\ndef skjkasdkd(lst):",
    "timestamp": "2025-10-17T16:43:20.137573",
    "response_time": "4.20"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 95,
    "solution": "===START===\n```python\ndef check_dict_case(d):\n    if not d:\n        return False\n\n    all_lower = all(key.islower() for key in d if isinstance(key, str))\n    all_upper = all(key.isupper() for key in d if isinstance(key, str))\n\n    return all_lower or all_upper\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\n### Signature\ndef check_dict_case(dict):",
    "timestamp": "2025-10-17T16:43:21.957661",
    "response_time": "1.82"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 96,
    "solution": "===START===\n```python\ndef count_up_to(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n\n### Signature\ndef count_up_to(n):",
    "timestamp": "2025-10-17T16:43:24.429038",
    "response_time": "2.47"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 97,
    "solution": "===START===\n```python\ndef multiply(a, b):\n    return (a % 10) * (b % 10)\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n\n### Signature\ndef multiply(a, b):",
    "timestamp": "2025-10-17T16:43:25.415364",
    "response_time": "0.99"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 98,
    "solution": "===START===\n```python\ndef count_upper(s):\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a string s, count the number of uppercase vowels in even indices.\n\n### Signature\ndef count_upper(s):",
    "timestamp": "2025-10-17T16:43:27.056796",
    "response_time": "1.64"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 99,
    "solution": "===START===\nimport math\n\ndef closest_integer(value):\n    num = float(value)\n    return round(num)\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n\n### Signature\ndef closest_integer(value):",
    "timestamp": "2025-10-17T16:43:27.815976",
    "response_time": "0.76"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 100,
    "solution": "===START===\n```python\ndef make_a_pile(n):\n    stones = []\n    current_stones = n\n    for i in range(n):\n        stones.append(current_stones)\n        if n % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n    return stones\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n### Signature\ndef make_a_pile(n):",
    "timestamp": "2025-10-17T16:43:29.738784",
    "response_time": "1.92"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 101,
    "solution": "===START===\nimport re\n\ndef words_string(s):\n    return re.split(r'[ ,]+', s)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n### Signature\ndef words_string(s):",
    "timestamp": "2025-10-17T16:43:30.510294",
    "response_time": "0.77"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 102,
    "solution": "===START===\nimport math\n\ndef choose_num(x, y):\n    if y < x:\n        return -1\n    if y % 2 == 0:\n        return y\n    if (y - 1) >= x:\n        return y - 1\n    return -1\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n### Signature\ndef choose_num(x, y):",
    "timestamp": "2025-10-17T16:43:32.163890",
    "response_time": "1.65"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 103,
    "solution": "===START===\n```python\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    average = round(total / (m - n + 1))\n    return bin(average)\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n\n### Signature\ndef rounded_avg(n, m):",
    "timestamp": "2025-10-17T16:43:33.791330",
    "response_time": "1.63"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 104,
    "solution": "===START===\n```python\ndef unique_digits(x):\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted(filter(has_no_even_digit, x))\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n### Signature\ndef unique_digits(x):",
    "timestamp": "2025-10-17T16:43:35.294830",
    "response_time": "1.50"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 105,
    "solution": "===START===\nimport numpy as np\n\ndef by_length(arr):\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_sorted = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    result = [digit_names[num - 1] for num in filtered_sorted]\n    return result\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n### Signature\ndef by_length(arr):",
    "timestamp": "2025-10-17T16:43:37.599785",
    "response_time": "2.30"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 106,
    "solution": "===START===\nimport math\n\ndef f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n     Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n\n### Signature\ndef f(n):",
    "timestamp": "2025-10-17T16:43:39.354517",
    "response_time": "1.75"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 107,
    "solution": "===START===\nfrom collections import Counter\n\ndef even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    count = Counter()\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count['even'] += 1\n            else:\n                count['odd'] += 1\n\n    return count['even'], count['odd']\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n### Signature\ndef even_odd_palindrome(n):",
    "timestamp": "2025-10-17T16:43:41.917236",
    "response_time": "2.56"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 108,
    "solution": "===START===\n```python\ndef count_nums(arr):\n    def sum_of_digits(n):\n        if n >= 0:\n            return sum(int(digit) for digit in str(n))\n        else:\n            digits = [int(d) for d in str(n)[1:]]\n            digits[0] = -digits[0]\n            return sum(digits)\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\n### Signature\ndef count_nums(arr):",
    "timestamp": "2025-10-17T16:43:44.344451",
    "response_time": "2.43"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 109,
    "solution": "===START===\nfrom typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    n = len(arr)\n    if n <= 1:\n        return True\n    \n    count = 0\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            count += 1\n            if count > 1:\n                return False\n    \n    if count == 1 and arr[0] < arr[-1]:\n        return False\n    \n    return True\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n### Signature\ndef move_one_ball(arr):",
    "timestamp": "2025-10-17T16:43:47.027660",
    "response_time": "2.68"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 110,
    "solution": "===START===\nfrom typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n\n### Signature\ndef exchange(lst1, lst2):",
    "timestamp": "2025-10-17T16:43:49.514303",
    "response_time": "2.49"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 111,
    "solution": "===START===\nfrom collections import Counter\n\ndef histogram(test):\n    # Split the input string into a list of letters\n    letters = test.split()\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(letters)\n    \n    # Find the maximum count\n    max_count = max(letter_counts.values())\n    \n    # Filter the letters that have the maximum count\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    return result\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n### Signature\ndef histogram(test):",
    "timestamp": "2025-10-17T16:43:52.220772",
    "response_time": "2.71"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 112,
    "solution": "===START===\n```python\ndef reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\n### Signature\ndef reverse_delete(s,c):",
    "timestamp": "2025-10-17T16:43:53.499457",
    "response_time": "1.28"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 113,
    "solution": "===START===\n```python\ndef odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements in the {odd_count}th string of the input.\")\n    return result\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n### Signature\ndef odd_count(lst):",
    "timestamp": "2025-10-17T16:43:55.469143",
    "response_time": "1.97"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 114,
    "solution": "===START===\nimport sys\n\ndef minSubArraySum(nums):\n    min_sum = sys.maxsize\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n\n### Signature\ndef minSubArraySum(nums):",
    "timestamp": "2025-10-17T16:43:57.204212",
    "response_time": "1.73"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 115,
    "solution": "===START===\nimport numpy as np\n\ndef max_fill(grid, capacity):\n    # Convert the grid to a numpy array for easier manipulation\n    grid = np.array(grid)\n    # Calculate the total number of water units in the grid\n    total_water = np.sum(grid)\n    # Calculate the number of times the buckets need to be lowered\n    # by dividing the total water by the bucket capacity and rounding up\n    return np.ceil(total_water / capacity).astype(int)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n### Signature\ndef max_fill(grid, capacity):",
    "timestamp": "2025-10-17T16:43:59.652875",
    "response_time": "2.45"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 116,
    "solution": "===START===\nimport operator\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n### Signature\ndef sort_array(arr):",
    "timestamp": "2025-10-17T16:44:00.649233",
    "response_time": "1.00"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 117,
    "solution": "===START===\nimport re\n\ndef select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = re.findall(r'[bcdfghjklmnpqrstvwxyz]', word, re.IGNORECASE)\n        if len(consonants) == n:\n            result.append(word)\n    return result\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\n### Signature\ndef select_words(s, n):",
    "timestamp": "2025-10-17T16:44:02.600633",
    "response_time": "1.95"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 118,
    "solution": "===START===\nimport re\n\ndef get_closest_vowel(word):\n    # Find all vowels that are between consonants\n    matches = re.findall(r'(?<=[^aeiouAEIOU])[aeiouAEIOU](?=[^aeiouAEIOU])', word)\n    if matches:\n        # Return the last match found, which is the closest vowel from the right\n        return matches[-1]\n    else:\n        return None\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n### Signature\ndef get_closest_vowel(word):",
    "timestamp": "2025-10-17T16:44:05.038985",
    "response_time": "2.44"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 119,
    "solution": "===START===\nfrom typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    def is_balanced(s: str) -> bool:\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    first_order = lst[0] + lst[1]\n    second_order = lst[1] + lst[0]\n    if is_balanced(first_order) or is_balanced(second_order):\n        return 'Yes'\n    else:\n        return 'No'\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n### Signature\ndef match_parens(lst):",
    "timestamp": "2025-10-17T16:44:08.496715",
    "response_time": "3.46"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 120,
    "solution": "===START===\nimport heapq\n\ndef maximum(arr, k):\n    return sorted(heapq.nlargest(k, arr))\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n### Signature\ndef maximum(arr, k):",
    "timestamp": "2025-10-17T16:44:09.290571",
    "response_time": "0.79"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 121,
    "solution": "===START===\n```python\ndef solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n### Signature\ndef solution(lst):",
    "timestamp": "2025-10-17T16:44:10.517687",
    "response_time": "1.23"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 122,
    "solution": "===START===\n```python\ndef add_elements(arr, k):\n    return sum(x for x in arr[:k] if -99 <= x <= 99)\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n### Signature\ndef add_elements(arr, k):",
    "timestamp": "2025-10-17T16:44:11.679157",
    "response_time": "1.16"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 123,
    "solution": "===START===\n```python\ndef get_odd_collatz(n):\n    def collatz_sequence(num):\n        sequence = []\n        while num != 1:\n            sequence.append(num)\n            if num % 2 == 0:\n                num = num // 2\n            else:\n                num = 3 * num + 1\n        sequence.append(1)\n        return sequence\n\n    odd_numbers = [num for num in collatz_sequence(n) if num % 2 != 0]\n    return sorted(odd_numbers)\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n### Signature\ndef get_odd_collatz(n):",
    "timestamp": "2025-10-17T16:44:14.482923",
    "response_time": "2.80"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 124,
    "solution": "===START===\nimport re\n\ndef valid_date(date):\n    if not date:\n        return False\n    \n    date_pattern = re.compile(r\"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(\\d{4})$\")\n    if not date_pattern.match(date):\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month == 2 and day > 29:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    \n    return True\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n### Signature\ndef valid_date(date):",
    "timestamp": "2025-10-17T16:44:18.080812",
    "response_time": "3.60"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 125,
    "solution": "===START===\nimport re\n\ndef split_words(txt):\n    if re.search(r'\\s', txt):\n        return txt.split()\n    elif re.search(r',', txt):\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n\n### Signature\ndef split_words(txt):",
    "timestamp": "2025-10-17T16:44:20.050463",
    "response_time": "1.97"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 126,
    "solution": "===START===\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) <= 1:\n        return True\n    \n    last_seen = lst[0]\n    duplicate_count = 0\n    \n    for num in lst[1:]:\n        if num < last_seen:\n            return False\n        if num == last_seen:\n            duplicate_count += 1\n            if duplicate_count > 1:\n                return False\n        else:\n            duplicate_count = 0\n        last_seen = num\n    \n    return True\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n### Signature\ndef is_sorted(lst):",
    "timestamp": "2025-10-17T16:44:22.881251",
    "response_time": "2.83"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 127,
    "solution": "===START===\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    return \"YES\" if is_prime(length) else \"NO\"\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n### Signature\ndef intersection(interval1, interval2):",
    "timestamp": "2025-10-17T16:44:27.176505",
    "response_time": "4.29"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 128,
    "solution": "===START===\nimport numpy as np\n\ndef prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = np.prod(np.sign(arr))\n    magnitude_sum = sum(abs(x) for x in arr)\n    return magnitude_sum * sign_product\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n### Signature\ndef prod_signs(arr):",
    "timestamp": "2025-10-17T16:44:28.665099",
    "response_time": "1.49"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 129,
    "solution": "===START===\nimport sys\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    min_path = sys.maxsize\n\n    def dfs(x, y, path):\n        nonlocal min_path\n        if len(path) == k:\n            min_path = min(min_path, path[-1])\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and grid[nx][ny] not in path:\n                dfs(nx, ny, path + [grid[nx][ny]])\n\n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]])\n\n    return min_path\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n### Signature\ndef minPath(grid, k):",
    "timestamp": "2025-10-17T16:44:33.193672",
    "response_time": "4.53"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 130,
    "solution": "===START===\n```python\ndef tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    \n    sequence = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n    return sequence\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n\n### Signature\ndef tri(n):",
    "timestamp": "2025-10-17T16:44:36.124501",
    "response_time": "2.93"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 131,
    "solution": "===START===\n```python\ndef digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n\n### Signature\ndef digits(n):",
    "timestamp": "2025-10-17T16:44:37.949301",
    "response_time": "1.82"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 132,
    "solution": "===START===\nimport collections\n\ndef is_nested(string):\n    stack = collections.deque()\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested and not stack\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n### Signature\ndef is_nested(string):",
    "timestamp": "2025-10-17T16:44:39.793821",
    "response_time": "1.84"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 133,
    "solution": "===START===\nimport math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x) ** 2 for x in lst)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n### Signature\ndef sum_squares(lst):",
    "timestamp": "2025-10-17T16:44:40.692515",
    "response_time": "0.90"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 134,
    "solution": "===START===\nimport re\n\ndef check_if_last_char_char_a_letter(txt):\n    # Check if the last character is an alphabetical character\n    if txt and txt[-1].isalpha():\n        # Check if the last character is not part of a word\n        return not re.search(r'\\b\\w$', txt)\n    return False\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n### Signature\ndef check_if_last_char_is_a_letter(txt):",
    "timestamp": "2025-10-17T16:44:42.592030",
    "response_time": "1.90"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 135,
    "solution": "===START===\n```python\ndef can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n### Signature\ndef can_arrange(arr):",
    "timestamp": "2025-10-17T16:44:43.920888",
    "response_time": "1.33"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 136,
    "solution": "===START===\nimport sys\n\ndef largest_smallest_integers(lst):\n    largest_negative = -sys.maxsize\n    smallest_positive = sys.maxsize\n    has_negative = False\n    has_positive = False\n\n    for num in lst:\n        if num < 0:\n            has_negative = True\n            if num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            has_positive = True\n            if num < smallest_positive:\n                smallest_positive = num\n\n    if not has_negative:\n        largest_negative = None\n    if not has_positive:\n        smallest_positive = None\n\n    return (largest_negative, smallest_positive)\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n### Signature\ndef largest_smallest_integers(lst):",
    "timestamp": "2025-10-17T16:44:47.273282",
    "response_time": "3.35"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 137,
    "solution": "===START===\nimport re\n\ndef compare_one(a, b):\n    # Helper function to convert string to float if necessary\n    def to_float(value):\n        if isinstance(value, str):\n            value = re.sub(r',', '.', value)\n            return float(value)\n        return float(value)\n    \n    # Convert both values to float for comparison\n    a_float = to_float(a)\n    b_float = to_float(b)\n    \n    # Compare the float values\n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n### Signature\ndef compare_one(a, b):",
    "timestamp": "2025-10-17T16:44:50.438907",
    "response_time": "3.16"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 138,
    "solution": "===START===\n```python\ndef is_equal_to_sum_even(n):\n    # The smallest sum of 4 positive even numbers is 2 + 2 + 2 + 2 = 8\n    if n < 8:\n        return False\n    # If n is even and greater than or equal to 8, it can be written as the sum of 4 even numbers\n    return n % 2 == 0\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n\n### Signature\ndef is_equal_to_sum_even(n):",
    "timestamp": "2025-10-17T16:44:52.795168",
    "response_time": "2.36"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 139,
    "solution": "===START===\nimport math\n\ndef special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n### Signature\ndef special_factorial(n):",
    "timestamp": "2025-10-17T16:44:54.076098",
    "response_time": "1.28"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 140,
    "solution": "===START===\nimport re\n\ndef fix_spaces(text):\n    # Replace more than 2 consecutive spaces with -\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces with underscores\n    text = text.replace(' ', '_')\n    return text\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n### Signature\ndef fix_spaces(text):",
    "timestamp": "2025-10-17T16:44:55.714632",
    "response_time": "1.64"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 141,
    "solution": "===START===\nimport re\n\ndef file_name_check(file_name):\n    # Regular expression to match the file name criteria\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\n### Signature\ndef file_name_check(file_name):",
    "timestamp": "2025-10-17T16:44:57.859264",
    "response_time": "2.14"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 142,
    "solution": "===START===\n```python\ndef sum_squares(lst):\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            total_sum += value ** 2\n        elif index % 4 == 0:\n            total_sum += value ** 3\n        else:\n            total_sum += value\n    return total_sum\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n### Signature\ndef sum_squares(lst):",
    "timestamp": "2025-10-17T16:45:00.027505",
    "response_time": "2.17"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 143,
    "solution": "===START===\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n### Signature\ndef words_in_sentence(sentence):",
    "timestamp": "2025-10-17T16:45:03.588554",
    "response_time": "3.56"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 144,
    "solution": "===START===\nfrom fractions import Fraction\n\ndef simplify(x, n):\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    result = x_fraction * n_fraction\n    return result.denominator == 1\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n### Signature\ndef simplify(x, n):",
    "timestamp": "2025-10-17T16:45:04.913042",
    "response_time": "1.32"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 145,
    "solution": "===START===\nimport functools\n\ndef order_by_points(nums):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sorted(nums, key=functools.cmp_to_key(lambda a, b: digit_sum(a) - digit_sum(b) or nums.index(a) - nums.index(b)))\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n### Signature\ndef order_by_points(nums):",
    "timestamp": "2025-10-17T16:45:06.795255",
    "response_time": "1.88"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 146,
    "solution": "===START===\n```python\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                count += 1\n    return count\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n\n### Signature\ndef specialFilter(nums):",
    "timestamp": "2025-10-17T16:45:08.852806",
    "response_time": "2.06"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 147,
    "solution": "===START===\nfrom typing import *\nfrom collections import *\n\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n### Signature\ndef get_max_triples(n):",
    "timestamp": "2025-10-17T16:45:11.669464",
    "response_time": "2.82"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 148,
    "solution": "===START===\nimport sys\n\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1 + 1:index2])\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\n### Signature\ndef bf(planet1, planet2):",
    "timestamp": "2025-10-17T16:45:14.674796",
    "response_time": "3.00"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 149,
    "solution": "===START===\n```python\ndef sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length, and then alphabetically for words of the same length\n    sorted_lst = sorted(even_length_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\n### Signature\ndef sorted_list_sum(lst):",
    "timestamp": "2025-10-17T16:45:17.022391",
    "response_time": "2.35"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 150,
    "solution": "===START===\nimport math\n\ndef x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n### Signature\ndef x_or_y(n, x, y):",
    "timestamp": "2025-10-17T16:45:18.699348",
    "response_time": "1.68"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 151,
    "solution": "===START===\nimport math\n\ndef double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x >= 0 and x % 2 != 0)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n### Signature\ndef double_the_difference(lst):",
    "timestamp": "2025-10-17T16:45:19.928928",
    "response_time": "1.23"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 152,
    "solution": "===START===\n```python\ndef compare(game, guess):\n    return [abs(g - s) for g, s in zip(guess, game)]\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n### Signature\ndef compare(game,guess):",
    "timestamp": "2025-10-17T16:45:20.916543",
    "response_time": "0.99"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 153,
    "solution": "===START===\n```python\ndef Strongest_Extension(class_name, extensions):\n    strongest_extension = ''\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f'{class_name}.{strongest_extension}'\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\n### Signature\ndef Strongest_Extension(class_name, extensions):",
    "timestamp": "2025-10-17T16:45:23.636801",
    "response_time": "2.72"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 154,
    "solution": "===START===\nimport itertools\n\ndef cycpattern_check(a, b):\n    if not b:\n        return False\n    for i in range(len(b)):\n        rotated_b = ''.join(itertools.islice(itertools.cycle(b), i, i + len(b)))\n        if rotated_b in a:\n            return True\n    return False\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n### Signature\ndef cycpattern_check(a , b):",
    "timestamp": "2025-10-17T16:45:25.450714",
    "response_time": "1.81"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 155,
    "solution": "===START===\n```python\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n### Signature\ndef even_odd_count(num):",
    "timestamp": "2025-10-17T16:45:27.446971",
    "response_time": "1.99"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 156,
    "solution": "===START===\n```python\ndef int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_numeral = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_numeral += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_numeral\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n### Signature\ndef int_to_mini_roman(number):",
    "timestamp": "2025-10-17T16:45:31.978978",
    "response_time": "4.53"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 157,
    "solution": "===START===\nimport math\n\ndef right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2)\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n\n### Signature\ndef right_angle_triangle(a, b, c):",
    "timestamp": "2025-10-17T16:45:33.411357",
    "response_time": "1.43"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 158,
    "solution": "===START===\nfrom collections import Counter\n\ndef find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = len(Counter(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n### Signature\ndef find_max(words):",
    "timestamp": "2025-10-17T16:45:35.570229",
    "response_time": "2.16"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 159,
    "solution": "===START===\n```python\ndef eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n### Signature\ndef eat(number, need, remaining):",
    "timestamp": "2025-10-17T16:45:36.905834",
    "response_time": "1.33"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 160,
    "solution": "===START===\nimport operator as op\n\ndef do_algebra(operator, operand):\n    ops = {\n        '+': op.add,\n        '-': op.sub,\n        '*': op.mul,\n        '/': op.truediv,\n        '**': op.pow,\n        '%': op.mod\n    }\n    \n    result = operand[0]\n    for i in range(len(operator)):\n        result = ops[operator[i]](result, operand[i + 1])\n    \n    return result\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n### Signature\ndef do_algebra(operator, operand):",
    "timestamp": "2025-10-17T16:45:39.446022",
    "response_time": "2.54"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 161,
    "solution": "===START===\n```python\ndef solve(s):\n    if any(c.isalpha() for c in s):\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        return s[::-1]\n```\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n\n### Signature\ndef solve(s):",
    "timestamp": "2025-10-17T16:45:40.934931",
    "response_time": "1.49"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 162,
    "solution": "===START===\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n### Signature\ndef string_to_md5(text):",
    "timestamp": "2025-10-17T16:45:41.969245",
    "response_time": "1.03"
  },
  {
    "dataset_name": "human_eval_qwen25coder7b_second_half",
    "dataset_row_id": 163,
    "solution": "===START===\nimport itertools\n\ndef generate_integers(a, b):\n    even_digits = [str(i) for i in range(0, 10, 2)]\n    result = []\n    for num in range(a, b + 1):\n        num_str = str(num)\n        if any(digit in even_digits for digit in num_str):\n            result.append(num)\n    return sorted(result)\n\n===END===",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n### Signature\ndef generate_integers(a, b):",
    "timestamp": "2025-10-17T16:45:44.156388",
    "response_time": "2.19"
  }
]