{
  "Qwen/Qwen2.5-Coder-14B-Instruct": [
    {
      "task_id": 2,
      "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def similar_elements(test_tup1, test_tup2):\n    return list(set(test_tup1) & set(test_tup2))",
      "test_content": "from llm_output import similar_elements\n\ndef check(candidate):\n    assert set(candidate((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n    assert set(candidate((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))\n    assert set(candidate((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))\n\ncheck(similar_elements)",
      "context": "{\"function_name\": \"similar_elements\"}",
      "attempt_num": 1
    },
    {
      "task_id": 3,
      "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False",
      "test_content": "from llm_output import is_not_prime\n\ndef check(candidate):\n    assert candidate(2) == False\n    assert candidate(10) == True\n    assert candidate(35) == True\n    assert candidate(37) == False\n\ncheck(is_not_prime)",
      "context": "{\"function_name\": \"is_not_prime\"}",
      "attempt_num": 1
    },
    {
      "task_id": 4,
      "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)",
      "test_content": "from llm_output import heap_queue_largest\n\ndef check(candidate):\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n\ncheck(heap_queue_largest)",
      "context": "{\"function_name\": \"heap_queue_largest\"}",
      "attempt_num": 1
    },
    {
      "task_id": 7,
      "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def find_char_long(text):\n    words = text.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words",
      "test_content": "from llm_output import find_char_long\n\ndef check(candidate):\n    assert set(candidate('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n    assert set(candidate('Jing Eco and Tech')) == set(['Jing', 'Tech'])\n    assert set(candidate('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])\n\ncheck(find_char_long)",
      "context": "{\"function_name\": \"find_char_long\"}",
      "attempt_num": 1
    },
    {
      "task_id": 8,
      "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]",
      "test_content": "from llm_output import square_nums\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10,20,30])==([100,400,900])\n    assert candidate([12,15])==([144,225])\n\ncheck(square_nums)",
      "context": "{\"function_name\": \"square_nums\"}",
      "attempt_num": 1
    },
    {
      "task_id": 9,
      "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def find_Rotations(s):\n    n = len(s)\n    temp = s + s\n    for i in range(1, n + 1):\n        substring = temp[i:i + n]\n        if substring == s:\n            return i\n    return n",
      "test_content": "from llm_output import find_Rotations\n\ndef check(candidate):\n    assert candidate(\"aaaa\") == 1\n    assert candidate(\"ab\") == 2\n    assert candidate(\"abc\") == 3\n\ncheck(find_Rotations)",
      "context": "{\"function_name\": \"find_Rotations\"}",
      "attempt_num": 1
    },
    {
      "task_id": 11,
      "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def remove_Occ(s, ch):\n    # Find the first occurrence and remove it\n    first_occ_index = s.find(ch)\n    if first_occ_index != -1:\n        s = s[:first_occ_index] + s[first_occ_index + 1:]\n    \n    # Find the last occurrence and remove it\n    last_occ_index = s.rfind(ch)\n    if last_occ_index != -1:\n        s = s[:last_occ_index] + s[last_occ_index + 1:]\n    \n    return s",
      "test_content": "from llm_output import remove_Occ\n\ndef check(candidate):\n    assert candidate(\"hello\",\"l\") == \"heo\"\n    assert candidate(\"abcda\",\"a\") == \"bcd\"\n    assert candidate(\"PHP\",\"P\") == \"H\"\n\ncheck(remove_Occ)",
      "context": "{\"function_name\": \"remove_Occ\"}",
      "attempt_num": 1
    },
    {
      "task_id": 12,
      "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def sort_matrix(M):\n    # Sort the matrix based on the sum of each row\n    return sorted(M, key=sum)",
      "test_content": "from llm_output import sort_matrix\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert candidate([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n\ncheck(sort_matrix)",
      "context": "{\"function_name\": \"sort_matrix\"}",
      "attempt_num": 1
    },
    {
      "task_id": 14,
      "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "import math\n\ndef find_Volume(l, b, h):\n    # Calculate the area of the triangular base\n    base_area = 0.5 * l * b\n    # Calculate the volume of the prism\n    volume = base_area * h\n    return volume",
      "test_content": "from llm_output import find_Volume\n\ndef check(candidate):\n    assert candidate(10,8,6) == 240\n    assert candidate(3,2,2) == 6\n    assert candidate(1,2,1) == 1\n\ncheck(find_Volume)",
      "context": "{\"function_name\": \"find_Volume\"}",
      "attempt_num": 1
    },
    {
      "task_id": 16,
      "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))",
      "test_content": "from llm_output import text_lowercase_underscore\n\ndef check(candidate):\n    assert candidate(\"aab_cbbbc\")==(True)\n    assert candidate(\"aab_Abbbc\")==(False)\n    assert candidate(\"Aaab_abbbc\")==(False)\n\ncheck(text_lowercase_underscore)",
      "context": "{\"function_name\": \"text_lowercase_underscore\"}",
      "attempt_num": 1
    },
    {
      "task_id": 17,
      "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def square_perimeter(a):\n    return 4 * a",
      "test_content": "from llm_output import square_perimeter\n\ndef check(candidate):\n    assert candidate(10)==40\n    assert candidate(5)==20\n    assert candidate(4)==16\n\ncheck(square_perimeter)",
      "context": "{\"function_name\": \"square_perimeter\"}",
      "attempt_num": 1
    },
    {
      "task_id": 19,
      "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
      "test_content": "from llm_output import test_duplicate\n\ndef check(candidate):\n    assert candidate(([1,2,3,4,5]))==False\n    assert candidate(([1,2,3,4, 4]))==True\n    assert candidate([1,1,2,2,3,3,4,4,5])==True\n\ncheck(test_duplicate)",
      "context": "{\"function_name\": \"test_duplicate\"}",
      "attempt_num": 1
    },
    {
      "task_id": 57,
      "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "from itertools import permutations\n\ndef find_Max_Num(arr):\n    # Convert all integers in the list to strings\n    arr = list(map(str, arr))\n    \n    # Generate all possible permutations of the array\n    perm = permutations(arr)\n    \n    # Initialize the maximum number as a very small string\n    max_num = '0'\n    \n    # Iterate through each permutation\n    for p in perm:\n        # Join the permutation to form a number\n        num = ''.join(p)\n        \n        # Update the maximum number if the current number is larger\n        if num > max_num:\n            max_num = num\n    \n    # Convert the maximum number back to an integer and return\n    return int(max_num)",
      "test_content": "from llm_output import find_Max_Num\n\ndef check(candidate):\n    assert candidate([1,2,3]) == 321\n    assert candidate([4,5,6,1]) == 6541\n    assert candidate([1,2,3,9]) == 9321\n\ncheck(find_Max_Num)",
      "context": "{\"function_name\": \"find_Max_Num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 58,
      "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0",
      "test_content": "from llm_output import opposite_Signs\n\ndef check(candidate):\n    assert candidate(1,-2) == True\n    assert candidate(3,2) == False\n    assert candidate(-10,-10) == False\n    assert candidate(-2,2) == True\n\ncheck(opposite_Signs)",
      "context": "{\"function_name\": \"opposite_Signs\"}",
      "attempt_num": 1
    },
    {
      "task_id": 61,
      "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                count += 1\n    return count",
      "test_content": "from llm_output import count_Substrings\n\ndef check(candidate):\n    assert candidate('112112') == 6\n    assert candidate('111') == 6\n    assert candidate('1101112') == 12\n\ncheck(count_Substrings)",
      "context": "{\"function_name\": \"count_Substrings\"}",
      "attempt_num": 1
    },
    {
      "task_id": 62,
      "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def smallest_num(xs):\n    if not xs:\n        raise ValueError(\"The list is empty\")\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
      "test_content": "from llm_output import smallest_num\n\ndef check(candidate):\n    assert candidate([10, 20, 1, 45, 99]) == 1\n    assert candidate([1, 2, 3]) == 1\n    assert candidate([45, 46, 50, 60]) == 45\n\ncheck(smallest_num)",
      "context": "{\"function_name\": \"smallest_num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 64,
      "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])",
      "test_content": "from llm_output import subject_marks\n\ndef check(candidate):\n    assert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert candidate([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\n    assert candidate([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\n\ncheck(subject_marks)",
      "context": "{\"function_name\": \"subject_marks\"}",
      "attempt_num": 1
    },
    {
      "task_id": 65,
      "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total",
      "test_content": "from llm_output import recursive_list_sum\n\ndef check(candidate):\n    assert candidate(([1, 2, [3,4],[5,6]]))==21\n    assert candidate(([7, 10, [15,14],[19,41]]))==106\n    assert candidate(([10, 20, [30,40],[50,60]]))==210\n\ncheck(recursive_list_sum)",
      "context": "{\"function_name\": \"recursive_list_sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 66,
      "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
      "test_content": "from llm_output import pos_count\n\ndef check(candidate):\n    assert candidate([1,-2,3,-4]) == 2\n    assert candidate([3,4,5,-1]) == 3\n    assert candidate([1,2,3,4]) == 4\n\ncheck(pos_count)",
      "context": "{\"function_name\": \"pos_count\"}",
      "attempt_num": 1
    },
    {
      "task_id": 67,
      "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def bell_number(n):\n    # Create a table to store Bell numbers\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # Base case: Bell(0) is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly put the value of Bell(i, 0)\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # Bell number for n is the first element of the nth row\n    return bell[n][0]",
      "test_content": "from llm_output import bell_number\n\ndef check(candidate):\n    assert candidate(2)==2\n    assert candidate(10)==115975\n    assert candidate(56)==6775685320645824322581483068371419745979053216268760300\n\ncheck(bell_number)",
      "context": "{\"function_name\": \"bell_number\"}",
      "attempt_num": 1
    },
    {
      "task_id": 68,
      "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def is_Monotonic(A):\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        if A[i] < A[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing",
      "test_content": "from llm_output import is_Monotonic\n\ndef check(candidate):\n    assert candidate([6, 5, 4, 4]) == True\n    assert candidate([1, 2, 2, 3]) == True\n    assert candidate([1, 3, 2]) == False\n\ncheck(is_Monotonic)",
      "context": "{\"function_name\": \"is_Monotonic\"}",
      "attempt_num": 1
    },
    {
      "task_id": 69,
      "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def is_sublist(l, s):\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
      "test_content": "from llm_output import is_sublist\n\ndef check(candidate):\n    assert candidate([2,4,3,5,7],[3,7])==False\n    assert candidate([2,4,3,5,7],[4,3])==True\n    assert candidate([2,4,3,5,7],[1,6])==False\n\ncheck(is_sublist)",
      "context": "{\"function_name\": \"is_sublist\"}",
      "attempt_num": 1
    },
    {
      "task_id": 70,
      "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def get_equal(Input):\n    if not Input:\n        return True\n    \n    first_length = len(Input[0])\n    for tup in Input:\n        if len(tup) != first_length:\n            return False\n    return True",
      "test_content": "from llm_output import get_equal\n\ndef check(candidate):\n    assert candidate([(11, 22, 33), (44, 55, 66)]) == True\n    assert candidate([(1, 2, 3), (4, 5, 6, 7)]) == False\n    assert candidate([(1, 2), (3, 4)]) == True\n\ncheck(get_equal)",
      "context": "{\"function_name\": \"get_equal\"}",
      "attempt_num": 1
    },
    {
      "task_id": 71,
      "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def comb_sort(nums):\n    def get_next_gap(gap):\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums",
      "test_content": "from llm_output import comb_sort\n\ndef check(candidate):\n    assert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert candidate([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n    assert candidate([99, 15, 13, 47]) == [13, 15, 47, 99]\n\ncheck(comb_sort)",
      "context": "{\"function_name\": \"comb_sort\"}",
      "attempt_num": 1
    },
    {
      "task_id": 72,
      "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def dif_Square(n):\n    # A number can be represented as the difference of two squares if and only if it is not of the form 4k+2\n    return n % 4 != 2",
      "test_content": "from llm_output import dif_Square\n\ndef check(candidate):\n    assert candidate(5) == True\n    assert candidate(10) == False\n    assert candidate(15) == True\n\ncheck(dif_Square)",
      "context": "{\"function_name\": \"dif_Square\"}",
      "attempt_num": 1
    },
    {
      "task_id": 74,
      "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True",
      "test_content": "from llm_output import is_samepatterns\n\ndef check(candidate):\n    assert candidate([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n    assert candidate([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False\n    assert candidate([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False\n\ncheck(is_samepatterns)",
      "context": "{\"function_name\": \"is_samepatterns\"}",
      "attempt_num": 1
    },
    {
      "task_id": 75,
      "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def find_tuples(test_list, K):\n    result = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n    return result",
      "test_content": "from llm_output import find_tuples\n\ndef check(candidate):\n    assert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n    assert candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\n    assert candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]\n\ncheck(find_tuples)",
      "context": "{\"function_name\": \"find_tuples\"}",
      "attempt_num": 1
    },
    {
      "task_id": 77,
      "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def is_Diff(n):\n    # Convert the number to a string to easily access each digit\n    n_str = str(n)\n    \n    # Calculate the difference between the sum of digits at even and odd positions\n    even_sum = sum(int(n_str[i]) for i in range(0, len(n_str), 2))\n    odd_sum = sum(int(n_str[i]) for i in range(1, len(n_str), 2))\n    \n    # Check if the difference is divisible by 11\n    return (even_sum - odd_sum) % 11 == 0",
      "test_content": "from llm_output import is_Diff\n\ndef check(candidate):\n    assert candidate (12345) == False\n    assert candidate(1212112) == True\n    assert candidate(1212) == False\n\ncheck(is_Diff)",
      "context": "{\"function_name\": \"is_Diff\"}",
      "attempt_num": 1
    },
    {
      "task_id": 79,
      "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def word_len(s):\n    return len(s) % 2 != 0",
      "test_content": "from llm_output import word_len\n\ndef check(candidate):\n    assert candidate(\"Hadoop\") == False\n    assert candidate(\"great\") == True\n    assert candidate(\"structure\") == True\n\ncheck(word_len)",
      "context": "{\"function_name\": \"word_len\"}",
      "attempt_num": 1
    },
    {
      "task_id": 80,
      "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6",
      "test_content": "from llm_output import tetrahedral_number\n\ndef check(candidate):\n    assert candidate(5) == 35\n    assert candidate(6) == 56\n    assert candidate(7) == 84\n\ncheck(tetrahedral_number)",
      "context": "{\"function_name\": \"tetrahedral_number\"}",
      "attempt_num": 1
    },
    {
      "task_id": 82,
      "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)",
      "test_content": "from llm_output import volume_sphere\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(10), 4188.790204786391, rel_tol=0.001)\n    assert math.isclose(candidate(25), 65449.84694978735, rel_tol=0.001)\n    assert math.isclose(candidate(20), 33510.32163829113, rel_tol=0.001)\n\ncheck(volume_sphere)",
      "context": "{\"function_name\": \"volume_sphere\"}",
      "attempt_num": 1
    },
    {
      "task_id": 84,
      "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def sequence(n):\n    if n == 1:\n        return 1\n    \n    # Initialize the sequence with the first two known values\n    seq = [0, 1, 1]\n    \n    # Compute the sequence up to the nth number\n    for i in range(3, n + 1):\n        seq.append(seq[seq[i - 1]] + seq[i - seq[i - 1]])\n    \n    return seq[n]",
      "test_content": "from llm_output import sequence\n\ndef check(candidate):\n    assert candidate(10) == 6\n    assert candidate(2) == 1\n    assert candidate(3) == 2\n\ncheck(sequence)",
      "context": "{\"function_name\": \"sequence\"}",
      "attempt_num": 1
    },
    {
      "task_id": 85,
      "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2",
      "test_content": "from llm_output import surfacearea_sphere\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(10), 1256.6370614359173, rel_tol=0.001)\n    assert math.isclose(candidate(15), 2827.4333882308138, rel_tol=0.001)\n    assert math.isclose(candidate(20), 5026.548245743669, rel_tol=0.001)\n\ncheck(surfacearea_sphere)",
      "context": "{\"function_name\": \"surfacearea_sphere\"}",
      "attempt_num": 1
    },
    {
      "task_id": 86,
      "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1",
      "test_content": "from llm_output import centered_hexagonal_number\n\ndef check(candidate):\n    assert candidate(10) == 271\n    assert candidate(2) == 7\n    assert candidate(9) == 217\n\ncheck(centered_hexagonal_number)",
      "context": "{\"function_name\": \"centered_hexagonal_number\"}",
      "attempt_num": 1
    },
    {
      "task_id": 88,
      "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def freq_count(list1):\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency",
      "test_content": "from llm_output import freq_count\n\ndef check(candidate):\n    assert candidate([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n    assert candidate([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\n    assert candidate([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})\n\ncheck(freq_count)",
      "context": "{\"function_name\": \"freq_count\"}",
      "attempt_num": 1
    },
    {
      "task_id": 89,
      "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def closest_num(N):\n    return N - 1",
      "test_content": "from llm_output import closest_num\n\ndef check(candidate):\n    assert candidate(11) == 10\n    assert candidate(7) == 6\n    assert candidate(12) == 11\n\ncheck(closest_num)",
      "context": "{\"function_name\": \"closest_num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 90,
      "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def len_log(list1):\n    if not list1:\n        return 0\n    return max(len(word) for word in list1)",
      "test_content": "from llm_output import len_log\n\ndef check(candidate):\n    assert candidate([\"python\",\"PHP\",\"bigdata\"]) == 7\n    assert candidate([\"a\",\"ab\",\"abc\"]) == 3\n    assert candidate([\"small\",\"big\",\"tall\"]) == 5\n\ncheck(len_log)",
      "context": "{\"function_name\": \"len_log\"}",
      "attempt_num": 1
    },
    {
      "task_id": 92,
      "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def is_undulating(n):\n    n_str = str(n)\n    if len(n_str) < 3:\n        return False\n    for i in range(2, len(n_str)):\n        if n_str[i] != n_str[i - 2]:\n            return False\n    return n_str[0] != n_str[1]",
      "test_content": "from llm_output import is_undulating\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ncheck(is_undulating)",
      "context": "{\"function_name\": \"is_undulating\"}",
      "attempt_num": 1
    },
    {
      "task_id": 93,
      "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def power(a, b):\n    return a ** b",
      "test_content": "from llm_output import power\n\ndef check(candidate):\n    assert candidate(3,4) == 81\n    assert candidate(2,3) == 8\n    assert candidate(5,5) == 3125\n\ncheck(power)",
      "context": "{\"function_name\": \"power\"}",
      "attempt_num": 1
    },
    {
      "task_id": 94,
      "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def index_minimum(test_list):\n    if not test_list:\n        return None\n    min_tuple = min(test_list, key=lambda x: x[1])\n    return min_tuple[0]",
      "test_content": "from llm_output import index_minimum\n\ndef check(candidate):\n    assert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n    assert candidate([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\n    assert candidate([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n\ncheck(index_minimum)",
      "context": "{\"function_name\": \"index_minimum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 95,
      "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
      "test_content": "from llm_output import Find_Min_Length\n\ndef check(candidate):\n    assert candidate([[1],[1,2]]) == 1\n    assert candidate([[1,2],[1,2,3],[1,2,3,4]]) == 2\n    assert candidate([[3,3,3],[4,4,4,4]]) == 3\n\ncheck(Find_Min_Length)",
      "context": "{\"function_name\": \"Find_Min_Length\"}",
      "attempt_num": 1
    },
    {
      "task_id": 96,
      "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count",
      "test_content": "from llm_output import divisor\n\ndef check(candidate):\n    assert candidate(15) == 4\n    assert candidate(12) == 6\n    assert candidate(9) == 3\n\ncheck(divisor)",
      "context": "{\"function_name\": \"divisor\"}",
      "attempt_num": 1
    },
    {
      "task_id": 97,
      "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def frequency_lists(list1):\n    frequency_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    return frequency_dict",
      "test_content": "from llm_output import frequency_lists\n\ndef check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    assert candidate([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n    assert candidate([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n\ncheck(frequency_lists)",
      "context": "{\"function_name\": \"frequency_lists\"}",
      "attempt_num": 1
    },
    {
      "task_id": 98,
      "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "from functools import reduce\n\ndef multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = reduce(lambda x, y: x * y, numbers)\n    return product / len(numbers)",
      "test_content": "from llm_output import multiply_num\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n    assert math.isclose(candidate((-10,-20,-30)), -2000.0, rel_tol=0.001)\n    assert math.isclose(candidate((19,15,18)), 1710.0, rel_tol=0.001)\n\ncheck(multiply_num)",
      "context": "{\"function_name\": \"multiply_num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 99,
      "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary",
      "test_content": "from llm_output import decimal_to_binary\n\ndef check(candidate):\n    assert candidate(8) == '1000'\n    assert candidate(18) == '10010'\n    assert candidate(7) == '111'\n\ncheck(decimal_to_binary)",
      "context": "{\"function_name\": \"decimal_to_binary\"}",
      "attempt_num": 1
    },
    {
      "task_id": 100,
      "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n\n    return num",
      "test_content": "from llm_output import next_smallest_palindrome\n\ndef check(candidate):\n    assert candidate(99)==101\n    assert candidate(1221)==1331\n    assert candidate(120)==121\n\ncheck(next_smallest_palindrome)",
      "context": "{\"function_name\": \"next_smallest_palindrome\"}",
      "attempt_num": 1
    },
    {
      "task_id": 101,
      "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def kth_element(arr, k):\n    return arr[k - 1]",
      "test_content": "from llm_output import kth_element\n\ndef check(candidate):\n    assert candidate([12,3,5,7,19], 2) == 3\n    assert candidate([17,24,8,23], 3) == 8\n    assert candidate([16,21,25,36,4], 4) == 36\n\ncheck(kth_element)",
      "context": "{\"function_name\": \"kth_element\"}",
      "attempt_num": 1
    },
    {
      "task_id": 102,
      "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))",
      "test_content": "from llm_output import snake_to_camel\n\ndef check(candidate):\n    assert candidate('python_program')=='PythonProgram'\n    assert candidate('python_language')==('PythonLanguage')\n    assert candidate('programming_language')==('ProgrammingLanguage')\n\ncheck(snake_to_camel)",
      "context": "{\"function_name\": \"snake_to_camel\"}",
      "attempt_num": 1
    },
    {
      "task_id": 103,
      "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def eulerian_num(n, m):\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m))",
      "test_content": "from llm_output import eulerian_num\n\ndef check(candidate):\n    assert candidate(3, 1) == 4\n    assert candidate(4, 1) == 11\n    assert candidate(5, 3) == 26\n\ncheck(eulerian_num)",
      "context": "{\"function_name\": \"eulerian_num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 104,
      "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def sort_sublists(input_list):\n    return [sorted(sublist) for sublist in input_list]",
      "test_content": "from llm_output import sort_sublists\n\ndef check(candidate):\n    assert candidate(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[[\"\"\"green\"\"\", \"\"\"orange\"\"\"], [\"\"\"black\"\"\", \"\"\"white\"\"\"], [\"\"\"black\"\"\", \"\"\"orange\"\"\", \"\"\"white\"\"\"]]\n    assert candidate(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[\"\"\" red \"\"\", \"\"\"green\"\"\"], [\"\"\" black\"\"\", \"\"\"blue \"\"\"], [\"\"\" orange\"\"\", \"\"\"brown\"\"\"]]\n    assert candidate(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[[\"\"\"gold\"\"\", \"\"\"zilver\"\"\"],[\"\"\"aluminium\"\"\", \"\"\"magnesium\"\"\"], [\"\"\"bronze\"\"\", \"\"\"steel\"\"\"]]\n\ncheck(sort_sublists)",
      "context": "{\"function_name\": \"sort_sublists\"}",
      "attempt_num": 1
    },
    {
      "task_id": 105,
      "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def count(lst):\n    return sum(1 for item in lst if item is True)",
      "test_content": "from llm_output import count\n\ndef check(candidate):\n    assert candidate([True,False,True]) == 2\n    assert candidate([False,False]) == 0\n    assert candidate([True,True,True]) == 3\n\ncheck(count)",
      "context": "{\"function_name\": \"count\"}",
      "attempt_num": 1
    },
    {
      "task_id": 106,
      "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def add_lists(test_list, test_tup):\n    # Convert the tuple to a list, append the given list, and convert back to a tuple\n    result = list(test_tup) + test_list\n    return tuple(result)",
      "test_content": "from llm_output import add_lists\n\ndef check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert candidate([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n    assert candidate([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n\ncheck(add_lists)",
      "context": "{\"function_name\": \"add_lists\"}",
      "attempt_num": 1
    },
    {
      "task_id": 108,
      "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def merge_sorted_list(num1, num2, num3):\n    # Combine all three lists\n    combined = num1 + num2 + num3\n    # Sort the combined list\n    combined.sort()\n    return combined",
      "test_content": "from llm_output import merge_sorted_list\n\ndef check(candidate):\n    assert candidate([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n\ncheck(merge_sorted_list)",
      "context": "{\"function_name\": \"merge_sorted_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 109,
      "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def odd_Equivalent(s, n):\n    count = 0\n    length = len(s)\n    \n    for _ in range(n):\n        # Rotate the string to the right by one position\n        s = s[-1] + s[:-1]\n        \n        # Convert the binary string to an integer\n        num = int(s, 2)\n        \n        # Check if the number is odd\n        if num % 2 == 1:\n            count += 1\n    \n    return count",
      "test_content": "from llm_output import odd_Equivalent\n\ndef check(candidate):\n    assert candidate(\"011001\",6) == 3\n    assert candidate(\"11011\",5) == 4\n    assert candidate(\"1010\",4) == 2\n\ncheck(odd_Equivalent)",
      "context": "{\"function_name\": \"odd_Equivalent\"}",
      "attempt_num": 1
    },
    {
      "task_id": 111,
      "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def common_in_nested_lists(nestedlist):\n    if not nestedlist:\n        return []\n    \n    # Initialize the set with the first list's elements\n    common_elements = set(nestedlist[0])\n    \n    # Iterate over the remaining lists and update the intersection\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    \n    return list(common_elements)",
      "test_content": "from llm_output import common_in_nested_lists\n\ndef check(candidate):\n    assert set(candidate([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n    assert set(candidate([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])\n    assert set(candidate([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])\n\ncheck(common_in_nested_lists)",
      "context": "{\"function_name\": \"common_in_nested_lists\"}",
      "attempt_num": 1
    },
    {
      "task_id": 113,
      "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
      "test_content": "from llm_output import check_integer\n\ndef check(candidate):\n    assert candidate(\"python\")==False\n    assert candidate(\"1\")==True\n    assert candidate(\"12345\")==True\n\ncheck(check_integer)",
      "context": "{\"function_name\": \"check_integer\"}",
      "attempt_num": 1
    },
    {
      "task_id": 115,
      "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def empty_dit(list1):\n    return all(not d for d in list1)",
      "test_content": "from llm_output import empty_dit\n\ndef check(candidate):\n    assert candidate([{},{},{}])==True\n    assert candidate([{1,2},{},{}])==False\n    assert candidate({})==True\n\ncheck(empty_dit)",
      "context": "{\"function_name\": \"empty_dit\"}",
      "attempt_num": 1
    },
    {
      "task_id": 116,
      "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def tuple_to_int(nums):\n    return int(''.join(map(str, nums)))",
      "test_content": "from llm_output import tuple_to_int\n\ndef check(candidate):\n    assert candidate((1,2,3))==123\n    assert candidate((4,5,6))==456\n    assert candidate((5,6,7))==567\n\ncheck(tuple_to_int)",
      "context": "{\"function_name\": \"tuple_to_int\"}",
      "attempt_num": 1
    },
    {
      "task_id": 118,
      "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def string_to_list(string):\n    return string.split()",
      "test_content": "from llm_output import string_to_list\n\ndef check(candidate):\n    assert candidate(\"python programming\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\"]\n    assert candidate(\"lists tuples strings\")==[\"\"\"lists\"\"\",\"\"\"tuples\"\"\",\"\"\"strings\"\"\"]\n    assert candidate(\"write a program\")==[\"\"\"write\"\"\",\"\"\"a\"\"\",\"\"\"program\"\"\"]\n\ncheck(string_to_list)",
      "context": "{\"function_name\": \"string_to_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 119,
      "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Ensure mid is even for comparison\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the unique element is in the right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return arr[left]",
      "test_content": "from llm_output import search\n\ndef check(candidate):\n    assert candidate([1,1,2,2,3]) == 3\n    assert candidate([1,1,3,3,4,4,5,5,7,7,8]) == 8\n    assert candidate([1,2,2,3,3,4,4]) == 1\n\ncheck(search)",
      "context": "{\"function_name\": \"search\"}",
      "attempt_num": 1
    },
    {
      "task_id": 123,
      "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    total_sum = 0\n    for num in range(2, limit + 1):\n        div_sum = sum_of_divisors(num)\n        if div_sum != num and sum_of_divisors(div_sum) == num:\n            total_sum += num\n\n    return total_sum",
      "test_content": "from llm_output import amicable_numbers_sum\n\ndef check(candidate):\n    assert candidate(999)==504\n    assert candidate(9999)==31626\n    assert candidate(99)==0\n\ncheck(amicable_numbers_sum)",
      "context": "{\"function_name\": \"amicable_numbers_sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 125,
      "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def find_length(string):\n    max_diff = 0\n    current_diff = 0\n    min_diff = 0\n\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n\n        max_diff = max(max_diff, current_diff - min_diff)\n        min_diff = min(min_diff, current_diff)\n\n    return max_diff",
      "test_content": "from llm_output import find_length\n\ndef check(candidate):\n    assert candidate(\"11000010001\") == 6\n    assert candidate(\"10111\") == 1\n    assert candidate(\"11011101100101\") == 2\n\ncheck(find_length)",
      "context": "{\"function_name\": \"find_length\"}",
      "attempt_num": 1
    },
    {
      "task_id": 126,
      "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    common_divisor_sum = 0\n    gcd_value = gcd(a, b)\n    \n    for i in range(1, int(gcd_value**0.5) + 1):\n        if gcd_value % i == 0:\n            common_divisor_sum += i\n            if i != gcd_value // i:\n                common_divisor_sum += gcd_value // i\n    \n    return common_divisor_sum",
      "test_content": "from llm_output import sum\n\ndef check(candidate):\n    assert candidate(10,15) == 6\n    assert candidate(100,150) == 93\n    assert candidate(4,6) == 3\n\ncheck(sum)",
      "context": "{\"function_name\": \"sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 127,
      "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def multiply_int(x, y):\n    return x * y",
      "test_content": "from llm_output import multiply_int\n\ndef check(candidate):\n    assert candidate(10,20)==200\n    assert candidate(5,10)==50\n    assert candidate(4,8)==32\n\ncheck(multiply_int)",
      "context": "{\"function_name\": \"multiply_int\"}",
      "attempt_num": 1
    },
    {
      "task_id": 128,
      "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def long_words(n, str):\n    words = str.split()\n    return [word for word in words if len(word) > n]",
      "test_content": "from llm_output import long_words\n\ndef check(candidate):\n    assert candidate(3,\"python is a programming language\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\",\"\"\"language\"\"\"]\n    assert candidate(2,\"writing a program\")==[\"\"\"writing\"\"\",\"\"\"program\"\"\"]\n    assert candidate(5,\"sorting list\")==[\"\"\"sorting\"\"\"]\n\ncheck(long_words)",
      "context": "{\"function_name\": \"long_words\"}",
      "attempt_num": 1
    },
    {
      "task_id": 129,
      "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    if n == 0 or any(len(row) != n for row in my_matrix):\n        return False\n\n    # Calculate the sum of the first row to use as the magic sum\n    magic_sum = sum(my_matrix[0])\n\n    # Check sums of all rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check sums of all columns\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check sum of the main diagonal\n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check sum of the secondary diagonal\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True",
      "test_content": "from llm_output import magic_square_test\n\ndef check(candidate):\n    assert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n\ncheck(magic_square_test)",
      "context": "{\"function_name\": \"magic_square_test\"}",
      "attempt_num": 1
    },
    {
      "task_id": 130,
      "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "from collections import Counter\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    \n    count = Counter(nums)\n    max_freq = max(count.values())\n    max_freq_items = [item for item, freq in count.items() if freq == max_freq]\n    \n    return max_freq_items[0] if max_freq_items else None",
      "test_content": "from llm_output import max_occurrences\n\ndef check(candidate):\n    assert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n    assert candidate([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\n    assert candidate([10,20,20,30,40,90,80,50,30,20,50,10])==20\n\ncheck(max_occurrences)",
      "context": "{\"function_name\": \"max_occurrences\"}",
      "attempt_num": 1
    },
    {
      "task_id": 131,
      "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str_list) - 1\n    \n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n    \n    return ''.join(str_list)",
      "test_content": "from llm_output import reverse_vowels\n\ndef check(candidate):\n    assert candidate(\"Python\") == \"Python\"\n    assert candidate(\"USA\") == \"ASU\"\n    assert candidate(\"ab\") == \"ab\"\n\ncheck(reverse_vowels)",
      "context": "{\"function_name\": \"reverse_vowels\"}",
      "attempt_num": 1
    },
    {
      "task_id": 132,
      "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def tup_string(tup1):\n    return ''.join(map(str, tup1))",
      "test_content": "from llm_output import tup_string\n\ndef check(candidate):\n    assert candidate((\"\"\"e\"\"\", \"\"\"x\"\"\", \"\"\"e\"\"\", \"\"\"r\"\"\", \"\"\"c\"\"\", \"\"\"i\"\"\", \"\"\"s\"\"\", \"\"\"e\"\"\", \"\"\"s\"\"\"))==(\"exercises\")\n    assert candidate((\"\"\"p\"\"\",\"\"\"y\"\"\",\"\"\"t\"\"\",\"\"\"h\"\"\",\"\"\"o\"\"\",\"\"\"n\"\"\"))==(\"python\")\n    assert candidate((\"\"\"p\"\"\",\"\"\"r\"\"\",\"\"\"o\"\"\",\"\"\"g\"\"\",\"\"\"r\"\"\",\"\"\"a\"\"\",\"\"\"m\"\"\"))==(\"program\")\n\ncheck(tup_string)",
      "context": "{\"function_name\": \"tup_string\"}",
      "attempt_num": 1
    },
    {
      "task_id": 133,
      "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)",
      "test_content": "from llm_output import sum_negativenum\n\ndef check(candidate):\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n    assert candidate([10,15,-14,13,-18,12,-20])==-52\n    assert candidate([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894\n\ncheck(sum_negativenum)",
      "context": "{\"function_name\": \"sum_negativenum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 135,
      "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)",
      "test_content": "from llm_output import hexagonal_num\n\ndef check(candidate):\n    assert candidate(10) == 190\n    assert candidate(5) == 45\n    assert candidate(7) == 91\n\ncheck(hexagonal_num)",
      "context": "{\"function_name\": \"hexagonal_num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 137,
      "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def zero_count(nums):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0  # Avoid division by zero if there are no non-zero elements\n    \n    return zero_count / non_zero_count",
      "test_content": "from llm_output import zero_count\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n    assert math.isclose(candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\n    assert math.isclose(candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)\n\ncheck(zero_count)",
      "context": "{\"function_name\": \"zero_count\"}",
      "attempt_num": 1
    },
    {
      "task_id": 139,
      "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r",
      "test_content": "from llm_output import circle_circumference\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(10), 62.830000000000005, rel_tol=0.001)\n    assert math.isclose(candidate(5), 31.415000000000003, rel_tol=0.001)\n    assert math.isclose(candidate(4), 25.132, rel_tol=0.001)\n\ncheck(circle_circumference)",
      "context": "{\"function_name\": \"circle_circumference\"}",
      "attempt_num": 1
    },
    {
      "task_id": 140,
      "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def extract_singly(test_list):\n    result = set()\n    for sublist in test_list:\n        result.update(sublist)\n    return result",
      "test_content": "from llm_output import extract_singly\n\ndef check(candidate):\n    assert set(candidate([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n    assert set(candidate([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])\n    assert set(candidate([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])\n\ncheck(extract_singly)",
      "context": "{\"function_name\": \"extract_singly\"}",
      "attempt_num": 1
    },
    {
      "task_id": 141,
      "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def pancake_sort(nums):\n    def flip(sublist, k):\n        start = 0\n        while start < k:\n            sublist[start], sublist[k] = sublist[k], sublist[start]\n            start += 1\n            k -= 1\n\n    n = len(nums)\n    for size in range(n, 1, -1):\n        # Find the index of the maximum element in nums[0:size]\n        max_index = 0\n        for i in range(1, size):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        # If the maximum element is not already at the end of the current sublist\n        if max_index != size - 1:\n            # Flip the maximum element to the front if it's not already there\n            if max_index != 0:\n                flip(nums, max_index)\n            # Flip it to its correct position\n            flip(nums, size - 1)\n\n    return nums",
      "test_content": "from llm_output import pancake_sort\n\ndef check(candidate):\n    assert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert candidate([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n    assert candidate([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n\ncheck(pancake_sort)",
      "context": "{\"function_name\": \"pancake_sort\"}",
      "attempt_num": 1
    },
    {
      "task_id": 142,
      "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
      "test_content": "from llm_output import count_samepair\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\n    assert candidate([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\n\ncheck(count_samepair)",
      "context": "{\"function_name\": \"count_samepair\"}",
      "attempt_num": 1
    },
    {
      "task_id": 145,
      "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def max_Abs_Diff(arr):\n    if not arr:\n        return 0\n    \n    min_element = arr[0]\n    max_element = arr[0]\n    \n    for num in arr:\n        if num < min_element:\n            min_element = num\n        if num > max_element:\n            max_element = num\n    \n    return max_element - min_element",
      "test_content": "from llm_output import max_Abs_Diff\n\ndef check(candidate):\n    assert candidate((2,1,5,3)) == 4\n    assert candidate((9,3,2,5,1)) == 8\n    assert candidate((3,2,1)) == 2\n\ncheck(max_Abs_Diff)",
      "context": "{\"function_name\": \"max_Abs_Diff\"}",
      "attempt_num": 1
    },
    {
      "task_id": 161,
      "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]",
      "test_content": "from llm_output import remove_elements\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]\n\ncheck(remove_elements)",
      "context": "{\"function_name\": \"remove_elements\"}",
      "attempt_num": 1
    },
    {
      "task_id": 162,
      "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total",
      "test_content": "from llm_output import sum_series\n\ndef check(candidate):\n    assert candidate(6) == 12\n    assert candidate(10) == 30\n    assert candidate(9) == 25\n\ncheck(sum_series)",
      "context": "{\"function_name\": \"sum_series\"}",
      "attempt_num": 1
    },
    {
      "task_id": 163,
      "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "import math\n\ndef area_polygon(s, l):\n    # Calculate the area of a regular polygon\n    area = (s * l**2) / (4 * math.tan(math.pi / s))\n    return area",
      "test_content": "from llm_output import area_polygon\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(4, 20), 400., rel_tol=0.001)\n    assert math.isclose(candidate(10, 15), 1731.197, rel_tol=0.001)\n    assert math.isclose(candidate(9, 7), 302.909, rel_tol=0.001)\n\ncheck(area_polygon)",
      "context": "{\"function_name\": \"area_polygon\"}",
      "attempt_num": 1
    },
    {
      "task_id": 165,
      "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def count_char_position(str1):\n    count = 0\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if 'a' <= str1[i] <= 'z' and (ord(str1[i]) - ord('a') + 1) == (i + 1):\n            count += 1\n    return count",
      "test_content": "from llm_output import count_char_position\n\ndef check(candidate):\n    assert candidate(\"xbcefg\") == 2\n    assert candidate(\"ABcED\") == 3\n    assert candidate(\"AbgdeF\") == 5\n\ncheck(count_char_position)",
      "context": "{\"function_name\": \"count_char_position\"}",
      "attempt_num": 1
    },
    {
      "task_id": 166,
      "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def find_even_pair(A):\n    even_count = 0\n    odd_count = 0\n    \n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Even XOR Even = Even\n    # Odd XOR Odd = Even\n    even_pairs = (even_count * (even_count - 1)) // 2\n    odd_pairs = (odd_count * (odd_count - 1)) // 2\n    \n    return even_pairs + odd_pairs",
      "test_content": "from llm_output import find_even_pair\n\ndef check(candidate):\n    assert candidate([5, 4, 7, 2, 1]) == 4\n    assert candidate([7, 2, 8, 1, 0, 5, 11]) == 9\n    assert candidate([1, 2, 3]) == 1\n\ncheck(find_even_pair)",
      "context": "{\"function_name\": \"find_even_pair\"}",
      "attempt_num": 1
    },
    {
      "task_id": 167,
      "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "import math\n\ndef next_power_of_2(n):\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))",
      "test_content": "from llm_output import next_power_of_2\n\ndef check(candidate):\n    assert candidate(0) == 1\n    assert candidate(5) == 8\n    assert candidate(17) == 32\n\ncheck(next_power_of_2)",
      "context": "{\"function_name\": \"next_power_of_2\"}",
      "attempt_num": 1
    },
    {
      "task_id": 168,
      "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def frequency(a, x):\n    return a.count(x)",
      "test_content": "from llm_output import frequency\n\ndef check(candidate):\n    assert candidate([1,2,3], 4) == 0\n    assert candidate([1,2,2,3,3,3,4], 3) == 3\n    assert candidate([0,1,2,3,1,2], 1) == 2\n\ncheck(frequency)",
      "context": "{\"function_name\": \"frequency\"}",
      "attempt_num": 1
    },
    {
      "task_id": 170,
      "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def sum_range_list(list1, m, n):\n    return sum(list1[m:n+1])",
      "test_content": "from llm_output import sum_range_list\n\ndef check(candidate):\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38\n\ncheck(sum_range_list)",
      "context": "{\"function_name\": \"sum_range_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 171,
      "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def perimeter_pentagon(a):\n    return 5 * a",
      "test_content": "from llm_output import perimeter_pentagon\n\ndef check(candidate):\n    assert candidate(5) == 25\n    assert candidate(10) == 50\n    assert candidate(15) == 75\n\ncheck(perimeter_pentagon)",
      "context": "{\"function_name\": \"perimeter_pentagon\"}",
      "attempt_num": 1
    },
    {
      "task_id": 172,
      "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def count_occurance(s):\n    return s.count('std')",
      "test_content": "from llm_output import count_occurance\n\ndef check(candidate):\n    assert candidate(\"letstdlenstdporstd\") == 3\n    assert candidate(\"truststdsolensporsd\") == 1\n    assert candidate(\"makestdsostdworthit\") == 2\n    assert candidate(\"stds\") == 1\n    assert candidate(\"\") == 0\n\ncheck(count_occurance)",
      "context": "{\"function_name\": \"count_occurance\"}",
      "attempt_num": 1
    },
    {
      "task_id": 222,
      "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def check_type(test_tuple):\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != first_type:\n            return False\n    return True",
      "test_content": "from llm_output import check_type\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6) ) == True\n    assert candidate((1, 2, \"4\") ) == False\n    assert candidate((3, 2, 1, 4, 5) ) == True\n\ncheck(check_type)",
      "context": "{\"function_name\": \"check_type\"}",
      "attempt_num": 1
    },
    {
      "task_id": 224,
      "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
      "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
      "test_content": "from llm_output import count_Set_Bits\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(4) == 1\n    assert candidate(6) == 2\n\ncheck(count_Set_Bits)",
      "context": "{\"function_name\": \"count_Set_Bits\"}",
      "attempt_num": 1
    }
  ]
}