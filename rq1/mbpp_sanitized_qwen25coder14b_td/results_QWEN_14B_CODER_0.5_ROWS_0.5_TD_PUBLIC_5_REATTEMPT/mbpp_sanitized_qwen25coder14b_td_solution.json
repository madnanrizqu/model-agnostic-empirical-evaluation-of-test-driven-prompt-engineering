[
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 2,
        "solution": "===START===\n```python\ndef similar_elements(test_tup1, test_tup2):\n    # Convert both tuples to sets and find the intersection\n    return tuple(set(test_tup1) & set(test_tup2))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):\n\n### Test\nassert set(candidate((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))",
        "timestamp": "2025-10-17T17:59:27.440743",
        "response_time": "3.93",
        "context": "{\"function_name\": \"similar_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 3,
        "solution": "===START===\n```python\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):\n\n### Test\nassert candidate(2) == False\nassert candidate(10) == True",
        "timestamp": "2025-10-17T17:59:32.595324",
        "response_time": "5.15",
        "context": "{\"function_name\": \"is_not_prime\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 4,
        "solution": "===START===\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):\n\n### Test\nassert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]",
        "timestamp": "2025-10-17T17:59:34.078457",
        "response_time": "1.48",
        "context": "{\"function_name\": \"heap_queue_largest\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 6,
        "solution": "===START===\n```python\ndef is_Power_Of_Two(x):\n    # Check if x is a power of two\n    return (x & (x - 1)) == 0\n\ndef differ_by_one_bit_position(x, y):\n    # XOR the two numbers to find differing bits\n    xor_result = x ^ y\n    # Check if the result is a power of two, which means only one bit is different\n    return is_Power_Of_Two(xor_result)\n\n# Rename the function to match the signature\ndef candidate(x, y):\n    return differ_by_one_bit_position(x, y)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):\n\n### Test\nassert candidate(13,9) == True\nassert candidate(15,8) == False\nassert candidate(2,4) == False",
        "timestamp": "2025-10-17T17:59:40.160824",
        "response_time": "6.08",
        "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 7,
        "solution": "===START===\n```python\ndef find_char_long(text):\n    return set(word for word in text.split() if len(word) >= 4)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):\n\n### Test\nassert set(candidate('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])",
        "timestamp": "2025-10-17T17:59:41.976908",
        "response_time": "1.81",
        "context": "{\"function_name\": \"find_char_long\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 8,
        "solution": "===START===\ndef square_nums(nums):\n    return [num ** 2 for num in nums]\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
        "timestamp": "2025-10-17T17:59:43.210373",
        "response_time": "1.23",
        "context": "{\"function_name\": \"square_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 9,
        "solution": "===START===\n```python\ndef find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n\n\n# The function will return the length of the string if no rotation is found\n# that results in the same string, which should not happen for non-empty strings.\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):\n\n### Test\nassert candidate(\"aaaa\") == 1",
        "timestamp": "2025-10-17T17:59:47.265701",
        "response_time": "4.05",
        "context": "{\"function_name\": \"find_Rotations\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 11,
        "solution": "===START===\n```python\ndef remove_Occ(s, ch):\n    # Find the first occurrence and remove it\n    first_occ_index = s.find(ch)\n    if first_occ_index != -1:\n        s = s[:first_occ_index] + s[first_occ_index + 1:]\n    \n    # Find the last occurrence and remove it\n    last_occ_index = s.rfind(ch)\n    if last_occ_index != -1:\n        s = s[:last_occ_index] + s[last_occ_index + 1:]\n    \n    return s\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):\n\n### Test\nassert candidate(\"hello\",\"l\") == \"heo\"",
        "timestamp": "2025-10-17T17:59:52.761897",
        "response_time": "5.49",
        "context": "{\"function_name\": \"remove_Occ\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 12,
        "solution": "===START===\n```python\ndef sort_matrix(M):\n    return sorted(M, key=sum)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):\n\n### Test\nassert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
        "timestamp": "2025-10-17T17:59:54.108844",
        "response_time": "1.34",
        "context": "{\"function_name\": \"sort_matrix\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 14,
        "solution": "===START===\nimport math\n\ndef find_Volume(l, b, h):\n    # Calculate the area of the triangular base\n    base_area = 0.5 * l * b\n    # Calculate the volume of the prism\n    volume = base_area * h\n    return volume\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :\n\n### Test\nassert candidate(10,8,6) == 240",
        "timestamp": "2025-10-17T17:59:57.158408",
        "response_time": "3.05",
        "context": "{\"function_name\": \"find_Volume\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 16,
        "solution": "===START===\nimport re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):\n\n### Test\nassert candidate(\"aab_cbbbc\")==(True)",
        "timestamp": "2025-10-17T17:59:59.223509",
        "response_time": "2.06",
        "context": "{\"function_name\": \"text_lowercase_underscore\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 17,
        "solution": "===START===\ndef square_perimeter(a):\n    return 4 * a\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):\n\n### Test\nassert candidate(10)==40",
        "timestamp": "2025-10-17T18:00:00.280067",
        "response_time": "1.05",
        "context": "{\"function_name\": \"square_perimeter\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 18,
        "solution": "===START===\n```python\ndef str_to_list(string):\n    return list(string)\n\ndef remove_characters(str1, str2):\n    list1 = str_to_list(str1)\n    list2 = str_to_list(str2)\n    \n    result = [char for char in list1 if char not in list2]\n    return ''.join(result)\n\n# The function signature provided in the prompt is str_to_list, which is used to convert a string to a list.\n# The main logic is implemented in the remove_characters function.\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):\n\n### Test\nassert candidate(\"probasscurve\", \"pros\") == \"\"\"bacuve\"\"\"",
        "timestamp": "2025-10-17T18:00:05.359889",
        "response_time": "5.08",
        "context": "{\"function_name\": \"remove_dirty_chars\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 19,
        "solution": "===START===\n```python\ndef test_duplicate(arraynums):\n    return len(arraynums) != len(set(arraynums))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):\n\n### Test\nassert candidate(([1,2,3,4,5]))==False",
        "timestamp": "2025-10-17T18:00:06.886387",
        "response_time": "1.52",
        "context": "{\"function_name\": \"test_duplicate\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 20,
        "solution": "===START===\n```python\ndef is_woodall(x):\n    if x < 1:\n        return False\n    n = 1\n    while (2**n - 1) * n <= x:\n        if (2**n - 1) * n == x:\n            return True\n        n += 1\n    return False\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):\n\n### Test\nassert candidate(383) == True",
        "timestamp": "2025-10-17T18:00:10.580338",
        "response_time": "3.69",
        "context": "{\"function_name\": \"is_woodall\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 56,
        "solution": "===START===\n```python\ndef rev(num):\n    return int(str(num)[::-1])\n\ndef candidate(num):\n    return num == 2 * rev(num) - 1\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):\n\n### Test\nassert candidate(70) == False",
        "timestamp": "2025-10-17T18:00:12.656447",
        "response_time": "2.07",
        "context": "{\"function_name\": \"check\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 57,
        "solution": "===START===\nfrom typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Convert each digit to string and join them\n    max_num_str = ''.join(map(str, arr))\n    # Convert the joined string back to an integer\n    max_num = int(max_num_str)\n    return max_num\n\n# Test the function\nassert find_Max_Num([1, 2, 3]) == 321\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :\n\n### Test\nassert candidate([1,2,3]) == 321",
        "timestamp": "2025-10-17T18:00:17.696955",
        "response_time": "5.04",
        "context": "{\"function_name\": \"find_Max_Num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 58,
        "solution": "===START===\n```python\ndef opposite_Signs(x, y):\n    return (x ^ y) < 0\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):\n\n### Test\nassert candidate(1,-2) == True\nassert candidate(3,2) == False",
        "timestamp": "2025-10-17T18:00:19.293649",
        "response_time": "1.59",
        "context": "{\"function_name\": \"opposite_Signs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 59,
        "solution": "===START===\n```python\ndef is_octagonal(n):\n    return n * (3 * n - 2)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):\n\n### Test\nassert candidate(5) == 65",
        "timestamp": "2025-10-17T18:00:20.793379",
        "response_time": "1.50",
        "context": "{\"function_name\": \"is_octagonal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 61,
        "solution": "===START===\nfrom collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    prefix_sum = 0\n    sum_count = defaultdict(int)\n    sum_count[0] = 1\n    \n    for char in s:\n        prefix_sum += int(char)\n        count += sum_count[prefix_sum - len(s)]\n        sum_count[prefix_sum - len(s)] += 1\n    \n    return count\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):\n\n### Test\nassert candidate('112112') == 6",
        "timestamp": "2025-10-17T18:00:24.996913",
        "response_time": "4.20",
        "context": "{\"function_name\": \"count_Substrings\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 62,
        "solution": "===START===\n```python\ndef smallest_num(xs):\n    if not xs:\n        raise ValueError(\"The list is empty\")\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):\n\n### Test\nassert candidate([10, 20, 1, 45, 99]) == 1",
        "timestamp": "2025-10-17T18:00:27.829728",
        "response_time": "2.83",
        "context": "{\"function_name\": \"smallest_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 63,
        "solution": "===START===\n```python\ndef max_difference(test_list):\n    # Calculate the absolute difference for each pair\n    differences = [abs(a - b) for a, b in test_list]\n    # Return the maximum difference found\n    return max(differences)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):\n\n### Test\nassert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
        "timestamp": "2025-10-17T18:00:30.601585",
        "response_time": "2.76",
        "context": "{\"function_name\": \"max_difference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 64,
        "solution": "===START===\n```python\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):\n\n### Test\nassert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
        "timestamp": "2025-10-17T18:00:32.205788",
        "response_time": "1.60",
        "context": "{\"function_name\": \"subject_marks\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 65,
        "solution": "===START===\n```python\ndef recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):\n\n### Test\nassert candidate(([1, 2, [3,4],[5,6]]))==21",
        "timestamp": "2025-10-17T18:00:34.971136",
        "response_time": "2.76",
        "context": "{\"function_name\": \"recursive_list_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 66,
        "solution": "===START===\n```python\ndef pos_count(lst):\n    return sum(1 for x in lst if x > 0)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):\n\n### Test\nassert candidate([1,-2,3,-4]) == 2",
        "timestamp": "2025-10-17T18:00:36.532859",
        "response_time": "1.56",
        "context": "{\"function_name\": \"pos_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 67,
        "solution": "===START===\n```python\ndef bell_number(n):\n    # Initialize a 2D array to store Bell numbers\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # Base case: Bell(0) is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly put the value of Bell(i, 0)\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # Bell number for n is the first element of the nth row\n    return bell[n][0]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):\n\n### Test\nassert candidate(2)==2",
        "timestamp": "2025-10-17T18:00:45.380089",
        "response_time": "8.84",
        "context": "{\"function_name\": \"bell_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 68,
        "solution": "===START===\n```python\ndef is_Monotonic(A):\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        if A[i] < A[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):\n\n### Test\nassert candidate([6, 5, 4, 4]) == True",
        "timestamp": "2025-10-17T18:00:49.018874",
        "response_time": "3.64",
        "context": "{\"function_name\": \"is_Monotonic\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 69,
        "solution": "===START===\n```python\ndef is_sublist(l, s):\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):\n\n### Test\nassert candidate([2,4,3,5,7],[3,7])==False",
        "timestamp": "2025-10-17T18:00:52.609365",
        "response_time": "3.59",
        "context": "{\"function_name\": \"is_sublist\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 70,
        "solution": "===START===\n```python\ndef find_equal_tuple(Input):\n    if not Input:\n        return True\n    tuple_length = len(Input[0])\n    for t in Input:\n        if len(t) != tuple_length:\n            return False\n    return True\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):\n\n### Test\nassert candidate([(11, 22, 33), (44, 55, 66)]) == True",
        "timestamp": "2025-10-17T18:00:55.405336",
        "response_time": "2.79",
        "context": "{\"function_name\": \"get_equal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 71,
        "solution": "===START===\n```python\ndef comb_sort(nums):\n    def get_next_gap(gap):\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):\n\n### Test\nassert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
        "timestamp": "2025-10-17T18:01:01.790455",
        "response_time": "6.38",
        "context": "{\"function_name\": \"comb_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 72,
        "solution": "===START===\n```python\ndef dif_Square(n):\n    # A number can be represented as the difference of two squares if and only if it is not of the form 4k+2\n    return n % 4 != 2\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):\n\n### Test\nassert candidate(5) == True",
        "timestamp": "2025-10-17T18:01:04.472406",
        "response_time": "2.68",
        "context": "{\"function_name\": \"dif_Square\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 74,
        "solution": "===START===\n```python\ndef is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):\n\n### Test\nassert candidate([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
        "timestamp": "2025-10-17T18:01:10.473667",
        "response_time": "6.00",
        "context": "{\"function_name\": \"is_samepatterns\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 75,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int]], K: int) -> List[Tuple[int]]:\n    result = []\n    for tup in test_list:\n        if all(element % K == 0 for element in tup):\n            result.append(tup)\n    return result\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):\n\n### Test\nassert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
        "timestamp": "2025-10-17T18:01:13.869125",
        "response_time": "3.39",
        "context": "{\"function_name\": \"find_tuples\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 77,
        "solution": "===START===\n```python\ndef is_Diff(n):\n    # Convert the number to a string to easily access each digit\n    str_n = str(n)\n    \n    # Calculate the difference between the sum of digits at even and odd positions\n    even_sum = sum(int(str_n[i]) for i in range(0, len(str_n), 2))\n    odd_sum = sum(int(str_n[i]) for i in range(1, len(str_n), 2))\n    \n    # Check if the difference is divisible by 11\n    return (even_sum - odd_sum) % 11 == 0\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):\n\n### Test\nassert candidate (12345) == False",
        "timestamp": "2025-10-17T18:01:19.950015",
        "response_time": "6.08",
        "context": "{\"function_name\": \"is_Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 79,
        "solution": "===START===\n```python\ndef word_len(s):\n    return len(s) % 2 != 0\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):\n\n### Test\nassert candidate(\"Hadoop\") == False",
        "timestamp": "2025-10-17T18:01:21.428526",
        "response_time": "1.48",
        "context": "{\"function_name\": \"word_len\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 80,
        "solution": "===START===\n```python\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):\n\n### Test\nassert candidate(5) == 35",
        "timestamp": "2025-10-17T18:01:23.394305",
        "response_time": "1.96",
        "context": "{\"function_name\": \"tetrahedral_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 82,
        "solution": "===START===\nimport math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 4188.790204786391, rel_tol=0.001)",
        "timestamp": "2025-10-17T18:01:25.050546",
        "response_time": "1.65",
        "context": "{\"function_name\": \"volume_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 83,
        "solution": "===START===\n```python\ndef get_char(strr):\n    total = sum(ord(char) for char in strr)\n    return chr(total % 26 + ord('a'))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):\n\n### Test\nassert candidate(\"abc\") == \"f\"",
        "timestamp": "2025-10-17T18:01:27.142086",
        "response_time": "2.09",
        "context": "{\"function_name\": \"get_Char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 84,
        "solution": "===START===\n```python\ndef sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    \n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = 1\n    newman_conway[2] = 1\n    \n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    \n    return newman_conway[n]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):\n\n### Test\nassert candidate(10) == 6",
        "timestamp": "2025-10-17T18:01:33.158547",
        "response_time": "6.01",
        "context": "{\"function_name\": \"sequence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 85,
        "solution": "===START===\nimport math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 1256.6370614359173, rel_tol=0.001)",
        "timestamp": "2025-10-17T18:01:34.579668",
        "response_time": "1.42",
        "context": "{\"function_name\": \"surfacearea_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 86,
        "solution": "===START===\n```python\ndef centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):\n\n### Test\nassert candidate(10) == 271",
        "timestamp": "2025-10-17T18:01:36.321360",
        "response_time": "1.74",
        "context": "{\"function_name\": \"centered_hexagonal_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 87,
        "solution": "===START===\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\n### Test\nassert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={\"\"\"B\"\"\": \"\"\"Black\"\"\", \"\"\"R\"\"\": \"\"\"Red\"\"\", \"\"\"P\"\"\": \"\"\"Pink\"\"\", \"\"\"G\"\"\": \"\"\"Green\"\"\", \"\"\"W\"\"\": \"\"\"White\"\"\", \"\"\"O\"\"\": \"\"\"Orange\"\"\"}",
        "timestamp": "2025-10-17T18:01:38.776268",
        "response_time": "2.45",
        "context": "{\"function_name\": \"merge_dictionaries_three\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 88,
        "solution": "===START===\nfrom collections import defaultdict\n\ndef freq_count(list1):\n    frequency = defaultdict(int)\n    for item in list1:\n        frequency[item] += 1\n    return dict(frequency)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):\n\n### Test\nassert candidate([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})",
        "timestamp": "2025-10-17T18:01:40.931467",
        "response_time": "2.15",
        "context": "{\"function_name\": \"freq_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 89,
        "solution": "===START===\n```python\ndef closest_num(N):\n    return N - 1\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):\n\n### Test\nassert candidate(11) == 10",
        "timestamp": "2025-10-17T18:01:42.204627",
        "response_time": "1.27",
        "context": "{\"function_name\": \"closest_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 90,
        "solution": "===START===\n```python\ndef len_log(list1):\n    if not list1:\n        return 0\n    return max(len(word) for word in list1)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):\n\n### Test\nassert candidate([\"python\",\"PHP\",\"bigdata\"]) == 7",
        "timestamp": "2025-10-17T18:01:44.200259",
        "response_time": "1.99",
        "context": "{\"function_name\": \"len_log\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 91,
        "solution": "===START===\n```python\ndef find_substring(str1, sub_str):\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):\n\n### Test\nassert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
        "timestamp": "2025-10-17T18:01:46.317514",
        "response_time": "2.11",
        "context": "{\"function_name\": \"find_substring\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 92,
        "solution": "===START===\n```python\ndef is_undulating(n):\n    n_str = str(n)\n    if len(n_str) < 3:\n        return False\n    first = n_str[0]\n    second = n_str[1]\n    if first == second:\n        return False\n    for i in range(2, len(n_str)):\n        if i % 2 == 0 and n_str[i] != first:\n            return False\n        if i % 2 == 1 and n_str[i] != second:\n            return False\n    return True\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):\n\n### Test\nassert candidate(1212121) == True",
        "timestamp": "2025-10-17T18:01:51.909218",
        "response_time": "5.59",
        "context": "{\"function_name\": \"is_undulating\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 93,
        "solution": "===START===\ndef power(a, b):\n    return a ** b\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):\n\n### Test\nassert candidate(3,4) == 81",
        "timestamp": "2025-10-17T18:01:52.948603",
        "response_time": "1.03",
        "context": "{\"function_name\": \"power\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 94,
        "solution": "===START===\n```python\ndef index_minimum(test_list):\n    # Find the tuple with the smallest second value\n    min_tuple = min(test_list, key=lambda x: x[1])\n    # Return the first value of that tuple\n    return min_tuple[0]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):\n\n### Test\nassert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
        "timestamp": "2025-10-17T18:01:55.912318",
        "response_time": "2.96",
        "context": "{\"function_name\": \"index_minimum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 95,
        "solution": "===START===\ndef Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):\n\n### Test\nassert candidate([[1],[1,2]]) == 1",
        "timestamp": "2025-10-17T18:01:58.716441",
        "response_time": "2.80",
        "context": "{\"function_name\": \"Find_Min_Length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 96,
        "solution": "===START===\n```python\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):\n\n### Test\nassert candidate(15) == 4",
        "timestamp": "2025-10-17T18:02:01.286503",
        "response_time": "2.57",
        "context": "{\"function_name\": \"divisor\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 97,
        "solution": "===START===\nfrom collections import defaultdict\n\ndef frequency_lists(list1):\n    frequency_dict = defaultdict(int)\n    for sublist in list1:\n        for element in sublist:\n            frequency_dict[element] += 1\n    return dict(frequency_dict)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):\n\n### Test\nassert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
        "timestamp": "2025-10-17T18:02:03.852428",
        "response_time": "2.56",
        "context": "{\"function_name\": \"frequency_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 98,
        "solution": "===START===\nimport math\nfrom functools import reduce\n\ndef multiply_num(numbers):\n    product = reduce(lambda x, y: x * y, numbers)\n    return product / len(numbers)\n\n# Test case\ncandidate = multiply_num\nassert math.isclose(candidate((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):\n\n### Test\nassert math.isclose(candidate((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)",
        "timestamp": "2025-10-17T18:02:07.817968",
        "response_time": "3.96",
        "context": "{\"function_name\": \"multiply_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 99,
        "solution": "===START===\ndef decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):\n\n### Test\nassert candidate(8) == '1000'",
        "timestamp": "2025-10-17T18:02:10.648448",
        "response_time": "2.83",
        "context": "{\"function_name\": \"decimal_to_binary\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 100,
        "solution": "===START===\n```python\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n\n    return num\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):\n\n### Test\nassert candidate(99)==101",
        "timestamp": "2025-10-17T18:02:13.579547",
        "response_time": "2.93",
        "context": "{\"function_name\": \"next_smallest_palindrome\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 101,
        "solution": "===START===\n```python\ndef kth_element(arr, k):\n    return arr[k - 1]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):\n\n### Test\nassert candidate([12,3,5,7,19], 2) == 3",
        "timestamp": "2025-10-17T18:02:14.991735",
        "response_time": "1.41",
        "context": "{\"function_name\": \"kth_element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 102,
        "solution": "===START===\n```python\ndef snake_to_camel(word):\n    return ''.join(word.title().split('_'))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):\n\n### Test\nassert candidate('python_program')=='PythonProgram'",
        "timestamp": "2025-10-17T18:02:16.447718",
        "response_time": "1.45",
        "context": "{\"function_name\": \"snake_to_camel\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 103,
        "solution": "===START===\n```python\ndef eulerian_num(n, m):\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):\n\n### Test\nassert candidate(3, 1) == 4",
        "timestamp": "2025-10-17T18:02:20.465399",
        "response_time": "4.01",
        "context": "{\"function_name\": \"eulerian_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 104,
        "solution": "===START===\ndef sort_sublists(input_list):\n    return [sorted(sublist) for sublist in input_list]\n\n# Example usage:\n# sorted_lists = sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n# print(sorted_lists)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):\n\n### Test\nassert candidate(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[[\"\"\"green\"\"\", \"\"\"orange\"\"\"], [\"\"\"black\"\"\", \"\"\"white\"\"\"], [\"\"\"black\"\"\", \"\"\"orange\"\"\", \"\"\"white\"\"\"]]",
        "timestamp": "2025-10-17T18:02:23.799597",
        "response_time": "3.33",
        "context": "{\"function_name\": \"sort_sublists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 105,
        "solution": "===START===\n```python\ndef count(lst):\n    return sum(1 for item in lst if item is True)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):\n\n### Test\nassert candidate([True,False,True]) == 2",
        "timestamp": "2025-10-17T18:02:25.294317",
        "response_time": "1.49",
        "context": "{\"function_name\": \"count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 106,
        "solution": "===START===\n```python\ndef add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):\n\n### Test\nassert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
        "timestamp": "2025-10-17T18:02:26.900224",
        "response_time": "1.60",
        "context": "{\"function_name\": \"add_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 108,
        "solution": "===START===\n```python\ndef merge_sorted_list(num1, num2, num3):\n    # Combine all three lists\n    combined = num1 + num2 + num3\n    # Sort the combined list\n    combined.sort()\n    return combined\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):\n\n### Test\nassert candidate([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
        "timestamp": "2025-10-17T18:02:29.662452",
        "response_time": "2.76",
        "context": "{\"function_name\": \"merge_sorted_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 109,
        "solution": "===START===\nfrom collections import deque\n\ndef odd_Equivalent(s, n):\n    count = 0\n    binary_str = deque(s)\n    \n    for _ in range(n):\n        binary_str.rotate(1)\n        rotated_str = ''.join(binary_str)\n        if int(rotated_str, 2) % 2 == 1:\n            count += 1\n    \n    return count\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):\n\n### Test\nassert candidate(\"011001\",6) == 3",
        "timestamp": "2025-10-17T18:02:33.538818",
        "response_time": "3.87",
        "context": "{\"function_name\": \"odd_Equivalent\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 111,
        "solution": "===START===\nfrom typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    \n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    \n    return list(common_elements)\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):\n\n### Test\nassert set(candidate([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])",
        "timestamp": "2025-10-17T18:02:36.927705",
        "response_time": "3.39",
        "context": "{\"function_name\": \"common_in_nested_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 113,
        "solution": "===START===\n```python\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):\n\n### Test\nassert candidate(\"python\")==False",
        "timestamp": "2025-10-17T18:02:38.749226",
        "response_time": "1.82",
        "context": "{\"function_name\": \"check_integer\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 115,
        "solution": "===START===\n```python\ndef empty_dit(list1):\n    return all(not d for d in list1)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):\n\n### Test\nassert candidate([{},{},{}])==True",
        "timestamp": "2025-10-17T18:02:40.328569",
        "response_time": "1.58",
        "context": "{\"function_name\": \"empty_dit\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 116,
        "solution": "===START===\n```python\ndef tuple_to_int(nums):\n    return int(''.join(map(str, nums)))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):\n\n### Test\nassert candidate((1,2,3))==123",
        "timestamp": "2025-10-17T18:02:41.850300",
        "response_time": "1.52",
        "context": "{\"function_name\": \"tuple_to_int\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 117,
        "solution": "===START===\n```python\ndef list_to_float(test_list):\n    result = []\n    for sublist in test_list:\n        converted_sublist = []\n        for element in sublist:\n            try:\n                converted_sublist.append(float(element))\n            except ValueError:\n                converted_sublist.append(element)\n        result.append(tuple(converted_sublist))\n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):\n\n### Test\nassert candidate( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]",
        "timestamp": "2025-10-17T18:02:45.544332",
        "response_time": "3.69",
        "context": "{\"function_name\": \"list_to_float\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 118,
        "solution": "===START===\ndef string_to_list(string):\n    return string.split()\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):\n\n### Test\nassert candidate(\"python programming\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\"]",
        "timestamp": "2025-10-17T18:02:46.564928",
        "response_time": "1.02",
        "context": "{\"function_name\": \"string_to_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 119,
        "solution": "===START===\n```python\ndef search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Ensure mid is even for comparison\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Compare pairs\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return arr[left]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):\n\n### Test\nassert candidate([1,1,2,2,3]) == 3",
        "timestamp": "2025-10-17T18:02:51.865416",
        "response_time": "5.30",
        "context": "{\"function_name\": \"search\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 120,
        "solution": "===START===\n```python\ndef max_product_tuple(list1):\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):\n\n### Test\nassert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
        "timestamp": "2025-10-17T18:02:54.720321",
        "response_time": "2.85",
        "context": "{\"function_name\": \"max_product_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 123,
        "solution": "===START===\nfrom typing import List\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\"Helper function to calculate the sum of proper divisors of n.\"\"\"\n    divisors_sum = 1  # 1 is a proper divisor of every number\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit: int) -> int:\n    \"\"\"Function to sum all amicable numbers from 1 to the specified limit.\"\"\"\n    amicable_sum = 0\n    visited = set()\n    \n    for num in range(2, limit + 1):\n        if num in visited:\n            continue\n        \n        partner = sum_of_divisors(num)\n        if partner != num and partner <= limit and sum_of_divisors(partner) == num:\n            amicable_sum += num + partner\n            visited.add(partner)\n    \n    return amicable_sum\n\n# Example usage:\n# print(amicable_numbers_sum(999))  # Output should be 504\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):\n\n### Test\nassert candidate(999)==504",
        "timestamp": "2025-10-17T18:03:06.310842",
        "response_time": "11.59",
        "context": "{\"function_name\": \"amicable_numbers_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 124,
        "solution": "===START===\nimport cmath\nimport math\n\ndef angle_complex(a, b):\n    return cmath.phase(complex(a, b))\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):\n\n### Test\nassert math.isclose(candidate(0,1j), 1.5707963267948966, rel_tol=0.001)",
        "timestamp": "2025-10-17T18:03:07.936024",
        "response_time": "1.62",
        "context": "{\"function_name\": \"angle_complex\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 125,
        "solution": "===START===\n```python\ndef find_length(string):\n    max_diff = 0\n    current_diff = 0\n    min_diff = 0\n    \n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        \n        if current_diff < min_diff:\n            min_diff = current_diff\n        \n        max_diff = max(max_diff, current_diff - min_diff)\n    \n    return max_diff\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):\n\n### Test\nassert candidate(\"11000010001\") == 6",
        "timestamp": "2025-10-17T18:03:14.603496",
        "response_time": "6.66",
        "context": "{\"function_name\": \"find_length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 126,
        "solution": "===START===\n```python\ndef sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    common_divisor_sum = sum_of_divisors(gcd(a, b))\n    return common_divisor_sum\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):\n\n### Test\nassert candidate(10,15) == 6",
        "timestamp": "2025-10-17T18:03:22.944041",
        "response_time": "8.34",
        "context": "{\"function_name\": \"sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 127,
        "solution": "===START===\ndef multiply_int(x, y):\n    return x * y\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):\n\n### Test\nassert candidate(10,20)==200",
        "timestamp": "2025-10-17T18:03:24.224219",
        "response_time": "1.28",
        "context": "{\"function_name\": \"multiply_int\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 128,
        "solution": "===START===\n```python\ndef long_words(n, str):\n    words = str.split()\n    return [word for word in words if len(word) > n]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):\n\n### Test\nassert candidate(3,\"python is a programming language\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\",\"\"\"language\"\"\"]",
        "timestamp": "2025-10-17T18:03:26.373055",
        "response_time": "2.15",
        "context": "{\"function_name\": \"long_words\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 129,
        "solution": "===START===\n```python\ndef magic_square_test(my_matrix):\n    n = len(my_matrix)\n    if n == 0:\n        return False\n    \n    # Calculate the sum of the first row to use as the magic sum\n    magic_sum = sum(my_matrix[0])\n    \n    # Check sums of all rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check sums of all columns\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check sum of the main diagonal\n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check sum of the secondary diagonal\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):\n\n### Test\nassert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
        "timestamp": "2025-10-17T18:03:35.517997",
        "response_time": "9.14",
        "context": "{\"function_name\": \"magic_square_test\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 130,
        "solution": "===START===\nfrom collections import Counter\n\ndef max_occurrences(nums):\n    count = Counter(nums)\n    max_freq = max(count.values())\n    for num in nums:\n        if count[num] == max_freq:\n            return num\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):\n\n### Test\nassert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2",
        "timestamp": "2025-10-17T18:03:38.045318",
        "response_time": "2.52",
        "context": "{\"function_name\": \"max_occurrences\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 131,
        "solution": "===START===\n```python\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str_list) - 1\n    \n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n    \n    return ''.join(str_list)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):\n\n### Test\nassert candidate(\"Python\") == \"Python\"",
        "timestamp": "2025-10-17T18:03:44.179731",
        "response_time": "6.13",
        "context": "{\"function_name\": \"reverse_vowels\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 132,
        "solution": "===START===\n```python\ndef tup_string(tup1):\n    return ''.join(tup1)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):\n\n### Test\nassert candidate((\"\"\"e\"\"\", \"\"\"x\"\"\", \"\"\"e\"\"\", \"\"\"r\"\"\", \"\"\"c\"\"\", \"\"\"i\"\"\", \"\"\"s\"\"\", \"\"\"e\"\"\", \"\"\"s\"\"\"))==(\"exercises\")",
        "timestamp": "2025-10-17T18:03:45.726485",
        "response_time": "1.54",
        "context": "{\"function_name\": \"tup_string\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 133,
        "solution": "===START===\n```python\ndef sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):\n\n### Test\nassert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
        "timestamp": "2025-10-17T18:03:47.524821",
        "response_time": "1.79",
        "context": "{\"function_name\": \"sum_negativenum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 135,
        "solution": "===START===\n```python\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):\n\n### Test\nassert candidate(10) == 190",
        "timestamp": "2025-10-17T18:03:49.210923",
        "response_time": "1.68",
        "context": "{\"function_name\": \"hexagonal_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 137,
        "solution": "===START===\nimport math\n\ndef zero_count(nums):\n    if not nums:\n        return 0.0\n    \n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    \n    if non_zero_count == 0:\n        return float('inf')\n    \n    return zero_count / non_zero_count\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):\n\n### Test\nassert math.isclose(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)",
        "timestamp": "2025-10-17T18:03:53.132988",
        "response_time": "3.92",
        "context": "{\"function_name\": \"zero_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 138,
        "solution": "===START===\n```python\ndef is_Sum_Of_Powers_Of_Two(n):\n    # A number can be represented as a sum of non-zero powers of 2\n    # if and only if it has no consecutive zeros in its binary representation.\n    # This is equivalent to checking if n & (n - 1) is zero.\n    return n > 0 and (n & (n - 1)) == 0\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):\n\n### Test\nassert candidate(10) == True",
        "timestamp": "2025-10-17T18:03:57.520431",
        "response_time": "4.38",
        "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 139,
        "solution": "===START===\nimport math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):\n\n### Test\nassert math.isclose(candidate(10), 62.830000000000005, rel_tol=0.001)",
        "timestamp": "2025-10-17T18:03:59.002632",
        "response_time": "1.48",
        "context": "{\"function_name\": \"circle_circumference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 140,
        "solution": "===START===\n```python\ndef extract_singly(test_list):\n    result = set()\n    for sublist in test_list:\n        result.update(sublist)\n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):\n\n### Test\nassert set(candidate([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])",
        "timestamp": "2025-10-17T18:04:01.116079",
        "response_time": "2.11",
        "context": "{\"function_name\": \"extract_singly\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 141,
        "solution": "===START===\n```python\ndef pancake_sort(nums):\n    def flip(sublist, k):\n        start = 0\n        while start < k:\n            sublist[start], sublist[k] = sublist[k], sublist[start]\n            start += 1\n            k -= 1\n\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = 0\n        for i in range(1, size):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        if max_index != size - 1:\n            if max_index != 0:\n                flip(nums, max_index)\n            flip(nums, size - 1)\n\n    return nums\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):\n\n### Test\nassert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
        "timestamp": "2025-10-17T18:04:08.086170",
        "response_time": "6.97",
        "context": "{\"function_name\": \"pancake_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 142,
        "solution": "===START===\n```python\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):\n\n### Test\nassert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
        "timestamp": "2025-10-17T18:04:11.635723",
        "response_time": "3.55",
        "context": "{\"function_name\": \"count_samepair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 143,
        "solution": "===START===\n```python\ndef find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):\n\n### Test\nassert candidate(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
        "timestamp": "2025-10-17T18:04:13.946969",
        "response_time": "2.31",
        "context": "{\"function_name\": \"find_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 145,
        "solution": "===START===\n```python\ndef max_Abs_Diff(arr):\n    if not arr:\n        return 0\n    min_val = min(arr)\n    max_val = max(arr)\n    return max_val - min_val\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):\n\n### Test\nassert candidate((2,1,5,3)) == 4",
        "timestamp": "2025-10-17T18:04:16.425873",
        "response_time": "2.48",
        "context": "{\"function_name\": \"max_Abs_Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 160,
        "solution": "===START===\nfrom math import gcd\n\ndef find_solution(a, b, n):\n    if n % gcd(a, b) != 0:\n        return None\n    \n    # Extended Euclidean Algorithm to find x and y such that ax + by = gcd(a, b)\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return gcd, x, y\n    \n    gcd_ab, x, y = extended_gcd(a, b)\n    scale = n // gcd_ab\n    return (x * scale, y * scale)\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):\n\n### Test\nassert candidate(2, 3, 7) == (2, 1)",
        "timestamp": "2025-10-17T18:04:24.079073",
        "response_time": "7.64",
        "context": "{\"function_name\": \"find_solution\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 161,
        "solution": "===START===\ndef remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]",
        "timestamp": "2025-10-17T18:04:25.836284",
        "response_time": "1.75",
        "context": "{\"function_name\": \"remove_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 162,
        "solution": "===START===\n```python\ndef sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):\n\n### Test\nassert candidate(6) == 12",
        "timestamp": "2025-10-17T18:04:28.360422",
        "response_time": "2.52",
        "context": "{\"function_name\": \"sum_series\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 163,
        "solution": "===START===\nimport math\n\ndef area_polygon(s, l):\n    # Calculate the area of a regular polygon\n    area = (s * l**2) / (4 * math.tan(math.pi / s))\n    return area\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):\n\n### Test\nassert math.isclose(candidate(4, 20), 400., rel_tol=0.001)",
        "timestamp": "2025-10-17T18:04:31.084066",
        "response_time": "2.72",
        "context": "{\"function_name\": \"area_polygon\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 164,
        "solution": "===START===\nfrom typing import List\n\ndef div_sum(n: int) -> int:\n    \"\"\"Calculate the sum of the divisors of n.\"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\ndef are_divisor_sums_equal(a: int, b: int) -> bool:\n    \"\"\"Determine if the sum of the divisors of two integers are the same.\"\"\"\n    return div_sum(a) == div_sum(b)\n\n# The function signature provided in the prompt is for div_sum, not the main function.\n# Therefore, I've created a new function are_divisor_sums_equal to satisfy the prompt.\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):\n\n### Test\nassert candidate(36, 57) == False",
        "timestamp": "2025-10-17T18:04:39.539347",
        "response_time": "8.45",
        "context": "{\"function_name\": \"are_equivalent\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 165,
        "solution": "===START===\n```python\ndef count_char_position(str1):\n    count = 0\n    for i, char in enumerate(str1):\n        if (char.lower() == chr(ord('a') + i)):\n            count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):\n\n### Test\nassert candidate(\"xbcefg\") == 2",
        "timestamp": "2025-10-17T18:04:42.434330",
        "response_time": "2.89",
        "context": "{\"function_name\": \"count_char_position\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 166,
        "solution": "===START===\n```python\ndef find_even_pair(A):\n    even_count = 0\n    odd_count = 0\n    \n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Even XOR Even = Even\n    # Odd XOR Odd = Even\n    even_pairs = even_count * (even_count - 1) // 2\n    odd_pairs = odd_count * (odd_count - 1) // 2\n    \n    return even_pairs + odd_pairs\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):\n\n### Test\nassert candidate([5, 4, 7, 2, 1]) == 4",
        "timestamp": "2025-10-17T18:04:48.194315",
        "response_time": "5.76",
        "context": "{\"function_name\": \"find_even_pair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 167,
        "solution": "===START===\nimport math\n\ndef next_power_of_2(n):\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):\n\n### Test\nassert candidate(0) == 1",
        "timestamp": "2025-10-17T18:04:50.376401",
        "response_time": "2.18",
        "context": "{\"function_name\": \"next_power_of_2\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 168,
        "solution": "===START===\n```python\ndef frequency(a, x):\n    return a.count(x)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):\n\n### Test\nassert candidate([1,2,3], 4) == 0",
        "timestamp": "2025-10-17T18:04:51.716639",
        "response_time": "1.34",
        "context": "{\"function_name\": \"frequency\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 170,
        "solution": "===START===\n```python\ndef sum_range_list(list1, m, n):\n    return sum(list1[m:n+1])\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):\n\n### Test\nassert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29",
        "timestamp": "2025-10-17T18:04:53.413354",
        "response_time": "1.69",
        "context": "{\"function_name\": \"sum_range_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 171,
        "solution": "===START===\nimport math\n\ndef perimeter_pentagon(a):\n    return 5 * a\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):\n\n### Test\nassert candidate(5) == 25",
        "timestamp": "2025-10-17T18:04:56.728339",
        "response_time": "3.31",
        "context": "{\"function_name\": \"perimeter_pentagon\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 172,
        "solution": "===START===\n```python\ndef count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):\n\n### Test\nassert candidate(\"letstdlenstdporstd\") == 3\nassert candidate(\"truststdsolensporsd\") == 1",
        "timestamp": "2025-10-17T18:04:59.603889",
        "response_time": "2.87",
        "context": "{\"function_name\": \"count_occurance\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 222,
        "solution": "===START===\n```python\ndef check_type(test_tuple):\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != first_type:\n            return False\n    return True\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):\n\n### Test\nassert candidate((5, 6, 7, 3, 5, 6) ) == True",
        "timestamp": "2025-10-17T18:05:02.683540",
        "response_time": "3.08",
        "context": "{\"function_name\": \"check_type\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 223,
        "solution": "===START===\n```python\ndef is_majority(arr, n, x):\n    # Find the first occurrence of x\n    first_occurrence = binary_search_first(arr, 0, n - 1, x)\n    \n    # If x is not present in the array, return False\n    if first_occurrence == -1:\n        return False\n    \n    # Calculate the index of the last occurrence of x\n    last_occurrence = first_occurrence + (n // 2)\n    \n    # Check if the last occurrence is within bounds and is x\n    if last_occurrence < n and arr[last_occurrence] == x:\n        return True\n    \n    return False\n\ndef binary_search_first(arr, low, high, x):\n    while low <= high:\n        mid = low + (high - low) // 2\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):\n\n### Test\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
        "timestamp": "2025-10-17T18:05:14.168681",
        "response_time": "11.48",
        "context": "{\"function_name\": \"binary_search\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 224,
        "solution": "===START===\n```python\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):\n\n### Test\nassert candidate(2) == 1",
        "timestamp": "2025-10-17T18:05:16.456947",
        "response_time": "2.28",
        "context": "{\"function_name\": \"count_Set_Bits\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 226,
        "solution": "===START===\ndef odd_values_string(str):\n    return str[::2]\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to remove the characters which have odd index values of a given string.\n\n### Signature\ndef odd_values_string(str):\n\n### Test\nassert candidate('abcdef') == 'ace'\nassert candidate('python') == 'pto'",
        "timestamp": "2025-10-17T18:05:17.581432",
        "response_time": "1.12",
        "context": "{\"function_name\": \"odd_values_string\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 227,
        "solution": "===START===\n```python\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find minimum of three numbers.\n\n### Signature\ndef min_of_three(a,b,c):\n\n### Test\nassert candidate(10,20,0)==0",
        "timestamp": "2025-10-17T18:05:19.266791",
        "response_time": "1.68",
        "context": "{\"function_name\": \"min_of_three\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 228,
        "solution": "===START===\n```python\ndef all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a number with bits set in the range [l, r]\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    # Check if all bits in the range [l, r] are set in n\n    return (n & mask) == mask\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether all the bits are unset in the given range or not.\n\n### Signature\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n\n### Test\nassert candidate(4,1,2) == True",
        "timestamp": "2025-10-17T18:05:23.957347",
        "response_time": "4.68",
        "context": "{\"function_name\": \"all_Bits_Set_In_The_Given_Range\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 229,
        "solution": "===START===\n```python\ndef re_arrange_array(arr, n):\n    # Separate negative and non-negative elements\n    negative = [arr[i] for i in range(n) if arr[i] < 0]\n    non_negative = [arr[i] for i in range(n) if arr[i] >= 0]\n    \n    # Combine them back into the original array\n    arr[:n] = negative + non_negative\n    return arr\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n### Signature\ndef re_arrange_array(arr, n):\n\n### Test\nassert candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
        "timestamp": "2025-10-17T18:05:28.665176",
        "response_time": "4.70",
        "context": "{\"function_name\": \"re_arrange_array\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 230,
        "solution": "===START===\n```python\ndef replace_blank(str1, char):\n    return str1.replace(\" \", char)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n### Signature\ndef replace_blank(str1,char):\n\n### Test\nassert candidate(\"hello people\",\"\"\"@\"\"\")==(\"hello@people\")",
        "timestamp": "2025-10-17T18:05:30.281021",
        "response_time": "1.61",
        "context": "{\"function_name\": \"replace_blank\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 232,
        "solution": "===START===\nfrom heapq import nlargest\n\ndef larg_nnum(list1, n):\n    return nlargest(n, list1)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n### Signature\ndef larg_nnum(list1,n):\n\n### Test\nassert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])",
        "timestamp": "2025-10-17T18:05:31.874046",
        "response_time": "1.59",
        "context": "{\"function_name\": \"larg_nnum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 233,
        "solution": "===START===\nimport math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cylinder.\n\n### Signature\ndef lateralsuface_cylinder(r,h):\n\n### Test\nassert math.isclose(candidate(10,5), 314.15000000000003, rel_tol=0.001)",
        "timestamp": "2025-10-17T18:05:34.579994",
        "response_time": "2.70",
        "context": "{\"function_name\": \"lateralsuface_cylinder\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 234,
        "solution": "===START===\ndef volume_cube(l):\n    return l ** 3\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the volume of a cube given its side length.\n\n### Signature\ndef volume_cube(l):\n\n### Test\nassert candidate(3)==27",
        "timestamp": "2025-10-17T18:05:36.626135",
        "response_time": "2.04",
        "context": "{\"function_name\": \"volume_cube\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 235,
        "solution": "===START===\n```python\ndef even_bit_set_number(n):\n    # Create a mask with all even bits set to 1\n    mask = 0\n    for i in range(0, 32, 2):  # Assuming a 32-bit integer\n        mask |= (1 << i)\n    \n    # Set the even bits of n using the mask\n    return n | mask\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to set all even bits of a given number.\n\n### Signature\ndef even_bit_set_number(n):\n\n### Test\nassert candidate(10) == 10",
        "timestamp": "2025-10-17T18:05:40.880482",
        "response_time": "4.25",
        "context": "{\"function_name\": \"even_bit_set_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 237,
        "solution": "===START===\nfrom collections import defaultdict\n\ndef check_occurences(test_list):\n    occurence_dict = defaultdict(int)\n    for item in test_list:\n        occurence_dict[item] += 1\n    return dict(occurence_dict)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n### Signature\ndef check_occurences(test_list):\n\n### Test\nassert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
        "timestamp": "2025-10-17T18:05:43.507650",
        "response_time": "2.62",
        "context": "{\"function_name\": \"check_occurences\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 238,
        "solution": "===START===\n```python\ndef number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of non-empty substrings of a given string.\n\n### Signature\ndef number_of_substrings(str):\n\n### Test\nassert candidate(\"abc\") == 6",
        "timestamp": "2025-10-17T18:05:45.440285",
        "response_time": "1.93",
        "context": "{\"function_name\": \"number_of_substrings\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 239,
        "solution": "===START===\n```python\ndef get_total_number_of_sequences(m, n):\n    def count_sequences(current, length):\n        if length == n:\n            return 1\n        total = 0\n        for next_value in range(current * 2, m + 1):\n            total += count_sequences(next_value, length + 1)\n        return total\n\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, 1)\n    \n    return total_sequences\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n### Signature\ndef get_total_number_of_sequences(m,n):\n\n### Test\nassert candidate(10, 4) == 4",
        "timestamp": "2025-10-17T18:05:52.481950",
        "response_time": "7.04",
        "context": "{\"function_name\": \"get_total_number_of_sequences\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 240,
        "solution": "===START===\ndef replace_list(list1, list2):\n    if list1:\n        list1[-1:] = list2\n    return list1\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\n### Signature\ndef replace_list(list1,list2):\n\n### Test\nassert candidate([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
        "timestamp": "2025-10-17T18:05:54.475698",
        "response_time": "1.99",
        "context": "{\"function_name\": \"replace_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 242,
        "solution": "===START===\ndef count_charac(str1):\n    return len(str1)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the total number of characters in a string.\n\n### Signature\ndef count_charac(str1):\n\n### Test\nassert candidate(\"python programming\")==18",
        "timestamp": "2025-10-17T18:05:55.748753",
        "response_time": "1.27",
        "context": "{\"function_name\": \"count_charac\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 244,
        "solution": "===START===\nimport math\n\ndef next_Perfect_Square(N):\n    root = math.ceil(math.sqrt(N))\n    return root * root\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the next perfect square greater than a given number.\n\n### Signature\ndef next_Perfect_Square(N):\n\n### Test\nassert candidate(35) == 36",
        "timestamp": "2025-10-17T18:05:57.986692",
        "response_time": "2.23",
        "context": "{\"function_name\": \"next_Perfect_Square\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 245,
        "solution": "===START===\n```python\ndef max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize two arrays to store the maximum sum of increasing and decreasing subsequences\n    inc = [0] * n\n    dec = [0] * n\n\n    # Fill the inc array\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n\n    # Fill the dec array\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n\n    # Find the maximum sum of bitonic subsequence\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n\n    return max_sum_bitonic\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\n### Signature\ndef max_sum(arr):\n\n### Test\nassert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194",
        "timestamp": "2025-10-17T18:06:10.019997",
        "response_time": "12.03",
        "context": "{\"function_name\": \"max_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 246,
        "solution": "```python\nimport math\n\n###START###\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number\")\n    if number == 0:\n        return 0\n    \n    guess = number / 2.0\n    while True:\n        new_guess = (guess + number / guess) / 2.0\n        if math.isclose(guess, new_guess, rel_tol=1e-10):\n            return new_guess\n        guess = new_guess\n###END###\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function for computing square roots using the babylonian method.\n\n### Signature\ndef babylonian_squareroot(number):\n\n### Test\nassert math.isclose(candidate(10), 3.162277660168379, rel_tol=0.001)",
        "timestamp": "2025-10-17T18:06:16.844439",
        "response_time": "6.82",
        "context": "{\"function_name\": \"babylonian_squareroot\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 247,
        "solution": "===START===\n```python\ndef lps(str):\n    n = len(str)\n    L = [[0 for x in range(n)] for y in range(n)]\n    \n    for i in range(n):\n        L[i][i] = 1\n    \n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j])\n    \n    return L[0][n - 1]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n\n### Signature\ndef lps(str):\n\n### Test\nassert candidate(\"TENS FOR TENS\") == 5",
        "timestamp": "2025-10-17T18:06:25.543151",
        "response_time": "8.69",
        "context": "{\"function_name\": \"lps\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 248,
        "solution": "```python\nimport math\n\n###START###\ndef harmonic_sum(n):\n    if n <= 1:\n        return 0\n    else:\n        return 1 / (n - 1) + harmonic_sum(n - 1)\n###END###\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in an integer n and calculates the harmonic sum of n-1.\n\n### Signature\ndef harmonic_sum(n):\n\n### Test\nassert math.isclose(candidate(7), 2.5928571428571425, rel_tol=0.001)",
        "timestamp": "2025-10-17T18:06:28.139830",
        "response_time": "2.59",
        "context": "{\"function_name\": \"harmonic_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 249,
        "solution": "===START===\n```python\ndef intersection_array(array_nums1, array_nums2):\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return sorted(list(intersection))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the intersection of two arrays.\n\n### Signature\ndef intersection_array(array_nums1,array_nums2):\n\n### Test\nassert candidate([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
        "timestamp": "2025-10-17T18:06:30.942180",
        "response_time": "2.80",
        "context": "{\"function_name\": \"intersection_array\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 250,
        "solution": "===START===\n```python\ndef count_X(tup, x):\n    return tup.count(x)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\n### Signature\ndef count_X(tup, x):\n\n### Test\nassert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
        "timestamp": "2025-10-17T18:06:32.338724",
        "response_time": "1.39",
        "context": "{\"function_name\": \"count_X\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 251,
        "solution": "===START===\n```python\ndef insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\n### Signature\ndef insert_element(list,element):\n\n### Test\nassert candidate(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']",
        "timestamp": "2025-10-17T18:06:34.474227",
        "response_time": "2.13",
        "context": "{\"function_name\": \"insert_element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 252,
        "solution": "===START===\nimport cmath\n\ndef convert(numbers):\n    polar_coordinates = []\n    for number in numbers:\n        polar = cmath.polar(number)\n        polar_coordinates.append(polar)\n    return polar_coordinates\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to convert complex numbers to polar coordinates.\n\n### Signature\ndef convert(numbers):\n\n### Test\nassert candidate(1) == (1.0, 0.0)",
        "timestamp": "2025-10-17T18:06:36.793652",
        "response_time": "2.32",
        "context": "{\"function_name\": \"convert\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 253,
        "solution": "===START===\n```python\ndef count_integer(list1):\n    return sum(isinstance(x, int) for x in list1)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function that returns the number of integer elements in a given list.\n\n### Signature\ndef count_integer(list1):\n\n### Test\nassert candidate([1,2,'abc',1.2]) == 2",
        "timestamp": "2025-10-17T18:06:38.391581",
        "response_time": "1.59",
        "context": "{\"function_name\": \"count_integer\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 255,
        "solution": "===START===\nfrom itertools import product\n\ndef combinations_colors(l, n):\n    return list(product(l, repeat=n))\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\n### Signature\ndef combinations_colors(l, n):\n\n### Test\nassert candidate( [\"Red\",\"Green\",\"Blue\"],1)==[(\"\"\"Red\"\"\",), (\"\"\"Green\"\"\",), (\"\"\"Blue\"\"\",)]",
        "timestamp": "2025-10-17T18:06:39.823338",
        "response_time": "1.43",
        "context": "{\"function_name\": \"combinations_colors\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 256,
        "solution": "===START===\n```python\nimport math\n\ndef count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n### Signature\ndef count_Primes_nums(n):\n\n### Test\nassert candidate(5) == 2",
        "timestamp": "2025-10-17T18:06:44.872439",
        "response_time": "5.04",
        "context": "{\"function_name\": \"count_Primes_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 257,
        "solution": "===START===\n```python\ndef swap_numbers(a, b):\n    return (b, a)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\n### Signature\ndef swap_numbers(a,b):\n\n### Test\nassert candidate(10,20)==(20,10)",
        "timestamp": "2025-10-17T18:06:46.322334",
        "response_time": "1.45",
        "context": "{\"function_name\": \"swap_numbers\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 259,
        "solution": "===START===\n```python\ndef maximize_elements(test_tup1, test_tup2):\n    res = tuple(max(ele1, ele2) for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to maximize the given two tuples.\n\n### Signature\ndef maximize_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
        "timestamp": "2025-10-17T18:06:49.138390",
        "response_time": "2.81",
        "context": "{\"function_name\": \"maximize_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 260,
        "solution": "===START===\nimport math\n\ndef newman_prime(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    count = 0\n    k = 1\n    while True:\n        newman_num = (2 ** k) - 1\n        if is_prime(newman_num):\n            count += 1\n            if count == n:\n                return newman_num\n        k += 1\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n### Signature\ndef newman_prime(n):\n\n### Test\nassert candidate(3) == 7",
        "timestamp": "2025-10-17T18:06:57.296347",
        "response_time": "8.15",
        "context": "{\"function_name\": \"newman_prime\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 261,
        "solution": "===START===\nfrom typing import Tuple\n\ndef division_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    return tuple(a // b for a, b in zip(test_tup1, test_tup2))\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n### Signature\ndef division_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
        "timestamp": "2025-10-17T18:07:00.064284",
        "response_time": "2.76",
        "context": "{\"function_name\": \"division_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 262,
        "solution": "===START===\ndef split_two_parts(list1, L):\n    return (list1[:L], list1[L:])\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\n### Signature\ndef split_two_parts(list1, L):\n\n### Test\nassert candidate([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
        "timestamp": "2025-10-17T18:07:01.506380",
        "response_time": "1.44",
        "context": "{\"function_name\": \"split_two_parts\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 264,
        "solution": "===START===\n```python\ndef dog_age(h_age):\n    if h_age < 0:\n        exit()\n    elif h_age <= 2:\n        d_age = h_age * 10.5\n    else:\n        d_age = 21 + (h_age - 2) * 4\n    return d_age\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate a dog's age in dog's years.\n\n### Signature\ndef dog_age(h_age):\n\n### Test\nassert candidate(12)==61",
        "timestamp": "2025-10-17T18:07:05.257860",
        "response_time": "3.75",
        "context": "{\"function_name\": \"dog_age\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 265,
        "solution": "===START===\n```python\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\n### Signature\ndef list_split(S, step):\n\n### Test\nassert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]",
        "timestamp": "2025-10-17T18:07:06.941930",
        "response_time": "1.68",
        "context": "{\"function_name\": \"list_split\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 266,
        "solution": "===START===\n```python\ndef lateralsurface_cube(l):\n    return 4 * l * l\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cube given its side length.\n\n### Signature\ndef lateralsurface_cube(l):\n\n### Test\nassert candidate(5)==100",
        "timestamp": "2025-10-17T18:07:08.366047",
        "response_time": "1.42",
        "context": "{\"function_name\": \"lateralsurface_cube\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 267,
        "solution": "===START===\n```python\ndef square_Sum(n):\n    total = 0\n    for i in range(n):\n        odd_number = 2 * i + 1\n        total += odd_number ** 2\n    return total\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n### Signature\ndef square_Sum(n):\n\n### Test\nassert candidate(2) == 10",
        "timestamp": "2025-10-17T18:07:11.040274",
        "response_time": "2.67",
        "context": "{\"function_name\": \"square_Sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 268,
        "solution": "===START===\n```python\ndef find_star_num(n):\n    return 6 * n * (n - 1) + 1\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the n'th star number.\n\n### Signature\ndef find_star_num(n):\n\n### Test\nassert candidate(3) == 37",
        "timestamp": "2025-10-17T18:07:12.798262",
        "response_time": "1.75",
        "context": "{\"function_name\": \"find_star_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 269,
        "solution": "===START===\n```python\ndef ascii_value(k):\n    return ord(k)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the ascii value of a character.\n\n### Signature\ndef ascii_value(k):\n\n### Test\nassert candidate('A')==65",
        "timestamp": "2025-10-17T18:07:13.947247",
        "response_time": "1.15",
        "context": "{\"function_name\": \"ascii_value\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 270,
        "solution": "===START===\n```python\ndef sum_even_and_even_index(arr):\n    total = 0\n    for index in range(0, len(arr), 2):\n        if arr[index] % 2 == 0:\n            total += arr[index]\n    return total\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of even numbers at even positions of a list.\n\n### Signature\ndef sum_even_and_even_index(arr):\n\n### Test\nassert candidate([5, 6, 12, 1, 18, 8]) == 30",
        "timestamp": "2025-10-17T18:07:16.988999",
        "response_time": "3.04",
        "context": "{\"function_name\": \"sum_even_and_even_index\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 271,
        "solution": "===START===\n```python\ndef even_Power_Sum(n):\n    total_sum = 0\n    count = 0\n    number = 2\n    \n    while count < n:\n        total_sum += number ** 5\n        count += 1\n        number += 2\n    \n    return total_sum\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n### Signature\ndef even_Power_Sum(n):\n\n### Test\nassert candidate(2) == 1056",
        "timestamp": "2025-10-17T18:07:20.320352",
        "response_time": "3.33",
        "context": "{\"function_name\": \"even_Power_Sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 272,
        "solution": "===START===\n```python\ndef rear_extract(test_list):\n    return [sub[-1] for sub in test_list]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n### Signature\ndef rear_extract(test_list):\n\n### Test\nassert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
        "timestamp": "2025-10-17T18:07:21.925384",
        "response_time": "1.60",
        "context": "{\"function_name\": \"rear_extract\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 273,
        "solution": "===START===\n```python\ndef substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n### Signature\ndef substract_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
        "timestamp": "2025-10-17T18:07:24.246815",
        "response_time": "2.32",
        "context": "{\"function_name\": \"substract_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 274,
        "solution": "===START===\nfrom math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    for i in range(0, n + 1, 2):\n        total_sum += comb(n, i)\n    return total_sum\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n### Signature\ndef even_binomial_Coeff_Sum( n):\n\n### Test\nassert candidate(4) == 8",
        "timestamp": "2025-10-17T18:07:27.174004",
        "response_time": "2.92",
        "context": "{\"function_name\": \"even_binomial_Coeff_Sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 276,
        "solution": "===START===\nimport math\n\ndef volume_cylinder(r, h):\n    return math.pi * r**2 * h\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n\n### Signature\ndef volume_cylinder(r,h):\n\n### Test\nassert math.isclose(candidate(10,5), 1570.7500000000002, rel_tol=0.001)",
        "timestamp": "2025-10-17T18:07:28.635544",
        "response_time": "1.46",
        "context": "{\"function_name\": \"volume_cylinder\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 277,
        "solution": "===START===\ndef dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n### Signature\ndef dict_filter(dict,n):\n\n### Test\nassert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
        "timestamp": "2025-10-17T18:07:30.389070",
        "response_time": "1.75",
        "context": "{\"function_name\": \"dict_filter\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 278,
        "solution": "===START===\n```python\ndef count_first_elements(test_tup):\n    for idx, ele in enumerate(test_tup):\n        if isinstance(ele, tuple):\n            return idx\n    return len(test_tup)  # In case there is no tuple in the tuple\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n\n### Signature\ndef count_first_elements(test_tup):\n\n### Test\nassert candidate((1, 5, 7, (4, 6), 10) ) == 3",
        "timestamp": "2025-10-17T18:07:33.252141",
        "response_time": "2.86",
        "context": "{\"function_name\": \"count_first_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 279,
        "solution": "===START===\n```python\ndef is_num_decagonal(n):\n    # Formula to calculate the nth decagonal number\n    return 4 * n * n - 3 * n\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth decagonal number.\n\n### Signature\ndef is_num_decagonal(n):\n\n### Test\nassert candidate(3) == 27",
        "timestamp": "2025-10-17T18:07:35.536234",
        "response_time": "2.28",
        "context": "{\"function_name\": \"is_num_decagonal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 280,
        "solution": "===START===\n```python\ndef sequential_search(dlist, item):\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n### Signature\ndef sequential_search(dlist, item):\n\n### Test\nassert candidate([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
        "timestamp": "2025-10-17T18:07:38.009710",
        "response_time": "2.47",
        "context": "{\"function_name\": \"sequential_search\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 281,
        "solution": "===START===\n```python\ndef all_unique(test_list):\n    return len(test_list) == len(set(test_list))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check if the elements of a given list are unique or not.\n\n### Signature\ndef all_unique(test_list):\n\n### Test\nassert candidate([1,2,3]) == True",
        "timestamp": "2025-10-17T18:07:39.551066",
        "response_time": "1.54",
        "context": "{\"function_name\": \"all_unique\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 282,
        "solution": "===START===\n```python\ndef sub_list(nums1, nums2):\n    return [a - b for a, b in zip(nums1, nums2)]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to subtract two lists element-wise.\n\n### Signature\ndef sub_list(nums1,nums2):\n\n### Test\nassert candidate([1, 2, 3],[4,5,6])==[-3,-3,-3]",
        "timestamp": "2025-10-17T18:07:41.484532",
        "response_time": "1.93",
        "context": "{\"function_name\": \"sub_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 283,
        "solution": "===START===\nfrom collections import Counter\n\ndef validate(n):\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Count the frequency of each digit\n    digit_count = Counter(str_n)\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    \n    return True\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n### Signature\ndef validate(n):\n\n### Test\nassert candidate(1234) == True",
        "timestamp": "2025-10-17T18:07:46.317530",
        "response_time": "4.83",
        "context": "{\"function_name\": \"validate\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 284,
        "solution": "===START===\ndef check_element(lst, element):\n    return all(item == element for item in lst)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\n### Signature\ndef check_element(list,element):\n\n### Test\nassert candidate([\"green\", \"orange\", \"black\", \"white\"],\"\"\"blue\"\"\")==False",
        "timestamp": "2025-10-17T18:07:47.661939",
        "response_time": "1.34",
        "context": "{\"function_name\": \"check_element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 285,
        "solution": "===START===\nimport re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n### Signature\ndef text_match_two_three(text):\n\n### Test\nassert candidate(\"ac\")==(False)",
        "timestamp": "2025-10-17T18:07:49.538923",
        "response_time": "1.86",
        "context": "{\"function_name\": \"text_match_two_three\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 286,
        "solution": "===START===\n```python\ndef max_sub_array_sum_repeated(a, n, k):\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    max_kadane = kadane(a)\n    max_prefix_sum = max_suffix_sum = 0\n    total_sum = sum(a)\n\n    for i in range(n):\n        max_prefix_sum = max(max_prefix_sum, sum(a[:i+1]))\n        max_suffix_sum = max(max_suffix_sum, sum(a[i:]))\n\n    if k == 1:\n        return max_kadane\n    elif total_sum > 0:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n### Signature\ndef max_sub_array_sum_repeated(a, n, k):\n\n### Test\nassert candidate([10, 20, -30, -1], 4, 3) == 30",
        "timestamp": "2025-10-17T18:07:59.791617",
        "response_time": "10.25",
        "context": "{\"function_name\": \"max_sub_array_sum_repeated\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 287,
        "solution": "===START===\n```python\ndef square_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 2\n    return total\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n### Signature\ndef square_Sum(n):\n\n### Test\nassert candidate(2) == 20",
        "timestamp": "2025-10-17T18:08:02.628840",
        "response_time": "2.83",
        "context": "{\"function_name\": \"square_Sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 290,
        "solution": "===START===\n```python\ndef max_length(list1):\n    if not list1:\n        return 0, []\n    \n    max_len = 0\n    max_list = []\n    \n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    \n    return max_len, max_list\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the list of maximum length in a list of lists.\n\n### Signature\ndef max_length(list1):\n\n### Test\nassert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
        "timestamp": "2025-10-17T18:08:06.489185",
        "response_time": "3.85",
        "context": "{\"function_name\": \"max_length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 291,
        "solution": "===START===\n```python\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    same = 0\n    diff = k\n    \n    for i in range(2, n + 1):\n        new_same = diff\n        new_diff = (same + diff) * (k - 1)\n        \n        same = new_same\n        diff = new_diff\n    \n    return same + diff\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n### Signature\ndef count_no_of_ways(n, k):\n\n### Test\nassert candidate(2, 4) == 16",
        "timestamp": "2025-10-17T18:08:11.587008",
        "response_time": "5.09",
        "context": "{\"function_name\": \"count_no_of_ways\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 292,
        "solution": "===START===\nfrom math import floor\n\ndef find(n, m):\n    return floor(n / m)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n### Signature\ndef find(n,m):\n\n### Test\nassert candidate(10,3) == 3",
        "timestamp": "2025-10-17T18:08:12.916554",
        "response_time": "1.32",
        "context": "{\"function_name\": \"find\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 293,
        "solution": "===START===\nimport math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w**2 + h**2)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the third side of a right angled triangle.\n\n### Signature\ndef otherside_rightangle(w,h):\n\n### Test\nassert candidate(7,8)==10.63014581273465",
        "timestamp": "2025-10-17T18:08:14.584915",
        "response_time": "1.66",
        "context": "{\"function_name\": \"otherside_rightangle\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 294,
        "solution": "===START===\nfrom typing import List, Union\n\ndef max_val(listval: List[Union[int, str]]) -> int:\n    # Filter out non-integer values\n    int_values = [x for x in listval if isinstance(x, int)]\n    # Return the maximum value from the filtered list\n    return max(int_values) if int_values else None\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum value in a given heterogeneous list.\n\n### Signature\ndef max_val(listval):\n\n### Test\nassert candidate(['Python', 3, 2, 4, 5, 'version'])==5",
        "timestamp": "2025-10-17T18:08:18.343175",
        "response_time": "3.75",
        "context": "{\"function_name\": \"max_val\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 295,
        "solution": "===START===\n```python\ndef sum_div(number):\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to return the sum of all divisors of a number.\n\n### Signature\ndef sum_div(number):\n\n### Test\nassert candidate(8)==7",
        "timestamp": "2025-10-17T18:08:20.975312",
        "response_time": "2.63",
        "context": "{\"function_name\": \"sum_div\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 296,
        "solution": "===START===\n```python\ndef get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count inversions in an array.\n\n### Signature\ndef get_Inv_Count(arr):\n\n### Test\nassert candidate([1,20,6,4,5]) == 5",
        "timestamp": "2025-10-17T18:08:24.462144",
        "response_time": "3.48",
        "context": "{\"function_name\": \"get_Inv_Count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 297,
        "solution": "===START===\nfrom typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List[int]]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to flatten a given nested list structure.\n\n### Signature\ndef flatten_list(list1):\n\n### Test\nassert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "timestamp": "2025-10-17T18:08:27.886176",
        "response_time": "3.42",
        "context": "{\"function_name\": \"flatten_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 299,
        "solution": "===START===\nfrom collections import defaultdict\n\ndef max_aggregate(stdata):\n    aggregate_scores = defaultdict(int)\n    \n    for name, score in stdata:\n        aggregate_scores[name] += score\n    \n    max_score = max(aggregate_scores.values())\n    max_student = next(name for name, score in aggregate_scores.items() if score == max_score)\n    \n    return (max_student, max_score)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\n### Signature\ndef max_aggregate(stdata):\n\n### Test\nassert candidate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
        "timestamp": "2025-10-17T18:08:31.869715",
        "response_time": "3.98",
        "context": "{\"function_name\": \"max_aggregate\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 300,
        "solution": "===START===\nimport math\nfrom itertools import combinations\n\ndef count_binary_seq(n):\n    total_count = 0\n    for k in range(n + 1):\n        # Choose k positions out of n for 1s in the first half\n        first_half_combinations = combinations(range(n), k)\n        # For each combination in the first half, the second half must have the same number of 1s\n        total_count += len(list(first_half_combinations)) ** 2\n    return total_count\n\n# Test the function with the provided test case\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n### Signature\ndef count_binary_seq(n):\n\n### Test\nassert math.isclose(candidate(1), 2.0, rel_tol=0.001)",
        "timestamp": "2025-10-17T18:08:38.546570",
        "response_time": "6.67",
        "context": "{\"function_name\": \"count_binary_seq\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 301,
        "solution": "===START===\ndef dict_depth(d):\n    if isinstance(d, dict):\n        if d:\n            return 1 + max(dict_depth(v) for v in d.values())\n        return 1\n    return 0\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the depth of a dictionary.\n\n### Signature\ndef dict_depth(d):\n\n### Test\nassert candidate({'a':1, 'b': {'c': {'d': {}}}})==4",
        "timestamp": "2025-10-17T18:08:40.903981",
        "response_time": "2.35",
        "context": "{\"function_name\": \"dict_depth\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 304,
        "solution": "===START===\n```python\ndef find_Element(arr, ranges, rotations, index):\n    for i in range(rotations - 1, -1, -1):\n        left = ranges[i][0]\n        right = ranges[i][1]\n        if left <= index <= right:\n            if index == left:\n                index = right\n            else:\n                index -= 1\n    return arr[index]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find element at a given index after number of rotations.\n\n### Signature\ndef find_Element(arr,ranges,rotations,index) :\n\n### Test\nassert candidate([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
        "timestamp": "2025-10-17T18:08:45.146786",
        "response_time": "4.24",
        "context": "{\"function_name\": \"find_Element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 305,
        "solution": "===START===\n```python\ndef start_withp(words):\n    result = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('P') or w.startswith('p'):\n                result.append(w)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)\n\n# Example usage:\n# print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to return two words from a list of words starting with letter 'p'.\n\n### Signature\ndef start_withp(words):\n\n### Test\nassert candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==(\"\"\"Python\"\"\", \"\"\"PHP\"\"\")",
        "timestamp": "2025-10-17T18:08:49.584694",
        "response_time": "4.43",
        "context": "{\"function_name\": \"start_withp\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 306,
        "solution": "===START===\n```python\ndef max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the dp array where dp[i] will store the maximum sum of increasing subsequence ending at index i\n    dp = [0] * n\n    \n    # Base case: the maximum sum of increasing subsequence ending at the first element is the element itself\n    dp[0] = a[0]\n    \n    # Fill the dp array for elements from 1 to index\n    for i in range(1, index + 1):\n        dp[i] = a[i]  # Start with the element itself\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + a[i]:\n                dp[i] = dp[j] + a[i]\n    \n    # Find the maximum sum of increasing subsequence ending at any index from 0 to index\n    max_sum = max(dp[:index + 1])\n    \n    # Include the kth element if it is greater than the last element in the current subsequence\n    if k > index and a[k] > a[index]:\n        max_sum += a[k]\n    \n    return max_sum\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\n### Signature\ndef max_sum_increasing_subseq(a, n, index, k):\n\n### Test\nassert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
        "timestamp": "2025-10-17T18:09:01.291962",
        "response_time": "11.70",
        "context": "{\"function_name\": \"max_sum_increasing_subseq\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 307,
        "solution": "===START===\n```python\ndef colon_tuplex(tuplex, m, n):\n    # Convert the tuple to a list to allow modification\n    temp = list(tuplex)\n    # Insert the value n at index m\n    temp.insert(m, n)\n    # Convert the list back to a tuple\n    tuplex = tuple(temp)\n    return tuplex\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to get a colon of a tuple.\n\n### Signature\ndef colon_tuplex(tuplex,m,n):\n\n### Test\nassert candidate((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)",
        "timestamp": "2025-10-17T18:09:05.202434",
        "response_time": "3.90",
        "context": "{\"function_name\": \"colon_tuplex\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 308,
        "solution": "===START===\n```python\ndef large_product(nums1, nums2, N):\n    # Sort both lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize a list to store the largest products\n    largest_products = []\n    \n    # Iterate through the first N elements of each list\n    for i in range(min(N, len(nums1))):\n        for j in range(min(N, len(nums2))):\n            # Calculate the product of the current elements\n            product = nums1[i] * nums2[j]\n            # Insert the product into the sorted list of largest products\n            largest_products.insert(bisect.bisect(largest_products, product), product)\n            # If the list exceeds N elements, remove the smallest one\n            if len(largest_products) > N:\n                largest_products.pop(0)\n    \n    return largest_products\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n### Signature\ndef large_product(nums1, nums2, N):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
        "timestamp": "2025-10-17T18:09:13.806124",
        "response_time": "8.60",
        "context": "{\"function_name\": \"large_product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 309,
        "solution": "===START===\ndef maximum(a, b):\n    return a if a > b else b\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the maximum of two numbers.\n\n### Signature\ndef maximum(a,b):\n\n### Test\nassert candidate(5,10) == 10",
        "timestamp": "2025-10-17T18:09:15.139099",
        "response_time": "1.33",
        "context": "{\"function_name\": \"maximum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 310,
        "solution": "===START===\ndef string_to_tuple(str1):\n    return tuple(char for char in str1)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a given string to a tuple of characters.\n\n### Signature\ndef string_to_tuple(str1):\n\n### Test\nassert candidate(\"python 3.0\")==(\"\"\"p\"\"\", \"\"\"y\"\"\", \"\"\"t\"\"\", \"\"\"h\"\"\", \"\"\"o\"\"\", \"\"\"n\"\"\", \"\"\"3\"\"\", \"\"\".\"\"\", \"\"\"0\"\"\")",
        "timestamp": "2025-10-17T18:09:16.388392",
        "response_time": "1.24",
        "context": "{\"function_name\": \"string_to_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 311,
        "solution": "===START===\nimport math\n\ndef set_left_most_unset_bit(n):\n    # Find the position of the leftmost unset bit\n    pos = int(math.log2(n)) + 1\n    \n    # Set the leftmost unset bit\n    return n | (1 << pos)\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to set the left most unset bit.\n\n### Signature\ndef set_left_most_unset_bit(n):\n\n### Test\nassert candidate(10) == 14",
        "timestamp": "2025-10-17T18:09:19.325619",
        "response_time": "2.93",
        "context": "{\"function_name\": \"set_left_most_unset_bit\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 312,
        "solution": "===START===\nimport math\n\ndef volume_cone(r, h):\n    return (1/3) * math.pi * r**2 * h\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the volume of a cone.\n\n### Signature\ndef volume_cone(r,h):\n\n### Test\nassert math.isclose(candidate(5,12), 314.15926535897927, rel_tol=0.001)",
        "timestamp": "2025-10-17T18:09:21.095559",
        "response_time": "1.76",
        "context": "{\"function_name\": \"volume_cone\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 388,
        "solution": "===START===\nimport math\n\ndef highest_Power_of_2(n):\n    return 2 ** (int(math.log2(n)))\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\n### Signature\ndef highest_Power_of_2(n):\n\n### Test\nassert candidate(10) == 8",
        "timestamp": "2025-10-17T18:09:22.754933",
        "response_time": "1.65",
        "context": "{\"function_name\": \"highest_Power_of_2\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 389,
        "solution": "===START===\n```python\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the n'th lucas number.\n\n### Signature\ndef find_lucas(n):\n\n### Test\nassert candidate(9) == 76",
        "timestamp": "2025-10-17T18:09:26.672405",
        "response_time": "3.91",
        "context": "{\"function_name\": \"find_lucas\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 390,
        "solution": "===START===\n```python\ndef add_string(list_, string):\n    return [string.format(item) for item in list_]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to apply a given format string to all of the elements in a list.\n\n### Signature\ndef add_string(list_, string):\n\n### Test\nassert candidate([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
        "timestamp": "2025-10-17T18:09:28.279448",
        "response_time": "1.60",
        "context": "{\"function_name\": \"add_string\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 391,
        "solution": "===START===\n```python\ndef convert_list_dictionary(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        nested_dict = {l1[i]: {l2[i]: l3[i]}}\n        result.append(nested_dict)\n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert more than one list to nested dictionary.\n\n### Signature\ndef convert_list_dictionary(l1, l2, l3):\n\n### Test\nassert candidate([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{\"\"\"S001\"\"\": {\"\"\"Adina Park\"\"\": 85}}, {\"\"\"S002\"\"\": {\"\"\"Leyton Marsh\"\"\": 98}}, {\"\"\"S003\"\"\": {\"\"\"Duncan Boyle\"\"\": 89}}, {\"\"\"S004\"\"\": {\"\"\"Saim Richards\"\"\": 92}}]",
        "timestamp": "2025-10-17T18:09:31.548271",
        "response_time": "3.26",
        "context": "{\"function_name\": \"convert_list_dictionary\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 392,
        "solution": "===START===\n```python\ndef get_max_sum(n):\n    # Base case: if n is 0, the maximum sum is 0\n    if n == 0:\n        return 0\n    \n    # Calculate the sum of the function values for n/2, n/3, n/4, and n/5\n    sum_of_parts = get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5)\n    \n    # Return the maximum of the sum of parts and n itself\n    return max(sum_of_parts, n)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n### Signature\ndef get_max_sum (n):\n\n### Test\nassert get_max_sum(60) == 106",
        "timestamp": "2025-10-17T18:09:37.992408",
        "response_time": "6.44",
        "context": "{\"function_name\": \"get_max_sum \"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 393,
        "solution": "===START===\n```python\ndef max_length_list(input_list):\n    if not input_list:\n        return 0, []\n    \n    max_length = 0\n    max_list = []\n    \n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return max_length, max_list\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the list with maximum length.\n\n### Signature\ndef max_length_list(input_list):\n\n### Test\nassert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
        "timestamp": "2025-10-17T18:09:41.879240",
        "response_time": "3.88",
        "context": "{\"function_name\": \"max_length_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 394,
        "solution": "===START===\n```python\ndef check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if given tuple contains no duplicates.\n\n### Signature\ndef check_distinct(test_tup):\n\n### Test\nassert candidate((1, 4, 5, 6, 1, 4)) == False",
        "timestamp": "2025-10-17T18:09:43.575921",
        "response_time": "1.69",
        "context": "{\"function_name\": \"check_distinct\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 395,
        "solution": "===START===\nfrom collections import OrderedDict\n\ndef first_non_repeating_character(str1):\n    char_count = OrderedDict()\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    return None\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the first non-repeated character in a given string.\n\n### Signature\ndef first_non_repeating_character(str1):\n\n### Test\nassert candidate(\"abcabc\") == None",
        "timestamp": "2025-10-17T18:09:47.654398",
        "response_time": "4.07",
        "context": "{\"function_name\": \"first_non_repeating_character\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 396,
        "solution": "===START===\n```python\ndef check_char(string):\n    if len(string) == 0:\n        return \"Invalid\"\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given string starts and ends with the same character or not.\n\n### Signature\ndef check_char(string):\n\n### Test\nassert candidate(\"abba\") == \"Valid\"",
        "timestamp": "2025-10-17T18:09:50.296424",
        "response_time": "2.64",
        "context": "{\"function_name\": \"check_char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 397,
        "solution": "===START===\n```python\ndef median_numbers(a, b, c):\n    return sorted([a, b, c])[1]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the median of three numbers.\n\n### Signature\ndef median_numbers(a,b,c):\n\n### Test\nassert candidate(25,55,65)==55.0",
        "timestamp": "2025-10-17T18:09:51.954800",
        "response_time": "1.65",
        "context": "{\"function_name\": \"median_numbers\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 398,
        "solution": "===START===\n```python\ndef sum_of_digits(nums):\n    return sum(int(digit) for num in nums for digit in str(num))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to compute the sum of digits of each number of a given list.\n\n### Signature\ndef sum_of_digits(nums):\n\n### Test\nassert candidate([10,2,56])==14",
        "timestamp": "2025-10-17T18:09:53.724292",
        "response_time": "1.76",
        "context": "{\"function_name\": \"sum_of_digits\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 399,
        "solution": "===START===\n```python\ndef bitwise_xor(test_tup1, test_tup2):\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\n### Signature\ndef bitwise_xor(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
        "timestamp": "2025-10-17T18:09:55.970256",
        "response_time": "2.24",
        "context": "{\"function_name\": \"bitwise_xor\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 400,
        "solution": "===START===\n```python\ndef extract_freq(test_list):\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # Return the number of unique tuples\n    return len(unique_tuples)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract the number of unique tuples in the given list.\n\n### Signature\ndef extract_freq(test_list):\n\n### Test\nassert candidate([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
        "timestamp": "2025-10-17T18:09:58.546570",
        "response_time": "2.57",
        "context": "{\"function_name\": \"extract_freq\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 401,
        "solution": "===START===\nfrom typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    result = tuple(tuple(a + b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n    return result\n\n# Example usage:\n# candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n# Output: ((7, 10), (7, 14), (3, 10), (8, 13))\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n### Signature\ndef add_nested_tuples(test_tup1, test_tup2):\n\n### Test\nassert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
        "timestamp": "2025-10-17T18:10:06.301468",
        "response_time": "7.75",
        "context": "{\"function_name\": \"add_nested_tuples\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 404,
        "solution": "===START===\ndef minimum(a, b):\n    return a if a < b else b\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the minimum of two numbers.\n\n### Signature\ndef minimum(a,b):\n\n### Test\nassert candidate(1,2) == 1",
        "timestamp": "2025-10-17T18:10:07.482158",
        "response_time": "1.17",
        "context": "{\"function_name\": \"minimum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 405,
        "solution": "===START===\n```python\ndef check_tuplex(tuplex, element):\n    return element in tuplex\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether an element exists within a tuple.\n\n### Signature\ndef check_tuplex(tuplex,tuple1):\n\n### Test\nassert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),\"\"\"r\"\"\")==True",
        "timestamp": "2025-10-17T18:10:09.017603",
        "response_time": "1.53",
        "context": "{\"function_name\": \"check_tuplex\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 406,
        "solution": "===START===\n```python\ndef find_Parity(x):\n    return x % 2 != 0\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find whether the parity of a given number is odd.\n\n### Signature\ndef find_Parity(x):\n\n### Test\nassert candidate(12) == False",
        "timestamp": "2025-10-17T18:10:10.412581",
        "response_time": "1.39",
        "context": "{\"function_name\": \"find_Parity\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 407,
        "solution": "===START===\nfrom itertools import permutations\n\ndef rearrange_bigger(n):\n    digits = list(str(n))\n    perms = permutations(digits)\n    perms = sorted(int(''.join(p)) for p in perms if int(''.join(p)) > n)\n    return perms[0] if perms else -1\n\n# Test\nassert rearrange_bigger(12) == 21\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\n### Signature\ndef rearrange_bigger(n):\n\n### Test\nassert candidate(12)==21",
        "timestamp": "2025-10-17T18:10:14.351416",
        "response_time": "3.93",
        "context": "{\"function_name\": \"rearrange_bigger\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 408,
        "solution": "===START===\n```python\nimport heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2 or k <= 0:\n        return []\n\n    min_heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n\n    result = []\n    while min_heap and len(result) < k:\n        _, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))\n\n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n### Signature\ndef k_smallest_pairs(nums1, nums2, k):\n\n### Test\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
        "timestamp": "2025-10-17T18:10:22.037387",
        "response_time": "7.68",
        "context": "{\"function_name\": \"push\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 409,
        "solution": "===START===\n```python\ndef min_product_tuple(list1):\n    # Calculate the product of each tuple pair\n    products = [abs(x * y) for x, y in list1]\n    # Return the minimum product\n    return min(products)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\n### Signature\ndef min_product_tuple(list1):\n\n### Test\nassert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
        "timestamp": "2025-10-17T18:10:24.778608",
        "response_time": "2.73",
        "context": "{\"function_name\": \"min_product_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 410,
        "solution": "===START===\nfrom typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    # Filter out non-integer values\n    int_values = [x for x in listval if isinstance(x, int)]\n    # Return the minimum value from the filtered list\n    return min(int_values)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the minimum value in a given heterogeneous list.\n\n### Signature\ndef min_val(listval):\n\n### Test\nassert candidate(['Python', 3, 2, 4, 5, 'version'])==2",
        "timestamp": "2025-10-17T18:10:28.196699",
        "response_time": "3.41",
        "context": "{\"function_name\": \"min_val\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 411,
        "solution": "===START===\n```python\ndef snake_to_camel(word):\n    return ''.join(word.capitalize() or '_' for word in word.split('_'))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert the given snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):\n\n### Test\nassert candidate('android_tv') == 'AndroidTv'",
        "timestamp": "2025-10-17T18:10:29.894004",
        "response_time": "1.69",
        "context": "{\"function_name\": \"snake_to_camel\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 412,
        "solution": "===START===\ndef remove_odd(l):\n    return [x for x in l if x % 2 == 0]\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to remove odd numbers from a given list.\n\n### Signature\ndef remove_odd(l):\n\n### Test\nassert candidate([1,2,3]) == [2]",
        "timestamp": "2025-10-17T18:10:31.347176",
        "response_time": "1.45",
        "context": "{\"function_name\": \"remove_odd\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 413,
        "solution": "===START===\ndef extract_nth_element(list1, n):\n    return [tup[n] for tup in list1]\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract the nth element from a given list of tuples.\n\n### Signature\ndef extract_nth_element(list1, n):\n\n### Test\nassert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
        "timestamp": "2025-10-17T18:10:32.948362",
        "response_time": "1.60",
        "context": "{\"function_name\": \"extract_nth_element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 414,
        "solution": "===START===\n```python\ndef overlapping(list1, list2):\n    return any(item in list2 for item in list1)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\n### Signature\ndef overlapping(list1,list2):\n\n### Test\nassert candidate([1,2,3,4,5],[6,7,8,9]) == False",
        "timestamp": "2025-10-17T18:10:34.644356",
        "response_time": "1.69",
        "context": "{\"function_name\": \"overlapping\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 415,
        "solution": "===START===\n```python\ndef max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    # Initialize the two largest and two smallest numbers\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        # Update the two largest numbers\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        # Update the two smallest numbers\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    # The highest product can be either from the two largest or two smallest numbers\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find a pair with highest product from a given array of integers.\n\n### Signature\ndef max_Product(arr):\n\n### Test\nassert candidate([1,2,3,4,7,0,8,4]) == (7,8)",
        "timestamp": "2025-10-17T18:10:44.176590",
        "response_time": "9.53",
        "context": "{\"function_name\": \"max_Product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 417,
        "solution": "===START===\nfrom collections import defaultdict\n\ndef group_tuples(Input):\n    grouped = defaultdict(list)\n    for tup in Input:\n        grouped[tup[0]].extend(tup)\n    return [tuple(values) for values in grouped.values()]\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find common first element in given list of tuple.\n\n### Signature\ndef group_tuples(Input):\n\n### Test\nassert candidate([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
        "timestamp": "2025-10-17T18:10:46.654796",
        "response_time": "2.47",
        "context": "{\"function_name\": \"group_tuples\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 418,
        "solution": "===START===\n```python\ndef Find_Max(lst):\n    if not lst:\n        return None\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the element of a list having maximum length.\n\n### Signature\ndef Find_Max(lst):\n\n### Test\nassert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
        "timestamp": "2025-10-17T18:10:50.041413",
        "response_time": "3.38",
        "context": "{\"function_name\": \"Find_Max\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 419,
        "solution": "===START===\n```python\ndef round_and_sum(list1):\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    print(result)\n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\n### Signature\ndef round_and_sum(list1):\n\n### Test\nassert candidate([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
        "timestamp": "2025-10-17T18:10:52.869516",
        "response_time": "2.82",
        "context": "{\"function_name\": \"round_and_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 420,
        "solution": "===START===\n```python\ndef cube_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 3\n    return total\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the cube sum of first n even natural numbers.\n\n### Signature\ndef cube_Sum(n):\n\n### Test\nassert candidate(2) == 72",
        "timestamp": "2025-10-17T18:10:55.705675",
        "response_time": "2.83",
        "context": "{\"function_name\": \"cube_Sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 421,
        "solution": "===START===\n```python\ndef concatenate_tuple(test_tup):\n    # Convert each element to string and join with delimiter '-'\n    return '-'.join(map(str, test_tup))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to concatenate each element of tuple by the delimiter.\n\n### Signature\ndef concatenate_tuple(test_tup):\n\n### Test\nassert candidate((\"ID\", \"is\", 4, \"UTS\") ) == \"\"\"ID-is-4-UTS\"\"\"",
        "timestamp": "2025-10-17T18:10:57.860371",
        "response_time": "2.15",
        "context": "{\"function_name\": \"concatenate_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 422,
        "solution": "===START===\nfrom typing import *\nfrom collections import *\n\ndef find_Average_Of_Cube(n):\n    total_sum = sum(i**3 for i in range(1, n + 1))\n    average = total_sum / n\n    return average\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the average of cubes of first n natural numbers.\n\n### Signature\ndef find_Average_Of_Cube(n):\n\n### Test\nassert candidate(2) == 4.5",
        "timestamp": "2025-10-17T18:11:00.582076",
        "response_time": "2.71",
        "context": "{\"function_name\": \"find_Average_Of_Cube\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b_td",
        "dataset_row_id": 424,
        "solution": "===START===\n```python\ndef extract_rear(test_tuple):\n    return [sub[-1] for sub in test_tuple]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract only the rear index element of each string in the given tuple.\n\n### Signature\ndef extract_rear(test_tuple):\n\n### Test\nassert candidate(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
        "timestamp": "2025-10-17T18:11:02.208894",
        "response_time": "1.62",
        "context": "{\"function_name\": \"extract_rear\"}"
    }
]