[
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 425,
        "solution": "```python\ndef count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the number of sublists containing a particular element.\n\n### Signature\ndef count_element_in_list(list1, x):",
        "timestamp": "2025-10-17T16:58:11.773329",
        "response_time": "1.90",
        "context": "{\"function_name\": \"count_element_in_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 426,
        "solution": "```python\ndef filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to filter odd numbers.\n\n### Signature\ndef filter_oddnumbers(nums):",
        "timestamp": "2025-10-17T16:58:12.394542",
        "response_time": "0.62",
        "context": "{\"function_name\": \"filter_oddnumbers\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 427,
        "solution": "```python\nfrom datetime import datetime\n\ndef change_date_format(dt):\n    # Parse the input date string\n    date_obj = datetime.strptime(dt, '%Y-%m-%d')\n    # Format the date to dd-mm-yyyy\n    formatted_date = date_obj.strftime('%d-%m-%Y')\n    return formatted_date\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n### Signature\ndef change_date_format(dt):",
        "timestamp": "2025-10-17T16:58:13.392407",
        "response_time": "1.00",
        "context": "{\"function_name\": \"change_date_format\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 428,
        "solution": "```python\ndef shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort the given array by using shell sort.\n\n### Signature\ndef shell_sort(my_list):",
        "timestamp": "2025-10-17T16:58:14.877765",
        "response_time": "1.48",
        "context": "{\"function_name\": \"shell_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 429,
        "solution": "```python\n===START===\nfrom typing import Tuple\n\ndef and_tuples(test_tup1: Tuple, test_tup2: Tuple) -> Tuple:\n    # Extracting elementwise and tuples from the given two tuples\n    result = tuple(a & b for a, b in zip(test_tup1, test_tup2))\n    return result\n\n===END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\n### Signature\ndef and_tuples(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T16:58:15.995832",
        "response_time": "1.12",
        "context": "{\"function_name\": \"and_tuples\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 430,
        "solution": "```python\n###START===\nimport math\n\ndef parabola_directrix(a, b, c):\n    # Calculate the directrix using the formula for a parabola in standard form\n    # y = ax^2 + bx + c\n    # Directrix: y = -1/(4a)\n    return -1 / (4 * a)\n\n# Example usage:\n# a = 1, b = 0, c = -4\n# The directrix of the parabola y = x^2 - 4 is y = 1\nprint(parabola_directrix(1, 0, -4))  # Output: 1.0\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the directrix of a parabola.\n\n### Signature\ndef parabola_directrix(a, b, c):",
        "timestamp": "2025-10-17T16:58:17.951452",
        "response_time": "1.95",
        "context": "{\"function_name\": \"parabola_directrix\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 431,
        "solution": "```python\ndef common_element(list1, list2):\n    # Convert the first list to a set for O(1) average time complexity lookups\n    set1 = set(list1)\n    \n    # Iterate through the second list and check if any element is in the set\n    for element in list2:\n        if element in set1:\n            return True\n    \n    # If no common element is found, return False\n    return False\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes two lists and returns true if they have at least one common element.\n\n### Signature\ndef common_element(list1, list2):",
        "timestamp": "2025-10-17T16:58:19.277522",
        "response_time": "1.33",
        "context": "{\"function_name\": \"common_element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 432,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef median_trapezium(base1, base2, height):\n    # Calculate the median length of the trapezium\n    median_length = (base1 + base2) / 2\n    return median_length\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the median length of a trapezium.\n\n### Signature\ndef median_trapezium(base1,base2,height):",
        "timestamp": "2025-10-17T16:58:20.203153",
        "response_time": "0.92",
        "context": "{\"function_name\": \"median_trapezium\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 433,
        "solution": "```python\ndef check_greater(arr, number):\n    # Iterate through each element in the array\n    for element in arr:\n        # Check if the current element is greater than the given number\n        if element > number:\n            return True\n    # If no element is greater than the number, return False\n    return False\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\n### Signature\ndef check_greater(arr, number):",
        "timestamp": "2025-10-17T16:58:21.274631",
        "response_time": "1.07",
        "context": "{\"function_name\": \"check_greater\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 434,
        "solution": "```python\nimport re\n\ndef text_match_one(text):\n    # Use regular expression to find a string that starts with 'a' followed by one or more 'b's\n    pattern = r'^a+b$'\n    return bool(re.search(pattern, text))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by one or more b's.\n\n### Signature\ndef text_match_one(text):",
        "timestamp": "2025-10-17T16:58:22.135215",
        "response_time": "0.86",
        "context": "{\"function_name\": \"text_match_one\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 435,
        "solution": "```python\n###START===\ndef last_Digit(n) :\n    return abs(n) % 10\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the last digit of a given number.\n\n### Signature\ndef last_Digit(n) :",
        "timestamp": "2025-10-17T16:58:22.653766",
        "response_time": "0.52",
        "context": "{\"function_name\": \"last_Digit\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 436,
        "solution": "```python\ndef neg_nos(list1):\n    return [num for num in list1 if num < 0]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to return the negative numbers in a list.\n\n### Signature\ndef neg_nos(list1):",
        "timestamp": "2025-10-17T16:58:23.171141",
        "response_time": "0.52",
        "context": "{\"function_name\": \"neg_nos\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 437,
        "solution": "```python\ndef remove_odd(str1):\n    return ''.join([char for char in str1 if char.isalpha() or char.isdigit()])\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove odd characters in a string.\n\n### Signature\ndef remove_odd(str1):",
        "timestamp": "2025-10-17T16:58:23.738050",
        "response_time": "0.57",
        "context": "{\"function_name\": \"remove_odd\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 438,
        "solution": "```python\nfrom typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    count = 0\n    for (a, b) in test_list:\n        if (b, a) in test_list:\n            count += 1\n    return count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to count bidirectional tuple pairs.\n\n### Signature\ndef count_bidirectional(test_list):",
        "timestamp": "2025-10-17T16:58:24.739457",
        "response_time": "1.00",
        "context": "{\"function_name\": \"count_bidirectional\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 439,
        "solution": "```python\ndef multiple_to_single(L):\n    # Convert each integer in the list to a string\n    str_list = [str(num) for num in L]\n    # Join the string representations with no separator\n    result = ''.join(str_list)\n    # Convert the resulting string back to an integer\n    return int(result)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to join a list of multiple integers into a single integer.\n\n### Signature\ndef multiple_to_single(L):",
        "timestamp": "2025-10-17T16:58:25.764805",
        "response_time": "1.02",
        "context": "{\"function_name\": \"multiple_to_single\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 440,
        "solution": "```python\nimport re\n\ndef find_adverb_position(text):\n    # Regular expression to find adverbs\n    adverb_pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(adverb_pattern, text)\n    \n    # List to store the adverbs and their positions\n    adverbs_with_positions = []\n    \n    # Iterate over the matches to get adverbs and their positions\n    for match in matches:\n        adverb = match.group()\n        position = match.start()\n        adverbs_with_positions.append((adverb, position))\n    \n    return adverbs_with_positions\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the first adverb and their positions in a given sentence.\n\n### Signature\ndef find_adverb_position(text):",
        "timestamp": "2025-10-17T16:58:27.431016",
        "response_time": "1.67",
        "context": "{\"function_name\": \"find_adverb_position\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 441,
        "solution": "```python\ndef surfacearea_cube(l):\n    # Calculate the surface area of a cube\n    return 6 * l ** 2\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the surface area of a cube of a given size.\n\n### Signature\ndef surfacearea_cube(l):",
        "timestamp": "2025-10-17T16:58:27.972816",
        "response_time": "0.54",
        "context": "{\"function_name\": \"surfacearea_cube\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 442,
        "solution": "```python\ndef positive_count(nums):\n    positive_count = sum(1 for num in nums if num > 0)\n    total_count = len(nums)\n    return positive_count / total_count if total_count > 0 else 0\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the ration of positive numbers in an array of integers.\n\n### Signature\ndef positive_count(nums):",
        "timestamp": "2025-10-17T16:58:28.791663",
        "response_time": "0.82",
        "context": "{\"function_name\": \"positive_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 443,
        "solution": "```python\ndef largest_neg(list1):\n    # Initialize the largest negative number to None\n    largest_neg = None\n    \n    # Iterate through each number in the list\n    for num in list1:\n        # Check if the number is negative\n        if num < 0:\n            # If largest_neg is None or the current number is greater than largest_neg, update largest_neg\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n    \n    # Return the largest negative number found, or None if no negative numbers were found\n    return largest_neg\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the largest negative number from the given list.\n\n### Signature\ndef largest_neg(list1):",
        "timestamp": "2025-10-17T16:58:30.459234",
        "response_time": "1.67",
        "context": "{\"function_name\": \"largest_neg\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 444,
        "solution": "```python\ndef trim_tuple(test_list, K):\n    # Use list comprehension to trim each tuple by K\n    result = [tuple(ele[:K]) for ele in test_list]\n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to trim each tuple by k in the given tuple list.\n\n### Signature\ndef trim_tuple(test_list, K):",
        "timestamp": "2025-10-17T16:58:31.174805",
        "response_time": "0.71",
        "context": "{\"function_name\": \"trim_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 445,
        "solution": "```python\ndef index_multiplication(test_tup1, test_tup2):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over the indices of the tuples\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        # Multiply the elements at the current index\n        result.append(test_tup1[i] * test_tup2[i])\n    \n    # Convert the list to a tuple and return\n    return tuple(result)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n### Signature\ndef index_multiplication(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T16:58:32.621335",
        "response_time": "1.45",
        "context": "{\"function_name\": \"index_multiplication\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 446,
        "solution": "```python\nfrom collections import Counter\n\ndef count_Occurrence(tup, lst):\n    # Count the occurrences of each element in the list\n    lst_count = Counter(lst)\n    \n    # Initialize a dictionary to store the count of each element in the tuple\n    tup_count = {}\n    \n    # Iterate over each element in the tuple\n    for element in tup:\n        # If the element is in the list, add its count to the tuple_count dictionary\n        if element in lst_count:\n            tup_count[element] = lst_count[element]\n    \n    return tup_count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the occurence of all elements of list in a tuple.\n\n### Signature\ndef count_Occurrence(tup, lst):",
        "timestamp": "2025-10-17T16:58:34.283365",
        "response_time": "1.66",
        "context": "{\"function_name\": \"count_Occurrence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 447,
        "solution": "```python\ndef cube_nums(nums):\n    return [num ** 3 for num in nums]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find cubes of individual elements in a list.\n\n### Signature\ndef cube_nums(nums):",
        "timestamp": "2025-10-17T16:58:34.731769",
        "response_time": "0.45",
        "context": "{\"function_name\": \"cube_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 448,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef cal_sum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n\n    perrin = [3, 5]\n    for i in range(3, n):\n        next_perrin = perrin[i-2] + perrin[i-3]\n        perrin.append(next_perrin)\n\n    return sum(perrin)\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the sum of perrin numbers.\n\n### Signature\ndef cal_sum(n):",
        "timestamp": "2025-10-17T16:58:36.370733",
        "response_time": "1.64",
        "context": "{\"function_name\": \"cal_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 450,
        "solution": "```python\ndef extract_string(str, l):\n    return str[:l]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract specified size of strings from a given list of string values.\n\n### Signature\ndef extract_string(str, l):",
        "timestamp": "2025-10-17T16:58:36.767375",
        "response_time": "0.40",
        "context": "{\"function_name\": \"extract_string\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 451,
        "solution": "```python\ndef remove_whitespaces(text1):\n    return text1.replace(\" \", \"\")\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove all whitespaces from the given string.\n\n### Signature\ndef remove_whitespaces(text1):",
        "timestamp": "2025-10-17T16:58:37.201709",
        "response_time": "0.43",
        "context": "{\"function_name\": \"remove_whitespaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 452,
        "solution": "```python\ndef loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n### Signature\ndef loss_amount(actual_cost,sale_amount):",
        "timestamp": "2025-10-17T16:58:37.847775",
        "response_time": "0.65",
        "context": "{\"function_name\": \"loss_amount\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 453,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef sumofFactors(n) :\n    sum_even_factors = 0\n    for i in range(2, n + 1, 2):  # Iterate over even numbers only\n        if n % i == 0:\n            sum_even_factors += i\n    return sum_even_factors\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of even factors of a number.\n\n### Signature\ndef sumofFactors(n) :",
        "timestamp": "2025-10-17T16:58:39.012576",
        "response_time": "1.16",
        "context": "{\"function_name\": \"sumofFactors\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 454,
        "solution": "```python\nimport re\n\ndef text_match_wordz(text):\n    # Use regular expression to find words containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    return bool(match)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that matches a word containing 'z'.\n\n### Signature\ndef text_match_wordz(text):",
        "timestamp": "2025-10-17T16:58:39.857720",
        "response_time": "0.84",
        "context": "{\"function_name\": \"text_match_wordz\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 455,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef check_monthnumb_number(monthnum2):\n    # Define a set of months that have 31 days\n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    \n    # Check if the given month number is in the set of months with 31 days\n    return monthnum2 in months_with_31_days\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given month number contains 31 days or not.\n\n### Signature\ndef check_monthnumb_number(monthnum2):",
        "timestamp": "2025-10-17T16:58:41.351008",
        "response_time": "1.49",
        "context": "{\"function_name\": \"check_monthnumb_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 456,
        "solution": "```python\ndef reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to reverse each string in a given list of string values.\n\n### Signature\ndef reverse_string_list(stringlist):",
        "timestamp": "2025-10-17T16:58:41.831758",
        "response_time": "0.48",
        "context": "{\"function_name\": \"reverse_string_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 457,
        "solution": "```python\ndef Find_Min(lst):\n    if not lst:\n        return None  # Return None if the list is empty\n\n    min_length = float('inf')\n    min_sublist = None\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sublist having minimum length.\n\n### Signature\ndef Find_Min(lst):",
        "timestamp": "2025-10-17T16:58:43.015080",
        "response_time": "1.18",
        "context": "{\"function_name\": \"Find_Min\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 458,
        "solution": "```python\n###START===\ndef rectangle_area(l, b):\n    return l * b\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the area of a rectangle.\n\n### Signature\ndef rectangle_area(l,b):",
        "timestamp": "2025-10-17T16:58:43.497137",
        "response_time": "0.48",
        "context": "{\"function_name\": \"rectangle_area\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 459,
        "solution": "```python\ndef remove_uppercase(str1):\n    return ''.join(char for char in str1 if not char.isupper())\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove uppercase substrings from a given string.\n\n### Signature\ndef remove_uppercase(str1):",
        "timestamp": "2025-10-17T16:58:43.999717",
        "response_time": "0.50",
        "context": "{\"function_name\": \"remove_uppercase\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 460,
        "solution": "```python\ndef Extract(lst):\n    return [sublist[0] for sublist in lst]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to get the first element of each sublist.\n\n### Signature\ndef Extract(lst):",
        "timestamp": "2025-10-17T16:58:44.440249",
        "response_time": "0.44",
        "context": "{\"function_name\": \"Extract\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 461,
        "solution": "```python\ndef upper_ctr(str):\n    return sum(1 for char in str if char.isupper())\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the upper case characters in a given string.\n\n### Signature\ndef upper_ctr(str):",
        "timestamp": "2025-10-17T16:58:44.920147",
        "response_time": "0.48",
        "context": "{\"function_name\": \"upper_ctr\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 462,
        "solution": "```python\nfrom itertools import combinations\n\ndef combinations_list(list1):\n    return [list(comb) for comb in combinations(list1, r) for r in range(1, len(list1) + 1)]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find all possible combinations of the elements of a given list.\n\n### Signature\ndef combinations_list(list1):",
        "timestamp": "2025-10-17T16:58:45.673460",
        "response_time": "0.75",
        "context": "{\"function_name\": \"combinations_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 463,
        "solution": "```python\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n\n    max_product = min_product = result = arr[0]\n\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum product subarray of the given array.\n\n### Signature\ndef max_subarray_product(arr):",
        "timestamp": "2025-10-17T16:58:47.235018",
        "response_time": "1.56",
        "context": "{\"function_name\": \"max_subarray_product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 464,
        "solution": "```python\ndef check_value(dict, n):\n    if not dict:\n        return False\n    return all(value == n for value in dict.values())\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if all values are same in a dictionary.\n\n### Signature\ndef check_value(dict, n):",
        "timestamp": "2025-10-17T16:58:47.830169",
        "response_time": "0.59",
        "context": "{\"function_name\": \"check_value\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 465,
        "solution": "```python\ndef drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to drop empty items from a given dictionary.\n\n### Signature\ndef drop_empty(dict1):",
        "timestamp": "2025-10-17T16:58:48.355105",
        "response_time": "0.52",
        "context": "{\"function_name\": \"drop_empty\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 468,
        "solution": "```python\nfrom typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n\n    n = len(arr)\n    max_product = [0] * n\n    max_product[0] = arr[0]\n\n    for i in range(1, n):\n        max_product[i] = max(arr[i], max_product[i - 1] * arr[i])\n\n    return max(max_product)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n### Signature\ndef max_product(arr):",
        "timestamp": "2025-10-17T16:58:49.708178",
        "response_time": "1.35",
        "context": "{\"function_name\": \"max_product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 470,
        "solution": "```python\ndef add_pairwise(test_tup):\n    # Initialize an empty list to store the pairwise sums\n    res = []\n    \n    # Iterate through the tuple using zip to pair elements\n    for a, b in zip(test_tup, test_tup[1:]):\n        # Add the pair and append to the result list\n        res.append(a + b)\n    \n    return res\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n### Signature\ndef add_pairwise(test_tup):",
        "timestamp": "2025-10-17T16:58:50.953904",
        "response_time": "1.24",
        "context": "{\"function_name\": \"add_pairwise\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 471,
        "solution": "```python\n###START===\nfrom typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the product of the array multiplication modulo n.\n\n### Signature\ndef find_remainder(arr, n):",
        "timestamp": "2025-10-17T16:58:51.857587",
        "response_time": "0.90",
        "context": "{\"function_name\": \"find_remainder\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 472,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef check_Consecutive(l):\n    if not l:\n        return False\n    \n    sorted_l = sorted(l)\n    for i in range(1, len(sorted_l)):\n        if sorted_l[i] != sorted_l[i - 1] + 1:\n            return False\n    return True\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\n### Signature\ndef check_Consecutive(l):",
        "timestamp": "2025-10-17T16:58:52.986513",
        "response_time": "1.13",
        "context": "{\"function_name\": \"check_Consecutive\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 473,
        "solution": "```python\nfrom typing import List, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> List[Tuple]:\n    # Convert each tuple in both lists to a set to remove duplicates and allow intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of both sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list of tuples\n    result = list(intersection)\n    \n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n### Signature\ndef tuple_intersection(test_list1, test_list2):",
        "timestamp": "2025-10-17T16:58:54.613653",
        "response_time": "1.63",
        "context": "{\"function_name\": \"tuple_intersection\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 474,
        "solution": "```python\ndef replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to replace characters in a string.\n\n### Signature\ndef replace_char(str1,ch,newch):",
        "timestamp": "2025-10-17T16:58:55.103049",
        "response_time": "0.49",
        "context": "{\"function_name\": \"replace_char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 475,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef sort_counter(dict1):\n    # Sort the dictionary by value in ascending order\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a dictionary by value.\n\n### Signature\ndef sort_counter(dict1):",
        "timestamp": "2025-10-17T16:58:55.938369",
        "response_time": "0.83",
        "context": "{\"function_name\": \"sort_counter\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 476,
        "solution": "```python\ndef big_sum(nums):\n    if not nums:\n        return 0  # Return 0 if the list is empty\n\n    # Initialize min and max with the first element of the list\n    min_val = max_val = nums[0]\n\n    # Iterate through the list to find the min and max values\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n\n    # Return the sum of the largest and smallest values\n    return min_val + max_val\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\n### Signature\ndef big_sum(nums):",
        "timestamp": "2025-10-17T16:58:57.590826",
        "response_time": "1.65",
        "context": "{\"function_name\": \"big_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 477,
        "solution": "```python\ndef is_lower(string):\n    return string.islower()\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to convert the given string to lower case.\n\n### Signature\ndef is_lower(string):",
        "timestamp": "2025-10-17T16:58:57.958489",
        "response_time": "0.37",
        "context": "{\"function_name\": \"is_lower\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 478,
        "solution": "```python\ndef remove_lowercase(str1):\n    return ''.join(char for char in str1 if not char.islower())\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove lowercase substrings from a given string.\n\n### Signature\ndef remove_lowercase(str1):",
        "timestamp": "2025-10-17T16:58:58.459348",
        "response_time": "0.50",
        "context": "{\"function_name\": \"remove_lowercase\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 479,
        "solution": "```python\n###START===\nimport math\n\ndef first_Digit(n) :\n    # Handle negative numbers by taking the absolute value\n    n = abs(n)\n    \n    # If the number is 0, the first digit is 0\n    if n == 0:\n        return 0\n    \n    # Use logarithm to find the number of digits\n    num_digits = math.floor(math.log10(n)) + 1\n    \n    # Extract the first digit\n    first_digit = n // (10 ** (num_digits - 1))\n    \n    return first_digit\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the first digit of a given number.\n\n### Signature\ndef first_Digit(n) :",
        "timestamp": "2025-10-17T16:59:00.161825",
        "response_time": "1.70",
        "context": "{\"function_name\": \"first_Digit\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 554,
        "solution": "```python\ndef Split(list):\n    return [x for x in list if x % 2 != 0]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function which takes a list of integers and only returns the odd ones.\n\n### Signature\ndef Split(list):",
        "timestamp": "2025-10-17T16:59:00.657230",
        "response_time": "0.49",
        "context": "{\"function_name\": \"Split\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 555,
        "solution": "```python\n###START===\nfrom math import pow\n\ndef difference(n) :\n    sum_of_cubes = sum(pow(i, 3) for i in range(1, n + 1))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n### Signature\ndef difference(n) :",
        "timestamp": "2025-10-17T16:59:01.721830",
        "response_time": "1.06",
        "context": "{\"function_name\": \"difference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 556,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef find_Odd_Pair(A, N):\n    odd_count = 0\n    even_count = 0\n    \n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # The number of pairs with odd XOR is the product of the number of odd and even numbers\n    return odd_count * even_count\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of pairs whose xor value is odd.\n\n### Signature\ndef find_Odd_Pair(A,N) :",
        "timestamp": "2025-10-17T16:59:03.180190",
        "response_time": "1.46",
        "context": "{\"function_name\": \"find_Odd_Pair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 557,
        "solution": "```python\ndef toggle_string(string):\n    return ''.join(char.swapcase() for char in string)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to toggle the case of all characters in a string.\n\n### Signature\ndef toggle_string(string):",
        "timestamp": "2025-10-17T16:59:03.653615",
        "response_time": "0.47",
        "context": "{\"function_name\": \"toggle_string\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 558,
        "solution": "```python\ndef digit_distance_nums(n1, n2):\n    # Convert numbers to strings to iterate over each digit\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # Initialize the sum of differences\n    sum_diff = 0\n    \n    # Iterate over each digit\n    for i in range(max(len(str_n1), len(str_n2))):\n        # Get the digit from each number, defaulting to 0 if the number is shorter\n        digit1 = int(str_n1[i]) if i < len(str_n1) else 0\n        digit2 = int(str_n2[i]) if i < len(str_n2) else 0\n        \n        # Calculate the absolute difference and add to the sum\n        sum_diff += abs(digit1 - digit2)\n    \n    return sum_diff\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of the per-digit difference between two integers.\n\n### Signature\ndef digit_distance_nums(n1, n2):",
        "timestamp": "2025-10-17T16:59:06.015263",
        "response_time": "2.36",
        "context": "{\"function_name\": \"digit_distance_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 559,
        "solution": "```python\ndef max_sub_array_sum(a, size):\n    # Initialize variables to store the maximum sum and the current sum\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, size):\n        # Update the current sum to be the maximum of the current element\n        # or the current sum plus the current element\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        \n        # Update the maximum sum found so far if the current sum is greater\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n\n### Signature\ndef max_sub_array_sum(a, size):",
        "timestamp": "2025-10-17T16:59:08.065758",
        "response_time": "2.05",
        "context": "{\"function_name\": \"max_sub_array_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 560,
        "solution": "```python\nfrom typing import Tuple\n\ndef union_elements(test_tup1: Tuple, test_tup2: Tuple) -> Tuple:\n    # Convert tuples to sets to find the union\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set back to a tuple and sort it\n    sorted_union = tuple(sorted(union_set))\n    return sorted_union\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n\n### Signature\ndef union_elements(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T16:59:09.294802",
        "response_time": "1.23",
        "context": "{\"function_name\": \"union_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 562,
        "solution": "```python\ndef Find_Max_Length(lst):\n    if not lst:\n        return 0\n    \n    max_length = 0\n    for sublist in lst:\n        if isinstance(sublist, list):\n            max_length = max(max_length, len(sublist))\n    \n    return max_length\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the length of the longest sublists.\n\n### Signature\ndef Find_Max_Length(lst):",
        "timestamp": "2025-10-17T16:59:10.214688",
        "response_time": "0.92",
        "context": "{\"function_name\": \"Find_Max_Length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 563,
        "solution": "```python\nimport re\n\ndef extract_values(text):\n    # Use regular expression to find all substrings between quotation marks\n    matches = re.findall(r'\"([^\"]*)\"', text)\n    return matches\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract values between quotation marks from a string.\n\n### Signature\ndef extract_values(text):",
        "timestamp": "2025-10-17T16:59:10.914919",
        "response_time": "0.70",
        "context": "{\"function_name\": \"extract_values\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 564,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef count_Pairs(arr, n):\n    # Initialize a counter for pairs\n    count = 0\n    \n    # Iterate over each pair of elements in the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Check if the elements are unequal\n            if arr[i] != arr[j]:\n                # Increment the count if they are unequal\n                count += 1\n    \n    return count\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n### Signature\ndef count_Pairs(arr,n):",
        "timestamp": "2025-10-17T16:59:12.442421",
        "response_time": "1.53",
        "context": "{\"function_name\": \"count_Pairs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 565,
        "solution": "```python\ndef split(word):\n    return list(word)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to split a string into characters.\n\n### Signature\ndef split(word):",
        "timestamp": "2025-10-17T16:59:12.817889",
        "response_time": "0.37",
        "context": "{\"function_name\": \"split\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 566,
        "solution": "```python\ndef sum_digits(n):\n    # Ensure the input is a non-negative integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    # Convert the integer to a string to iterate over each digit\n    digits = str(n)\n    \n    # Initialize the sum of digits\n    total_sum = 0\n    \n    # Iterate over each character in the string and add its integer value to the total sum\n    for digit in digits:\n        total_sum += int(digit)\n    \n    return total_sum\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to get the sum of the digits of a non-negative integer.\n\n### Signature\ndef sum_digits(n):",
        "timestamp": "2025-10-17T16:59:14.505520",
        "response_time": "1.69",
        "context": "{\"function_name\": \"sum_digits\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 567,
        "solution": "```python\ndef issort_list(list1):\n    if not list1:\n        return True\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i - 1]:\n            return False\n    return True\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether a specified list is sorted or not.\n\n### Signature\ndef issort_list(list1):",
        "timestamp": "2025-10-17T16:59:15.399791",
        "response_time": "0.89",
        "context": "{\"function_name\": \"issort_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 568,
        "solution": "```python\ndef empty_list(length):\n    return [{} for _ in range(length)]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to create a list of N empty dictionaries.\n\n### Signature\ndef empty_list(length):",
        "timestamp": "2025-10-17T16:59:15.832702",
        "response_time": "0.43",
        "context": "{\"function_name\": \"empty_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 569,
        "solution": "```python\nfrom typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    # Sort each sublist in the list of lists\n    sorted_list = [sorted(sublist) for sublist in list1]\n    return sorted_list\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(list1):",
        "timestamp": "2025-10-17T16:59:16.700807",
        "response_time": "0.87",
        "context": "{\"function_name\": \"sort_sublists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 572,
        "solution": "```python\nfrom typing import List\n\ndef two_unique_nums(nums: List[List[int]]) -> List[int]:\n    # Flatten the list of lists\n    flat_list = [num for sublist in nums for num in sublist]\n    \n    # Use a set to remove duplicates\n    unique_nums = set(flat_list)\n    \n    # Convert the set back to a list\n    return list(unique_nums)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to remove duplicate numbers from a given number of lists.\n\n### Signature\ndef two_unique_nums(nums):",
        "timestamp": "2025-10-17T16:59:17.929214",
        "response_time": "1.23",
        "context": "{\"function_name\": \"two_unique_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 573,
        "solution": "```python\nfrom typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    # Use a set to store unique numbers\n    unique_numbers = set(list_data)\n    \n    # Calculate the product of unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    \n    return product\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to calculate the product of the unique numbers in a given list.\n\n### Signature\ndef unique_product(list_data):",
        "timestamp": "2025-10-17T16:59:18.982034",
        "response_time": "1.05",
        "context": "{\"function_name\": \"unique_product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 574,
        "solution": "```python\n###START===\nimport math\n\ndef surfacearea_cylinder(r, h):\n    # Calculate the surface area of a cylinder\n    # Surface area = 2 * \u03c0 * r * (r + h)\n    return 2 * math.pi * r * (r + h)\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the surface area of a cylinder.\n\n### Signature\ndef surfacearea_cylinder(r,h):",
        "timestamp": "2025-10-17T16:59:19.940426",
        "response_time": "0.96",
        "context": "{\"function_name\": \"surfacearea_cylinder\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 576,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef is_Sub_Array(A, B):\n    if not B:\n        return True\n    if len(A) < len(B):\n        return False\n    \n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether a list is sublist of another or not.\n\n### Signature\ndef is_Sub_Array(A,B):",
        "timestamp": "2025-10-17T16:59:21.160763",
        "response_time": "1.22",
        "context": "{\"function_name\": \"is_Sub_Array\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 577,
        "solution": "```python\n###START===\nimport math\n\ndef last_Digit_Factorial(n):\n    # Calculate the factorial of n\n    factorial = math.factorial(n)\n    # Return the last digit of the factorial\n    return factorial % 10\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the last digit in factorial of a given number.\n\n### Signature\ndef last_Digit_Factorial(n):",
        "timestamp": "2025-10-17T16:59:22.016433",
        "response_time": "0.85",
        "context": "{\"function_name\": \"last_Digit_Factorial\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 578,
        "solution": "```python\ndef interleave_lists(list1, list2, list3):\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to interleave 3 lists of the same length into a single flat list.\n\n### Signature\ndef interleave_lists(list1,list2,list3):",
        "timestamp": "2025-10-17T16:59:22.942692",
        "response_time": "0.92",
        "context": "{\"function_name\": \"interleave_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 579,
        "solution": "```python\ndef find_dissimilar(test_tup1, test_tup2):\n    # Convert tuples to sets to find dissimilar elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find dissimilar elements\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    # Convert the set back to a tuple\n    dissimilar_tuple = tuple(dissimilar_elements)\n    \n    return dissimilar_tuple\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the dissimilar elements in the given two tuples.\n\n### Signature\ndef find_dissimilar(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T16:59:24.353397",
        "response_time": "1.41",
        "context": "{\"function_name\": \"find_dissimilar\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 580,
        "solution": "```python\n===START===\nfrom typing import *\nfrom collections import *\n\ndef even_ele(test_tuple, even_fnc):\n    # Initialize an empty list to store even elements\n    even_elements = []\n    \n    # Iterate over each element in the nested tuple\n    for element in test_tuple:\n        # Check if the element is a tuple\n        if isinstance(element, tuple):\n            # Recursively call even_ele on the nested tuple\n            even_elements.extend(even_ele(element, even_fnc))\n        else:\n            # Apply the even_fnc to the element\n            result = even_fnc(element)\n            # If the result is True, add the element to even_elements\n            if result:\n                even_elements.append(element)\n    \n    return tuple(even_elements)\n\n# Example usage:\n# Define a function to check if a number is even\ndef is_even(num):\n    return num % 2 == 0\n\n# Test the function\ntest_tuple = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nresult = even_ele(test_tuple, is_even)\nprint(result)  # Output: (2, 4, 6)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove uneven elements in the nested mixed tuple.\n\n### Signature\ndef even_ele(test_tuple, even_fnc):",
        "timestamp": "2025-10-17T16:59:27.566571",
        "response_time": "3.21",
        "context": "{\"function_name\": \"extract_even\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 581,
        "solution": "```python\n###START===\nimport math\n\ndef surface_Area(b, s):\n    # Calculate the area of the base\n    base_area = b * b\n    \n    # Calculate the area of the four triangular faces\n    triangular_face_area = 0.5 * s * math.sqrt(b**2 + s**2)\n    total_triangular_area = 4 * triangular_face_area\n    \n    # Total surface area is the sum of the base area and the triangular faces\n    total_surface_area = base_area + total_triangular_area\n    \n    return total_surface_area\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\n### Signature\ndef surface_Area(b,s):",
        "timestamp": "2025-10-17T16:59:29.203873",
        "response_time": "1.64",
        "context": "{\"function_name\": \"surface_Area\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 582,
        "solution": "```python\ndef my_dict(dict1):\n    return not dict1\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if a dictionary is empty\n\n### Signature\ndef my_dict(dict1):",
        "timestamp": "2025-10-17T16:59:29.575422",
        "response_time": "0.37",
        "context": "{\"function_name\": \"my_dict\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 583,
        "solution": "```python\nfrom math import factorial\n\ndef catalan_number(num):\n    if num < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function which returns nth catalan number.\n\n### Signature\ndef catalan_number(num):",
        "timestamp": "2025-10-17T16:59:30.440050",
        "response_time": "0.86",
        "context": "{\"function_name\": \"catalan_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 584,
        "solution": "```python\nimport re\n\ndef find_adverbs(text):\n    # Regular expression to find adverbs ending with 'ly'\n    adverb_pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(adverb_pattern, text)\n    \n    # If no adverbs are found, return an empty list\n    if not matches:\n        return []\n    \n    # Find the positions of each adverb\n    positions = [text.index(match) for match in matches]\n    \n    return matches, positions\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n\n### Signature\ndef find_adverbs(text):",
        "timestamp": "2025-10-17T16:59:31.867083",
        "response_time": "1.43",
        "context": "{\"function_name\": \"find_adverbs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 585,
        "solution": "```python\nfrom typing import List, Tuple\n\ndef expensive_items(items: List[Tuple[str, float]], n: int) -> List[Tuple[str, float]]:\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda item: item[1], reverse=True)\n    \n    # Return the top n items\n    return sorted_items[:n]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the n most expensive items in a given dataset.\n\n### Signature\ndef expensive_items(items,n):",
        "timestamp": "2025-10-17T16:59:33.059563",
        "response_time": "1.19",
        "context": "{\"function_name\": \"expensive_items\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 586,
        "solution": "```python\ndef split_Arr(l, n):\n    if n < 0 or n >= len(l):\n        raise ValueError(\"n is out of bounds\")\n    return l[n:] + l[:n]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n\n### Signature\ndef split_Arr(l, n):",
        "timestamp": "2025-10-17T16:59:33.779368",
        "response_time": "0.72",
        "context": "{\"function_name\": \"split_Arr\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 587,
        "solution": "```python\ndef list_tuple(listx):\n    return tuple(listx)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a list to a tuple.\n\n### Signature\ndef list_tuple(listx):",
        "timestamp": "2025-10-17T16:59:34.157662",
        "response_time": "0.38",
        "context": "{\"function_name\": \"list_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 588,
        "solution": "```python\ndef big_diff(nums):\n    if not nums:\n        return 0  # Return 0 if the list is empty\n    return max(nums) - min(nums)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the difference between largest and smallest value in a given list.\n\n### Signature\ndef big_diff(nums):",
        "timestamp": "2025-10-17T16:59:34.808144",
        "response_time": "0.65",
        "context": "{\"function_name\": \"big_diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 589,
        "solution": "```python\nimport math\n\ndef perfect_squares(a, b):\n    # Find the smallest integer whose square is greater than or equal to a\n    start = math.ceil(math.sqrt(a))\n    # Find the largest integer whose square is less than or equal to b\n    end = math.floor(math.sqrt(b))\n    \n    # Generate a list of perfect squares between start and end\n    return [i**2 for i in range(start, end + 1)]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find perfect squares between two given numbers.\n\n### Signature\ndef perfect_squares(a, b):",
        "timestamp": "2025-10-17T16:59:36.157653",
        "response_time": "1.35",
        "context": "{\"function_name\": \"perfect_squares\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 590,
        "solution": "```python\nimport math\n\ndef polar_rect(x, y):\n    # Calculate the angle in radians\n    angle = math.atan2(y, x)\n    # Calculate the magnitude\n    magnitude = math.sqrt(x**2 + y**2)\n    # Convert to rectangular coordinates\n    real_part = magnitude * math.cos(angle)\n    imaginary_part = magnitude * math.sin(angle)\n    return real_part, imaginary_part\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert polar coordinates to rectangular coordinates.\n\n### Signature\ndef polar_rect(x,y):",
        "timestamp": "2025-10-17T16:59:38.043631",
        "response_time": "1.88",
        "context": "{\"function_name\": \"polar_rect\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 591,
        "solution": "```python\ndef swap_List(newList):\n    if len(newList) > 0:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to interchange the first and last elements in a list.\n\n### Signature\ndef swap_List(newList):",
        "timestamp": "2025-10-17T16:59:38.745598",
        "response_time": "0.70",
        "context": "{\"function_name\": \"swap_List\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 592,
        "solution": "```python\nfrom math import comb\n\ndef binomial_Coeff(n, k):\n    # Calculate the product of consecutive binomial coefficients\n    product = 1\n    for i in range(k, n):\n        product *= comb(n, i)\n    \n    # Calculate the sum of the products\n    return sum(product)\n\n# Example usage:\n# print(binomial_Coeff(5, 2))  # Output: 10\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\n### Signature\ndef binomial_Coeff(n,k):",
        "timestamp": "2025-10-17T16:59:40.082926",
        "response_time": "1.34",
        "context": "{\"function_name\": \"sum_Of_product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 593,
        "solution": "```python\ndef removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    \n    # Remove leading zeroes from each part\n    cleaned_parts = [str(int(part)) for part in parts]\n    \n    # Join the cleaned parts back into a single string\n    cleaned_ip = '.'.join(cleaned_parts)\n    \n    return cleaned_ip\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove leading zeroes from an ip address.\n\n### Signature\ndef removezero_ip(ip):",
        "timestamp": "2025-10-17T16:59:41.286371",
        "response_time": "1.20",
        "context": "{\"function_name\": \"removezero_ip\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 594,
        "solution": "```python\ndef diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return None\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the difference of the first even and first odd number of a given list.\n\n### Signature\ndef diff_even_odd(list1):",
        "timestamp": "2025-10-17T16:59:42.948114",
        "response_time": "1.66",
        "context": "{\"function_name\": \"diff_even_odd\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 595,
        "solution": "```python\n###START===\nfrom collections import Counter\n\ndef min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return -1  # Binary strings must be of the same length\n\n    # Count the number of mismatches\n    mismatches = sum(1 for a, b in zip(str1, str2) if a != b)\n\n    # If the number of mismatches is odd, it's impossible to convert\n    if mismatches % 2 != 0:\n        return -1\n\n    # Count the number of '01' and '10' mismatches\n    mismatches_01 = sum(1 for a, b in zip(str1, str2) if a == '0' and b == '1')\n    mismatches_10 = sum(1 for a, b in zip(str1, str2) if a == '1' and b == '0')\n\n    # The minimum number of swaps is the minimum of mismatches_01 and mismatches_10\n    return min(mismatches_01, mismatches_10)\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n### Signature\ndef min_Swaps(str1,str2) :",
        "timestamp": "2025-10-17T16:59:46.126521",
        "response_time": "3.18",
        "context": "{\"function_name\": \"min_Swaps\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 596,
        "solution": "```python\ndef tuple_size(tuple_list):\n    total_size = 0\n    for item in tuple_list:\n        if isinstance(item, tuple):\n            total_size += tuple_size(item)\n        else:\n            total_size += sys.getsizeof(item)\n    return total_size\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the size in bytes of the given tuple.\n\n### Signature\ndef tuple_size(tuple_list):",
        "timestamp": "2025-10-17T16:59:46.989308",
        "response_time": "0.86",
        "context": "{\"function_name\": \"tuple_size\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 597,
        "solution": "```python\nfrom typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    # Ensure arr1 is the smaller array to optimize the search\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    # Initialize pointers for both arrays\n    i, j = 0, 0\n    kth_element = 0\n    \n    # Traverse both arrays until kth element is found\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            kth_element = arr1[i]\n            i += 1\n        else:\n            kth_element = arr2[j]\n            j += 1\n        k -= 1\n    \n    # If kth element is not found in the first array, take from the second array\n    while i < len(arr1):\n        kth_element = arr1[i]\n        i += 1\n        k -= 1\n    \n    # If kth element is not found in the second array, take from the first array\n    while j < len(arr2):\n        kth_element = arr2[j]\n        j += 1\n        k -= 1\n    \n    return kth_element\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find kth element from the given two sorted arrays.\n\n### Signature\ndef find_kth(arr1, arr2, k):",
        "timestamp": "2025-10-17T16:59:50.546961",
        "response_time": "3.56",
        "context": "{\"function_name\": \"find_kth\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 598,
        "solution": "```python\n###START===\nimport math\n\ndef armstrong_number(number):\n    # Convert the number to a string to easily iterate over each digit\n    num_str = str(number)\n    # Calculate the number of digits\n    num_digits = len(num_str)\n    # Initialize the sum of the digits raised to the power of the number of digits\n    sum_of_powers = 0\n    # Iterate over each digit in the number\n    for digit in num_str:\n        # Convert the digit back to an integer and raise it to the power of the number of digits\n        sum_of_powers += int(digit) ** num_digits\n    # Check if the sum of the powers is equal to the original number\n    return sum_of_powers == number\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given number is armstrong or not.\n\n### Signature\ndef armstrong_number(number):",
        "timestamp": "2025-10-17T16:59:52.710803",
        "response_time": "2.16",
        "context": "{\"function_name\": \"armstrong_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 599,
        "solution": "```python\ndef sum_average(number):\n    if number <= 0:\n        return 0, 0\n    \n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    \n    return total_sum, average\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find sum and average of first n natural numbers.\n\n### Signature\ndef sum_average(number):",
        "timestamp": "2025-10-17T16:59:53.573583",
        "response_time": "0.86",
        "context": "{\"function_name\": \"sum_average\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 600,
        "solution": "```python\n###START===\ndef is_Even(n) :\n    return n % 2 == 0\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given number is even or not.\n\n### Signature\ndef is_Even(n) :",
        "timestamp": "2025-10-17T16:59:54.098645",
        "response_time": "0.52",
        "context": "{\"function_name\": \"is_Even\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 602,
        "solution": "```python\n###START===\nfrom collections import Counter\n\ndef first_repeated_char(str1):\n    # Count the occurrences of each character in the string\n    char_count = Counter(str1)\n    \n    # Iterate through the string to find the first repeated character\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    \n    # Return None if no repeated character is found\n    return None\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the first repeated character in a given string.\n\n### Signature\ndef first_repeated_char(str1):",
        "timestamp": "2025-10-17T16:59:55.430334",
        "response_time": "1.33",
        "context": "{\"function_name\": \"first_repeated_char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 603,
        "solution": "```python\nfrom typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 2:\n        return []\n\n    # Initialize the list of numbers from 1 to n\n    numbers = list(range(1, n + 1))\n    i = 0\n\n    while i < len(numbers):\n        # Find the next number to remove\n        next_to_remove = numbers[i] + i + 1\n        # Remove all multiples of the next number\n        numbers = [num for num in numbers if (num - 1) % next_to_remove != 0]\n        # Move to the next number to remove\n        i += 1\n\n    return numbers\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\n### Signature\ndef get_ludic(n):",
        "timestamp": "2025-10-17T16:59:57.375481",
        "response_time": "1.94",
        "context": "{\"function_name\": \"get_ludic\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 604,
        "solution": "```python\ndef reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    # Reverse the list of words\n    reversed_words = words[::-1]\n    # Join the reversed list of words back into a string\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to reverse words seperated by spaces in a given string.\n\n### Signature\ndef reverse_words(s):",
        "timestamp": "2025-10-17T16:59:58.406587",
        "response_time": "1.03",
        "context": "{\"function_name\": \"reverse_words\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 605,
        "solution": "```python\n###START===\nfrom math import sqrt\n\ndef prime_num(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given integer is a prime number.\n\n### Signature\ndef prime_num(num):",
        "timestamp": "2025-10-17T16:59:59.987861",
        "response_time": "1.58",
        "context": "{\"function_name\": \"prime_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 606,
        "solution": "```python\nimport math\n\ndef radian_degree(degree):\n    return math.radians(degree)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert degrees to radians.\n\n### Signature\ndef radian_degree(degree):",
        "timestamp": "2025-10-17T17:00:00.443156",
        "response_time": "0.45",
        "context": "{\"function_name\": \"radian_degree\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 607,
        "solution": "```python\nimport re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\n### Signature\ndef find_literals(text, pattern):",
        "timestamp": "2025-10-17T17:00:01.238458",
        "response_time": "0.79",
        "context": "{\"function_name\": \"find_literals\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 608,
        "solution": "```python\nfrom math import factorial\n\ndef bell_Number(n):\n    # Initialize a 2D list to store Bell numbers\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    # Base case: The first Bell number is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    \n    # The nth Bell number is stored in bell[n][0]\n    return bell[n][0]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find nth bell number.\n\n### Signature\ndef bell_Number(n):",
        "timestamp": "2025-10-17T17:00:03.570689",
        "response_time": "2.33",
        "context": "{\"function_name\": \"bell_Number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 610,
        "solution": "```python\ndef remove_kth_element(list1, L):\n    # Check if L is within the valid range\n    if L < 0 or L >= len(list1):\n        raise ValueError(\"L is out of range\")\n    \n    # Create a new list excluding the L'th element\n    return list1[:L] + list1[L+1:]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\n### Signature\ndef remove_kth_element(list1, L):",
        "timestamp": "2025-10-17T17:00:04.683773",
        "response_time": "1.11",
        "context": "{\"function_name\": \"remove_kth_element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 611,
        "solution": "```python\ndef max_of_nth(test_list, N):\n    # Check if the matrix is empty or N is out of bounds\n    if not test_list or N < 0 or N >= len(test_list[0]):\n        return None  # or raise an exception, depending on requirements\n\n    # Initialize the maximum value with the first element of the N'th column\n    max_value = test_list[0][N]\n\n    # Iterate through the matrix to find the maximum value in the N'th column\n    for row in test_list:\n        if row[N] > max_value:\n            max_value = row[N]\n\n    return max_value\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\n### Signature\ndef max_of_nth(test_list, N):",
        "timestamp": "2025-10-17T17:00:06.510941",
        "response_time": "1.82",
        "context": "{\"function_name\": \"max_of_nth\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 612,
        "solution": "```python\nfrom typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n### Signature\ndef merge(lst):",
        "timestamp": "2025-10-17T17:00:07.488628",
        "response_time": "0.98",
        "context": "{\"function_name\": \"merge\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 614,
        "solution": "```python\ndef cummulative_sum(test_list):\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n    \n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Iterate over each element in the tuple\n        for ele in tup:\n            # Add the element to the cumulative sum\n            cum_sum += ele\n    \n    # Return the cumulative sum\n    return cum_sum\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n### Signature\ndef cummulative_sum(test_list):",
        "timestamp": "2025-10-17T17:00:08.787596",
        "response_time": "1.30",
        "context": "{\"function_name\": \"cummulative_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 615,
        "solution": "```python\ndef average_tuple(nums):\n    # Initialize an empty list to store the averages\n    averages = []\n    \n    # Iterate over each tuple in the input list\n    for num_tuple in nums:\n        # Calculate the average of the current tuple\n        average = sum(num_tuple) / len(num_tuple)\n        # Append the calculated average to the averages list\n        averages.append(average)\n    \n    # Return the list of averages\n    return averages\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\n### Signature\ndef average_tuple(nums):",
        "timestamp": "2025-10-17T17:00:10.131649",
        "response_time": "1.34",
        "context": "{\"function_name\": \"average_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 616,
        "solution": "```python\ndef tuple_modulo(test_tup1, test_tup2):\n    # Check if both tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # Perform element-wise modulo operation\n    result = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    \n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\n### Signature\ndef tuple_modulo(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T17:00:11.450816",
        "response_time": "1.32",
        "context": "{\"function_name\": \"tuple_modulo\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 617,
        "solution": "```python\n###START===\nfrom math import ceil\n\ndef min_Jumps(steps, d):\n    # Calculate the minimum number of jumps required\n    return ceil(d / steps)\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n### Signature\ndef min_Jumps(steps, d):",
        "timestamp": "2025-10-17T17:00:12.129007",
        "response_time": "0.68",
        "context": "{\"function_name\": \"min_Jumps\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 618,
        "solution": "```python\ndef div_list(nums1, nums2):\n    # Check if both lists have the same length\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    # Use list comprehension to divide elements element-wise\n    result = [a / b for a, b in zip(nums1, nums2)]\n    \n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to divide two lists element wise.\n\n### Signature\ndef div_list(nums1,nums2):",
        "timestamp": "2025-10-17T17:00:13.342399",
        "response_time": "1.21",
        "context": "{\"function_name\": \"div_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 619,
        "solution": "```python\ndef move_num(test_str):\n    # Initialize two pointers\n    i = 0\n    j = len(test_str) - 1\n    \n    # Traverse the string\n    while i < j:\n        # Move i forward until a non-digit character is found\n        while i < j and test_str[i].isdigit():\n            i += 1\n        # Move j backward until a digit character is found\n        while i < j and not test_str[j].isdigit():\n            j -= 1\n        # Swap the characters at i and j\n        if i < j:\n            test_str = test_str[:i] + test_str[j] + test_str[i+1:j] + test_str[i] + test_str[j+1:]\n            i += 1\n            j -= 1\n    \n    return test_str\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to move all the numbers to the end of the given string.\n\n### Signature\ndef move_num(test_str):",
        "timestamp": "2025-10-17T17:00:15.662576",
        "response_time": "2.32",
        "context": "{\"function_name\": \"move_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 620,
        "solution": "```python\nfrom typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    \n    # Sort the array to make it easier to find divisible pairs\n    a.sort()\n    \n    # Initialize the dp array where dp[i] will store the size of the largest subset\n    # ending with the number a[i]\n    dp = [1] * len(a)\n    \n    # Iterate through the array to fill the dp array\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # The size of the largest subset is the maximum value in the dp array\n    return max(dp)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n### Signature\ndef largest_subset(a):",
        "timestamp": "2025-10-17T17:00:18.001807",
        "response_time": "2.34",
        "context": "{\"function_name\": \"largest_subset\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 622,
        "solution": "```python\nfrom typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    # Ensure arr1 is the smaller list\n    if n < len(arr2):\n        arr1, arr2 = arr2, arr1\n        n, m = m, n\n    \n    # Initialize pointers\n    low, high = 0, n\n    \n    while low <= high:\n        partitionX = (low + high) // 2\n        partitionY = (n + m + 1) // 2 - partitionX\n        \n        # If partitionX is 0, it means nothing is there on left side. Use -INF for maxLeftX\n        # If partitionX is n, it means nothing is there on right side. Use +INF for minRightX\n        maxLeftX = float('-inf') if partitionX == 0 else arr1[partitionX - 1]\n        minRightX = float('inf') if partitionX == n else arr1[partitionX]\n        \n        # If partitionY is 0, it means nothing is there on left side. Use -INF for maxLeftY\n        # If partitionY is m, it means nothing is there on right side. Use +INF for minRightY\n        maxLeftY = float('-inf') if partitionY == 0 else arr2[partitionY - 1]\n        minRightY = float('inf') if partitionY == m else arr2[partitionY]\n        \n        # Check if the partition is correct\n        if maxLeftX <= minRightY and maxLeftY <= minRightX:\n            # If (n + m) is odd, the median is the maximum of maxLeftX and maxLeftY\n            if (n + m) % 2 == 1:\n                return max(maxLeftX, maxLeftY)\n            # If (n + m) is even, the median is the average of maxLeftX and minRightY\n            else:\n                return (max(maxLeftX, maxLeftY) + min(minRightX, minRightY)) / 2.0\n        # If maxLeftX > minRightY, move partitionX to the left\n        elif maxLeftX > minRightY:\n            high = partitionX - 1\n        # If maxLeftY > minRightX, move partitionX to the right\n        else:\n            low = partitionX + 1\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the median of two sorted lists of same size.\n\n### Signature\ndef get_median(arr1, arr2, n):",
        "timestamp": "2025-10-17T17:00:24.580528",
        "response_time": "6.58",
        "context": "{\"function_name\": \"get_median\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 623,
        "solution": "```python\ndef nth_nums(nums, n):\n    return [num ** n for num in nums]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to compute the n-th power of each number in a list.\n\n### Signature\ndef nth_nums(nums,n):",
        "timestamp": "2025-10-17T17:00:25.059129",
        "response_time": "0.48",
        "context": "{\"function_name\": \"nth_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 624,
        "solution": "```python\ndef is_upper(string):\n    return string.isupper()\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to convert a given string to uppercase.\n\n### Signature\ndef is_upper(string):",
        "timestamp": "2025-10-17T17:00:25.443504",
        "response_time": "0.38",
        "context": "{\"function_name\": \"is_upper\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 625,
        "solution": "```python\ndef swap_List(newList):\n    if len(newList) > 0:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to interchange the first and last element in a given list.\n\n### Signature\ndef swap_List(newList):",
        "timestamp": "2025-10-17T17:00:26.159498",
        "response_time": "0.71",
        "context": "{\"function_name\": \"swap_List\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 626,
        "solution": "```python\nfrom math import pi\n\ndef triangle_area(r):\n    # The largest triangle inscribed in a semicircle is an isosceles right triangle\n    # with the hypotenuse equal to the diameter of the semicircle.\n    # The area of such a triangle is (1/2) * base * height.\n    # In this case, the base and height are both equal to the radius of the semicircle.\n    return 0.5 * r * r\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n### Signature\ndef triangle_area(r) :",
        "timestamp": "2025-10-17T17:00:27.613060",
        "response_time": "1.45",
        "context": "{\"function_name\": \"triangle_area\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 627,
        "solution": "```python\ndef find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    if start > end:\n        return start\n    \n    mid = (start + end) // 2\n    \n    if array[mid] == mid + start:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        return find_First_Missing(array, start, mid - 1)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\n### Signature\ndef find_First_Missing(array,start=0,end=None):",
        "timestamp": "2025-10-17T17:00:28.988665",
        "response_time": "1.37",
        "context": "{\"function_name\": \"find_First_Missing\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 628,
        "solution": "```python\ndef replace_spaces(string):\n    # Convert the string to a list of characters for easier manipulation\n    char_list = list(string)\n    \n    # Initialize pointers for the original and new string positions\n    original_index = len(char_list) - 1\n    new_index = len(char_list) - 1\n    \n    # Traverse the string from the end to the beginning\n    while original_index >= 0:\n        if char_list[original_index] == ' ':\n            # Replace spaces with '%20'\n            char_list[new_index] = '0'\n            char_list[new_index - 1] = '2'\n            char_list[new_index - 2] = '%'\n            new_index -= 3\n        else:\n            # Copy non-space characters to the new position\n            char_list[new_index] = char_list[original_index]\n            new_index -= 1\n        original_index -= 1\n    \n    # Join the list back into a string and return\n    return ''.join(char_list)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to replace all spaces in the given string with '%20'.\n\n### Signature\ndef replace_spaces(string):",
        "timestamp": "2025-10-17T17:00:31.753610",
        "response_time": "2.76",
        "context": "{\"function_name\": \"replace_spaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 629,
        "solution": "```python\ndef Split(list):\n    even_numbers = [num for num in list if num % 2 == 0]\n    return even_numbers\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find even numbers from a list of numbers.\n\n### Signature\ndef Split(list):",
        "timestamp": "2025-10-17T17:00:32.329565",
        "response_time": "0.57",
        "context": "{\"function_name\": \"Split\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 630,
        "solution": "```python\ndef adjac(ele, sub = []):\n    x, y = ele\n    # Generate all possible adjacent coordinates\n    adjacent_coords = [\n        (x + 1, y), (x - 1, y),  # Horizontal\n        (x, y + 1), (x, y - 1)   # Vertical\n    ]\n    # Add the given coordinate to the list of adjacent coordinates\n    adjacent_coords.append(ele)\n    # Return the list of adjacent coordinates\n    return adjacent_coords\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n### Signature\ndef adjac(ele, sub = []):",
        "timestamp": "2025-10-17T17:00:33.885630",
        "response_time": "1.55",
        "context": "{\"function_name\": \"get_coordinates\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 631,
        "solution": "```python\ndef replace_spaces(text):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each character in the input text\n    for char in text:\n        # If the character is a space, append an underscore to the result\n        if char == ' ':\n            result.append('_')\n        # If the character is an underscore, append a space to the result\n        elif char == '_':\n            result.append(' ')\n        # Otherwise, append the character as it is\n        else:\n            result.append(char)\n    \n    # Join the list into a string and return it\n    return ''.join(result)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\n### Signature\ndef replace_spaces(text):",
        "timestamp": "2025-10-17T17:00:35.710773",
        "response_time": "1.82",
        "context": "{\"function_name\": \"replace_spaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 632,
        "solution": "```python\ndef move_zero(num_list):\n    # Initialize two pointers\n    left = 0\n    right = 0\n    \n    # Traverse the list\n    while right < len(num_list):\n        # If the current element is not zero, swap it with the element at the left pointer\n        if num_list[right] != 0:\n            num_list[left], num_list[right] = num_list[right], num_list[left]\n            left += 1\n        right += 1\n    \n    return num_list\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to move all zeroes to the end of the given list.\n\n### Signature\ndef move_zero(num_list):",
        "timestamp": "2025-10-17T17:00:37.216097",
        "response_time": "1.50",
        "context": "{\"function_name\": \"move_zero\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 633,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef pair_xor_Sum(arr,n) :\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\n### Signature\ndef pair_xor_Sum(arr,n) :",
        "timestamp": "2025-10-17T17:00:38.252309",
        "response_time": "1.03",
        "context": "{\"function_name\": \"pair_xor_Sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 635,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef heap_sort(iterable):\n    # Convert the iterable to a list\n    arr = list(iterable)\n    \n    # Helper function to heapify a subtree rooted at index i\n    def heapify(n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        # Check if left child exists and is greater than root\n        if left < n and arr[i] < arr[left]:\n            largest = left\n        \n        # Check if right child exists and is greater than root\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n        \n        # Change root, if needed\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            \n            # Heapify the root.\n            heapify(n, largest)\n    \n    # Build a maxheap.\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(n, i)\n    \n    # One by one extract elements\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # swap\n        heapify(i, 0)\n    \n    return arr\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort the given list.\n\n### Signature\ndef heap_sort(iterable):",
        "timestamp": "2025-10-17T17:00:41.919575",
        "response_time": "3.66",
        "context": "{\"function_name\": \"heap_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 637,
        "solution": "```python\ndef noprofit_noloss(actual_cost, sale_amount):\n    # Check if the actual cost is equal to the sale amount\n    return actual_cost == sale_amount\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given amount has no profit and no loss\n\n### Signature\ndef noprofit_noloss(actual_cost,sale_amount):",
        "timestamp": "2025-10-17T17:00:42.583201",
        "response_time": "0.66",
        "context": "{\"function_name\": \"noprofit_noloss\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 638,
        "solution": "```python\nimport math\n\ndef wind_chill(v,t):\n    # Check if the wind speed is less than 4.8 km/h\n    if v < 4.8:\n        return t\n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    # Round the result to the next integer\n    return math.ceil(wind_chill_index)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n### Signature\ndef wind_chill(v,t):",
        "timestamp": "2025-10-17T17:00:44.357004",
        "response_time": "1.77",
        "context": "{\"function_name\": \"wind_chill\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 639,
        "solution": "```python\ndef sample_nam(sample_names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in sample_names if name[0].isupper()]\n    \n    # Calculate the total length of the names in the filtered list\n    total_length = sum(len(name) for name in filtered_names)\n    \n    return total_length\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n### Signature\ndef sample_nam(sample_names):",
        "timestamp": "2025-10-17T17:00:45.518551",
        "response_time": "1.16",
        "context": "{\"function_name\": \"sample_nam\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 640,
        "solution": "```python\ndef remove_parenthesis(items):\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            start = item.find('(')\n            end = item.find(')')\n            if start != -1 and end != -1:\n                result.append(item[:start] + item[end+1:])\n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n\n### Signature\ndef remove_parenthesis(items):",
        "timestamp": "2025-10-17T17:00:46.719491",
        "response_time": "1.20",
        "context": "{\"function_name\": \"remove_parenthesis\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 641,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef is_nonagonal(n):\n    # A number is nonagonal if it can be expressed as the formula:\n    # n * (7 * n - 5) / 2\n    # We check if this formula gives an integer result\n    return (7 * n - 5) * n % 14 == 0\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth nonagonal number.\n\n### Signature\ndef is_nonagonal(n):",
        "timestamp": "2025-10-17T17:00:48.007183",
        "response_time": "1.29",
        "context": "{\"function_name\": \"is_nonagonal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 643,
        "solution": "```python\nimport re\n\ndef text_match_wordz_middle(text):\n    # Use regex to find 'z' in the middle of words, not at the start or end\n    pattern = r'\\b[^z]*z[^z]*\\b'\n    return bool(re.search(pattern, text))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\n### Signature\ndef text_match_wordz_middle(text):",
        "timestamp": "2025-10-17T17:00:48.949365",
        "response_time": "0.94",
        "context": "{\"function_name\": \"text_match_wordz_middle\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 644,
        "solution": "```python\ndef reverse_Array_Upto_K(input, k):\n    # Check if k is within the bounds of the array\n    if k < 0 or k >= len(input):\n        raise ValueError(\"k is out of bounds\")\n    \n    # Reverse the array from the start to the k-th element\n    input[:k+1] = input[:k+1][::-1]\n    \n    return input\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to reverse an array upto a given position.\n\n### Signature\ndef reverse_Array_Upto_K(input, k):",
        "timestamp": "2025-10-17T17:00:50.187421",
        "response_time": "1.24",
        "context": "{\"function_name\": \"reverse_Array_Upto_K\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 720,
        "solution": "```python\n===START===\nfrom typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple, test_dict: Dict) -> Tuple:\n    # Convert the tuple to a list to allow modification\n    test_tup_list = list(test_tup)\n    # Add the dictionary to the list\n    test_tup_list.append(test_dict)\n    # Convert the list back to a tuple\n    return tuple(test_tup_list)\n\n# Example usage:\ntest_tup = (1, 2, 3)\ntest_dict = {'a': 10, 'b': 20}\nresult = add_dict_to_tuple(test_tup, test_dict)\nprint(result)  # Output: (1, 2, 3, {'a': 10, 'b': 20})\n===END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\n### Signature\ndef add_dict_to_tuple(test_tup, test_dict):",
        "timestamp": "2025-10-17T17:00:52.466016",
        "response_time": "2.28",
        "context": "{\"function_name\": \"add_dict_to_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 721,
        "solution": "```python\nfrom typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    \n    # Initialize the DP table with the same size as the cost matrix\n    dp = [[0] * N for _ in range(N)]\n    \n    # Base case: the top-left cell\n    dp[0][0] = cost[0][0]\n    \n    # Fill the first row\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    # Fill the first column\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    # Fill the rest of the DP table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # The maximum average is the maximum value in the DP table divided by N*N\n    max_avg = dp[-1][-1] / (N * N)\n    \n    return max_avg\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n### Signature\ndef maxAverageOfPath(cost):",
        "timestamp": "2025-10-17T17:00:55.895685",
        "response_time": "3.43",
        "context": "{\"function_name\": \"maxAverageOfPath\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 722,
        "solution": "```python\n###START===\nfrom typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    filtered_students = {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}\n    return filtered_students\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\n### Signature\ndef filter_data(students,h,w):",
        "timestamp": "2025-10-17T17:00:57.197176",
        "response_time": "1.30",
        "context": "{\"function_name\": \"filter_data\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 723,
        "solution": "```python\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\n### Signature\ndef count_same_pair(nums1, nums2):",
        "timestamp": "2025-10-17T17:00:58.027303",
        "response_time": "0.83",
        "context": "{\"function_name\": \"count_same_pair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 724,
        "solution": "```python\ndef power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Initialize the sum of digits\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the result\n    for char in result_str:\n        # Convert the character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    return digit_sum\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\n### Signature\ndef power_base_sum(base, power):",
        "timestamp": "2025-10-17T17:00:59.654545",
        "response_time": "1.63",
        "context": "{\"function_name\": \"power_base_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 725,
        "solution": "```python\ndef extract_quotation(text1):\n    import re\n    return re.findall(r'\"([^\"]+)\"', text1)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract values between quotation marks \" \" of the given string.\n\n### Signature\ndef extract_quotation(text1):",
        "timestamp": "2025-10-17T17:01:00.206581",
        "response_time": "0.55",
        "context": "{\"function_name\": \"extract_quotation\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 726,
        "solution": "```python\ndef multiply_elements(test_tup):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over the input tuple up to the second last element\n    for i in range(len(test_tup) - 1):\n        # Multiply the current element with the next element\n        result.append(test_tup[i] * test_tup[i + 1])\n    \n    # Convert the list to a tuple and return it\n    return tuple(result)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n### Signature\ndef multiply_elements(test_tup):",
        "timestamp": "2025-10-17T17:01:01.628246",
        "response_time": "1.42",
        "context": "{\"function_name\": \"multiply_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 728,
        "solution": "```python\ndef sum_list(lst1, lst2):\n    # Check if both lists have the same length\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    # Use list comprehension to sum corresponding elements\n    return [a + b for a, b in zip(lst1, lst2)]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n### Signature\ndef sum_list(lst1,lst2):",
        "timestamp": "2025-10-17T17:01:02.747247",
        "response_time": "1.12",
        "context": "{\"function_name\": \"sum_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 730,
        "solution": "```python\nfrom typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove consecutive duplicates of a given list.\n\n### Signature\ndef consecutive_duplicates(nums):",
        "timestamp": "2025-10-17T17:01:03.707310",
        "response_time": "0.96",
        "context": "{\"function_name\": \"consecutive_duplicates\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 731,
        "solution": "```python\n###START===\nimport math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height of the cone\n    slant_height = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\n### Signature\ndef lateralsurface_cone(r,h):",
        "timestamp": "2025-10-17T17:01:04.843856",
        "response_time": "1.13",
        "context": "{\"function_name\": \"lateralsurface_cone\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 732,
        "solution": "```python\ndef replace_specialchar(text):\n    # Replace spaces, commas, and dots with a colon\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\n### Signature\ndef replace_specialchar(text):",
        "timestamp": "2025-10-17T17:01:05.515018",
        "response_time": "0.67",
        "context": "{\"function_name\": \"replace_specialchar\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 733,
        "solution": "```python\ndef find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\n### Signature\ndef find_first_occurrence(A, x):",
        "timestamp": "2025-10-17T17:01:07.093815",
        "response_time": "1.58",
        "context": "{\"function_name\": \"find_first_occurrence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 734,
        "solution": "```python\nfrom typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        left_product = 1\n        right_product = 1\n        for j in range(i):\n            left_product *= arr[j]\n        for k in range(i + 1, n):\n            right_product *= arr[k]\n        total_sum += left_product * right_product\n    return total_sum\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\n### Signature\ndef sum_Of_Subarray_Prod(arr):",
        "timestamp": "2025-10-17T17:01:08.581430",
        "response_time": "1.49",
        "context": "{\"function_name\": \"sum_Of_Subarray_Prod\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 735,
        "solution": "```python\n###START===\nimport math\n\ndef set_middle_bits(n):\n    # Calculate the number of bits in n\n    num_bits = math.floor(math.log2(n)) + 1\n    \n    # Create a mask with all bits set except the first and last bit\n    mask = (1 << (num_bits - 2)) - 1\n    \n    # Toggle the middle bits\n    result = n ^ mask\n    \n    return result\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\n### Signature\ndef set_middle_bits(n):",
        "timestamp": "2025-10-17T17:01:09.931921",
        "response_time": "1.35",
        "context": "{\"function_name\": \"toggle_middle_bits\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 736,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef left_insertion(a, x):\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\n### Signature\ndef left_insertion(a, x):",
        "timestamp": "2025-10-17T17:01:11.022093",
        "response_time": "1.09",
        "context": "{\"function_name\": \"left_insertion\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 737,
        "solution": "```python\nimport re\n\ndef check_str(string):\n    # Define a regex pattern to match strings starting with a vowel\n    pattern = r'^[aeiouAEIOU]'\n    \n    # Use re.match to check if the string starts with a vowel\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\n### Signature\ndef check_str(string):",
        "timestamp": "2025-10-17T17:01:12.099934",
        "response_time": "1.08",
        "context": "{\"function_name\": \"check_str\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 738,
        "solution": "```python\ndef geometric_sum(n):\n    if n == 0:\n        return 1\n    else:\n        return 1 / (1 + geometric_sum(n - 1))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\n### Signature\ndef geometric_sum(n):",
        "timestamp": "2025-10-17T17:01:12.821692",
        "response_time": "0.72",
        "context": "{\"function_name\": \"geometric_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 739,
        "solution": "```python\nimport math\n\ndef find_Index(n):\n    # Calculate the smallest triangular number with n digits\n    # The nth triangular number is given by T_n = n * (n + 1) / 2\n    # We need to find the smallest n such that T_n has n digits\n    # The number of digits in a number x is given by floor(log10(x)) + 1\n    # So, we need to find the smallest n such that floor(log10(n * (n + 1) / 2)) + 1 = n\n    # This simplifies to floor(log10(n * (n + 1) / 2)) = n - 1\n    # We can solve this by binary search\n    low, high = 1, 10**n\n    while low < high:\n        mid = (low + high) // 2\n        if math.floor(math.log10(mid * (mid + 1) / 2)) == mid - 1:\n            high = mid\n        else:\n            low = mid + 1\n    return low\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\n### Signature\ndef find_Index(n):",
        "timestamp": "2025-10-17T17:01:15.918000",
        "response_time": "3.09",
        "context": "{\"function_name\": \"find_Index\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 740,
        "solution": "```python\n===START===\nfrom typing import *\nfrom collections import *\n\ndef tuple_to_dict(test_tup):\n    # Check if the length of the tuple is even\n    if len(test_tup) % 2 != 0:\n        raise ValueError(\"Tuple length must be even\")\n    \n    # Use a dictionary comprehension to create the key-value pairs\n    result_dict = {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n    \n    return result_dict\n\n===END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\n### Signature\ndef tuple_to_dict(test_tup):",
        "timestamp": "2025-10-17T17:01:17.490440",
        "response_time": "1.57",
        "context": "{\"function_name\": \"tuple_to_dict\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 741,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef all_Characters_Same(s) :\n    if not s:\n        return True\n    return all(c == s[0] for c in s)\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether all the characters are same or not.\n\n### Signature\ndef all_Characters_Same(s) :",
        "timestamp": "2025-10-17T17:01:18.280353",
        "response_time": "0.79",
        "context": "{\"function_name\": \"all_Characters_Same\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 742,
        "solution": "```python\nfrom math import sqrt\n\ndef area_tetrahedron(side):\n    # Calculate the area of a regular tetrahedron\n    # The formula for the area of a regular tetrahedron with side length 'a' is:\n    # Area = sqrt(3) * a^2\n    return sqrt(3) * side ** 2\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to caluclate the area of a tetrahedron.\n\n### Signature\ndef area_tetrahedron(side):",
        "timestamp": "2025-10-17T17:01:19.497110",
        "response_time": "1.21",
        "context": "{\"function_name\": \"area_tetrahedron\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 743,
        "solution": "```python\ndef rotate_right(list, m):\n    if not list:\n        return list\n    \n    n = len(list)\n    m = m % n  # In case m is greater than the length of the list\n    \n    # Rotate the list by slicing\n    rotated_list = list[-m:] + list[:-m]\n    return rotated_list\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\n### Signature\ndef rotate_right(list, m):",
        "timestamp": "2025-10-17T17:01:20.645172",
        "response_time": "1.15",
        "context": "{\"function_name\": \"rotate_right\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 744,
        "solution": "```python\ndef check_none(test_tup):\n    return any(item is None for item in test_tup)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given tuple has any none value or not.\n\n### Signature\ndef check_none(test_tup):",
        "timestamp": "2025-10-17T17:01:21.114367",
        "response_time": "0.47",
        "context": "{\"function_name\": \"check_none\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 745,
        "solution": "```python\nfrom typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    def is_divisible_by_digits(n: int) -> bool:\n        digits = [int(d) for d in str(n)]\n        for digit in digits:\n            if digit == 0 or n % digit != 0:\n                return False\n        return True\n\n    return [n for n in range(startnum, endnum + 1) if is_divisible_by_digits(n)]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\n### Signature\ndef divisible_by_digits(startnum, endnum):",
        "timestamp": "2025-10-17T17:01:22.614079",
        "response_time": "1.50",
        "context": "{\"function_name\": \"divisible_by_digits\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 746,
        "solution": "```python\n###START===\nimport math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a / 360)\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\n### Signature\ndef sector_area(r,a):",
        "timestamp": "2025-10-17T17:01:23.503622",
        "response_time": "0.89",
        "context": "{\"function_name\": \"sector_area\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 747,
        "solution": "```python\n===START===\nfrom typing import *\nfrom collections import *\n\ndef lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    \n    # Create a 3D DP table to store lengths of longest common subsequence\n    dp = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    # Build the dp table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    \n    # The length of the longest common subsequence of X, Y, and Z\n    return dp[m][n][o]\n\n===END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n### Signature\ndef lcs_of_three(X, Y, Z):",
        "timestamp": "2025-10-17T17:01:27.006020",
        "response_time": "3.50",
        "context": "{\"function_name\": \"lcs_of_three\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 748,
        "solution": "```python\ndef capital_words_spaces(str1):\n    # Split the string into words\n    words = str1.split()\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Check if the word starts with a capital letter\n        if word[0].isupper():\n            # Add a space before the word\n            result.append(' ' + word)\n        else:\n            # Add the word as is\n            result.append(word)\n    \n    # Join the list into a single string and return it\n    return ''.join(result)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to put spaces between words starting with capital letters in a given string.\n\n### Signature\ndef capital_words_spaces(str1):",
        "timestamp": "2025-10-17T17:01:28.816382",
        "response_time": "1.81",
        "context": "{\"function_name\": \"capital_words_spaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 749,
        "solution": "```python\nfrom typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[str]:\n    # Sort the list of strings numerically\n    return sorted(nums_str, key=lambda x: int(x))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n### Signature\ndef sort_numeric_strings(nums_str):",
        "timestamp": "2025-10-17T17:01:29.549276",
        "response_time": "0.73",
        "context": "{\"function_name\": \"sort_numeric_strings\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 750,
        "solution": "```python\ndef add_tuple(test_list, test_tup):\n    # Append the tuple to the list\n    test_list.append(test_tup)\n    return test_list\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to add the given tuple to the given list.\n\n### Signature\ndef add_tuple(test_list, test_tup):",
        "timestamp": "2025-10-17T17:01:30.153371",
        "response_time": "0.60",
        "context": "{\"function_name\": \"add_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 751,
        "solution": "```python\n###START===\nimport math\n\ndef check_min_heap_helper(arr, i):\n    n = len(arr)\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # If left child is within bounds and is less than root\n    if left < n and arr[left] < arr[i]:\n        return False\n    \n    # If right child is within bounds and is less than root\n    if right < n and arr[right] < arr[i]:\n        return False\n    \n    # Recursively check the left and right subtrees\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n### Signature\ndef check_min_heap_helper(arr, i):",
        "timestamp": "2025-10-17T17:01:32.025976",
        "response_time": "1.87",
        "context": "{\"function_name\": \"check_min_heap\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 752,
        "solution": "```python\n===START===\nfrom typing import *\nfrom collections import *\n\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + 2 * b\n        return b\n\n===END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\n### Signature\ndef jacobsthal_num(n):",
        "timestamp": "2025-10-17T17:01:33.526418",
        "response_time": "1.50",
        "context": "{\"function_name\": \"jacobsthal_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 753,
        "solution": "```python\nfrom typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    # Sort the list of tuples based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    # Return the first K elements from the sorted list\n    return test_list[:K]\n\n# Test cases\nprint(min_k([(4, 5), (1, 2), (3, 4)], 2))  # Output: [(1, 2), (3, 4)]\nprint(min_k([(10, 20), (5, 15), (8, 12)], 3))  # Output: [(5, 15), (8, 12), (10, 20)]\nprint(min_k([(2, 3), (1, 1), (4, 4)], 1))  # Output: [(1, 1)]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n### Signature\ndef min_k(test_list, K):",
        "timestamp": "2025-10-17T17:01:38.491983",
        "response_time": "4.96",
        "context": "{\"function_name\": \"min_k\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 754,
        "solution": "```python\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    # Find the minimum length among the three lists\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Iterate over the range of the minimum length\n    for i in range(min_length):\n        # Check if the elements at the current index are the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # If they are, add the element to the common_elements list\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\n### Signature\ndef extract_index_list(l1, l2, l3):",
        "timestamp": "2025-10-17T17:01:40.746301",
        "response_time": "2.25",
        "context": "{\"function_name\": \"extract_index_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 755,
        "solution": "```python\ndef second_smallest(numbers):\n    if len(numbers) < 2:\n        return None  # Not enough elements to find a second smallest\n\n    # Initialize the smallest and second smallest with infinity\n    smallest = second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n\n    return second_smallest if second_smallest != float('inf') else None\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the second smallest number in a list.\n\n### Signature\ndef second_smallest(numbers):",
        "timestamp": "2025-10-17T17:01:42.302374",
        "response_time": "1.55",
        "context": "{\"function_name\": \"second_smallest\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 756,
        "solution": "```python\nimport re\n\ndef text_match_zero_one(text):\n    # Use regular expression to find a string that starts with 'a' followed by one or more 'b's\n    pattern = r'^a+b$'\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\n### Signature\ndef text_match_zero_one(text):",
        "timestamp": "2025-10-17T17:01:43.354462",
        "response_time": "1.05",
        "context": "{\"function_name\": \"text_match_zero_one\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 757,
        "solution": "```python\nfrom typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    # Initialize a counter for reverse pairs\n    count = 0\n    \n    # Iterate over each string in the list\n    for i in range(len(test_list)):\n        # Iterate over the remaining strings in the list\n        for j in range(i + 1, len(test_list)):\n            # Check if the current string is the reverse of the next string\n            if test_list[i] == test_list[j][::-1]:\n                # Increment the counter if a reverse pair is found\n                count += 1\n    \n    # Return the total count of reverse pairs\n    return count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\n### Signature\ndef count_reverse_pairs(test_list):",
        "timestamp": "2025-10-17T17:01:45.280470",
        "response_time": "1.92",
        "context": "{\"function_name\": \"count_reverse_pairs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 758,
        "solution": "```python\nfrom collections import defaultdict\n\ndef unique_sublists(list1):\n    # Initialize a dictionary to store the count of each tuple representation of sublists\n    sublist_count = defaultdict(int)\n    \n    # Iterate over each sublist in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple and increment its count in the dictionary\n        sublist_count[tuple(sublist)] += 1\n    \n    # Return the dictionary containing the count of each unique sublist\n    return dict(sublist_count)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n### Signature\ndef unique_sublists(list1):",
        "timestamp": "2025-10-17T17:01:46.757651",
        "response_time": "1.47",
        "context": "{\"function_name\": \"unique_sublists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 759,
        "solution": "```python\nimport re\n\ndef is_decimal(num):\n    # Regular expression to match a decimal number with a precision of 2\n    decimal_pattern = re.compile(r'^-?\\d+(\\.\\d{1,2})?$')\n    return bool(decimal_pattern.match(num))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\n### Signature\ndef is_decimal(num):",
        "timestamp": "2025-10-17T17:01:47.622167",
        "response_time": "0.86",
        "context": "{\"function_name\": \"is_decimal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 760,
        "solution": "```python\n###START===\nfrom typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\n### Signature\ndef unique_Element(arr):",
        "timestamp": "2025-10-17T17:01:48.257918",
        "response_time": "0.63",
        "context": "{\"function_name\": \"unique_Element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 762,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef check_monthnumber_number(monthnum3):\n    # Define a set of months that have 30 days\n    months_with_30_days = {4, 6, 9, 11}\n    \n    # Check if the given month number is in the set of months with 30 days\n    return monthnum3 in months_with_30_days\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n### Signature\ndef check_monthnumber_number(monthnum3):",
        "timestamp": "2025-10-17T17:01:49.629146",
        "response_time": "1.37",
        "context": "{\"function_name\": \"check_monthnumber_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 763,
        "solution": "```python\n###START===\nimport sys\n\ndef find_min_diff(arr, n):\n    if n < 2:\n        return -1  # Not enough elements to form a pair\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference with a large value\n    min_diff = sys.maxsize\n\n    # Iterate through the sorted array and find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\n### Signature\ndef find_min_diff(arr,n):",
        "timestamp": "2025-10-17T17:01:51.336006",
        "response_time": "1.70",
        "context": "{\"function_name\": \"find_min_diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 764,
        "solution": "```python\n###START===\ndef number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count number of digits in a given string.\n\n### Signature\ndef number_ctr(str):",
        "timestamp": "2025-10-17T17:01:52.048608",
        "response_time": "0.71",
        "context": "{\"function_name\": \"number_ctr\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 765,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef is_polite(n):\n    # A number is polite if it can be expressed as the sum of two or more consecutive positive integers\n    # The smallest polite number is 3 (1+2)\n    if n < 3:\n        return False\n    # Check if n is a perfect square\n    root = int(math.sqrt(n))\n    if root * root == n:\n        return True\n    # Check if n is of the form 4k + 2\n    if n % 4 == 2:\n        return True\n    return False\n\ndef nth_polite_number(n):\n    # Start checking from the smallest polite number\n    polite_number = 3\n    count = 0\n    while True:\n        if is_polite(polite_number):\n            count += 1\n            if count == n:\n                return polite_number\n        polite_number += 1\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\n### Signature\ndef is_polite(n):",
        "timestamp": "2025-10-17T17:01:54.722090",
        "response_time": "2.67",
        "context": "{\"function_name\": \"is_polite\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 766,
        "solution": "```python\ndef pair_wise(l1):\n    return list(zip(l1, l1[1:]))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to return a list of all pairs of consecutive items in a given list.\n\n### Signature\ndef pair_wise(l1):",
        "timestamp": "2025-10-17T17:01:55.193496",
        "response_time": "0.47",
        "context": "{\"function_name\": \"pair_wise\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 767,
        "solution": "```python\nfrom typing import List\n\ndef get_pairs_count(arr: List[int], sum: int) -> int:\n    count = 0\n    seen = set()\n    for num in arr:\n        complement = sum - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\n### Signature\ndef get_pairs_count(arr, sum):",
        "timestamp": "2025-10-17T17:01:56.234646",
        "response_time": "1.04",
        "context": "{\"function_name\": \"get_pairs_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 769,
        "solution": "```python\ndef Diff(li1, li2):\n    # Use set operations to find the difference between two lists\n    return list(set(li1) - set(li2))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to get the difference between two lists.\n\n### Signature\ndef Diff(li1,li2):",
        "timestamp": "2025-10-17T17:01:56.870947",
        "response_time": "0.63",
        "context": "{\"function_name\": \"Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 770,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef odd_num_sum(n) :\n    return sum((2*i + 1)**4 for i in range(n))\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\n### Signature\ndef odd_num_sum(n) :",
        "timestamp": "2025-10-17T17:01:57.577905",
        "response_time": "0.70",
        "context": "{\"function_name\": \"odd_num_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 771,
        "solution": "```python\n###START===\nimport re\n\ndef check_expression(exp):\n    # Remove all non-parentheses characters\n    exp = re.sub(r'[^()]', '', exp)\n    \n    # Initialize a counter for balance\n    balance = 0\n    \n    # Iterate through each character in the expression\n    for char in exp:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        # If balance goes negative, parentheses are not balanced\n        if balance < 0:\n            return False\n    \n    # If balance is zero, parentheses are balanced\n    return balance == 0\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\n### Signature\ndef check_expression(exp):",
        "timestamp": "2025-10-17T17:01:59.412502",
        "response_time": "1.83",
        "context": "{\"function_name\": \"check_expression\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 772,
        "solution": "```python\n###START===\nimport re\n\ndef remove_length(test_str, K):\n    # Use regular expression to find all words with length K and remove them\n    result = re.sub(r'\\b\\w{' + str(K) + r'}\\b', '', test_str)\n    return result\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove all the words with k length in the given string.\n\n### Signature\ndef remove_length(test_str, K):",
        "timestamp": "2025-10-17T17:02:00.388685",
        "response_time": "0.97",
        "context": "{\"function_name\": \"remove_length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 773,
        "solution": "```python\n###START===\nimport re\n\ndef occurance_substring(text, pattern):\n    # Use regular expression to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # If no matches are found, return None\n    if not matches:\n        return None\n    \n    # Collect the start and end positions of each match\n    positions = [(match.start(), match.end()) for match in matches]\n    \n    # Return the positions as a list\n    return positions\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n### Signature\ndef occurance_substring(text,pattern):",
        "timestamp": "2025-10-17T17:02:01.928083",
        "response_time": "1.54",
        "context": "{\"function_name\": \"occurance_substring\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 775,
        "solution": "```python\ndef odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\n### Signature\ndef odd_position(nums):",
        "timestamp": "2025-10-17T17:02:02.627368",
        "response_time": "0.70",
        "context": "{\"function_name\": \"odd_position\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 776,
        "solution": "```python\n###START===\nimport string\n\ndef count_vowels(test_str):\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\n### Signature\ndef count_vowels(test_str):",
        "timestamp": "2025-10-17T17:02:03.933065",
        "response_time": "1.30",
        "context": "{\"function_name\": \"count_vowels\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 777,
        "solution": "```python\ndef find_sum(arr):\n    # Create a dictionary to count occurrences of each element\n    count_dict = {}\n    \n    # Count occurrences of each element in the list\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Calculate the sum of elements that appear only once\n    sum_non_repeated = sum(num for num, count in count_dict.items() if count == 1)\n    \n    return sum_non_repeated\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of non-repeated elements in a given list.\n\n### Signature\ndef find_sum(arr):",
        "timestamp": "2025-10-17T17:02:05.483767",
        "response_time": "1.55",
        "context": "{\"function_name\": \"find_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 778,
        "solution": "```python\nfrom typing import List\n\ndef pack_consecutive_duplicates(list1: List) -> List[List]:\n    if not list1:\n        return []\n\n    result = []\n    current_sublist = [list1[0]]\n\n    for i in range(1, len(list1)):\n        if list1[i] == current_sublist[-1]:\n            current_sublist.append(list1[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [list1[i]]\n\n    result.append(current_sublist)\n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\n### Signature\ndef pack_consecutive_duplicates(list1):",
        "timestamp": "2025-10-17T17:02:07.035234",
        "response_time": "1.55",
        "context": "{\"function_name\": \"pack_consecutive_duplicates\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 779,
        "solution": "```python\nfrom collections import defaultdict\n\ndef unique_sublists(list1):\n    # Initialize a defaultdict to count occurrences of each tuple\n    count_dict = defaultdict(int)\n    \n    # Iterate over each sublist in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple and increment its count\n        count_dict[tuple(sublist)] += 1\n    \n    # Convert the defaultdict to a regular dictionary and return it\n    return dict(count_dict)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\n### Signature\ndef unique_sublists(list1):",
        "timestamp": "2025-10-17T17:02:08.407963",
        "response_time": "1.37",
        "context": "{\"function_name\": \"unique_sublists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 780,
        "solution": "```python\nfrom itertools import combinations\n\ndef find_combinations(test_list):\n    result = []\n    for r in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, r):\n            result.append(sum(combo))\n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\n### Signature\ndef find_combinations(test_list):",
        "timestamp": "2025-10-17T17:02:09.304420",
        "response_time": "0.89",
        "context": "{\"function_name\": \"find_combinations\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 781,
        "solution": "```python\n###START===\nfrom math import sqrt\n\ndef count_divisors(n) :\n    count = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count % 2 == 0\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\n### Signature\ndef count_divisors(n) :",
        "timestamp": "2025-10-17T17:02:10.505776",
        "response_time": "1.20",
        "context": "{\"function_name\": \"count_divisors\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 782,
        "solution": "```python\n###START===\nfrom typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(n):\n        # Calculate the number of subarrays starting at index i with odd length\n        odd_length_subarrays = (n - i) // 2\n        # Add the contribution of this subarray to the total sum\n        total_sum += odd_length_subarrays * arr[i]\n    \n    return total_sum\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\n### Signature\ndef odd_length_sum(arr):",
        "timestamp": "2025-10-17T17:02:12.037750",
        "response_time": "1.53",
        "context": "{\"function_name\": \"odd_length_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 783,
        "solution": "```python\nimport math\n\ndef rgb_to_hsv(r, g, b):\n    # Normalize RGB values to the range [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    # Find the maximum and minimum values in the RGB array\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    # Calculate the hue\n    if diff == 0:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    else:  # max_val == b\n        h = (60 * ((r - g) / diff) + 240) % 360\n    \n    # Calculate the saturation\n    if max_val == 0:\n        s = 0\n    else:\n        s = (diff / max_val) * 100\n    \n    # Calculate the value\n    v = max_val * 100\n    \n    return h, s, v\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n### Signature\ndef rgb_to_hsv(r, g, b):",
        "timestamp": "2025-10-17T17:02:15.977502",
        "response_time": "3.94",
        "context": "{\"function_name\": \"rgb_to_hsv\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 784,
        "solution": "```python\ndef mul_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n    \n    if even_count == 0:\n        return \"No even number found\"\n    if odd_count == 0:\n        return \"No odd number found\"\n    \n    return even_product * odd_product\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the product of first even and odd number of a given list.\n\n### Signature\ndef mul_even_odd(list1):",
        "timestamp": "2025-10-17T17:02:17.702954",
        "response_time": "1.72",
        "context": "{\"function_name\": \"mul_even_odd\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 785,
        "solution": "```python\ndef tuple_str_int(test_str):\n    # Split the string by commas and convert each element to an integer\n    return tuple(int(ele) for ele in test_str.split(','))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert tuple string to integer tuple.\n\n### Signature\ndef tuple_str_int(test_str):",
        "timestamp": "2025-10-17T17:02:18.367421",
        "response_time": "0.66",
        "context": "{\"function_name\": \"tuple_str_int\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 786,
        "solution": "```python\ndef right_insertion(a, x):\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\n### Signature\ndef right_insertion(a, x):",
        "timestamp": "2025-10-17T17:02:19.394332",
        "response_time": "1.02",
        "context": "{\"function_name\": \"right_insertion\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 787,
        "solution": "```python\nimport re\n\ndef text_match_three(text):\n    # Use regular expression to find a string that starts with 'a' followed by exactly three 'b's\n    pattern = r'^a{1}b{3}$'\n    return bool(re.search(pattern, text))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by three 'b'.\n\n### Signature\ndef text_match_three(text):",
        "timestamp": "2025-10-17T17:02:20.300403",
        "response_time": "0.90",
        "context": "{\"function_name\": \"text_match_three\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 788,
        "solution": "```python\ndef new_tuple(test_list, test_str):\n    # Convert the string to a tuple\n    str_tuple = tuple(test_str)\n    # Create a new tuple by combining the list and the string tuple\n    new_tuple = test_list + str_tuple\n    return new_tuple\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to create a new tuple from the given string and list.\n\n### Signature\ndef new_tuple(test_list, test_str):",
        "timestamp": "2025-10-17T17:02:21.231595",
        "response_time": "0.93",
        "context": "{\"function_name\": \"new_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 790,
        "solution": "```python\ndef even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether every even index contains even numbers of a given list.\n\n### Signature\ndef even_position(nums):",
        "timestamp": "2025-10-17T17:02:21.970517",
        "response_time": "0.74",
        "context": "{\"function_name\": \"even_position\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 791,
        "solution": "```python\ndef remove_nested(test_tup):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each element in the test tuple\n    for element in test_tup:\n        # Check if the element is a tuple\n        if isinstance(element, tuple):\n            # If it is a tuple, recursively call the function on it\n            result.extend(remove_nested(element))\n        else:\n            # If it is not a tuple, append it to the result list\n            result.append(element)\n    \n    # Return the result list as a tuple\n    return tuple(result)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove tuples from the given tuple.\n\n### Signature\ndef remove_nested(test_tup):",
        "timestamp": "2025-10-17T17:02:23.678409",
        "response_time": "1.71",
        "context": "{\"function_name\": \"remove_nested\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 792,
        "solution": "```python\ndef count_list(input_list):\n    return len(input_list)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of lists in a given number of lists.\n\n### Signature\ndef count_list(input_list):",
        "timestamp": "2025-10-17T17:02:24.058101",
        "response_time": "0.38",
        "context": "{\"function_name\": \"count_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 793,
        "solution": "```python\ndef last(arr, x):\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1  # Move to the right to find the last occurrence\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the last position of an element in a sorted array.\n\n### Signature\ndef last(arr,x):",
        "timestamp": "2025-10-17T17:02:25.615889",
        "response_time": "1.55",
        "context": "{\"function_name\": \"last\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 794,
        "solution": "```python\nimport re\n\ndef text_starta_endb(text):\n    # Use regular expression to match the pattern\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n### Signature\ndef text_starta_endb(text):",
        "timestamp": "2025-10-17T17:02:26.363620",
        "response_time": "0.74",
        "context": "{\"function_name\": \"text_starta_endb\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 796,
        "solution": "```python\n###START===\ndef return_sum(dict):\n    return sum(dict.values())\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite function to find the sum of all items in the given dictionary.\n\n### Signature\ndef return_sum(dict):",
        "timestamp": "2025-10-17T17:02:26.838789",
        "response_time": "0.47",
        "context": "{\"function_name\": \"return_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 797,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef sum_odd(n):\n    return sum(i for i in range(1, n+1, 2))\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\n### Signature\ndef sum_odd(n):",
        "timestamp": "2025-10-17T17:02:27.544184",
        "response_time": "0.70",
        "context": "{\"function_name\": \"sum_in_range\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 798,
        "solution": "```python\ndef _sum(arr):\n    return sum(arr)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of an array.\n\n### Signature\ndef _sum(arr):",
        "timestamp": "2025-10-17T17:02:27.952216",
        "response_time": "0.41",
        "context": "{\"function_name\": \"_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 799,
        "solution": "```python\ndef left_rotate(n, d):\n    # Ensure d is within the range of 0 to 31\n    d = d % 32\n    \n    # Perform the left rotation\n    return (n << d) | (n >> (32 - d))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n### Signature\ndef left_rotate(n,d):",
        "timestamp": "2025-10-17T17:02:28.870480",
        "response_time": "0.92",
        "context": "{\"function_name\": \"left_rotate\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 800,
        "solution": "```python\ndef remove_all_spaces(text):\n    return text.replace(\" \", \"\")\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove all whitespaces from a string.\n\n### Signature\ndef remove_all_spaces(text):",
        "timestamp": "2025-10-17T17:02:29.280709",
        "response_time": "0.41",
        "context": "{\"function_name\": \"remove_all_spaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 801,
        "solution": "```python\ndef test_three_equal(x, y, z):\n    # Check if all three numbers are equal\n    if x == y == z:\n        return 3\n    else:\n        return 0\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of equal numbers from three given integers.\n\n### Signature\ndef test_three_equal(x,y,z):",
        "timestamp": "2025-10-17T17:02:30.005850",
        "response_time": "0.72",
        "context": "{\"function_name\": \"test_three_equal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 802,
        "solution": "```python\nfrom typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    if not arr:\n        return 0\n\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        mid = left + (right - left) // 2\n\n        # Check if mid is the smallest element\n        if mid > 0 and arr[mid] < arr[mid - 1]:\n            return mid\n\n        # Check if right is the smallest element\n        if mid < len(arr) - 1 and arr[mid] > arr[mid + 1]:\n            return mid + 1\n\n        # Decide whether to go to the left or right half\n        if arr[mid] >= arr[left]:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If no rotation is found, the array is sorted in ascending order\n    return 0\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n### Signature\ndef count_rotation(arr):",
        "timestamp": "2025-10-17T17:02:32.599456",
        "response_time": "2.59",
        "context": "{\"function_name\": \"count_rotation\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 803,
        "solution": "```python\n###START===\nimport math\n\ndef is_perfect_square(n) :\n    if n < 0 :\n        return False\n    root = math.isqrt(n)\n    return root * root == n\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\n### Signature\ndef is_perfect_square(n) :",
        "timestamp": "2025-10-17T17:02:33.418813",
        "response_time": "0.82",
        "context": "{\"function_name\": \"is_perfect_square\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 804,
        "solution": "```python\n###START===\nfrom typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the product of numbers in a list is even or not.\n\n### Signature\ndef is_product_even(arr):",
        "timestamp": "2025-10-17T17:02:34.261120",
        "response_time": "0.84",
        "context": "{\"function_name\": \"is_product_even\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 805,
        "solution": "```python\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\n### Signature\ndef max_sum_list(lists):",
        "timestamp": "2025-10-17T17:02:35.455759",
        "response_time": "1.19",
        "context": "{\"function_name\": \"max_sum_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 806,
        "solution": "```python\ndef max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find maximum run of uppercase characters in the given string.\n\n### Signature\ndef max_run_uppercase(test_str):",
        "timestamp": "2025-10-17T17:02:36.582613",
        "response_time": "1.12",
        "context": "{\"function_name\": \"max_run_uppercase\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 807,
        "solution": "```python\ndef first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the first odd number in a given list of numbers.\n\n### Signature\ndef first_odd(nums):",
        "timestamp": "2025-10-17T17:02:37.245472",
        "response_time": "0.66",
        "context": "{\"function_name\": \"first_odd\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 808,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef check_K(test_tup, K):\n    # Check if K is in any of the tuples\n    return any(K in tup for tup in test_tup)\n\n# Example usage:\ntest_tup = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nK = 5\nprint(check_K(test_tup, K))  # Output: True\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given tuples contain the k or not.\n\n### Signature\ndef check_K(test_tup, K):",
        "timestamp": "2025-10-17T17:02:38.760953",
        "response_time": "1.51",
        "context": "{\"function_name\": \"check_K\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half",
        "dataset_row_id": 809,
        "solution": "```python\ndef check_smaller(test_tup1, test_tup2):\n    # Check if each element of test_tup2 is smaller than the corresponding element in test_tup1\n    return all(x < y for x, y in zip(test_tup1, test_tup2))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n### Signature\ndef check_smaller(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T17:02:39.740031",
        "response_time": "0.98",
        "context": "{\"function_name\": \"check_smaller\"}"
    }
]