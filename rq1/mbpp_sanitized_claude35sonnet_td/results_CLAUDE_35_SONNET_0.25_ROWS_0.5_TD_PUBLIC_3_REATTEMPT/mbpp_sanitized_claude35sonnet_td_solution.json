[
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 2,
        "solution": "===START===\ndef similar_elements(test_tup1, test_tup2):\n    # Convert tuples to sets and find intersection\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return tuple(set1.intersection(set2))\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):\n\n### Test\nassert set(candidate((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))",
        "timestamp": "2025-08-14T07:58:00.741607",
        "response_time": "2.16",
        "context": "{\"function_name\": \"similar_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 3,
        "solution": "===START===\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):\n\n### Test\nassert candidate(2) == False\nassert candidate(10) == True",
        "timestamp": "2025-08-14T07:58:03.900295",
        "response_time": "3.16",
        "context": "{\"function_name\": \"is_not_prime\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 4,
        "solution": "===START===\nimport heapq\nfrom typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    # Convert to negative numbers for max heap behavior\n    nums = [-x for x in nums]\n    # Create heap from negative numbers\n    heapq.heapify(nums)\n    # Get n smallest (which are actually largest when negated back)\n    result = []\n    for _ in range(n):\n        if nums:\n            result.append(-heapq.heappop(nums))\n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):\n\n### Test\nassert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]",
        "timestamp": "2025-08-14T07:58:08.209505",
        "response_time": "4.31",
        "context": "{\"function_name\": \"heap_queue_largest\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 6,
        "solution": "===START===\ndef is_Power_Of_Two(x, y):\n    # XOR the two numbers to get positions where they differ\n    xor_result = x ^ y\n    \n    # Count the number of set bits (1s) in XOR result\n    # If only one bit is different, XOR will have exactly one '1'\n    count = bin(xor_result).count('1')\n    \n    # Return True if exactly one bit differs\n    return count == 1\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):\n\n### Test\nassert candidate(13,9) == True\nassert candidate(15,8) == False\nassert candidate(2,4) == False",
        "timestamp": "2025-08-14T07:58:11.854256",
        "response_time": "3.64",
        "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 7,
        "solution": "===START===\nimport re\n\ndef find_char_long(text):\n    # Find all words that are 4 or more characters long using regex\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):\n\n### Test\nassert set(candidate('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])",
        "timestamp": "2025-08-14T07:58:14.263363",
        "response_time": "2.41",
        "context": "{\"function_name\": \"find_char_long\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 8,
        "solution": "===START===\ndef square_nums(nums):\n    return [num * num for num in nums]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
        "timestamp": "2025-08-14T07:58:17.010714",
        "response_time": "2.75",
        "context": "{\"function_name\": \"square_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 9,
        "solution": "===START===\ndef find_Rotations(str):\n    if not str:\n        return 0\n    \n    n = len(str)\n    if n <= 1:\n        return 1\n        \n    rotations = 1\n    while rotations < n:\n        # Create rotated string by moving first character to end\n        rotated = str[rotations:] + str[:rotations]\n        if rotated == str:\n            return rotations\n        rotations += 1\n    \n    return n\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):\n\n### Test\nassert candidate(\"aaaa\") == 1",
        "timestamp": "2025-08-14T07:58:21.201052",
        "response_time": "4.19",
        "context": "{\"function_name\": \"find_Rotations\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 11,
        "solution": "===START===\ndef remove_Occ(s, ch):\n    # Find first occurrence\n    first = s.find(ch)\n    \n    # If character not found, return original string\n    if first == -1:\n        return s\n        \n    # Find last occurrence\n    last = s.rfind(ch)\n    \n    # If only one occurrence, remove it and return\n    if first == last:\n        return s[:first] + s[first+1:]\n    \n    # Remove both first and last occurrences\n    return s[:first] + s[first+1:last] + s[last+1:]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):\n\n### Test\nassert candidate(\"hello\",\"l\") == \"heo\"",
        "timestamp": "2025-08-14T07:58:25.983476",
        "response_time": "4.78",
        "context": "{\"function_name\": \"remove_Occ\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 12,
        "solution": "===START===\ndef sort_matrix(M):\n    # Create a list of tuples where each tuple contains row sum and the original row\n    row_sums = [(sum(row), row) for row in M]\n    # Sort based on row sums\n    row_sums.sort(key=lambda x: x[0])\n    # Return only the sorted rows\n    return [row for _, row in row_sums]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):\n\n### Test\nassert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
        "timestamp": "2025-08-14T07:58:30.223155",
        "response_time": "4.24",
        "context": "{\"function_name\": \"sort_matrix\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 14,
        "solution": "===START===\ndef find_Volume(l,b,h):\n    # Volume of triangular prism = (1/2 * base * height) * length\n    # where base and height are of the triangle face\n    # and length is the length of the prism\n    volume = (1/2 * b * h) * l\n    return volume\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :\n\n### Test\nassert candidate(10,8,6) == 240",
        "timestamp": "2025-08-14T07:58:32.465054",
        "response_time": "2.24",
        "context": "{\"function_name\": \"find_Volume\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 16,
        "solution": "===START===\nimport re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):\n\n### Test\nassert candidate(\"aab_cbbbc\")==(True)",
        "timestamp": "2025-08-14T07:58:34.445443",
        "response_time": "1.98",
        "context": "{\"function_name\": \"text_lowercase_underscore\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 17,
        "solution": "===START===\ndef square_perimeter(a):\n    return 4 * a\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):\n\n### Test\nassert candidate(10)==40",
        "timestamp": "2025-08-14T07:58:36.356245",
        "response_time": "1.91",
        "context": "{\"function_name\": \"square_perimeter\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 18,
        "solution": "===START===\ndef str_to_list(string):\n    if not isinstance(string, tuple):\n        return string\n    \n    str1, str2 = string\n    result = ''\n    \n    # Create a set of characters from the second string for O(1) lookup\n    chars_to_remove = set(str2)\n    \n    # Add characters from first string only if they're not in the second string\n    for char in str1:\n        if char not in chars_to_remove:\n            result += char\n            \n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):\n\n### Test\nassert candidate(\"probasscurve\", \"pros\") == \"\"\"bacuve\"\"\"",
        "timestamp": "2025-08-14T07:58:39.452895",
        "response_time": "3.10",
        "context": "{\"function_name\": \"remove_dirty_chars\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 19,
        "solution": "===START===\ndef test_duplicate(arraynums):\n    # Convert array to set to remove duplicates\n    # Compare lengths to determine if duplicates existed\n    return len(arraynums) != len(set(arraynums))\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):\n\n### Test\nassert candidate(([1,2,3,4,5]))==False",
        "timestamp": "2025-08-14T07:58:41.851883",
        "response_time": "2.40",
        "context": "{\"function_name\": \"test_duplicate\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 20,
        "solution": "Let me help write a function to check if a number is a Woodall number.\n\nA Woodall number is a number of the form n * 2^n - 1, where n is a positive integer. For example:\n- When n=1: 1 * 2^1 - 1 = 1\n- When n=2: 2 * 2^2 - 1 = 7\n- When n=3: 3 * 2^3 - 1 = 23\n- When n=4: 4 * 2^4 - 1 = 63\n\nHere's the solution:\n\n===START===\nfrom math import log2\n\ndef is_woodall(x):\n    if x < 1:\n        return False\n    \n    # For a number to be Woodall number, we need to find if there exists\n    # a positive integer n such that n * 2^n - 1 = x\n    # Therefore, x + 1 = n * 2^n\n    \n    x_plus_1 = x + 1\n    \n    # Try values of n starting from 1\n    n = 1\n    while n * (1 << n) <= x_plus_1:\n        if n * (1 << n) == x_plus_1:\n            return True\n        n += 1\n    \n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):\n\n### Test\nassert candidate(383) == True",
        "timestamp": "2025-08-14T07:58:48.300481",
        "response_time": "6.45",
        "context": "{\"function_name\": \"is_woodall\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 56,
        "solution": "===START===\ndef rev(num):\n    # Convert number to string to reverse it\n    num_str = str(num)\n    # Reverse the string and convert back to integer\n    reversed_num = int(num_str[::-1])\n    # Check if the original number is one less than twice its reverse\n    return num == (2 * reversed_num - 1)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):\n\n### Test\nassert candidate(70) == False",
        "timestamp": "2025-08-14T07:58:51.835988",
        "response_time": "3.53",
        "context": "{\"function_name\": \"check\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 57,
        "solution": "===START===\nfrom typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    # Convert integers to strings for easier comparison\n    str_nums = [str(num) for num in arr]\n    \n    # Custom comparison function for sorting\n    def compare(a: str, b: str) -> int:\n        if a + b > b + a:\n            return -1\n        return 1\n    \n    # Sort using custom comparison\n    str_nums.sort(key=lambda x: x, reverse=True)\n    \n    # Join the sorted strings and convert back to integer\n    return int(''.join(str_nums))\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :\n\n### Test\nassert candidate([1,2,3]) == 321",
        "timestamp": "2025-08-14T07:58:54.976686",
        "response_time": "3.14",
        "context": "{\"function_name\": \"find_Max_Num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 58,
        "solution": "===START===\ndef opposite_Signs(x, y):\n    # Using multiplication to check signs\n    # If product is negative, numbers have opposite signs\n    return (x * y) < 0\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):\n\n### Test\nassert candidate(1,-2) == True\nassert candidate(3,2) == False",
        "timestamp": "2025-08-14T07:58:57.792669",
        "response_time": "2.82",
        "context": "{\"function_name\": \"opposite_Signs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 59,
        "solution": "===START===\ndef is_octagonal(n):\n    \"\"\"\n    Returns the nth octagonal number.\n    An octagonal number is calculated using the formula: n(3n-2)\n    where n is the position of the number in the sequence.\n    \"\"\"\n    return n * (3 * n - 2)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):\n\n### Test\nassert candidate(5) == 65",
        "timestamp": "2025-08-14T07:59:01.961649",
        "response_time": "4.17",
        "context": "{\"function_name\": \"is_octagonal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 61,
        "solution": "===START===\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count += 1\n    return count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):\n\n### Test\nassert candidate('112112') == 6",
        "timestamp": "2025-08-14T07:59:04.285324",
        "response_time": "2.32",
        "context": "{\"function_name\": \"count_Substrings\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 62,
        "solution": "===START===\ndef smallest_num(xs):\n    if not xs:\n        return None\n    return min(xs)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):\n\n### Test\nassert candidate([10, 20, 1, 45, 99]) == 1",
        "timestamp": "2025-08-14T07:59:05.549274",
        "response_time": "1.26",
        "context": "{\"function_name\": \"smallest_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 63,
        "solution": "===START===\ndef max_difference(test_list):\n    # Calculate absolute difference for each tuple\n    differences = [abs(x - y) for x, y in test_list]\n    \n    # Return the maximum difference found\n    return max(differences)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):\n\n### Test\nassert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
        "timestamp": "2025-08-14T07:59:09.806238",
        "response_time": "4.26",
        "context": "{\"function_name\": \"max_difference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 64,
        "solution": "===START===\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):\n\n### Test\nassert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
        "timestamp": "2025-08-14T07:59:12.323773",
        "response_time": "2.52",
        "context": "{\"function_name\": \"subject_marks\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 65,
        "solution": "===START===\nfrom typing import Union, List\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):\n\n### Test\nassert candidate(([1, 2, [3,4],[5,6]]))==21",
        "timestamp": "2025-08-14T07:59:15.677072",
        "response_time": "3.35",
        "context": "{\"function_name\": \"recursive_list_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 66,
        "solution": "===START===\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):\n\n### Test\nassert candidate([1,-2,3,-4]) == 2",
        "timestamp": "2025-08-14T07:59:17.618040",
        "response_time": "1.94",
        "context": "{\"function_name\": \"pos_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 67,
        "solution": "===START===\ndef bell_number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Initialize first value\n    bell[0][0] = 1\n    \n    # Fill entries using the Bell recurrence relation\n    for i in range(1, n+1):\n        # First value in row is last value in previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill remaining values using the relation\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):\n\n### Test\nassert candidate(2)==2",
        "timestamp": "2025-08-14T07:59:21.242278",
        "response_time": "3.62",
        "context": "{\"function_name\": \"bell_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 68,
        "solution": "===START===\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            increasing = False\n        if A[i] > A[i-1]:\n            decreasing = False\n            \n    return increasing or decreasing\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):\n\n### Test\nassert candidate([6, 5, 4, 4]) == True",
        "timestamp": "2025-08-14T07:59:23.605114",
        "response_time": "2.36",
        "context": "{\"function_name\": \"is_Monotonic\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 69,
        "solution": "===START===\nfrom typing import List\n\ndef is_sublist(l: List, s: List) -> bool:\n    if not s:  # Empty sublist is always a sublist\n        return True\n    \n    if len(s) > len(l):  # Sublist cannot be longer than main list\n        return False\n        \n    # Check for consecutive elements matching\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n            \n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):\n\n### Test\nassert candidate([2,4,3,5,7],[3,7])==False",
        "timestamp": "2025-08-14T07:59:27.282401",
        "response_time": "3.68",
        "context": "{\"function_name\": \"is_sublist\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 70,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef find_equal_tuple(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    \n    first_tuple_len = len(Input[0])\n    return all(len(t) == first_tuple_len for t in Input)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):\n\n### Test\nassert candidate([(11, 22, 33), (44, 55, 66)]) == True",
        "timestamp": "2025-08-14T07:59:30.315300",
        "response_time": "3.03",
        "context": "{\"function_name\": \"get_equal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 71,
        "solution": "===START===\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):\n\n### Test\nassert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
        "timestamp": "2025-08-14T07:59:34.079036",
        "response_time": "3.76",
        "context": "{\"function_name\": \"comb_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 72,
        "solution": "===START===\ndef dif_Square(n):\n    # For any number n to be represented as difference of squares,\n    # n = a\u00b2 - b\u00b2 where a and b are integers\n    # This can be factored as n = (a+b)(a-b)\n    # Since a+b and a-b are factors of n, we need to find factors that sum to an even number\n    \n    # Special case for 0\n    if n == 0:\n        return True\n        \n    # For negative numbers, if -n can be represented as difference of squares,\n    # then n can also be represented (by swapping the squares)\n    n = abs(n)\n    \n    # Check all possible factors\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            # Get the other factor\n            j = n // i\n            # If sum of factors is even\n            if (i + j) % 2 == 0:\n                return True\n    \n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):\n\n### Test\nassert candidate(5) == True",
        "timestamp": "2025-08-14T07:59:39.171618",
        "response_time": "5.09",
        "context": "{\"function_name\": \"dif_Square\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 74,
        "solution": "===START===\ndef is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n            \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n            \n    return True\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):\n\n### Test\nassert candidate([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
        "timestamp": "2025-08-14T07:59:44.252516",
        "response_time": "5.08",
        "context": "{\"function_name\": \"is_samepatterns\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 75,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all(num % K == 0 for num in tup)]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):\n\n### Test\nassert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
        "timestamp": "2025-08-14T07:59:46.642726",
        "response_time": "2.39",
        "context": "{\"function_name\": \"find_tuples\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 77,
        "solution": "===START===\ndef is_Diff(n):\n    # Convert number to string to process digits\n    num_str = str(n)\n    \n    # Initialize sums for alternating positions\n    even_sum = 0\n    odd_sum = 0\n    \n    # Process each digit alternately\n    for i in range(len(num_str)):\n        if i % 2 == 0:\n            even_sum += int(num_str[i])\n        else:\n            odd_sum += int(num_str[i])\n    \n    # A number is divisible by 11 if the difference between\n    # sum of alternating digits is either 0 or divisible by 11\n    diff = abs(even_sum - odd_sum)\n    \n    return diff == 0 or diff % 11 == 0\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):\n\n### Test\nassert candidate (12345) == False",
        "timestamp": "2025-08-14T07:59:51.631860",
        "response_time": "4.99",
        "context": "{\"function_name\": \"is_Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 79,
        "solution": "===START===\ndef word_len(s):\n    return len(s) % 2 != 0\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):\n\n### Test\nassert candidate(\"Hadoop\") == False",
        "timestamp": "2025-08-14T07:59:53.319948",
        "response_time": "1.69",
        "context": "{\"function_name\": \"word_len\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 80,
        "solution": "===START===\ndef tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number using the formula:\n    T(n) = n(n+1)(n+2)/6\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):\n\n### Test\nassert candidate(5) == 35",
        "timestamp": "2025-08-14T07:59:55.299508",
        "response_time": "1.98",
        "context": "{\"function_name\": \"tetrahedral_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 82,
        "solution": "===START===\nimport math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * r**3\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 4188.790204786391, rel_tol=0.001)",
        "timestamp": "2025-08-14T07:59:56.734504",
        "response_time": "1.43",
        "context": "{\"function_name\": \"volume_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 83,
        "solution": "===START===\ndef get_Char(strr):\n    # Calculate sum of ASCII values of all characters\n    ascii_sum = sum(ord(char) for char in strr)\n    \n    # Take modulo 26 to get a value between 0 and 25\n    mod_value = ascii_sum % 26\n    \n    # Convert to corresponding character (a=0, b=1, ..., z=25)\n    # Add 97 to get lowercase ASCII value\n    result_char = chr(mod_value + 97)\n    \n    return result_char\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):\n\n### Test\nassert candidate(\"abc\") == \"f\"",
        "timestamp": "2025-08-14T08:00:00.525061",
        "response_time": "3.79",
        "context": "{\"function_name\": \"get_Char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 84,
        "solution": "===START===\ndef sequence(n):\n    if n <= 0:\n        return 0\n    if n <= 2:\n        return 1\n    \n    # Initialize array to store sequence values\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = newman_conway[2] = 1\n    \n    # Generate sequence up to nth number\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i-1]] + newman_conway[i - newman_conway[i-1]]\n    \n    return newman_conway[n]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):\n\n### Test\nassert candidate(10) == 6",
        "timestamp": "2025-08-14T08:00:03.977540",
        "response_time": "3.45",
        "context": "{\"function_name\": \"sequence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 85,
        "solution": "===START===\nimport math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r * r\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 1256.6370614359173, rel_tol=0.001)",
        "timestamp": "2025-08-14T08:00:06.218032",
        "response_time": "2.24",
        "context": "{\"function_name\": \"surfacearea_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 86,
        "solution": "===START===\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Returns the nth centered hexagonal number.\n    A centered hexagonal number is the number of points in a hexagonal pattern with a point in the center.\n    The formula for nth centered hexagonal number is: 3n(n-1) + 1\n    \"\"\"\n    return 3 * n * (n - 1) + 1\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):\n\n### Test\nassert candidate(10) == 271",
        "timestamp": "2025-08-14T08:00:09.209138",
        "response_time": "2.99",
        "context": "{\"function_name\": \"centered_hexagonal_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 87,
        "solution": "===START===\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\n### Test\nassert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={\"\"\"B\"\"\": \"\"\"Black\"\"\", \"\"\"R\"\"\": \"\"\"Red\"\"\", \"\"\"P\"\"\": \"\"\"Pink\"\"\", \"\"\"G\"\"\": \"\"\"Green\"\"\", \"\"\"W\"\"\": \"\"\"White\"\"\", \"\"\"O\"\"\": \"\"\"Orange\"\"\"}",
        "timestamp": "2025-08-14T08:00:11.642653",
        "response_time": "2.43",
        "context": "{\"function_name\": \"merge_dictionaries_three\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 88,
        "solution": "===START===\nfrom collections import defaultdict\n\ndef freq_count(list1):\n    frequency = defaultdict(int)\n    for item in list1:\n        frequency[item] += 1\n    return dict(frequency)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):\n\n### Test\nassert candidate([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})",
        "timestamp": "2025-08-14T08:00:15.109822",
        "response_time": "3.47",
        "context": "{\"function_name\": \"freq_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 89,
        "solution": "===START===\ndef closest_num(N):\n    return N - 1\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):\n\n### Test\nassert candidate(11) == 10",
        "timestamp": "2025-08-14T08:00:16.869342",
        "response_time": "1.75",
        "context": "{\"function_name\": \"closest_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 90,
        "solution": "===START===\ndef len_log(list1):\n    if not list1:\n        return 0\n    return len(max(list1, key=len))\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):\n\n### Test\nassert candidate([\"python\",\"PHP\",\"bigdata\"]) == 7",
        "timestamp": "2025-08-14T08:00:20.290823",
        "response_time": "3.42",
        "context": "{\"function_name\": \"len_log\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 91,
        "solution": "===START===\ndef find_substring(str1, sub_str):\n    \"\"\"\n    Check if a substring is present in any string from a list of strings\n    \n    Args:\n        str1: List of strings to search in\n        sub_str: Substring to search for\n        \n    Returns:\n        bool: True if substring is found, False otherwise\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):\n\n### Test\nassert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
        "timestamp": "2025-08-14T08:00:25.103677",
        "response_time": "4.81",
        "context": "{\"function_name\": \"find_substring\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 92,
        "solution": "===START===\ndef is_undulating(n):\n    # Convert number to string for easier digit comparison\n    num_str = str(n)\n    \n    # Undulating number must have at least 3 digits\n    if len(num_str) < 3:\n        return False\n    \n    # Check if number only consists of two alternating digits\n    first = num_str[0]\n    second = num_str[1]\n    \n    # If first two digits are same, it's not undulating\n    if first == second:\n        return False\n    \n    # Check if digits alternate between first and second\n    for i in range(len(num_str)):\n        if i % 2 == 0 and num_str[i] != first:\n            return False\n        if i % 2 == 1 and num_str[i] != second:\n            return False\n    \n    return True\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):\n\n### Test\nassert candidate(1212121) == True",
        "timestamp": "2025-08-14T08:00:30.458695",
        "response_time": "5.35",
        "context": "{\"function_name\": \"is_undulating\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 93,
        "solution": "===START===\ndef power(a, b):\n    return a ** b\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):\n\n### Test\nassert candidate(3,4) == 81",
        "timestamp": "2025-08-14T08:00:32.968440",
        "response_time": "2.51",
        "context": "{\"function_name\": \"power\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 94,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    return min(test_list, key=lambda x: x[1])[0]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):\n\n### Test\nassert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
        "timestamp": "2025-08-14T08:00:36.468691",
        "response_time": "3.50",
        "context": "{\"function_name\": \"index_minimum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 95,
        "solution": "===START===\ndef Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):\n\n### Test\nassert candidate([[1],[1,2]]) == 1",
        "timestamp": "2025-08-14T08:00:39.039580",
        "response_time": "2.57",
        "context": "{\"function_name\": \"Find_Min_Length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 96,
        "solution": "===START===\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):\n\n### Test\nassert candidate(15) == 4",
        "timestamp": "2025-08-14T08:00:42.334393",
        "response_time": "3.29",
        "context": "{\"function_name\": \"divisor\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 97,
        "solution": "===START===\nfrom collections import Counter\nfrom typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    # Flatten the list of lists\n    flattened = [item for sublist in list1 for item in sublist]\n    # Count frequency of each element\n    return dict(Counter(flattened))\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):\n\n### Test\nassert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
        "timestamp": "2025-08-14T08:00:45.549110",
        "response_time": "3.21",
        "context": "{\"function_name\": \"frequency_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 98,
        "solution": "===START===\nfrom typing import Tuple, Union\nfrom functools import reduce\nimport operator\n\ndef multiply_num(numbers: Tuple[Union[int, float], ...]) -> float:\n    if not numbers:\n        return 0.0\n    product = reduce(operator.mul, numbers)\n    return product / len(numbers)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):\n\n### Test\nassert math.isclose(candidate((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)",
        "timestamp": "2025-08-14T08:00:49.274958",
        "response_time": "3.72",
        "context": "{\"function_name\": \"multiply_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 99,
        "solution": "===START===\ndef decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    \n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n        \n    return binary\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):\n\n### Test\nassert candidate(8) == '1000'",
        "timestamp": "2025-08-14T08:00:51.378523",
        "response_time": "2.10",
        "context": "{\"function_name\": \"decimal_to_binary\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 100,
        "solution": "===START===\ndef next_smallest_palindrome(num):\n    num += 1\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        num += 1\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):\n\n### Test\nassert candidate(99)==101",
        "timestamp": "2025-08-14T08:00:53.654969",
        "response_time": "2.28",
        "context": "{\"function_name\": \"next_smallest_palindrome\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 101,
        "solution": "===START===\ndef kth_element(arr, k):\n    if not arr or k < 1 or k > len(arr):\n        return None\n    return arr[k-1]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):\n\n### Test\nassert candidate([12,3,5,7,19], 2) == 3",
        "timestamp": "2025-08-14T08:00:57.505476",
        "response_time": "3.85",
        "context": "{\"function_name\": \"kth_element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 102,
        "solution": "===START===\ndef snake_to_camel(word):\n    components = word.split('_')\n    return ''.join(x.title() for x in components)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):\n\n### Test\nassert candidate('python_program')=='PythonProgram'",
        "timestamp": "2025-08-14T08:00:59.513897",
        "response_time": "2.01",
        "context": "{\"function_name\": \"snake_to_camel\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 103,
        "solution": "===START===\ndef eulerian_num(n, m):\n    # Initialize a 2D array to store Eulerian numbers\n    dp = [[0] * (m + 2) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    # Calculate Eulerian numbers using the recurrence relation\n    # A(n,m) = (n-m)*A(n-1,m-1) + (m+1)*A(n-1,m)\n    for i in range(1, n + 1):\n        for j in range(m + 1):\n            if j > i:\n                continue\n            if j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (i - j + 1) * dp[i-1][j-1] + j * dp[i-1][j]\n    \n    return dp[n][m]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):\n\n### Test\nassert candidate(3, 1) == 4",
        "timestamp": "2025-08-14T08:01:03.572970",
        "response_time": "4.06",
        "context": "{\"function_name\": \"eulerian_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 104,
        "solution": "===START===\ndef sort_sublists(input_list):\n    return [sorted(sublist) for sublist in input_list]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):\n\n### Test\nassert candidate(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[[\"\"\"green\"\"\", \"\"\"orange\"\"\"], [\"\"\"black\"\"\", \"\"\"white\"\"\"], [\"\"\"black\"\"\", \"\"\"orange\"\"\", \"\"\"white\"\"\"]]",
        "timestamp": "2025-08-14T08:01:06.444855",
        "response_time": "2.87",
        "context": "{\"function_name\": \"sort_sublists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 105,
        "solution": "===START===\ndef count(lst):\n    return sum(1 for x in lst if x is True)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):\n\n### Test\nassert candidate([True,False,True]) == 2",
        "timestamp": "2025-08-14T08:01:08.701364",
        "response_time": "2.26",
        "context": "{\"function_name\": \"count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 106,
        "solution": "===START===\ndef add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):\n\n### Test\nassert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
        "timestamp": "2025-08-14T08:01:11.657966",
        "response_time": "2.96",
        "context": "{\"function_name\": \"add_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 108,
        "solution": "===START===\nfrom typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    return sorted(merged_list)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):\n\n### Test\nassert candidate([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
        "timestamp": "2025-08-14T08:01:16.807662",
        "response_time": "5.15",
        "context": "{\"function_name\": \"merge_sorted_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 109,
        "solution": "===START===\ndef odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        # Rotate the string by i positions\n        rotated = s[i:] + s[:i]\n        # Convert binary string to integer\n        num = int(rotated, 2)\n        # Check if number is odd\n        if num % 2 == 1:\n            count += 1\n    return count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):\n\n### Test\nassert candidate(\"011001\",6) == 3",
        "timestamp": "2025-08-14T08:01:19.611472",
        "response_time": "2.80",
        "context": "{\"function_name\": \"odd_Equivalent\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 111,
        "solution": "===START===\nfrom typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    \n    # Convert first list to set\n    result = set(nestedlist[0])\n    \n    # Intersect with all other lists\n    for lst in nestedlist[1:]:\n        result = result.intersection(set(lst))\n    \n    return list(result)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):\n\n### Test\nassert set(candidate([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])",
        "timestamp": "2025-08-14T08:01:22.878320",
        "response_time": "3.27",
        "context": "{\"function_name\": \"common_in_nested_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 113,
        "solution": "===START===\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):\n\n### Test\nassert candidate(\"python\")==False",
        "timestamp": "2025-08-14T08:01:24.659812",
        "response_time": "1.78",
        "context": "{\"function_name\": \"check_integer\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 115,
        "solution": "===START===\nfrom typing import List, Dict\n\ndef empty_dit(list1: List[Dict]) -> bool:\n    return all(not bool(d) for d in list1)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):\n\n### Test\nassert candidate([{},{},{}])==True",
        "timestamp": "2025-08-14T08:01:26.436496",
        "response_time": "1.78",
        "context": "{\"function_name\": \"empty_dit\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 116,
        "solution": "===START===\ndef tuple_to_int(nums):\n    return int(''.join(map(str, nums)))\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):\n\n### Test\nassert candidate((1,2,3))==123",
        "timestamp": "2025-08-14T08:01:29.347476",
        "response_time": "2.91",
        "context": "{\"function_name\": \"tuple_to_int\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 117,
        "solution": "===START===\nfrom typing import List, Union, Tuple, Any\n\ndef list_to_float(test_list: List[Union[Tuple[str, str], Tuple[Any, Any]]]) -> List[Tuple[float, float]]:\n    result = []\n    for item in test_list:\n        new_tuple = []\n        for element in item:\n            try:\n                new_tuple.append(float(element))\n            except (ValueError, TypeError):\n                new_tuple.append(element)\n        result.append(tuple(new_tuple))\n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):\n\n### Test\nassert candidate( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]",
        "timestamp": "2025-08-14T08:01:33.238427",
        "response_time": "3.89",
        "context": "{\"function_name\": \"list_to_float\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 118,
        "solution": "===START===\ndef string_to_list(string):\n    return string.split()\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):\n\n### Test\nassert candidate(\"python programming\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\"]",
        "timestamp": "2025-08-14T08:01:35.003637",
        "response_time": "1.76",
        "context": "{\"function_name\": \"string_to_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 119,
        "solution": "===START===\ndef search(arr):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):\n\n### Test\nassert candidate([1,1,2,2,3]) == 3",
        "timestamp": "2025-08-14T08:01:37.379249",
        "response_time": "2.37",
        "context": "{\"function_name\": \"search\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 120,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = float('-inf')\n    \n    for tup in list1:\n        # Calculate absolute product of current tuple\n        current_product = abs(tup[0] * tup[1])\n        max_product = max(max_product, current_product)\n    \n    return max_product\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):\n\n### Test\nassert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
        "timestamp": "2025-08-14T08:01:40.514229",
        "response_time": "3.13",
        "context": "{\"function_name\": \"max_product_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 123,
        "solution": "===START===\ndef amicable_numbers_sum(limit):\n    def sum_proper_divisors(n):\n        divisors_sum = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                divisors_sum += i\n                if i != n // i:\n                    divisors_sum += n // i\n        return divisors_sum\n\n    amicable_sum = 0\n    for a in range(2, limit + 1):\n        b = sum_proper_divisors(a)\n        if b > a and b <= limit and sum_proper_divisors(b) == a:\n            amicable_sum += a + b\n\n    return amicable_sum\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):\n\n### Test\nassert candidate(999)==504",
        "timestamp": "2025-08-14T08:01:45.187107",
        "response_time": "4.67",
        "context": "{\"function_name\": \"amicable_numbers_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 124,
        "solution": "===START===\nimport math\nimport cmath\n\ndef angle_complex(a, b):\n    # Convert inputs to complex numbers if they aren't already\n    z1 = complex(a) if not isinstance(a, complex) else a\n    z2 = complex(b) if not isinstance(b, complex) else b\n    \n    # Calculate the angle between the complex numbers\n    result = cmath.phase(z2/z1) if z1 != 0 else cmath.phase(z2)\n    \n    # Return the angle in radians\n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):\n\n### Test\nassert math.isclose(candidate(0,1j), 1.5707963267948966, rel_tol=0.001)",
        "timestamp": "2025-08-14T08:01:50.048460",
        "response_time": "4.86",
        "context": "{\"function_name\": \"angle_complex\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 125,
        "solution": "===START===\ndef find_length(string):\n    n = len(string)\n    # Convert string to array of 1, -1 for easier counting\n    # 0 becomes 1, 1 becomes -1\n    arr = [1 if x == '0' else -1 for x in string]\n    \n    # Use Kadane's algorithm to find max subarray sum\n    # This will give us maximum difference between 0s and 1s\n    max_diff = float('-inf')\n    curr_sum = 0\n    \n    for i in range(n):\n        curr_sum = max(arr[i], curr_sum + arr[i])\n        max_diff = max(max_diff, curr_sum)\n    \n    return max_diff\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):\n\n### Test\nassert candidate(\"11000010001\") == 6",
        "timestamp": "2025-08-14T08:01:55.806907",
        "response_time": "5.76",
        "context": "{\"function_name\": \"find_length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 126,
        "solution": "===START===\nfrom math import gcd\nfrom typing import List\n\ndef sum(a: int, b: int) -> int:\n    def get_divisors(n: int) -> List[int]:\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    divisors_a = set(get_divisors(a))\n    divisors_b = set(get_divisors(b))\n    common_divisors = divisors_a.intersection(divisors_b)\n    \n    return sum(common_divisors)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):\n\n### Test\nassert candidate(10,15) == 6",
        "timestamp": "2025-08-14T08:02:00.719951",
        "response_time": "4.91",
        "context": "{\"function_name\": \"sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 127,
        "solution": "===START===\ndef multiply_int(x, y):\n    return x * y\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):\n\n### Test\nassert candidate(10,20)==200",
        "timestamp": "2025-08-14T08:02:02.729763",
        "response_time": "2.01",
        "context": "{\"function_name\": \"multiply_int\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 128,
        "solution": "===START===\ndef long_words(n, str):\n    # Split the input string into words\n    words = str.split()\n    \n    # Filter words that are longer than n characters\n    result = [word for word in words if len(word) > n]\n    \n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):\n\n### Test\nassert candidate(3,\"python is a programming language\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\",\"\"\"language\"\"\"]",
        "timestamp": "2025-08-14T08:02:05.312795",
        "response_time": "2.58",
        "context": "{\"function_name\": \"long_words\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 129,
        "solution": "===START===\nfrom typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    \n    # Calculate the expected sum (sum of first row as reference)\n    expected_sum = sum(my_matrix[0])\n    \n    # Check rows\n    for row in my_matrix:\n        if sum(row) != expected_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        if sum(my_matrix[i][col] for i in range(n)) != expected_sum:\n            return False\n    \n    # Check main diagonal (top-left to bottom-right)\n    if sum(my_matrix[i][i] for i in range(n)) != expected_sum:\n        return False\n    \n    # Check secondary diagonal (top-right to bottom-left)\n    if sum(my_matrix[i][n-1-i] for i in range(n)) != expected_sum:\n        return False\n    \n    return True\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):\n\n### Test\nassert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
        "timestamp": "2025-08-14T08:02:09.797747",
        "response_time": "4.48",
        "context": "{\"function_name\": \"magic_square_test\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 130,
        "solution": "===START===\nfrom collections import Counter\nfrom typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        return None\n    counter = Counter(nums)\n    return counter.most_common(1)[0][0]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):\n\n### Test\nassert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2",
        "timestamp": "2025-08-14T08:02:13.379165",
        "response_time": "3.58",
        "context": "{\"function_name\": \"max_occurrences\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 131,
        "solution": "===START===\ndef reverse_vowels(str1):\n    # Convert string to list for easier manipulation\n    chars = list(str1)\n    # Define vowels\n    vowels = set('aeiouAEIOU')\n    \n    # Get indices and chars of vowels\n    vowel_positions = []\n    vowel_chars = []\n    \n    for i, char in enumerate(chars):\n        if char in vowels:\n            vowel_positions.append(i)\n            vowel_chars.append(char)\n    \n    # Reverse vowels and put them back in their positions\n    for pos, vowel in zip(vowel_positions, vowel_chars[::-1]):\n        chars[pos] = vowel\n    \n    # Convert back to string\n    return ''.join(chars)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):\n\n### Test\nassert candidate(\"Python\") == \"Python\"",
        "timestamp": "2025-08-14T08:02:25.207123",
        "response_time": "11.83",
        "context": "{\"function_name\": \"reverse_vowels\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 132,
        "solution": "===START===\ndef tup_string(tup1):\n    return ''.join(tup1)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):\n\n### Test\nassert candidate((\"\"\"e\"\"\", \"\"\"x\"\"\", \"\"\"e\"\"\", \"\"\"r\"\"\", \"\"\"c\"\"\", \"\"\"i\"\"\", \"\"\"s\"\"\", \"\"\"e\"\"\", \"\"\"s\"\"\"))==(\"exercises\")",
        "timestamp": "2025-08-14T08:02:27.193892",
        "response_time": "1.99",
        "context": "{\"function_name\": \"tup_string\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 133,
        "solution": "===START===\ndef sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):\n\n### Test\nassert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
        "timestamp": "2025-08-14T08:02:30.107227",
        "response_time": "2.91",
        "context": "{\"function_name\": \"sum_negativenum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 135,
        "solution": "===START===\ndef hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number using the formula:\n    nth hexagonal number = n * (2n - 1)\n    \"\"\"\n    return n * (2 * n - 1)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):\n\n### Test\nassert candidate(10) == 190",
        "timestamp": "2025-08-14T08:02:32.700283",
        "response_time": "2.59",
        "context": "{\"function_name\": \"hexagonal_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 137,
        "solution": "===START===\nfrom typing import List\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return 0.0\n    \n    zero_count = sum(1 for num in nums if num == 0)\n    non_zero_count = len(nums) - zero_count\n    \n    if non_zero_count == 0:\n        return float('inf')\n        \n    return zero_count / non_zero_count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):\n\n### Test\nassert math.isclose(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)",
        "timestamp": "2025-08-14T08:02:35.460583",
        "response_time": "2.76",
        "context": "{\"function_name\": \"zero_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 138,
        "solution": "===START===\ndef is_Sum_Of_Powers_Of_Two(n):\n    # If n is less than or equal to 0, it cannot be represented as sum of non-zero powers of 2\n    if n <= 0:\n        return False\n    \n    # Keep track of used powers\n    used_powers = set()\n    \n    # Start from the highest possible power of 2 that's less than or equal to n\n    power = 0\n    while (1 << power) <= n:\n        power += 1\n    power -= 1\n    \n    # Try to construct n using powers of 2\n    remaining = n\n    while remaining > 0 and power >= 0:\n        current_power = 1 << power\n        if remaining >= current_power:\n            # If this power hasn't been used before\n            if power not in used_powers:\n                remaining -= current_power\n                used_powers.add(power)\n        power -= 1\n    \n    # If remaining is 0, we found a valid representation\n    return remaining == 0\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):\n\n### Test\nassert candidate(10) == True",
        "timestamp": "2025-08-14T08:02:40.672299",
        "response_time": "5.21",
        "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 139,
        "solution": "===START===\nimport math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):\n\n### Test\nassert math.isclose(candidate(10), 62.830000000000005, rel_tol=0.001)",
        "timestamp": "2025-08-14T08:02:41.836052",
        "response_time": "1.16",
        "context": "{\"function_name\": \"circle_circumference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 140,
        "solution": "===START===\nfrom typing import List, Set, Union, Tuple\n\ndef extract_singly(test_list: List[Union[List, Tuple]]) -> Set[int]:\n    result = set()\n    for item in test_list:\n        if isinstance(item, (list, tuple)):\n            result.update(item)\n        else:\n            result.add(item)\n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):\n\n### Test\nassert set(candidate([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])",
        "timestamp": "2025-08-14T08:02:44.135689",
        "response_time": "2.30",
        "context": "{\"function_name\": \"extract_singly\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 141,
        "solution": "===START===\ndef pancake_sort(nums):\n    if len(nums) <= 1:\n        return nums\n    \n    def flip(arr, k):\n        left = 0\n        while left < k:\n            arr[left], arr[k] = arr[k], arr[left]\n            left += 1\n            k -= 1\n    \n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the index of maximum element in arr[0..i]\n        max_idx = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        if max_idx != i:\n            # Flip the subarray from 0 to max_idx\n            if max_idx != 0:\n                flip(nums, max_idx)\n            # Flip the subarray from 0 to i\n            flip(nums, i)\n    \n    return nums\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):\n\n### Test\nassert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
        "timestamp": "2025-08-14T08:02:48.049634",
        "response_time": "3.91",
        "context": "{\"function_name\": \"pancake_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 142,
        "solution": "===START===\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):\n\n### Test\nassert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
        "timestamp": "2025-08-14T08:03:36.245097",
        "response_time": "48.19",
        "context": "{\"function_name\": \"count_samepair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 143,
        "solution": "===START===\ndef find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):\n\n### Test\nassert candidate(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
        "timestamp": "2025-08-14T08:03:38.673727",
        "response_time": "2.43",
        "context": "{\"function_name\": \"find_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 145,
        "solution": "===START===\ndef max_Abs_Diff(arr):\n    if not arr or len(arr) < 2:\n        return 0\n    \n    min_val = min(arr)\n    max_val = max(arr)\n    \n    return max_val - min_val\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):\n\n### Test\nassert candidate((2,1,5,3)) == 4",
        "timestamp": "2025-08-14T08:03:42.044233",
        "response_time": "3.37",
        "context": "{\"function_name\": \"max_Abs_Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 160,
        "solution": "===START===\ndef find_solution(a, b, n):\n    # Using Extended Euclidean Algorithm to find GCD and coefficients\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return gcd, x, y\n    \n    # Find GCD and initial coefficients\n    gcd, x, y = extended_gcd(abs(a), abs(b))\n    \n    # If n is not divisible by GCD, no solution exists\n    if n % gcd != 0:\n        return None\n    \n    # Scale the coefficients by n/gcd\n    x *= n // gcd\n    y *= n // gcd\n    \n    # Adjust for negative inputs\n    if a < 0:\n        x = -x\n    if b < 0:\n        y = -y\n    \n    return (x, y)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):\n\n### Test\nassert candidate(2, 3, 7) == (2, 1)",
        "timestamp": "2025-08-14T08:03:46.424563",
        "response_time": "4.38",
        "context": "{\"function_name\": \"find_solution\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 161,
        "solution": "===START===\ndef remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]",
        "timestamp": "2025-08-14T08:03:48.880671",
        "response_time": "2.45",
        "context": "{\"function_name\": \"remove_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 162,
        "solution": "===START===\ndef sum_series(n):\n    total = 0\n    for i in range((n // 2) + 1):\n        term = n - 2 * i\n        if term <= 0:\n            break\n        total += term\n    return total\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):\n\n### Test\nassert candidate(6) == 12",
        "timestamp": "2025-08-14T08:03:51.811556",
        "response_time": "2.93",
        "context": "{\"function_name\": \"sum_series\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 163,
        "solution": "===START===\nimport math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon.\n    \n    Args:\n        s (int): Number of sides of the polygon\n        l (float): Length of each side\n        \n    Returns:\n        float: Area of the regular polygon\n    \"\"\"\n    # Area of regular polygon = (n * s^2)/(4 * tan(\u03c0/n))\n    # where n is number of sides and s is length of each side\n    area = (s * l * l) / (4 * math.tan(math.pi / s))\n    return area\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):\n\n### Test\nassert math.isclose(candidate(4, 20), 400., rel_tol=0.001)",
        "timestamp": "2025-08-14T08:03:55.981243",
        "response_time": "4.17",
        "context": "{\"function_name\": \"area_polygon\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 164,
        "solution": "===START===\ndef div_sum(n):\n    divisors_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\ndef candidate(a, b):\n    return div_sum(a) == div_sum(b)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):\n\n### Test\nassert candidate(36, 57) == False",
        "timestamp": "2025-08-14T08:03:58.684232",
        "response_time": "2.69",
        "context": "{\"function_name\": \"are_equivalent\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 165,
        "solution": "===START===\ndef count_char_position(str1):\n    count = 0\n    for i, char in enumerate(str1.lower()):\n        # Check if character is a letter and its position matches its position in alphabet\n        if char.isalpha() and ord(char) - ord('a') == i:\n            count += 1\n    return count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):\n\n### Test\nassert candidate(\"xbcefg\") == 2",
        "timestamp": "2025-08-14T08:04:02.969865",
        "response_time": "4.28",
        "context": "{\"function_name\": \"count_char_position\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 166,
        "solution": "===START===\ndef find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):\n\n### Test\nassert candidate([5, 4, 7, 2, 1]) == 4",
        "timestamp": "2025-08-14T08:04:10.475714",
        "response_time": "7.50",
        "context": "{\"function_name\": \"find_even_pair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 167,
        "solution": "===START===\ndef next_power_of_2(n):\n    if n <= 0:\n        return 1\n    \n    # Subtract 1 from n to handle the case when n is already a power of 2\n    n -= 1\n    # Set all bits after the leftmost 1 to 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    # Add 1 to get the next power of 2\n    return n + 1\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):\n\n### Test\nassert candidate(0) == 1",
        "timestamp": "2025-08-14T08:04:14.746409",
        "response_time": "4.27",
        "context": "{\"function_name\": \"next_power_of_2\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 168,
        "solution": "===START===\ndef frequency(a, x):\n    return a.count(x)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):\n\n### Test\nassert candidate([1,2,3], 4) == 0",
        "timestamp": "2025-08-14T08:04:17.292713",
        "response_time": "2.54",
        "context": "{\"function_name\": \"frequency\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 170,
        "solution": "===START===\ndef sum_range_list(list1, m, n):\n    \"\"\"\n    Calculate sum of numbers in a list within a range specified by two indices.\n    \n    Args:\n        list1: List of numbers\n        m: Starting index (inclusive)\n        n: Ending index (inclusive)\n    \n    Returns:\n        Sum of numbers between indices m and n (inclusive)\n    \"\"\"\n    return sum(list1[m:n+1])\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):\n\n### Test\nassert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29",
        "timestamp": "2025-08-14T08:04:20.828179",
        "response_time": "3.53",
        "context": "{\"function_name\": \"sum_range_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 171,
        "solution": "===START===\ndef perimeter_pentagon(a):\n    return 5 * a\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):\n\n### Test\nassert candidate(5) == 25",
        "timestamp": "2025-08-14T08:04:23.312363",
        "response_time": "2.48",
        "context": "{\"function_name\": \"perimeter_pentagon\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 172,
        "solution": "===START===\ndef count_occurance(s):\n    return s.count('std')\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):\n\n### Test\nassert candidate(\"letstdlenstdporstd\") == 3\nassert candidate(\"truststdsolensporsd\") == 1",
        "timestamp": "2025-08-14T08:04:24.729989",
        "response_time": "1.42",
        "context": "{\"function_name\": \"count_occurance\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 222,
        "solution": "===START===\ndef check_type(test_tuple):\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all(isinstance(item, first_type) for item in test_tuple)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):\n\n### Test\nassert candidate((5, 6, 7, 3, 5, 6) ) == True",
        "timestamp": "2025-08-14T08:04:27.657935",
        "response_time": "2.93",
        "context": "{\"function_name\": \"check_type\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 223,
        "solution": "===START===\ndef is_majority(arr, n, x):\n    # Find first occurrence of x using binary search\n    first = binary_search_first(arr, 0, n-1, x)\n    \n    # If element is not present at all, return False\n    if first == -1:\n        return False\n    \n    # Find last occurrence of x using binary search\n    last = binary_search_last(arr, 0, n-1, x)\n    \n    # Count number of occurrences\n    count = last - first + 1\n    \n    # Check if count is more than n/2\n    return count > n/2\n\ndef binary_search_first(arr, low, high, x):\n    if high >= low:\n        mid = (low + high) // 2\n        \n        # Check if x is the first occurrence\n        if (mid == 0 or x > arr[mid-1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return binary_search_first(arr, mid+1, high, x)\n        else:\n            return binary_search_first(arr, low, mid-1, x)\n    return -1\n\ndef binary_search_last(arr, low, high, x):\n    if high >= low:\n        mid = (low + high) // 2\n        \n        # Check if x is the last occurrence\n        if (mid == len(arr)-1 or x < arr[mid+1]) and arr[mid] == x:\n            return mid\n        elif x < arr[mid]:\n            return binary_search_last(arr, low, mid-1, x)\n        else:\n            return binary_search_last(arr, mid+1, high, x)\n    return -1\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):\n\n### Test\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
        "timestamp": "2025-08-14T08:04:35.360793",
        "response_time": "7.70",
        "context": "{\"function_name\": \"binary_search\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 224,
        "solution": "===START===\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):\n\n### Test\nassert candidate(2) == 1",
        "timestamp": "2025-08-14T08:04:37.197048",
        "response_time": "1.83",
        "context": "{\"function_name\": \"count_Set_Bits\"}"
    }
]