[
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 2,
    "solution": "def similar_elements(test_tup1, test_tup2):\n    # Convert tuples to sets and find intersection\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return list(set1.intersection(set2))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):\n\n### Test\nassert set(candidate((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))",
    "timestamp": "2025-10-17T19:09:14.182811",
    "response_time": "3.38",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 3,
    "solution": "def is_not_prime(n):\n    # Handle numbers less than 2\n    if n < 2:\n        return True\n    \n    # Check for divisibility from 2 to square root of n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    \n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):\n\n### Test\nassert candidate(2) == False\nassert candidate(10) == True",
    "timestamp": "2025-10-17T19:09:17.684270",
    "response_time": "3.50",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 4,
    "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    # Convert numbers to negative for max heap behavior\n    heap = [-num for num in nums]\n    # Create a max heap\n    heapq.heapify(heap)\n    # Get n largest elements\n    result = []\n    for _ in range(n):\n        if heap:\n            result.append(-heapq.heappop(heap))\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):\n\n### Test\nassert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]",
    "timestamp": "2025-10-17T19:09:19.877199",
    "response_time": "2.19",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 6,
    "solution": "def differ_At_One_Bit_Pos(x, y):\n    # Get XOR of the numbers\n    xor_result = x ^ y\n    \n    # Count the number of set bits in XOR result\n    # If only one bit is different, XOR will have exactly one set bit\n    count = 0\n    while xor_result:\n        count += xor_result & 1\n        xor_result >>= 1\n        \n    # Return True if exactly one bit is different\n    return count == 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):\n\n### Test\nassert candidate(13,9) == True\nassert candidate(15,8) == False\nassert candidate(2,4) == False",
    "timestamp": "2025-10-17T19:09:22.193851",
    "response_time": "2.31",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 7,
    "solution": "import re\n\ndef find_char_long(text):\n    # Use regex to find all words with 4 or more characters\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):\n\n### Test\nassert set(candidate('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])",
    "timestamp": "2025-10-17T19:09:25.402364",
    "response_time": "3.21",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 8,
    "solution": "def square_nums(nums):\n    return [num * num for num in nums]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
    "timestamp": "2025-10-17T19:09:27.581379",
    "response_time": "2.18",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 9,
    "solution": "def find_Rotations(str):\n    if not str:\n        return 0\n    \n    n = len(str)\n    if n == 1:\n        return 1\n        \n    rotations = 1\n    while rotations < n:\n        # Create rotated string by moving first character to end\n        rotated = str[rotations:] + str[:rotations]\n        if rotated == str:\n            return rotations\n        rotations += 1\n    \n    return n",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):\n\n### Test\nassert candidate(\"aaaa\") == 1",
    "timestamp": "2025-10-17T19:09:30.147972",
    "response_time": "2.56",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 11,
    "solution": "def remove_Occ(s, ch):\n    # Find first occurrence\n    first_pos = s.find(ch)\n    \n    # If character not found, return original string\n    if first_pos == -1:\n        return s\n    \n    # Find last occurrence\n    last_pos = s.rfind(ch)\n    \n    # If only one occurrence, remove it and return\n    if first_pos == last_pos:\n        return s[:first_pos] + s[first_pos + 1:]\n    \n    # Remove both first and last occurrences\n    return s[:first_pos] + s[first_pos + 1:last_pos] + s[last_pos + 1:]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):\n\n### Test\nassert candidate(\"hello\",\"l\") == \"heo\"",
    "timestamp": "2025-10-17T19:09:33.032047",
    "response_time": "2.88",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 12,
    "solution": "def sort_matrix(M):\n    # Create a list of tuples with (row_sum, row_index, row)\n    row_sums = [(sum(row), i, row) for i, row in enumerate(M)]\n    \n    # Sort based on row sums\n    row_sums.sort()\n    \n    # Return the sorted matrix by extracting the rows\n    return [row for _, _, row in row_sums]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):\n\n### Test\nassert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
    "timestamp": "2025-10-17T19:09:37.976805",
    "response_time": "4.94",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 14,
    "solution": "def find_Volume(l,b,h):\n    # Volume of triangular prism = (1/2 * base * height) * length\n    # where base and height are of the triangle\n    # and length is the length of the prism\n    area_of_triangle = 0.5 * b * h\n    volume = area_of_triangle * l\n    return volume",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :\n\n### Test\nassert candidate(10,8,6) == 240",
    "timestamp": "2025-10-17T19:09:41.952057",
    "response_time": "3.97",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 16,
    "solution": "import re\n\ndef text_lowercase_underscore(text):\n    # Check if the string matches pattern of lowercase letters separated by underscore\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):\n\n### Test\nassert candidate(\"aab_cbbbc\")==(True)",
    "timestamp": "2025-10-17T19:09:45.257898",
    "response_time": "3.30",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 17,
    "solution": "def square_perimeter(a):\n    return 4 * a",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):\n\n### Test\nassert candidate(10)==40",
    "timestamp": "2025-10-17T19:09:47.092459",
    "response_time": "1.83",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 18,
    "solution": "def remove_dirty_chars(string):\n    if not string:\n        return \"\"\n    \n    first_str, second_str = string.split()\n    result = \"\"\n    \n    for char in first_str:\n        if char not in second_str:\n            result += char\n            \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):\n\n### Test\nassert candidate(\"probasscurve\", \"pros\") == \"\"\"bacuve\"\"\"",
    "timestamp": "2025-10-17T19:09:48.993515",
    "response_time": "1.90",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 19,
    "solution": "def test_duplicate(arraynums):\n    # Create a set from the array\n    # If length of set is less than array length, duplicates exist\n    return len(set(arraynums)) < len(arraynums)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):\n\n### Test\nassert candidate(([1,2,3,4,5]))==False",
    "timestamp": "2025-10-17T19:09:50.759240",
    "response_time": "1.76",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 20,
    "solution": "import math\n\ndef is_woodall(x):\n    if x < 1:\n        return False\n    \n    # Try different values of n until we either find a match\n    # or exceed the target number\n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == x:\n            return True\n        if woodall > x:\n            return False\n        n += 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):\n\n### Test\nassert candidate(383) == True",
    "timestamp": "2025-10-17T19:09:54.501026",
    "response_time": "3.74",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 56,
    "solution": "def check(num):\n    # Convert number to string to reverse it\n    num_str = str(num)\n    # Convert reversed string back to integer\n    reversed_num = int(num_str[::-1])\n    # Check if number is one less than twice its reverse\n    return num == (2 * reversed_num - 1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):\n\n### Test\nassert candidate(70) == False",
    "timestamp": "2025-10-17T19:09:56.411135",
    "response_time": "1.91",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 57,
    "solution": "def find_Max_Num(arr):\n    # Convert integers to strings to use string comparison\n    str_arr = [str(num) for num in arr]\n    \n    # Sort in descending order using custom comparison\n    # Compare two numbers by concatenating them in different orders\n    str_arr.sort(key=lambda x: x*10, reverse=True)\n    \n    # Join the sorted array and convert back to integer\n    return int(''.join(str_arr))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :\n\n### Test\nassert candidate([1,2,3]) == 321",
    "timestamp": "2025-10-17T19:10:00.354573",
    "response_time": "3.94",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 58,
    "solution": "def opposite_Signs(x,y):\n    # Using multiplication to check if signs are opposite\n    # If product is negative, signs are opposite\n    return (x * y) < 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):\n\n### Test\nassert candidate(1,-2) == True\nassert candidate(3,2) == False",
    "timestamp": "2025-10-17T19:10:02.708867",
    "response_time": "2.35",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 59,
    "solution": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    Formula for nth octagonal number: n(3n - 2)\n    \"\"\"\n    return n * (3 * n - 2)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):\n\n### Test\nassert candidate(5) == 65",
    "timestamp": "2025-10-17T19:10:05.919854",
    "response_time": "3.21",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 61,
    "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):\n\n### Test\nassert candidate('112112') == 6",
    "timestamp": "2025-10-17T19:10:07.730849",
    "response_time": "1.81",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 62,
    "solution": "def smallest_num(xs):\n    if not xs:\n        return None\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):\n\n### Test\nassert candidate([10, 20, 1, 45, 99]) == 1",
    "timestamp": "2025-10-17T19:10:10.538628",
    "response_time": "2.81",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 63,
    "solution": "def max_difference(test_list):\n    # If list is empty or has less than 1 pair, return 0\n    if not test_list or len(test_list) < 1:\n        return 0\n    \n    # Calculate absolute difference for each pair\n    differences = [abs(pair[0] - pair[1]) for pair in test_list]\n    \n    # Return maximum difference\n    return max(differences)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):\n\n### Test\nassert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
    "timestamp": "2025-10-17T19:10:13.527043",
    "response_time": "2.99",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 64,
    "solution": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):\n\n### Test\nassert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
    "timestamp": "2025-10-17T19:10:16.212455",
    "response_time": "2.68",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 65,
    "solution": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, (list, tuple)):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):\n\n### Test\nassert candidate(([1, 2, [3,4],[5,6]]))==21",
    "timestamp": "2025-10-17T19:10:18.228707",
    "response_time": "2.01",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 66,
    "solution": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):\n\n### Test\nassert candidate([1,-2,3,-4]) == 2",
    "timestamp": "2025-10-17T19:10:19.944895",
    "response_time": "1.71",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 67,
    "solution": "def bell_number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Base case\n    bell[0][0] = 1\n    \n    # Fill entries using Bell recurrence relation\n    for i in range(1, n+1):\n        # First value in row is last value in previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill remaining values using the formula\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):\n\n### Test\nassert candidate(2)==2",
    "timestamp": "2025-10-17T19:10:25.126304",
    "response_time": "5.18",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 68,
    "solution": "def is_Monotonic(A):\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            increasing = False\n        if A[i] > A[i-1]:\n            decreasing = False\n            \n    return increasing or decreasing",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):\n\n### Test\nassert candidate([6, 5, 4, 4]) == True",
    "timestamp": "2025-10-17T19:10:26.918444",
    "response_time": "1.79",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 69,
    "solution": "def is_sublist(l, s):\n    if not s:  # empty sublist is always contained\n        return True\n    \n    if len(s) > len(l):  # sublist longer than main list\n        return False\n        \n    # Check for consecutive elements matching\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n            \n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):\n\n### Test\nassert candidate([2,4,3,5,7],[3,7])==False",
    "timestamp": "2025-10-17T19:10:30.827886",
    "response_time": "3.91",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 70,
    "solution": "def get_equal(Input):\n    if not Input:  # Handle empty input\n        return True\n    \n    # Get length of first tuple\n    first_length = len(Input[0])\n    \n    # Compare length of all other tuples with first tuple\n    for tup in Input[1:]:\n        if len(tup) != first_length:\n            return False\n            \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):\n\n### Test\nassert candidate([(11, 22, 33), (44, 55, 66)]) == True",
    "timestamp": "2025-10-17T19:10:33.709880",
    "response_time": "2.88",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 71,
    "solution": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):\n\n### Test\nassert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
    "timestamp": "2025-10-17T19:10:39.042130",
    "response_time": "5.33",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 72,
    "solution": "def dif_Square(n):\n    # For any number n to be difference of squares,\n    # it should be able to be written as: a\u00b2 - b\u00b2\n    # This can be factored as: (a+b)(a-b)\n    # Therefore, n should have at least one pair of factors with same parity\n    \n    # Special case for 0\n    if n == 0:\n        return True\n        \n    # Check all possible factors of n\n    for i in range(1, abs(n) + 1):\n        if n % i == 0:\n            # Get the other factor\n            j = n // i\n            \n            # If sum of factors is even, then number can be represented as difference of squares\n            if (i + j) % 2 == 0:\n                return True\n    \n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):\n\n### Test\nassert candidate(5) == True",
    "timestamp": "2025-10-17T19:10:46.035543",
    "response_time": "6.99",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 74,
    "solution": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        # If color already mapped, check if it maps to same pattern\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        # If pattern already mapped, check if it maps to same color\n        elif pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            # Create new mappings\n            color_to_pattern[color] = pattern\n            pattern_to_color[pattern] = color\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):\n\n### Test\nassert candidate([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
    "timestamp": "2025-10-17T19:10:51.014787",
    "response_time": "4.98",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 75,
    "solution": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):\n\n### Test\nassert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
    "timestamp": "2025-10-17T19:10:53.749546",
    "response_time": "2.73",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 77,
    "solution": "def is_Diff(n):\n    # Convert number to string to process digits\n    num_str = str(n)\n    \n    # Initialize sums for alternating positions\n    even_sum = 0\n    odd_sum = 0\n    \n    # Process each digit alternately\n    for i in range(len(num_str)):\n        if i % 2 == 0:\n            even_sum += int(num_str[i])\n        else:\n            odd_sum += int(num_str[i])\n    \n    # A number is divisible by 11 if the difference between\n    # sum of alternating digits is either 0 or divisible by 11\n    difference = abs(even_sum - odd_sum)\n    \n    return difference == 0 or difference % 11 == 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):\n\n### Test\nassert candidate (12345) == False",
    "timestamp": "2025-10-17T19:10:58.514831",
    "response_time": "4.76",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 79,
    "solution": "def word_len(s):\n    return len(s) % 2 != 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):\n\n### Test\nassert candidate(\"Hadoop\") == False",
    "timestamp": "2025-10-17T19:11:00.004351",
    "response_time": "1.49",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 80,
    "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    A tetrahedral number is a figurate number that represents a pyramid with a triangular base and three sides.\n    The formula is: T(n) = n(n+1)(n+2)/6\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):\n\n### Test\nassert candidate(5) == 35",
    "timestamp": "2025-10-17T19:11:03.170834",
    "response_time": "3.16",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 82,
    "solution": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * r**3",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 4188.790204786391, rel_tol=0.001)",
    "timestamp": "2025-10-17T19:11:04.838864",
    "response_time": "1.66",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 83,
    "solution": "def get_Char(strr):\n    # Calculate sum of ASCII values of all characters\n    ascii_sum = sum(ord(char) for char in strr)\n    \n    # Take modulo 26 to get a value between 0 and 25\n    remainder = ascii_sum % 26\n    \n    # Convert to corresponding character (a=0, b=1, ..., z=25)\n    # Add 97 to get lowercase ASCII value\n    result_char = chr(remainder + 97)\n    \n    return result_char",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):\n\n### Test\nassert candidate(\"abc\") == \"f\"",
    "timestamp": "2025-10-17T19:11:09.375577",
    "response_time": "4.53",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 84,
    "solution": "def sequence(n):\n    if n <= 0:\n        return 0\n    \n    # Initialize the sequence with first two numbers\n    newman_conway = [0, 1, 1]  # 0th, 1st, and 2nd terms\n    \n    # Generate sequence up to nth number\n    for i in range(3, n + 1):\n        # Newman-Conway sequence formula:\n        # a(n) = a(a(n-1)) + a(n - a(n-1))\n        newman_conway.append(newman_conway[newman_conway[i-1]] + newman_conway[i - newman_conway[i-1]])\n    \n    return newman_conway[n]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):\n\n### Test\nassert candidate(10) == 6",
    "timestamp": "2025-10-17T19:11:12.482547",
    "response_time": "3.10",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 85,
    "solution": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n    Formula: A = 4\u03c0r\u00b2\n    \n    Args:\n        r (float): radius of the sphere\n        \n    Returns:\n        float: surface area of the sphere\n    \"\"\"\n    return 4 * math.pi * r * r",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 1256.6370614359173, rel_tol=0.001)",
    "timestamp": "2025-10-17T19:11:15.910136",
    "response_time": "3.43",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 86,
    "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n    A centered hexagonal number is the number of points in a hexagonal pattern with a point in the center\n    and n points on each edge.\n    Formula: 3n(n-1) + 1\n    \"\"\"\n    return 3 * n * (n - 1) + 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):\n\n### Test\nassert candidate(10) == 271",
    "timestamp": "2025-10-17T19:11:19.513800",
    "response_time": "3.60",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 87,
    "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\n### Test\nassert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={\"\"\"B\"\"\": \"\"\"Black\"\"\", \"\"\"R\"\"\": \"\"\"Red\"\"\", \"\"\"P\"\"\": \"\"\"Pink\"\"\", \"\"\"G\"\"\": \"\"\"Green\"\"\", \"\"\"W\"\"\": \"\"\"White\"\"\", \"\"\"O\"\"\": \"\"\"Orange\"\"\"}",
    "timestamp": "2025-10-17T19:11:21.509687",
    "response_time": "1.99",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 88,
    "solution": "from collections import Counter\n\ndef freq_count(list1):\n    return dict(Counter(list1))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):\n\n### Test\nassert candidate([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})",
    "timestamp": "2025-10-17T19:11:23.279891",
    "response_time": "1.77",
    "context": "{\"function_name\": \"freq_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 89,
    "solution": "def closest_num(N):\n    return N - 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):\n\n### Test\nassert candidate(11) == 10",
    "timestamp": "2025-10-17T19:11:25.084842",
    "response_time": "1.80",
    "context": "{\"function_name\": \"closest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 90,
    "solution": "def len_log(list1):\n    if not list1:\n        return 0\n    return len(max(list1, key=len))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):\n\n### Test\nassert candidate([\"python\",\"PHP\",\"bigdata\"]) == 7",
    "timestamp": "2025-10-17T19:11:26.324642",
    "response_time": "1.24",
    "context": "{\"function_name\": \"len_log\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 91,
    "solution": "def find_substring(str1, sub_str):\n    \"\"\"\n    Check if a substring is present in any string from a list of strings.\n    \n    Args:\n        str1: List of strings to search in\n        sub_str: Substring to search for\n        \n    Returns:\n        bool: True if substring is found in any string, False otherwise\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):\n\n### Test\nassert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
    "timestamp": "2025-10-17T19:11:28.942620",
    "response_time": "2.62",
    "context": "{\"function_name\": \"find_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 92,
    "solution": "def is_undulating(n):\n    # Convert number to string for easier digit comparison\n    num_str = str(n)\n    \n    # Undulating number must have at least 3 digits\n    if len(num_str) < 3:\n        return False\n    \n    # Check if number only consists of two alternating digits\n    first = num_str[0]\n    second = num_str[1]\n    \n    # If first two digits are same, it's not undulating\n    if first == second:\n        return False\n    \n    # Check if digits alternate between first and second\n    for i in range(len(num_str)):\n        if i % 2 == 0 and num_str[i] != first:\n            return False\n        if i % 2 == 1 and num_str[i] != second:\n            return False\n            \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):\n\n### Test\nassert candidate(1212121) == True",
    "timestamp": "2025-10-17T19:11:34.964330",
    "response_time": "6.02",
    "context": "{\"function_name\": \"is_undulating\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 93,
    "solution": "def power(a,b):\n    return a ** b",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):\n\n### Test\nassert candidate(3,4) == 81",
    "timestamp": "2025-10-17T19:11:37.134771",
    "response_time": "2.17",
    "context": "{\"function_name\": \"power\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 94,
    "solution": "def index_minimum(test_list):\n    return min(test_list, key=lambda x: x[1])[0]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):\n\n### Test\nassert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
    "timestamp": "2025-10-17T19:11:38.543378",
    "response_time": "1.41",
    "context": "{\"function_name\": \"index_minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 95,
    "solution": "def Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):\n\n### Test\nassert candidate([[1],[1,2]]) == 1",
    "timestamp": "2025-10-17T19:11:40.826262",
    "response_time": "2.28",
    "context": "{\"function_name\": \"Find_Min_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 96,
    "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):\n\n### Test\nassert candidate(15) == 4",
    "timestamp": "2025-10-17T19:11:42.858868",
    "response_time": "2.03",
    "context": "{\"function_name\": \"divisor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 97,
    "solution": "from collections import Counter\nfrom itertools import chain\n\ndef frequency_lists(list1):\n    # Flatten the list of lists using chain.from_iterable\n    flattened = chain.from_iterable(list1)\n    # Count frequency of each element using Counter\n    return dict(Counter(flattened))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):\n\n### Test\nassert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
    "timestamp": "2025-10-17T19:11:45.925934",
    "response_time": "3.06",
    "context": "{\"function_name\": \"frequency_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 98,
    "solution": "from typing import Sequence\nfrom functools import reduce\nfrom operator import mul\n\ndef multiply_num(numbers: Sequence[int | float]) -> float:\n    if not numbers:\n        return 0\n    return reduce(mul, numbers) / len(numbers)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):\n\n### Test\nassert math.isclose(candidate((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)",
    "timestamp": "2025-10-17T19:11:49.233598",
    "response_time": "3.30",
    "context": "{\"function_name\": \"multiply_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 99,
    "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    \n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    \n    return binary",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):\n\n### Test\nassert candidate(8) == '1000'",
    "timestamp": "2025-10-17T19:11:52.028664",
    "response_time": "2.79",
    "context": "{\"function_name\": \"decimal_to_binary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 100,
    "solution": "def next_smallest_palindrome(num):\n    num += 1\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        num += 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):\n\n### Test\nassert candidate(99)==101",
    "timestamp": "2025-10-17T19:11:53.589366",
    "response_time": "1.56",
    "context": "{\"function_name\": \"next_smallest_palindrome\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 101,
    "solution": "def kth_element(arr, k):\n    if k <= 0 or k > len(arr):\n        return None\n    return arr[k-1]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):\n\n### Test\nassert candidate([12,3,5,7,19], 2) == 3",
    "timestamp": "2025-10-17T19:11:55.885375",
    "response_time": "2.29",
    "context": "{\"function_name\": \"kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 102,
    "solution": "def snake_to_camel(word):\n    # Split the word by underscore\n    components = word.split('_')\n    # Capitalize first letter of each component and join them\n    return ''.join(x.title() for x in components)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):\n\n### Test\nassert candidate('python_program')=='PythonProgram'",
    "timestamp": "2025-10-17T19:11:58.284802",
    "response_time": "2.40",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 103,
    "solution": "def eulerian_num(n, m):\n    if m >= n or m < 0:\n        return 0\n    if n == 0:\n        return 1\n    \n    # Initialize array to store values\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    # Calculate Eulerian numbers using recurrence relation\n    for i in range(1, n + 1):\n        for j in range(min(i, m + 1)):\n            dp[i][j] = (i - j) * dp[i-1][j-1] + (j + 1) * dp[i-1][j]\n    \n    return dp[n][m]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):\n\n### Test\nassert candidate(3, 1) == 4",
    "timestamp": "2025-10-17T19:12:01.478211",
    "response_time": "3.19",
    "context": "{\"function_name\": \"eulerian_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 104,
    "solution": "def sort_sublists(input_list):\n    return [sorted(sublist) for sublist in input_list]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):\n\n### Test\nassert candidate(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[[\"\"\"green\"\"\", \"\"\"orange\"\"\"], [\"\"\"black\"\"\", \"\"\"white\"\"\"], [\"\"\"black\"\"\", \"\"\"orange\"\"\", \"\"\"white\"\"\"]]",
    "timestamp": "2025-10-17T19:12:02.838609",
    "response_time": "1.36",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 105,
    "solution": "def count(lst):\n    return sum(1 for item in lst if item is True)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):\n\n### Test\nassert candidate([True,False,True]) == 2",
    "timestamp": "2025-10-17T19:12:04.672976",
    "response_time": "1.83",
    "context": "{\"function_name\": \"count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 106,
    "solution": "def add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):\n\n### Test\nassert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
    "timestamp": "2025-10-17T19:12:06.600210",
    "response_time": "1.92",
    "context": "{\"function_name\": \"add_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 108,
    "solution": "def merge_sorted_list(num1, num2, num3):\n    merged = []\n    merged.extend(num1)\n    merged.extend(num2)\n    merged.extend(num3)\n    return sorted(merged)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):\n\n### Test\nassert candidate([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
    "timestamp": "2025-10-17T19:12:08.738489",
    "response_time": "2.13",
    "context": "{\"function_name\": \"merge_sorted_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 109,
    "solution": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        # Rotate the string by i positions\n        rotated = s[i:] + s[:i]\n        # Convert binary string to integer\n        num = int(rotated, 2)\n        # Check if number is odd\n        if num % 2 == 1:\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):\n\n### Test\nassert candidate(\"011001\",6) == 3",
    "timestamp": "2025-10-17T19:12:10.890932",
    "response_time": "2.15",
    "context": "{\"function_name\": \"odd_Equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 111,
    "solution": "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    \n    # Convert first list to set for initial comparison\n    common = set(nestedlist[0])\n    \n    # Intersect with each subsequent list\n    for sublist in nestedlist[1:]:\n        common = common.intersection(set(sublist))\n    \n    return list(common)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):\n\n### Test\nassert set(candidate([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])",
    "timestamp": "2025-10-17T19:12:14.227111",
    "response_time": "3.33",
    "context": "{\"function_name\": \"common_in_nested_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 113,
    "solution": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):\n\n### Test\nassert candidate(\"python\")==False",
    "timestamp": "2025-10-17T19:12:16.268053",
    "response_time": "2.04",
    "context": "{\"function_name\": \"check_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 115,
    "solution": "def empty_dit(list1):\n    return all(not bool(d) for d in list1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):\n\n### Test\nassert candidate([{},{},{}])==True",
    "timestamp": "2025-10-17T19:12:18.525570",
    "response_time": "2.25",
    "context": "{\"function_name\": \"empty_dit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 116,
    "solution": "def tuple_to_int(nums):\n    return int(''.join(map(str, nums)))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):\n\n### Test\nassert candidate((1,2,3))==123",
    "timestamp": "2025-10-17T19:12:19.785387",
    "response_time": "1.26",
    "context": "{\"function_name\": \"tuple_to_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 117,
    "solution": "def list_to_float(test_list):\n    result = []\n    for outer in test_list:\n        new_tuple = []\n        for item in outer:\n            try:\n                new_tuple.append(float(item))\n            except ValueError:\n                new_tuple.append(item)\n        result.append(tuple(new_tuple))\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):\n\n### Test\nassert candidate( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]",
    "timestamp": "2025-10-17T19:12:22.492860",
    "response_time": "2.70",
    "context": "{\"function_name\": \"list_to_float\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 118,
    "solution": "def string_to_list(string):\n    return string.split()",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):\n\n### Test\nassert candidate(\"python programming\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\"]",
    "timestamp": "2025-10-17T19:12:26.182097",
    "response_time": "3.69",
    "context": "{\"function_name\": \"string_to_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 119,
    "solution": "def search(arr):\n    result = 0\n    for i in range(len(arr)):\n        result = result ^ arr[i]\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):\n\n### Test\nassert candidate([1,1,2,2,3]) == 3",
    "timestamp": "2025-10-17T19:12:28.614309",
    "response_time": "2.43",
    "context": "{\"function_name\": \"search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 120,
    "solution": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    \n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            # Get absolute products between pairs of tuples\n            prod1 = abs(list1[i][0] * list1[j][0])\n            prod2 = abs(list1[i][0] * list1[j][1])\n            prod3 = abs(list1[i][1] * list1[j][0])\n            prod4 = abs(list1[i][1] * list1[j][1])\n            \n            # Find maximum of these products\n            current_max = max(prod1, prod2, prod3, prod4)\n            \n            # Update overall maximum if current is larger\n            max_product = max(max_product, current_max)\n    \n    return max_product",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):\n\n### Test\nassert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
    "timestamp": "2025-10-17T19:12:33.722476",
    "response_time": "5.10",
    "context": "{\"function_name\": \"max_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 123,
    "solution": "def amicable_numbers_sum(n):\n    if n == 1:\n        return 0\n    divisors_sum = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        j = sum_of_proper_divisors(i)\n        if j > i and sum_of_proper_divisors(j) == i:\n            amicable_sum += i + j\n    return amicable_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):\n\n### Test\nassert candidate(999)==504",
    "timestamp": "2025-10-17T19:12:38.866831",
    "response_time": "5.14",
    "context": "{\"function_name\": \"amicable_numbers_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 124,
    "solution": "import math\nimport cmath\n\ndef angle_complex(a, b):\n    # Convert inputs to complex numbers if they aren't already\n    z1 = complex(a) if not isinstance(a, complex) else a\n    z2 = complex(b) if not isinstance(b, complex) else b\n    \n    # Calculate the angle between the complex numbers\n    # Using the argument (phase) of the division of the numbers\n    if z1 == 0:\n        return cmath.phase(z2)\n    elif z2 == 0:\n        return cmath.phase(z1)\n    else:\n        return cmath.phase(z2/z1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):\n\n### Test\nassert math.isclose(candidate(0,1j), 1.5707963267948966, rel_tol=0.001)",
    "timestamp": "2025-10-17T19:12:42.065709",
    "response_time": "3.19",
    "context": "{\"function_name\": \"angle_complex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 125,
    "solution": "def find_length(string):\n    n = len(string)\n    # Convert string to array of 1, -1 for easier counting\n    # 0 becomes 1, 1 becomes -1\n    arr = [1 if x == '0' else -1 for x in string]\n    \n    # Use Kadane's algorithm to find max subarray sum\n    max_diff = 0\n    curr_sum = 0\n    min_sum = 0\n    \n    for i in range(n):\n        curr_sum += arr[i]\n        # Current difference is current sum minus minimum sum seen so far\n        max_diff = max(max_diff, curr_sum - min_sum)\n        # Update minimum sum seen so far\n        min_sum = min(min_sum, curr_sum)\n    \n    return max_diff",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):\n\n### Test\nassert candidate(\"11000010001\") == 6",
    "timestamp": "2025-10-17T19:12:46.386267",
    "response_time": "4.32",
    "context": "{\"function_name\": \"find_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 126,
    "solution": "def sum(a,b):\n    # Find minimum of two numbers\n    smaller = min(a, b)\n    \n    # Initialize sum of common divisors\n    divisor_sum = 0\n    \n    # Check for common divisors up to the smaller number\n    for i in range(1, smaller + 1):\n        # If number is divisor of both a and b, add it to sum\n        if a % i == 0 and b % i == 0:\n            divisor_sum += i\n            \n    return divisor_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):\n\n### Test\nassert candidate(10,15) == 6",
    "timestamp": "2025-10-17T19:12:50.233568",
    "response_time": "3.84",
    "context": "{\"function_name\": \"sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 127,
    "solution": "def multiply_int(x, y):\n    return x * y",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):\n\n### Test\nassert candidate(10,20)==200",
    "timestamp": "2025-10-17T19:12:52.166101",
    "response_time": "1.93",
    "context": "{\"function_name\": \"multiply_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 128,
    "solution": "def long_words(n, str):\n    # Split the string into words\n    words = str.split()\n    \n    # Filter words longer than n characters\n    result = [word for word in words if len(word) > n]\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):\n\n### Test\nassert candidate(3,\"python is a programming language\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\",\"\"\"language\"\"\"]",
    "timestamp": "2025-10-17T19:12:53.695320",
    "response_time": "1.53",
    "context": "{\"function_name\": \"long_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 129,
    "solution": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    \n    # Calculate the expected sum (sum of first row as reference)\n    expected_sum = sum(my_matrix[0])\n    \n    # Check rows\n    for row in my_matrix:\n        if sum(row) != expected_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != expected_sum:\n            return False\n    \n    # Check main diagonal\n    if sum(my_matrix[i][i] for i in range(n)) != expected_sum:\n        return False\n    \n    # Check secondary diagonal\n    if sum(my_matrix[i][n-1-i] for i in range(n)) != expected_sum:\n        return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):\n\n### Test\nassert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
    "timestamp": "2025-10-17T19:12:58.900959",
    "response_time": "5.20",
    "context": "{\"function_name\": \"magic_square_test\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 130,
    "solution": "from collections import Counter\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    # Use Counter to count occurrences of each item\n    count_dict = Counter(nums)\n    # Return the item with maximum frequency\n    return max(count_dict.items(), key=lambda x: x[1])[0]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):\n\n### Test\nassert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2",
    "timestamp": "2025-10-17T19:13:01.951447",
    "response_time": "3.05",
    "context": "{\"function_name\": \"max_occurrences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 131,
    "solution": "def reverse_vowels(str1):\n    # List of vowels\n    vowels = 'aeiouAEIOU'\n    \n    # Convert string to list for easier manipulation\n    str_list = list(str1)\n    \n    # Two pointers for traversing from both ends\n    left = 0\n    right = len(str1) - 1\n    \n    while left < right:\n        # Move left pointer until we find a vowel\n        while left < right and str_list[left] not in vowels:\n            left += 1\n            \n        # Move right pointer until we find a vowel\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n            \n        # Swap the vowels\n        if left < right:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n    \n    # Convert back to string and return\n    return ''.join(str_list)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):\n\n### Test\nassert candidate(\"Python\") == \"Python\"",
    "timestamp": "2025-10-17T19:13:07.732843",
    "response_time": "5.78",
    "context": "{\"function_name\": \"reverse_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 132,
    "solution": "def tup_string(tup1):\n    return ''.join(tup1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):\n\n### Test\nassert candidate((\"\"\"e\"\"\", \"\"\"x\"\"\", \"\"\"e\"\"\", \"\"\"r\"\"\", \"\"\"c\"\"\", \"\"\"i\"\"\", \"\"\"s\"\"\", \"\"\"e\"\"\", \"\"\"s\"\"\"))==(\"exercises\")",
    "timestamp": "2025-10-17T19:13:09.833079",
    "response_time": "2.10",
    "context": "{\"function_name\": \"tup_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 133,
    "solution": "def sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):\n\n### Test\nassert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
    "timestamp": "2025-10-17T19:13:12.125922",
    "response_time": "2.29",
    "context": "{\"function_name\": \"sum_negativenum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 135,
    "solution": "def hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n    A hexagonal number is a figurate number that extends the concept of triangular and square numbers to the hexagonal number system.\n    The formula for the nth hexagonal number is: n(2n-1)\n    \"\"\"\n    return n * (2 * n - 1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):\n\n### Test\nassert candidate(10) == 190",
    "timestamp": "2025-10-17T19:13:16.029199",
    "response_time": "3.90",
    "context": "{\"function_name\": \"hexagonal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 137,
    "solution": "def zero_count(nums):\n    if not nums:\n        return 0\n        \n    zero_count = sum(1 for num in nums if num == 0)\n    non_zero_count = len(nums) - zero_count\n    \n    if non_zero_count == 0:\n        return float('inf')\n        \n    return zero_count / non_zero_count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):\n\n### Test\nassert math.isclose(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)",
    "timestamp": "2025-10-17T19:13:18.646874",
    "response_time": "2.61",
    "context": "{\"function_name\": \"zero_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 138,
    "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    # If n is less than or equal to 0, it cannot be represented as sum of powers of 2\n    if n <= 0:\n        return False\n    \n    # Keep track of used powers of 2\n    used_powers = []\n    current_power = 1\n    \n    # Find the largest power of 2 that's less than or equal to n\n    while current_power <= n:\n        current_power *= 2\n    current_power //= 2\n    \n    # Try to construct n using powers of 2\n    remaining = n\n    while remaining > 0 and current_power > 0:\n        if remaining >= current_power:\n            remaining -= current_power\n            used_powers.append(current_power)\n        current_power //= 2\n    \n    # If remaining is 0, we found a valid representation\n    return remaining == 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):\n\n### Test\nassert candidate(10) == True",
    "timestamp": "2025-10-17T19:13:23.805775",
    "response_time": "5.15",
    "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 139,
    "solution": "import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):\n\n### Test\nassert math.isclose(candidate(10), 62.830000000000005, rel_tol=0.001)",
    "timestamp": "2025-10-17T19:13:24.965233",
    "response_time": "1.16",
    "context": "{\"function_name\": \"circle_circumference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 140,
    "solution": "def extract_singly(test_list):\n    result = set()\n    for item in test_list:\n        if isinstance(item, (list, tuple)):\n            result.update(item)\n        else:\n            result.add(item)\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):\n\n### Test\nassert set(candidate([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])",
    "timestamp": "2025-10-17T19:13:26.741116",
    "response_time": "1.77",
    "context": "{\"function_name\": \"extract_singly\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 141,
    "solution": "def pancake_sort(nums):\n    if len(nums) <= 1:\n        return nums\n    \n    for size in range(len(nums), 1, -1):\n        # Find the index of maximum element in the unsorted portion\n        max_idx = nums.index(max(nums[0:size]))\n        \n        if max_idx != size - 1:\n            # If the maximum element is not at its correct position\n            if max_idx != 0:\n                # Flip the sublist from index 0 to max_idx\n                nums[:max_idx + 1] = nums[:max_idx + 1][::-1]\n            \n            # Flip the sublist from index 0 to size-1\n            nums[:size] = nums[:size][::-1]\n    \n    return nums",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):\n\n### Test\nassert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
    "timestamp": "2025-10-17T19:13:31.959655",
    "response_time": "5.21",
    "context": "{\"function_name\": \"pancake_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 142,
    "solution": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):\n\n### Test\nassert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
    "timestamp": "2025-10-17T19:13:33.749218",
    "response_time": "1.78",
    "context": "{\"function_name\": \"count_samepair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 143,
    "solution": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):\n\n### Test\nassert candidate(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
    "timestamp": "2025-10-17T19:13:35.023605",
    "response_time": "1.27",
    "context": "{\"function_name\": \"find_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 145,
    "solution": "def max_Abs_Diff(arr):\n    if len(arr) < 2:\n        return 0\n    \n    min_val = min(arr)\n    max_val = max(arr)\n    \n    return max_val - min_val",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):\n\n### Test\nassert candidate((2,1,5,3)) == 4",
    "timestamp": "2025-10-17T19:13:36.598234",
    "response_time": "1.57",
    "context": "{\"function_name\": \"max_Abs_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 160,
    "solution": "def find_solution(a, b, n):\n    # Using Extended Euclidean Algorithm to find GCD and coefficients\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return gcd, x, y\n\n    # Find GCD and initial coefficients\n    gcd, x, y = extended_gcd(abs(a), abs(b))\n\n    # If n is not divisible by GCD, no solution exists\n    if n % gcd != 0:\n        return None\n\n    # Scale the coefficients to match n\n    x = x * (n // gcd)\n    y = y * (n // gcd)\n\n    # Adjust for negative inputs\n    if a < 0:\n        x = -x\n    if b < 0:\n        y = -y\n\n    return (x, y)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):\n\n### Test\nassert candidate(2, 3, 7) == (2, 1)",
    "timestamp": "2025-10-17T19:13:42.572722",
    "response_time": "5.97",
    "context": "{\"function_name\": \"find_solution\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 161,
    "solution": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]",
    "timestamp": "2025-10-17T19:13:44.572333",
    "response_time": "2.00",
    "context": "{\"function_name\": \"remove_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 162,
    "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        current = n - 2 * i\n        if current <= 0:\n            break\n        total += current\n    return total",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):\n\n### Test\nassert candidate(6) == 12",
    "timestamp": "2025-10-17T19:13:47.078181",
    "response_time": "2.50",
    "context": "{\"function_name\": \"sum_series\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 163,
    "solution": "import math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon.\n    \n    Args:\n        s (int): Number of sides of the polygon\n        l (float): Length of each side\n        \n    Returns:\n        float: Area of the regular polygon\n    \"\"\"\n    # Area of regular polygon = (n * s^2)/(4 * tan(\u03c0/n))\n    # where n is number of sides and s is length of each side\n    area = (s * l * l) / (4 * math.tan(math.pi / s))\n    return area",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):\n\n### Test\nassert math.isclose(candidate(4, 20), 400., rel_tol=0.001)",
    "timestamp": "2025-10-17T19:13:50.005012",
    "response_time": "2.92",
    "context": "{\"function_name\": \"area_polygon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 164,
    "solution": "def are_equivalent(n):\n    # Find sum of divisors for a number\n    divisor_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):\n\n### Test\nassert candidate(36, 57) == False",
    "timestamp": "2025-10-17T19:13:52.012815",
    "response_time": "2.00",
    "context": "{\"function_name\": \"are_equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 165,
    "solution": "def count_char_position(str1):\n    count = 0\n    for i, char in enumerate(str1.lower()):\n        # Check if character's position (0-based index + 1) matches its position in alphabet\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):\n\n### Test\nassert candidate(\"xbcefg\") == 2",
    "timestamp": "2025-10-17T19:13:55.246294",
    "response_time": "3.23",
    "context": "{\"function_name\": \"count_char_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 166,
    "solution": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            # XOR of two numbers is even if their XOR gives a number where last bit is 0\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n                \n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):\n\n### Test\nassert candidate([5, 4, 7, 2, 1]) == 4",
    "timestamp": "2025-10-17T19:13:57.906875",
    "response_time": "2.66",
    "context": "{\"function_name\": \"find_even_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 167,
    "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    \n    # Subtract 1 from n to handle the case when n is already a power of 2\n    n = n - 1\n    \n    # Set all bits after the leftmost 1 to 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n |= n >> 32\n    \n    # Add 1 to get the next power of 2\n    return n + 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):\n\n### Test\nassert candidate(0) == 1",
    "timestamp": "2025-10-17T19:14:02.190681",
    "response_time": "4.28",
    "context": "{\"function_name\": \"next_power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 168,
    "solution": "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):\n\n### Test\nassert candidate([1,2,3], 4) == 0",
    "timestamp": "2025-10-17T19:14:03.691466",
    "response_time": "1.50",
    "context": "{\"function_name\": \"frequency\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 170,
    "solution": "def sum_range_list(list1, m, n):\n    return sum(list1[m:n+1])",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):\n\n### Test\nassert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29",
    "timestamp": "2025-10-17T19:14:05.935124",
    "response_time": "2.24",
    "context": "{\"function_name\": \"sum_range_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 171,
    "solution": "def perimeter_pentagon(a):\n    return 5 * a",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):\n\n### Test\nassert candidate(5) == 25",
    "timestamp": "2025-10-17T19:14:07.818697",
    "response_time": "1.88",
    "context": "{\"function_name\": \"perimeter_pentagon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 172,
    "solution": "def count_occurance(s):\n    return s.count('std')",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):\n\n### Test\nassert candidate(\"letstdlenstdporstd\") == 3\nassert candidate(\"truststdsolensporsd\") == 1",
    "timestamp": "2025-10-17T19:14:09.862758",
    "response_time": "2.04",
    "context": "{\"function_name\": \"count_occurance\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 222,
    "solution": "def check_type(test_tuple):\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all(isinstance(item, first_type) for item in test_tuple)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):\n\n### Test\nassert candidate((5, 6, 7, 3, 5, 6) ) == True",
    "timestamp": "2025-10-17T19:14:11.898879",
    "response_time": "2.03",
    "context": "{\"function_name\": \"check_type\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 223,
    "solution": "def binary_search(arr, n, x):\n    # Find first occurrence of x using binary search\n    first = binary_search_first(arr, 0, n-1, x)\n    \n    # If element is not present at all, return False\n    if first == -1:\n        return False\n    \n    # If first occurrence is found, check if the element appears more than n/2 times\n    # Since array is sorted, we can check if element at (first + n/2) index is same as x\n    if first + n//2 < n and arr[first + n//2] == x:\n        return True\n    return False\n\ndef binary_search_first(arr, low, high, x):\n    if high >= low:\n        mid = (low + high) // 2\n        \n        # Check if x is present at mid and is first occurrence\n        if (mid == 0 or arr[mid-1] < x) and arr[mid] == x:\n            return mid\n        # If x is greater than mid element, search in right half\n        elif arr[mid] < x:\n            return binary_search_first(arr, mid+1, high, x)\n        # If x is smaller or equal, search in left half\n        else:\n            return binary_search_first(arr, low, mid-1, x)\n    return -1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):\n\n### Test\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
    "timestamp": "2025-10-17T19:14:19.285308",
    "response_time": "7.38",
    "context": "{\"function_name\": \"binary_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 224,
    "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):\n\n### Test\nassert candidate(2) == 1",
    "timestamp": "2025-10-17T19:14:21.521001",
    "response_time": "2.23",
    "context": "{\"function_name\": \"count_Set_Bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 226,
    "solution": "def odd_values_string(str):\n    return str[::2]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to remove the characters which have odd index values of a given string.\n\n### Signature\ndef odd_values_string(str):\n\n### Test\nassert candidate('abcdef') == 'ace'\nassert candidate('python') == 'pto'",
    "timestamp": "2025-10-17T19:14:23.415217",
    "response_time": "1.89",
    "context": "{\"function_name\": \"odd_values_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 227,
    "solution": "def min_of_three(a,b,c):\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find minimum of three numbers.\n\n### Signature\ndef min_of_three(a,b,c):\n\n### Test\nassert candidate(10,20,0)==0",
    "timestamp": "2025-10-17T19:14:24.970587",
    "response_time": "1.55",
    "context": "{\"function_name\": \"min_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 228,
    "solution": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a mask with 1's in the range [l,r]\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    \n    # AND the number with mask\n    # If result is 0, all bits in range are unset\n    return (n & mask) == 0",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether all the bits are unset in the given range or not.\n\n### Signature\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n\n### Test\nassert candidate(4,1,2) == True",
    "timestamp": "2025-10-17T19:14:29.058847",
    "response_time": "4.08",
    "context": "{\"function_name\": \"all_Bits_Set_In_The_Given_Range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 229,
    "solution": "def re_arrange_array(arr, n):\n    # Create temporary arrays to store negative and positive numbers\n    neg = []\n    pos = []\n    \n    # Separate negative and positive numbers while maintaining relative order\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    \n    # Copy elements back to original array\n    k = 0\n    \n    # First copy negative elements\n    for i in range(len(neg)):\n        arr[k] = neg[i]\n        k += 1\n    \n    # Then copy positive elements\n    for i in range(len(pos)):\n        arr[k] = pos[i]\n        k += 1\n    \n    return arr",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n### Signature\ndef re_arrange_array(arr, n):\n\n### Test\nassert candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
    "timestamp": "2025-10-17T19:14:34.037838",
    "response_time": "4.97",
    "context": "{\"function_name\": \"re_arrange_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 230,
    "solution": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n### Signature\ndef replace_blank(str1,char):\n\n### Test\nassert candidate(\"hello people\",\"\"\"@\"\"\")==(\"hello@people\")",
    "timestamp": "2025-10-17T19:14:35.215648",
    "response_time": "1.17",
    "context": "{\"function_name\": \"replace_blank\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 232,
    "solution": "def larg_nnum(list1, n):\n    # Sort the list in descending order\n    sorted_list = sorted(list1, reverse=True)\n    # Return first n elements\n    return sorted_list[:n]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n### Signature\ndef larg_nnum(list1,n):\n\n### Test\nassert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])",
    "timestamp": "2025-10-17T19:14:38.007136",
    "response_time": "2.79",
    "context": "{\"function_name\": \"larg_nnum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 233,
    "solution": "import math\n\ndef lateralsuface_cylinder(r,h):\n    # Lateral surface area of cylinder = 2\u03c0rh\n    return 2 * math.pi * r * h",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cylinder.\n\n### Signature\ndef lateralsuface_cylinder(r,h):\n\n### Test\nassert math.isclose(candidate(10,5), 314.15000000000003, rel_tol=0.001)",
    "timestamp": "2025-10-17T19:14:39.303193",
    "response_time": "1.29",
    "context": "{\"function_name\": \"lateralsuface_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 234,
    "solution": "def volume_cube(l):\n    return l * l * l",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the volume of a cube given its side length.\n\n### Signature\ndef volume_cube(l):\n\n### Test\nassert candidate(3)==27",
    "timestamp": "2025-10-17T19:14:42.043164",
    "response_time": "2.73",
    "context": "{\"function_name\": \"volume_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 235,
    "solution": "def even_bit_set_number(n):\n    # Get the number of bits needed to represent n\n    num_bits = len(bin(n)[2:])\n    \n    # Create a mask with all even bits set to 1\n    # Even positions are 1,3,5... (0-based indexing)\n    mask = 0\n    for i in range(1, num_bits + 1, 2):\n        mask |= (1 << i)\n    \n    # Set all even bits in the number using OR operation\n    return n | mask",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to set all even bits of a given number.\n\n### Signature\ndef even_bit_set_number(n):\n\n### Test\nassert candidate(10) == 10",
    "timestamp": "2025-10-17T19:14:45.237571",
    "response_time": "3.19",
    "context": "{\"function_name\": \"even_bit_set_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 237,
    "solution": "from collections import defaultdict\n\ndef check_occurences(test_list):\n    count_dict = defaultdict(int)\n    \n    for tup in test_list:\n        # Sort the tuple elements to treat (a,b) and (b,a) as same\n        sorted_tup = tuple(sorted(tup))\n        count_dict[sorted_tup] += 1\n    \n    return dict(count_dict)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n### Signature\ndef check_occurences(test_list):\n\n### Test\nassert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
    "timestamp": "2025-10-17T19:14:47.964439",
    "response_time": "2.72",
    "context": "{\"function_name\": \"check_occurences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 238,
    "solution": "def number_of_substrings(str):\n    n = len(str)\n    # For a string of length n, number of non-empty substrings\n    # is equal to n*(n+1)/2\n    # This is because:\n    # Substrings of length 1: n\n    # Substrings of length 2: n-1\n    # Substrings of length 3: n-2\n    # ...\n    # Substrings of length n: 1\n    # Total = n + (n-1) + (n-2) + ... + 1 = n*(n+1)/2\n    return (n * (n + 1)) // 2",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count the number of non-empty substrings of a given string.\n\n### Signature\ndef number_of_substrings(str):\n\n### Test\nassert candidate(\"abc\") == 6",
    "timestamp": "2025-10-17T19:14:53.072438",
    "response_time": "5.10",
    "context": "{\"function_name\": \"number_of_substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 239,
    "solution": "def get_total_number_of_sequences(m, n):\n    def count_sequences(prev, remaining_len):\n        if remaining_len == 0:\n            return 1\n        \n        total = 0\n        start = max(1, 2 * prev) if prev else 1\n        \n        for num in range(start, m + 1):\n            total += count_sequences(num, remaining_len - 1)\n            \n        return total\n    \n    return count_sequences(0, n)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n### Signature\ndef get_total_number_of_sequences(m,n):\n\n### Test\nassert candidate(10, 4) == 4",
    "timestamp": "2025-10-17T19:14:56.471496",
    "response_time": "3.39",
    "context": "{\"function_name\": \"get_total_number_of_sequences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 240,
    "solution": "def replace_list(list1, list2):\n    return list1[:-1] + list2",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\n### Signature\ndef replace_list(list1,list2):\n\n### Test\nassert candidate([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
    "timestamp": "2025-10-17T19:14:58.375942",
    "response_time": "1.90",
    "context": "{\"function_name\": \"replace_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 242,
    "solution": "def count_charac(str1):\n    return len(str1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to count the total number of characters in a string.\n\n### Signature\ndef count_charac(str1):\n\n### Test\nassert candidate(\"python programming\")==18",
    "timestamp": "2025-10-17T19:14:59.373308",
    "response_time": "0.99",
    "context": "{\"function_name\": \"count_charac\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 244,
    "solution": "import math\n\ndef next_Perfect_Square(N):\n    # Find the square root of N and round up to next integer\n    sqrt_n = math.ceil(math.sqrt(N))\n    \n    # Return the square of this number\n    return sqrt_n * sqrt_n",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the next perfect square greater than a given number.\n\n### Signature\ndef next_Perfect_Square(N):\n\n### Test\nassert candidate(35) == 36",
    "timestamp": "2025-10-17T19:15:01.970328",
    "response_time": "2.59",
    "context": "{\"function_name\": \"next_Perfect_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 245,
    "solution": "def max_sum(arr):\n    n = len(arr)\n    # Initialize arrays to store increasing and decreasing sequence sums\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Initialize first elements\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n    \n    # Fill increasing sequence sums\n    for i in range(1, n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    \n    # Fill decreasing sequence sums\n    for i in range(n-2, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    \n    # Find maximum sum by combining increasing and decreasing sequences\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_bitonic_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\n### Signature\ndef max_sum(arr):\n\n### Test\nassert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194",
    "timestamp": "2025-10-17T19:15:08.082540",
    "response_time": "6.11",
    "context": "{\"function_name\": \"max_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 246,
    "solution": "def babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot calculate square root of negative number\")\n    if number == 0:\n        return 0\n        \n    # Initial guess - can be any positive number, but n/2 works well\n    x = number / 2\n    \n    # Tolerance for convergence\n    epsilon = 1e-10\n    \n    while True:\n        # Calculate next approximation using Babylonian method\n        next_x = (x + number/x) / 2\n        \n        # Check if we've reached desired precision\n        if abs(next_x - x) < epsilon:\n            return next_x\n            \n        x = next_x",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function for computing square roots using the babylonian method.\n\n### Signature\ndef babylonian_squareroot(number):\n\n### Test\nassert math.isclose(candidate(10), 3.162277660168379, rel_tol=0.001)",
    "timestamp": "2025-10-17T19:15:13.231674",
    "response_time": "5.14",
    "context": "{\"function_name\": \"babylonian_squareroot\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 247,
    "solution": "def lps(str):\n    n = len(str)\n    # Create a table to store results of subproblems\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    # Each single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the table in bottom up manner\n    for cl in range(2, n + 1):  # cl is the chain length\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    \n    return dp[0][n - 1]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n\n### Signature\ndef lps(str):\n\n### Test\nassert candidate(\"TENS FOR TENS\") == 5",
    "timestamp": "2025-10-17T19:15:18.956215",
    "response_time": "5.72",
    "context": "{\"function_name\": \"lps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 248,
    "solution": "def harmonic_sum(n):\n    if n <= 1:\n        return 0\n    \n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    \n    return sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in an integer n and calculates the harmonic sum of n-1.\n\n### Signature\ndef harmonic_sum(n):\n\n### Test\nassert math.isclose(candidate(7), 2.5928571428571425, rel_tol=0.001)",
    "timestamp": "2025-10-17T19:15:20.547581",
    "response_time": "1.59",
    "context": "{\"function_name\": \"harmonic_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 249,
    "solution": "def intersection_array(array_nums1, array_nums2):\n    # Convert arrays to sets for efficient intersection operation\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Find intersection between the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert back to list and sort for consistent output\n    return sorted(list(intersection))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the intersection of two arrays.\n\n### Signature\ndef intersection_array(array_nums1,array_nums2):\n\n### Test\nassert candidate([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
    "timestamp": "2025-10-17T19:15:24.874819",
    "response_time": "4.32",
    "context": "{\"function_name\": \"intersection_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 250,
    "solution": "def count_X(tup, x):\n    return tup.count(x)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\n### Signature\ndef count_X(tup, x):\n\n### Test\nassert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
    "timestamp": "2025-10-17T19:15:27.054063",
    "response_time": "2.18",
    "context": "{\"function_name\": \"count_X\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 251,
    "solution": "def insert_element(list, element):\n    result = []\n    for item in list:\n        result.extend([element, item])\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\n### Signature\ndef insert_element(list,element):\n\n### Test\nassert candidate(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']",
    "timestamp": "2025-10-17T19:15:28.530325",
    "response_time": "1.47",
    "context": "{\"function_name\": \"insert_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 252,
    "solution": "import math\nimport cmath\n\ndef convert(numbers):\n    # Handle single number case\n    if not isinstance(numbers, (list, tuple)):\n        numbers = [numbers]\n    \n    result = []\n    for num in numbers:\n        # Convert to complex if input is real\n        if not isinstance(num, complex):\n            num = complex(num)\n        \n        # Calculate magnitude (r) and phase angle (theta)\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # Convert theta from radians to degrees\n        result.append((r, theta))\n    \n    # Return single tuple if input was single number\n    if len(result) == 1:\n        return result[0]\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to convert complex numbers to polar coordinates.\n\n### Signature\ndef convert(numbers):\n\n### Test\nassert candidate(1) == (1.0, 0.0)",
    "timestamp": "2025-10-17T19:15:32.022792",
    "response_time": "3.49",
    "context": "{\"function_name\": \"convert\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 253,
    "solution": "def count_integer(list1):\n    return sum(1 for item in list1 if isinstance(item, int))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function that returns the number of integer elements in a given list.\n\n### Signature\ndef count_integer(list1):\n\n### Test\nassert candidate([1,2,'abc',1.2]) == 2",
    "timestamp": "2025-10-17T19:15:34.033102",
    "response_time": "2.01",
    "context": "{\"function_name\": \"count_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 255,
    "solution": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\n### Signature\ndef combinations_colors(l, n):\n\n### Test\nassert candidate( [\"Red\",\"Green\",\"Blue\"],1)==[(\"\"\"Red\"\"\",), (\"\"\"Green\"\"\",), (\"\"\"Blue\"\"\",)]",
    "timestamp": "2025-10-17T19:15:35.579114",
    "response_time": "1.54",
    "context": "{\"function_name\": \"combinations_colors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 256,
    "solution": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    \n    # Initialize array to mark non-prime numbers\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    # Using Sieve of Eratosthenes to mark non-prime numbers\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            # Mark all multiples of i as non-prime\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    \n    # Count the number of prime numbers\n    return sum(is_prime)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n### Signature\ndef count_Primes_nums(n):\n\n### Test\nassert candidate(5) == 2",
    "timestamp": "2025-10-17T19:15:38.358248",
    "response_time": "2.77",
    "context": "{\"function_name\": \"count_Primes_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 257,
    "solution": "def swap_numbers(a,b):\n    return (b,a)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\n### Signature\ndef swap_numbers(a,b):\n\n### Test\nassert candidate(10,20)==(20,10)",
    "timestamp": "2025-10-17T19:15:40.558423",
    "response_time": "2.19",
    "context": "{\"function_name\": \"swap_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 259,
    "solution": "def maximize_elements(test_tup1, test_tup2):\n    # Convert tuples to lists for easier manipulation\n    result = []\n    \n    # Iterate through both tuples simultaneously\n    for t1, t2 in zip(test_tup1, test_tup2):\n        # Create new tuple with maximum values at each position\n        new_tuple = (max(t1[0], t2[0]), max(t1[1], t2[1]))\n        result.append(new_tuple)\n    \n    # Convert back to tuple of tuples\n    return tuple(result)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to maximize the given two tuples.\n\n### Signature\ndef maximize_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
    "timestamp": "2025-10-17T19:15:44.478928",
    "response_time": "3.92",
    "context": "{\"function_name\": \"maximize_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 260,
    "solution": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Initialize first two NSW numbers\n    nsw = [1, 1]\n    \n    # Generate NSW sequence until we find enough primes\n    primes_found = 0\n    i = 2\n    \n    while primes_found < n:\n        # Generate next NSW number\n        next_nsw = 2 * nsw[i-1] + nsw[i-2]\n        nsw.append(next_nsw)\n        \n        # Check if it's prime\n        if is_prime(next_nsw):\n            primes_found += 1\n            if primes_found == n:\n                return next_nsw\n        \n        i += 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n### Signature\ndef newman_prime(n):\n\n### Test\nassert candidate(3) == 7",
    "timestamp": "2025-10-17T19:15:50.748681",
    "response_time": "6.26",
    "context": "{\"function_name\": \"newman_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 261,
    "solution": "def division_elements(test_tup1, test_tup2):\n    return tuple(x // y for x, y in zip(test_tup1, test_tup2))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n### Signature\ndef division_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
    "timestamp": "2025-10-17T19:15:52.745794",
    "response_time": "1.99",
    "context": "{\"function_name\": \"division_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 262,
    "solution": "def split_two_parts(list1, L):\n    return (list1[:L], list1[L:])",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\n### Signature\ndef split_two_parts(list1, L):\n\n### Test\nassert candidate([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
    "timestamp": "2025-10-17T19:15:54.807013",
    "response_time": "2.06",
    "context": "{\"function_name\": \"split_two_parts\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 264,
    "solution": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog years.\n    First two years count as 10.5 years each\n    After that each human year counts as 4 dog years\n    \n    Args:\n        h_age (int): Age in human years\n        \n    Returns:\n        float: Age in dog years\n    \"\"\"\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to calculate a dog's age in dog's years.\n\n### Signature\ndef dog_age(h_age):\n\n### Test\nassert candidate(12)==61",
    "timestamp": "2025-10-17T19:15:59.529060",
    "response_time": "4.72",
    "context": "{\"function_name\": \"dog_age\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 265,
    "solution": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\n### Signature\ndef list_split(S, step):\n\n### Test\nassert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]",
    "timestamp": "2025-10-17T19:16:02.154760",
    "response_time": "2.62",
    "context": "{\"function_name\": \"list_split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 266,
    "solution": "def lateralsurface_cube(l):\n    # Lateral surface area of a cube is the area of four sides\n    # Each side is a square with area = length * length\n    # Total lateral surface area = 4 * length * length\n    return 4 * l * l",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cube given its side length.\n\n### Signature\ndef lateralsurface_cube(l):\n\n### Test\nassert candidate(5)==100",
    "timestamp": "2025-10-17T19:16:05.154248",
    "response_time": "2.99",
    "context": "{\"function_name\": \"lateralsurface_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 267,
    "solution": "def square_Sum(n):\n    sum = 0\n    odd_num = 1\n    for i in range(n):\n        sum += odd_num * odd_num\n        odd_num += 2\n    return sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n### Signature\ndef square_Sum(n):\n\n### Test\nassert candidate(2) == 10",
    "timestamp": "2025-10-17T19:16:09.781353",
    "response_time": "4.62",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 268,
    "solution": "def find_star_num(n):\n    # Star number formula: 6n(n-1) + 1\n    # where n is the position of the star number\n    return 6 * n * (n - 1) + 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the n'th star number.\n\n### Signature\ndef find_star_num(n):\n\n### Test\nassert candidate(3) == 37",
    "timestamp": "2025-10-17T19:16:11.711991",
    "response_time": "1.92",
    "context": "{\"function_name\": \"find_star_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 269,
    "solution": "def ascii_value(k):\n    return ord(k)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the ascii value of a character.\n\n### Signature\ndef ascii_value(k):\n\n### Test\nassert candidate('A')==65",
    "timestamp": "2025-10-17T19:16:13.904376",
    "response_time": "2.19",
    "context": "{\"function_name\": \"ascii_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 270,
    "solution": "def sum_even_and_even_index(arr):\n    total = 0\n    for i in range(0, len(arr), 2):  # iterate through even indices\n        if arr[i] % 2 == 0:  # check if number at even index is even\n            total += arr[i]\n    return total",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the sum of even numbers at even positions of a list.\n\n### Signature\ndef sum_even_and_even_index(arr):\n\n### Test\nassert candidate([5, 6, 12, 1, 18, 8]) == 30",
    "timestamp": "2025-10-17T19:16:15.753803",
    "response_time": "1.84",
    "context": "{\"function_name\": \"sum_even_and_even_index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 271,
    "solution": "def even_Power_Sum(n):\n    sum = 0\n    count = 0\n    num = 2\n    \n    while count < n:\n        sum += num ** 5\n        num += 2\n        count += 1\n    \n    return sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n### Signature\ndef even_Power_Sum(n):\n\n### Test\nassert candidate(2) == 1056",
    "timestamp": "2025-10-17T19:16:18.651323",
    "response_time": "2.89",
    "context": "{\"function_name\": \"even_Power_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 272,
    "solution": "def rear_extract(test_list):\n    return [tup[-1] for tup in test_list]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n### Signature\ndef rear_extract(test_list):\n\n### Test\nassert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
    "timestamp": "2025-10-17T19:16:21.079562",
    "response_time": "2.42",
    "context": "{\"function_name\": \"rear_extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 273,
    "solution": "def substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n### Signature\ndef substract_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
    "timestamp": "2025-10-17T19:16:23.424657",
    "response_time": "2.34",
    "context": "{\"function_name\": \"substract_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 274,
    "solution": "def even_binomial_Coeff_Sum(n):\n    # Initialize result\n    result = 0\n    \n    # Calculate binomial coefficients for even indices\n    for i in range(0, n + 1, 2):\n        # Initialize value for current coefficient\n        coef = 1\n        \n        # Calculate nCi\n        for j in range(i):\n            coef = coef * (n - j)\n            coef = coef // (j + 1)\n            \n        result += coef\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n### Signature\ndef even_binomial_Coeff_Sum( n):\n\n### Test\nassert candidate(4) == 8",
    "timestamp": "2025-10-17T19:16:28.620638",
    "response_time": "5.19",
    "context": "{\"function_name\": \"even_binomial_Coeff_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 276,
    "solution": "import math\n\ndef volume_cylinder(r,h):\n    return math.pi * r * r * h",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n\n### Signature\ndef volume_cylinder(r,h):\n\n### Test\nassert math.isclose(candidate(10,5), 1570.7500000000002, rel_tol=0.001)",
    "timestamp": "2025-10-17T19:16:30.298375",
    "response_time": "1.67",
    "context": "{\"function_name\": \"volume_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 277,
    "solution": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n### Signature\ndef dict_filter(dict,n):\n\n### Test\nassert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
    "timestamp": "2025-10-17T19:16:31.736178",
    "response_time": "1.43",
    "context": "{\"function_name\": \"dict_filter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 278,
    "solution": "def count_first_elements(test_tup):\n    count = 0\n    for item in test_tup:\n        if isinstance(item, tuple):\n            break\n        count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n\n### Signature\ndef count_first_elements(test_tup):\n\n### Test\nassert candidate((1, 5, 7, (4, 6), 10) ) == 3",
    "timestamp": "2025-10-17T19:16:33.528249",
    "response_time": "1.78",
    "context": "{\"function_name\": \"count_first_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 279,
    "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Calculate the nth decagonal number.\n    A decagonal number is a figurate number that extends the concept of triangular and square numbers to a decagon (10-sided polygon).\n    The formula for the nth decagonal number is: n * (8n - 3)\n    \"\"\"\n    return n * (8 * n - 3)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the nth decagonal number.\n\n### Signature\ndef is_num_decagonal(n):\n\n### Test\nassert candidate(3) == 27",
    "timestamp": "2025-10-17T19:16:37.369038",
    "response_time": "3.84",
    "context": "{\"function_name\": \"is_num_decagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 280,
    "solution": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n### Signature\ndef sequential_search(dlist, item):\n\n### Test\nassert candidate([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
    "timestamp": "2025-10-17T19:16:40.314475",
    "response_time": "2.94",
    "context": "{\"function_name\": \"sequential_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 281,
    "solution": "def all_unique(test_list):\n    # Convert list to set to remove duplicates and compare lengths\n    # If lengths are equal, all elements were unique\n    return len(set(test_list)) == len(test_list)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check if the elements of a given list are unique or not.\n\n### Signature\ndef all_unique(test_list):\n\n### Test\nassert candidate([1,2,3]) == True",
    "timestamp": "2025-10-17T19:16:42.593362",
    "response_time": "2.27",
    "context": "{\"function_name\": \"all_unique\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 282,
    "solution": "def sub_list(nums1, nums2):\n    return [a - b for a, b in zip(nums1, nums2)]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to subtract two lists element-wise.\n\n### Signature\ndef sub_list(nums1,nums2):\n\n### Test\nassert candidate([1, 2, 3],[4,5,6])==[-3,-3,-3]",
    "timestamp": "2025-10-17T19:16:43.842105",
    "response_time": "1.24",
    "context": "{\"function_name\": \"sub_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 283,
    "solution": "def validate(n):\n    # Convert number to string to iterate through digits\n    num_str = str(n)\n    \n    # Count frequency of each digit\n    digit_count = {}\n    for digit in num_str:\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n    \n    # Check if frequency is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n### Signature\ndef validate(n):\n\n### Test\nassert candidate(1234) == True",
    "timestamp": "2025-10-17T19:16:46.398768",
    "response_time": "2.55",
    "context": "{\"function_name\": \"validate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 284,
    "solution": "def check_element(list, element):\n    return all(item == element for item in list)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\n### Signature\ndef check_element(list,element):\n\n### Test\nassert candidate([\"green\", \"orange\", \"black\", \"white\"],\"\"\"blue\"\"\")==False",
    "timestamp": "2025-10-17T19:16:48.309626",
    "response_time": "1.91",
    "context": "{\"function_name\": \"check_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 285,
    "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = 'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n### Signature\ndef text_match_two_three(text):\n\n### Test\nassert candidate(\"ac\")==(False)",
    "timestamp": "2025-10-17T19:16:49.803558",
    "response_time": "1.49",
    "context": "{\"function_name\": \"text_match_two_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 286,
    "solution": "def max_sub_array_sum_repeated(a, n, k):\n    # Handle empty array case\n    if n == 0:\n        return 0\n    \n    # Calculate the sum of the entire array\n    array_sum = sum(a)\n    \n    # If k == 1, use Kadane's algorithm on the original array\n    if k == 1:\n        curr_sum = max_sum = a[0]\n        for i in range(1, n):\n            curr_sum = max(a[i], curr_sum + a[i])\n            max_sum = max(max_sum, curr_sum)\n        return max_sum\n    \n    # For k > 1, we need to consider three cases:\n    # 1. Maximum subarray sum within a single array\n    # 2. Maximum subarray sum spanning two arrays\n    # 3. Maximum sum considering complete arrays in between\n    \n    # Use Kadane's algorithm for single array\n    curr_sum = max_sum = a[0]\n    for i in range(1, n):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    \n    # If array_sum is positive, we can include complete middle arrays\n    if array_sum > 0:\n        # Calculate maximum sum spanning two arrays\n        # First array suffix\n        curr_sum = suffix_sum = 0\n        for i in range(n-1, -1, -1):\n            curr_sum += a[i]\n            suffix_sum = max(suffix_sum, curr_sum)\n        \n        # Second array prefix\n        curr_sum = prefix_sum = 0\n        for i in range(n):\n            curr_sum += a[i]\n            prefix_sum = max(prefix_sum, curr_sum)\n        \n        # Maximum possible sum will be maximum of:\n        # 1. max_sum (from single array)\n        # 2. suffix_sum + prefix_sum (spanning two arrays)\n        # 3. suffix_sum + array_sum * (k-2) + prefix_sum (if k > 2)\n        if k == 2:\n            return max(max_sum, suffix_sum + prefix_sum)\n        else:\n            return max(max_sum, suffix_sum + array_sum * (k-2) + prefix_sum)\n    \n    # If array_sum is negative or zero, maximum sum will be from case 1 or case 2\n    # Calculate maximum sum spanning two arrays\n    curr_sum = suffix_sum = 0\n    for i in range(n-1, -1, -1):\n        curr_sum += a[i]\n        suffix_sum = max(suffix_sum, curr_sum)\n    \n    curr_sum = prefix_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        prefix_sum = max(prefix_sum, curr_sum)\n    \n    return max(max_sum, suffix_sum + prefix_sum)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n### Signature\ndef max_sub_array_sum_repeated(a, n, k):\n\n### Test\nassert candidate([10, 20, -30, -1], 4, 3) == 30",
    "timestamp": "2025-10-17T19:17:00.016210",
    "response_time": "10.21",
    "context": "{\"function_name\": \"max_sub_array_sum_repeated\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 287,
    "solution": "def square_Sum(n):\n    sum = 0\n    count = 0\n    num = 2\n    \n    while count < n:\n        sum += num * num\n        num += 2\n        count += 1\n    \n    return sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n### Signature\ndef square_Sum(n):\n\n### Test\nassert candidate(2) == 20",
    "timestamp": "2025-10-17T19:17:02.488035",
    "response_time": "2.47",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 290,
    "solution": "def max_length(list1):\n    if not list1:\n        return (0, [])\n    \n    max_len = len(list1[0])\n    max_list = list1[0]\n    \n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n            \n    return (max_len, max_list)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the list of maximum length in a list of lists.\n\n### Signature\ndef max_length(list1):\n\n### Test\nassert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
    "timestamp": "2025-10-17T19:17:05.590601",
    "response_time": "3.10",
    "context": "{\"function_name\": \"max_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 291,
    "solution": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    # same[i] represents the number of ways to paint n posts\n    # where the last two posts have the same color\n    same = [0] * (n + 1)\n    \n    # diff[i] represents the number of ways to paint n posts\n    # where the last two posts have different colors\n    diff = [0] * (n + 1)\n    \n    # Initialize for n = 2\n    same[2] = k  # k ways to paint both posts with same color\n    diff[2] = k * (k - 1)  # k * (k-1) ways to paint with different colors\n    \n    # Fill up the arrays for remaining posts\n    for i in range(3, n + 1):\n        # To paint current post same as previous:\n        # Previous two should be different and we have only one choice for current\n        same[i] = diff[i - 1]\n        \n        # To paint current post different from previous:\n        # We can use any color except the color of previous post\n        # So multiply by (k-1)\n        diff[i] = (same[i - 1] + diff[i - 1]) * (k - 1)\n    \n    # Total ways = ways when last two are same + ways when last two are different\n    return same[n] + diff[n]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n### Signature\ndef count_no_of_ways(n, k):\n\n### Test\nassert candidate(2, 4) == 16",
    "timestamp": "2025-10-17T19:17:15.252950",
    "response_time": "9.66",
    "context": "{\"function_name\": \"count_no_of_ways\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 292,
    "solution": "def find(n,m):\n    return n // m",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n### Signature\ndef find(n,m):\n\n### Test\nassert candidate(10,3) == 3",
    "timestamp": "2025-10-17T19:17:17.184486",
    "response_time": "1.93",
    "context": "{\"function_name\": \"find\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 293,
    "solution": "import math\n\ndef otherside_rightangle(w,h):\n    # Using Pythagorean theorem: a\u00b2 + b\u00b2 = c\u00b2\n    # where c is the hypotenuse (the longest side)\n    return math.sqrt(w**2 + h**2)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the third side of a right angled triangle.\n\n### Signature\ndef otherside_rightangle(w,h):\n\n### Test\nassert candidate(7,8)==10.63014581273465",
    "timestamp": "2025-10-17T19:17:20.747017",
    "response_time": "3.56",
    "context": "{\"function_name\": \"otherside_rightangle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 294,
    "solution": "def max_val(listval):\n    max_number = float('-inf')\n    for item in listval:\n        if isinstance(item, (int, float)) and item > max_number:\n            max_number = item\n    return max_number",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the maximum value in a given heterogeneous list.\n\n### Signature\ndef max_val(listval):\n\n### Test\nassert candidate(['Python', 3, 2, 4, 5, 'version'])==5",
    "timestamp": "2025-10-17T19:17:22.541301",
    "response_time": "1.79",
    "context": "{\"function_name\": \"max_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 295,
    "solution": "def sum_div(number):\n    # Handle edge case for negative numbers\n    if number <= 0:\n        return 0\n    \n    # Initialize sum to 0\n    divisors_sum = 0\n    \n    # Find all divisors and add them\n    for i in range(1, number):\n        if number % i == 0:\n            divisors_sum += i\n            \n    return divisors_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to return the sum of all divisors of a number.\n\n### Signature\ndef sum_div(number):\n\n### Test\nassert candidate(8)==7",
    "timestamp": "2025-10-17T19:17:26.364183",
    "response_time": "3.82",
    "context": "{\"function_name\": \"sum_div\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 296,
    "solution": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to count inversions in an array.\n\n### Signature\ndef get_Inv_Count(arr):\n\n### Test\nassert candidate([1,20,6,4,5]) == 5",
    "timestamp": "2025-10-17T19:17:29.373558",
    "response_time": "3.00",
    "context": "{\"function_name\": \"get_Inv_Count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 297,
    "solution": "def flatten_list(list1):\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to flatten a given nested list structure.\n\n### Signature\ndef flatten_list(list1):\n\n### Test\nassert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
    "timestamp": "2025-10-17T19:17:31.144244",
    "response_time": "1.76",
    "context": "{\"function_name\": \"flatten_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 299,
    "solution": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # Create a defaultdict to store aggregated values\n    aggregates = defaultdict(int)\n    \n    # Aggregate values for each name\n    for name, value in stdata:\n        aggregates[name] += value\n    \n    # Find the name with maximum aggregate value\n    max_name = max(aggregates.items(), key=lambda x: x[1])\n    \n    # Return tuple of name and its aggregate value\n    return (max_name[0], max_name[1])",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\n### Signature\ndef max_aggregate(stdata):\n\n### Test\nassert candidate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
    "timestamp": "2025-10-17T19:17:33.970668",
    "response_time": "2.82",
    "context": "{\"function_name\": \"max_aggregate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 300,
    "solution": "def count_binary_seq(n):\n    # For each possible sum in first half (0 to n), we need to find combinations\n    # that give same sum in second half\n    total = 0\n    \n    # For each possible sum in first half (0 to n)\n    for sum_val in range(n + 1):\n        # Count ways to get sum_val in n bits\n        ways_first = combination(n, sum_val)\n        # We need same sum in second half\n        ways_second = combination(n, sum_val)\n        # Multiply ways for first and second half\n        total += ways_first * ways_second\n    \n    return total\n\ndef combination(n, r):\n    # Calculate nCr\n    if r > n:\n        return 0\n    r = min(r, n - r)\n    numerator = 1\n    denominator = 1\n    for i in range(r):\n        numerator *= (n - i)\n        denominator *= (i + 1)\n    return numerator // denominator",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n### Signature\ndef count_binary_seq(n):\n\n### Test\nassert math.isclose(candidate(1), 2.0, rel_tol=0.001)",
    "timestamp": "2025-10-17T19:17:39.789549",
    "response_time": "5.81",
    "context": "{\"function_name\": \"count_binary_seq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 301,
    "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max(dict_depth(v) for v in d.values())",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the depth of a dictionary.\n\n### Signature\ndef dict_depth(d):\n\n### Test\nassert candidate({'a':1, 'b': {'c': {'d': {}}}})==4",
    "timestamp": "2025-10-17T19:17:42.311723",
    "response_time": "2.52",
    "context": "{\"function_name\": \"dict_depth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 304,
    "solution": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    # Process each rotation\n    for i in range(rotations):\n        # Get the range for current rotation\n        left = ranges[i][0]\n        right = ranges[i][1]\n        \n        # Store the first element of range\n        temp = arr[left]\n        \n        # Shift elements within range one position left\n        for j in range(left, right):\n            arr[j] = arr[j + 1]\n            \n        # Place first element at the end of range\n        arr[right] = temp\n        \n    # Return element at given index after all rotations\n    return arr[index]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find element at a given index after number of rotations.\n\n### Signature\ndef find_Element(arr,ranges,rotations,index) :\n\n### Test\nassert candidate([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
    "timestamp": "2025-10-17T19:17:47.324980",
    "response_time": "5.01",
    "context": "{\"function_name\": \"find_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 305,
    "solution": "def start_withp(words):\n    # Split all strings into individual words and flatten the list\n    all_words = [word for phrase in words for word in phrase.split()]\n    \n    # Filter words that start with 'p' or 'P'\n    p_words = [word for word in all_words if word.lower().startswith('p')]\n    \n    # Return first two words as a tuple\n    return tuple(p_words[:2])",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to return two words from a list of words starting with letter 'p'.\n\n### Signature\ndef start_withp(words):\n\n### Test\nassert candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==(\"\"\"Python\"\"\", \"\"\"PHP\"\"\")",
    "timestamp": "2025-10-17T19:17:50.675555",
    "response_time": "3.34",
    "context": "{\"function_name\": \"start_withp\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 306,
    "solution": "def max_sum_increasing_subseq(a, n, index, k):\n    # Base case: if index is negative\n    if index < 0:\n        # If k is valid and greater than 0, return the element at k\n        if k >= 0 and k < n:\n            return a[k]\n        return 0\n    \n    # Initialize maximum sum\n    max_sum = 0\n    \n    # If current index is same as k, we can't include it\n    if index == k:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n    \n    # Try including current element if it's less than kth element\n    if a[index] < a[k]:\n        # Include current element and recur for previous elements\n        curr_sum = a[index] + max_sum_increasing_subseq(a, n, index - 1, k)\n        max_sum = max(max_sum, curr_sum)\n    \n    # Try excluding current element\n    max_sum = max(max_sum, max_sum_increasing_subseq(a, n, index - 1, k))\n    \n    return max_sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\n### Signature\ndef max_sum_increasing_subseq(a, n, index, k):\n\n### Test\nassert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
    "timestamp": "2025-10-17T19:17:56.263053",
    "response_time": "5.58",
    "context": "{\"function_name\": \"max_sum_increasing_subseq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 307,
    "solution": "def colon_tuplex(tuplex, m, n):\n    # Convert tuple to list for modification\n    list_x = list(tuplex)\n    # Modify the element at index m with value n\n    list_x[m] = n\n    # Convert back to tuple and return\n    return tuple(list_x)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to get a colon of a tuple.\n\n### Signature\ndef colon_tuplex(tuplex,m,n):\n\n### Test\nassert candidate((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)",
    "timestamp": "2025-10-17T19:17:58.929518",
    "response_time": "2.66",
    "context": "{\"function_name\": \"colon_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 308,
    "solution": "def large_product(nums1, nums2, N):\n    # Create all possible products\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    \n    # Sort products in descending order\n    products.sort(reverse=True)\n    \n    # Return first N products\n    return products[:N]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n### Signature\ndef large_product(nums1, nums2, N):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
    "timestamp": "2025-10-17T19:18:02.215146",
    "response_time": "3.28",
    "context": "{\"function_name\": \"large_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 309,
    "solution": "def maximum(a,b):\n    if a > b:\n        return a\n    return b",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the maximum of two numbers.\n\n### Signature\ndef maximum(a,b):\n\n### Test\nassert candidate(5,10) == 10",
    "timestamp": "2025-10-17T19:18:03.841329",
    "response_time": "1.62",
    "context": "{\"function_name\": \"maximum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 310,
    "solution": "def string_to_tuple(str1):\n    return tuple(str1.replace(\" \", \"\"))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert a given string to a tuple of characters.\n\n### Signature\ndef string_to_tuple(str1):\n\n### Test\nassert candidate(\"python 3.0\")==(\"\"\"p\"\"\", \"\"\"y\"\"\", \"\"\"t\"\"\", \"\"\"h\"\"\", \"\"\"o\"\"\", \"\"\"n\"\"\", \"\"\"3\"\"\", \"\"\".\"\"\", \"\"\"0\"\"\")",
    "timestamp": "2025-10-17T19:18:04.955163",
    "response_time": "1.11",
    "context": "{\"function_name\": \"string_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 311,
    "solution": "def set_left_most_unset_bit(n):\n    # If all bits are set, return the number as is\n    if n & (n + 1) == 0:\n        return n\n    \n    # Find position of leftmost unset bit\n    pos = 0\n    temp = n\n    \n    # Find the most significant bit position\n    msb = 0\n    while temp > 0:\n        msb += 1\n        temp >>= 1\n    \n    # Check each bit from left to right\n    for i in range(msb-1, -1, -1):\n        if not (n & (1 << i)):\n            # Set this bit\n            return n | (1 << i)\n    \n    return n",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to set the left most unset bit.\n\n### Signature\ndef set_left_most_unset_bit(n):\n\n### Test\nassert candidate(10) == 14",
    "timestamp": "2025-10-17T19:18:09.210050",
    "response_time": "4.25",
    "context": "{\"function_name\": \"set_left_most_unset_bit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 312,
    "solution": "import math\n\ndef volume_cone(r,h):\n    return (1/3) * math.pi * r * r * h",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the volume of a cone.\n\n### Signature\ndef volume_cone(r,h):\n\n### Test\nassert math.isclose(candidate(5,12), 314.15926535897927, rel_tol=0.001)",
    "timestamp": "2025-10-17T19:18:10.694817",
    "response_time": "1.48",
    "context": "{\"function_name\": \"volume_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 388,
    "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\n### Signature\ndef highest_Power_of_2(n):\n\n### Test\nassert candidate(10) == 8",
    "timestamp": "2025-10-17T19:18:12.863832",
    "response_time": "2.16",
    "context": "{\"function_name\": \"highest_Power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 389,
    "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    \n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the n'th lucas number.\n\n### Signature\ndef find_lucas(n):\n\n### Test\nassert candidate(9) == 76",
    "timestamp": "2025-10-17T19:18:15.719235",
    "response_time": "2.85",
    "context": "{\"function_name\": \"find_lucas\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 390,
    "solution": "def add_string(list_, string):\n    return [string.format(item) for item in list_]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to apply a given format string to all of the elements in a list.\n\n### Signature\ndef add_string(list_, string):\n\n### Test\nassert candidate([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
    "timestamp": "2025-10-17T19:18:17.193628",
    "response_time": "1.47",
    "context": "{\"function_name\": \"add_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 391,
    "solution": "def convert_list_dictionary(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        result.append({l1[i]: {l2[i]: l3[i]}})\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert more than one list to nested dictionary.\n\n### Signature\ndef convert_list_dictionary(l1, l2, l3):\n\n### Test\nassert candidate([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{\"\"\"S001\"\"\": {\"\"\"Adina Park\"\"\": 85}}, {\"\"\"S002\"\"\": {\"\"\"Leyton Marsh\"\"\": 98}}, {\"\"\"S003\"\"\": {\"\"\"Duncan Boyle\"\"\": 89}}, {\"\"\"S004\"\"\": {\"\"\"Saim Richards\"\"\": 92}}]",
    "timestamp": "2025-10-17T19:18:19.299430",
    "response_time": "2.10",
    "context": "{\"function_name\": \"convert_list_dictionary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 392,
    "solution": "from math import floor\n\ndef get_max_sum (n):\n    if n <= 0:\n        return 0\n    \n    # Calculate the sum of recursive parts\n    sum_parts = (get_max_sum(floor(n/2)) + \n                 get_max_sum(floor(n/3)) + \n                 get_max_sum(floor(n/4)) + \n                 get_max_sum(floor(n/5)))\n    \n    # Return maximum between n and sum of parts\n    return max(n, sum_parts)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n### Signature\ndef get_max_sum (n):\n\n### Test\nassert get_max_sum(60) == 106",
    "timestamp": "2025-10-17T19:18:23.176045",
    "response_time": "3.87",
    "context": "{\"function_name\": \"get_max_sum \"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 393,
    "solution": "def max_length_list(input_list):\n    if not input_list:\n        return (0, [])\n    \n    max_len = len(input_list[0])\n    max_list = input_list[0]\n    \n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n            \n    return (max_len, max_list)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the list with maximum length.\n\n### Signature\ndef max_length_list(input_list):\n\n### Test\nassert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
    "timestamp": "2025-10-17T19:18:26.346499",
    "response_time": "3.17",
    "context": "{\"function_name\": \"max_length_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 394,
    "solution": "def check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check if given tuple contains no duplicates.\n\n### Signature\ndef check_distinct(test_tup):\n\n### Test\nassert candidate((1, 4, 5, 6, 1, 4)) == False",
    "timestamp": "2025-10-17T19:18:28.154901",
    "response_time": "1.80",
    "context": "{\"function_name\": \"check_distinct\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 395,
    "solution": "def first_non_repeating_character(str1):\n    # Create a dictionary to store character frequencies\n    char_count = {}\n    \n    # Count frequency of each character\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Find the first character with frequency 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character found\n    return None",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the first non-repeated character in a given string.\n\n### Signature\ndef first_non_repeating_character(str1):\n\n### Test\nassert candidate(\"abcabc\") == None",
    "timestamp": "2025-10-17T19:18:30.478294",
    "response_time": "2.32",
    "context": "{\"function_name\": \"first_non_repeating_character\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 396,
    "solution": "def check_char(string):\n    if not string:  # Check if string is empty\n        return \"Invalid\"\n    \n    # Compare first and last character\n    if string[0] == string[-1]:\n        return \"Valid\"\n    return \"Invalid\"",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether the given string starts and ends with the same character or not.\n\n### Signature\ndef check_char(string):\n\n### Test\nassert candidate(\"abba\") == \"Valid\"",
    "timestamp": "2025-10-17T19:18:32.124468",
    "response_time": "1.64",
    "context": "{\"function_name\": \"check_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 397,
    "solution": "def median_numbers(a,b,c):\n    # Sort the three numbers\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # Return the middle number\n    return float(numbers[1])",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the median of three numbers.\n\n### Signature\ndef median_numbers(a,b,c):\n\n### Test\nassert candidate(25,55,65)==55.0",
    "timestamp": "2025-10-17T19:18:33.925548",
    "response_time": "1.80",
    "context": "{\"function_name\": \"median_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 398,
    "solution": "def sum_of_digits(nums):\n    result = 0\n    for num in nums:\n        current = num\n        while current > 0:\n            result += current % 10\n            current //= 10\n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to compute the sum of digits of each number of a given list.\n\n### Signature\ndef sum_of_digits(nums):\n\n### Test\nassert candidate([10,2,56])==14",
    "timestamp": "2025-10-17T19:18:36.357016",
    "response_time": "2.43",
    "context": "{\"function_name\": \"sum_of_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 399,
    "solution": "def bitwise_xor(test_tup1, test_tup2):\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\n### Signature\ndef bitwise_xor(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
    "timestamp": "2025-10-17T19:18:37.849679",
    "response_time": "1.49",
    "context": "{\"function_name\": \"bitwise_xor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 400,
    "solution": "def extract_freq(test_list):\n    # Convert tuples to frozenset to handle unordered tuples\n    unique_tuples = set(tuple(sorted(t)) for t in test_list)\n    return len(unique_tuples)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to extract the number of unique tuples in the given list.\n\n### Signature\ndef extract_freq(test_list):\n\n### Test\nassert candidate([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
    "timestamp": "2025-10-17T19:18:39.781422",
    "response_time": "1.92",
    "context": "{\"function_name\": \"extract_freq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 401,
    "solution": "def add_nested_tuples(test_tup1, test_tup2):\n    # Create a list to store the result tuples\n    result = []\n    \n    # Iterate through both tuples simultaneously\n    for t1, t2 in zip(test_tup1, test_tup2):\n        # Add corresponding elements and create new tuple\n        new_tuple = (t1[0] + t2[0], t1[1] + t2[1])\n        result.append(new_tuple)\n    \n    # Convert the list of tuples back to a tuple and return\n    return tuple(result)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n### Signature\ndef add_nested_tuples(test_tup1, test_tup2):\n\n### Test\nassert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
    "timestamp": "2025-10-17T19:18:43.910732",
    "response_time": "4.12",
    "context": "{\"function_name\": \"add_nested_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 404,
    "solution": "def minimum(a,b):\n    if a <= b:\n        return a\n    return b",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the minimum of two numbers.\n\n### Signature\ndef minimum(a,b):\n\n### Test\nassert candidate(1,2) == 1",
    "timestamp": "2025-10-17T19:18:45.901408",
    "response_time": "1.98",
    "context": "{\"function_name\": \"minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 405,
    "solution": "def check_tuplex(tuplex, tuple1):\n    return tuple1 in tuplex",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to check whether an element exists within a tuple.\n\n### Signature\ndef check_tuplex(tuplex,tuple1):\n\n### Test\nassert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),\"\"\"r\"\"\")==True",
    "timestamp": "2025-10-17T19:18:47.813527",
    "response_time": "1.91",
    "context": "{\"function_name\": \"check_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 406,
    "solution": "def find_Parity(x):\n    # Count the number of 1s in binary representation\n    count = bin(x).count('1')\n    # If count of 1s is odd, return True; otherwise False\n    return count % 2 == 1",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find whether the parity of a given number is odd.\n\n### Signature\ndef find_Parity(x):\n\n### Test\nassert candidate(12) == False",
    "timestamp": "2025-10-17T19:18:50.922213",
    "response_time": "3.10",
    "context": "{\"function_name\": \"find_Parity\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 407,
    "solution": "def rearrange_bigger(n):\n    # Convert number to list of digits\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Find the first pair of adjacent digits from right where left < right\n    i = length - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    # If no such pair found, return -1 (no bigger number possible)\n    if i < 0:\n        return -1\n    \n    # Find the smallest digit on the right side of digits[i]\n    # that is greater than digits[i]\n    j = length - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Swap the two digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the sublist to the right of i to get smallest arrangement\n    left = digits[:i+1]\n    right = digits[i+1:]\n    right.sort()\n    \n    # Combine and convert back to integer\n    result = int(''.join(left + right))\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\n### Signature\ndef rearrange_bigger(n):\n\n### Test\nassert candidate(12)==21",
    "timestamp": "2025-10-17T19:18:56.156706",
    "response_time": "5.23",
    "context": "{\"function_name\": \"rearrange_bigger\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 408,
    "solution": "import heapq\n\ndef push(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    result = []\n    heap = []\n    \n    # Push the first pair from nums1 with first element of nums2\n    # Also keep track of indices for nums2\n    heapq.heappush(heap, (nums1[0] + nums2[0], 0, 0))\n    seen = {(0, 0)}\n    \n    while heap and len(result) < k:\n        _, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        \n        # Try next element from nums2\n        if j + 1 < len(nums2) and (i, j + 1) not in seen:\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n            seen.add((i, j + 1))\n            \n        # Try next element from nums1\n        if i + 1 < len(nums1) and (i + 1, j) not in seen:\n            heapq.heappush(heap, (nums1[i + 1] + nums2[j], i + 1, j))\n            seen.add((i + 1, j))\n            \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n### Signature\ndef k_smallest_pairs(nums1, nums2, k):\n\n### Test\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
    "timestamp": "2025-10-17T19:19:01.093450",
    "response_time": "4.93",
    "context": "{\"function_name\": \"push\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 409,
    "solution": "def min_product_tuple(list1):\n    if not list1:\n        return None\n    \n    min_product = float('inf')\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    \n    return min_product",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\n### Signature\ndef min_product_tuple(list1):\n\n### Test\nassert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
    "timestamp": "2025-10-17T19:19:03.101333",
    "response_time": "2.00",
    "context": "{\"function_name\": \"min_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 410,
    "solution": "def min_val(listval):\n    min_value = None\n    for item in listval:\n        if isinstance(item, (int, float)):\n            if min_value is None or item < min_value:\n                min_value = item\n    return min_value",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find the minimum value in a given heterogeneous list.\n\n### Signature\ndef min_val(listval):\n\n### Test\nassert candidate(['Python', 3, 2, 4, 5, 'version'])==2",
    "timestamp": "2025-10-17T19:19:05.595932",
    "response_time": "2.48",
    "context": "{\"function_name\": \"min_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 411,
    "solution": "def snake_to_camel(word):\n    # Split the word by underscore\n    components = word.split('_')\n    \n    # Capitalize first letter of each component and join them\n    return ''.join(x.title() for x in components)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to convert the given snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):\n\n### Test\nassert candidate('android_tv') == 'AndroidTv'",
    "timestamp": "2025-10-17T19:19:08.333853",
    "response_time": "2.73",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 412,
    "solution": "def remove_odd(l):\n    return [num for num in l if num % 2 == 0]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to remove odd numbers from a given list.\n\n### Signature\ndef remove_odd(l):\n\n### Test\nassert candidate([1,2,3]) == [2]",
    "timestamp": "2025-10-17T19:19:10.091541",
    "response_time": "1.75",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 413,
    "solution": "def extract_nth_element(list1, n):\n    return [tup[n] for tup in list1]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to extract the nth element from a given list of tuples.\n\n### Signature\ndef extract_nth_element(list1, n):\n\n### Test\nassert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
    "timestamp": "2025-10-17T19:19:11.775159",
    "response_time": "1.68",
    "context": "{\"function_name\": \"extract_nth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 414,
    "solution": "def overlapping(list1, list2):\n    \"\"\"\n    Check if any value in list1 exists in list2.\n    \n    Args:\n        list1: First sequence of values\n        list2: Second sequence of values\n        \n    Returns:\n        bool: True if there is any common element, False otherwise\n    \"\"\"\n    return bool(set(list1) & set(list2))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\n### Signature\ndef overlapping(list1,list2):\n\n### Test\nassert candidate([1,2,3,4,5],[6,7,8,9]) == False",
    "timestamp": "2025-10-17T19:19:15.343737",
    "response_time": "3.56",
    "context": "{\"function_name\": \"overlapping\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 415,
    "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max_i = arr[0]\n    max_j = arr[1]\n    \n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_i * max_j:\n                max_i = arr[i]\n                max_j = arr[j]\n    \n    return (max_i, max_j)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find a pair with highest product from a given array of integers.\n\n### Signature\ndef max_Product(arr):\n\n### Test\nassert candidate([1,2,3,4,7,0,8,4]) == (7,8)",
    "timestamp": "2025-10-17T19:19:19.295424",
    "response_time": "3.94",
    "context": "{\"function_name\": \"max_Product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 417,
    "solution": "from collections import defaultdict\n\ndef group_tuples(Input):\n    groups = defaultdict(list)\n    \n    # Group elements by their first element\n    for tup in Input:\n        groups[tup[0]].extend(tup[1:])\n    \n    # Convert groups to list of tuples\n    result = []\n    for key, values in groups.items():\n        result.append((key,) + tuple(values))\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to find common first element in given list of tuple.\n\n### Signature\ndef group_tuples(Input):\n\n### Test\nassert candidate([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
    "timestamp": "2025-10-17T19:19:22.570290",
    "response_time": "3.27",
    "context": "{\"function_name\": \"group_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 418,
    "solution": "def Find_Max(lst):\n    if not lst:\n        return None\n    return max(lst, key=len)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the element of a list having maximum length.\n\n### Signature\ndef Find_Max(lst):\n\n### Test\nassert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
    "timestamp": "2025-10-17T19:19:24.905334",
    "response_time": "2.33",
    "context": "{\"function_name\": \"Find_Max\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 419,
    "solution": "def round_and_sum(list1):\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\n### Signature\ndef round_and_sum(list1):\n\n### Test\nassert candidate([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
    "timestamp": "2025-10-17T19:19:27.231772",
    "response_time": "2.32",
    "context": "{\"function_name\": \"round_and_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 420,
    "solution": "def cube_Sum(n):\n    sum = 0\n    count = 0\n    num = 2\n    \n    while count < n:\n        sum += num ** 3\n        num += 2\n        count += 1\n    \n    return sum",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the cube sum of first n even natural numbers.\n\n### Signature\ndef cube_Sum(n):\n\n### Test\nassert candidate(2) == 72",
    "timestamp": "2025-10-17T19:19:28.997886",
    "response_time": "1.76",
    "context": "{\"function_name\": \"cube_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 421,
    "solution": "def concatenate_tuple(test_tup):\n    return \"-\".join(str(x) for x in test_tup)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to concatenate each element of tuple by the delimiter.\n\n### Signature\ndef concatenate_tuple(test_tup):\n\n### Test\nassert candidate((\"ID\", \"is\", 4, \"UTS\") ) == \"\"\"ID-is-4-UTS\"\"\"",
    "timestamp": "2025-10-17T19:19:31.152110",
    "response_time": "2.15",
    "context": "{\"function_name\": \"concatenate_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 422,
    "solution": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0\n    \n    sum_of_cubes = 0\n    for i in range(1, n + 1):\n        sum_of_cubes += i ** 3\n    \n    return sum_of_cubes / n",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a python function to find the average of cubes of first n natural numbers.\n\n### Signature\ndef find_Average_Of_Cube(n):\n\n### Test\nassert candidate(2) == 4.5",
    "timestamp": "2025-10-17T19:19:33.099958",
    "response_time": "1.94",
    "context": "{\"function_name\": \"find_Average_Of_Cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35sonnet_td",
    "dataset_row_id": 424,
    "solution": "def extract_rear(test_tuple):\n    return [s[-1] for s in test_tuple]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\nWrite a function to extract only the rear index element of each string in the given tuple.\n\n### Signature\ndef extract_rear(test_tuple):\n\n### Test\nassert candidate(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
    "timestamp": "2025-10-17T19:19:35.152677",
    "response_time": "2.04",
    "context": "{\"function_name\": \"extract_rear\"}"
  }
]