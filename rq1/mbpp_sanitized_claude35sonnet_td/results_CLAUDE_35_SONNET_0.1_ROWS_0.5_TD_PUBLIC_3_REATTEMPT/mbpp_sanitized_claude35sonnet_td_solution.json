[
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 2,
        "solution": "===START===\ndef similar_elements(test_tup1, test_tup2):\n    # Convert tuples to sets and find intersection\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return tuple(set1.intersection(set2))\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):\n\n### Test\nassert set(candidate((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))",
        "timestamp": "2025-08-13T11:06:16.558440",
        "response_time": "3.30",
        "context": "{\"function_name\": \"similar_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 3,
        "solution": "===START===\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):\n\n### Test\nassert candidate(2) == False\nassert candidate(10) == True",
        "timestamp": "2025-08-13T11:06:19.376816",
        "response_time": "2.82",
        "context": "{\"function_name\": \"is_not_prime\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 4,
        "solution": "===START===\nfrom typing import List\nimport heapq\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    return heapq.nlargest(n, nums)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):\n\n### Test\nassert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]",
        "timestamp": "2025-08-13T11:06:21.666704",
        "response_time": "2.29",
        "context": "{\"function_name\": \"heap_queue_largest\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 6,
        "solution": "===START===\ndef is_Power_Of_Two(x, y):\n    # XOR the numbers to get positions where they differ\n    xor_result = x ^ y\n    \n    # Count the number of set bits in XOR result\n    # If only one bit is set (i.e., numbers differ at exactly one position),\n    # then XOR result should be a power of 2\n    \n    # Check if xor_result is power of 2 using Brian Kernighan's algorithm\n    # A number is power of 2 if it has exactly one set bit\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):\n\n### Test\nassert candidate(13,9) == True\nassert candidate(15,8) == False\nassert candidate(2,4) == False",
        "timestamp": "2025-08-13T11:06:27.573820",
        "response_time": "5.91",
        "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 7,
        "solution": "===START===\nimport re\n\ndef find_char_long(text):\n    # Find all words that are 4 or more characters long using regex\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):\n\n### Test\nassert set(candidate('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])",
        "timestamp": "2025-08-13T11:06:30.202992",
        "response_time": "2.63",
        "context": "{\"function_name\": \"find_char_long\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 8,
        "solution": "===START===\ndef square_nums(nums):\n    return [num * num for num in nums]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
        "timestamp": "2025-08-13T11:06:32.124381",
        "response_time": "1.92",
        "context": "{\"function_name\": \"square_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 9,
        "solution": "===START===\ndef find_Rotations(str):\n    if not str:\n        return 0\n    \n    n = len(str)\n    if n == 1:\n        return 1\n        \n    # Start with rotation of 1\n    for i in range(1, n):\n        # Create rotated string by concatenating slices\n        rotated = str[i:] + str[:i]\n        # If we found a match, this is our minimum rotation\n        if rotated == str:\n            return i\n            \n    # If no match found before n, then n is the answer\n    return n\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):\n\n### Test\nassert candidate(\"aaaa\") == 1",
        "timestamp": "2025-08-13T11:06:37.691246",
        "response_time": "5.56",
        "context": "{\"function_name\": \"find_Rotations\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 11,
        "solution": "===START===\ndef remove_Occ(s, ch):\n    # Find first occurrence\n    first = s.find(ch)\n    \n    # If character not found, return original string\n    if first == -1:\n        return s\n        \n    # Find last occurrence\n    last = s.rfind(ch)\n    \n    # If only one occurrence, remove it and return\n    if first == last:\n        return s[:first] + s[first+1:]\n    \n    # Remove both first and last occurrences\n    return s[:first] + s[first+1:last] + s[last+1:]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):\n\n### Test\nassert candidate(\"hello\",\"l\") == \"heo\"",
        "timestamp": "2025-08-13T11:06:40.609135",
        "response_time": "2.92",
        "context": "{\"function_name\": \"remove_Occ\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 12,
        "solution": "===START===\ndef sort_matrix(M):\n    # Create a list of tuples containing row sums and original rows\n    row_sums = [(sum(row), row) for row in M]\n    # Sort based on row sums\n    row_sums.sort(key=lambda x: x[0])\n    # Return only the sorted rows\n    return [row for _, row in row_sums]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):\n\n### Test\nassert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
        "timestamp": "2025-08-13T11:06:43.454656",
        "response_time": "2.84",
        "context": "{\"function_name\": \"sort_matrix\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 14,
        "solution": "===START===\ndef find_Volume(l,b,h):\n    # Volume of triangular prism = (1/2 * base * height) * length\n    # where base and height are of the triangle face\n    # and length is the length of the prism\n    volume = (1/2 * b * h) * l\n    return volume\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :\n\n### Test\nassert candidate(10,8,6) == 240",
        "timestamp": "2025-08-13T11:06:46.330892",
        "response_time": "2.87",
        "context": "{\"function_name\": \"find_Volume\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 16,
        "solution": "===START===\nimport re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):\n\n### Test\nassert candidate(\"aab_cbbbc\")==(True)",
        "timestamp": "2025-08-13T11:06:48.575678",
        "response_time": "2.24",
        "context": "{\"function_name\": \"text_lowercase_underscore\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 17,
        "solution": "===START===\ndef square_perimeter(a):\n    return 4 * a\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):\n\n### Test\nassert candidate(10)==40",
        "timestamp": "2025-08-13T11:06:50.401036",
        "response_time": "1.82",
        "context": "{\"function_name\": \"square_perimeter\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 18,
        "solution": "===START===\ndef str_to_list(string):\n    if not isinstance(string, tuple):\n        return string\n    \n    str1, str2 = string\n    result = ''\n    \n    # Create a set of characters from the second string for O(1) lookup\n    chars_to_remove = set(str2)\n    \n    # Add characters from first string only if they're not in the second string\n    for char in str1:\n        if char not in chars_to_remove:\n            result += char\n            \n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):\n\n### Test\nassert candidate(\"probasscurve\", \"pros\") == \"\"\"bacuve\"\"\"",
        "timestamp": "2025-08-13T11:06:53.258865",
        "response_time": "2.86",
        "context": "{\"function_name\": \"remove_dirty_chars\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 19,
        "solution": "===START===\ndef test_duplicate(arraynums):\n    # Create a set from the array - sets only contain unique elements\n    unique_nums = set(arraynums)\n    \n    # If length of set is less than length of array, there were duplicates\n    return len(unique_nums) < len(arraynums)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):\n\n### Test\nassert candidate(([1,2,3,4,5]))==False",
        "timestamp": "2025-08-13T11:06:58.335488",
        "response_time": "5.07",
        "context": "{\"function_name\": \"test_duplicate\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 20,
        "solution": "===START===\ndef is_woodall(x):\n    \"\"\"\n    Check if a number is a Woodall number.\n    A Woodall number is a number of the form n * 2^n - 1, where n is a positive integer.\n    \"\"\"\n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == x:\n            return True\n        if woodall > x:\n            return False\n        n += 1\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):\n\n### Test\nassert candidate(383) == True",
        "timestamp": "2025-08-13T11:07:02.126295",
        "response_time": "3.79",
        "context": "{\"function_name\": \"is_woodall\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 56,
        "solution": "===START===\ndef rev(num):\n    # Convert number to string to reverse it\n    num_str = str(num)\n    # Convert reversed string back to integer\n    reversed_num = int(num_str[::-1])\n    # Check if number is one less than twice its reverse\n    return num == (2 * reversed_num - 1)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):\n\n### Test\nassert candidate(70) == False",
        "timestamp": "2025-08-13T11:07:06.159160",
        "response_time": "4.03",
        "context": "{\"function_name\": \"check\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 57,
        "solution": "===START===\nfrom typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    # Convert integers to strings for easier comparison\n    str_nums = [str(num) for num in arr]\n    \n    # Custom comparison function for sorting\n    def compare(a: str, b: str) -> int:\n        if a + b > b + a:\n            return -1\n        return 1\n    \n    # Sort using custom comparison\n    str_nums.sort(key=lambda x: x*9, reverse=True)\n    \n    # Join the sorted strings and convert back to integer\n    return int(''.join(str_nums))\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :\n\n### Test\nassert candidate([1,2,3]) == 321",
        "timestamp": "2025-08-13T11:07:10.862240",
        "response_time": "4.70",
        "context": "{\"function_name\": \"find_Max_Num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 58,
        "solution": "===START===\ndef opposite_Signs(x, y):\n    # Using multiplication to check signs\n    # If product is negative, numbers have opposite signs\n    return (x * y) < 0\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):\n\n### Test\nassert candidate(1,-2) == True\nassert candidate(3,2) == False",
        "timestamp": "2025-08-13T11:07:13.475672",
        "response_time": "2.61",
        "context": "{\"function_name\": \"opposite_Signs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 59,
        "solution": "===START===\ndef is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number using the formula:\n    nth octagonal number = n * (3n - 2)\n    \n    Args:\n        n (int): Position of the octagonal number to find\n        \n    Returns:\n        int: The nth octagonal number\n    \"\"\"\n    return n * (3 * n - 2)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):\n\n### Test\nassert candidate(5) == 65",
        "timestamp": "2025-08-13T11:07:16.221941",
        "response_time": "2.74",
        "context": "{\"function_name\": \"is_octagonal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 61,
        "solution": "===START===\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            digit_sum = sum(int(d) for d in substring)\n            if digit_sum == len(substring):\n                count += 1\n                \n    return count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):\n\n### Test\nassert candidate('112112') == 6",
        "timestamp": "2025-08-13T11:07:20.313005",
        "response_time": "4.09",
        "context": "{\"function_name\": \"count_Substrings\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 62,
        "solution": "===START===\ndef smallest_num(xs):\n    if not xs:\n        return None\n    return min(xs)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):\n\n### Test\nassert candidate([10, 20, 1, 45, 99]) == 1",
        "timestamp": "2025-08-13T11:07:23.413075",
        "response_time": "3.10",
        "context": "{\"function_name\": \"smallest_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 63,
        "solution": "===START===\ndef max_difference(test_list):\n    # Calculate absolute difference for each tuple\n    differences = [abs(x - y) for x, y in test_list]\n    \n    # Return the maximum difference found\n    return max(differences)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):\n\n### Test\nassert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
        "timestamp": "2025-08-13T11:07:26.540516",
        "response_time": "3.12",
        "context": "{\"function_name\": \"max_difference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 64,
        "solution": "===START===\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):\n\n### Test\nassert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
        "timestamp": "2025-08-13T11:07:28.206450",
        "response_time": "1.66",
        "context": "{\"function_name\": \"subject_marks\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 65,
        "solution": "===START===\nfrom typing import Union, List\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):\n\n### Test\nassert candidate(([1, 2, [3,4],[5,6]]))==21",
        "timestamp": "2025-08-13T11:07:30.797148",
        "response_time": "2.59",
        "context": "{\"function_name\": \"recursive_list_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 66,
        "solution": "===START===\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):\n\n### Test\nassert candidate([1,-2,3,-4]) == 2",
        "timestamp": "2025-08-13T11:07:34.054537",
        "response_time": "3.26",
        "context": "{\"function_name\": \"pos_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 67,
        "solution": "===START===\ndef bell_number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Initialize first value\n    bell[0][0] = 1\n    \n    # Fill the bell triangle\n    for i in range(1, n+1):\n        # First value in row is last value in previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill remaining values using the formula:\n        # bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):\n\n### Test\nassert candidate(2)==2",
        "timestamp": "2025-08-13T11:07:40.667802",
        "response_time": "6.61",
        "context": "{\"function_name\": \"bell_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 68,
        "solution": "===START===\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            increasing = False\n        if A[i] > A[i-1]:\n            decreasing = False\n            \n    return increasing or decreasing\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):\n\n### Test\nassert candidate([6, 5, 4, 4]) == True",
        "timestamp": "2025-08-13T11:07:44.152754",
        "response_time": "3.48",
        "context": "{\"function_name\": \"is_Monotonic\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 69,
        "solution": "===START===\nfrom typing import List\n\ndef is_sublist(l: List, s: List) -> bool:\n    if not s:  # Empty sublist is always a sublist\n        return True\n    \n    if len(s) > len(l):  # Sublist cannot be longer than main list\n        return False\n        \n    # Check for consecutive elements matching\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n            \n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):\n\n### Test\nassert candidate([2,4,3,5,7],[3,7])==False",
        "timestamp": "2025-08-13T11:07:47.098759",
        "response_time": "2.94",
        "context": "{\"function_name\": \"is_sublist\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 70,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef find_equal_tuple(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    \n    first_tuple_len = len(Input[0])\n    return all(len(tup) == first_tuple_len for tup in Input)\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):\n\n### Test\nassert candidate([(11, 22, 33), (44, 55, 66)]) == True",
        "timestamp": "2025-08-13T11:07:50.545497",
        "response_time": "3.45",
        "context": "{\"function_name\": \"get_equal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 71,
        "solution": "===START===\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):\n\n### Test\nassert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
        "timestamp": "2025-08-13T11:07:54.612701",
        "response_time": "4.07",
        "context": "{\"function_name\": \"comb_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 72,
        "solution": "===START===\ndef dif_Square(n):\n    # For any number n, if it can be represented as difference of squares,\n    # then n = a\u00b2 - b\u00b2 where a and b are integers\n    # This can be factored as n = (a+b)(a-b)\n    # Therefore, we need to find if n has two factors whose sum and difference\n    # can give us the values of a and b\n    \n    # Special case for 0\n    if n == 0:\n        return True\n        \n    # Try all possible factors of n\n    for i in range(1, abs(n) + 1):\n        if n % i == 0:\n            # If i is a factor, get the other factor\n            j = n // i\n            \n            # If (i + j) is even, then a number can be represented as difference of squares\n            # Because: a = (i + j)/2 and b = (j - i)/2 will be integers\n            if (i + j) % 2 == 0:\n                return True\n    \n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):\n\n### Test\nassert candidate(5) == True",
        "timestamp": "2025-08-13T11:08:01.482169",
        "response_time": "6.87",
        "context": "{\"function_name\": \"dif_Square\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 74,
        "solution": "===START===\ndef is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_map = {}\n    pattern_map = {}\n    \n    for c, p in zip(colors, patterns):\n        if c in color_map:\n            if color_map[c] != p:\n                return False\n        else:\n            color_map[c] = p\n            \n        if p in pattern_map:\n            if pattern_map[p] != c:\n                return False\n        else:\n            pattern_map[p] = c\n            \n    return True\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):\n\n### Test\nassert candidate([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
        "timestamp": "2025-08-13T11:08:04.290548",
        "response_time": "2.81",
        "context": "{\"function_name\": \"is_samepatterns\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 75,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all(num % K == 0 for num in tup)]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):\n\n### Test\nassert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
        "timestamp": "2025-08-13T11:08:07.402647",
        "response_time": "3.11",
        "context": "{\"function_name\": \"find_tuples\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 77,
        "solution": "===START===\ndef is_Diff(n):\n    # Convert number to string to process digits\n    num_str = str(n)\n    \n    # Initialize sums for alternating positions\n    even_sum = 0\n    odd_sum = 0\n    \n    # Process each digit alternately\n    for i in range(len(num_str)):\n        if i % 2 == 0:\n            even_sum += int(num_str[i])\n        else:\n            odd_sum += int(num_str[i])\n    \n    # A number is divisible by 11 if the difference between\n    # sum of alternating digits is either 0 or divisible by 11\n    diff = abs(even_sum - odd_sum)\n    \n    return diff == 0 or diff % 11 == 0\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):\n\n### Test\nassert candidate (12345) == False",
        "timestamp": "2025-08-13T11:08:11.404699",
        "response_time": "4.00",
        "context": "{\"function_name\": \"is_Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 79,
        "solution": "===START===\ndef word_len(s):\n    return len(s) % 2 != 0\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):\n\n### Test\nassert candidate(\"Hadoop\") == False",
        "timestamp": "2025-08-13T11:08:13.275579",
        "response_time": "1.87",
        "context": "{\"function_name\": \"word_len\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 80,
        "solution": "===START===\ndef tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number using the formula:\n    T(n) = n(n+1)(n+2)/6\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):\n\n### Test\nassert candidate(5) == 35",
        "timestamp": "2025-08-13T11:08:16.168902",
        "response_time": "2.89",
        "context": "{\"function_name\": \"tetrahedral_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 82,
        "solution": "===START===\nimport math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * r**3\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 4188.790204786391, rel_tol=0.001)",
        "timestamp": "2025-08-13T11:08:18.639139",
        "response_time": "2.47",
        "context": "{\"function_name\": \"volume_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 83,
        "solution": "===START===\ndef get_Char(strr):\n    # Calculate sum of ASCII values of all characters\n    ascii_sum = sum(ord(char) for char in strr)\n    \n    # Take modulo 26 to get a value between 0 and 25\n    mod_value = ascii_sum % 26\n    \n    # Convert to corresponding character (a=0, b=1, ..., z=25)\n    # Add 97 to get lowercase ASCII value\n    result_char = chr(mod_value + 97)\n    \n    return result_char\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):\n\n### Test\nassert candidate(\"abc\") == \"f\"",
        "timestamp": "2025-08-13T11:08:23.879411",
        "response_time": "5.24",
        "context": "{\"function_name\": \"get_Char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 84,
        "solution": "===START===\ndef sequence(n):\n    if n <= 0:\n        return 0\n    if n <= 2:\n        return 1\n        \n    # Initialize sequence array\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = newman_conway[2] = 1\n    \n    # Generate sequence up to n\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i-1]] + newman_conway[i - newman_conway[i-1]]\n    \n    return newman_conway[n]\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):\n\n### Test\nassert candidate(10) == 6",
        "timestamp": "2025-08-13T11:08:27.454420",
        "response_time": "3.57",
        "context": "{\"function_name\": \"sequence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 85,
        "solution": "===START===\nimport math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r * r\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 1256.6370614359173, rel_tol=0.001)",
        "timestamp": "2025-08-13T11:08:30.214801",
        "response_time": "2.76",
        "context": "{\"function_name\": \"surfacearea_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 86,
        "solution": "===START===\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Returns the nth centered hexagonal number.\n    A centered hexagonal number is the number of points in a centered hexagonal pattern.\n    The formula for nth centered hexagonal number is: 3n(n-1) + 1\n    \"\"\"\n    return 3 * n * (n - 1) + 1\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):\n\n### Test\nassert candidate(10) == 271",
        "timestamp": "2025-08-13T11:08:33.116349",
        "response_time": "2.90",
        "context": "{\"function_name\": \"centered_hexagonal_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35sonnet_td",
        "dataset_row_id": 87,
        "solution": "===START===\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n===END===",
        "llm_name": "anthropic/claude-3.5-sonnet",
        "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\n### Test\nassert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={\"\"\"B\"\"\": \"\"\"Black\"\"\", \"\"\"R\"\"\": \"\"\"Red\"\"\", \"\"\"P\"\"\": \"\"\"Pink\"\"\", \"\"\"G\"\"\": \"\"\"Green\"\"\", \"\"\"W\"\"\": \"\"\"White\"\"\", \"\"\"O\"\"\": \"\"\"Orange\"\"\"}",
        "timestamp": "2025-08-13T11:08:35.641919",
        "response_time": "2.52",
        "context": "{\"function_name\": \"merge_dictionaries_three\"}"
    }
]