[
  {
    "dataset_name": "human_eval_claude35haiku_td",
    "dataset_row_id": 0,
    "solution": "from typing import List\nfrom itertools import combinations\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Check all pairs of numbers in the list\n    for a, b in combinations(numbers, 2):\n        # If absolute difference between any two numbers is less than threshold\n        if abs(a - b) < threshold:\n            return True\n    \n    # If no pair found within threshold\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n     Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n\n### Signature\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n\n### Test\nassert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\nassert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\nassert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True",
    "timestamp": "2025-08-13T11:18:56.922886",
    "response_time": "8.10"
  },
  {
    "dataset_name": "human_eval_claude35haiku_td",
    "dataset_row_id": 1,
    "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove all spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n    \n    result = []\n    current_group = ''\n    depth = 0\n    \n    for char in paren_string:\n        current_group += char\n        \n        # Track depth of nested parentheses\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n        \n        # When depth reaches 0, we've completed a balanced group\n        if depth == 0 and current_group:\n            result.append(current_group)\n            current_group = ''\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n     Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n\n### Signature\ndef separate_paren_groups(paren_string: str) -> List[str]:\n\n### Test\nassert candidate('(()()) ((())) () ((())()())') == [ '(()())', '((()))', '()', '((())()())' ]\nassert candidate('() (()) ((())) (((())))') == [ '()', '(())', '((()))', '(((())))' ]",
    "timestamp": "2025-08-13T11:19:04.246850",
    "response_time": "7.32"
  },
  {
    "dataset_name": "human_eval_claude35haiku_td",
    "dataset_row_id": 2,
    "solution": "from typing import Union\n\ndef truncate_number(number: float) -> float:\n    \"\"\"\n    Decompose a positive floating point number into its decimal part.\n    \n    Args:\n        number (float): A positive floating point number\n    \n    Returns:\n        float: The decimal part of the number (always < 1)\n    \"\"\"\n    # Use the subtraction of integer part from original number to get decimal part\n    return number - int(number)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n     Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n### Signature\ndef truncate_number(number: float) -> float:\n\n### Test\nassert candidate(3.5) == 0.5",
    "timestamp": "2025-08-13T11:19:07.791149",
    "response_time": "3.54"
  },
  {
    "dataset_name": "human_eval_claude35haiku_td",
    "dataset_row_id": 3,
    "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n     You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n\n### Signature\ndef below_zero(operations: List[int]) -> bool:\n\n### Test\nassert candidate([]) == False\nassert candidate([1, 2, -3, 1, 2, -3]) == False\nassert candidate([1, 2, -4, 5, 6]) == True",
    "timestamp": "2025-08-13T11:19:12.891590",
    "response_time": "5.10"
  },
  {
    "dataset_name": "human_eval_claude35haiku_td",
    "dataset_row_id": 4,
    "solution": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the input list\n    mean = statistics.mean(numbers)\n    \n    # Calculate absolute deviations from the mean\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    \n    # Calculate the mean of absolute deviations\n    mad = statistics.mean(absolute_deviations)\n    \n    return mad",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n     For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\n### Signature\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n\n### Test\nassert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6",
    "timestamp": "2025-08-13T11:19:15.826859",
    "response_time": "2.93"
  },
  {
    "dataset_name": "human_eval_claude35haiku_td",
    "dataset_row_id": 5,
    "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    # If input list is empty, return empty list\n    if not numbers:\n        return []\n    \n    # Initialize result list with first element\n    result = [numbers[0]]\n    \n    # Iterate through remaining elements \n    for num in numbers[1:]:\n        # Insert delimiter between each element\n        result.append(delimeter)\n        result.append(num)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n     Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n\n### Signature\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n\n### Test\nassert candidate([], 7) == []",
    "timestamp": "2025-08-13T11:19:19.066388",
    "response_time": "3.23"
  },
  {
    "dataset_name": "human_eval_claude35haiku_td",
    "dataset_row_id": 6,
    "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into individual groups of parentheses\n    groups = paren_string.split()\n    \n    # Function to find max nesting level for a single group\n    def max_nesting_level(group: str) -> int:\n        current_level = 0\n        max_level = 0\n        \n        # Iterate through each character in the group\n        for char in group:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level -= 1\n        \n        return max_level\n    \n    # Apply max nesting level to each group and return as list\n    return [max_nesting_level(group) for group in groups]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n     Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n### Signature\ndef parse_nested_parens(paren_string: str) -> List[int]:\n\n### Test\nassert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
    "timestamp": "2025-08-13T11:19:22.681445",
    "response_time": "3.61"
  },
  {
    "dataset_name": "human_eval_claude35haiku_td",
    "dataset_row_id": 7,
    "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n     Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n\n### Signature\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n\n### Test\nassert candidate([], 'john') == []\nassert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']",
    "timestamp": "2025-08-13T11:19:24.206419",
    "response_time": "1.52"
  },
  {
    "dataset_name": "human_eval_claude35haiku_td",
    "dataset_row_id": 8,
    "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # If list is empty, return (0, 1) as specified in prompt\n    if not numbers:\n        return (0, 1)\n    \n    # Calculate sum of all numbers in the list\n    total_sum = sum(numbers)\n    \n    # Calculate product of all numbers in the list\n    # Use initial value of 1 to handle multiplication\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    # Return tuple of sum and product\n    return (total_sum, total_product)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n     For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n\n### Signature\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n\n### Test\nassert candidate([]) == (0, 1)\nassert candidate([1, 1, 1]) == (3, 1)",
    "timestamp": "2025-08-13T11:19:27.883379",
    "response_time": "3.67"
  },
  {
    "dataset_name": "human_eval_claude35haiku_td",
    "dataset_row_id": 9,
    "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    # If input list is empty, return empty list\n    if not numbers:\n        return []\n    \n    # Initialize result list with first element\n    result = [numbers[0]]\n    \n    # Iterate through the rest of the list starting from second element\n    for i in range(1, len(numbers)):\n        # Compare current number with previous max and append max\n        result.append(max(result[-1], numbers[i]))\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n     From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n\n### Signature\ndef rolling_max(numbers: List[int]) -> List[int]:\n\n### Test\nassert candidate([]) == []\nassert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]",
    "timestamp": "2025-08-13T11:19:31.152709",
    "response_time": "3.27"
  },
  {
    "dataset_name": "human_eval_claude35haiku_td",
    "dataset_row_id": 10,
    "solution": "from typing import str\n\ndef make_palindrome(string: str) -> str:\n    # If string is empty or single character, it's already a palindrome\n    if len(string) <= 1:\n        return string\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string), 0, -1):\n        # Check if the substring from start to i is a palindrome\n        substr = string[:i]\n        if is_palindrome(substr):\n            # Append the reverse of the non-palindromic prefix\n            return string + string[:i-1][::-1]\n    \n    # Fallback case (should not happen given the problem constraints)\n    return string\n\ndef is_palindrome(s: str) -> bool:\n    # Helper function to check if a string is a palindrome\n    return s == s[::-1]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n     Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n\n### Signature\ndef make_palindrome(string: str) -> str:\n\n### Test\nassert candidate('') == ''\nassert candidate('x') == 'x'",
    "timestamp": "2025-08-13T11:19:39.968441",
    "response_time": "8.81"
  },
  {
    "dataset_name": "human_eval_claude35haiku_td",
    "dataset_row_id": 11,
    "solution": "def string_xor(a: str, b: str) -> str:\n    # Ensure inputs are of equal length by padding with zeros if needed\n    max_len = max(len(a), len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n    \n    # Perform XOR operation bit by bit\n    result = ''\n    for bit_a, bit_b in zip(a, b):\n        # XOR operation: 1^1=0, 1^0=1, 0^1=1, 0^0=0\n        result += str(int(bit_a) ^ int(bit_b))\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n     Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\n### Signature\ndef string_xor(a: str, b: str) -> str:\n\n### Test\nassert candidate('111000', '101010') == '010010'",
    "timestamp": "2025-08-13T11:19:43.617718",
    "response_time": "3.63"
  },
  {
    "dataset_name": "human_eval_claude35haiku_td",
    "dataset_row_id": 12,
    "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    return max(strings, key=len)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n     Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n### Signature\ndef longest(strings: List[str]) -> Optional[str]:\n\n### Test\nassert candidate([]) == None",
    "timestamp": "2025-08-13T11:19:44.988506",
    "response_time": "1.37"
  },
  {
    "dataset_name": "human_eval_claude35haiku_td",
    "dataset_row_id": 13,
    "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    # Use Euclidean algorithm to find GCD\n    while b:\n        a, b = b, a % b\n    return abs(a)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n     Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n\n### Signature\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n### Test\nassert candidate(3, 7) == 1\nassert candidate(10, 15) == 5",
    "timestamp": "2025-08-13T11:19:50.757814",
    "response_time": "5.77"
  },
  {
    "dataset_name": "human_eval_claude35haiku_td",
    "dataset_row_id": 14,
    "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    # If string is empty, return empty list\n    if not string:\n        return []\n    \n    # Create list of prefixes from shortest to longest\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    \n    return prefixes",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n     Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n\n### Signature\ndef all_prefixes(string: str) -> List[str]:\n\n### Test\nassert candidate('') == []",
    "timestamp": "2025-08-13T11:19:53.048787",
    "response_time": "2.29"
  },
  {
    "dataset_name": "human_eval_claude35haiku_td",
    "dataset_row_id": 15,
    "solution": "from typing import List\n\ndef string_sequence(n: int) -> str:\n    # Create a list of numbers from 0 to n (inclusive)\n    numbers: List[str] = [str(num) for num in range(n + 1)]\n    \n    # Join the list of numbers with space delimiter\n    return ' '.join(numbers)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n     Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n\n### Signature\ndef string_sequence(n: int) -> str:\n\n### Test\nassert candidate(0) == '0'",
    "timestamp": "2025-08-13T11:19:58.056331",
    "response_time": "5.00"
  }
]