[
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 0,
        "solution": "===START===\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n\n### Signature\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:",
        "timestamp": "2025-08-14T10:12:02.217098",
        "response_time": "3.48"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 1,
        "solution": "===START===\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string.replace(\" \", \"\"):\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n\n        current_group.append(char)\n\n        if depth == 0:\n            result.append(''.join(current_group))\n            current_group = []\n\n    return result\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n\n### Signature\ndef separate_paren_groups(paren_string: str) -> List[str]:",
        "timestamp": "2025-08-14T10:12:04.859011",
        "response_time": "2.64"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 2,
        "solution": "===START===\nfrom math import floor\n\ndef truncate_number(number: float) -> float:\n    return floor(number)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n### Signature\ndef truncate_number(number: float) -> float:",
        "timestamp": "2025-08-14T10:12:05.717213",
        "response_time": "0.86"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 3,
        "solution": "===START===\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n\n### Signature\ndef below_zero(operations: List[int]) -> bool:",
        "timestamp": "2025-08-14T10:12:07.233524",
        "response_time": "1.51"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 4,
        "solution": "===START===\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\n### Signature\ndef mean_absolute_deviation(numbers: List[float]) -> float:",
        "timestamp": "2025-08-14T10:12:08.709132",
        "response_time": "1.47"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 5,
        "solution": "===START===\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    \n    return result\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n\n### Signature\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:",
        "timestamp": "2025-08-14T10:12:10.715949",
        "response_time": "2.00"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 6,
        "solution": "===START===\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n### Signature\ndef parse_nested_parens(paren_string: str) -> List[int]:",
        "timestamp": "2025-08-14T10:12:13.364858",
        "response_time": "2.65"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 7,
        "solution": "===START===\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n\n### Signature\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:",
        "timestamp": "2025-08-14T10:12:14.539009",
        "response_time": "1.17"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 8,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    total_sum = sum(numbers)\n    total_product = 1\n    for number in numbers:\n        total_product *= number\n    return (total_sum, total_product)\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n\n### Signature\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:",
        "timestamp": "2025-08-14T10:12:16.475801",
        "response_time": "1.93"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 9,
        "solution": "===START===\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        result.append(current_max)\n    \n    return result\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n\n### Signature\ndef rolling_max(numbers: List[int]) -> List[int]:",
        "timestamp": "2025-08-14T10:12:18.396291",
        "response_time": "1.92"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 10,
        "solution": "===START===\ndef make_palindrome(string: str) -> str:\n    n = len(string)\n    for i in range(n, -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[i:][::-1]\n    return string\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n\n### Signature\ndef make_palindrome(string: str) -> str:",
        "timestamp": "2025-08-14T10:12:20.105273",
        "response_time": "1.71"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 11,
        "solution": "===START===\nfrom typing import *\nfrom collections import *\n\ndef string_xor(a: str, b: str) -> str:\n    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\n### Signature\ndef string_xor(a: str, b: str) -> str:",
        "timestamp": "2025-08-14T10:12:21.922353",
        "response_time": "1.82"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 12,
        "solution": "===START===\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n### Signature\ndef longest(strings: List[str]) -> Optional[str]:",
        "timestamp": "2025-08-14T10:12:23.109128",
        "response_time": "1.19"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 13,
        "solution": "===START===\nfrom math import gcd\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return gcd(a, b)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n\n### Signature\ndef greatest_common_divisor(a: int, b: int) -> int:",
        "timestamp": "2025-08-14T10:12:24.101510",
        "response_time": "0.99"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 14,
        "solution": "===START===\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n\n### Signature\ndef all_prefixes(string: str) -> List[str]:",
        "timestamp": "2025-08-14T10:12:25.536436",
        "response_time": "1.43"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 15,
        "solution": "===START===\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n\n### Signature\ndef string_sequence(n: int) -> str:",
        "timestamp": "2025-08-14T10:12:26.498302",
        "response_time": "0.96"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 16,
        "solution": "===START===\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n\n### Signature\ndef count_distinct_characters(string: str) -> int:",
        "timestamp": "2025-08-14T10:12:27.313324",
        "response_time": "0.81"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 17,
        "solution": "===START===\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string.split():\n        if note == 'A':\n            beats.append(4)\n        elif note == 'B':\n            beats.append(2)\n        elif note == 'C':\n            beats.append(1)\n    return beats\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n### Signature\ndef parse_music(music_string: str) -> List[int]:",
        "timestamp": "2025-08-14T10:12:29.347147",
        "response_time": "2.03"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 18,
        "solution": "===START===\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n\n### Signature\ndef how_many_times(string: str, substring: str) -> int:",
        "timestamp": "2025-08-14T10:12:31.427797",
        "response_time": "2.08"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 19,
        "solution": "===START===\nimport re\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    sorted_nums = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_nums)\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n\n### Signature\ndef sort_numbers(numbers: str) -> str:",
        "timestamp": "2025-08-14T10:12:34.216040",
        "response_time": "2.79"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 20,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    \n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n\n### Signature\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:",
        "timestamp": "2025-08-14T10:12:37.238925",
        "response_time": "3.02"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 21,
        "solution": "===START===\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\n### Signature\ndef rescale_to_unit(numbers: List[float]) -> List[float]:",
        "timestamp": "2025-08-14T10:12:39.042358",
        "response_time": "1.80"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 22,
        "solution": "===START===\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n\n### Signature\ndef filter_integers(values: List[Any]) -> List[int]:",
        "timestamp": "2025-08-14T10:12:40.177435",
        "response_time": "1.13"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 23,
        "solution": "===START===\ndef strlen(string: str) -> int:\n    return len(string)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n\n### Signature\ndef strlen(string: str) -> int:",
        "timestamp": "2025-08-14T10:12:40.843513",
        "response_time": "0.66"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 24,
        "solution": "===START===\ndef largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n\n### Signature\ndef largest_divisor(n: int) -> int:",
        "timestamp": "2025-08-14T10:12:42.214936",
        "response_time": "1.37"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 25,
        "solution": "===START===\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    # Start with the smallest prime number\n    divisor = 2\n    while n >= divisor:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n\n### Signature\ndef factorize(n: int) -> List[int]:",
        "timestamp": "2025-08-14T10:12:44.257361",
        "response_time": "2.04"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 26,
        "solution": "===START===\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n\n### Signature\ndef remove_duplicates(numbers: List[int]) -> List[int]:",
        "timestamp": "2025-08-14T10:12:45.809894",
        "response_time": "1.55"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 27,
        "solution": "===START===\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n\n### Signature\ndef flip_case(string: str) -> str:",
        "timestamp": "2025-08-14T10:12:46.566104",
        "response_time": "0.75"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 28,
        "solution": "===START===\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n\n### Signature\ndef concatenate(strings: List[str]) -> str:",
        "timestamp": "2025-08-14T10:12:47.407424",
        "response_time": "0.84"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 29,
        "solution": "===START===\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n     Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\n### Signature\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:",
        "timestamp": "2025-08-14T10:12:48.561983",
        "response_time": "1.15"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 30,
        "solution": "===START===\ndef get_positive(l: list):\n    return [x for x in l if x > 0]\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n    Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n\n### Signature\ndef get_positive(l: list):",
        "timestamp": "2025-08-14T10:12:49.402064",
        "response_time": "0.84"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 31,
        "solution": "===START===\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n\n### Signature\ndef is_prime(n):",
        "timestamp": "2025-08-14T10:12:52.083144",
        "response_time": "2.68"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 32,
        "solution": "===START===\nimport math\n\ndef poly(xs: list, x: float) -> float:\n    return sum(coef * x**i for i, coef in enumerate(xs))\n\ndef find_zero(xs: list) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError(\"List must have an even number of coefficients\")\n    \n    a = xs[-1]\n    b = xs[-2]\n    c = xs[-3]\n    \n    # Using the quadratic formula to find the root\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        raise ValueError(\"No real roots\")\n    \n    root1 = (-b + math.sqrt(discriminant)) / (2*a)\n    root2 = (-b - math.sqrt(discriminant)) / (2*a)\n    \n    # Return the larger root\n    return max(root1, root2)\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\n### Signature\ndef poly(xs: list, x: float):\n\n### Prompt\n     xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n\n### Signature\ndef find_zero(xs: list):",
        "timestamp": "2025-08-14T10:12:56.701547",
        "response_time": "4.62"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 33,
        "solution": "===START===\ndef sort_third(l: list):\n    sorted_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted(l[i] for i in sorted_indices)\n    result = l[:]\n    for i, value in zip(sorted_indices, sorted_values):\n        result[i] = value\n    return result\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n\n### Signature\ndef sort_third(l: list):",
        "timestamp": "2025-08-14T10:12:58.691762",
        "response_time": "1.99"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 34,
        "solution": "===START===\nfrom typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n    Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n\n### Signature\ndef unique(l: list):",
        "timestamp": "2025-08-14T10:12:59.553790",
        "response_time": "0.86"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 35,
        "solution": "===START===\ndef max_element(l: list):\n    return max(l)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n    Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\n### Signature\ndef max_element(l: list):",
        "timestamp": "2025-08-14T10:13:00.179517",
        "response_time": "0.62"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 36,
        "solution": "===START===\ndef fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n\n### Signature\ndef fizz_buzz(n: int):",
        "timestamp": "2025-08-14T10:13:01.966924",
        "response_time": "1.79"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 37,
        "solution": "===START===\ndef sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted([l[i] for i in even_indices])\n    result = l[:]\n    for i, value in zip(even_indices, even_values):\n        result[i] = value\n    return result\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n\n### Signature\ndef sort_even(l: list):",
        "timestamp": "2025-08-14T10:13:04.055710",
        "response_time": "2.09"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 38,
        "solution": "===START===\nimport math\n\ndef encode_cyclic(s: str) -> str:\n    encoded = []\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        if len(group) == 3:\n            encoded.append(group[1] + group[2] + group[0])\n        else:\n            encoded.append(group)\n    return ''.join(encoded)\n\ndef decode_cyclic(s: str) -> str:\n    decoded = []\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        if len(group) == 3:\n            decoded.append(group[2] + group[0] + group[1])\n        else:\n            decoded.append(group)\n    return ''.join(decoded)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n    returns encoded string by cycling groups of three characters.\n\n### Signature\ndef encode_cyclic(s: str):\n\n### Prompt\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n\n### Signature\ndef decode_cyclic(s: str):",
        "timestamp": "2025-08-14T10:13:08.142025",
        "response_time": "4.08"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 39,
        "solution": "===START===\nfrom typing import *\nfrom collections import *\n\ndef prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib_generator():\n        a, b = 0, 1\n        while True:\n            yield b\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib_generator():\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n\n### Signature\ndef prime_fib(n: int):",
        "timestamp": "2025-08-14T10:13:11.941432",
        "response_time": "3.80"
    },
    {
        "dataset_name": "human_eval_qwen25coder7b",
        "dataset_row_id": 40,
        "solution": "===START===\nfrom typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
        "prompt": "### Prompt\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n### Signature\ndef triples_sum_to_zero(l: list):",
        "timestamp": "2025-08-14T10:13:14.166893",
        "response_time": "2.22"
    }
]