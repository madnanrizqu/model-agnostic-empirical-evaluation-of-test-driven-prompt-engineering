[
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 0,
    "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n\n### Signature\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:",
    "timestamp": "2025-08-14T07:55:31.958926",
    "response_time": "2.86"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 1,
    "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove all spaces\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    result = []\n    current_group = \"\"\n    depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            current_group += char\n        elif char == ')':\n            depth -= 1\n            current_group += char\n            \n            # When depth becomes 0, we've completed a group\n            if depth == 0:\n                result.append(current_group)\n                current_group = \"\"\n                \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n\n### Signature\ndef separate_paren_groups(paren_string: str) -> List[str]:",
    "timestamp": "2025-08-14T07:55:36.393393",
    "response_time": "4.43"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 2,
    "solution": "def truncate_number(number: float) -> float:\n    # Get the integer part using floor division\n    integer_part = number // 1\n    # Get the decimal part by subtracting integer part\n    decimal_part = number - integer_part\n    return decimal_part",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n### Signature\ndef truncate_number(number: float) -> float:",
    "timestamp": "2025-08-14T07:55:39.002456",
    "response_time": "2.61"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 3,
    "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n\n### Signature\ndef below_zero(operations: List[int]) -> bool:",
    "timestamp": "2025-08-14T07:55:42.298065",
    "response_time": "3.30"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 4,
    "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n        \n    # Calculate mean\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate absolute deviations from mean\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    \n    # Calculate average of absolute deviations\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n    \n    return mad",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\n### Signature\ndef mean_absolute_deviation(numbers: List[float]) -> float:",
    "timestamp": "2025-08-14T07:55:50.503606",
    "response_time": "8.21"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 5,
    "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n\n### Signature\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:",
    "timestamp": "2025-08-14T07:55:53.131301",
    "response_time": "2.63"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 6,
    "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.strip().split()\n    result = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n                \n        result.append(max_depth)\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n### Signature\ndef parse_nested_parens(paren_string: str) -> List[int]:",
    "timestamp": "2025-08-14T07:55:55.983496",
    "response_time": "2.85"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 7,
    "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n\n### Signature\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:",
    "timestamp": "2025-08-14T07:55:57.875567",
    "response_time": "1.89"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 8,
    "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return (total_sum, product)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n\n### Signature\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:",
    "timestamp": "2025-08-14T07:56:01.954282",
    "response_time": "4.08"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 9,
    "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n        \n    result = []\n    current_max = numbers[0]\n    \n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n\n### Signature\ndef rolling_max(numbers: List[int]) -> List[int]:",
    "timestamp": "2025-08-14T07:56:04.524412",
    "response_time": "2.57"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 10,
    "solution": "def make_palindrome(string: str) -> str:\n    if not string:\n        return \"\"\n    \n    # Helper function to check if a string is palindrome\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    \n    # Find the longest palindrome suffix\n    for i in range(len(string)):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            # Get the prefix that needs to be reversed and appended\n            prefix = string[:i]\n            # Return original string + reversed prefix\n            return string + prefix[::-1]\n            \n    # If no palindrome suffix found, reverse the entire string except last char\n    return string + string[:-1][::-1]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n\n### Signature\ndef make_palindrome(string: str) -> str:",
    "timestamp": "2025-08-14T07:56:09.425332",
    "response_time": "4.90"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 11,
    "solution": "def string_xor(a: str, b: str) -> str:\n    # Convert strings to integers using base 2\n    num_a = int(a, 2)\n    num_b = int(b, 2)\n    \n    # Perform XOR operation\n    xor_result = num_a ^ num_b\n    \n    # Convert back to binary string and remove '0b' prefix\n    # zfill ensures the result has same length as longest input\n    max_len = max(len(a), len(b))\n    return bin(xor_result)[2:].zfill(max_len)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\n### Signature\ndef string_xor(a: str, b: str) -> str:",
    "timestamp": "2025-08-14T07:56:14.271541",
    "response_time": "4.85"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 12,
    "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n### Signature\ndef longest(strings: List[str]) -> Optional[str]:",
    "timestamp": "2025-08-14T07:56:16.497373",
    "response_time": "2.22"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 13,
    "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    # Using Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return abs(a)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n\n### Signature\ndef greatest_common_divisor(a: int, b: int) -> int:",
    "timestamp": "2025-08-14T07:56:18.932763",
    "response_time": "2.43"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 14,
    "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n\n### Signature\ndef all_prefixes(string: str) -> List[str]:",
    "timestamp": "2025-08-14T07:56:21.992334",
    "response_time": "3.06"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 15,
    "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n\n### Signature\ndef string_sequence(n: int) -> str:",
    "timestamp": "2025-08-14T07:56:23.893728",
    "response_time": "1.90"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 16,
    "solution": "def count_distinct_characters(string: str) -> int:\n    # Convert string to lowercase to make it case-insensitive\n    string = string.lower()\n    # Convert to set to get unique characters and return length\n    return len(set(string))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n\n### Signature\ndef count_distinct_characters(string: str) -> int:",
    "timestamp": "2025-08-14T07:56:32.866857",
    "response_time": "8.97"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 17,
    "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    if not music_string:\n        return []\n    \n    result = []\n    current_count = 0\n    \n    for char in music_string:\n        if char == ' ':\n            continue\n        elif char == '|':\n            if current_count > 0:\n                result.append(current_count)\n                current_count = 0\n        else:\n            current_count += 1\n    \n    # Add the last note if exists\n    if current_count > 0:\n        result.append(current_count)\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n### Signature\ndef parse_music(music_string: str) -> List[int]:",
    "timestamp": "2025-08-14T07:56:38.449697",
    "response_time": "5.58"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 18,
    "solution": "def how_many_times(string: str, substring: str) -> int:\n    if not string or not substring:\n        return 0\n    \n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n\n### Signature\ndef how_many_times(string: str, substring: str) -> int:",
    "timestamp": "2025-08-14T07:56:41.837237",
    "response_time": "3.39"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 19,
    "solution": "def sort_numbers(numbers: str) -> str:\n    number_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Split input string into list of words\n    number_words = numbers.split()\n    \n    # Sort based on their numeric values\n    sorted_words = sorted(number_words, key=lambda x: number_map[x])\n    \n    # Join back into space-separated string\n    return ' '.join(sorted_words)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n\n### Signature\ndef sort_numbers(numbers: str) -> str:",
    "timestamp": "2025-08-14T07:56:46.625561",
    "response_time": "4.78"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 20,
    "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    \n    # Sort the list to make comparison easier\n    sorted_nums = sorted(numbers)\n    \n    # Compare adjacent numbers in sorted list\n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (sorted_nums[i], sorted_nums[i + 1])\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n\n### Signature\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:",
    "timestamp": "2025-08-14T07:56:52.488784",
    "response_time": "5.86"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 21,
    "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    if min_val == max_val:\n        raise ValueError(\"All numbers are identical, cannot rescale\")\n    \n    return [(x - min_val) / (max_val - min_val) for x in numbers]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\n### Signature\ndef rescale_to_unit(numbers: List[float]) -> List[float]:",
    "timestamp": "2025-08-14T07:56:56.281236",
    "response_time": "3.79"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 22,
    "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int) and not isinstance(x, bool)]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n\n### Signature\ndef filter_integers(values: List[Any]) -> List[int]:",
    "timestamp": "2025-08-14T07:56:58.467487",
    "response_time": "2.19"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 23,
    "solution": "def strlen(string: str) -> int:\n    return len(string)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n\n### Signature\ndef strlen(string: str) -> int:",
    "timestamp": "2025-08-14T07:57:00.104484",
    "response_time": "1.64"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 24,
    "solution": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n\n### Signature\ndef largest_divisor(n: int) -> int:",
    "timestamp": "2025-08-14T07:57:02.434857",
    "response_time": "2.33"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 25,
    "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    \n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1 if divisor == 2 else 2\n        \n        # Optimization: if divisor squared is greater than n,\n        # then n is prime if it's greater than 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n            break\n            \n    return factors",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n\n### Signature\ndef factorize(n: int) -> List[int]:",
    "timestamp": "2025-08-14T07:57:13.194778",
    "response_time": "10.76"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 26,
    "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Count occurrences of each number\n    count_dict = {}\n    for num in numbers:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    # Keep only numbers that appear once\n    return [num for num in numbers if count_dict[num] == 1]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n\n### Signature\ndef remove_duplicates(numbers: List[int]) -> List[int]:",
    "timestamp": "2025-08-14T07:57:16.141969",
    "response_time": "2.95"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 27,
    "solution": "def flip_case(string: str) -> str:\n    return string.swapcase()",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n\n### Signature\ndef flip_case(string: str) -> str:",
    "timestamp": "2025-08-14T07:57:18.347940",
    "response_time": "2.21"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 28,
    "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n\n### Signature\ndef concatenate(strings: List[str]) -> str:",
    "timestamp": "2025-08-14T07:57:21.379319",
    "response_time": "3.03"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 29,
    "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n     Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\n### Signature\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:",
    "timestamp": "2025-08-14T07:57:24.016781",
    "response_time": "2.64"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 30,
    "solution": "def get_positive(l: list) -> list:\n    return [num for num in l if num > 0]",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n\n### Signature\ndef get_positive(l: list):",
    "timestamp": "2025-08-14T07:57:26.686871",
    "response_time": "2.67"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 31,
    "solution": "def is_prime(n):\n    # 1 is not prime by definition\n    if n < 2:\n        return False\n    \n    # 2 is prime\n    if n == 2:\n        return True\n    \n    # Even numbers greater than 2 are not prime\n    if n % 2 == 0:\n        return False\n    \n    # Check odd numbers up to square root of n\n    # We only need to check up to sqrt(n) because if n is divisible by a number greater than its square root,\n    # it would also be divisible by a smaller number below its square root\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n            \n    return True",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n\n### Signature\ndef is_prime(n):",
    "timestamp": "2025-08-14T07:57:32.611840",
    "response_time": "5.92"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 32,
    "solution": "from typing import List\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"Evaluates polynomial with coefficients xs at point x\"\"\"\n    result = 0.0\n    power = 1.0\n    for coef in xs:\n        result += coef * power\n        power *= x\n    return result\n\ndef poly_derivative(xs: list, x: float) -> float:\n    \"\"\"Evaluates derivative of polynomial with coefficients xs at point x\"\"\"\n    result = 0.0\n    power = 1.0\n    for i, coef in enumerate(xs[1:], 1):\n        result += coef * i * power\n        power *= x\n    return result\n\ndef find_zero(xs: list) -> float:\n    \"\"\"Find x such that poly(xs, x) = 0 using Newton's method\"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Number of coefficients must be even\")\n    \n    # Start with x = 0 as initial guess\n    x = 0.0\n    max_iterations = 100\n    tolerance = 1e-10\n    \n    for _ in range(max_iterations):\n        y = poly(xs, x)\n        if abs(y) < tolerance:\n            return x\n            \n        dy = poly_derivative(xs, x)\n        if dy == 0:\n            x += 0.1  # If derivative is zero, slightly adjust x\n            continue\n            \n        x = x - y/dy\n    \n    return x  # Return best approximation if max iterations reached",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\n### Signature\ndef poly(xs: list, x: float):\n\n### Prompt\n     xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n\n### Signature\ndef find_zero(xs: list):",
    "timestamp": "2025-08-14T07:57:41.401864",
    "response_time": "8.79"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 33,
    "solution": "def sort_third(l: list):\n    # Get indices divisible by 3\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    \n    # Get values at those indices and sort them\n    third_values = sorted([l[i] for i in third_indices])\n    \n    # Create a new list copying the original\n    result = l.copy()\n    \n    # Replace values at indices divisible by 3 with sorted values\n    for index, value in zip(third_indices, third_values):\n        result[index] = value\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n\n### Signature\ndef sort_third(l: list):",
    "timestamp": "2025-08-14T07:57:45.592957",
    "response_time": "4.19"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 34,
    "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n\n### Signature\ndef unique(l: list):",
    "timestamp": "2025-08-14T07:57:47.452782",
    "response_time": "1.86"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 35,
    "solution": "def max_element(l: list):\n    if not l:\n        return None\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\n### Signature\ndef max_element(l: list):",
    "timestamp": "2025-08-14T07:57:50.227249",
    "response_time": "2.77"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 36,
    "solution": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n\n### Signature\ndef fizz_buzz(n: int):",
    "timestamp": "2025-08-14T07:57:52.936809",
    "response_time": "2.71"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 37,
    "solution": "def sort_even(l: list):\n    # Extract even-indexed elements\n    even_indices = [i for i in range(0, len(l), 2)]\n    even_values = [l[i] for i in even_indices]\n    \n    # Sort even-indexed elements\n    even_values.sort()\n    \n    # Create new list with sorted even values and original odd values\n    result = list(l)\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n        \n    return result",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n\n### Signature\ndef sort_even(l: list):",
    "timestamp": "2025-08-14T07:57:57.180171",
    "response_time": "4.24"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 38,
    "solution": "def encode_cyclic(s: str) -> str:\n    if not s:\n        return \"\"\n    \n    result = []\n    # Process string in groups of 3\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        # Pad with spaces if group is less than 3 chars\n        group = group.ljust(3)\n        \n        # Cycle the group: abc -> bca\n        cycled = group[1] + group[2] + group[0]\n        # Only append the actual characters from original string\n        result.append(cycled[:len(s[i:i+3])])\n    \n    return \"\".join(result)\n\ndef decode_cyclic(s: str) -> str:\n    if not s:\n        return \"\"\n    \n    result = []\n    # Process string in groups of 3\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        # Pad with spaces if group is less than 3 chars\n        group = group.ljust(3)\n        \n        # Reverse cycle the group: bca -> abc\n        decycled = group[2] + group[0] + group[1]\n        # Only append the actual characters from original string\n        result.append(decycled[:len(s[i:i+3])])\n    \n    return \"\".join(result)",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    returns encoded string by cycling groups of three characters.\n\n### Signature\ndef encode_cyclic(s: str):\n\n### Prompt\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n\n### Signature\ndef decode_cyclic(s: str):",
    "timestamp": "2025-08-14T07:58:03.751656",
    "response_time": "6.57"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 39,
    "solution": "from typing import List\n\ndef prime_fib(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def fibonacci() -> List[int]:\n        fib = [0, 1]\n        while len(fib) < 100:  # Generate enough Fibonacci numbers\n            fib.append(fib[-1] + fib[-2])\n        return fib\n    \n    count = 0\n    fib_numbers = fibonacci()\n    \n    for num in fib_numbers:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n    \n    return 0  # In case n is too large",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n\n### Signature\ndef prime_fib(n: int):",
    "timestamp": "2025-08-14T07:58:08.205846",
    "response_time": "4.45"
  },
  {
    "dataset_name": "human_eval_claude35sonnet",
    "dataset_row_id": 40,
    "solution": "from itertools import combinations\n\ndef triples_sum_to_zero(l: list) -> bool:\n    # Get all possible combinations of 3 elements from the list\n    for triple in combinations(l, 3):\n        if sum(triple) == 0:\n            return True\n    return False",
    "llm_name": "anthropic/claude-3.5-sonnet",
    "prompt": "### Prompt\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n### Signature\ndef triples_sum_to_zero(l: list):",
    "timestamp": "2025-08-14T07:58:11.762462",
    "response_time": "3.56"
  }
]