[
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 425,
        "solution": "===START===\ndef count_element_in_list(list1, x):\n    \"\"\"\n    Count the number of sublists in list1 that contain the element x.\n    \n    Args:\n        list1 (list): A list of sublists to search through\n        x: The element to search for in the sublists\n    \n    Returns:\n        int: Number of sublists containing the element x\n    \"\"\"\n    return sum(1 for sublist in list1 if x in sublist)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to count the number of sublists containing a particular element.\n\n### Signature\ndef count_element_in_list(list1, x):",
        "timestamp": "2025-10-17T18:48:06.009851",
        "response_time": "3.98",
        "context": "{\"function_name\": \"count_element_in_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 426,
        "solution": "===START===\ndef filter_oddnumbers(nums):\n    \"\"\"\n    Filter and return only odd numbers from the input list.\n    \n    Args:\n        nums (list): A list of numbers\n    \n    Returns:\n        list: A list containing only the odd numbers from the input list\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to filter odd numbers.\n\n### Signature\ndef filter_oddnumbers(nums):",
        "timestamp": "2025-10-17T18:48:08.159501",
        "response_time": "2.15",
        "context": "{\"function_name\": \"filter_oddnumbers\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 427,
        "solution": "===START===\ndef change_date_format(dt):\n    # Split the input date string into year, month, and day\n    year, month, day = dt.split('-')\n    \n    # Rearrange the components into dd-mm-yyyy format\n    return f\"{day}-{month}-{year}\"\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n### Signature\ndef change_date_format(dt):",
        "timestamp": "2025-10-17T18:48:10.632050",
        "response_time": "2.47",
        "context": "{\"function_name\": \"change_date_format\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 428,
        "solution": "===START===\ndef shell_sort(my_list):\n    # Get the length of the list\n    n = len(my_list)\n    \n    # Start with a large gap and reduce it in each iteration\n    gap = n // 2\n    \n    # Continue until gap becomes 0\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size\n        # The first gap elements are already in gapped order\n        # Save time by not using inner loop for first gap elements\n        for i in range(gap, n):\n            # Add my_list[i] to the elements that have been gap sorted\n            # Save my_list[i] in temp and make a hole at position i\n            temp = my_list[i]\n            \n            # Shift earlier gap-sorted elements up until the correct location for my_list[i] is found\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            \n            # Put temp (the original my_list[i]) in its correct location\n            my_list[j] = temp\n        \n        # Reduce gap\n        gap //= 2\n    \n    return my_list\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to sort the given array by using shell sort.\n\n### Signature\ndef shell_sort(my_list):",
        "timestamp": "2025-10-17T18:48:18.851561",
        "response_time": "8.22",
        "context": "{\"function_name\": \"shell_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 429,
        "solution": "===START===\ndef and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Extracts the elementwise AND of two tuples.\n    \n    Args:\n        test_tup1 (tuple): First input tuple\n        test_tup2 (tuple): Second input tuple\n    \n    Returns:\n        tuple: A tuple containing elementwise AND of corresponding elements\n    \"\"\"\n    # Check if tuples are of equal length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of equal length\")\n    \n    # Use tuple comprehension to perform elementwise AND\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\n### Signature\ndef and_tuples(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T18:48:21.834774",
        "response_time": "2.98",
        "context": "{\"function_name\": \"and_tuples\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 430,
        "solution": "===START===\nimport math\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola given its standard form equation ax^2 + bx + c = y\n    \n    Args:\n    a (float): Coefficient of x^2 term\n    b (float): Coefficient of x term\n    c (float): Constant term\n    \n    Returns:\n    float: The y-coordinate of the directrix\n    \"\"\"\n    # Check if the parabola opens upward or downward\n    if a == 0:\n        raise ValueError(\"Not a valid parabolic equation. 'a' cannot be zero.\")\n    \n    # Calculate the vertex y-coordinate\n    vertex_y = -((b**2) / (4*a)) + c\n    \n    # Calculate the focal length (distance from vertex to focus)\n    focal_length = 1 / (4*abs(a))\n    \n    # Determine directrix based on parabola orientation\n    if a > 0:\n        # Parabola opens upward\n        directrix_y = vertex_y - focal_length\n    else:\n        # Parabola opens downward\n        directrix_y = vertex_y + focal_length\n    \n    return directrix_y\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the directrix of a parabola.\n\n### Signature\ndef parabola_directrix(a, b, c):",
        "timestamp": "2025-10-17T18:48:26.698559",
        "response_time": "4.86",
        "context": "{\"function_name\": \"parabola_directrix\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 431,
        "solution": "===START===\ndef common_element(list1, list2):\n    \"\"\"\n    Check if two lists have at least one common element.\n    \n    Args:\n        list1 (list): First input list\n        list2 (list): Second input list\n    \n    Returns:\n        bool: True if lists have a common element, False otherwise\n    \"\"\"\n    # Convert lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Use set intersection to check for common elements\n    return len(set1.intersection(set2)) > 0\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function that takes two lists and returns true if they have at least one common element.\n\n### Signature\ndef common_element(list1, list2):",
        "timestamp": "2025-10-17T18:48:29.492827",
        "response_time": "2.79",
        "context": "{\"function_name\": \"common_element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 432,
        "solution": "===START===\ndef median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium.\n    \n    The median of a trapezium is the line segment that connects the midpoints \n    of the non-parallel sides of the trapezium.\n    \n    Args:\n    base1 (float): Length of the first parallel base\n    base2 (float): Length of the second parallel base\n    height (float): Height of the trapezium\n    \n    Returns:\n    float: Length of the median of the trapezium\n    \"\"\"\n    # Calculate the median length using the formula: (base1 + base2) / 2\n    median_length = (base1 + base2) / 2\n    \n    return median_length\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the median length of a trapezium.\n\n### Signature\ndef median_trapezium(base1,base2,height):",
        "timestamp": "2025-10-17T18:48:34.003013",
        "response_time": "4.51",
        "context": "{\"function_name\": \"median_trapezium\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 433,
        "solution": "===START===\ndef check_greater(arr, number):\n    \"\"\"\n    Check whether the entered number is greater than all elements of the given array.\n    \n    Args:\n        arr (list): Input array of numbers\n        number (int/float): Number to compare with array elements\n    \n    Returns:\n        bool: True if number is greater than all array elements, False otherwise\n    \"\"\"\n    # Check if array is empty\n    if not arr:\n        return False\n    \n    # Use all() to check if number is greater than every element in the array\n    return all(number > element for element in arr)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\n### Signature\ndef check_greater(arr, number):",
        "timestamp": "2025-10-17T18:48:36.942682",
        "response_time": "2.94",
        "context": "{\"function_name\": \"check_greater\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 434,
        "solution": "===START===\nimport re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by one or more b's.\n\n### Signature\ndef text_match_one(text):",
        "timestamp": "2025-10-17T18:48:38.290672",
        "response_time": "1.34",
        "context": "{\"function_name\": \"text_match_one\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 435,
        "solution": "===START===\ndef last_Digit(n):\n    \"\"\"\n    Find the last digit of a given number.\n    \n    Args:\n        n (int): The input number\n    \n    Returns:\n        int: The last digit of the input number\n    \"\"\"\n    # Use modulo 10 to get the last digit\n    return abs(n) % 10\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the last digit of a given number.\n\n### Signature\ndef last_Digit(n) :",
        "timestamp": "2025-10-17T18:48:40.345943",
        "response_time": "2.05",
        "context": "{\"function_name\": \"last_Digit\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 436,
        "solution": "===START===\ndef neg_nos(list1):\n    \"\"\"\n    Returns a list of negative numbers from the input list.\n    \n    Args:\n        list1 (list): Input list of numbers\n    \n    Returns:\n        list: List containing only the negative numbers from the input list\n    \"\"\"\n    return [num for num in list1 if num < 0]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to return the negative numbers in a list.\n\n### Signature\ndef neg_nos(list1):",
        "timestamp": "2025-10-17T18:48:42.264636",
        "response_time": "1.91",
        "context": "{\"function_name\": \"neg_nos\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 437,
        "solution": "===START===\ndef remove_odd(str1):\n    \"\"\"\n    Remove odd characters from the input string, keeping only characters at even indices.\n    \n    Args:\n        str1 (str): Input string to process\n    \n    Returns:\n        str: String with only characters at even indices (0, 2, 4, ...)\n    \"\"\"\n    return str1[::2]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to remove odd characters in a string.\n\n### Signature\ndef remove_odd(str1):",
        "timestamp": "2025-10-17T18:48:44.574688",
        "response_time": "2.31",
        "context": "{\"function_name\": \"remove_odd\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 438,
        "solution": "===START===\ndef count_bidirectional(test_list):\n    \"\"\"\n    Count the number of bidirectional tuple pairs in the given list.\n    \n    A bidirectional pair is a pair of tuples where (a,b) and (b,a) both exist in the list.\n    \n    Args:\n        test_list (list): A list of tuples\n    \n    Returns:\n        int: Number of unique bidirectional tuple pairs\n    \"\"\"\n    # Create a set to track unique bidirectional pairs\n    bidirectional_pairs = set()\n    \n    # Create a set of all tuples for efficient lookup\n    tuple_set = set(test_list)\n    \n    # Iterate through the list to find bidirectional pairs\n    for tup in test_list:\n        # Check if the reversed tuple exists in the set\n        reversed_tup = tup[::-1]\n        \n        if reversed_tup in tuple_set and tup != reversed_tup:\n            # Sort the pair to avoid counting duplicates\n            pair = tuple(sorted([tup, reversed_tup]))\n            bidirectional_pairs.add(pair)\n    \n    # Return the count of unique bidirectional pairs\n    return len(bidirectional_pairs)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to count bidirectional tuple pairs.\n\n### Signature\ndef count_bidirectional(test_list):",
        "timestamp": "2025-10-17T18:48:49.207798",
        "response_time": "4.63",
        "context": "{\"function_name\": \"count_bidirectional\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 439,
        "solution": "===START===\ndef multiple_to_single(L):\n    \"\"\"\n    Joins a list of multiple integers into a single integer.\n    \n    Args:\n        L (list): A list of integers\n    \n    Returns:\n        int: A single integer formed by concatenating the input integers\n    \"\"\"\n    # Convert each integer to string, join them, and convert back to integer\n    return int(''.join(map(str, L)))\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to join a list of multiple integers into a single integer.\n\n### Signature\ndef multiple_to_single(L):",
        "timestamp": "2025-10-17T18:48:51.469510",
        "response_time": "2.26",
        "context": "{\"function_name\": \"multiple_to_single\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 440,
        "solution": "===START===\nimport re\n\ndef find_adverb_position(text):\n    # Regular expression to match adverbs (words ending in 'ly')\n    adverb_pattern = r'\\b\\w+ly\\b'\n    \n    # Find all adverbs in the text\n    matches = list(re.finditer(adverb_pattern, text))\n    \n    # If no adverbs found, return None\n    if not matches:\n        return None\n    \n    # Get the first adverb match\n    first_adverb_match = matches[0]\n    \n    # Return a tuple with the adverb and its start position\n    return (first_adverb_match.group(), first_adverb_match.start())\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the first adverb and their positions in a given sentence.\n\n### Signature\ndef find_adverb_position(text):",
        "timestamp": "2025-10-17T18:48:54.419276",
        "response_time": "2.95",
        "context": "{\"function_name\": \"find_adverb_position\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 441,
        "solution": "===START===\ndef surfacearea_cube(l):\n    \"\"\"\n    Calculate the surface area of a cube given its side length.\n    \n    Args:\n        l (float or int): Length of one side of the cube\n    \n    Returns:\n        float: Total surface area of the cube\n    \"\"\"\n    return 6 * (l ** 2)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the surface area of a cube of a given size.\n\n### Signature\ndef surfacearea_cube(l):",
        "timestamp": "2025-10-17T18:48:56.267923",
        "response_time": "1.85",
        "context": "{\"function_name\": \"surfacearea_cube\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 442,
        "solution": "===START===\ndef positive_count(nums):\n    # If the array is empty, return 0 to avoid division by zero\n    if not nums:\n        return 0.0\n    \n    # Count the number of positive numbers in the array\n    positive_nums = sum(1 for num in nums if num > 0)\n    \n    # Calculate and return the ratio of positive numbers\n    return positive_nums / len(nums)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the ration of positive numbers in an array of integers.\n\n### Signature\ndef positive_count(nums):",
        "timestamp": "2025-10-17T18:48:58.469178",
        "response_time": "2.20",
        "context": "{\"function_name\": \"positive_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 443,
        "solution": "===START===\ndef largest_neg(list1):\n    # Filter out negative numbers from the list\n    negative_nums = [num for num in list1 if num < 0]\n    \n    # If no negative numbers exist, return None\n    if not negative_nums:\n        return None\n    \n    # Return the largest negative number\n    return max(negative_nums)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the largest negative number from the given list.\n\n### Signature\ndef largest_neg(list1):",
        "timestamp": "2025-10-17T18:49:00.449569",
        "response_time": "1.98",
        "context": "{\"function_name\": \"largest_neg\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 444,
        "solution": "===START===\ndef trim_tuple(test_list, K):\n    \"\"\"\n    Trims each tuple in the given list by removing K elements from the end.\n    \n    Args:\n    test_list (list): List of tuples to be trimmed\n    K (int): Number of elements to remove from the end of each tuple\n    \n    Returns:\n    list: List of trimmed tuples\n    \"\"\"\n    # Check if K is greater than or equal to the length of any tuple\n    return [tup[:-K] if K > 0 else tup for tup in test_list]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to trim each tuple by k in the given tuple list.\n\n### Signature\ndef trim_tuple(test_list, K):",
        "timestamp": "2025-10-17T18:49:03.102990",
        "response_time": "2.65",
        "context": "{\"function_name\": \"trim_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 445,
        "solution": "===START===\ndef index_multiplication(test_tup1, test_tup2):\n    # Check if tuples have same length\n    if len(test_tup1) != len(test_tup2):\n        return None\n    \n    # Perform index-wise multiplication using tuple comprehension\n    result = tuple(a * b for a, b in zip(test_tup1, test_tup2))\n    \n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n### Signature\ndef index_multiplication(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T18:49:06.006184",
        "response_time": "2.90",
        "context": "{\"function_name\": \"index_multiplication\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 446,
        "solution": "===START===\ndef count_Occurrence(tup, lst):\n    # Create a dictionary to store the count of occurrences\n    occurrence_dict = {}\n    \n    # Iterate through each element in the list\n    for item in lst:\n        # Count the number of times the item appears in the tuple\n        count = tup.count(item)\n        \n        # Store the count in the dictionary\n        occurrence_dict[item] = count\n    \n    # Return the dictionary with occurrence counts\n    return occurrence_dict\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to count the occurence of all elements of list in a tuple.\n\n### Signature\ndef count_Occurrence(tup, lst):",
        "timestamp": "2025-10-17T18:49:08.525798",
        "response_time": "2.52",
        "context": "{\"function_name\": \"count_Occurrence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 447,
        "solution": "===START===\ndef cube_nums(nums):\n    \"\"\"\n    Find cubes of individual elements in a list.\n    \n    Args:\n        nums (list): A list of numbers\n    \n    Returns:\n        list: A new list with each number cubed\n    \"\"\"\n    return [num ** 3 for num in nums]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find cubes of individual elements in a list.\n\n### Signature\ndef cube_nums(nums):",
        "timestamp": "2025-10-17T18:49:10.221173",
        "response_time": "1.69",
        "context": "{\"function_name\": \"cube_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 448,
        "solution": "===START===\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers up to the nth term.\n    \n    Perrin numbers are defined by the recurrence relation:\n    P(0) = 3\n    P(1) = 0\n    P(2) = 2\n    P(n) = P(n-2) + P(n-3) for n > 2\n    \n    Args:\n        n (int): The number of Perrin numbers to sum\n    \n    Returns:\n        int: The sum of the first n Perrin numbers\n    \"\"\"\n    # Handle edge cases\n    if n <= 0:\n        return 0\n    \n    # Initialize first three Perrin numbers\n    perrin = [3, 0, 2]\n    \n    # If n is less than 3, return sum of existing numbers\n    if n <= 3:\n        return sum(perrin[:n])\n    \n    # Generate Perrin numbers up to nth term\n    for _ in range(3, n):\n        next_num = perrin[-2] + perrin[-3]\n        perrin.append(next_num)\n    \n    # Return sum of generated Perrin numbers\n    return sum(perrin)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to calculate the sum of perrin numbers.\n\n### Signature\ndef cal_sum(n):",
        "timestamp": "2025-10-17T18:49:15.262537",
        "response_time": "5.04",
        "context": "{\"function_name\": \"cal_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 450,
        "solution": "===START===\ndef extract_string(str, l):\n    \"\"\"\n    Extract strings of specified length from a given list of strings.\n    \n    Args:\n    str (list): List of input strings\n    l (int): Length of strings to extract\n    \n    Returns:\n    list: List of strings with exactly the specified length\n    \"\"\"\n    return [s for s in str if len(s) == l]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to extract specified size of strings from a given list of string values.\n\n### Signature\ndef extract_string(str, l):",
        "timestamp": "2025-10-17T18:49:17.601041",
        "response_time": "2.34",
        "context": "{\"function_name\": \"extract_string\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 451,
        "solution": "===START===\ndef remove_whitespaces(text1):\n    \"\"\"\n    Remove all whitespaces from the given string.\n    \n    Args:\n        text1 (str): Input string that may contain whitespaces\n    \n    Returns:\n        str: String with all whitespaces removed\n    \"\"\"\n    return text1.replace(\" \", \"\")\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to remove all whitespaces from the given string.\n\n### Signature\ndef remove_whitespaces(text1):",
        "timestamp": "2025-10-17T18:49:19.476934",
        "response_time": "1.87",
        "context": "{\"function_name\": \"remove_whitespaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 452,
        "solution": "===START===\ndef loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the loss amount on a sale if there is a loss.\n    \n    Args:\n        actual_cost (float): The original cost of the item\n        sale_amount (float): The amount the item was sold for\n    \n    Returns:\n        float: The loss amount if sale_amount is less than actual_cost, otherwise 0\n    \"\"\"\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    return 0\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n### Signature\ndef loss_amount(actual_cost,sale_amount):",
        "timestamp": "2025-10-17T18:49:21.894334",
        "response_time": "2.42",
        "context": "{\"function_name\": \"loss_amount\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 453,
        "solution": "===START===\ndef sumofFactors(n):\n    \"\"\"\n    Calculate the sum of even factors of a given number.\n    \n    Args:\n        n (int): The input number to find even factors for\n    \n    Returns:\n        int: Sum of all even factors of the input number\n    \"\"\"\n    # Initialize sum of even factors\n    even_factor_sum = 0\n    \n    # Iterate through potential factors from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is a factor of n and is even\n        if n % i == 0 and i % 2 == 0:\n            even_factor_sum += i\n    \n    return even_factor_sum\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the sum of even factors of a number.\n\n### Signature\ndef sumofFactors(n) :",
        "timestamp": "2025-10-17T18:49:24.954082",
        "response_time": "3.06",
        "context": "{\"function_name\": \"sumofFactors\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 454,
        "solution": "===START===\nimport re\n\ndef text_match_wordz(text):\n    # Use regex to find a word containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    \n    # Search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # Return True if a match is found, False otherwise\n    return bool(match)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function that matches a word containing 'z'.\n\n### Signature\ndef text_match_wordz(text):",
        "timestamp": "2025-10-17T18:49:27.178033",
        "response_time": "2.22",
        "context": "{\"function_name\": \"text_match_wordz\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 455,
        "solution": "===START===\ndef check_monthnumb_number(monthnum2):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the given month number is in the list of months with 31 days\n    return monthnum2 in months_with_31_days\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check whether the given month number contains 31 days or not.\n\n### Signature\ndef check_monthnumb_number(monthnum2):",
        "timestamp": "2025-10-17T18:49:29.161820",
        "response_time": "1.98",
        "context": "{\"function_name\": \"check_monthnumb_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 456,
        "solution": "===START===\ndef reverse_string_list(stringlist):\n    \"\"\"\n    Reverses each string in the given list of strings.\n    \n    Args:\n        stringlist (list): A list of strings to be reversed\n    \n    Returns:\n        list: A new list with each string reversed\n    \"\"\"\n    return [s[::-1] for s in stringlist]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to reverse each string in a given list of string values.\n\n### Signature\ndef reverse_string_list(stringlist):",
        "timestamp": "2025-10-17T18:49:30.997745",
        "response_time": "1.83",
        "context": "{\"function_name\": \"reverse_string_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 457,
        "solution": "===START===\ndef Find_Min(lst):\n    \"\"\"\n    Find the sublist with the minimum length from a list of lists.\n    \n    Args:\n        lst (list): A list containing sublists\n    \n    Returns:\n        list: The sublist with the minimum length. \n              If multiple sublists have the same minimum length, returns the first one.\n    \"\"\"\n    # Check if the input list is empty\n    if not lst:\n        return []\n    \n    # Find the sublist with minimum length using min() with key parameter\n    return min(lst, key=len)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the sublist having minimum length.\n\n### Signature\ndef Find_Min(lst):",
        "timestamp": "2025-10-17T18:49:34.394351",
        "response_time": "3.39",
        "context": "{\"function_name\": \"Find_Min\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 458,
        "solution": "===START===\ndef rectangle_area(l, b):\n    \"\"\"\n    Calculate the area of a rectangle given its length and breadth.\n    \n    Args:\n        l (float or int): Length of the rectangle\n        b (float or int): Breadth of the rectangle\n    \n    Returns:\n        float or int: Area of the rectangle\n    \"\"\"\n    return l * b\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the area of a rectangle.\n\n### Signature\ndef rectangle_area(l,b):",
        "timestamp": "2025-10-17T18:49:36.554437",
        "response_time": "2.16",
        "context": "{\"function_name\": \"rectangle_area\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 459,
        "solution": "===START===\ndef remove_uppercase(str1):\n    # Create a result string to store characters that are not uppercase\n    result = ''\n    \n    # Iterate through each character in the input string\n    for char in str1:\n        # If the character is not uppercase, add it to the result\n        if not char.isupper():\n            result += char\n    \n    # Return the string with uppercase characters removed\n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to remove uppercase substrings from a given string.\n\n### Signature\ndef remove_uppercase(str1):",
        "timestamp": "2025-10-17T18:49:38.717629",
        "response_time": "2.16",
        "context": "{\"function_name\": \"remove_uppercase\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 460,
        "solution": "===START===\ndef Extract(lst):\n    \"\"\"\n    Returns a list containing the first element of each sublist in the input list.\n    \n    Args:\n        lst (list): A list of sublists\n    \n    Returns:\n        list: A list of first elements from each sublist\n    \"\"\"\n    return [sublist[0] for sublist in lst]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to get the first element of each sublist.\n\n### Signature\ndef Extract(lst):",
        "timestamp": "2025-10-17T18:49:40.781988",
        "response_time": "2.06",
        "context": "{\"function_name\": \"Extract\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 461,
        "solution": "===START===\ndef upper_ctr(str):\n    \"\"\"\n    Count the number of uppercase characters in the given string.\n    \n    Args:\n        str (str): Input string to count uppercase characters\n    \n    Returns:\n        int: Number of uppercase characters in the string\n    \"\"\"\n    return sum(1 for char in str if char.isupper())\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to count the upper case characters in a given string.\n\n### Signature\ndef upper_ctr(str):",
        "timestamp": "2025-10-17T18:49:42.749252",
        "response_time": "1.97",
        "context": "{\"function_name\": \"upper_ctr\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 462,
        "solution": "===START===\nfrom itertools import combinations\n\ndef combinations_list(list1):\n    # Create a list to store all possible combinations\n    all_combinations = []\n    \n    # Generate combinations of all possible lengths from 1 to the length of the list\n    for r in range(1, len(list1) + 1):\n        # Use itertools.combinations to generate combinations of length r\n        current_combinations = list(combinations(list1, r))\n        \n        # Extend the all_combinations list with current combinations\n        all_combinations.extend(current_combinations)\n    \n    return all_combinations\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find all possible combinations of the elements of a given list.\n\n### Signature\ndef combinations_list(list1):",
        "timestamp": "2025-10-17T18:49:45.539847",
        "response_time": "2.79",
        "context": "{\"function_name\": \"combinations_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 463,
        "solution": "===START===\ndef max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    result = max_so_far\n    \n    for i in range(1, len(arr)):\n        curr = arr[i]\n        temp_max = max(curr, max_so_far * curr, min_so_far * curr)\n        min_so_far = min(curr, max_so_far * curr, min_so_far * curr)\n        \n        max_so_far = temp_max\n        \n        result = max(result, max_so_far)\n    \n    return result\n===END===\n\nThe solution uses Kadane's algorithm with a slight modification to handle both positive and negative numbers. Here's how it works:\n\n1. If the array is empty, return 0.\n2. Initialize max_so_far and min_so_far with the first element.\n3. Initialize result with max_so_far.\n4. Iterate through the array starting from the second element:\n   - Calculate the maximum product ending at current element\n   - Calculate the minimum product ending at current element\n   - Update max_so_far and min_so_far\n   - Update result with the maximum product seen so far\n5. Return the maximum product subarray\n\nThe key idea is to keep track of both the maximum and minimum products because a negative number can turn a small product into a large product when multiplied.\n\nTime complexity: O(n)\nSpace complexity: O(1)",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the maximum product subarray of the given array.\n\n### Signature\ndef max_subarray_product(arr):",
        "timestamp": "2025-10-17T18:49:51.295129",
        "response_time": "5.75",
        "context": "{\"function_name\": \"max_subarray_product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 464,
        "solution": "===START===\ndef check_value(dict, n):\n    \"\"\"\n    Check if all values in the dictionary are the same.\n    \n    Args:\n        dict (dict): Input dictionary to check\n        n (int): Placeholder parameter (not used in this implementation)\n    \n    Returns:\n        bool: True if all values are the same, False otherwise\n    \"\"\"\n    # If dictionary is empty, return False\n    if not dict:\n        return False\n    \n    # Get the first value to compare against\n    first_value = list(dict.values())[0]\n    \n    # Check if all values are equal to the first value\n    return all(value == first_value for value in dict.values())\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check if all values are same in a dictionary.\n\n### Signature\ndef check_value(dict, n):",
        "timestamp": "2025-10-17T18:49:54.579945",
        "response_time": "3.28",
        "context": "{\"function_name\": \"check_value\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 465,
        "solution": "===START===\ndef drop_empty(dict1):\n    \"\"\"\n    Drop empty items from a given dictionary.\n    \n    Empty items are considered to be:\n    - None values\n    - Empty strings ('')\n    - Empty lists ([])\n    - Empty dictionaries ({})\n    - Empty tuples (())\n    \n    Args:\n        dict1 (dict): Input dictionary to remove empty items from\n    \n    Returns:\n        dict: A new dictionary with empty items removed\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v != '' and v != [] and v != {} and v != ()}\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to drop empty items from a given dictionary.\n\n### Signature\ndef drop_empty(dict1):",
        "timestamp": "2025-10-17T18:49:57.479867",
        "response_time": "2.90",
        "context": "{\"function_name\": \"drop_empty\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 468,
        "solution": "===START===\ndef max_product(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    # dp will store the maximum product of increasing subsequence ending at each index\n    dp = [0] * n\n    \n    # Initialize first element \n    dp[0] = arr[0]\n    \n    # Track the maximum product overall\n    max_prod = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, n):\n        # Initialize current element as potential max product\n        dp[i] = arr[i]\n        \n        # Check previous elements for increasing subsequence\n        for j in range(i):\n            # If current element is greater than previous element\n            if arr[i] > arr[j]:\n                # Update max product by multiplying with previous subsequence max\n                dp[i] = max(dp[i], dp[j] * arr[i])\n        \n        # Update overall max product\n        max_prod = max(max_prod, dp[i])\n    \n    return max_prod\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n### Signature\ndef max_product(arr):",
        "timestamp": "2025-10-17T18:50:02.090619",
        "response_time": "4.61",
        "context": "{\"function_name\": \"max_product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 470,
        "solution": "===START===\ndef add_pairwise(test_tup):\n    \"\"\"\n    Find the pairwise addition of neighboring elements in the given tuple.\n    \n    Args:\n        test_tup (tuple): Input tuple of numbers\n    \n    Returns:\n        tuple: A new tuple with pairwise additions of neighboring elements\n    \"\"\"\n    # If tuple has less than 2 elements, return an empty tuple\n    if len(test_tup) < 2:\n        return ()\n    \n    # Use list comprehension to add neighboring elements\n    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n### Signature\ndef add_pairwise(test_tup):",
        "timestamp": "2025-10-17T18:50:05.420360",
        "response_time": "3.33",
        "context": "{\"function_name\": \"add_pairwise\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 471,
        "solution": "===START===\ndef find_remainder(arr, n):\n    \"\"\"\n    Calculate the product of array elements modulo n\n    \n    Args:\n        arr (list): List of integers to multiply\n        n (int): Modulo value\n    \n    Returns:\n        int: Product of array elements modulo n\n    \"\"\"\n    # Initialize product as 1\n    product = 1\n    \n    # Multiply each element and take modulo n\n    for num in arr:\n        product = (product * num) % n\n    \n    return product\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the product of the array multiplication modulo n.\n\n### Signature\ndef find_remainder(arr, n):",
        "timestamp": "2025-10-17T18:50:07.893315",
        "response_time": "2.47",
        "context": "{\"function_name\": \"find_remainder\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 472,
        "solution": "===START===\ndef check_Consecutive(l):\n    # If list is empty or has only one element, return False\n    if len(l) <= 1:\n        return False\n    \n    # Sort the list first\n    sorted_list = sorted(l)\n    \n    # Check if each consecutive pair of numbers differs by 1\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i] - sorted_list[i-1] != 1:\n            return False\n    \n    return True\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\n### Signature\ndef check_Consecutive(l):",
        "timestamp": "2025-10-17T18:50:10.506852",
        "response_time": "2.61",
        "context": "{\"function_name\": \"check_Consecutive\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 473,
        "solution": "===START===\ndef tuple_intersection(test_list1, test_list2):\n    # Convert tuples to sets to ignore order\n    set1 = set(tuple(sorted(t)) for t in test_list1)\n    set2 = set(tuple(sorted(t)) for t in test_list2)\n    \n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    \n    # Convert back to list of tuples\n    return list(intersection)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n### Signature\ndef tuple_intersection(test_list1, test_list2):",
        "timestamp": "2025-10-17T18:50:13.177774",
        "response_time": "2.67",
        "context": "{\"function_name\": \"tuple_intersection\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 474,
        "solution": "===START===\ndef replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a specific character in a string with a new character.\n    \n    Args:\n        str1 (str): The original input string\n        ch (str): The character to be replaced\n        newch (str): The new character to replace with\n    \n    Returns:\n        str: A new string with all occurrences of 'ch' replaced by 'newch'\n    \"\"\"\n    return str1.replace(ch, newch)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to replace characters in a string.\n\n### Signature\ndef replace_char(str1,ch,newch):",
        "timestamp": "2025-10-17T18:50:15.735634",
        "response_time": "2.55",
        "context": "{\"function_name\": \"replace_char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 475,
        "solution": "===START===\ndef sort_counter(dict1):\n    \"\"\"\n    Sort a dictionary by its values in ascending order.\n    \n    Args:\n        dict1 (dict): Input dictionary to be sorted\n    \n    Returns:\n        dict: A new dictionary sorted by values in ascending order\n    \"\"\"\n    # Sort the dictionary items based on values and convert back to dictionary\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    \n    return sorted_dict\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to sort a dictionary by value.\n\n### Signature\ndef sort_counter(dict1):",
        "timestamp": "2025-10-17T18:50:18.472995",
        "response_time": "2.73",
        "context": "{\"function_name\": \"sort_counter\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 476,
        "solution": "===START===\ndef big_sum(nums):\n    # Check if the array is empty\n    if not nums:\n        return 0\n    \n    # Find the smallest and largest values in the array\n    smallest = min(nums)\n    largest = max(nums)\n    \n    # Return their sum\n    return smallest + largest\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\n### Signature\ndef big_sum(nums):",
        "timestamp": "2025-10-17T18:50:20.253411",
        "response_time": "1.78",
        "context": "{\"function_name\": \"big_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 477,
        "solution": "===START===\ndef is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n    \n    Args:\n        string (str): The input string to be converted to lower case\n    \n    Returns:\n        str: The input string converted to lower case\n    \"\"\"\n    return string.lower()\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to convert the given string to lower case.\n\n### Signature\ndef is_lower(string):",
        "timestamp": "2025-10-17T18:50:22.248008",
        "response_time": "1.99",
        "context": "{\"function_name\": \"is_lower\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 478,
        "solution": "===START===\ndef remove_lowercase(str1):\n    # Create a new string to store the result\n    result = ''\n    \n    # Iterate through each character in the input string\n    for char in str1:\n        # Only add the character if it is uppercase\n        if char.isupper():\n            result += char\n    \n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to remove lowercase substrings from a given string.\n\n### Signature\ndef remove_lowercase(str1):",
        "timestamp": "2025-10-17T18:50:24.023619",
        "response_time": "1.77",
        "context": "{\"function_name\": \"remove_lowercase\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 479,
        "solution": "===START===\ndef first_Digit(n):\n    # Convert the number to absolute value to handle negative numbers\n    n = abs(n)\n    \n    # If number is 0, return 0\n    if n == 0:\n        return 0\n    \n    # Keep dividing by 10 until we get the first digit\n    while n >= 10:\n        n //= 10\n    \n    return n\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the first digit of a given number.\n\n### Signature\ndef first_Digit(n) :",
        "timestamp": "2025-10-17T18:50:26.743267",
        "response_time": "2.72",
        "context": "{\"function_name\": \"first_Digit\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 554,
        "solution": "===START===\ndef Split(list):\n    return [num for num in list if num % 2 != 0]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function which takes a list of integers and only returns the odd ones.\n\n### Signature\ndef Split(list):",
        "timestamp": "2025-10-17T18:50:28.181770",
        "response_time": "1.44",
        "context": "{\"function_name\": \"Split\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 555,
        "solution": "===START===\ndef difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of first n natural numbers\n    and the sum of first n natural numbers.\n    \n    Args:\n        n (int): Number of natural numbers to consider\n    \n    Returns:\n        int: Difference between sum of cubes and sum of numbers\n    \"\"\"\n    # Calculate sum of first n natural numbers\n    sum_numbers = sum(range(1, n + 1))\n    \n    # Calculate sum of cubes of first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n + 1))\n    \n    # Return the difference\n    return sum_cubes - sum_numbers\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n### Signature\ndef difference(n) :",
        "timestamp": "2025-10-17T18:50:31.231981",
        "response_time": "3.05",
        "context": "{\"function_name\": \"difference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 556,
        "solution": "===START===\ndef find_Odd_Pair(A, N):\n    \"\"\"\n    Count the number of pairs in the array whose XOR value is odd\n    \n    Args:\n    A (list): Input array of integers\n    N (int): Length of the array\n    \n    Returns:\n    int: Number of pairs with odd XOR value\n    \"\"\"\n    # Initialize pair count\n    odd_xor_pairs = 0\n    \n    # Iterate through all possible pairs\n    for i in range(N):\n        for j in range(i+1, N):\n            # Check if XOR of pair is odd\n            if (A[i] ^ A[j]) % 2 == 1:\n                odd_xor_pairs += 1\n    \n    return odd_xor_pairs\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to count the number of pairs whose xor value is odd.\n\n### Signature\ndef find_Odd_Pair(A,N) :",
        "timestamp": "2025-10-17T18:50:34.378489",
        "response_time": "3.14",
        "context": "{\"function_name\": \"find_Odd_Pair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 557,
        "solution": "===START===\ndef toggle_string(string):\n    \"\"\"\n    Toggle the case of all characters in the input string.\n    Lowercase characters become uppercase and vice versa.\n    \n    Args:\n        string (str): The input string to toggle case\n    \n    Returns:\n        str: A new string with the case of each character toggled\n    \"\"\"\n    return string.swapcase()\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to toggle the case of all characters in a string.\n\n### Signature\ndef toggle_string(string):",
        "timestamp": "2025-10-17T18:50:36.563655",
        "response_time": "2.18",
        "context": "{\"function_name\": \"toggle_string\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 558,
        "solution": "===START===\ndef digit_distance_nums(n1, n2):\n    # Convert numbers to strings to easily iterate through digits\n    str1 = str(abs(n1))\n    str2 = str(abs(n2))\n    \n    # Pad the shorter number with leading zeros to match length\n    max_length = max(len(str1), len(str2))\n    str1 = str1.zfill(max_length)\n    str2 = str2.zfill(max_length)\n    \n    # Calculate the sum of absolute differences between corresponding digits\n    total_distance = 0\n    for d1, d2 in zip(str1, str2):\n        total_distance += abs(int(d1) - int(d2))\n    \n    return total_distance\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the sum of the per-digit difference between two integers.\n\n### Signature\ndef digit_distance_nums(n1, n2):",
        "timestamp": "2025-10-17T18:50:40.050434",
        "response_time": "3.48",
        "context": "{\"function_name\": \"digit_distance_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 559,
        "solution": "===START===\ndef max_sub_array_sum(a, size):\n    \"\"\"\n    Find the sum of the largest contiguous sublist in the given list using Kadane's algorithm.\n    \n    Args:\n    a (list): Input list of integers\n    size (int): Size of the input list\n    \n    Returns:\n    int: Maximum sum of a contiguous sublist\n    \"\"\"\n    # Initialize max_so_far and max_ending_here with the first element\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, size):\n        # Choose the maximum between current element and \n        # sum of current element and previous max_ending_here\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        \n        # Update max_so_far if max_ending_here is larger\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n\n### Signature\ndef max_sub_array_sum(a, size):",
        "timestamp": "2025-10-17T18:50:44.429786",
        "response_time": "4.38",
        "context": "{\"function_name\": \"max_sub_array_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 560,
        "solution": "===START===\ndef union_elements(test_tup1, test_tup2):\n    # Convert tuples to sets to remove duplicates and perform union\n    union_set = set(test_tup1).union(set(test_tup2))\n    \n    # Convert back to sorted list\n    return sorted(list(union_set))\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n\n### Signature\ndef union_elements(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T18:50:46.389583",
        "response_time": "1.96",
        "context": "{\"function_name\": \"union_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 562,
        "solution": "===START===\ndef Find_Max_Length(lst):\n    \"\"\"\n    Find the length of the longest sublist in the given list.\n    \n    Args:\n        lst (list): A list that may contain sublists\n    \n    Returns:\n        int: Length of the longest sublist, or 0 if the input list is empty\n    \"\"\"\n    # If the list is empty, return 0\n    if not lst:\n        return 0\n    \n    # Use max() with a key function to find the length of the longest sublist\n    return max(len(sublist) if isinstance(sublist, list) else 0 for sublist in lst)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the length of the longest sublists.\n\n### Signature\ndef Find_Max_Length(lst):",
        "timestamp": "2025-10-17T18:50:50.086185",
        "response_time": "3.69",
        "context": "{\"function_name\": \"Find_Max_Length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 563,
        "solution": "===START===\nimport re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a given string.\n    \n    Args:\n        text (str): Input string to extract quoted values from\n    \n    Returns:\n        list: A list of strings found between quotation marks\n    \"\"\"\n    # Use regex to find all matches between single or double quotes\n    pattern = r'[\\'\"]([^\\'\"]*)[\\'\"]'\n    matches = re.findall(pattern, text)\n    \n    return matches\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to extract values between quotation marks from a string.\n\n### Signature\ndef extract_values(text):",
        "timestamp": "2025-10-17T18:50:52.797742",
        "response_time": "2.71",
        "context": "{\"function_name\": \"extract_values\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 564,
        "solution": "===START===\ndef count_Pairs(arr, n):\n    \"\"\"\n    Count the number of unordered pairs of elements in the list where both elements are unequal.\n    \n    Args:\n    arr (list): List of integers\n    n (int): Length of the list\n    \n    Returns:\n    int: Number of unordered pairs with unequal elements\n    \"\"\"\n    # Initialize pair count\n    pair_count = 0\n    \n    # Iterate through all possible pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if elements are unequal\n            if arr[i] != arr[j]:\n                pair_count += 1\n    \n    return pair_count\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n### Signature\ndef count_Pairs(arr,n):",
        "timestamp": "2025-10-17T18:50:55.892124",
        "response_time": "3.09",
        "context": "{\"function_name\": \"count_Pairs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 565,
        "solution": "===START===\ndef split(word):\n    return list(word)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to split a string into characters.\n\n### Signature\ndef split(word):",
        "timestamp": "2025-10-17T18:50:57.280859",
        "response_time": "1.39",
        "context": "{\"function_name\": \"split\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 566,
        "solution": "===START===\ndef sum_digits(n):\n    # Convert the number to a string to easily iterate through its digits\n    digit_sum = 0\n    \n    # Iterate through each digit and add to the sum\n    for digit in str(n):\n        digit_sum += int(digit)\n    \n    return digit_sum\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to get the sum of the digits of a non-negative integer.\n\n### Signature\ndef sum_digits(n):",
        "timestamp": "2025-10-17T18:50:59.572388",
        "response_time": "2.29",
        "context": "{\"function_name\": \"sum_digits\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 567,
        "solution": "===START===\ndef issort_list(list1):\n    \"\"\"\n    Check whether a specified list is sorted in ascending order.\n    \n    Args:\n        list1 (list): Input list to check for sorting\n    \n    Returns:\n        bool: True if list is sorted in ascending order, False otherwise\n    \"\"\"\n    # If list is empty or has only one element, it is considered sorted\n    if len(list1) <= 1:\n        return True\n    \n    # Compare each element with the next to check if sorted\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check whether a specified list is sorted or not.\n\n### Signature\ndef issort_list(list1):",
        "timestamp": "2025-10-17T18:51:02.434981",
        "response_time": "2.86",
        "context": "{\"function_name\": \"issort_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 568,
        "solution": "===START===\ndef empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \n    Args:\n        length (int): Number of empty dictionaries to create in the list\n    \n    Returns:\n        list: A list containing 'length' number of empty dictionaries\n    \"\"\"\n    return [{} for _ in range(length)]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to create a list of N empty dictionaries.\n\n### Signature\ndef empty_list(length):",
        "timestamp": "2025-10-17T18:51:04.365605",
        "response_time": "1.93",
        "context": "{\"function_name\": \"empty_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 569,
        "solution": "===START===\ndef sort_sublists(list1):\n    \"\"\"\n    Sort each sublist of strings in the given list of lists.\n    \n    Args:\n        list1 (list): A list of lists containing strings\n    \n    Returns:\n        list: A new list with each sublist sorted alphabetically\n    \"\"\"\n    return [sorted(sublist) for sublist in list1]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(list1):",
        "timestamp": "2025-10-17T18:51:06.487078",
        "response_time": "2.12",
        "context": "{\"function_name\": \"sort_sublists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 572,
        "solution": "===START===\ndef two_unique_nums(nums):\n    # Use a set to remove duplicates while preserving order\n    unique_nums = []\n    seen = set()\n    \n    for num in nums:\n        # Only add number if it hasn't been seen before\n        if num not in seen:\n            unique_nums.append(num)\n            seen.add(num)\n    \n    return unique_nums\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to remove duplicate numbers from a given number of lists.\n\n### Signature\ndef two_unique_nums(nums):",
        "timestamp": "2025-10-17T18:51:08.672936",
        "response_time": "2.18",
        "context": "{\"function_name\": \"two_unique_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 573,
        "solution": "===START===\ndef unique_product(list_data):\n    # Use set() to get unique numbers from the list\n    unique_numbers = set(list_data)\n    \n    # Initialize product as 1\n    product = 1\n    \n    # Multiply each unique number to calculate the product\n    for num in unique_numbers:\n        product *= num\n    \n    return product\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to calculate the product of the unique numbers in a given list.\n\n### Signature\ndef unique_product(list_data):",
        "timestamp": "2025-10-17T18:51:10.762249",
        "response_time": "2.09",
        "context": "{\"function_name\": \"unique_product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 574,
        "solution": "===START===\nimport math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n    \n    Args:\n    r (float): Radius of the cylinder\n    h (float): Height of the cylinder\n    \n    Returns:\n    float: Total surface area of the cylinder\n    \"\"\"\n    # Surface area of a cylinder = 2\u03c0r\u00b2 + 2\u03c0rh\n    # Where r is radius and h is height\n    top_bottom_area = 2 * math.pi * r**2  # Area of top and bottom circular faces\n    side_area = 2 * math.pi * r * h       # Area of curved side surface\n    \n    total_surface_area = top_bottom_area + side_area\n    \n    return total_surface_area\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the surface area of a cylinder.\n\n### Signature\ndef surfacearea_cylinder(r,h):",
        "timestamp": "2025-10-17T18:51:14.551199",
        "response_time": "3.79",
        "context": "{\"function_name\": \"surfacearea_cylinder\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 576,
        "solution": "===START===\ndef is_Sub_Array(A, B):\n    \"\"\"\n    Check whether list A is a sublist of list B\n    \n    Args:\n    A (list): The potential sublist to search for\n    B (list): The main list to search in\n    \n    Returns:\n    bool: True if A is a sublist of B, False otherwise\n    \"\"\"\n    # If A is empty, it's technically a sublist of any list\n    if not A:\n        return True\n    \n    # If A is longer than B, it can't be a sublist\n    if len(A) > len(B):\n        return False\n    \n    # Iterate through possible starting positions in B\n    for i in range(len(B) - len(A) + 1):\n        # Check if the sublist starting at this position matches A\n        if B[i:i+len(A)] == A:\n            return True\n    \n    # If no match is found, return False\n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to check whether a list is sublist of another or not.\n\n### Signature\ndef is_Sub_Array(A,B):",
        "timestamp": "2025-10-17T18:51:18.457726",
        "response_time": "3.90",
        "context": "{\"function_name\": \"is_Sub_Array\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 577,
        "solution": "===START===\ndef last_Digit_Factorial(n):\n    # Handle base cases\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize result as 1\n    result = 1\n    \n    # Calculate factorial and keep only the last digit\n    for i in range(2, n + 1):\n        result = (result * i) % 10\n    \n    return result\n===END===\n\nThe solution works as follows:\n1. For 0 and 1, the factorial is 1, so return 1\n2. Start with result as 1\n3. Iterate from 2 to n \n4. Multiply result by current number and take modulo 10 to keep only last digit\n5. This prevents integer overflow and directly gives the last digit of factorial\n6. Return the final last digit\n\nTime complexity is O(n)\nSpace complexity is O(1)\n\nKey points:\n- Uses modulo 10 to extract last digit in each multiplication\n- Handles base cases of 0 and 1 \n- Efficiently calculates last digit without computing full factorial\n\nExample:\n- last_Digit_Factorial(5) = 0 (because 5! = 120, last digit is 0)\n- last_Digit_Factorial(4) = 4 (because 4! = 24, last digit is 4)",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the last digit in factorial of a given number.\n\n### Signature\ndef last_Digit_Factorial(n):",
        "timestamp": "2025-10-17T18:51:24.498843",
        "response_time": "6.04",
        "context": "{\"function_name\": \"last_Digit_Factorial\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 578,
        "solution": "===START===\ndef interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave three lists of equal length into a single flat list.\n    \n    Args:\n        list1 (list): First input list\n        list2 (list): Second input list\n        list3 (list): Third input list\n    \n    Returns:\n        list: A single list with elements interleaved from input lists\n    \"\"\"\n    # Check if lists are of equal length\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"All input lists must be of equal length\")\n    \n    # Use list comprehension to interleave lists\n    return [item for tuple_items in zip(list1, list2, list3) for item in tuple_items]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to interleave 3 lists of the same length into a single flat list.\n\n### Signature\ndef interleave_lists(list1,list2,list3):",
        "timestamp": "2025-10-17T18:51:27.811119",
        "response_time": "3.31",
        "context": "{\"function_name\": \"interleave_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 579,
        "solution": "===START===\ndef find_dissimilar(test_tup1, test_tup2):\n    # Convert tuples to sets for efficient comparison\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find elements that are in either set but not in both\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    # Convert back to tuple and return\n    return tuple(dissimilar_elements)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the dissimilar elements in the given two tuples.\n\n### Signature\ndef find_dissimilar(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T18:51:30.251322",
        "response_time": "2.44",
        "context": "{\"function_name\": \"find_dissimilar\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 580,
        "solution": "===START===\ndef even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements from a nested mixed tuple based on the provided even function.\n    \n    Args:\n        test_tuple (tuple): Input nested mixed tuple\n        even_fnc (callable): Function to check if an element is even\n    \n    Returns:\n        tuple: Tuple with only even elements\n    \"\"\"\n    def filter_tuple(item):\n        # If item is a tuple, recursively filter its elements\n        if isinstance(item, tuple):\n            filtered = tuple(filter_tuple(sub_item) for sub_item in item)\n            return filtered if filtered else None\n        \n        # If item is not a tuple, apply the even function\n        return item if even_fnc(item) else None\n    \n    # Filter the tuple, removing None values\n    result = tuple(item for item in filter_tuple(test_tuple) if item is not None)\n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to remove uneven elements in the nested mixed tuple.\n\n### Signature\ndef even_ele(test_tuple, even_fnc):",
        "timestamp": "2025-10-17T18:51:34.313515",
        "response_time": "4.06",
        "context": "{\"function_name\": \"extract_even\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 581,
        "solution": "===START===\nimport math\n\ndef surface_Area(b, s):\n    \"\"\"\n    Calculate the surface area of a square pyramid\n    \n    Args:\n    b (float): Length of the base edge \n    s (float): Slant height of the pyramid\n    \n    Returns:\n    float: Total surface area of the square pyramid\n    \"\"\"\n    # Calculate base area (square base)\n    base_area = b * b\n    \n    # Calculate triangular face area (4 identical triangular faces)\n    # Area of a triangle = 0.5 * base * height (slant height)\n    triangular_face_area = 0.5 * b * s\n    \n    # Total surface area = base area + (4 * triangular face area)\n    total_surface_area = base_area + (4 * triangular_face_area)\n    \n    return total_surface_area\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\n### Signature\ndef surface_Area(b,s):",
        "timestamp": "2025-10-17T18:51:38.623858",
        "response_time": "4.31",
        "context": "{\"function_name\": \"surface_Area\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 582,
        "solution": "===START===\ndef my_dict(dict1):\n    \"\"\"\n    Check if a dictionary is empty.\n    \n    Args:\n        dict1 (dict): The dictionary to check\n    \n    Returns:\n        bool: True if the dictionary is empty, False otherwise\n    \"\"\"\n    return len(dict1) == 0\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check if a dictionary is empty\n\n### Signature\ndef my_dict(dict1):",
        "timestamp": "2025-10-17T18:51:40.430752",
        "response_time": "1.80",
        "context": "{\"function_name\": \"my_dict\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 583,
        "solution": "===START===\ndef catalan_number(num):\n    \"\"\"\n    Calculate the nth Catalan number using dynamic programming.\n    \n    Args:\n        num (int): The index of the Catalan number to calculate (0-based)\n    \n    Returns:\n        int: The nth Catalan number\n    \"\"\"\n    # Handle base cases\n    if num <= 1:\n        return 1\n    \n    # Create a dynamic programming array to store Catalan numbers\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    # Calculate Catalan numbers using dynamic programming\n    for i in range(2, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[num]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function which returns nth catalan number.\n\n### Signature\ndef catalan_number(num):",
        "timestamp": "2025-10-17T18:51:43.854174",
        "response_time": "3.42",
        "context": "{\"function_name\": \"catalan_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 584,
        "solution": "===START===\nimport re\n\ndef find_adverbs(text):\n    # Regular expression to find adverbs ending with 'ly'\n    adverb_pattern = r'\\b\\w+ly\\b'\n    \n    # Find all matches of adverbs\n    matches = list(re.finditer(adverb_pattern, text))\n    \n    # If no adverbs found, return None\n    if not matches:\n        return None\n    \n    # Get the first match\n    first_match = matches[0]\n    \n    # Return a tuple with the adverb and its start and end positions\n    return (first_match.group(), first_match.start(), first_match.end())\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n\n### Signature\ndef find_adverbs(text):",
        "timestamp": "2025-10-17T18:51:47.152949",
        "response_time": "3.29",
        "context": "{\"function_name\": \"find_adverbs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 585,
        "solution": "===START===\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items from a given dataset.\n    \n    Args:\n        items (list): A list of items, where each item is expected to have a price attribute\n        n (int): Number of most expensive items to return\n    \n    Returns:\n        list: A list of the n most expensive items sorted in descending order by price\n    \"\"\"\n    # Sort the items in descending order by price and return the top n items\n    return sorted(items, key=lambda x: x.price, reverse=True)[:n]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the n most expensive items in a given dataset.\n\n### Signature\ndef expensive_items(items,n):",
        "timestamp": "2025-10-17T18:51:49.971702",
        "response_time": "2.81",
        "context": "{\"function_name\": \"expensive_items\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 586,
        "solution": "===START===\ndef split_Arr(l, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n    \n    Args:\n    l (list): The input list to be split\n    n (int): The index at which to split the list\n    \n    Returns:\n    list: A new list with elements rearranged\n    \"\"\"\n    # Handle edge cases\n    if not l or n <= 0 or n >= len(l):\n        return l\n    \n    # Split the list and rearrange\n    return l[n:] + l[:n]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n\n### Signature\ndef split_Arr(l, n):",
        "timestamp": "2025-10-17T18:51:52.864712",
        "response_time": "2.89",
        "context": "{\"function_name\": \"split_Arr\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 587,
        "solution": "===START===\ndef list_tuple(listx):\n    \"\"\"\n    Convert a given list to a tuple.\n    \n    Args:\n        listx (list): The input list to be converted\n    \n    Returns:\n        tuple: A tuple containing the same elements as the input list\n    \"\"\"\n    return tuple(listx)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to convert a list to a tuple.\n\n### Signature\ndef list_tuple(listx):",
        "timestamp": "2025-10-17T18:51:54.668780",
        "response_time": "1.80",
        "context": "{\"function_name\": \"list_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 588,
        "solution": "===START===\ndef big_diff(nums):\n    if not nums:\n        return 0\n    return max(nums) - min(nums)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the difference between largest and smallest value in a given list.\n\n### Signature\ndef big_diff(nums):",
        "timestamp": "2025-10-17T18:51:56.915409",
        "response_time": "2.24",
        "context": "{\"function_name\": \"big_diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 589,
        "solution": "===START===\nimport math\n\ndef perfect_squares(a, b):\n    # Find the perfect squares between a and b (inclusive)\n    # A perfect square is a number that is the product of an integer with itself\n    \n    # Find the smallest perfect square greater than or equal to a\n    start = math.ceil(math.sqrt(a))\n    \n    # Find the largest perfect square less than or equal to b\n    end = math.floor(math.sqrt(b))\n    \n    # Generate the list of perfect squares\n    return [x*x for x in range(start, end + 1)]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find perfect squares between two given numbers.\n\n### Signature\ndef perfect_squares(a, b):",
        "timestamp": "2025-10-17T18:51:59.739328",
        "response_time": "2.82",
        "context": "{\"function_name\": \"perfect_squares\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 590,
        "solution": "===START===\nimport math\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y)\n    \n    Args:\n    r (float): Radial distance from the origin\n    theta (float): Angle in radians\n    \n    Returns:\n    tuple: Rectangular coordinates (x, y)\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to convert polar coordinates to rectangular coordinates.\n\n### Signature\ndef polar_rect(x,y):",
        "timestamp": "2025-10-17T18:52:02.387940",
        "response_time": "2.64",
        "context": "{\"function_name\": \"polar_rect\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 591,
        "solution": "===START===\ndef swap_List(newList):\n    # Check if the list has at least 2 elements\n    if len(newList) < 2:\n        return newList\n    \n    # Swap first and last elements using tuple unpacking\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to interchange the first and last elements in a list.\n\n### Signature\ndef swap_List(newList):",
        "timestamp": "2025-10-17T18:52:04.393761",
        "response_time": "2.00",
        "context": "{\"function_name\": \"swap_List\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 592,
        "solution": "I'll solve this problem by implementing the function to calculate the sum of products of consecutive binomial coefficients.\n\n===START===\nimport math\n\ndef binomial_Coeff(n, k):\n    \"\"\"\n    Calculate the sum of products of consecutive binomial coefficients\n    \n    Args:\n    n (int): Total number of elements\n    k (int): Number of elements to choose\n    \n    Returns:\n    int: Sum of products of consecutive binomial coefficients\n    \"\"\"\n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate through possible consecutive coefficients\n    for i in range(k):\n        # Calculate consecutive binomial coefficients\n        coeff1 = math.comb(n, i)\n        coeff2 = math.comb(n, i+1)\n        \n        # Add the product of consecutive coefficients to total sum\n        total_sum += coeff1 * coeff2\n    \n    return total_sum\n===END===\n\nThe solution uses the following approach:\n1. Import the `math` module to use the `math.comb()` function for calculating binomial coefficients\n2. Create a function that takes `n` and `k` as input parameters\n3. Initialize a variable `total_sum` to store the sum of products\n4. Iterate from 0 to `k-1`\n5. Calculate consecutive binomial coefficients using `math.comb()`\n6. Multiply consecutive coefficients and add to `total_sum`\n7. Return the final sum\n\nThe `math.comb(n, k)` function calculates the binomial coefficient (n choose k), which represents the number of ways to choose `k` items from `n` items without repetition and without order.\n\nThe time complexity is O(k), and the space complexity is O(1).",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\n### Signature\ndef binomial_Coeff(n,k):",
        "timestamp": "2025-10-17T18:52:11.318781",
        "response_time": "6.92",
        "context": "{\"function_name\": \"sum_Of_product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 593,
        "solution": "===START===\ndef removezero_ip(ip):\n    # Split the IP address into octets\n    octets = ip.split('.')\n    \n    # Remove leading zeros from each octet\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    \n    # Rejoin the cleaned octets into an IP address\n    return '.'.join(cleaned_octets)\n===END===\n\nThe function works as follows:\n1. Split the input IP address string into octets using '.' as a separator\n2. Convert each octet to an integer (which automatically removes leading zeros) and then back to a string\n3. Join the cleaned octets back together with '.' to recreate the IP address\n4. This handles cases like '001.002.003.004' and converts it to '1.2.3.4'\n\nThe int() conversion removes leading zeros, and str() converts it back to a string representation without those zeros. The function works for both IPv4 addresses with leading zeros in any or all octets.",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to remove leading zeroes from an ip address.\n\n### Signature\ndef removezero_ip(ip):",
        "timestamp": "2025-10-17T18:52:16.140558",
        "response_time": "4.82",
        "context": "{\"function_name\": \"removezero_ip\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 594,
        "solution": "===START===\ndef diff_even_odd(list1):\n    # Initialize variables to store first even and first odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find first even and first odd numbers\n    for num in list1:\n        # Find first even number if not already found\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        \n        # Find first odd number if not already found\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # If both first even and first odd are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if first_even is None or first_odd is None:\n        return None\n    \n    # Return the difference between first even and first odd number\n    return first_even - first_odd\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the difference of the first even and first odd number of a given list.\n\n### Signature\ndef diff_even_odd(list1):",
        "timestamp": "2025-10-17T18:52:20.049749",
        "response_time": "3.91",
        "context": "{\"function_name\": \"diff_even_odd\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 595,
        "solution": "===START===\ndef min_Swaps(str1, str2):\n    # Check if lengths are different\n    if len(str1) != len(str2):\n        return -1\n    \n    # Check if number of 1s and 0s are same\n    if str1.count('1') != str2.count('1'):\n        return -1\n    \n    # Count mismatched positions\n    mismatches = [i for i in range(len(str1)) if str1[i] != str2[i]]\n    \n    # Minimum swaps is half the number of mismatches\n    return len(mismatches) // 2\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n### Signature\ndef min_Swaps(str1,str2) :",
        "timestamp": "2025-10-17T18:52:22.910700",
        "response_time": "2.86",
        "context": "{\"function_name\": \"min_Swaps\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 596,
        "solution": "===START===\nimport sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Calculate the total size in bytes of the given tuple.\n    \n    Args:\n        tuple_list (tuple): The input tuple to calculate size for\n    \n    Returns:\n        int: Total size of the tuple in bytes\n    \"\"\"\n    return sys.getsizeof(tuple_list)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the size in bytes of the given tuple.\n\n### Signature\ndef tuple_size(tuple_list):",
        "timestamp": "2025-10-17T18:52:25.057681",
        "response_time": "2.14",
        "context": "{\"function_name\": \"tuple_size\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 597,
        "solution": "===START===\ndef find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from two sorted arrays.\n    \n    Args:\n    arr1 (list): First sorted array\n    arr2 (list): Second sorted array \n    k (int): Position of the element to find (1-based indexing)\n    \n    Returns:\n    int: The kth element in the merged sorted array\n    \"\"\"\n    # Ensure arr1 is the smaller array for efficiency\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    m, n = len(arr1), len(arr2)\n    \n    # Binary search on the smaller array\n    left, right = max(0, k - n), min(k, m)\n    \n    while left <= right:\n        # Partition points\n        partition_x = (left + right) // 2\n        partition_y = k - partition_x\n        \n        # Find max and min elements around partitions\n        max_left_x = float('-inf') if partition_x == 0 else arr1[partition_x - 1]\n        min_right_x = float('inf') if partition_x == m else arr1[partition_x]\n        \n        max_left_y = float('-inf') if partition_y == 0 else arr2[partition_y - 1]\n        min_right_y = float('inf') if partition_y == n else arr2[partition_y]\n        \n        # Check if partition is correct\n        if max_left_x <= min_right_y and max_left_y <= min_right_x:\n            # Return kth element\n            return max(max_left_x, max_left_y)\n        \n        # Adjust binary search\n        elif max_left_x > min_right_y:\n            right = partition_x - 1\n        else:\n            left = partition_x + 1\n    \n    # Should never reach here if inputs are valid\n    raise ValueError(\"Invalid input arrays\")\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find kth element from the given two sorted arrays.\n\n### Signature\ndef find_kth(arr1, arr2, k):",
        "timestamp": "2025-10-17T18:52:33.800631",
        "response_time": "8.74",
        "context": "{\"function_name\": \"find_kth\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 598,
        "solution": "===START===\ndef armstrong_number(number):\n    # Convert number to string to easily iterate through digits\n    num_str = str(number)\n    \n    # Calculate the number of digits\n    num_digits = len(num_str)\n    \n    # Calculate the sum of each digit raised to the power of total number of digits\n    armstrong_sum = sum(int(digit) ** num_digits for digit in num_str)\n    \n    # Check if the sum equals the original number\n    return armstrong_sum == number\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check whether the given number is armstrong or not.\n\n### Signature\ndef armstrong_number(number):",
        "timestamp": "2025-10-17T18:52:36.267648",
        "response_time": "2.46",
        "context": "{\"function_name\": \"armstrong_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 599,
        "solution": "===START===\ndef sum_average(number):\n    \"\"\"\n    Calculate the sum and average of first n natural numbers.\n    \n    Args:\n        number (int): The number of natural numbers to calculate sum and average for\n    \n    Returns:\n        tuple: A tuple containing (sum of numbers, average of numbers)\n    \"\"\"\n    # Calculate sum of first n natural numbers\n    total_sum = sum(range(1, number + 1))\n    \n    # Calculate average by dividing sum by number of elements\n    average = total_sum / number if number > 0 else 0\n    \n    return (total_sum, average)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find sum and average of first n natural numbers.\n\n### Signature\ndef sum_average(number):",
        "timestamp": "2025-10-17T18:52:39.297837",
        "response_time": "3.03",
        "context": "{\"function_name\": \"sum_average\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 600,
        "solution": "===START===\ndef is_Even(n):\n    \"\"\"\n    Check whether the given number is even or not.\n    \n    Args:\n        n (int): The number to check for evenness\n    \n    Returns:\n        bool: True if the number is even, False otherwise\n    \"\"\"\n    return n % 2 == 0\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to check whether the given number is even or not.\n\n### Signature\ndef is_Even(n) :",
        "timestamp": "2025-10-17T18:52:41.097441",
        "response_time": "1.80",
        "context": "{\"function_name\": \"is_Even\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 602,
        "solution": "===START===\ndef first_repeated_char(str1):\n    # Create a set to track characters seen\n    seen_chars = set()\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If character is already in set, it's the first repeated character\n        if char in seen_chars:\n            return char\n        \n        # Add character to set of seen characters\n        seen_chars.add(char)\n    \n    # If no repeated character is found, return None\n    return None\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the first repeated character in a given string.\n\n### Signature\ndef first_repeated_char(str1):",
        "timestamp": "2025-10-17T18:52:43.521484",
        "response_time": "2.42",
        "context": "{\"function_name\": \"first_repeated_char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 603,
        "solution": "===START===\ndef get_ludic(n):\n    \"\"\"\n    Returns a list of lucid numbers less than or equal to n.\n    \n    Lucid numbers are generated through a sieve-like process:\n    1. Start with a list of numbers from 1 to n\n    2. Always keep 1 in the list\n    3. Remove every nth number where n is the next remaining number in the list\n    \n    Args:\n        n (int): The upper limit to generate lucid numbers\n    \n    Returns:\n        list: A list of lucid numbers less than or equal to n\n    \"\"\"\n    if n < 1:\n        return []\n    \n    # Initialize the list with numbers from 1 to n\n    ludic = list(range(1, n + 1))\n    \n    i = 1  # Start from index 1 (second element)\n    while i < len(ludic):\n        current = ludic[i]\n        \n        # Remove every current-th number after the current number\n        j = i + current\n        while j < len(ludic):\n            ludic.pop(j)\n            # Adjust j to account for the removed element\n            j = j - 1 + current\n        \n        i += 1\n    \n    return ludic\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\n### Signature\ndef get_ludic(n):",
        "timestamp": "2025-10-17T18:52:49.066320",
        "response_time": "5.54",
        "context": "{\"function_name\": \"get_ludic\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 604,
        "solution": "===START===\ndef reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    \n    # Reverse the list of words\n    reversed_words = words[::-1]\n    \n    # Join the reversed words back into a string\n    return ' '.join(reversed_words)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to reverse words seperated by spaces in a given string.\n\n### Signature\ndef reverse_words(s):",
        "timestamp": "2025-10-17T18:52:50.860145",
        "response_time": "1.79",
        "context": "{\"function_name\": \"reverse_words\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 605,
        "solution": "===START===\ndef prime_num(num):\n    # Handle edge cases\n    if num <= 1:\n        return False\n    \n    # Check for divisibility from 2 to square root of num\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    return True\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check if the given integer is a prime number.\n\n### Signature\ndef prime_num(num):",
        "timestamp": "2025-10-17T18:52:52.979885",
        "response_time": "2.12",
        "context": "{\"function_name\": \"prime_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 606,
        "solution": "===START===\nimport math\n\ndef radian_degree(degree):\n    \"\"\"\n    Convert degrees to radians.\n    \n    Args:\n        degree (float): Angle in degrees\n    \n    Returns:\n        float: Angle converted to radians\n    \"\"\"\n    return degree * (math.pi / 180)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to convert degrees to radians.\n\n### Signature\ndef radian_degree(degree):",
        "timestamp": "2025-10-17T18:52:54.911025",
        "response_time": "1.93",
        "context": "{\"function_name\": \"radian_degree\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 607,
        "solution": "===START===\nimport re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Search for a regex pattern in the given text and return the matched substring along with its start and end indices.\n    \n    Args:\n        text (str): The input text to search in\n        pattern (str): The regex pattern to search for\n    \n    Returns:\n        tuple: A tuple containing (matched_substring, start_index, end_index)\n               Returns (None, -1, -1) if no match is found\n    \"\"\"\n    # Search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # If a match is found, return the matched substring and its indices\n    if match:\n        return (match.group(), match.start(), match.end())\n    \n    # If no match is found, return default values\n    return (None, -1, -1)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\n### Signature\ndef find_literals(text, pattern):",
        "timestamp": "2025-10-17T18:52:58.324587",
        "response_time": "3.41",
        "context": "{\"function_name\": \"find_literals\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 608,
        "solution": "===START===\ndef bell_Number(n):\n    # Create a 2D array to store Bell triangle values\n    bell_triangle = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # First value is always 1\n    bell_triangle[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # First number in each row is the last number of previous row\n        bell_triangle[i][0] = bell_triangle[i-1][i-1]\n        \n        # Calculate other values in the row\n        for j in range(1, i+1):\n            bell_triangle[i][j] = bell_triangle[i-1][j-1] + bell_triangle[i][j-1]\n    \n    # The first value in the nth row is the nth Bell number\n    return bell_triangle[n][0]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find nth bell number.\n\n### Signature\ndef bell_Number(n):",
        "timestamp": "2025-10-17T18:53:02.441086",
        "response_time": "4.11",
        "context": "{\"function_name\": \"bell_Number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 610,
        "solution": "===START===\ndef remove_kth_element(list1, L):\n    \"\"\"\n    Remove the L'th element from the given list.\n    \n    Args:\n    list1 (list): The input list\n    L (int): The index of the element to remove (0-based indexing)\n    \n    Returns:\n    list: A new list with the L'th element removed\n    \"\"\"\n    # Check if the index is valid\n    if L < 0 or L >= len(list1):\n        return list1.copy()\n    \n    # Create a new list without the L'th element\n    return list1[:L] + list1[L+1:]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\n### Signature\ndef remove_kth_element(list1, L):",
        "timestamp": "2025-10-17T18:53:05.427483",
        "response_time": "2.98",
        "context": "{\"function_name\": \"remove_kth_element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 611,
        "solution": "===START===\ndef max_of_nth(test_list, N):\n    # Check if the list is empty\n    if not test_list:\n        return None\n    \n    # Check if N is a valid column index\n    if N < 0 or N >= len(test_list[0]):\n        return None\n    \n    # Extract the N'th column and find its maximum value\n    return max(row[N] for row in test_list)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\n### Signature\ndef max_of_nth(test_list, N):",
        "timestamp": "2025-10-17T18:53:07.835881",
        "response_time": "2.41",
        "context": "{\"function_name\": \"max_of_nth\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 612,
        "solution": "===START===\ndef merge(lst):\n    \"\"\"\n    Takes a list of lists with two elements and returns a list of two lists,\n    where the first list contains first elements and the second list contains second elements.\n    \n    Args:\n        lst (list): A list of lists, where each sublist has two elements\n    \n    Returns:\n        list: A list containing two lists - first elements and second elements\n    \"\"\"\n    if not lst:\n        return [[], []]\n    \n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    \n    return [first_elements, second_elements]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n### Signature\ndef merge(lst):",
        "timestamp": "2025-10-17T18:53:11.012228",
        "response_time": "3.17",
        "context": "{\"function_name\": \"merge\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 614,
        "solution": "===START===\ndef cummulative_sum(test_list):\n    \"\"\"\n    Calculate the cumulative sum of all values in the given tuple list.\n    \n    Args:\n        test_list (list): A list of tuples containing numeric values\n    \n    Returns:\n        int: The cumulative sum of all values in the tuple list\n    \"\"\"\n    # Use sum() with a generator expression to extract all values from tuples\n    return sum(value for tuple_item in test_list for value in tuple_item)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n### Signature\ndef cummulative_sum(test_list):",
        "timestamp": "2025-10-17T18:53:13.604732",
        "response_time": "2.59",
        "context": "{\"function_name\": \"cummulative_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 615,
        "solution": "===START===\ndef average_tuple(nums):\n    \"\"\"\n    Calculate the average value for each tuple in the input tuple of tuples.\n    \n    Args:\n        nums (tuple): A tuple containing tuples of numbers\n    \n    Returns:\n        list: A list of average values for each input tuple\n    \"\"\"\n    return [sum(t) / len(t) for t in nums]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\n### Signature\ndef average_tuple(nums):",
        "timestamp": "2025-10-17T18:53:15.776051",
        "response_time": "2.17",
        "context": "{\"function_name\": \"average_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 616,
        "solution": "===START===\ndef tuple_modulo(test_tup1, test_tup2):\n    # Check if tuples are of the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    # Perform element-wise modulo using list comprehension\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\n### Signature\ndef tuple_modulo(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T18:53:19.551287",
        "response_time": "3.77",
        "context": "{\"function_name\": \"tuple_modulo\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 617,
        "solution": "===START===\ndef min_Jumps(steps, d):\n    \"\"\"\n    Calculate the minimum number of jumps required to reach point (d, 0) from origin\n    \n    Args:\n    steps (int): Maximum length of each jump\n    d (int): Distance to reach on x-axis\n    \n    Returns:\n    int: Minimum number of jumps required, or -1 if impossible\n    \"\"\"\n    # If distance is 0, no jumps needed\n    if d == 0:\n        return 0\n    \n    # If steps is 0 and distance is non-zero, impossible to reach\n    if steps == 0:\n        return -1\n    \n    # Track possible x-coordinates after each jump\n    possible_positions = {0}\n    \n    # Track number of jumps\n    jumps = 0\n    \n    while possible_positions:\n        jumps += 1\n        new_positions = set()\n        \n        # Try jumping forward and backward for each current position\n        for pos in possible_positions:\n            # Jump forward\n            forward_pos = pos + steps\n            if forward_pos == d:\n                return jumps\n            new_positions.add(forward_pos)\n            \n            # Jump backward\n            backward_pos = pos - steps\n            if backward_pos == d:\n                return jumps\n            new_positions.add(backward_pos)\n        \n        # Update possible positions\n        possible_positions = new_positions\n        \n        # Prevent infinite loop and limit search space\n        if jumps > abs(d) + steps:\n            break\n    \n    return -1\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n### Signature\ndef min_Jumps(steps, d):",
        "timestamp": "2025-10-17T18:53:25.675772",
        "response_time": "6.12",
        "context": "{\"function_name\": \"min_Jumps\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 618,
        "solution": "===START===\ndef div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise.\n    \n    Args:\n        nums1 (list): First list of numbers\n        nums2 (list): Second list of numbers\n    \n    Returns:\n        list: A new list with each element of nums1 divided by corresponding element in nums2\n    \n    Raises:\n        ValueError: If lists are of different lengths\n        ZeroDivisionError: If any element in nums2 is zero\n    \"\"\"\n    # Check if lists have same length\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must be of equal length\")\n    \n    # Perform element-wise division\n    result = [num1 / num2 for num1, num2 in zip(nums1, nums2)]\n    \n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to divide two lists element wise.\n\n### Signature\ndef div_list(nums1,nums2):",
        "timestamp": "2025-10-17T18:53:29.019391",
        "response_time": "3.34",
        "context": "{\"function_name\": \"div_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 619,
        "solution": "===START===\ndef move_num(test_str):\n    # Separate numbers and non-numbers\n    numbers = [char for char in test_str if char.isdigit()]\n    non_numbers = [char for char in test_str if not char.isdigit()]\n    \n    # Combine non-numbers followed by numbers\n    return ''.join(non_numbers + numbers)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to move all the numbers to the end of the given string.\n\n### Signature\ndef move_num(test_str):",
        "timestamp": "2025-10-17T18:53:31.494710",
        "response_time": "2.47",
        "context": "{\"function_name\": \"move_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 620,
        "solution": "===START===\nfrom typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    # If the list is empty, return 0\n    if not a:\n        return 0\n    \n    # Sort the list in ascending order\n    a.sort()\n    n = len(a)\n    \n    # Initialize dp array to store the size of largest divisible subset \n    # ending at each index\n    dp = [1] * n\n    \n    # Track the maximum subset size\n    max_subset_size = 1\n    \n    # Iterate through the list\n    for i in range(1, n):\n        for j in range(i):\n            # Check if current number is divisible by previous number\n            # or vice versa\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                # Update the subset size for current index\n                dp[i] = max(dp[i], dp[j] + 1)\n        \n        # Update the maximum subset size\n        max_subset_size = max(max_subset_size, dp[i])\n    \n    return max_subset_size\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n### Signature\ndef largest_subset(a):",
        "timestamp": "2025-10-17T18:53:35.780675",
        "response_time": "4.28",
        "context": "{\"function_name\": \"largest_subset\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 622,
        "solution": "===START===\ndef get_median(arr1, arr2, n):\n    \"\"\"\n    Find the median of two sorted lists of the same size.\n    \n    Args:\n    arr1 (list): First sorted list of integers\n    arr2 (list): Second sorted list of integers\n    n (int): Size of each list\n    \n    Returns:\n    float: Median of the combined sorted lists\n    \"\"\"\n    # Merge the two sorted lists\n    merged = []\n    i, j = 0, 0\n    \n    while i < n and j < n:\n        if arr1[i] <= arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    \n    # Add remaining elements if any\n    while i < n:\n        merged.append(arr1[i])\n        i += 1\n    \n    while j < n:\n        merged.append(arr2[j])\n        j += 1\n    \n    # Calculate median\n    # Since lists are of same size, total length will be 2n\n    # Median will be average of middle two elements\n    mid = n  # middle index in merged list\n    return (merged[mid-1] + merged[mid]) / 2\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the median of two sorted lists of same size.\n\n### Signature\ndef get_median(arr1, arr2, n):",
        "timestamp": "2025-10-17T18:53:40.498232",
        "response_time": "4.71",
        "context": "{\"function_name\": \"get_median\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 623,
        "solution": "===START===\ndef nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in the input list.\n    \n    Args:\n        nums (list): A list of numbers to be raised to the n-th power\n        n (int): The power to which each number should be raised\n    \n    Returns:\n        list: A new list with each number raised to the n-th power\n    \"\"\"\n    return [num ** n for num in nums]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to compute the n-th power of each number in a list.\n\n### Signature\ndef nth_nums(nums,n):",
        "timestamp": "2025-10-17T18:53:42.678043",
        "response_time": "2.18",
        "context": "{\"function_name\": \"nth_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 624,
        "solution": "===START===\ndef is_upper(string):\n    \"\"\"\n    Convert a given string to uppercase.\n    \n    Args:\n        string (str): The input string to be converted to uppercase\n    \n    Returns:\n        str: The uppercase version of the input string\n    \"\"\"\n    return string.upper()\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to convert a given string to uppercase.\n\n### Signature\ndef is_upper(string):",
        "timestamp": "2025-10-17T18:53:44.628864",
        "response_time": "1.95",
        "context": "{\"function_name\": \"is_upper\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 625,
        "solution": "===START===\ndef swap_List(newList):\n    # Check if the list has at least 2 elements\n    if len(newList) < 2:\n        return newList\n    \n    # Swap first and last elements using tuple unpacking\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to interchange the first and last element in a given list.\n\n### Signature\ndef swap_List(newList):",
        "timestamp": "2025-10-17T18:53:46.670446",
        "response_time": "2.04",
        "context": "{\"function_name\": \"swap_List\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 626,
        "solution": "===START===\nimport math\n\ndef triangle_area(r):\n    # The largest triangle inscribed in a semicircle will have its base along the diameter\n    # and its height will be the radius\n    \n    # Base of the triangle is the diameter = 2r\n    base = 2 * r\n    \n    # Height of the triangle is the radius\n    height = r\n    \n    # Area of triangle = 1/2 * base * height\n    area = 0.5 * base * height\n    \n    return area\n\n===END===\n\nThe solution works as follows:\n1. The largest triangle that can be inscribed in a semicircle will have:\n   - Its base along the diameter of the semicircle (length = 2r)\n   - Its height equal to the radius of the semicircle (r)\n2. The area of a triangle is calculated using the formula: 1/2 * base * height\n3. Substituting the base and height gives the area as 1/2 * (2r) * r = r\u00b2\n4. The function takes the radius as input and returns the area of the largest inscribed triangle\n\nThe time complexity is O(1) as it's a simple calculation, and space complexity is O(1) as it uses only a constant amount of additional space.",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n### Signature\ndef triangle_area(r) :",
        "timestamp": "2025-10-17T18:53:52.676552",
        "response_time": "6.00",
        "context": "{\"function_name\": \"triangle_area\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 627,
        "solution": "===START===\ndef find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n    \n    Args:\n    array (list): A sorted list of natural numbers\n    start (int, optional): Starting index to search from. Defaults to 0.\n    end (int, optional): Ending index to search to. Defaults to None (full array length).\n    \n    Returns:\n    int: The smallest missing natural number\n    \"\"\"\n    # If end is not specified, set it to the length of the array\n    if end is None:\n        end = len(array) - 1\n    \n    # If the first element is not 1, return 1\n    if array[start] != 1:\n        return 1\n    \n    # Iterate through the array to find the first missing number\n    for i in range(start, end):\n        # Check if the next expected number is missing\n        if array[i+1] - array[i] > 1:\n            return array[i] + 1\n    \n    # If no missing number found in the range, return the next number after the last element\n    return array[end] + 1\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\n### Signature\ndef find_First_Missing(array,start=0,end=None):",
        "timestamp": "2025-10-17T18:53:57.280666",
        "response_time": "4.60",
        "context": "{\"function_name\": \"find_First_Missing\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 628,
        "solution": "===START===\ndef replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n    \n    Args:\n        string (str): The input string to modify\n    \n    Returns:\n        str: A new string with spaces replaced by '%20'\n    \"\"\"\n    return string.replace(' ', '%20')\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to replace all spaces in the given string with '%20'.\n\n### Signature\ndef replace_spaces(string):",
        "timestamp": "2025-10-17T18:53:59.337479",
        "response_time": "2.05",
        "context": "{\"function_name\": \"replace_spaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 629,
        "solution": "===START===\ndef Split(list):\n    \"\"\"\n    Find and return a list of even numbers from the input list.\n    \n    Args:\n        list (list): A list of numbers to filter for even numbers\n    \n    Returns:\n        list: A list containing only the even numbers from the input list\n    \"\"\"\n    return [num for num in list if num % 2 == 0]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find even numbers from a list of numbers.\n\n### Signature\ndef Split(list):",
        "timestamp": "2025-10-17T18:54:01.559771",
        "response_time": "2.22",
        "context": "{\"function_name\": \"Split\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 630,
        "solution": "===START===\ndef adjac(ele, sub = []):\n    \"\"\"\n    Extract all adjacent coordinates of a given coordinate tuple.\n    \n    Args:\n        ele (tuple): The input coordinate tuple (x, y)\n        sub (list, optional): Additional list to store adjacent coordinates. Defaults to empty list.\n    \n    Returns:\n        list: List of adjacent coordinates including up, down, left, right\n    \"\"\"\n    x, y = ele\n    \n    # Define adjacent coordinate offsets\n    adjacent_offsets = [\n        (x, y+1),   # Up\n        (x, y-1),   # Down\n        (x-1, y),   # Left\n        (x+1, y)    # Right\n    ]\n    \n    # Extend the sub list with adjacent coordinates\n    sub.extend(adjacent_offsets)\n    \n    return sub\n\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n### Signature\ndef adjac(ele, sub = []):",
        "timestamp": "2025-10-17T18:54:05.201168",
        "response_time": "3.64",
        "context": "{\"function_name\": \"get_coordinates\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 631,
        "solution": "===START===\ndef replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with underscores and underscores with whitespaces in the given text.\n    \n    Args:\n        text (str): Input string to modify\n    \n    Returns:\n        str: Modified string with spaces and underscores swapped\n    \"\"\"\n    # Replace spaces with underscores and vice versa\n    return text.replace(' ', '_').replace('_', ' ')\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\n### Signature\ndef replace_spaces(text):",
        "timestamp": "2025-10-17T18:54:07.752804",
        "response_time": "2.55",
        "context": "{\"function_name\": \"replace_spaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 632,
        "solution": "===START===\ndef move_zero(num_list):\n    # Two-pointer approach to move zeroes to the end\n    non_zero_index = 0\n    \n    # First pass: Move all non-zero elements to the front\n    for i in range(len(num_list)):\n        if num_list[i] != 0:\n            num_list[non_zero_index] = num_list[i]\n            non_zero_index += 1\n    \n    # Second pass: Fill the remaining elements with zeroes\n    while non_zero_index < len(num_list):\n        num_list[non_zero_index] = 0\n        non_zero_index += 1\n    \n    return num_list\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to move all zeroes to the end of the given list.\n\n### Signature\ndef move_zero(num_list):",
        "timestamp": "2025-10-17T18:54:11.138492",
        "response_time": "3.38",
        "context": "{\"function_name\": \"move_zero\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 633,
        "solution": "===START===\ndef pair_xor_Sum(arr, n):\n    \"\"\"\n    Calculate the sum of XOR of all possible pairs in the given list\n    \n    Args:\n    arr (list): List of integers\n    n (int): Length of the list\n    \n    Returns:\n    int: Sum of XOR of all pairs\n    \"\"\"\n    # Initialize total sum to 0\n    total_xor_sum = 0\n    \n    # Iterate through all possible pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate XOR of current pair and add to total sum\n            total_xor_sum += arr[i] ^ arr[j]\n    \n    return total_xor_sum\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\n### Signature\ndef pair_xor_Sum(arr,n) :",
        "timestamp": "2025-10-17T18:54:14.947656",
        "response_time": "3.81",
        "context": "{\"function_name\": \"pair_xor_Sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 635,
        "solution": "===START===\ndef heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(iterable):\n    # Convert input to list if it's not already a list\n    arr = list(iterable)\n    n = len(arr)\n\n    # Build max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements from heap one by one\n    for i in range(n - 1, 0, -1):\n        # Move current root to end\n        arr[0], arr[i] = arr[i], arr[0]\n        \n        # Call max heapify on the reduced heap\n        heapify(arr, i, 0)\n\n    return arr\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to sort the given list.\n\n### Signature\ndef heap_sort(iterable):",
        "timestamp": "2025-10-17T18:54:19.266738",
        "response_time": "4.31",
        "context": "{\"function_name\": \"heap_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 637,
        "solution": "===START===\ndef noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss\n    \n    Args:\n        actual_cost (float): The original cost of the item\n        sale_amount (float): The selling price of the item\n    \n    Returns:\n        bool: True if there is no profit and no loss (sale_amount equals actual_cost), False otherwise\n    \"\"\"\n    return actual_cost == sale_amount\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check whether the given amount has no profit and no loss\n\n### Signature\ndef noprofit_noloss(actual_cost,sale_amount):",
        "timestamp": "2025-10-17T18:54:21.612466",
        "response_time": "2.34",
        "context": "{\"function_name\": \"noprofit_noloss\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 638,
        "solution": "===START===\nimport math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate wind chill index rounded to the next integer\n    \n    Args:\n    v (float): Wind velocity in kilometers per hour\n    t (float): Temperature in Celsius\n    \n    Returns:\n    int: Wind chill index rounded up to the next integer\n    \"\"\"\n    # Wind chill formula: 13.12 + (0.6215 * t) - (11.37 * v^0.16) + (0.3965 * t * v^0.16)\n    wind_chill_index = 13.12 + (0.6215 * t) - (11.37 * (v ** 0.16)) + (0.3965 * t * (v ** 0.16))\n    \n    # Round up to the next integer\n    return math.ceil(wind_chill_index)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n### Signature\ndef wind_chill(v,t):",
        "timestamp": "2025-10-17T18:54:25.178638",
        "response_time": "3.56",
        "context": "{\"function_name\": \"wind_chill\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 639,
        "solution": "===START===\ndef sample_nam(sample_names):\n    # Filter names that start with an uppercase letter\n    uppercase_names = [name for name in sample_names if name and name[0].isupper()]\n    \n    # Sum the lengths of the filtered names\n    return sum(len(name) for name in uppercase_names)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n### Signature\ndef sample_nam(sample_names):",
        "timestamp": "2025-10-17T18:54:27.197310",
        "response_time": "2.01",
        "context": "{\"function_name\": \"sample_nam\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 640,
        "solution": "===START===\nimport re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Remove parentheses and their contents from a given string.\n    \n    Args:\n        items (str): Input string containing parentheses\n    \n    Returns:\n        str: String with parentheses and their contents removed\n    \"\"\"\n    return re.sub(r'\\([^)]*\\)', '', items)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n\n### Signature\ndef remove_parenthesis(items):",
        "timestamp": "2025-10-17T18:54:29.332297",
        "response_time": "2.13",
        "context": "{\"function_name\": \"remove_parenthesis\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 641,
        "solution": "I'll solve this by implementing a function to find the nth nonagonal number. Nonagonal numbers are figurate numbers that extend the concept of triangular and square numbers to a nonagon (9-sided polygon).\n\nThe formula for the nth nonagonal number is: n * (7n - 5) / 2\n\n===START===\ndef is_nonagonal(n):\n    \"\"\"\n    Calculate the nth nonagonal number.\n    \n    Args:\n        n (int): The position of the nonagonal number to calculate.\n    \n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    return n * (7 * n - 5) // 2\n===END===\n\nThe function uses the standard formula for nonagonal numbers:\n1. Multiply n by (7n - 5)\n2. Divide the result by 2\n3. Use integer division (//) to ensure an integer result\n\nExamples:\n- is_nonagonal(1) = 1\n- is_nonagonal(2) = 9\n- is_nonagonal(3) = 24\n- is_nonagonal(4) = 46\n\nThe function efficiently calculates the nth nonagonal number for any positive integer n.",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the nth nonagonal number.\n\n### Signature\ndef is_nonagonal(n):",
        "timestamp": "2025-10-17T18:54:34.511520",
        "response_time": "5.17",
        "context": "{\"function_name\": \"is_nonagonal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 643,
        "solution": "===START===\ndef text_match_wordz_middle(text):\n    # Check if text is empty or None\n    if not text:\n        return False\n    \n    # Remove leading and trailing whitespace\n    text = text.strip()\n    \n    # Check if 'z' exists in the middle of the word\n    # Exclude first and last characters\n    if len(text) > 2:\n        return 'z' in text[1:-1]\n    \n    # If text is 2 characters or less, return False\n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\n### Signature\ndef text_match_wordz_middle(text):",
        "timestamp": "2025-10-17T18:54:38.456964",
        "response_time": "3.94",
        "context": "{\"function_name\": \"text_match_wordz_middle\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 644,
        "solution": "===START===\ndef reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Reverses the first k elements of the input array.\n    \n    Args:\n    input (list): The input array to be partially reversed\n    k (int): The position up to which the array should be reversed\n    \n    Returns:\n    list: The array with first k elements reversed\n    \"\"\"\n    # Check if k is valid \n    if k < 0 or k > len(input):\n        return input\n    \n    # Reverse the first k elements\n    left = 0\n    right = k - 1\n    \n    while left < right:\n        # Swap elements\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    \n    return input\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to reverse an array upto a given position.\n\n### Signature\ndef reverse_Array_Upto_K(input, k):",
        "timestamp": "2025-10-17T18:54:41.757434",
        "response_time": "3.30",
        "context": "{\"function_name\": \"reverse_Array_Upto_K\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 720,
        "solution": "===START===\ndef add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Add a dictionary to a tuple and return a new tuple.\n    \n    Args:\n        test_tup (tuple): The original tuple\n        test_dict (dict): The dictionary to be added\n    \n    Returns:\n        tuple: A new tuple containing the original tuple elements and the dictionary\n    \"\"\"\n    return test_tup + (test_dict,)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\n### Signature\ndef add_dict_to_tuple(test_tup, test_dict):",
        "timestamp": "2025-10-17T18:54:44.017256",
        "response_time": "2.26",
        "context": "{\"function_name\": \"add_dict_to_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 721,
        "solution": "===START===\ndef maxAverageOfPath(cost):\n    \"\"\"\n    Find the maximum average path from top-left to bottom-right of a square matrix\n    \n    Args:\n        cost (List[List[int]]): Square matrix representing cell costs\n    \n    Returns:\n        float: Maximum average path cost\n    \"\"\"\n    # Get matrix dimensions\n    n = len(cost)\n    \n    # Create DP table to store maximum path sums\n    dp = [[0] * n for _ in range(n)]\n    \n    # Initialize first cell\n    dp[0][0] = cost[0][0]\n    \n    # Initialize first row\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    # Initialize first column\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    # Fill DP table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # Compute path length (always n + n - 1 cells)\n    path_length = 2 * n - 1\n    \n    # Return maximum average\n    return dp[n-1][n-1] / path_length\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n### Signature\ndef maxAverageOfPath(cost):",
        "timestamp": "2025-10-17T18:54:49.342911",
        "response_time": "5.32",
        "context": "{\"function_name\": \"maxAverageOfPath\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 722,
        "solution": "===START===\ndef filter_data(students, h, w):\n    \"\"\"\n    Filter students based on minimum height and weight requirements.\n    \n    Args:\n    students (dict): Dictionary with student names as keys and (height, weight) tuples as values\n    h (float): Minimum height threshold\n    w (float): Minimum weight threshold\n    \n    Returns:\n    dict: Filtered dictionary of students meeting height and weight criteria\n    \"\"\"\n    return {name: measurements for name, measurements in students.items() \n            if measurements[0] >= h and measurements[1] >= w}\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\n### Signature\ndef filter_data(students,h,w):",
        "timestamp": "2025-10-17T18:54:51.859901",
        "response_time": "2.51",
        "context": "{\"function_name\": \"filter_data\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 723,
        "solution": "===START===\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    Count the number of indices where nums1 and nums2 have the same values.\n    \n    Args:\n        nums1 (list): First list of numbers\n        nums2 (list): Second list of numbers\n    \n    Returns:\n        int: Number of indices where values are the same\n    \"\"\"\n    # Check if lists are of equal length\n    if len(nums1) != len(nums2):\n        return 0\n    \n    # Count indices with same values using list comprehension\n    return sum(1 for i in range(len(nums1)) if nums1[i] == nums2[i])\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\n### Signature\ndef count_same_pair(nums1, nums2):",
        "timestamp": "2025-10-17T18:54:54.885521",
        "response_time": "3.02",
        "context": "{\"function_name\": \"count_same_pair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 724,
        "solution": "===START===\ndef power_base_sum(base, power):\n    # Calculate base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to easily iterate through digits\n    result_str = str(result)\n    \n    # Sum the digits by converting each character back to an integer\n    digit_sum = sum(int(digit) for digit in result_str)\n    \n    return digit_sum\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\n### Signature\ndef power_base_sum(base, power):",
        "timestamp": "2025-10-17T18:54:57.420492",
        "response_time": "2.53",
        "context": "{\"function_name\": \"power_base_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 725,
        "solution": "===START===\nimport re\n\ndef extract_quotation(text1):\n    # Use regex to find all strings enclosed in double quotes\n    matches = re.findall(r'\"([^\"]*)\"', text1)\n    \n    # Return the list of extracted strings\n    return matches\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to extract values between quotation marks \" \" of the given string.\n\n### Signature\ndef extract_quotation(text1):",
        "timestamp": "2025-10-17T18:54:59.274715",
        "response_time": "1.85",
        "context": "{\"function_name\": \"extract_quotation\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 726,
        "solution": "===START===\ndef multiply_elements(test_tup):\n    \"\"\"\n    Takes a tuple of numbers and returns a new tuple where each element \n    is the product of consecutive elements from the input tuple.\n    \n    Args:\n        test_tup (tuple): Input tuple of numbers\n    \n    Returns:\n        tuple: Tuple of products of consecutive elements\n    \"\"\"\n    # Create a new tuple by multiplying consecutive elements\n    return tuple(test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1))\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n### Signature\ndef multiply_elements(test_tup):",
        "timestamp": "2025-10-17T18:55:01.826314",
        "response_time": "2.55",
        "context": "{\"function_name\": \"multiply_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 728,
        "solution": "===START===\ndef sum_list(lst1, lst2):\n    \"\"\"\n    Takes two lists of equal length and returns a new list with element-wise sum.\n    \n    Args:\n        lst1 (list): First input list of numbers\n        lst2 (list): Second input list of numbers\n    \n    Returns:\n        list: A new list where each element is the sum of corresponding elements from lst1 and lst2\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n### Signature\ndef sum_list(lst1,lst2):",
        "timestamp": "2025-10-17T18:55:04.439172",
        "response_time": "2.61",
        "context": "{\"function_name\": \"sum_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 730,
        "solution": "===START===\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates from a given list.\n    \n    Args:\n        nums (list): Input list with potential consecutive duplicates\n    \n    Returns:\n        list: A new list with consecutive duplicates removed\n    \"\"\"\n    if not nums:\n        return []\n    \n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    \n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to remove consecutive duplicates of a given list.\n\n### Signature\ndef consecutive_duplicates(nums):",
        "timestamp": "2025-10-17T18:55:06.799530",
        "response_time": "2.35",
        "context": "{\"function_name\": \"consecutive_duplicates\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 731,
        "solution": "===START===\nimport math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n    \n    Args:\n    r (float): Radius of the base of the cone\n    h (float): Height of the cone\n    \n    Returns:\n    float: Lateral surface area of the cone\n    \"\"\"\n    # Lateral surface area of a cone = \u03c0 * r * slant height\n    # Slant height is calculated using Pythagorean theorem: sqrt(r^2 + h^2)\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    \n    return lateral_surface_area\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\n### Signature\ndef lateralsurface_cone(r,h):",
        "timestamp": "2025-10-17T18:55:10.441646",
        "response_time": "3.64",
        "context": "{\"function_name\": \"lateralsurface_cone\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 732,
        "solution": "===START===\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \n    Args:\n        text (str): Input string to be modified\n    \n    Returns:\n        str: Modified string with spaces, commas, and dots replaced by colons\n    \"\"\"\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\n### Signature\ndef replace_specialchar(text):",
        "timestamp": "2025-10-17T18:55:12.712202",
        "response_time": "2.27",
        "context": "{\"function_name\": \"replace_specialchar\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 733,
        "solution": "===START===\ndef find_first_occurrence(A, x):\n    \"\"\"\n    Find the index of the first occurrence of x in a sorted array A.\n    \n    Args:\n    A (list): A sorted array of integers\n    x (int): The target number to find\n    \n    Returns:\n    int: Index of the first occurrence of x, or -1 if x is not in the array\n    \"\"\"\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If x is found, check if it's the first occurrence\n        if A[mid] == x:\n            # If this is the first element or previous element is less than x\n            if mid == 0 or A[mid-1] < x:\n                return mid\n            # Otherwise, search in the left half\n            right = mid - 1\n        \n        # If x is less than mid element, search left half\n        elif x < A[mid]:\n            right = mid - 1\n        \n        # If x is greater than mid element, search right half\n        else:\n            left = mid + 1\n    \n    # x not found in the array\n    return -1\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\n### Signature\ndef find_first_occurrence(A, x):",
        "timestamp": "2025-10-17T18:55:17.259741",
        "response_time": "4.54",
        "context": "{\"function_name\": \"find_first_occurrence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 734,
        "solution": "===START===\ndef sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    # Iterate through all possible start indices\n    for start in range(n):\n        # Initialize product for current subarray\n        curr_prod = 1\n        \n        # Iterate through all possible end indices from start\n        for end in range(start, n):\n            # Multiply current element to the product\n            curr_prod *= arr[end]\n            \n            # Add current subarray's product to total sum\n            total_sum += curr_prod\n    \n    return total_sum\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\n### Signature\ndef sum_Of_Subarray_Prod(arr):",
        "timestamp": "2025-10-17T18:55:20.546684",
        "response_time": "3.28",
        "context": "{\"function_name\": \"sum_Of_Subarray_Prod\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 735,
        "solution": "===START===\ndef set_middle_bits(n):\n    # If number is less than 3, no middle bits to toggle\n    if n < 3:\n        return n\n    \n    # Find the number of bits in the number\n    num_bits = n.bit_length()\n    \n    # Create a mask to toggle middle bits\n    # 1 for first and last bit, 0 for middle bits\n    mask = (1 << (num_bits - 1)) | 1\n    \n    # Invert the mask to get 0 for first and last bit, 1 for middle bits\n    middle_mask = ~mask\n    \n    # XOR the number with middle mask to toggle middle bits\n    return n ^ (n & middle_mask)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\n### Signature\ndef set_middle_bits(n):",
        "timestamp": "2025-10-17T18:55:24.155371",
        "response_time": "3.60",
        "context": "{\"function_name\": \"toggle_middle_bits\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 736,
        "solution": "===START===\ndef left_insertion(a, x):\n    \"\"\"\n    Find the left insertion point for a value x in a sorted list a.\n    \n    Args:\n    a (list): A sorted list of elements\n    x: The value to find the insertion point for\n    \n    Returns:\n    int: The index where x should be inserted to maintain sorted order\n    \"\"\"\n    left, right = 0, len(a)\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return left\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\n### Signature\ndef left_insertion(a, x):",
        "timestamp": "2025-10-17T18:55:26.919116",
        "response_time": "2.76",
        "context": "{\"function_name\": \"left_insertion\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 737,
        "solution": "===START===\nimport re\n\ndef check_str(string):\n    # Regular expression pattern to match strings starting with a vowel (case-insensitive)\n    vowel_pattern = r'^[aeiou]'\n    \n    # Check if the string starts with a vowel using regex\n    if re.match(vowel_pattern, string, re.IGNORECASE):\n        return True\n    else:\n        return False\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\n### Signature\ndef check_str(string):",
        "timestamp": "2025-10-17T18:55:29.164003",
        "response_time": "2.24",
        "context": "{\"function_name\": \"check_str\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 738,
        "solution": "===START===\ndef geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1 terms.\n    \n    The geometric sum is defined as: 1 + 1/2 + 1/4 + 1/8 + ... + 1/(2^(n-1))\n    \n    Args:\n        n (int): Number of terms in the geometric sum\n    \n    Returns:\n        float: The geometric sum\n    \"\"\"\n    # Base case: if n is 0 or 1, return 1\n    if n <= 1:\n        return 1\n    \n    # Recursive calculation of geometric sum\n    return 1 + geometric_sum(n - 1) / 2\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\n### Signature\ndef geometric_sum(n):",
        "timestamp": "2025-10-17T18:55:32.490236",
        "response_time": "3.32",
        "context": "{\"function_name\": \"geometric_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 739,
        "solution": "===START===\ndef find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n    \n    A triangular number is calculated as T(k) = k * (k + 1) // 2\n    \n    Args:\n        n (int): Number of digits to find in triangular number\n    \n    Returns:\n        int: Index of the smallest triangular number with n digits\n    \"\"\"\n    k = 1\n    while True:\n        # Calculate triangular number\n        triangular_num = k * (k + 1) // 2\n        \n        # Check if triangular number has n digits\n        if len(str(triangular_num)) == n:\n            return k\n        \n        k += 1\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\n### Signature\ndef find_Index(n):",
        "timestamp": "2025-10-17T18:55:35.886637",
        "response_time": "3.39",
        "context": "{\"function_name\": \"find_Index\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 740,
        "solution": "===START===\ndef tuple_to_dict(test_tup):\n    \"\"\"\n    Convert a tuple to a dictionary using adjacent elements as key-value pairs.\n    \n    Args:\n        test_tup (tuple): Input tuple with elements to be converted to dictionary\n    \n    Returns:\n        dict: Dictionary with adjacent elements as key-value pairs\n    \"\"\"\n    # Use dictionary comprehension to create key-value pairs from adjacent elements\n    # Iterate through the tuple with step 2 to get keys and values\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup)-1, 2)}\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\n### Signature\ndef tuple_to_dict(test_tup):",
        "timestamp": "2025-10-17T18:55:39.447434",
        "response_time": "3.56",
        "context": "{\"function_name\": \"tuple_to_dict\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 741,
        "solution": "===START===\ndef all_Characters_Same(s):\n    # If string is empty or has only one character, return True\n    if len(s) <= 1:\n        return True\n    \n    # Compare first character with all other characters\n    first_char = s[0]\n    for char in s[1:]:\n        if char != first_char:\n            return False\n    \n    return True\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to check whether all the characters are same or not.\n\n### Signature\ndef all_Characters_Same(s) :",
        "timestamp": "2025-10-17T18:55:41.526190",
        "response_time": "2.07",
        "context": "{\"function_name\": \"all_Characters_Same\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 742,
        "solution": "===START===\nimport math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given the length of its side.\n    \n    Args:\n        side (float): Length of a side of the tetrahedron\n    \n    Returns:\n        float: Total surface area of the tetrahedron\n    \"\"\"\n    # Formula for surface area of a regular tetrahedron is sqrt(3) * side^2\n    area = math.sqrt(3) * (side ** 2)\n    return area\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to caluclate the area of a tetrahedron.\n\n### Signature\ndef area_tetrahedron(side):",
        "timestamp": "2025-10-17T18:55:44.051132",
        "response_time": "2.52",
        "context": "{\"function_name\": \"area_tetrahedron\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 743,
        "solution": "===START===\ndef rotate_right(list, m):\n    # If the list is empty or no rotation needed, return the original list\n    if not list or m == 0:\n        return list\n    \n    # Normalize the rotation amount to handle cases where m > list length\n    m = m % len(list)\n    \n    # Slice the list to perform right rotation\n    # Last m elements come first, followed by the remaining elements\n    return list[-m:] + list[:-m]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\n### Signature\ndef rotate_right(list, m):",
        "timestamp": "2025-10-17T18:55:47.016654",
        "response_time": "2.96",
        "context": "{\"function_name\": \"rotate_right\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 744,
        "solution": "===START===\ndef check_none(test_tup):\n    \"\"\"\n    Check if the given tuple has any None value.\n    \n    Args:\n        test_tup (tuple): Input tuple to check for None values\n    \n    Returns:\n        bool: True if tuple contains any None value, False otherwise\n    \"\"\"\n    return any(item is None for item in test_tup)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check if the given tuple has any none value or not.\n\n### Signature\ndef check_none(test_tup):",
        "timestamp": "2025-10-17T18:55:49.150559",
        "response_time": "2.13",
        "context": "{\"function_name\": \"check_none\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 745,
        "solution": "===START===\ndef divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        # Convert number to string to iterate through its digits\n        str_num = str(num)\n        \n        # Check divisibility for each non-zero digit\n        for digit in str_num:\n            # Convert digit back to integer\n            d = int(digit)\n            \n            # Skip zero to avoid division by zero\n            if d == 0:\n                continue\n            \n            # If number is not divisible by any of its digits, return False\n            if num % d != 0:\n                return False\n        \n        # If all non-zero digits divide the number, return True\n        return True\n    \n    # Return list of numbers in range that are divisible by their digits\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\n### Signature\ndef divisible_by_digits(startnum, endnum):",
        "timestamp": "2025-10-17T18:55:52.963061",
        "response_time": "3.81",
        "context": "{\"function_name\": \"divisible_by_digits\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 746,
        "solution": "===START===\nimport math\n\ndef sector_area(r, a):\n    # Check if angle is larger than 360 degrees\n    if a > 360:\n        return None\n    \n    # Convert angle to radians\n    angle_radians = math.radians(a)\n    \n    # Calculate sector area using formula: (r^2 * \u03b8) / 2\n    area = (r ** 2 * angle_radians) / 2\n    \n    return area\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\n### Signature\ndef sector_area(r,a):",
        "timestamp": "2025-10-17T18:55:55.407979",
        "response_time": "2.44",
        "context": "{\"function_name\": \"sector_area\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 747,
        "solution": "===START===\ndef lcs_of_three(X, Y, Z):\n    \"\"\"\n    Find the length of the Longest Common Subsequence (LCS) for three strings\n    \n    Args:\n    X (str): First input string\n    Y (str): Second input string \n    Z (str): Third input string\n    \n    Returns:\n    int: Length of the longest common subsequence\n    \"\"\"\n    # Get lengths of input strings\n    m, n, o = len(X), len(Y), len(Z)\n    \n    # Create 3D DP table initialized with zeros \n    # Dimensions are (m+1) x (n+1) x (o+1)\n    dp = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n    \n    # Build the DP table\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                # If characters match, increment LCS length\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                # If characters don't match, take max of previous states\n                else:\n                    dp[i][j][k] = max(\n                        dp[i-1][j][k], \n                        dp[i][j-1][k], \n                        dp[i][j][k-1]\n                    )\n    \n    # Return the length of LCS\n    return dp[m][n][o]\n===END===\n\nThe solution uses dynamic programming to solve the Longest Common Subsequence problem for three strings. Here's a breakdown:\n\n1. Create a 3D DP table to store LCS lengths\n2. Iterate through each character of the three strings\n3. If characters match, increment LCS length by 1\n4. If characters don't match, take the maximum of previous states\n5. Final cell dp[m][n][o] contains the length of the longest common subsequence\n\nTime Complexity: O(m*n*o), where m, n, o are lengths of input strings\nSpace Complexity: O(m*n*o) for the 3D DP table\n\nThe function returns the length of the longest common subsequence, not the actual subsequence itself.",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n### Signature\ndef lcs_of_three(X, Y, Z):",
        "timestamp": "2025-10-17T18:56:03.601957",
        "response_time": "8.19",
        "context": "{\"function_name\": \"lcs_of_three\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 748,
        "solution": "===START===\ndef capital_words_spaces(str1):\n    # If string is empty or None, return as is\n    if not str1:\n        return str1\n    \n    # Initialize result with the first character\n    result = str1[0]\n    \n    # Iterate through the string starting from the second character\n    for char in str1[1:]:\n        # If current character is uppercase, add a space before it\n        if char.isupper():\n            result += ' ' + char\n        else:\n            result += char\n    \n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to put spaces between words starting with capital letters in a given string.\n\n### Signature\ndef capital_words_spaces(str1):",
        "timestamp": "2025-10-17T18:56:06.347302",
        "response_time": "2.74",
        "context": "{\"function_name\": \"capital_words_spaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 749,
        "solution": "===START===\ndef sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a list of numeric strings numerically.\n    \n    Args:\n        nums_str (list): A list of strings representing numbers\n    \n    Returns:\n        list: A new list of numeric strings sorted in ascending order\n    \"\"\"\n    return sorted(nums_str, key=int)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n### Signature\ndef sort_numeric_strings(nums_str):",
        "timestamp": "2025-10-17T18:56:08.287137",
        "response_time": "1.93",
        "context": "{\"function_name\": \"sort_numeric_strings\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 750,
        "solution": "===START===\ndef add_tuple(test_list, test_tup):\n    \"\"\"\n    Add the given tuple to the given list.\n    \n    Args:\n        test_list (list): The original list to which the tuple will be added\n        test_tup (tuple): The tuple to be added to the list\n    \n    Returns:\n        list: A new list with the tuple added\n    \"\"\"\n    # Create a new list by extending the original list with the tuple\n    return test_list + list(test_tup)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to add the given tuple to the given list.\n\n### Signature\ndef add_tuple(test_list, test_tup):",
        "timestamp": "2025-10-17T18:56:10.858433",
        "response_time": "2.57",
        "context": "{\"function_name\": \"add_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 751,
        "solution": "===START===\ndef check_min_heap_helper(arr, i):\n    \"\"\"\n    Check if the given array represents a min heap.\n    \n    Args:\n    arr (list): The input array to check\n    i (int): Current index to start checking from\n    \n    Returns:\n    bool: True if the array represents a min heap, False otherwise\n    \"\"\"\n    n = len(arr)\n    \n    # Calculate left and right child indices\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # Check left child\n    if left < n:\n        # If parent is greater than left child, it violates min heap property\n        if arr[i] > arr[left]:\n            return False\n        \n        # Recursively check left subtree\n        if not check_min_heap_helper(arr, left):\n            return False\n    \n    # Check right child\n    if right < n:\n        # If parent is greater than right child, it violates min heap property\n        if arr[i] > arr[right]:\n            return False\n        \n        # Recursively check right subtree\n        if not check_min_heap_helper(arr, right):\n            return False\n    \n    # If we've reached here, this subtree satisfies min heap property\n    return True\n\ndef is_min_heap(arr):\n    \"\"\"\n    Wrapper function to check if the entire array represents a min heap.\n    \n    Args:\n    arr (list): The input array to check\n    \n    Returns:\n    bool: True if the array represents a min heap, False otherwise\n    \"\"\"\n    if not arr:\n        return True\n    \n    # Start checking from the root (index 0)\n    return check_min_heap_helper(arr, 0)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n### Signature\ndef check_min_heap_helper(arr, i):",
        "timestamp": "2025-10-17T18:56:17.314152",
        "response_time": "6.45",
        "context": "{\"function_name\": \"check_min_heap\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 752,
        "solution": "===START===\ndef jacobsthal_num(n):\n    \"\"\"\n    Calculate the nth Jacobsthal number.\n    \n    The Jacobsthal sequence is defined by the recurrence relation:\n    J(n) = J(n-1) + 2*J(n-2)\n    With initial conditions J(0) = 0, J(1) = 1\n    \n    Args:\n        n (int): The index of the Jacobsthal number to calculate (0-based)\n    \n    Returns:\n        int: The nth Jacobsthal number\n    \"\"\"\n    # Handle base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Initialize first two Jacobsthal numbers\n    a, b = 0, 1\n    \n    # Iterate to calculate nth Jacobsthal number\n    for _ in range(2, n + 1):\n        # Next number is calculated using the recurrence relation\n        a, b = b, b + 2 * a\n    \n    return b\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\n### Signature\ndef jacobsthal_num(n):",
        "timestamp": "2025-10-17T18:56:21.575156",
        "response_time": "4.26",
        "context": "{\"function_name\": \"jacobsthal_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 753,
        "solution": "I'll solve this problem by implementing the `min_k` function to find the minimum K records from a tuple list.\n\n===START===\ndef min_k(test_list, K):\n    # Sort the list based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    \n    # Return the first K elements from the sorted list\n    return sorted_list[:K]\n===END===\n\nThe solution follows these key steps:\n1. Use `sorted()` with a `key` function to sort the list of tuples based on the first element\n2. Use list slicing to return the first K elements from the sorted list\n\nThis implementation will:\n- Sort the tuples in ascending order based on their first element\n- Return the K smallest tuples from the sorted list\n- Work with lists of tuples where the first element is comparable\n- Handle cases where K is less than or equal to the list length\n\nThe time complexity is O(n log n) due to sorting, and space complexity is O(n) for creating the sorted list.",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n### Signature\ndef min_k(test_list, K):",
        "timestamp": "2025-10-17T18:56:26.783215",
        "response_time": "5.20",
        "context": "{\"function_name\": \"min_k\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 754,
        "solution": "===START===\ndef extract_index_list(l1, l2, l3):\n    \"\"\"\n    Find common elements from three lists that appear at the same index.\n    \n    Args:\n        l1 (list): First input list\n        l2 (list): Second input list\n        l3 (list): Third input list\n    \n    Returns:\n        list: A list of common elements at the same index across all three lists\n    \"\"\"\n    # Find the minimum length among the three lists to avoid index out of range\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Use list comprehension to find common elements at the same index\n    common_elements = [l1[i] for i in range(min_length) \n                       if l1[i] == l2[i] == l3[i]]\n    \n    return common_elements\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\n### Signature\ndef extract_index_list(l1, l2, l3):",
        "timestamp": "2025-10-17T18:56:30.416292",
        "response_time": "3.63",
        "context": "{\"function_name\": \"extract_index_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 755,
        "solution": "===START===\ndef second_smallest(numbers):\n    # Check if list has less than 2 elements\n    if len(numbers) < 2:\n        return None\n    \n    # Remove duplicates and sort the list\n    unique_sorted = sorted(set(numbers))\n    \n    # Check if there are at least 2 unique elements\n    if len(unique_sorted) < 2:\n        return None\n    \n    # Return the second element (which is the second smallest)\n    return unique_sorted[1]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the second smallest number in a list.\n\n### Signature\ndef second_smallest(numbers):",
        "timestamp": "2025-10-17T18:56:32.922437",
        "response_time": "2.50",
        "context": "{\"function_name\": \"second_smallest\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 756,
        "solution": "===START===\nimport re\n\ndef text_match_zero_one(text):\n    # Create a regex pattern that matches 'a' followed by one or more 'b's\n    pattern = r'ab+'\n    \n    # Use re.search to find if the pattern exists in the text\n    if re.search(pattern, text):\n        return True\n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\n### Signature\ndef text_match_zero_one(text):",
        "timestamp": "2025-10-17T18:56:35.249928",
        "response_time": "2.32",
        "context": "{\"function_name\": \"text_match_zero_one\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 757,
        "solution": "===START===\ndef count_reverse_pairs(test_list):\n    \"\"\"\n    Count the number of pairs of reverse strings in the given list.\n    \n    Args:\n    test_list (list): A list of strings\n    \n    Returns:\n    int: Number of pairs of reverse strings\n    \"\"\"\n    # Initialize pair count\n    pair_count = 0\n    \n    # Iterate through the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if current string is reverse of another string\n            if test_list[i] == test_list[j][::-1]:\n                pair_count += 1\n    \n    return pair_count\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\n### Signature\ndef count_reverse_pairs(test_list):",
        "timestamp": "2025-10-17T18:56:38.377614",
        "response_time": "3.12",
        "context": "{\"function_name\": \"count_reverse_pairs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 758,
        "solution": "===START===\ndef unique_sublists(list1):\n    # Create a dictionary to store unique sublists and their counts\n    count_dict = {}\n    \n    # Iterate through each element in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple (hashable)\n        sublist_tuple = tuple(sublist)\n        \n        # Increment the count for this sublist tuple\n        # If it doesn't exist, initialize to 1\n        count_dict[sublist_tuple] = count_dict.get(sublist_tuple, 0) + 1\n    \n    return count_dict\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n### Signature\ndef unique_sublists(list1):",
        "timestamp": "2025-10-17T18:56:41.012507",
        "response_time": "2.63",
        "context": "{\"function_name\": \"unique_sublists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 759,
        "solution": "===START===\nimport re\n\ndef is_decimal(num):\n    # Regular expression pattern to match decimal numbers with exactly 2 decimal places\n    pattern = r'^-?\\d+\\.\\d{2}$'\n    \n    # Check if the input matches the pattern\n    return bool(re.match(pattern, str(num)))\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\n### Signature\ndef is_decimal(num):",
        "timestamp": "2025-10-17T18:56:42.923201",
        "response_time": "1.90",
        "context": "{\"function_name\": \"is_decimal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 760,
        "solution": "===START===\ndef unique_Element(arr):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element.\n    \n    Args:\n        arr (list): A list of numbers to check\n    \n    Returns:\n        bool: True if all elements are the same, False otherwise\n    \"\"\"\n    # If the list is empty or has only one element, return True\n    if len(arr) <= 1:\n        return True\n    \n    # Compare first element with all other elements\n    first_element = arr[0]\n    return all(element == first_element for element in arr[1:])\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\n### Signature\ndef unique_Element(arr):",
        "timestamp": "2025-10-17T18:56:45.538032",
        "response_time": "2.61",
        "context": "{\"function_name\": \"unique_Element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 762,
        "solution": "===START===\ndef check_monthnumber_number(monthnum3):\n    # List of months with 30 days\n    thirty_day_months = [4, 6, 9, 11]\n    \n    # Check if the given month number is in the list of 30-day months\n    return monthnum3 in thirty_day_months\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n### Signature\ndef check_monthnumber_number(monthnum3):",
        "timestamp": "2025-10-17T18:56:47.315924",
        "response_time": "1.77",
        "context": "{\"function_name\": \"check_monthnumber_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 763,
        "solution": "===START===\ndef find_min_diff(arr, n):\n    # If array has less than 2 elements, return 0\n    if n < 2:\n        return 0\n    \n    # Sort the array first\n    arr.sort()\n    \n    # Initialize minimum difference with a large value\n    min_diff = float('inf')\n    \n    # Compare adjacent elements to find minimum difference\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\n### Signature\ndef find_min_diff(arr,n):",
        "timestamp": "2025-10-17T18:56:49.930275",
        "response_time": "2.61",
        "context": "{\"function_name\": \"find_min_diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 764,
        "solution": "===START===\ndef number_ctr(str):\n    \"\"\"\n    Count the number of digits in a given string.\n    \n    Args:\n        str (str): Input string to count digits from\n    \n    Returns:\n        int: Number of digits in the string\n    \"\"\"\n    return sum(char.isdigit() for char in str)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to count number of digits in a given string.\n\n### Signature\ndef number_ctr(str):",
        "timestamp": "2025-10-17T18:56:51.844011",
        "response_time": "1.91",
        "context": "{\"function_name\": \"number_ctr\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 765,
        "solution": "I'll solve this problem by implementing the function to find the nth polite number. Let me break this down and provide a solution.\n\n===START===\ndef is_polite(n):\n    \"\"\"\n    Find the nth polite number.\n    \n    A polite number is a positive integer that can be expressed as the sum of two or more consecutive positive integers.\n    \n    Args:\n        n (int): The position of the polite number to find\n    \n    Returns:\n        int: The nth polite number\n    \"\"\"\n    # Track polite numbers found\n    polite_count = 0\n    \n    # Start checking from 2 (first polite number)\n    current_num = 2\n    \n    while True:\n        # Check if current number is polite\n        is_current_polite = False\n        \n        # Try consecutive sums starting from different points\n        for start in range(1, current_num):\n            consecutive_sum = 0\n            consecutive_length = 0\n            consecutive_start = start\n            \n            # Sum consecutive integers\n            while consecutive_sum < current_num:\n                consecutive_sum += consecutive_start\n                consecutive_length += 1\n                consecutive_start += 1\n                \n                # If sum matches current number and uses at least 2 consecutive integers\n                if consecutive_sum == current_num and consecutive_length > 1:\n                    is_current_polite = True\n                    break\n            \n            if is_current_polite:\n                break\n        \n        # If current number is polite, increment count\n        if is_current_polite:\n            polite_count += 1\n            \n            # If we've found the nth polite number, return it\n            if polite_count == n:\n                return current_num\n        \n        # Move to next number\n        current_num += 1\n===END===\n\nThe implementation follows these key steps:\n1. Start checking numbers from 2 (the first polite number)\n2. For each number, try to express it as a sum of consecutive integers\n3. If a number can be expressed as a sum of at least 2 consecutive integers, it's polite\n4. Keep track of how many polite numbers have been found\n5. When the nth polite number is found, return it\n\nThe function handles finding the nth polite number efficiently by:\n- Checking each number systematically\n- Using nested loops to find consecutive integer sums\n- Stopping and returning when the nth polite number is discovered\n\nTime complexity is O(n * m), where n is the position of the polite number and m is the current number being checked.\n\nExample polite numbers: \n- 5 (2+3)\n- 6 (1+2+3)\n- 7 (3+4)\n- 9 (2+3+4)\n- 10 (1+2+3+4)\n\nThe function will return the nth such number based on the input.",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\n### Signature\ndef is_polite(n):",
        "timestamp": "2025-10-17T18:57:03.132513",
        "response_time": "11.28",
        "context": "{\"function_name\": \"is_polite\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 766,
        "solution": "===START===\ndef pair_wise(l1):\n    \"\"\"\n    Returns a list of pairs of consecutive items from the input list.\n    \n    Args:\n        l1 (list): Input list of items\n    \n    Returns:\n        list: List of tuples containing consecutive pairs\n    \"\"\"\n    # If list is empty or has only one item, return empty list\n    if len(l1) < 2:\n        return []\n    \n    # Use list comprehension to create pairs of consecutive items\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to return a list of all pairs of consecutive items in a given list.\n\n### Signature\ndef pair_wise(l1):",
        "timestamp": "2025-10-17T18:57:06.250855",
        "response_time": "3.11",
        "context": "{\"function_name\": \"pair_wise\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 767,
        "solution": "===START===\ndef get_pairs_count(arr, sum):\n    \"\"\"\n    Count the number of pairs in the array that add up to the given sum.\n    \n    Args:\n    arr (list): List of integers\n    sum (int): Target sum\n    \n    Returns:\n    int: Number of pairs that sum up to the target sum\n    \"\"\"\n    # Create a dictionary to store frequency of numbers\n    num_frequency = {}\n    \n    # Counter for pairs\n    pair_count = 0\n    \n    # Iterate through the array\n    for num in arr:\n        # Check if the complement (sum - num) exists in the dictionary\n        complement = sum - num\n        \n        # If complement exists, add its frequency to pair count\n        if complement in num_frequency:\n            pair_count += num_frequency[complement]\n        \n        # Increment the frequency of current number\n        num_frequency[num] = num_frequency.get(num, 0) + 1\n    \n    return pair_count\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\n### Signature\ndef get_pairs_count(arr, sum):",
        "timestamp": "2025-10-17T18:57:10.263128",
        "response_time": "4.01",
        "context": "{\"function_name\": \"get_pairs_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 769,
        "solution": "===START===\ndef Diff(li1, li2):\n    \"\"\"\n    Returns a list containing elements that are in li1 but not in li2.\n    \n    Args:\n        li1 (list): First input list\n        li2 (list): Second input list\n    \n    Returns:\n        list: Elements from li1 that are not present in li2\n    \"\"\"\n    return list(set(li1) - set(li2))\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to get the difference between two lists.\n\n### Signature\ndef Diff(li1,li2):",
        "timestamp": "2025-10-17T18:57:12.547695",
        "response_time": "2.28",
        "context": "{\"function_name\": \"Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 770,
        "solution": "===START===\ndef odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of fourth power of first n odd natural numbers.\n    \n    Args:\n        n (int): Number of odd natural numbers to consider\n    \n    Returns:\n        int: Sum of fourth powers of first n odd natural numbers\n    \"\"\"\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate through first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add fourth power of current odd number to total sum\n        total_sum += i**4\n    \n    return total_sum\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\n### Signature\ndef odd_num_sum(n) :",
        "timestamp": "2025-10-17T18:57:15.304116",
        "response_time": "2.75",
        "context": "{\"function_name\": \"odd_num_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 771,
        "solution": "===START===\ndef check_expression(exp):\n    # Create a stack to keep track of opening brackets\n    stack = []\n    \n    # Dictionary to map closing brackets to their corresponding opening brackets\n    brackets = {')': '(', '}': '{', ']': '['}\n    \n    # Iterate through each character in the expression\n    for char in exp:\n        # If character is a closing bracket\n        if char in brackets:\n            # If stack is empty or top of stack doesn't match corresponding opening bracket\n            if not stack or stack[-1] != brackets[char]:\n                return False\n            # Remove the matching opening bracket from stack\n            stack.pop()\n        \n        # If character is an opening bracket, push to stack\n        elif char in '({[':\n            stack.append(char)\n    \n    # Expression is balanced only if stack is empty at the end\n    return len(stack) == 0\n\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\n### Signature\ndef check_expression(exp):",
        "timestamp": "2025-10-17T18:57:19.475423",
        "response_time": "4.17",
        "context": "{\"function_name\": \"check_expression\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 772,
        "solution": "===START===\ndef remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    \n    # Filter out words with length K\n    filtered_words = [word for word in words if len(word) != K]\n    \n    # Join the filtered words back into a string\n    return ' '.join(filtered_words)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to remove all the words with k length in the given string.\n\n### Signature\ndef remove_length(test_str, K):",
        "timestamp": "2025-10-17T18:57:21.352803",
        "response_time": "1.87",
        "context": "{\"function_name\": \"remove_length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 773,
        "solution": "===START===\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Find the occurrence and position of substrings within a string.\n    \n    Args:\n        text (str): The main string to search in\n        pattern (str): The substring to search for\n    \n    Returns:\n        list or None: A list of tuples containing (start_index, end_index) of substring matches,\n                      or None if no matches are found\n    \"\"\"\n    # If pattern is empty or text is empty, return None\n    if not pattern or not text:\n        return None\n    \n    # Store all matches\n    matches = []\n    \n    # Iterate through the text to find all occurrences\n    start_index = 0\n    while True:\n        # Find the next occurrence of the pattern\n        index = text.find(pattern, start_index)\n        \n        # If no more matches are found, break the loop\n        if index == -1:\n            break\n        \n        # Add the match with start and end indices\n        matches.append((index, index + len(pattern)))\n        \n        # Update start index to continue searching after the last match\n        start_index = index + 1\n    \n    # Return matches if found, otherwise return None\n    return matches if matches else None\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n### Signature\ndef occurance_substring(text,pattern):",
        "timestamp": "2025-10-17T18:57:26.615509",
        "response_time": "5.26",
        "context": "{\"function_name\": \"occurance_substring\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 775,
        "solution": "===START===\ndef odd_position(nums):\n    # Check if the list is empty or has less than 2 elements\n    if len(nums) < 2:\n        return False\n    \n    # Iterate through odd indices (1, 3, 5, ...)\n    for i in range(1, len(nums), 2):\n        # Check if the number at odd index is even\n        if nums[i] % 2 == 0:\n            return False\n    \n    # If all odd indices contain odd numbers\n    return True\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\n### Signature\ndef odd_position(nums):",
        "timestamp": "2025-10-17T18:57:29.269858",
        "response_time": "2.65",
        "context": "{\"function_name\": \"odd_position\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 776,
        "solution": "===START===\ndef count_vowels(test_str):\n    # Define vowels\n    vowels = 'aeiouAEIOU'\n    \n    # Initialize count\n    count = 0\n    \n    # Iterate through the string with index\n    for i in range(len(test_str)):\n        # Check if current character is not a vowel\n        if test_str[i] not in vowels:\n            # Check left neighbor (if not first character)\n            if i > 0 and test_str[i-1] in vowels:\n                count += 1\n            # Check right neighbor (if not last character)\n            elif i < len(test_str) - 1 and test_str[i+1] in vowels:\n                count += 1\n    \n    return count\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\n### Signature\ndef count_vowels(test_str):",
        "timestamp": "2025-10-17T18:57:32.441892",
        "response_time": "3.17",
        "context": "{\"function_name\": \"count_vowels\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 777,
        "solution": "===START===\ndef find_sum(arr):\n    # Use set to remove duplicates and sum the unique elements\n    return sum(set(arr))\n===END===\n\nThe solution works as follows:\n1. `set(arr)` converts the input list to a set, which automatically removes any duplicate elements\n2. `sum()` function calculates the sum of the unique elements in the set\n3. The function returns the sum of non-repeated elements in the given list\n\nFor example:\n- `find_sum([1, 2, 3, 4, 1, 2])` would return 10 (1+2+3+4)\n- `find_sum([1, 1, 1, 1])` would return 1\n- `find_sum([])` would return 0\n\nThe solution handles various input scenarios:\n- Lists with duplicates\n- Lists with all unique elements \n- Empty lists\n- Lists with different data types (if they are hashable)",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the sum of non-repeated elements in a given list.\n\n### Signature\ndef find_sum(arr):",
        "timestamp": "2025-10-17T18:57:37.072913",
        "response_time": "4.62",
        "context": "{\"function_name\": \"find_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 778,
        "solution": "===START===\ndef pack_consecutive_duplicates(list1):\n    # If the list is empty, return an empty list\n    if not list1:\n        return []\n    \n    # Initialize result list and current sublist with first element\n    result = []\n    current_sublist = [list1[0]]\n    \n    # Iterate through the list starting from the second element\n    for item in list1[1:]:\n        # If current item matches the last item in current sublist, append to current sublist\n        if item == current_sublist[-1]:\n            current_sublist.append(item)\n        # If different, add current sublist to result and start a new sublist\n        else:\n            result.append(current_sublist)\n            current_sublist = [item]\n    \n    # Add the last sublist to result\n    result.append(current_sublist)\n    \n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\n### Signature\ndef pack_consecutive_duplicates(list1):",
        "timestamp": "2025-10-17T18:57:40.843759",
        "response_time": "3.77",
        "context": "{\"function_name\": \"pack_consecutive_duplicates\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 779,
        "solution": "===START===\ndef unique_sublists(list1):\n    # Create a dictionary to store unique sublists and their counts\n    sublist_counts = {}\n    \n    # Iterate through each element in the input list\n    for item in list1:\n        # Check if the item is a list\n        if isinstance(item, list):\n            # Convert the list to a tuple (hashable)\n            item_tuple = tuple(item)\n            \n            # Update the count in the dictionary\n            # If the tuple is not in the dictionary, initialize its count to 1\n            # If it's already in the dictionary, increment its count\n            sublist_counts[item_tuple] = sublist_counts.get(item_tuple, 0) + 1\n    \n    return sublist_counts\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\n### Signature\ndef unique_sublists(list1):",
        "timestamp": "2025-10-17T18:57:44.105685",
        "response_time": "3.26",
        "context": "{\"function_name\": \"unique_sublists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 780,
        "solution": "===START===\nfrom itertools import combinations\n\ndef find_combinations(test_list):\n    # Create a list to store the result combinations\n    result = []\n    \n    # Generate all possible combinations of 2 tuples from the input list\n    for combo in combinations(test_list, 2):\n        # Calculate the sum of corresponding elements in the two tuples\n        sum_tuple = tuple(a + b for a, b in zip(combo[0], combo[1]))\n        \n        # Add the combination and its sum to the result list\n        result.append((combo[0], combo[1], sum_tuple))\n    \n    return result\n===END===\n\n# The function works as follows:\n# 1. It uses itertools.combinations to generate all possible 2-tuple combinations from the input list\n# 2. For each combination, it calculates the element-wise sum using zip and list comprehension\n# 3. It creates a result tuple containing the original two tuples and their sum\n# 4. Returns a list of all such combinations with their sums\n\n# Example usage:\n# test_list = [(1, 2), (3, 4), (5, 6)]\n# print(find_combinations(test_list))\n# Output would be: [((1, 2), (3, 4), (4, 6)), ((1, 2), (5, 6), (6, 8)), ((3, 4), (5, 6), (8, 10))]",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\n### Signature\ndef find_combinations(test_list):",
        "timestamp": "2025-10-17T18:57:49.999235",
        "response_time": "5.89",
        "context": "{\"function_name\": \"find_combinations\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 781,
        "solution": "===START===\ndef count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors for a given number is even or not.\n    \n    Args:\n        n (int): The number to check divisors for\n    \n    Returns:\n        bool: True if the count of divisors is even, False otherwise\n    \"\"\"\n    # Count the number of divisors\n    divisor_count = 0\n    \n    # Iterate from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # If i divides n without remainder, it's a divisor\n        if n % i == 0:\n            divisor_count += 1\n    \n    # Return True if divisor count is even, False otherwise\n    return divisor_count % 2 == 0\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\n### Signature\ndef count_divisors(n) :",
        "timestamp": "2025-10-17T18:57:53.527565",
        "response_time": "3.52",
        "context": "{\"function_name\": \"count_divisors\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 782,
        "solution": "===START===\ndef odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    # Iterate through all possible odd length subarrays\n    for i in range(n):\n        for length in range(1, n - i + 1, 2):\n            # Calculate sum of current subarray\n            subarray_sum = sum(arr[i:i+length])\n            total_sum += subarray_sum\n    \n    return total_sum\n===END===\n\nThe solution works as follows:\n1. The function takes an input array `arr`\n2. Initialize `total_sum` to store the sum of all odd length subarrays\n3. Use nested loops to generate all possible odd length subarrays:\n   - Outer loop `i` represents the starting index of subarrays\n   - Inner loop `length` generates odd lengths (1, 3, 5, etc.)\n4. For each subarray:\n   - Calculate the sum using `sum(arr[i:i+length])`\n   - Add this sum to `total_sum`\n5. Return the final `total_sum`\n\nTime complexity is O(n^2), where n is the length of the input array.\nSpace complexity is O(1) as we're not using any extra space proportional to input size.\n\nExample:\n- For input [1, 4, 2, 5, 3]\n- Odd length subarrays include: \n  [1], [4], [2], [5], [3]\n  [1,4,2], [4,2,5], [2,5,3]\n  [1,4,2,5,3]\n- The function will sum all these subarrays",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\n### Signature\ndef odd_length_sum(arr):",
        "timestamp": "2025-10-17T18:58:00.328261",
        "response_time": "6.80",
        "context": "{\"function_name\": \"odd_length_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 783,
        "solution": "===START===\ndef rgb_to_hsv(r, g, b):\n    # Normalize RGB values to range 0-1\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # Find maximum and minimum values\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    \n    # Calculate hue\n    if diff == 0:\n        h = 0\n    elif cmax == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif cmax == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    else:\n        h = (60 * ((r - g) / diff) + 240) % 360\n    \n    # Calculate saturation\n    if cmax == 0:\n        s = 0\n    else:\n        s = (diff / cmax) * 100\n    \n    # Calculate value\n    v = cmax * 100\n    \n    return (h, s, v)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n### Signature\ndef rgb_to_hsv(r, g, b):",
        "timestamp": "2025-10-17T18:58:04.436961",
        "response_time": "4.10",
        "context": "{\"function_name\": \"rgb_to_hsv\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 784,
        "solution": "===START===\ndef mul_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return None\n    \n    return first_even * first_odd\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find the product of first even and odd number of a given list.\n\n### Signature\ndef mul_even_odd(list1):",
        "timestamp": "2025-10-17T18:58:07.008858",
        "response_time": "2.57",
        "context": "{\"function_name\": \"mul_even_odd\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 785,
        "solution": "===START===\ndef tuple_str_int(test_str):\n    # Remove parentheses and split the string by comma\n    # Strip whitespace from each element and convert to integer\n    return tuple(int(x.strip()) for x in test_str.strip('()').split(','))\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to convert tuple string to integer tuple.\n\n### Signature\ndef tuple_str_int(test_str):",
        "timestamp": "2025-10-17T18:58:08.957006",
        "response_time": "1.94",
        "context": "{\"function_name\": \"tuple_str_int\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 786,
        "solution": "===START===\ndef right_insertion(a, x):\n    \"\"\"\n    Find the rightmost index where x can be inserted in the sorted list a \n    while maintaining the sorted order.\n    \n    Args:\n        a (list): A sorted list of comparable elements\n        x: The value to find the insertion point for\n    \n    Returns:\n        int: The index where x should be inserted to maintain sorted order\n    \"\"\"\n    left, right = 0, len(a)\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if x >= a[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return left\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\n### Signature\ndef right_insertion(a, x):",
        "timestamp": "2025-10-17T18:58:11.950338",
        "response_time": "2.99",
        "context": "{\"function_name\": \"right_insertion\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 787,
        "solution": "===START===\nimport re\n\ndef text_match_three(text):\n    # Create a regex pattern that matches 'a' followed by exactly three 'b's\n    pattern = r'ab{3}'\n    \n    # Use re.search to find if the pattern exists in the text\n    if re.search(pattern, text):\n        return True\n    return False\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by three 'b'.\n\n### Signature\ndef text_match_three(text):",
        "timestamp": "2025-10-17T18:58:14.181482",
        "response_time": "2.23",
        "context": "{\"function_name\": \"text_match_three\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 788,
        "solution": "===START===\ndef new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple by combining the given list and string.\n    \n    Args:\n        test_list (list): Input list to be combined\n        test_str (str): Input string to be combined\n    \n    Returns:\n        tuple: A new tuple containing elements from the list and the string\n    \"\"\"\n    return tuple(test_list + [test_str])\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to create a new tuple from the given string and list.\n\n### Signature\ndef new_tuple(test_list, test_str):",
        "timestamp": "2025-10-17T18:58:16.729015",
        "response_time": "2.54",
        "context": "{\"function_name\": \"new_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 790,
        "solution": "===START===\ndef even_position(nums):\n    # Iterate through the list using even indices (0, 2, 4, ...)\n    for i in range(0, len(nums), 2):\n        # Check if the number at the even index is odd\n        if nums[i] % 2 != 0:\n            # If any number at an even index is odd, return False\n            return False\n    \n    # If all numbers at even indices are even, return True\n    return True\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to check whether every even index contains even numbers of a given list.\n\n### Signature\ndef even_position(nums):",
        "timestamp": "2025-10-17T18:58:19.204297",
        "response_time": "2.47",
        "context": "{\"function_name\": \"even_position\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 791,
        "solution": "===START===\ndef remove_nested(test_tup):\n    \"\"\"\n    Remove nested tuples from the given tuple.\n    \n    Args:\n        test_tup (tuple): Input tuple that may contain nested tuples\n    \n    Returns:\n        tuple: A new tuple with only non-tuple elements\n    \"\"\"\n    return tuple(item for item in test_tup if not isinstance(item, tuple))\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to remove tuples from the given tuple.\n\n### Signature\ndef remove_nested(test_tup):",
        "timestamp": "2025-10-17T18:58:21.477414",
        "response_time": "2.27",
        "context": "{\"function_name\": \"remove_nested\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 792,
        "solution": "===START===\ndef count_list(input_list):\n    \"\"\"\n    Count the number of lists within the given input list.\n    \n    Args:\n        input_list (list): A list that may contain nested lists\n    \n    Returns:\n        int: Number of lists found in the input list\n    \"\"\"\n    # Initialize a counter for lists\n    list_count = 0\n    \n    # Iterate through each item in the input list\n    for item in input_list:\n        # Check if the item is a list\n        if isinstance(item, list):\n            list_count += 1\n    \n    return list_count\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to count the number of lists in a given number of lists.\n\n### Signature\ndef count_list(input_list):",
        "timestamp": "2025-10-17T18:58:24.179210",
        "response_time": "2.70",
        "context": "{\"function_name\": \"count_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 793,
        "solution": "===START===\ndef last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n    \n    Args:\n    arr (list): A sorted array of elements\n    x: The element to find the last position of\n    \n    Returns:\n    int: The index of the last occurrence of x, or -1 if not found\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    # Initialize result as -1\n    result = -1\n    \n    # Binary search to find the last occurrence\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If x is found, update result and search in right half\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        \n        # If x is greater, search in right half\n        elif arr[mid] < x:\n            left = mid + 1\n        \n        # If x is smaller, search in left half\n        else:\n            right = mid - 1\n    \n    return result\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the last position of an element in a sorted array.\n\n### Signature\ndef last(arr,x):",
        "timestamp": "2025-10-17T18:58:28.398014",
        "response_time": "4.21",
        "context": "{\"function_name\": \"last\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 794,
        "solution": "===START===\nimport re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n### Signature\ndef text_starta_endb(text):",
        "timestamp": "2025-10-17T18:58:30.268929",
        "response_time": "1.86",
        "context": "{\"function_name\": \"text_starta_endb\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 796,
        "solution": "===START===\ndef return_sum(dict):\n    \"\"\"\n    Calculate the sum of all values in the given dictionary.\n    \n    Args:\n        dict (dict): Input dictionary with numeric values\n    \n    Returns:\n        int or float: Sum of all values in the dictionary\n    \"\"\"\n    return sum(dict.values())\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite function to find the sum of all items in the given dictionary.\n\n### Signature\ndef return_sum(dict):",
        "timestamp": "2025-10-17T18:58:32.200307",
        "response_time": "1.92",
        "context": "{\"function_name\": \"return_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 797,
        "solution": "===START===\ndef sum_odd(l, r):\n    \"\"\"\n    Calculate the sum of all odd natural numbers within the given range [l, r].\n    \n    Args:\n    l (int): Lower bound of the range (inclusive)\n    r (int): Upper bound of the range (inclusive)\n    \n    Returns:\n    int: Sum of all odd natural numbers in the range\n    \"\"\"\n    # Find the first odd number in the range\n    start = l if l % 2 != 0 else l + 1\n    \n    # Find the last odd number in the range\n    end = r if r % 2 != 0 else r - 1\n    \n    # Calculate the number of odd numbers in the range\n    count = (end - start) // 2 + 1\n    \n    # Use arithmetic progression sum formula\n    # Sum = n(a1 + an)/2, where n is count of numbers, a1 is first term, an is last term\n    return count * (start + end) // 2\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\n### Signature\ndef sum_odd(n):",
        "timestamp": "2025-10-17T18:58:36.441582",
        "response_time": "4.24",
        "context": "{\"function_name\": \"sum_in_range\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 798,
        "solution": "===START===\ndef _sum(arr):\n    \"\"\"\n    Calculate the sum of all elements in the given array.\n    \n    Args:\n        arr (list): A list of numbers to be summed\n    \n    Returns:\n        int/float: The total sum of all elements in the array\n    \"\"\"\n    # Initialize sum to 0\n    total = 0\n    \n    # Iterate through each element in the array and add to total\n    for num in arr:\n        total += num\n    \n    return total\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the sum of an array.\n\n### Signature\ndef _sum(arr):",
        "timestamp": "2025-10-17T18:58:38.791605",
        "response_time": "2.34",
        "context": "{\"function_name\": \"_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 799,
        "solution": "===START===\ndef left_rotate(n, d):\n    # Ensure d is within 0-31 range for 32-bit integer\n    d = d % 32\n    \n    # Left shift by d bits\n    left_shifted = (n << d) \n    \n    # Right shift by (32-d) to bring the overflowed bits to right\n    right_shifted = n >> (32 - d)\n    \n    # Combine using bitwise OR and mask to 32 bits\n    return ((left_shifted | right_shifted) & 0xFFFFFFFF)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n### Signature\ndef left_rotate(n,d):",
        "timestamp": "2025-10-17T18:58:41.844335",
        "response_time": "3.04",
        "context": "{\"function_name\": \"left_rotate\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 800,
        "solution": "===START===\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all whitespaces from the given string.\n    \n    Args:\n        text (str): Input string that may contain whitespaces\n    \n    Returns:\n        str: String with all whitespaces removed\n    \"\"\"\n    return text.replace(\" \", \"\")\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to remove all whitespaces from a string.\n\n### Signature\ndef remove_all_spaces(text):",
        "timestamp": "2025-10-17T18:58:44.099736",
        "response_time": "2.25",
        "context": "{\"function_name\": \"remove_all_spaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 801,
        "solution": "===START===\ndef test_three_equal(x, y, z):\n    # Count how many of the three numbers are equal to each other\n    if x == y == z:\n        # All three numbers are equal\n        return 3\n    elif x == y or y == z or x == z:\n        # Two numbers are equal\n        return 2\n    else:\n        # No numbers are equal\n        return 0\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to count the number of equal numbers from three given integers.\n\n### Signature\ndef test_three_equal(x,y,z):",
        "timestamp": "2025-10-17T18:58:46.236580",
        "response_time": "2.13",
        "context": "{\"function_name\": \"test_three_equal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 802,
        "solution": "===START===\ndef count_rotation(arr):\n    \"\"\"\n    Count the number of rotations required to generate a sorted array.\n    \n    Args:\n    arr (list): Input list of integers\n    \n    Returns:\n    int: Number of rotations needed to sort the array\n    \"\"\"\n    # If array is empty or has only one element, no rotations needed\n    if len(arr) <= 1:\n        return 0\n    \n    # Find the index of the minimum element \n    # This will be the number of rotations\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            return i + 1\n    \n    # If array is already sorted, return 0\n    return 0\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n### Signature\ndef count_rotation(arr):",
        "timestamp": "2025-10-17T18:58:49.806422",
        "response_time": "3.56",
        "context": "{\"function_name\": \"count_rotation\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 803,
        "solution": "===START===\nimport math\n\ndef is_perfect_square(n):\n    # If n is negative, it cannot be a perfect square\n    if n < 0:\n        return False\n    \n    # Find the square root of n\n    root = int(math.sqrt(n))\n    \n    # Check if the square of the root equals the original number\n    return root * root == n\n===END===\n\nThe solution works as follows:\n1. First, check if the number is negative. Negative numbers cannot be perfect squares.\n2. Use `math.sqrt()` to find the square root of the number and convert it to an integer.\n3. Check if the square of the integer root is exactly equal to the original number.\n4. If they are equal, it means the number is a perfect square, so return True.\n5. Otherwise, return False.\n\nExamples:\n- `is_perfect_square(16)` returns `True` (4 * 4 = 16)\n- `is_perfect_square(14)` returns `False`\n- `is_perfect_square(0)` returns `True` (0 * 0 = 0)\n- `is_perfect_square(-4)` returns `False`\n\nThe time complexity is O(1) as it uses a direct square root calculation.",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\n### Signature\ndef is_perfect_square(n) :",
        "timestamp": "2025-10-17T18:58:55.078078",
        "response_time": "5.26",
        "context": "{\"function_name\": \"is_perfect_square\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 804,
        "solution": "===START===\ndef is_product_even(arr):\n    # If the list is empty, return False\n    if not arr:\n        return False\n    \n    # Initialize product as 1\n    product = 1\n    \n    # Multiply all numbers in the list\n    for num in arr:\n        product *= num\n    \n    # Check if the product is even (divisible by 2 with no remainder)\n    return product % 2 == 0\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check whether the product of numbers in a list is even or not.\n\n### Signature\ndef is_product_even(arr):",
        "timestamp": "2025-10-17T18:58:57.459437",
        "response_time": "2.37",
        "context": "{\"function_name\": \"is_product_even\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 805,
        "solution": "===START===\ndef max_sum_list(lists):\n    \"\"\"\n    Returns the list with the highest sum of elements from a list of lists.\n    \n    Args:\n        lists (list): A list containing multiple lists of numbers\n    \n    Returns:\n        list: The list with the maximum sum of elements\n    \"\"\"\n    if not lists:\n        return None\n    \n    return max(lists, key=sum)\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\n### Signature\ndef max_sum_list(lists):",
        "timestamp": "2025-10-17T18:58:59.751091",
        "response_time": "2.28",
        "context": "{\"function_name\": \"max_sum_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 806,
        "solution": "===START===\ndef max_run_uppercase(test_str):\n    \"\"\"\n    Find the maximum run of consecutive uppercase characters in the given string.\n    \n    Args:\n        test_str (str): Input string to check for uppercase runs\n    \n    Returns:\n        int: Length of the longest consecutive uppercase character run\n    \"\"\"\n    if not test_str:\n        return 0\n    \n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    \n    return max_run\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to find maximum run of uppercase characters in the given string.\n\n### Signature\ndef max_run_uppercase(test_str):",
        "timestamp": "2025-10-17T18:59:02.607567",
        "response_time": "2.85",
        "context": "{\"function_name\": \"max_run_uppercase\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 807,
        "solution": "===START===\ndef first_odd(nums):\n    \"\"\"\n    Find and return the first odd number in the given list of numbers.\n    \n    Args:\n        nums (list): A list of numbers to search through\n    \n    Returns:\n        int or None: The first odd number found, or None if no odd number exists\n    \"\"\"\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a python function to find the first odd number in a given list of numbers.\n\n### Signature\ndef first_odd(nums):",
        "timestamp": "2025-10-17T18:59:04.761606",
        "response_time": "2.15",
        "context": "{\"function_name\": \"first_odd\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 808,
        "solution": "===START===\ndef check_K(test_tup, K):\n    \"\"\"\n    Check if the given tuple contains the value K.\n    \n    Args:\n        test_tup (tuple): The input tuple to search\n        K (any): The value to search for in the tuple\n    \n    Returns:\n        bool: True if K is in the tuple, False otherwise\n    \"\"\"\n    return K in test_tup\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check if the given tuples contain the k or not.\n\n### Signature\ndef check_K(test_tup, K):",
        "timestamp": "2025-10-17T18:59:06.814068",
        "response_time": "2.05",
        "context": "{\"function_name\": \"check_K\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
        "dataset_row_id": 809,
        "solution": "===START===\ndef check_smaller(test_tup1, test_tup2):\n    # Check if tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        return False\n    \n    # Compare each element of test_tup2 with corresponding element in test_tup1\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    # If all elements in test_tup2 are smaller than corresponding elements in test_tup1\n    return True\n===END===",
        "llm_name": "anthropic/claude-3.5-haiku",
        "prompt": "### Prompt\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n### Signature\ndef check_smaller(test_tup1, test_tup2):",
        "timestamp": "2025-10-17T18:59:10.073514",
        "response_time": "3.25",
        "context": "{\"function_name\": \"check_smaller\"}"
    }
]