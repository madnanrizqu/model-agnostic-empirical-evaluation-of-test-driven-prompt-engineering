[
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 425,
        "solution": "```python\ndef count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the number of sublists containing a particular element.\n\n### Signature\ndef count_element_in_list(list1, x):\n\n### Test\nassert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
        "timestamp": "2025-10-17T16:58:11.773306",
        "response_time": "1.64",
        "context": "{\"function_name\": \"count_element_in_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 426,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to filter odd numbers.\n\n### Signature\ndef filter_oddnumbers(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "timestamp": "2025-10-17T16:58:12.455053",
        "response_time": "0.68",
        "context": "{\"function_name\": \"filter_oddnumbers\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 427,
        "solution": "```python\nfrom datetime import datetime\n\ndef change_date_format(dt):\n    # Convert the input string to a datetime object\n    date_obj = datetime.strptime(dt, \"%Y-%m-%d\")\n    # Format the datetime object to the desired output format\n    return date_obj.strftime(\"%d-%m-%Y\")\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n### Signature\ndef change_date_format(dt):\n\n### Test\nassert candidate(\"2026-01-02\") == \"\"\"02-01-2026\"\"\"",
        "timestamp": "2025-10-17T16:58:13.418975",
        "response_time": "0.96",
        "context": "{\"function_name\": \"change_date_format\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 428,
        "solution": "```python\ndef shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort the given array by using shell sort.\n\n### Signature\ndef shell_sort(my_list):\n\n### Test\nassert candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
        "timestamp": "2025-10-17T16:58:14.904423",
        "response_time": "1.48",
        "context": "{\"function_name\": \"shell_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 429,
        "solution": "```python\ndef and_tuples(test_tup1, test_tup2):\n    # Use a list comprehension to apply the bitwise AND operation elementwise\n    res = tuple(a & b for a, b in zip(test_tup1, test_tup2))\n    return res\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\n### Signature\ndef and_tuples(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
        "timestamp": "2025-10-17T16:58:15.807380",
        "response_time": "0.90",
        "context": "{\"function_name\": \"and_tuples\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 430,
        "solution": "```python\n###START===\nimport math\n\ndef parabola_directrix(a, b, c):\n    # Calculate the directrix using the formula for a parabola in standard form\n    directrix = -c / (4 * a)\n    return directrix\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the directrix of a parabola.\n\n### Signature\ndef parabola_directrix(a, b, c):\n\n### Test\nassert candidate(5,3,2)==-198",
        "timestamp": "2025-10-17T16:58:16.736448",
        "response_time": "0.93",
        "context": "{\"function_name\": \"parabola_directrix\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 431,
        "solution": "```python\ndef common_element(list1, list2):\n    return any(item in list2 for item in list1)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes two lists and returns true if they have at least one common element.\n\n### Signature\ndef common_element(list1, list2):\n\n### Test\nassert candidate([1,2,3,4,5], [5,6,7,8,9])==True",
        "timestamp": "2025-10-17T16:58:17.309422",
        "response_time": "0.57",
        "context": "{\"function_name\": \"common_element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 432,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef median_trapezium(base1, base2, height):\n    return (base1 + base2) / 2\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the median length of a trapezium.\n\n### Signature\ndef median_trapezium(base1,base2,height):\n\n### Test\nassert candidate(15,25,35)==20",
        "timestamp": "2025-10-17T16:58:17.963874",
        "response_time": "0.65",
        "context": "{\"function_name\": \"median_trapezium\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 433,
        "solution": "```python\ndef check_greater(arr, number):\n    return all(number > x for x in arr)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\n### Signature\ndef check_greater(arr, number):\n\n### Test\nassert candidate([1, 2, 3, 4, 5], 4) == False",
        "timestamp": "2025-10-17T16:58:18.443743",
        "response_time": "0.48",
        "context": "{\"function_name\": \"check_greater\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 434,
        "solution": "```python\nimport re\n\ndef text_match_one(text):\n    # Use regular expression to match a string that starts with 'a' followed by one or more 'b's\n    pattern = r'^a+b$'\n    return bool(re.search(pattern, text))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by one or more b's.\n\n### Signature\ndef text_match_one(text):\n\n### Test\nassert candidate(\"ac\")==False",
        "timestamp": "2025-10-17T16:58:19.288185",
        "response_time": "0.84",
        "context": "{\"function_name\": \"text_match_one\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 435,
        "solution": "```python\n###START===\ndef last_Digit(n) :\n    return n % 10\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the last digit of a given number.\n\n### Signature\ndef last_Digit(n) :\n\n### Test\nassert candidate(123) == 3",
        "timestamp": "2025-10-17T16:58:19.801284",
        "response_time": "0.51",
        "context": "{\"function_name\": \"last_Digit\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 436,
        "solution": "```python\ndef neg_nos(list1):\n    return [num for num in list1 if num < 0]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to return the negative numbers in a list.\n\n### Signature\ndef neg_nos(list1):\n\n### Test\nassert candidate([-1,4,5,-6]) == [-1,-6]",
        "timestamp": "2025-10-17T16:58:20.328928",
        "response_time": "0.53",
        "context": "{\"function_name\": \"neg_nos\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 437,
        "solution": "```python\ndef remove_odd(str1):\n    return ''.join([char for char in str1 if char % 2 == 0])\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove odd characters in a string.\n\n### Signature\ndef remove_odd(str1):\n\n### Test\nassert candidate(\"python\")==(\"yhn\")",
        "timestamp": "2025-10-17T16:58:20.879440",
        "response_time": "0.55",
        "context": "{\"function_name\": \"remove_odd\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 438,
        "solution": "```python\nfrom collections import defaultdict\n\ndef count_bidirectional(test_list):\n    # Initialize a dictionary to count bidirectional pairs\n    count_dict = defaultdict(int)\n    \n    # Iterate through each tuple in the list\n    for a, b in test_list:\n        # Increment the count for the pair (a, b)\n        count_dict[(a, b)] += 1\n        # Increment the count for the pair (b, a)\n        count_dict[(b, a)] += 1\n    \n    # Initialize a counter for bidirectional pairs\n    bidirectional_count = 0\n    \n    # Iterate through the dictionary to count bidirectional pairs\n    for key, value in count_dict.items():\n        # If the count of a pair is even, it is bidirectional\n        if value % 2 == 0:\n            bidirectional_count += 1\n    \n    return bidirectional_count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to count bidirectional tuple pairs.\n\n### Signature\ndef count_bidirectional(test_list):\n\n### Test\nassert candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3",
        "timestamp": "2025-10-17T16:58:23.362152",
        "response_time": "2.48",
        "context": "{\"function_name\": \"count_bidirectional\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 439,
        "solution": "```python\n###START===\ndef multiple_to_single(L):\n    return int(''.join(map(str, L)))\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to join a list of multiple integers into a single integer.\n\n### Signature\ndef multiple_to_single(L):\n\n### Test\nassert candidate([11, 33, 50])==113350",
        "timestamp": "2025-10-17T16:58:23.891438",
        "response_time": "0.53",
        "context": "{\"function_name\": \"multiple_to_single\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 440,
        "solution": "```python\nimport re\n\ndef find_adverb_position(text):\n    # Use regex to find all adverbs in the text\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    # Find the position of the first adverb\n    if adverbs:\n        position = text.index(adverbs[0])\n        return position, position + len(adverbs[0]), adverbs[0]\n    else:\n        return None\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the first adverb and their positions in a given sentence.\n\n### Signature\ndef find_adverb_position(text):\n\n### Test\nassert candidate(\"clearly!! we can see the sky\")==(0, 7, \"\"\"clearly\"\"\")",
        "timestamp": "2025-10-17T16:58:25.233544",
        "response_time": "1.34",
        "context": "{\"function_name\": \"find_adverb_position\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 441,
        "solution": "```python\n###START===\ndef surfacearea_cube(l):\n    return 6 * l ** 2\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the surface area of a cube of a given size.\n\n### Signature\ndef surfacearea_cube(l):\n\n### Test\nassert candidate(5)==150",
        "timestamp": "2025-10-17T16:58:25.729900",
        "response_time": "0.50",
        "context": "{\"function_name\": \"surfacearea_cube\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 442,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef positive_count(nums):\n    return sum(1 for num in nums if num > 0) / len(nums)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the ration of positive numbers in an array of integers.\n\n### Signature\ndef positive_count(nums):\n\n### Test\nassert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
        "timestamp": "2025-10-17T16:58:26.353572",
        "response_time": "0.62",
        "context": "{\"function_name\": \"positive_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 443,
        "solution": "```python\ndef largest_neg(list1):\n    # Initialize the largest negative number to None\n    largest = None\n    \n    # Iterate through each number in the list\n    for num in list1:\n        # Check if the number is negative\n        if num < 0:\n            # If largest is None or the current number is greater than largest, update largest\n            if largest is None or num > largest:\n                largest = num\n    \n    # Return the largest negative number found, or None if no negative numbers are present\n    return largest\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the largest negative number from the given list.\n\n### Signature\ndef largest_neg(list1):\n\n### Test\nassert candidate([1,2,3,-4,-6]) == -6",
        "timestamp": "2025-10-17T16:58:27.956048",
        "response_time": "1.60",
        "context": "{\"function_name\": \"largest_neg\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 444,
        "solution": "```python\ndef trim_tuple(test_list, K):\n    # Use list comprehension to trim each tuple by K\n    res = [tuple(ele[K:]) for ele in test_list]\n    # Convert the list of tuples to a string representation\n    return str(res)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to trim each tuple by k in the given tuple list.\n\n### Signature\ndef trim_tuple(test_list, K):\n\n### Test\nassert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
        "timestamp": "2025-10-17T16:58:28.830206",
        "response_time": "0.87",
        "context": "{\"function_name\": \"trim_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 445,
        "solution": "```python\ndef index_multiplication(test_tup1, test_tup2):\n    # Use zip to pair elements from both tuples and perform multiplication\n    res = tuple(a * b for a, b in zip(test_tup1, test_tup2))\n    return res\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n### Signature\ndef index_multiplication(test_tup1, test_tup2):\n\n### Test\nassert candidate(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
        "timestamp": "2025-10-17T16:58:29.721803",
        "response_time": "0.89",
        "context": "{\"function_name\": \"index_multiplication\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 446,
        "solution": "```python\ndef count_Occurrence(tup, lst):\n    return sum(tup.count(x) for x in lst)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the occurence of all elements of list in a tuple.\n\n### Signature\ndef count_Occurrence(tup, lst):\n\n### Test\nassert candidate(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
        "timestamp": "2025-10-17T16:58:30.232789",
        "response_time": "0.51",
        "context": "{\"function_name\": \"count_Occurrence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 447,
        "solution": "```python\ndef cube_nums(nums):\n    return [num ** 3 for num in nums]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find cubes of individual elements in a list.\n\n### Signature\ndef cube_nums(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
        "timestamp": "2025-10-17T16:58:30.683549",
        "response_time": "0.45",
        "context": "{\"function_name\": \"cube_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 448,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef cal_sum(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    else:\n        p0, p1, p2 = 3, 3, 5\n        sum_perrin = 3 + 3 + 5\n        for i in range(3, n):\n            p_next = p0 + p1\n            sum_perrin += p_next\n            p0, p1, p2 = p1, p2, p_next\n        return sum_perrin\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the sum of perrin numbers.\n\n### Signature\ndef cal_sum(n):\n\n### Test\nassert candidate(9) == 49",
        "timestamp": "2025-10-17T16:58:32.691680",
        "response_time": "2.01",
        "context": "{\"function_name\": \"cal_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 450,
        "solution": "```python\ndef extract_string(str, l):\n    return [s for s in str if len(s) == l]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract specified size of strings from a given list of string values.\n\n### Signature\ndef extract_string(str, l):\n\n### Test\nassert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
        "timestamp": "2025-10-17T16:58:33.181904",
        "response_time": "0.49",
        "context": "{\"function_name\": \"extract_string\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 451,
        "solution": "```python\ndef remove_whitespaces(text1):\n    return text1.replace(\" \", \"\")\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove all whitespaces from the given string.\n\n### Signature\ndef remove_whitespaces(text1):\n\n### Test\nassert candidate(' Google    Flutter ') == 'GoogleFlutter'",
        "timestamp": "2025-10-17T16:58:33.605474",
        "response_time": "0.42",
        "context": "{\"function_name\": \"remove_whitespaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 452,
        "solution": "```python\n###START===\ndef loss_amount(actual_cost,sale_amount):\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n### Signature\ndef loss_amount(actual_cost,sale_amount):\n\n### Test\nassert candidate(1500,1200)==0",
        "timestamp": "2025-10-17T16:58:34.318952",
        "response_time": "0.71",
        "context": "{\"function_name\": \"loss_amount\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 453,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef sumofFactors(n) :\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of even factors of a number.\n\n### Signature\ndef sumofFactors(n) :\n\n### Test\nassert candidate(18) == 26",
        "timestamp": "2025-10-17T16:58:35.367259",
        "response_time": "1.05",
        "context": "{\"function_name\": \"sumofFactors\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 454,
        "solution": "```python\nimport re\n\ndef text_match_wordz(text):\n    # Use regular expression to find a word containing 'z'\n    return bool(re.search(r'\\b\\w*z\\w*\\b', text))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that matches a word containing 'z'.\n\n### Signature\ndef text_match_wordz(text):\n\n### Test\nassert candidate(\"pythonz.\")==True",
        "timestamp": "2025-10-17T16:58:36.102680",
        "response_time": "0.73",
        "context": "{\"function_name\": \"text_match_wordz\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 455,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef check_monthnumb_number(monthnum2):\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given month number contains 31 days or not.\n\n### Signature\ndef check_monthnumb_number(monthnum2):\n\n### Test\nassert candidate(5)==True",
        "timestamp": "2025-10-17T16:58:37.001055",
        "response_time": "0.90",
        "context": "{\"function_name\": \"check_monthnumb_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 456,
        "solution": "```python\ndef reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to reverse each string in a given list of string values.\n\n### Signature\ndef reverse_string_list(stringlist):\n\n### Test\nassert candidate(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
        "timestamp": "2025-10-17T16:58:37.491159",
        "response_time": "0.49",
        "context": "{\"function_name\": \"reverse_string_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 457,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef Find_Min(lst):\n    return min(lst, key=len)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sublist having minimum length.\n\n### Signature\ndef Find_Min(lst):\n\n### Test\nassert candidate([[1],[1,2],[1,2,3]]) == [1]",
        "timestamp": "2025-10-17T16:58:37.987860",
        "response_time": "0.50",
        "context": "{\"function_name\": \"Find_Min\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 458,
        "solution": "```python\n###START===\ndef rectangle_area(l, b):\n    return l * b\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the area of a rectangle.\n\n### Signature\ndef rectangle_area(l,b):\n\n### Test\nassert candidate(10,20)==200",
        "timestamp": "2025-10-17T16:58:38.446742",
        "response_time": "0.46",
        "context": "{\"function_name\": \"rectangle_area\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 459,
        "solution": "```python\ndef remove_uppercase(str1):\n    return ''.join(char for char in str1 if not char.isupper())\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove uppercase substrings from a given string.\n\n### Signature\ndef remove_uppercase(str1):\n\n### Test\nassert candidate('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
        "timestamp": "2025-10-17T16:58:38.960587",
        "response_time": "0.51",
        "context": "{\"function_name\": \"remove_uppercase\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 460,
        "solution": "```python\ndef Extract(lst):\n    return [sublist[0] for sublist in lst]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to get the first element of each sublist.\n\n### Signature\ndef Extract(lst):\n\n### Test\nassert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
        "timestamp": "2025-10-17T16:58:39.416322",
        "response_time": "0.45",
        "context": "{\"function_name\": \"Extract\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 461,
        "solution": "```python\ndef upper_ctr(str):\n    return sum(1 for char in str if char.isupper())\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the upper case characters in a given string.\n\n### Signature\ndef upper_ctr(str):\n\n### Test\nassert candidate('PYthon') == 1",
        "timestamp": "2025-10-17T16:58:39.892950",
        "response_time": "0.48",
        "context": "{\"function_name\": \"upper_ctr\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 462,
        "solution": "```python\nfrom itertools import combinations\n\ndef combinations_list(list1):\n    result = []\n    for r in range(len(list1) + 1):\n        result.extend(combinations(list1, r))\n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find all possible combinations of the elements of a given list.\n\n### Signature\ndef combinations_list(list1):\n\n### Test\nassert candidate(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
        "timestamp": "2025-10-17T16:58:40.633350",
        "response_time": "0.74",
        "context": "{\"function_name\": \"combinations_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 463,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = min_product = result = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        \n        result = max(result, max_product)\n    \n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum product subarray of the given array.\n\n### Signature\ndef max_subarray_product(arr):\n\n### Test\nassert candidate([1, -2, -3, 0, 7, -8, -2]) == 112",
        "timestamp": "2025-10-17T16:58:42.173906",
        "response_time": "1.54",
        "context": "{\"function_name\": \"max_subarray_product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 464,
        "solution": "```python\n===START===\ndef check_value(dict, n):\n    return all(value == n for value in dict.values())\n\n===END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if all values are same in a dictionary.\n\n### Signature\ndef check_value(dict, n):\n\n### Test\nassert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
        "timestamp": "2025-10-17T16:58:42.708915",
        "response_time": "0.53",
        "context": "{\"function_name\": \"check_value\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 465,
        "solution": "```python\ndef drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None}\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to drop empty items from a given dictionary.\n\n### Signature\ndef drop_empty(dict1):\n\n### Test\nassert candidate({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
        "timestamp": "2025-10-17T16:58:43.290901",
        "response_time": "0.58",
        "context": "{\"function_name\": \"drop_empty\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 468,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef max_product(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    max_product = [0] * n\n    max_product[0] = arr[0]\n    \n    for i in range(1, n):\n        max_product[i] = max(arr[i], max_product[i - 1] * arr[i])\n    \n    return max(max_product)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n### Signature\ndef max_product(arr):\n\n### Test\nassert candidate([3, 100, 4, 5, 150, 6]) == 3000",
        "timestamp": "2025-10-17T16:58:44.663299",
        "response_time": "1.37",
        "context": "{\"function_name\": \"max_product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 470,
        "solution": "```python\ndef add_pairwise(test_tup):\n    # Initialize an empty list to store the pairwise sums\n    res = []\n    # Iterate through the tuple using zip to pair elements\n    for i, j in zip(test_tup, test_tup[1:]):\n        # Add the pair and append to the result list\n        res.append(i + j)\n    # Return the list of pairwise sums\n    return res\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n### Signature\ndef add_pairwise(test_tup):\n\n### Test\nassert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
        "timestamp": "2025-10-17T16:58:45.984081",
        "response_time": "1.32",
        "context": "{\"function_name\": \"add_pairwise\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 471,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the product of the array multiplication modulo n.\n\n### Signature\ndef find_remainder(arr, n):\n\n### Test\nassert candidate([ 100, 10, 5, 25, 35, 14 ],11) ==9",
        "timestamp": "2025-10-17T16:58:46.902928",
        "response_time": "0.92",
        "context": "{\"function_name\": \"find_remainder\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 472,
        "solution": "```python\ndef check_Consecutive(l):\n    return all(l[i] + 1 == l[i + 1] for i in range(len(l) - 1))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\n### Signature\ndef check_Consecutive(l):\n\n### Test\nassert candidate([1,2,3,4,5]) == True",
        "timestamp": "2025-10-17T16:58:47.544287",
        "response_time": "0.64",
        "context": "{\"function_name\": \"check_Consecutive\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 473,
        "solution": "```python\ndef tuple_intersection(test_list1, test_list2):\n    # Convert lists to sets to find intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find intersection of both sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the set back to a tuple\n    return tuple(intersection)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n### Signature\ndef tuple_intersection(test_list1, test_list2):\n\n### Test\nassert candidate([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
        "timestamp": "2025-10-17T16:58:48.727129",
        "response_time": "1.18",
        "context": "{\"function_name\": \"tuple_intersection\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 474,
        "solution": "```python\ndef replace_char(str1,ch,newch):\n    return str1.replace(ch,newch)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to replace characters in a string.\n\n### Signature\ndef replace_char(str1,ch,newch):\n\n### Test\nassert candidate(\"polygon\",\"\"\"y\"\"\",\"\"\"l\"\"\")==(\"pollgon\")",
        "timestamp": "2025-10-17T16:58:49.184121",
        "response_time": "0.46",
        "context": "{\"function_name\": \"replace_char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 475,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef sort_counter(dict1):\n    return sorted(dict1.items(), key=lambda item: item[1])\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a dictionary by value.\n\n### Signature\ndef sort_counter(dict1):\n\n### Test\nassert candidate({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
        "timestamp": "2025-10-17T16:58:49.771008",
        "response_time": "0.59",
        "context": "{\"function_name\": \"sort_counter\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 476,
        "solution": "```python\ndef big_sum(nums):\n    if not nums:\n        return 0\n    return max(nums) + min(nums)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\n### Signature\ndef big_sum(nums):\n\n### Test\nassert candidate([1,2,3]) == 4",
        "timestamp": "2025-10-17T16:58:50.303281",
        "response_time": "0.53",
        "context": "{\"function_name\": \"big_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 477,
        "solution": "```python\ndef is_lower(string):\n    return string.lower()\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to convert the given string to lower case.\n\n### Signature\ndef is_lower(string):\n\n### Test\nassert candidate(\"InValid\") == \"invalid\"",
        "timestamp": "2025-10-17T16:58:50.669320",
        "response_time": "0.36",
        "context": "{\"function_name\": \"is_lower\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 478,
        "solution": "```python\ndef remove_lowercase(str1):\n    return ''.join(char for char in str1 if char.isupper())\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove lowercase substrings from a given string.\n\n### Signature\ndef remove_lowercase(str1):\n\n### Test\nassert candidate(\"PYTHon\")==(\"\"\"PYTH\"\"\")",
        "timestamp": "2025-10-17T16:58:51.185906",
        "response_time": "0.52",
        "context": "{\"function_name\": \"remove_lowercase\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 479,
        "solution": "```python\n###START===\ndef first_Digit(n) :\n    while n >= 10:\n        n //= 10\n    return n\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the first digit of a given number.\n\n### Signature\ndef first_Digit(n) :\n\n### Test\nassert candidate(123) == 1",
        "timestamp": "2025-10-17T16:58:51.821178",
        "response_time": "0.63",
        "context": "{\"function_name\": \"first_Digit\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 554,
        "solution": "```python\ndef Split(list):\n    return [num for num in list if num % 2 != 0]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function which takes a list of integers and only returns the odd ones.\n\n### Signature\ndef Split(list):\n\n### Test\nassert candidate([1,2,3,4,5,6]) == [1,3,5]",
        "timestamp": "2025-10-17T16:58:52.329675",
        "response_time": "0.51",
        "context": "{\"function_name\": \"Split\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 555,
        "solution": "```python\n###START===\nfrom math import pow\n\ndef difference(n) :\n    sum_of_cubes = sum(pow(i, 3) for i in range(1, n + 1))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n### Signature\ndef difference(n) :\n\n### Test\nassert candidate(3) == 30",
        "timestamp": "2025-10-17T16:58:53.390942",
        "response_time": "1.06",
        "context": "{\"function_name\": \"difference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 556,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef find_Odd_Pair(A,N) :\n    odd_count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                odd_count += 1\n    return odd_count\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of pairs whose xor value is odd.\n\n### Signature\ndef find_Odd_Pair(A,N) :\n\n### Test\nassert candidate([5,4,7,2,1],5) == 6",
        "timestamp": "2025-10-17T16:58:54.586342",
        "response_time": "1.19",
        "context": "{\"function_name\": \"find_Odd_Pair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 557,
        "solution": "```python\ndef toggle_string(string):\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to toggle the case of all characters in a string.\n\n### Signature\ndef toggle_string(string):\n\n### Test\nassert candidate(\"Python\")==(\"pYTHON\")",
        "timestamp": "2025-10-17T16:58:55.153654",
        "response_time": "0.57",
        "context": "{\"function_name\": \"toggle_string\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 558,
        "solution": "```python\ndef digit_distance_nums(n1, n2):\n    # Convert numbers to strings to iterate over each digit\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # Initialize the sum of differences\n    sum_diff = 0\n    \n    # Iterate over each digit\n    for i in range(len(str_n1)):\n        # Calculate the absolute difference between corresponding digits\n        diff = abs(int(str_n1[i]) - int(str_n2[i]))\n        # Add the difference to the sum\n        sum_diff += diff\n    \n    return sum_diff\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of the per-digit difference between two integers.\n\n### Signature\ndef digit_distance_nums(n1, n2):\n\n### Test\nassert candidate(1,2) == 1",
        "timestamp": "2025-10-17T16:58:56.854283",
        "response_time": "1.70",
        "context": "{\"function_name\": \"digit_distance_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 559,
        "solution": "```python\ndef max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n\n### Signature\ndef max_sub_array_sum(a, size):\n\n### Test\nassert candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
        "timestamp": "2025-10-17T16:58:58.050674",
        "response_time": "1.20",
        "context": "{\"function_name\": \"max_sub_array_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 560,
        "solution": "```python\ndef union_elements(test_tup1, test_tup2):\n    # Convert tuples to sets to remove duplicates and then find the union\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set back to a sorted tuple\n    return tuple(sorted(union_set))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n\n### Signature\ndef union_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
        "timestamp": "2025-10-17T16:58:59.059080",
        "response_time": "1.01",
        "context": "{\"function_name\": \"union_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 562,
        "solution": "```python\ndef Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the length of the longest sublists.\n\n### Signature\ndef Find_Max_Length(lst):\n\n### Test\nassert candidate([[1],[1,4],[5,6,7,8]]) == 4",
        "timestamp": "2025-10-17T16:58:59.514357",
        "response_time": "0.45",
        "context": "{\"function_name\": \"Find_Max_Length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 563,
        "solution": "```python\ndef extract_values(text):\n    return [value for value in text.split() if value.startswith('\"') and value.endswith('\"')]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract values between quotation marks from a string.\n\n### Signature\ndef extract_values(text):\n\n### Test\nassert extract_values(\"Python\", \"PHP\", \"Java\") == [\"Python\", \"PHP\", \"Java\"]",
        "timestamp": "2025-10-17T16:59:00.043126",
        "response_time": "0.53",
        "context": "{\"function_name\": \"extract_values\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 564,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n### Signature\ndef count_Pairs(arr,n):\n\n### Test\nassert candidate([1,2,1],3) == 2",
        "timestamp": "2025-10-17T16:59:01.002244",
        "response_time": "0.96",
        "context": "{\"function_name\": \"count_Pairs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 565,
        "solution": "```python\ndef split(word):\n    return list(word)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to split a string into characters.\n\n### Signature\ndef split(word):\n\n### Test\nassert candidate('python') == ['p','y','t','h','o','n']",
        "timestamp": "2025-10-17T16:59:01.371729",
        "response_time": "0.37",
        "context": "{\"function_name\": \"split\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 566,
        "solution": "```python\ndef sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to get the sum of the digits of a non-negative integer.\n\n### Signature\ndef sum_digits(n):\n\n### Test\nassert candidate(345)==12",
        "timestamp": "2025-10-17T16:59:01.814502",
        "response_time": "0.44",
        "context": "{\"function_name\": \"sum_digits\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 567,
        "solution": "```python\ndef issort_list(list1):\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether a specified list is sorted or not.\n\n### Signature\ndef issort_list(list1):\n\n### Test\nassert candidate([1,2,4,6,8,10,12,14,16,17])==True",
        "timestamp": "2025-10-17T16:59:02.472118",
        "response_time": "0.66",
        "context": "{\"function_name\": \"issort_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 568,
        "solution": "```python\ndef empty_list(length):\n    return [{} for _ in range(length)]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to create a list of N empty dictionaries.\n\n### Signature\ndef empty_list(length):\n\n### Test\nassert candidate(5)==[{},{},{},{},{}]",
        "timestamp": "2025-10-17T16:59:02.883687",
        "response_time": "0.41",
        "context": "{\"function_name\": \"empty_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 569,
        "solution": "```python\ndef sort_sublists(list1):\n    return [sorted(sublist) for sublist in list1]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(list1):\n\n### Test\nassert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
        "timestamp": "2025-10-17T16:59:03.386089",
        "response_time": "0.50",
        "context": "{\"function_name\": \"sort_sublists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 572,
        "solution": "```python\nfrom typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    unique_nums = set(nums)\n    return list(unique_nums)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to remove duplicate numbers from a given number of lists.\n\n### Signature\ndef two_unique_nums(nums):\n\n### Test\nassert candidate([1,2,3,2,3,4,5]) == [1, 4, 5]",
        "timestamp": "2025-10-17T16:59:03.997342",
        "response_time": "0.61",
        "context": "{\"function_name\": \"two_unique_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 573,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to calculate the product of the unique numbers in a given list.\n\n### Signature\ndef unique_product(list_data):\n\n### Test\nassert candidate([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
        "timestamp": "2025-10-17T16:59:04.763608",
        "response_time": "0.76",
        "context": "{\"function_name\": \"unique_product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 574,
        "solution": "```python\nimport math\n\ndef surfacearea_cylinder(r, h):\n    return 2 * math.pi * r * (r + h)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the surface area of a cylinder.\n\n### Signature\ndef surfacearea_cylinder(r,h):\n\n### Test\nassert candidate(10,5)==942.45",
        "timestamp": "2025-10-17T16:59:05.333347",
        "response_time": "0.57",
        "context": "{\"function_name\": \"surfacearea_cylinder\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 576,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef is_Sub_Array(A,B):\n    if not B:\n        return True\n    if len(A) < len(B):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether a list is sublist of another or not.\n\n### Signature\ndef is_Sub_Array(A,B):\n\n### Test\nassert candidate([1,4,3,5],[1,2]) == False",
        "timestamp": "2025-10-17T16:59:06.535423",
        "response_time": "1.20",
        "context": "{\"function_name\": \"is_Sub_Array\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 577,
        "solution": "```python\n###START===\nfrom math import factorial\n\ndef last_Digit_Factorial(n):\n    return factorial(n) % 10\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the last digit in factorial of a given number.\n\n### Signature\ndef last_Digit_Factorial(n):\n\n### Test\nassert candidate(4) == 4",
        "timestamp": "2025-10-17T16:59:07.149079",
        "response_time": "0.61",
        "context": "{\"function_name\": \"last_Digit_Factorial\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 578,
        "solution": "```python\ndef interleave_lists(list1, list2, list3):\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to interleave 3 lists of the same length into a single flat list.\n\n### Signature\ndef interleave_lists(list1,list2,list3):\n\n### Test\nassert candidate([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
        "timestamp": "2025-10-17T16:59:08.054782",
        "response_time": "0.90",
        "context": "{\"function_name\": \"interleave_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 579,
        "solution": "```python\ndef find_dissimilar(test_tup1, test_tup2):\n    # Convert tuples to sets to find dissimilar elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the difference between the two sets\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    # Convert the set back to a tuple\n    return tuple(dissimilar_elements)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the dissimilar elements in the given two tuples.\n\n### Signature\ndef find_dissimilar(test_tup1, test_tup2):\n\n### Test\nassert candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
        "timestamp": "2025-10-17T16:59:09.368218",
        "response_time": "1.31",
        "context": "{\"function_name\": \"find_dissimilar\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 580,
        "solution": "```python\ndef even_ele(test_tuple, even_fnc):\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return tuple(result)\n\n# Test the function with the provided test case\nassert candidate((4, 5, (7, 6, (2, 4)), 6, 8), lambda x: x % 2 == 0) == (4, (6, (2, 4)), 6, 8)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove uneven elements in the nested mixed tuple.\n\n### Signature\ndef even_ele(test_tuple, even_fnc):\n\n### Test\nassert candidate((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
        "timestamp": "2025-10-17T16:59:11.115929",
        "response_time": "1.74",
        "context": "{\"function_name\": \"extract_even\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 581,
        "solution": "```python\n###START===\nfrom math import sqrt\n\ndef surface_Area(b,s):\n    # Calculate the area of the base\n    base_area = b * b\n    # Calculate the area of the four triangular faces\n    triangular_face_area = 0.5 * s * sqrt(b**2 + s**2)\n    # Total surface area is the sum of the base area and the four triangular faces\n    total_surface_area = base_area + 4 * triangular_face_area\n    return total_surface_area\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\n### Signature\ndef surface_Area(b,s):\n\n### Test\nassert candidate(3,4) == 33",
        "timestamp": "2025-10-17T16:59:12.620048",
        "response_time": "1.50",
        "context": "{\"function_name\": \"surface_Area\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 582,
        "solution": "```python\n===START===\ndef my_dict(dict1):\n    return not dict1\n\n===END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if a dictionary is empty\n\n### Signature\ndef my_dict(dict1):\n\n### Test\nassert candidate({10})==False",
        "timestamp": "2025-10-17T16:59:13.158485",
        "response_time": "0.54",
        "context": "{\"function_name\": \"my_dict\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 583,
        "solution": "```python\nfrom math import factorial\n\ndef catalan_number(num):\n    # Calculate the nth Catalan number using the formula\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function which returns nth catalan number.\n\n### Signature\ndef catalan_number(num):\n\n### Test\nassert candidate(10)==16796",
        "timestamp": "2025-10-17T16:59:13.925104",
        "response_time": "0.76",
        "context": "{\"function_name\": \"catalan_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 584,
        "solution": "```python\nimport re\n\ndef find_adverbs(text):\n    # Use regular expression to find all adverbs ending with 'ly'\n    matches = re.findall(r'\\b\\w+ly\\b', text)\n    # If no matches are found, return an empty string\n    if not matches:\n        return \"\"\n    # Return the first match and its position\n    return f\"{text.index(matches[0])}-{text.index(matches[0]) + len(matches[0]) - 1}: {matches[0]}\"\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n\n### Signature\ndef find_adverbs(text):\n\n### Test\nassert candidate(\"Clearly, he has no excuse for such behavior.\") == \"\"\"0-7: Clearly\"\"\"",
        "timestamp": "2025-10-17T16:59:15.427038",
        "response_time": "1.50",
        "context": "{\"function_name\": \"find_adverbs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 585,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef expensive_items(items, n):\n    # Sort the items by price in descending order and select the top n items\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the n most expensive items in a given dataset.\n\n### Signature\ndef expensive_items(items,n):\n\n### Test\nassert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "timestamp": "2025-10-17T16:59:16.289913",
        "response_time": "0.86",
        "context": "{\"function_name\": \"expensive_items\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 586,
        "solution": "```python\ndef split_Arr(l, n):\n    return l[n:] + l[:n]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n\n### Signature\ndef split_Arr(l, n):\n\n### Test\nassert candidate([12,10,5,6,52,36],2) == [5,6,52,36,12,10]",
        "timestamp": "2025-10-17T16:59:16.734982",
        "response_time": "0.44",
        "context": "{\"function_name\": \"split_Arr\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 587,
        "solution": "```python\ndef list_tuple(listx):\n    return tuple(listx)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a list to a tuple.\n\n### Signature\ndef list_tuple(listx):\n\n### Test\nassert candidate([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
        "timestamp": "2025-10-17T16:59:17.120607",
        "response_time": "0.38",
        "context": "{\"function_name\": \"list_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 588,
        "solution": "```python\ndef big_diff(nums):\n    if not nums:\n        return 0\n    return max(nums) - min(nums)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the difference between largest and smallest value in a given list.\n\n### Signature\ndef big_diff(nums):\n\n### Test\nassert candidate([1,2,3,4]) == 3",
        "timestamp": "2025-10-17T16:59:17.655080",
        "response_time": "0.53",
        "context": "{\"function_name\": \"big_diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 589,
        "solution": "```python\nimport math\n\ndef perfect_squares(a, b):\n    # Calculate the square root of 'a' and 'b'\n    sqrt_a = math.isqrt(a)\n    sqrt_b = math.isqrt(b)\n    \n    # Generate perfect squares between 'a' and 'b'\n    return [i**2 for i in range(sqrt_a, sqrt_b + 1)]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find perfect squares between two given numbers.\n\n### Signature\ndef perfect_squares(a, b):\n\n### Test\nassert candidate(1,30)==[1, 4, 9, 16, 25]",
        "timestamp": "2025-10-17T16:59:18.802461",
        "response_time": "1.15",
        "context": "{\"function_name\": \"perfect_squares\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 590,
        "solution": "```python\nimport cmath\n\ndef polar_rect(x, y):\n    # Convert polar coordinates to rectangular coordinates\n    return (cmath.rect(x, y), cmath.rect(x, y).conjugate())\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert polar coordinates to rectangular coordinates.\n\n### Signature\ndef polar_rect(x,y):\n\n### Test\nassert candidate(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
        "timestamp": "2025-10-17T16:59:19.583254",
        "response_time": "0.78",
        "context": "{\"function_name\": \"polar_rect\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 591,
        "solution": "```python\ndef swap_List(newList):\n    # Check if the list is empty or has only one element\n    if len(newList) <= 1:\n        return newList\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to interchange the first and last elements in a list.\n\n### Signature\ndef swap_List(newList):\n\n### Test\nassert candidate([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
        "timestamp": "2025-10-17T16:59:20.685421",
        "response_time": "1.10",
        "context": "{\"function_name\": \"swap_List\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 592,
        "solution": "```python\nfrom math import comb\n\ndef binomial_Coeff(n,k):\n    return sum(comb(n, i) * comb(n, i + 1) for i in range(k))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\n### Signature\ndef binomial_Coeff(n,k):\n\n### Test\nassert candidate(3) == 15",
        "timestamp": "2025-10-17T16:59:21.373915",
        "response_time": "0.69",
        "context": "{\"function_name\": \"sum_Of_product\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 593,
        "solution": "```python\n###START===\ndef removezero_ip(ip):\n    return '.'.join(str(int(part)) for part in ip.split('.'))\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove leading zeroes from an ip address.\n\n### Signature\ndef removezero_ip(ip):\n\n### Test\nassert candidate(\"216.08.094.196\")==(\"\"\"216.8.94.196\"\"\")",
        "timestamp": "2025-10-17T16:59:21.951359",
        "response_time": "0.57",
        "context": "{\"function_name\": \"removezero_ip\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 594,
        "solution": "```python\ndef diff_even_odd(list1):\n    even = None\n    odd = None\n    for num in list1:\n        if even is None and num % 2 == 0:\n            even = num\n        elif odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even - odd\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the difference of the first even and first odd number of a given list.\n\n### Signature\ndef diff_even_odd(list1):\n\n### Test\nassert candidate([1,3,5,7,4,1,6,8])==3",
        "timestamp": "2025-10-17T16:59:23.251217",
        "response_time": "1.30",
        "context": "{\"function_name\": \"diff_even_odd\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 595,
        "solution": "```python\n###START===\nfrom collections import defaultdict\n\ndef min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return -1  # Binary strings must be of the same length\n\n    # Create a dictionary to store the positions of '1's in str1\n    pos = defaultdict(list)\n    for i, char in enumerate(str1):\n        if char == '1':\n            pos[char].append(i)\n\n    # Initialize variables\n    swaps = 0\n    i = 0\n\n    # Iterate through str2 and try to match '1's with '1's in str1\n    while i < len(str2):\n        if str2[i] == '1':\n            if pos['1']:\n                # Swap the current '1' in str2 with the first '1' in str1\n                swaps += 1\n                pos['1'].pop(0)\n            else:\n                return -1  # No matching '1' in str1\n        i += 1\n\n    return swaps\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n### Signature\ndef min_Swaps(str1,str2) :\n\n### Test\nassert candidate(\"1101\",\"1110\") == 1",
        "timestamp": "2025-10-17T16:59:26.170588",
        "response_time": "2.92",
        "context": "{\"function_name\": \"min_Swaps\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 596,
        "solution": "```python\nimport sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the size in bytes of the given tuple.\n\n### Signature\ndef tuple_size(tuple_list):\n\n### Test\nassert candidate((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
        "timestamp": "2025-10-17T16:59:26.603746",
        "response_time": "0.43",
        "context": "{\"function_name\": \"tuple_size\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 597,
        "solution": "```python\nfrom typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    # Initialize pointers for both arrays\n    i, j = 0, 0\n    # Initialize the kth element to be found\n    kth_element = 0\n    \n    # Loop until we find the kth element\n    while i < len(arr1) and j < len(arr2):\n        # If the current element in arr1 is smaller, move the pointer in arr1\n        if arr1[i] < arr2[j]:\n            kth_element = arr1[i]\n            i += 1\n        # If the current element in arr2 is smaller, move the pointer in arr2\n        else:\n            kth_element = arr2[j]\n            j += 1\n        # If we have found the kth element, return it\n        if k == 1:\n            return kth_element\n    \n    # If we have not found the kth element, return the kth element from the remaining array\n    return arr1[i] if i < len(arr1) else arr2[j]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find kth element from the given two sorted arrays.\n\n### Signature\ndef find_kth(arr1, arr2, k):\n\n### Test\nassert candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6",
        "timestamp": "2025-10-17T16:59:29.739899",
        "response_time": "3.13",
        "context": "{\"function_name\": \"find_kth\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 598,
        "solution": "```python\n###START===\ndef armstrong_number(number):\n    # Convert the number to a string to iterate over each digit\n    num_str = str(number)\n    # Calculate the number of digits\n    num_digits = len(num_str)\n    # Initialize the sum of the digits raised to the power of the number of digits\n    sum_of_powers = 0\n    # Iterate over each digit in the number\n    for digit in num_str:\n        # Convert the digit back to an integer and raise it to the power of the number of digits\n        sum_of_powers += int(digit) ** num_digits\n    # Check if the sum of the powers is equal to the original number\n    return sum_of_powers == number\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given number is armstrong or not.\n\n### Signature\ndef armstrong_number(number):\n\n### Test\nassert candidate(153)==True",
        "timestamp": "2025-10-17T16:59:31.819851",
        "response_time": "2.08",
        "context": "{\"function_name\": \"armstrong_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 599,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef sum_average(number):\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    return total_sum, average\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find sum and average of first n natural numbers.\n\n### Signature\ndef sum_average(number):\n\n### Test\nassert candidate(10)==(55, 5.5)",
        "timestamp": "2025-10-17T16:59:32.674907",
        "response_time": "0.85",
        "context": "{\"function_name\": \"sum_average\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 600,
        "solution": "```python\n###START===\ndef is_Even(n) :\n    return n % 2 == 0\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given number is even or not.\n\n### Signature\ndef is_Even(n) :\n\n### Test\nassert candidate(1) == False",
        "timestamp": "2025-10-17T16:59:33.203382",
        "response_time": "0.53",
        "context": "{\"function_name\": \"is_Even\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 602,
        "solution": "```python\n###START===\ndef first_repeated_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the first repeated character in a given string.\n\n### Signature\ndef first_repeated_char(str1):\n\n### Test\nassert candidate(\"abcabc\") == \"a\"",
        "timestamp": "2025-10-17T16:59:34.050934",
        "response_time": "0.85",
        "context": "{\"function_name\": \"first_repeated_char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 603,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef get_ludic(n):\n    if n < 2:\n        return []\n    \n    # Initialize the list of numbers from 1 to n\n    numbers = list(range(1, n + 1))\n    \n    # Start with the first number\n    i = 0\n    \n    while i < len(numbers):\n        # Remove all multiples of the current number\n        numbers = [num for num in numbers if num % numbers[i] != 0]\n        # Move to the next number\n        i += 1\n    \n    return numbers\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\n### Signature\ndef get_ludic(n):\n\n### Test\nassert candidate(10) == [1, 2, 3, 5, 7]",
        "timestamp": "2025-10-17T16:59:35.756297",
        "response_time": "1.70",
        "context": "{\"function_name\": \"get_ludic\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 604,
        "solution": "```python\ndef reverse_words(s):\n    return ' '.join(s.split()[::-1])\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to reverse words seperated by spaces in a given string.\n\n### Signature\ndef reverse_words(s):\n\n### Test\nassert candidate(\"python program\")==(\"program python\")",
        "timestamp": "2025-10-17T16:59:36.195259",
        "response_time": "0.44",
        "context": "{\"function_name\": \"reverse_words\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 605,
        "solution": "```python\n###START===\nfrom math import sqrt\n\ndef prime_num(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given integer is a prime number.\n\n### Signature\ndef prime_num(num):\n\n### Test\nassert candidate(13)==True",
        "timestamp": "2025-10-17T16:59:37.752117",
        "response_time": "1.55",
        "context": "{\"function_name\": \"prime_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 606,
        "solution": "```python\nimport math\n\ndef radian_degree(degree):\n    return math.radians(degree)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert degrees to radians.\n\n### Signature\ndef radian_degree(degree):\n\n### Test\nassert candidate(90)==1.5707963267948966",
        "timestamp": "2025-10-17T16:59:38.185454",
        "response_time": "0.43",
        "context": "{\"function_name\": \"radian_degree\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 607,
        "solution": "```python\nimport re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\n### Signature\ndef find_literals(text, pattern):\n\n### Test\nassert candidate('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)",
        "timestamp": "2025-10-17T16:59:38.911015",
        "response_time": "0.72",
        "context": "{\"function_name\": \"find_literals\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 608,
        "solution": "```python\nfrom math import factorial\n\ndef bell_Number(n):\n    # Initialize the Bell number array\n    bell = [0] * (n + 1)\n    bell[0] = 1  # Base case: B(0) = 1\n\n    # Compute Bell numbers iteratively\n    for i in range(1, n + 1):\n        # Compute the Bell number for i\n        bell[i] = sum(bell[j] * factorial(i - 1) // factorial(j) for j in range(i))\n\n    return bell[n]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find nth bell number.\n\n### Signature\ndef bell_Number(n):\n\n### Test\nassert candidate(2) == 2",
        "timestamp": "2025-10-17T16:59:40.568499",
        "response_time": "1.65",
        "context": "{\"function_name\": \"bell_Number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 610,
        "solution": "```python\ndef remove_kth_element(list1, L):\n    return list1[:L] + list1[L+1:]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\n### Signature\ndef remove_kth_element(list1, L):\n\n### Test\nassert candidate([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
        "timestamp": "2025-10-17T16:59:41.113308",
        "response_time": "0.54",
        "context": "{\"function_name\": \"remove_kth_element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 611,
        "solution": "```python\ndef max_of_nth(test_list, N):\n    return max(row[N] for row in test_list)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\n### Signature\ndef max_of_nth(test_list, N):\n\n### Test\nassert candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19",
        "timestamp": "2025-10-17T16:59:41.623328",
        "response_time": "0.51",
        "context": "{\"function_name\": \"max_of_nth\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 612,
        "solution": "```python\ndef merge(lst):\n    return [list(i) for i in zip(*lst)]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n### Signature\ndef merge(lst):\n\n### Test\nassert candidate([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]",
        "timestamp": "2025-10-17T16:59:42.065815",
        "response_time": "0.44",
        "context": "{\"function_name\": \"merge\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 614,
        "solution": "```python\ndef cummulative_sum(test_list):\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Iterate over each element in the tuple\n        for ele in tup:\n            # Add the element to the cumulative sum\n            cum_sum += ele\n    # Return the cumulative sum\n    return cum_sum\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n### Signature\ndef cummulative_sum(test_list):\n\n### Test\nassert candidate([(1, 3), (5, 6, 7), (2, 6)]) == 30",
        "timestamp": "2025-10-17T16:59:43.366530",
        "response_time": "1.30",
        "context": "{\"function_name\": \"cummulative_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 615,
        "solution": "```python\ndef average_tuple(nums):\n    return [sum(tup) / len(tup) for tup in nums]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\n### Signature\ndef average_tuple(nums):\n\n### Test\nassert candidate(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]",
        "timestamp": "2025-10-17T16:59:43.874069",
        "response_time": "0.49",
        "context": "{\"function_name\": \"average_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 616,
        "solution": "```python\ndef tuple_modulo(test_tup1, test_tup2):\n    # Use a list comprehension to apply the modulo operation element-wise\n    res = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    return res\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\n### Signature\ndef tuple_modulo(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
        "timestamp": "2025-10-17T16:59:44.753747",
        "response_time": "0.88",
        "context": "{\"function_name\": \"tuple_modulo\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 617,
        "solution": "```python\nimport math\n\ndef min_Jumps(steps, d):\n    # Calculate the minimum number of jumps required\n    return math.ceil(d / steps)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n### Signature\ndef min_Jumps(steps, d):\n\n### Test\nassert candidate((3,4),11)==3.5",
        "timestamp": "2025-10-17T16:59:45.359600",
        "response_time": "0.60",
        "context": "{\"function_name\": \"min_Jumps\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 618,
        "solution": "```python\ndef div_list(nums1, nums2):\n    return [a / b for a, b in zip(nums1, nums2)]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to divide two lists element wise.\n\n### Signature\ndef div_list(nums1,nums2):\n\n### Test\nassert candidate([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
        "timestamp": "2025-10-17T16:59:45.922860",
        "response_time": "0.56",
        "context": "{\"function_name\": \"div_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 619,
        "solution": "```python\ndef move_num(test_str):\n    # Initialize two pointers\n    i, j = 0, 0\n    \n    # Iterate through the string\n    while j < len(test_str):\n        # If the current character is not a digit, swap it with the character at the i pointer\n        if not test_str[j].isdigit():\n            test_str[i], test_str[j] = test_str[j], test_str[i]\n            i += 1\n        j += 1\n    \n    return test_str\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to move all the numbers to the end of the given string.\n\n### Signature\ndef move_num(test_str):\n\n### Test\nassert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'",
        "timestamp": "2025-10-17T16:59:47.418761",
        "response_time": "1.49",
        "context": "{\"function_name\": \"move_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 620,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef largest_subset(a):\n    # Sort the array to make it easier to find divisible pairs\n    a.sort()\n    \n    # Initialize the dp array where dp[i] will store the size of the largest subset\n    # ending with the number a[i]\n    dp = [1] * len(a)\n    \n    # Iterate through the array to fill the dp array\n    for i in range(1, len(a)):\n        for j in range(i):\n            # Check if a[i] is divisible by a[j]\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # The size of the largest subset will be the maximum value in the dp array\n    return max(dp)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n### Signature\ndef largest_subset(a):\n\n### Test\nassert candidate([ 1, 3, 6, 13, 17, 18 ]) == 4",
        "timestamp": "2025-10-17T16:59:49.644035",
        "response_time": "2.22",
        "context": "{\"function_name\": \"largest_subset\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 622,
        "solution": "```python\ndef get_median(arr1, arr2, n):\n    # Merge the two sorted arrays\n    merged = sorted(arr1 + arr2)\n    \n    # Calculate the median\n    if n % 2 == 0:\n        # If even, return the average of the two middle elements\n        return (merged[n // 2 - 1] + merged[n // 2]) / 2.0\n    else:\n        # If odd, return the middle element\n        return merged[n // 2]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the median of two sorted lists of same size.\n\n### Signature\ndef get_median(arr1, arr2, n):\n\n### Test\nassert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0",
        "timestamp": "2025-10-17T16:59:51.209063",
        "response_time": "1.56",
        "context": "{\"function_name\": \"get_median\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 623,
        "solution": "```python\ndef nth_nums(nums, n):\n    return [num ** n for num in nums]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to compute the n-th power of each number in a list.\n\n### Signature\ndef nth_nums(nums,n):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
        "timestamp": "2025-10-17T16:59:51.672096",
        "response_time": "0.46",
        "context": "{\"function_name\": \"nth_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 624,
        "solution": "```python\ndef is_upper(string):\n    return string.upper()\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to convert a given string to uppercase.\n\n### Signature\ndef is_upper(string):\n\n### Test\nassert candidate(\"person\") ==\"PERSON\"",
        "timestamp": "2025-10-17T16:59:52.027274",
        "response_time": "0.35",
        "context": "{\"function_name\": \"is_upper\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 625,
        "solution": "```python\ndef swap_List(newList):\n    # Check if the list is empty or has only one element\n    if len(newList) <= 1:\n        return newList\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to interchange the first and last element in a given list.\n\n### Signature\ndef swap_List(newList):\n\n### Test\nassert candidate([1,2,3]) == [3,2,1]",
        "timestamp": "2025-10-17T16:59:53.063828",
        "response_time": "1.03",
        "context": "{\"function_name\": \"swap_List\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 626,
        "solution": "```python\nimport math\n\ndef triangle_area(r):\n    if r < 0:\n        return None\n    # The largest triangle inscribed in a semicircle is a right triangle\n    # with the hypotenuse as the diameter of the semicircle.\n    # The area of such a triangle is (1/2) * base * height.\n    # Here, the base is the diameter of the semicircle, which is 2r,\n    # and the height is the radius of the semicircle.\n    return 0.5 * (2 * r) * r\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n### Signature\ndef triangle_area(r) :\n\n### Test\nassert candidate(-1) == None",
        "timestamp": "2025-10-17T16:59:55.510386",
        "response_time": "2.44",
        "context": "{\"function_name\": \"triangle_area\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 627,
        "solution": "```python\ndef find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return start\n    mid = (start + end) // 2\n    if array[mid] == mid:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        return find_First_Missing(array, start, mid - 1)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\n### Signature\ndef find_First_Missing(array,start=0,end=None):\n\n### Test\nassert candidate([0,1,2,3]) == 4",
        "timestamp": "2025-10-17T16:59:57.402738",
        "response_time": "1.89",
        "context": "{\"function_name\": \"find_First_Missing\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 628,
        "solution": "```python\ndef replace_spaces(string):\n    return string.replace(\" \", \"%20\")\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to replace all spaces in the given string with '%20'.\n\n### Signature\ndef replace_spaces(string):\n\n### Test\nassert candidate(\"My Name is Dawood\") == \"\"\"My%20Name%20is%20Dawood\"\"\"",
        "timestamp": "2025-10-17T16:59:57.822896",
        "response_time": "0.42",
        "context": "{\"function_name\": \"replace_spaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 629,
        "solution": "```python\ndef Split(list):\n    return [num for num in list if num % 2 == 0]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find even numbers from a list of numbers.\n\n### Signature\ndef Split(list):\n\n### Test\nassert candidate([1,2,3,4,5]) == [2,4]",
        "timestamp": "2025-10-17T16:59:58.302149",
        "response_time": "0.48",
        "context": "{\"function_name\": \"Split\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 630,
        "solution": "```python\ndef adjac(ele, sub = []):\n    x, y = ele\n    sub.append([x - 1, y])\n    sub.append([x + 1, y])\n    sub.append([x, y - 1])\n    sub.append([x, y + 1])\n    return sub\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n### Signature\ndef adjac(ele, sub = []):\n\n### Test\nassert candidate((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]",
        "timestamp": "2025-10-17T16:59:59.330108",
        "response_time": "1.03",
        "context": "{\"function_name\": \"get_coordinates\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 631,
        "solution": "```python\ndef replace_spaces(text):\n    return text.replace(' ', '_').replace('_', ' ')\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\n### Signature\ndef replace_spaces(text):\n\n### Test\nassert candidate('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
        "timestamp": "2025-10-17T16:59:59.761930",
        "response_time": "0.43",
        "context": "{\"function_name\": \"replace_spaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 632,
        "solution": "```python\ndef move_zero(num_list):\n    non_zero_index = 0\n    for num in num_list:\n        if num != 0:\n            num_list[non_zero_index] = num\n            non_zero_index += 1\n    for i in range(non_zero_index, len(num_list)):\n        num_list[i] = 0\n    return num_list\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to move all zeroes to the end of the given list.\n\n### Signature\ndef move_zero(num_list):\n\n### Test\nassert candidate([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
        "timestamp": "2025-10-17T17:00:00.932443",
        "response_time": "1.17",
        "context": "{\"function_name\": \"move_zero\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 633,
        "solution": "```python\n###START===\nfrom functools import reduce\n\ndef pair_xor_Sum(arr,n) :\n    return reduce(lambda x, y: x + y, [a ^ b for a in arr for b in arr if a != b])\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\n### Signature\ndef pair_xor_Sum(arr,n) :\n\n### Test\nassert candidate([5,9,7,6],4) == 47",
        "timestamp": "2025-10-17T17:00:01.766776",
        "response_time": "0.83",
        "context": "{\"function_name\": \"pair_xor_Sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 635,
        "solution": "```python\nimport heapq\n\ndef heap_sort(iterable):\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort the given list.\n\n### Signature\ndef heap_sort(iterable):\n\n### Test\nassert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "timestamp": "2025-10-17T17:00:02.448330",
        "response_time": "0.68",
        "context": "{\"function_name\": \"heap_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 637,
        "solution": "```python\n###START===\ndef noprofit_noloss(actual_cost,sale_amount):\n    return actual_cost == sale_amount\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given amount has no profit and no loss\n\n### Signature\ndef noprofit_noloss(actual_cost,sale_amount):\n\n### Test\nassert candidate(1500,1200)==False",
        "timestamp": "2025-10-17T17:00:03.049357",
        "response_time": "0.60",
        "context": "{\"function_name\": \"noprofit_noloss\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 638,
        "solution": "```python\nimport math\n\ndef wind_chill(v,t):\n    if v < 4.8 or t > 15:\n        return t\n    else:\n        return 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n### Signature\ndef wind_chill(v,t):\n\n### Test\nassert candidate(120,35)==40",
        "timestamp": "2025-10-17T17:00:04.343552",
        "response_time": "1.29",
        "context": "{\"function_name\": \"wind_chill\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 639,
        "solution": "```python\ndef sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name[0].isupper())\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n### Signature\ndef sample_nam(sample_names):\n\n### Test\nassert candidate(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16",
        "timestamp": "2025-10-17T17:00:04.907201",
        "response_time": "0.56",
        "context": "{\"function_name\": \"sample_nam\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 640,
        "solution": "```python\ndef remove_parenthesis(items):\n    return items.replace(\"(\", \"\").replace(\")\", \"\")\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n\n### Signature\ndef remove_parenthesis(items):\n\n### Test\nassert candidate([\"python (chrome)\"])==(\"python\")",
        "timestamp": "2025-10-17T17:00:05.356730",
        "response_time": "0.45",
        "context": "{\"function_name\": \"remove_parenthesis\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 641,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef is_nonagonal(n):\n    # Check if n is a nonagonal number\n    # A nonagonal number is given by the formula: n(7n - 5)/2\n    # We need to check if this formula gives us n when n is a nonagonal number\n    return n == (7 * n - 5) * n // 2\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth nonagonal number.\n\n### Signature\ndef is_nonagonal(n):\n\n### Test\nassert candidate(10) == 325",
        "timestamp": "2025-10-17T17:00:06.714644",
        "response_time": "1.36",
        "context": "{\"function_name\": \"is_nonagonal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 643,
        "solution": "```python\nimport re\n\ndef text_match_wordz_middle(text):\n    # Use regex to find 'z' in the middle of words, not at the start or end\n    return bool(re.search(r'\\b[^z]z[^z]\\b', text))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\n### Signature\ndef text_match_wordz_middle(text):\n\n### Test\nassert candidate(\"pythonzabc.\")==True",
        "timestamp": "2025-10-17T17:00:07.566988",
        "response_time": "0.85",
        "context": "{\"function_name\": \"text_match_wordz_middle\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 644,
        "solution": "```python\ndef reverse_Array_Upto_K(input, k):\n    # Reverse the array from the start to the given position k\n    input[:k+1] = input[:k+1][::-1]\n    return input\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to reverse an array upto a given position.\n\n### Signature\ndef reverse_Array_Upto_K(input, k):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
        "timestamp": "2025-10-17T17:00:08.330965",
        "response_time": "0.76",
        "context": "{\"function_name\": \"reverse_Array_Upto_K\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 720,
        "solution": "```python\ndef add_dict_to_tuple(test_tup, test_dict):\n    # Convert the tuple to a list to allow modification\n    test_tup = list(test_tup)\n    # Append the dictionary to the list\n    test_tup.append(test_dict)\n    # Convert the list back to a tuple\n    return tuple(test_tup)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\n### Signature\ndef add_dict_to_tuple(test_tup, test_dict):\n\n### Test\nassert candidate((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {\"\"\"MSAM\"\"\": 1, \"\"\"is\"\"\": 2, \"\"\"best\"\"\": 3})",
        "timestamp": "2025-10-17T17:00:09.411282",
        "response_time": "1.08",
        "context": "{\"function_name\": \"add_dict_to_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 721,
        "solution": "```python\nfrom typing import List\n\ndef maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    \n    # Initialize the first cell\n    dp[0][0] = cost[0][0]\n    \n    # Fill the first row\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    # Fill the first column\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    # Fill the rest of the dp table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # Calculate the maximum average\n    total_cost = dp[-1][-1]\n    total_cells = N * N\n    max_average = total_cost / total_cells\n    \n    return max_average\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n### Signature\ndef maxAverageOfPath(cost):\n\n### Test\nassert candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2",
        "timestamp": "2025-10-17T17:00:12.509423",
        "response_time": "3.10",
        "context": "{\"function_name\": \"maxAverageOfPath\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 722,
        "solution": "```python\n===START===\nfrom typing import *\nfrom collections import *\n\ndef filter_data(students,h,w):\n    return {name: height_weight for name, (height, weight) in students.items() if height > h and weight > w}\n\n===END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\n### Signature\ndef filter_data(students,h,w):\n\n### Test\nassert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}",
        "timestamp": "2025-10-17T17:00:13.342467",
        "response_time": "0.83",
        "context": "{\"function_name\": \"filter_data\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 723,
        "solution": "```python\ndef count_same_pair(nums1, nums2):\n    return sum(1 for a, b in zip(nums1, nums2) if a == b)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\n### Signature\ndef count_same_pair(nums1, nums2):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
        "timestamp": "2025-10-17T17:00:13.969939",
        "response_time": "0.63",
        "context": "{\"function_name\": \"count_same_pair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 724,
        "solution": "```python\n###START===\nfrom functools import reduce\n\ndef power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    # Calculate the sum of all digits\n    digit_sum = reduce(lambda x, y: int(x) + int(y), result_str)\n    return digit_sum\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\n### Signature\ndef power_base_sum(base, power):\n\n### Test\nassert candidate(2,100)==115\nassert candidate(8,10)==37",
        "timestamp": "2025-10-17T17:00:15.316903",
        "response_time": "1.35",
        "context": "{\"function_name\": \"power_base_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 725,
        "solution": "```python\nimport re\n\ndef extract_quotation(text1):\n    # Use regular expression to find all substrings between quotation marks\n    return re.findall(r'\"([^\"]+)\"', text1)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to extract values between quotation marks \" \" of the given string.\n\n### Signature\ndef extract_quotation(text1):\n\n### Test\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']",
        "timestamp": "2025-10-17T17:00:16.055667",
        "response_time": "0.74",
        "context": "{\"function_name\": \"extract_quotation\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 726,
        "solution": "```python\ndef multiply_elements(test_tup):\n    return tuple(test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n### Signature\ndef multiply_elements(test_tup):\n\n### Test\nassert candidate((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert candidate((2, 4, 5, 6, 7)) == (8, 20, 30, 42)",
        "timestamp": "2025-10-17T17:00:16.722870",
        "response_time": "0.67",
        "context": "{\"function_name\": \"multiply_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 728,
        "solution": "```python\ndef sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n### Signature\ndef sum_list(lst1,lst2):\n\n### Test\nassert candidate([10,20,30],[15,25,35])==[25,45,65]",
        "timestamp": "2025-10-17T17:00:17.301150",
        "response_time": "0.58",
        "context": "{\"function_name\": \"sum_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 730,
        "solution": "```python\ndef consecutive_duplicates(nums):\n    result = []\n    for num in nums:\n        if not result or num != result[-1]:\n            result.append(num)\n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove consecutive duplicates of a given list.\n\n### Signature\ndef consecutive_duplicates(nums):\n\n### Test\nassert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]",
        "timestamp": "2025-10-17T17:00:18.001743",
        "response_time": "0.70",
        "context": "{\"function_name\": \"consecutive_duplicates\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 731,
        "solution": "```python\nimport math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height using the Pythagorean theorem\n    slant_height = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area using the formula \u03c0rl\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\n### Signature\ndef lateralsurface_cone(r,h):\n\n### Test\nassert candidate(5,12)==204.20352248333654",
        "timestamp": "2025-10-17T17:00:19.146489",
        "response_time": "1.14",
        "context": "{\"function_name\": \"lateralsurface_cone\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 732,
        "solution": "```python\ndef replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\n### Signature\ndef replace_specialchar(text):\n\n### Test\nassert candidate('Python language, Programming language.')==('Python:language::Programming:language:')",
        "timestamp": "2025-10-17T17:00:19.660684",
        "response_time": "0.51",
        "context": "{\"function_name\": \"replace_specialchar\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 733,
        "solution": "```python\ndef find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\n### Signature\ndef find_first_occurrence(A, x):\n\n### Test\nassert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
        "timestamp": "2025-10-17T17:00:21.230319",
        "response_time": "1.57",
        "context": "{\"function_name\": \"find_first_occurrence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 734,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        left_product = 1\n        right_product = 1\n        for j in range(i):\n            left_product *= arr[j]\n        for k in range(i + 1, n):\n            right_product *= arr[k]\n        total_sum += left_product * right_product\n    return total_sum\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\n### Signature\ndef sum_Of_Subarray_Prod(arr):\n\n### Test\nassert candidate([1,2,3]) == 20",
        "timestamp": "2025-10-17T17:00:22.670313",
        "response_time": "1.44",
        "context": "{\"function_name\": \"sum_Of_Subarray_Prod\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 735,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef set_middle_bits(n):\n    # Calculate the number of bits in n\n    num_bits = n.bit_length()\n    \n    # Create a mask with all bits set except the first and last\n    mask = (1 << (num_bits - 1)) - 1\n    \n    # Toggle the middle bits\n    result = n ^ mask\n    \n    return result\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\n### Signature\ndef set_middle_bits(n):\n\n### Test\nassert candidate(9) == 15\nassert candidate(10) == 12",
        "timestamp": "2025-10-17T17:00:24.039035",
        "response_time": "1.37",
        "context": "{\"function_name\": \"toggle_middle_bits\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 736,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef left_insertion(a, x):\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\n### Signature\ndef left_insertion(a, x):\n\n### Test\nassert candidate([1,2,4,5],6)==4",
        "timestamp": "2025-10-17T17:00:25.171044",
        "response_time": "1.13",
        "context": "{\"function_name\": \"left_insertion\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 737,
        "solution": "```python\nimport re\n\ndef check_str(string):\n    # Use regex to check if the string starts with a vowel\n    return bool(re.match(r'^[aeiouAEIOU]', string))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\n### Signature\ndef check_str(string):\n\n### Test\nassert candidate(\"annie\")",
        "timestamp": "2025-10-17T17:00:25.877148",
        "response_time": "0.70",
        "context": "{\"function_name\": \"check_str\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 738,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef geometric_sum(n):\n    if n == 0:\n        return 1\n    else:\n        return 1 / (1 + geometric_sum(n - 1))\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\n### Signature\ndef geometric_sum(n):\n\n### Test\nassert candidate(7) == 1.9921875",
        "timestamp": "2025-10-17T17:00:26.697547",
        "response_time": "0.82",
        "context": "{\"function_name\": \"geometric_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 739,
        "solution": "```python\nimport math\n\ndef find_Index(n):\n    # Calculate the smallest triangular number with n digits\n    triangular_number = 1\n    index = 1\n    while len(str(triangular_number)) < n:\n        index += 1\n        triangular_number = index * (index + 1) // 2\n    return index\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\n### Signature\ndef find_Index(n):\n\n### Test\nassert candidate(2) == 4",
        "timestamp": "2025-10-17T17:00:27.803723",
        "response_time": "1.10",
        "context": "{\"function_name\": \"find_Index\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 740,
        "solution": "```python\ndef tuple_to_dict(test_tup):\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\n### Signature\ndef tuple_to_dict(test_tup):\n\n### Test\nassert candidate((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}",
        "timestamp": "2025-10-17T17:00:28.354407",
        "response_time": "0.55",
        "context": "{\"function_name\": \"tuple_to_dict\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 741,
        "solution": "```python\n###START===\ndef all_Characters_Same(s) :\n    return len(set(s)) == 1\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether all the characters are same or not.\n\n### Signature\ndef all_Characters_Same(s) :\n\n### Test\nassert candidate(\"python\") == False",
        "timestamp": "2025-10-17T17:00:28.881528",
        "response_time": "0.52",
        "context": "{\"function_name\": \"all_Characters_Same\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 742,
        "solution": "```python\nimport math\n\ndef area_tetrahedron(side):\n    # Calculate the area of a tetrahedron using the formula:\n    # Area = (sqrt(3) / 4) * side^2\n    return (math.sqrt(3) / 4) * side ** 2\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to caluclate the area of a tetrahedron.\n\n### Signature\ndef area_tetrahedron(side):\n\n### Test\nassert candidate(3)==15.588457268119894",
        "timestamp": "2025-10-17T17:00:29.894802",
        "response_time": "1.01",
        "context": "{\"function_name\": \"area_tetrahedron\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 743,
        "solution": "```python\ndef rotate_right(list, m):\n    n = len(list)\n    m = m % n  # In case m is greater than the length of the list\n    return list[-m:] + list[:-m]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\n### Signature\ndef rotate_right(list, m):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]",
        "timestamp": "2025-10-17T17:00:30.664619",
        "response_time": "0.77",
        "context": "{\"function_name\": \"rotate_right\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 744,
        "solution": "```python\ndef check_none(test_tup):\n    return any(ele is None for ele in test_tup)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given tuple has any none value or not.\n\n### Signature\ndef check_none(test_tup):\n\n### Test\nassert candidate((10, 4, 5, 6, None)) == True",
        "timestamp": "2025-10-17T17:00:31.135788",
        "response_time": "0.47",
        "context": "{\"function_name\": \"check_none\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 745,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(n):\n        digits = set(str(n))\n        if '0' in digits:\n            return False\n        for digit in digits:\n            if n % int(digit) != 0:\n                return False\n        return True\n\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\n### Signature\ndef divisible_by_digits(startnum, endnum):\n\n### Test\nassert candidate(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
        "timestamp": "2025-10-17T17:00:32.576380",
        "response_time": "1.44",
        "context": "{\"function_name\": \"divisible_by_digits\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 746,
        "solution": "```python\nimport math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    return (math.pi * r**2) * (a / 360)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\n### Signature\ndef sector_area(r,a):\n\n### Test\nassert candidate(4,45)==6.283185307179586",
        "timestamp": "2025-10-17T17:00:33.342182",
        "response_time": "0.76",
        "context": "{\"function_name\": \"sector_area\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 747,
        "solution": "```python\ndef lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    dp = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    return dp[m][n][o]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n### Signature\ndef lcs_of_three(X, Y, Z):\n\n### Test\nassert candidate('AGGT12', '12TXAYB', '12XBA') == 2",
        "timestamp": "2025-10-17T17:00:36.030148",
        "response_time": "2.69",
        "context": "{\"function_name\": \"lcs_of_three\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 748,
        "solution": "```python\ndef capital_words_spaces(str1):\n    return ' '.join(word for word in str1.split() if word[0].isupper())\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to put spaces between words starting with capital letters in a given string.\n\n### Signature\ndef capital_words_spaces(str1):\n\n### Test\nassert candidate(\"Python\") == \"\"\"Python\"\"\"",
        "timestamp": "2025-10-17T17:00:36.628911",
        "response_time": "0.60",
        "context": "{\"function_name\": \"capital_words_spaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 749,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef sort_numeric_strings(nums_str):\n    return sorted(nums_str, key=int)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n### Signature\ndef sort_numeric_strings(nums_str):\n\n### Test\nassert candidate( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
        "timestamp": "2025-10-17T17:00:37.186993",
        "response_time": "0.56",
        "context": "{\"function_name\": \"sort_numeric_strings\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 750,
        "solution": "```python\ndef add_tuple(test_list, test_tup):\n    test_list.extend(test_tup)\n    return test_list\n\n# ===START===\n# ===END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to add the given tuple to the given list.\n\n### Signature\ndef add_tuple(test_list, test_tup):\n\n### Test\nassert candidate([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]",
        "timestamp": "2025-10-17T17:00:37.804567",
        "response_time": "0.62",
        "context": "{\"function_name\": \"add_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 751,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef check_min_heap_helper(arr, i):\n    n = len(arr)\n    # Base case: if i is a leaf node, it's a min heap\n    if 2 * i + 1 >= n:\n        return True\n    # Check if the current node is less than or equal to its children\n    if arr[i] <= arr[2 * i + 1] and arr[i] <= arr[2 * i + 2] and check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2):\n        return True\n    return False\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n### Signature\ndef check_min_heap_helper(arr, i):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6]) == True",
        "timestamp": "2025-10-17T17:00:39.810342",
        "response_time": "2.00",
        "context": "{\"function_name\": \"check_min_heap\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 752,
        "solution": "```python\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + 2 * b\n        return b\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\n### Signature\ndef jacobsthal_num(n):\n\n### Test\nassert candidate(5) == 11\nassert candidate(2) == 1",
        "timestamp": "2025-10-17T17:00:40.971160",
        "response_time": "1.16",
        "context": "{\"function_name\": \"jacobsthal_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 753,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef min_k(test_list, K):\n    # Sort the list of tuples based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    # Return the first K elements from the sorted list\n    return test_list[:K]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n### Signature\ndef min_k(test_list, K):\n\n### Test\nassert candidate([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
        "timestamp": "2025-10-17T17:00:41.945013",
        "response_time": "0.97",
        "context": "{\"function_name\": \"min_k\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 754,
        "solution": "```python\ndef extract_index_list(l1, l2, l3):\n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Iterate over the indices of the lists\n    for i in range(len(l1)):\n        # Check if the elements at the current index are the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # If they are, add the element to the common_elements list\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\n### Signature\ndef extract_index_list(l1, l2, l3):\n\n### Test\nassert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
        "timestamp": "2025-10-17T17:00:43.643548",
        "response_time": "1.70",
        "context": "{\"function_name\": \"extract_index_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 755,
        "solution": "```python\ndef second_smallest(numbers):\n    if len(numbers) < 2:\n        return None  # Return None if there are less than 2 numbers\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the second smallest number in a list.\n\n### Signature\ndef second_smallest(numbers):\n\n### Test\nassert candidate([1, 2, -8, -2, 0, -2])==-2\nassert candidate([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
        "timestamp": "2025-10-17T17:00:45.105883",
        "response_time": "1.46",
        "context": "{\"function_name\": \"second_smallest\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 756,
        "solution": "```python\nimport re\n\ndef text_match_zero_one(text):\n    # Use regular expression to match 'a' followed by one or more 'b's\n    pattern = 'ab+'\n    return bool(re.search(pattern, text))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\n### Signature\ndef text_match_zero_one(text):\n\n### Test\nassert candidate(\"ac\")==False\nassert candidate(\"dc\")==False\nassert candidate(\"abbbba\")==True",
        "timestamp": "2025-10-17T17:00:45.903594",
        "response_time": "0.80",
        "context": "{\"function_name\": \"text_match_zero_one\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 757,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef count_reverse_pairs(test_list):\n    # Initialize a counter for reverse pairs\n    count = 0\n    \n    # Iterate over each string in the list\n    for i in range(len(test_list)):\n        # Check if the reverse of the current string is in the list\n        if test_list[i][::-1] in test_list:\n            # Increment the counter if a reverse pair is found\n            count += 1\n    \n    # Return the total count of reverse pairs\n    return count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\n### Signature\ndef count_reverse_pairs(test_list):\n\n### Test\nassert candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2",
        "timestamp": "2025-10-17T17:00:47.474768",
        "response_time": "1.57",
        "context": "{\"function_name\": \"count_reverse_pairs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 758,
        "solution": "```python\nfrom collections import defaultdict\n\ndef unique_sublists(list1):\n    # Convert each list to a tuple and count occurrences\n    count_dict = defaultdict(int)\n    for sublist in list1:\n        count_dict[tuple(sublist)] += 1\n    return dict(count_dict)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n### Signature\ndef unique_sublists(list1):\n\n### Test\nassert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
        "timestamp": "2025-10-17T17:00:48.395799",
        "response_time": "0.92",
        "context": "{\"function_name\": \"unique_sublists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 759,
        "solution": "```python\nimport re\n\ndef is_decimal(num):\n    # Regular expression to match a decimal number with a precision of 2\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, num))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\n### Signature\ndef is_decimal(num):\n\n### Test\nassert candidate('123.11')==True\nassert candidate('e666.86')==False",
        "timestamp": "2025-10-17T17:00:49.228229",
        "response_time": "0.83",
        "context": "{\"function_name\": \"is_decimal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 760,
        "solution": "```python\ndef unique_Element(arr):\n    return len(set(arr)) == 1\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\n### Signature\ndef unique_Element(arr):\n\n### Test\nassert candidate([1,1,1]) == True",
        "timestamp": "2025-10-17T17:00:49.651959",
        "response_time": "0.41",
        "context": "{\"function_name\": \"unique_Element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 762,
        "solution": "```python\n###START===\ndef check_monthnumber_number(monthnum3):\n    return monthnum3 in [4, 6, 9, 11]\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n### Signature\ndef check_monthnumber_number(monthnum3):\n\n### Test\nassert candidate(6)==True",
        "timestamp": "2025-10-17T17:00:50.303928",
        "response_time": "0.65",
        "context": "{\"function_name\": \"check_monthnumber_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 763,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef find_min_diff(arr,n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n    return min_diff\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\n### Signature\ndef find_min_diff(arr,n):\n\n### Test\nassert candidate((1,5,3,19,18,25),6) == 1",
        "timestamp": "2025-10-17T17:00:51.218118",
        "response_time": "0.91",
        "context": "{\"function_name\": \"find_min_diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 764,
        "solution": "```python\n###START===\ndef number_ctr(str):\n    return sum(c.isdigit() for c in str)\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count number of digits in a given string.\n\n### Signature\ndef number_ctr(str):\n\n### Test\nassert candidate('program2bedone') == 1\nassert candidate('3wonders') == 1",
        "timestamp": "2025-10-17T17:00:51.728367",
        "response_time": "0.51",
        "context": "{\"function_name\": \"number_ctr\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 765,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef is_polite(n):\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_polite(n // 2)\n    else:\n        return is_polite((n + 1) // 2)\n\ndef nth_polite_number(n):\n    count = 0\n    num = 1\n    while count < n:\n        if is_polite(num):\n            count += 1\n        num += 1\n    return num - 1\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\n### Signature\ndef is_polite(n):\n\n### Test\nassert candidate(7) == 11",
        "timestamp": "2025-10-17T17:00:53.418490",
        "response_time": "1.69",
        "context": "{\"function_name\": \"is_polite\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 766,
        "solution": "```python\ndef pair_wise(l1):\n    return list(zip(l1, l1[1:]))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to return a list of all pairs of consecutive items in a given list.\n\n### Signature\ndef pair_wise(l1):\n\n### Test\nassert candidate([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert candidate([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
        "timestamp": "2025-10-17T17:00:53.918740",
        "response_time": "0.50",
        "context": "{\"function_name\": \"pair_wise\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 767,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef get_pairs_count(arr, sum):\n    count = 0\n    seen = set()\n    for num in arr:\n        complement = sum - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\n### Signature\ndef get_pairs_count(arr, sum):\n\n### Test\nassert candidate([1,1,1,1],2) == 6\nassert candidate([1,5,7,-1,5],6) == 3",
        "timestamp": "2025-10-17T17:00:54.908354",
        "response_time": "0.99",
        "context": "{\"function_name\": \"get_pairs_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 769,
        "solution": "```python\ndef Diff(li1, li2):\n    return list(set(li1) - set(li2))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to get the difference between two lists.\n\n### Signature\ndef Diff(li1,li2):\n\n### Test\nassert (candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]",
        "timestamp": "2025-10-17T17:00:55.404811",
        "response_time": "0.49",
        "context": "{\"function_name\": \"Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 770,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef odd_num_sum(n) :\n    return sum((2*i + 1)**4 for i in range(n))\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\n### Signature\ndef odd_num_sum(n) :\n\n### Test\nassert candidate(2) == 82",
        "timestamp": "2025-10-17T17:00:56.108989",
        "response_time": "0.70",
        "context": "{\"function_name\": \"odd_num_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 771,
        "solution": "```python\n###START===\nfrom collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in exp:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        else:\n            return False\n    \n    return not stack\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\n### Signature\ndef check_expression(exp):\n\n### Test\nassert candidate(\"{()}[{}]\") == True",
        "timestamp": "2025-10-17T17:00:57.457907",
        "response_time": "1.35",
        "context": "{\"function_name\": \"check_expression\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 772,
        "solution": "```python\ndef remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    # Filter out words with length K\n    filtered_words = [word for word in words if len(word) != K]\n    # Join the filtered words back into a string\n    result = ' '.join(filtered_words)\n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove all the words with k length in the given string.\n\n### Signature\ndef remove_length(test_str, K):\n\n### Test\nassert candidate('The person is most value tet', 3) == 'person is most value'",
        "timestamp": "2025-10-17T17:00:58.586654",
        "response_time": "1.13",
        "context": "{\"function_name\": \"remove_length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 773,
        "solution": "```python\n###START===\nimport re\n\ndef occurance_substring(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (pattern, match.start(), match.end())\n    else:\n        return None\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n### Signature\ndef occurance_substring(text,pattern):\n\n### Test\nassert candidate('python programming, python language','python')==('python', 0, 6)\nassert candidate('python programming,programming language','programming')==('programming', 7, 18)",
        "timestamp": "2025-10-17T17:00:59.448209",
        "response_time": "0.86",
        "context": "{\"function_name\": \"occurance_substring\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 775,
        "solution": "```python\ndef odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\n### Signature\ndef odd_position(nums):\n\n### Test\nassert candidate([2,1,4,3,6,7,6,3]) == True",
        "timestamp": "2025-10-17T17:01:00.196592",
        "response_time": "0.75",
        "context": "{\"function_name\": \"odd_position\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 776,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\n### Signature\ndef count_vowels(test_str):\n\n### Test\nassert candidate('bestinstareels') == 7",
        "timestamp": "2025-10-17T17:01:01.571070",
        "response_time": "1.37",
        "context": "{\"function_name\": \"count_vowels\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 777,
        "solution": "```python\ndef find_sum(arr):\n    # Create a dictionary to count occurrences of each element\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Calculate the sum of elements that appear only once\n    sum_non_repeated = sum(num for num, count in count_dict.items() if count == 1)\n    return sum_non_repeated\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of non-repeated elements in a given list.\n\n### Signature\ndef find_sum(arr):\n\n### Test\nassert candidate([1,2,3,1,1,4,5,6]) == 21",
        "timestamp": "2025-10-17T17:01:03.041036",
        "response_time": "1.47",
        "context": "{\"function_name\": \"find_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 778,
        "solution": "```python\ndef pack_consecutive_duplicates(list1):\n    result = []\n    current_sublist = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] == list1[i - 1]:\n            current_sublist.append(list1[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [list1[i]]\n    result.append(current_sublist)\n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\n### Signature\ndef pack_consecutive_duplicates(list1):\n\n### Test\nassert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]",
        "timestamp": "2025-10-17T17:01:04.335593",
        "response_time": "1.29",
        "context": "{\"function_name\": \"pack_consecutive_duplicates\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 779,
        "solution": "```python\nfrom collections import defaultdict\n\ndef unique_sublists(list1):\n    count_dict = defaultdict(int)\n    for sublist in list1:\n        count_dict[tuple(sublist)] += 1\n    return dict(count_dict)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\n### Signature\ndef unique_sublists(list1):\n\n### Test\nassert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
        "timestamp": "2025-10-17T17:01:05.120153",
        "response_time": "0.78",
        "context": "{\"function_name\": \"unique_sublists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 780,
        "solution": "```python\nfrom itertools import combinations\n\ndef find_combinations(test_list):\n    res = []\n    for i in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            res.append(tuple(sum(sub) for sub in zip(*comb)))\n    return res\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\n### Signature\ndef find_combinations(test_list):\n\n### Test\nassert candidate([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]",
        "timestamp": "2025-10-17T17:01:06.067926",
        "response_time": "0.95",
        "context": "{\"function_name\": \"find_combinations\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 781,
        "solution": "```python\n###START===\nfrom math import sqrt\n\ndef count_divisors(n) :\n    count = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count % 2 == 0\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\n### Signature\ndef count_divisors(n) :\n\n### Test\nassert candidate(10)",
        "timestamp": "2025-10-17T17:01:07.255597",
        "response_time": "1.19",
        "context": "{\"function_name\": \"count_divisors\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 782,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            total_sum += sum(arr[i:j+1])\n    return total_sum\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\n### Signature\ndef odd_length_sum(arr):\n\n### Test\nassert candidate([1,2,4]) == 14",
        "timestamp": "2025-10-17T17:01:08.215928",
        "response_time": "0.96",
        "context": "{\"function_name\": \"odd_length_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 783,
        "solution": "```python\nimport math\n\ndef rgb_to_hsv(r, g, b):\n    # Normalize RGB values to the range [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    # Find the maximum and minimum values in the RGB tuple\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    # Calculate the hue\n    if diff == 0:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    else:  # max_val == b\n        h = (60 * ((r - g) / diff) + 240) % 360\n    \n    # Calculate the saturation\n    if max_val == 0:\n        s = 0\n    else:\n        s = (diff / max_val) * 100\n    \n    # Calculate the value\n    v = max_val * 100\n    \n    return h, s, v\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n### Signature\ndef rgb_to_hsv(r, g, b):\n\n### Test\nassert candidate(255, 255, 255)==(0, 0.0, 100.0)",
        "timestamp": "2025-10-17T17:01:12.132564",
        "response_time": "3.91",
        "context": "{\"function_name\": \"rgb_to_hsv\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 784,
        "solution": "```python\ndef mul_even_odd(list1):\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                break\n        else:\n            if odd is None:\n                odd = num\n            else:\n                break\n    return even * odd if even is not None and odd is not None else 0\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the product of first even and odd number of a given list.\n\n### Signature\ndef mul_even_odd(list1):\n\n### Test\nassert candidate([1,3,5,7,4,1,6,8])==4",
        "timestamp": "2025-10-17T17:01:13.508156",
        "response_time": "1.37",
        "context": "{\"function_name\": \"mul_even_odd\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 785,
        "solution": "```python\nimport re\n\ndef tuple_str_int(test_str):\n    # Use regular expression to find all numbers in the string\n    numbers = re.findall(r'\\d+', test_str)\n    # Convert the found numbers to integers and return as a tuple\n    return tuple(map(int, numbers))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert tuple string to integer tuple.\n\n### Signature\ndef tuple_str_int(test_str):\n\n### Test\nassert candidate(\"(7, 8, 9)\") == (7, 8, 9)\nassert candidate(\"(1, 2, 3)\") == (1, 2, 3)",
        "timestamp": "2025-10-17T17:01:14.407820",
        "response_time": "0.90",
        "context": "{\"function_name\": \"tuple_str_int\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 786,
        "solution": "```python\ndef right_insertion(a, x):\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\n### Signature\ndef right_insertion(a, x):\n\n### Test\nassert candidate([1,2,4,5],6)==4",
        "timestamp": "2025-10-17T17:01:15.422569",
        "response_time": "1.01",
        "context": "{\"function_name\": \"right_insertion\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 787,
        "solution": "```python\nimport re\n\ndef text_match_three(text):\n    # Use regular expression to find a string that starts with 'a' followed by exactly three 'b's\n    pattern = r'^a{1}b{3}$'\n    return bool(re.search(pattern, text))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by three 'b'.\n\n### Signature\ndef text_match_three(text):\n\n### Test\nassert not candidate(\"ac\")\nassert not candidate(\"dc\")",
        "timestamp": "2025-10-17T17:01:16.364030",
        "response_time": "0.94",
        "context": "{\"function_name\": \"text_match_three\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 788,
        "solution": "```python\ndef new_tuple(test_list, test_str):\n    # Create a new tuple by concatenating the string and each element in the list\n    result = (test_str,) + tuple(test_list)\n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to create a new tuple from the given string and list.\n\n### Signature\ndef new_tuple(test_list, test_str):\n\n### Test\nassert candidate([\"WEB\", \"is\"], \"best\") == (\"\"\"WEB\"\"\", \"\"\"is\"\"\", \"\"\"best\"\"\")",
        "timestamp": "2025-10-17T17:01:17.134421",
        "response_time": "0.77",
        "context": "{\"function_name\": \"new_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 790,
        "solution": "```python\ndef even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether every even index contains even numbers of a given list.\n\n### Signature\ndef even_position(nums):\n\n### Test\nassert candidate([3,2,1]) == False",
        "timestamp": "2025-10-17T17:01:17.876933",
        "response_time": "0.74",
        "context": "{\"function_name\": \"even_position\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 791,
        "solution": "```python\ndef remove_nested(test_tup):\n    # Initialize an empty list to store the result\n    res = []\n    # Iterate over each element in the input tuple\n    for ele in test_tup:\n        # Check if the element is not a tuple\n        if not isinstance(ele, tuple):\n            # If not, append it to the result list\n            res.append(ele)\n    # Convert the list back to a tuple and return it\n    return tuple(res)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove tuples from the given tuple.\n\n### Signature\ndef remove_nested(test_tup):\n\n### Test\nassert candidate((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert candidate((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)",
        "timestamp": "2025-10-17T17:01:19.267141",
        "response_time": "1.39",
        "context": "{\"function_name\": \"remove_nested\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 792,
        "solution": "```python\ndef count_list(input_list):\n    return len(input_list)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of lists in a given number of lists.\n\n### Signature\ndef count_list(input_list):\n\n### Test\nassert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4",
        "timestamp": "2025-10-17T17:01:19.678806",
        "response_time": "0.41",
        "context": "{\"function_name\": \"count_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 793,
        "solution": "```python\ndef last(arr, x):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1  # Move to the right to find the last occurrence\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the last position of an element in a sorted array.\n\n### Signature\ndef last(arr,x):\n\n### Test\nassert candidate([1,2,3],1) == 0",
        "timestamp": "2025-10-17T17:01:21.269321",
        "response_time": "1.59",
        "context": "{\"function_name\": \"last\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 794,
        "solution": "```python\nimport re\n\ndef text_starta_endb(text):\n    # Use regular expression to match the pattern\n    return bool(re.search(r'^a.*b$', text))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n### Signature\ndef text_starta_endb(text):\n\n### Test\nassert candidate(\"aabbbb\")",
        "timestamp": "2025-10-17T17:01:21.908822",
        "response_time": "0.64",
        "context": "{\"function_name\": \"text_starta_endb\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 796,
        "solution": "```python\n###START===\ndef return_sum(dict):\n    return sum(dict.values())\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite function to find the sum of all items in the given dictionary.\n\n### Signature\ndef return_sum(dict):\n\n### Test\nassert candidate({'a': 100, 'b':200, 'c':300}) == 600",
        "timestamp": "2025-10-17T17:01:22.350163",
        "response_time": "0.44",
        "context": "{\"function_name\": \"return_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 797,
        "solution": "```python\n###START===\ndef sum_odd(n):\n    return sum(i for i in range(n) if i % 2 != 0)\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\n### Signature\ndef sum_odd(n):\n\n### Test\nassert candidate(2,5) == 8",
        "timestamp": "2025-10-17T17:01:23.014900",
        "response_time": "0.66",
        "context": "{\"function_name\": \"sum_in_range\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 798,
        "solution": "```python\ndef _sum(arr):\n    return sum(arr)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of an array.\n\n### Signature\ndef _sum(arr):\n\n### Test\nassert candidate([1, 2, 3]) == 6",
        "timestamp": "2025-10-17T17:01:23.412253",
        "response_time": "0.39",
        "context": "{\"function_name\": \"_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 799,
        "solution": "```python\ndef left_rotate(n, d):\n    # Ensure d is within the range of 0 to 31\n    d = d % 32\n    # Perform the left rotation\n    return (n << d) | (n >> (32 - d))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n### Signature\ndef left_rotate(n,d):\n\n### Test\nassert candidate(16,2) == 64\nassert candidate(10,2) == 40\nassert candidate(99,3) == 792",
        "timestamp": "2025-10-17T17:01:24.319384",
        "response_time": "0.90",
        "context": "{\"function_name\": \"left_rotate\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 800,
        "solution": "```python\ndef remove_all_spaces(text):\n    return text.replace(\" \", \"\")\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove all whitespaces from a string.\n\n### Signature\ndef remove_all_spaces(text):\n\n### Test\nassert candidate('python  program')==('pythonprogram')\nassert candidate('python   programming    language')==('pythonprogramminglanguage')",
        "timestamp": "2025-10-17T17:01:24.717223",
        "response_time": "0.40",
        "context": "{\"function_name\": \"remove_all_spaces\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 801,
        "solution": "```python\n###START===\ndef test_three_equal(x, y, z):\n    return x == y == z\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of equal numbers from three given integers.\n\n### Signature\ndef test_three_equal(x,y,z):\n\n### Test\nassert candidate(1,1,1) == 3",
        "timestamp": "2025-10-17T17:01:25.267178",
        "response_time": "0.55",
        "context": "{\"function_name\": \"test_three_equal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 802,
        "solution": "```python\ndef count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            return i + 1\n    return 0\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n### Signature\ndef count_rotation(arr):\n\n### Test\nassert candidate([3,2,1]) == 1\nassert candidate([4,5,1,2,3]) == 2",
        "timestamp": "2025-10-17T17:01:26.083575",
        "response_time": "0.81",
        "context": "{\"function_name\": \"count_rotation\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 803,
        "solution": "```python\nimport math\n\ndef is_perfect_square(n) :\n    if n < 0 :\n        return False\n    root = math.isqrt(n)\n    return root * root == n\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\n### Signature\ndef is_perfect_square(n) :\n\n### Test\nassert not candidate(10)\nassert candidate(36)\nassert not candidate(14)",
        "timestamp": "2025-10-17T17:01:26.759497",
        "response_time": "0.67",
        "context": "{\"function_name\": \"is_perfect_square\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 804,
        "solution": "```python\ndef is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the product of numbers in a list is even or not.\n\n### Signature\ndef is_product_even(arr):\n\n### Test\nassert candidate([1,2,3])",
        "timestamp": "2025-10-17T17:01:27.405114",
        "response_time": "0.64",
        "context": "{\"function_name\": \"is_product_even\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 805,
        "solution": "```python\ndef max_sum_list(lists):\n    return max(lists, key=sum)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\n### Signature\ndef max_sum_list(lists):\n\n### Test\nassert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]",
        "timestamp": "2025-10-17T17:01:27.828829",
        "response_time": "0.42",
        "context": "{\"function_name\": \"max_sum_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 806,
        "solution": "```python\ndef max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find maximum run of uppercase characters in the given string.\n\n### Signature\ndef max_run_uppercase(test_str):\n\n### Test\nassert candidate('GeMKSForGERksISBESt') == 5",
        "timestamp": "2025-10-17T17:01:28.889469",
        "response_time": "1.06",
        "context": "{\"function_name\": \"max_run_uppercase\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 807,
        "solution": "```python\ndef first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the first odd number in a given list of numbers.\n\n### Signature\ndef first_odd(nums):\n\n### Test\nassert candidate([1,3,5]) == 1",
        "timestamp": "2025-10-17T17:01:29.423999",
        "response_time": "0.53",
        "context": "{\"function_name\": \"first_odd\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 808,
        "solution": "```python\n###START===\nfrom typing import *\nfrom collections import *\n\ndef check_K(test_tup, K):\n    return K in test_tup\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given tuples contain the k or not.\n\n### Signature\ndef check_K(test_tup, K):\n\n### Test\nassert candidate((10, 4, 5, 6, 8), 6) == True",
        "timestamp": "2025-10-17T17:01:30.036595",
        "response_time": "0.61",
        "context": "{\"function_name\": \"check_K\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b_second_half_td",
        "dataset_row_id": 809,
        "solution": "```python\ndef check_smaller(test_tup1, test_tup2):\n    return all(x < y for x, y in zip(test_tup1, test_tup2))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n### Signature\ndef check_smaller(test_tup1, test_tup2):\n\n### Test\nassert candidate((1, 2, 3), (2, 3, 4)) == False",
        "timestamp": "2025-10-17T17:01:30.741041",
        "response_time": "0.70",
        "context": "{\"function_name\": \"check_smaller\"}"
    }
]