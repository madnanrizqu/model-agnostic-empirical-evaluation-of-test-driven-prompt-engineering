{
  "Qwen/Qwen2.5-Coder-7B-Instruct": [
    {
      "task_id": 2,
      "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):\n\n### Test\nassert set(candidate((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def similar_elements(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup2))",
      "test_content": "from llm_output import similar_elements\n\ndef check(candidate):\n    assert set(candidate((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n    assert set(candidate((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))\n    assert set(candidate((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))\n\ncheck(similar_elements)",
      "context": "{\"function_name\": \"similar_elements\"}",
      "attempt_num": 1
    },
    {
      "task_id": 3,
      "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):\n\n### Test\nassert candidate(2) == False\nassert candidate(10) == True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
      "test_content": "from llm_output import is_not_prime\n\ndef check(candidate):\n    assert candidate(2) == False\n    assert candidate(10) == True\n    assert candidate(35) == True\n    assert candidate(37) == False\n\ncheck(is_not_prime)",
      "context": "{\"function_name\": \"is_not_prime\"}",
      "attempt_num": 1
    },
    {
      "task_id": 4,
      "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):\n\n### Test\nassert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)",
      "test_content": "from llm_output import heap_queue_largest\n\ndef check(candidate):\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n\ncheck(heap_queue_largest)",
      "context": "{\"function_name\": \"heap_queue_largest\"}",
      "attempt_num": 1
    },
    {
      "task_id": 7,
      "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):\n\n### Test\nassert set(candidate('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)",
      "test_content": "from llm_output import find_char_long\n\ndef check(candidate):\n    assert set(candidate('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n    assert set(candidate('Jing Eco and Tech')) == set(['Jing', 'Tech'])\n    assert set(candidate('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])\n\ncheck(find_char_long)",
      "context": "{\"function_name\": \"find_char_long\"}",
      "attempt_num": 1
    },
    {
      "task_id": 8,
      "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]",
      "test_content": "from llm_output import square_nums\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10,20,30])==([100,400,900])\n    assert candidate([12,15])==([144,225])\n\ncheck(square_nums)",
      "context": "{\"function_name\": \"square_nums\"}",
      "attempt_num": 1
    },
    {
      "task_id": 9,
      "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):\n\n### Test\nassert candidate(\"aaaa\") == 1",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def find_Rotations(str):\n    n = len(str)\n    for i in range(1, n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n",
      "test_content": "from llm_output import find_Rotations\n\ndef check(candidate):\n    assert candidate(\"aaaa\") == 1\n    assert candidate(\"ab\") == 2\n    assert candidate(\"abc\") == 3\n\ncheck(find_Rotations)",
      "context": "{\"function_name\": \"find_Rotations\"}",
      "attempt_num": 1
    },
    {
      "task_id": 11,
      "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):\n\n### Test\nassert candidate(\"hello\",\"l\") == \"heo\"",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence + 1:]\n    \n    last_occurrence = s.rfind(ch)\n    if last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence + 1:]\n    \n    return s",
      "test_content": "from llm_output import remove_Occ\n\ndef check(candidate):\n    assert candidate(\"hello\",\"l\") == \"heo\"\n    assert candidate(\"abcda\",\"a\") == \"bcd\"\n    assert candidate(\"PHP\",\"P\") == \"H\"\n\ncheck(remove_Occ)",
      "context": "{\"function_name\": \"remove_Occ\"}",
      "attempt_num": 1
    },
    {
      "task_id": 14,
      "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :\n\n### Test\nassert candidate(10,8,6) == 240",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef find_Volume(l, b, h):\n    return 0.5 * l * b * h",
      "test_content": "from llm_output import find_Volume\n\ndef check(candidate):\n    assert candidate(10,8,6) == 240\n    assert candidate(3,2,2) == 6\n    assert candidate(1,2,1) == 1\n\ncheck(find_Volume)",
      "context": "{\"function_name\": \"find_Volume\"}",
      "attempt_num": 1
    },
    {
      "task_id": 16,
      "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):\n\n### Test\nassert candidate(\"aab_cbbbc\")==(True)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))",
      "test_content": "from llm_output import text_lowercase_underscore\n\ndef check(candidate):\n    assert candidate(\"aab_cbbbc\")==(True)\n    assert candidate(\"aab_Abbbc\")==(False)\n    assert candidate(\"Aaab_abbbc\")==(False)\n\ncheck(text_lowercase_underscore)",
      "context": "{\"function_name\": \"text_lowercase_underscore\"}",
      "attempt_num": 1
    },
    {
      "task_id": 17,
      "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):\n\n### Test\nassert candidate(10)==40",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def square_perimeter(a):\n    return 4 * a",
      "test_content": "from llm_output import square_perimeter\n\ndef check(candidate):\n    assert candidate(10)==40\n    assert candidate(5)==20\n    assert candidate(4)==16\n\ncheck(square_perimeter)",
      "context": "{\"function_name\": \"square_perimeter\"}",
      "attempt_num": 1
    },
    {
      "task_id": 19,
      "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):\n\n### Test\nassert candidate(([1,2,3,4,5]))==False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def test_duplicate(arraynums):\n    return len(arraynums) != len(set(arraynums))",
      "test_content": "from llm_output import test_duplicate\n\ndef check(candidate):\n    assert candidate(([1,2,3,4,5]))==False\n    assert candidate(([1,2,3,4, 4]))==True\n    assert candidate([1,1,2,2,3,3,4,4,5])==True\n\ncheck(test_duplicate)",
      "context": "{\"function_name\": \"test_duplicate\"}",
      "attempt_num": 1
    },
    {
      "task_id": 57,
      "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :\n\n### Test\nassert candidate([1,2,3]) == 321",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from functools import cmp_to_key\n\ndef find_Max_Num(arr):\n    # Convert all integers in the list to strings\n    arr = list(map(str, arr))\n    \n    # Define a custom comparator function\n    def compare(x, y):\n        return int(y + x) - int(x + y)\n    \n    # Sort the array using the custom comparator\n    arr.sort(key=cmp_to_key(compare))\n    \n    # Concatenate the sorted elements to form the largest number\n    largest_num = ''.join(arr)\n    \n    # Convert the result back to an integer\n    return int(largest_num)",
      "test_content": "from llm_output import find_Max_Num\n\ndef check(candidate):\n    assert candidate([1,2,3]) == 321\n    assert candidate([4,5,6,1]) == 6541\n    assert candidate([1,2,3,9]) == 9321\n\ncheck(find_Max_Num)",
      "context": "{\"function_name\": \"find_Max_Num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 58,
      "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):\n\n### Test\nassert candidate(1,-2) == True\nassert candidate(3,2) == False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0",
      "test_content": "from llm_output import opposite_Signs\n\ndef check(candidate):\n    assert candidate(1,-2) == True\n    assert candidate(3,2) == False\n    assert candidate(-10,-10) == False\n    assert candidate(-2,2) == True\n\ncheck(opposite_Signs)",
      "context": "{\"function_name\": \"opposite_Signs\"}",
      "attempt_num": 1
    },
    {
      "task_id": 59,
      "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):\n\n### Test\nassert candidate(5) == 65",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def is_octagonal(n):\n    return n * (3 * n - 2)",
      "test_content": "from llm_output import is_octagonal\n\ndef check(candidate):\n    assert candidate(5) == 65\n    assert candidate(10) == 280\n    assert candidate(15) == 645\n\ncheck(is_octagonal)",
      "context": "{\"function_name\": \"is_octagonal\"}",
      "attempt_num": 1
    },
    {
      "task_id": 62,
      "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):\n\n### Test\nassert candidate([10, 20, 1, 45, 99]) == 1",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def smallest_num(xs):\n    return min(xs)",
      "test_content": "from llm_output import smallest_num\n\ndef check(candidate):\n    assert candidate([10, 20, 1, 45, 99]) == 1\n    assert candidate([1, 2, 3]) == 1\n    assert candidate([45, 46, 50, 60]) == 45\n\ncheck(smallest_num)",
      "context": "{\"function_name\": \"smallest_num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 63,
      "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):\n\n### Test\nassert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef max_difference(test_list):\n    return max(abs(x - y) for x, y in test_list)",
      "test_content": "from llm_output import max_difference\n\ndef check(candidate):\n    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    assert candidate([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n    assert candidate([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n\ncheck(max_difference)",
      "context": "{\"function_name\": \"max_difference\"}",
      "attempt_num": 1
    },
    {
      "task_id": 64,
      "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):\n\n### Test\nassert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from operator import itemgetter\n\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=itemgetter(1))",
      "test_content": "from llm_output import subject_marks\n\ndef check(candidate):\n    assert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert candidate([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\n    assert candidate([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\n\ncheck(subject_marks)",
      "context": "{\"function_name\": \"subject_marks\"}",
      "attempt_num": 1
    },
    {
      "task_id": 65,
      "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):\n\n### Test\nassert candidate(([1, 2, [3,4],[5,6]]))==21",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def recursive_list_sum(data_list):\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total",
      "test_content": "from llm_output import recursive_list_sum\n\ndef check(candidate):\n    assert candidate(([1, 2, [3,4],[5,6]]))==21\n    assert candidate(([7, 10, [15,14],[19,41]]))==106\n    assert candidate(([10, 20, [30,40],[50,60]]))==210\n\ncheck(recursive_list_sum)",
      "context": "{\"function_name\": \"recursive_list_sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 66,
      "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):\n\n### Test\nassert candidate([1,-2,3,-4]) == 2",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def pos_count(lst):\n    return sum(1 for x in lst if x > 0)",
      "test_content": "from llm_output import pos_count\n\ndef check(candidate):\n    assert candidate([1,-2,3,-4]) == 2\n    assert candidate([3,4,5,-1]) == 3\n    assert candidate([1,2,3,4]) == 4\n\ncheck(pos_count)",
      "context": "{\"function_name\": \"pos_count\"}",
      "attempt_num": 1
    },
    {
      "task_id": 67,
      "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):\n\n### Test\nassert candidate(2)==2",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from math import factorial\n\ndef bell_number(n):\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        bell[i] = sum(bell[j] * binomial(i - 1, j) for j in range(i))\n    return bell[n]\n\ndef binomial(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))",
      "test_content": "from llm_output import bell_number\n\ndef check(candidate):\n    assert candidate(2)==2\n    assert candidate(10)==115975\n    assert candidate(56)==6775685320645824322581483068371419745979053216268760300\n\ncheck(bell_number)",
      "context": "{\"function_name\": \"bell_number\"}",
      "attempt_num": 1
    },
    {
      "task_id": 68,
      "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):\n\n### Test\nassert candidate([6, 5, 4, 4]) == True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def is_Monotonic(A):\n    return A == sorted(A) or A == sorted(A, reverse=True)",
      "test_content": "from llm_output import is_Monotonic\n\ndef check(candidate):\n    assert candidate([6, 5, 4, 4]) == True\n    assert candidate([1, 2, 2, 3]) == True\n    assert candidate([1, 3, 2]) == False\n\ncheck(is_Monotonic)",
      "context": "{\"function_name\": \"is_Monotonic\"}",
      "attempt_num": 1
    },
    {
      "task_id": 70,
      "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):\n\n### Test\nassert candidate([(11, 22, 33), (44, 55, 66)]) == True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def get_equal(Input):\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all(len(tup) == first_length for tup in Input)",
      "test_content": "from llm_output import get_equal\n\ndef check(candidate):\n    assert candidate([(11, 22, 33), (44, 55, 66)]) == True\n    assert candidate([(1, 2, 3), (4, 5, 6, 7)]) == False\n    assert candidate([(1, 2), (3, 4)]) == True\n\ncheck(get_equal)",
      "context": "{\"function_name\": \"get_equal\"}",
      "attempt_num": 1
    },
    {
      "task_id": 71,
      "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):\n\n### Test\nassert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums",
      "test_content": "from llm_output import comb_sort\n\ndef check(candidate):\n    assert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert candidate([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n    assert candidate([99, 15, 13, 47]) == [13, 15, 47, 99]\n\ncheck(comb_sort)",
      "context": "{\"function_name\": \"comb_sort\"}",
      "attempt_num": 1
    },
    {
      "task_id": 75,
      "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):\n\n### Test\nassert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def find_tuples(test_list, K):\n    result = [tup for tup in test_list if all(x % K == 0 for x in tup)]\n    return result",
      "test_content": "from llm_output import find_tuples\n\ndef check(candidate):\n    assert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n    assert candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\n    assert candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]\n\ncheck(find_tuples)",
      "context": "{\"function_name\": \"find_tuples\"}",
      "attempt_num": 1
    },
    {
      "task_id": 77,
      "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):\n\n### Test\nassert candidate (12345) == False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def is_Diff(n):\n    return n % 11 == 0",
      "test_content": "from llm_output import is_Diff\n\ndef check(candidate):\n    assert candidate (12345) == False\n    assert candidate(1212112) == True\n    assert candidate(1212) == False\n\ncheck(is_Diff)",
      "context": "{\"function_name\": \"is_Diff\"}",
      "attempt_num": 1
    },
    {
      "task_id": 79,
      "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):\n\n### Test\nassert candidate(\"Hadoop\") == False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def word_len(s):\n    return len(s) % 2 != 0",
      "test_content": "from llm_output import word_len\n\ndef check(candidate):\n    assert candidate(\"Hadoop\") == False\n    assert candidate(\"great\") == True\n    assert candidate(\"structure\") == True\n\ncheck(word_len)",
      "context": "{\"function_name\": \"word_len\"}",
      "attempt_num": 1
    },
    {
      "task_id": 80,
      "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):\n\n### Test\nassert candidate(5) == 35",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6",
      "test_content": "from llm_output import tetrahedral_number\n\ndef check(candidate):\n    assert candidate(5) == 35\n    assert candidate(6) == 56\n    assert candidate(7) == 84\n\ncheck(tetrahedral_number)",
      "context": "{\"function_name\": \"tetrahedral_number\"}",
      "attempt_num": 1
    },
    {
      "task_id": 82,
      "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 4188.790204786391, rel_tol=0.001)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * r**3",
      "test_content": "from llm_output import volume_sphere\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(10), 4188.790204786391, rel_tol=0.001)\n    assert math.isclose(candidate(25), 65449.84694978735, rel_tol=0.001)\n    assert math.isclose(candidate(20), 33510.32163829113, rel_tol=0.001)\n\ncheck(volume_sphere)",
      "context": "{\"function_name\": \"volume_sphere\"}",
      "attempt_num": 1
    },
    {
      "task_id": 84,
      "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):\n\n### Test\nassert candidate(10) == 6",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))",
      "test_content": "from llm_output import sequence\n\ndef check(candidate):\n    assert candidate(10) == 6\n    assert candidate(2) == 1\n    assert candidate(3) == 2\n\ncheck(sequence)",
      "context": "{\"function_name\": \"sequence\"}",
      "attempt_num": 1
    },
    {
      "task_id": 85,
      "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 1256.6370614359173, rel_tol=0.001)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2",
      "test_content": "from llm_output import surfacearea_sphere\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(10), 1256.6370614359173, rel_tol=0.001)\n    assert math.isclose(candidate(15), 2827.4333882308138, rel_tol=0.001)\n    assert math.isclose(candidate(20), 5026.548245743669, rel_tol=0.001)\n\ncheck(surfacearea_sphere)",
      "context": "{\"function_name\": \"surfacearea_sphere\"}",
      "attempt_num": 1
    },
    {
      "task_id": 86,
      "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):\n\n### Test\nassert candidate(10) == 271",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1",
      "test_content": "from llm_output import centered_hexagonal_number\n\ndef check(candidate):\n    assert candidate(10) == 271\n    assert candidate(2) == 7\n    assert candidate(9) == 217\n\ncheck(centered_hexagonal_number)",
      "context": "{\"function_name\": \"centered_hexagonal_number\"}",
      "attempt_num": 1
    },
    {
      "task_id": 88,
      "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):\n\n### Test\nassert candidate([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from collections import Counter\n\ndef freq_count(list1):\n    return dict(Counter(list1))",
      "test_content": "from llm_output import freq_count\n\ndef check(candidate):\n    assert candidate([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n    assert candidate([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\n    assert candidate([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})\n\ncheck(freq_count)",
      "context": "{\"function_name\": \"freq_count\"}",
      "attempt_num": 1
    },
    {
      "task_id": 89,
      "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):\n\n### Test\nassert candidate(11) == 10",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def closest_num(N):\n    return N - 1",
      "test_content": "from llm_output import closest_num\n\ndef check(candidate):\n    assert candidate(11) == 10\n    assert candidate(7) == 6\n    assert candidate(12) == 11\n\ncheck(closest_num)",
      "context": "{\"function_name\": \"closest_num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 90,
      "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):\n\n### Test\nassert candidate([\"python\",\"PHP\",\"bigdata\"]) == 7",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def len_log(list1):\n    return max(len(word) for word in list1)",
      "test_content": "from llm_output import len_log\n\ndef check(candidate):\n    assert candidate([\"python\",\"PHP\",\"bigdata\"]) == 7\n    assert candidate([\"a\",\"ab\",\"abc\"]) == 3\n    assert candidate([\"small\",\"big\",\"tall\"]) == 5\n\ncheck(len_log)",
      "context": "{\"function_name\": \"len_log\"}",
      "attempt_num": 1
    },
    {
      "task_id": 91,
      "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):\n\n### Test\nassert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def find_substring(str1, sub_str):\n    return any(sub_str in s for s in str1)",
      "test_content": "from llm_output import find_substring\n\ndef check(candidate):\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True\n\ncheck(find_substring)",
      "context": "{\"function_name\": \"find_substring\"}",
      "attempt_num": 1
    },
    {
      "task_id": 93,
      "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):\n\n### Test\nassert candidate(3,4) == 81",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def power(a, b):\n    return a ** b",
      "test_content": "from llm_output import power\n\ndef check(candidate):\n    assert candidate(3,4) == 81\n    assert candidate(2,3) == 8\n    assert candidate(5,5) == 3125\n\ncheck(power)",
      "context": "{\"function_name\": \"power\"}",
      "attempt_num": 1
    },
    {
      "task_id": 94,
      "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):\n\n### Test\nassert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import operator\n\ndef index_minimum(test_list):\n    return min(test_list, key=operator.itemgetter(1))[0]",
      "test_content": "from llm_output import index_minimum\n\ndef check(candidate):\n    assert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n    assert candidate([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\n    assert candidate([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n\ncheck(index_minimum)",
      "context": "{\"function_name\": \"index_minimum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 95,
      "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):\n\n### Test\nassert candidate([[1],[1,2]]) == 1",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import sys\n\ndef Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_length = sys.maxsize\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
      "test_content": "from llm_output import Find_Min_Length\n\ndef check(candidate):\n    assert candidate([[1],[1,2]]) == 1\n    assert candidate([[1,2],[1,2,3],[1,2,3,4]]) == 2\n    assert candidate([[3,3,3],[4,4,4,4]]) == 3\n\ncheck(Find_Min_Length)",
      "context": "{\"function_name\": \"Find_Min_Length\"}",
      "attempt_num": 1
    },
    {
      "task_id": 96,
      "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):\n\n### Test\nassert candidate(15) == 4",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef divisor(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count",
      "test_content": "from llm_output import divisor\n\ndef check(candidate):\n    assert candidate(15) == 4\n    assert candidate(12) == 6\n    assert candidate(9) == 3\n\ncheck(divisor)",
      "context": "{\"function_name\": \"divisor\"}",
      "attempt_num": 1
    },
    {
      "task_id": 97,
      "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):\n\n### Test\nassert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from collections import Counter\n\ndef frequency_lists(list1):\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))",
      "test_content": "from llm_output import frequency_lists\n\ndef check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    assert candidate([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n    assert candidate([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n\ncheck(frequency_lists)",
      "context": "{\"function_name\": \"frequency_lists\"}",
      "attempt_num": 1
    },
    {
      "task_id": 98,
      "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):\n\n### Test\nassert math.isclose(candidate((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
      "test_content": "from llm_output import multiply_num\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n    assert math.isclose(candidate((-10,-20,-30)), -2000.0, rel_tol=0.001)\n    assert math.isclose(candidate((19,15,18)), 1710.0, rel_tol=0.001)\n\ncheck(multiply_num)",
      "context": "{\"function_name\": \"multiply_num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 99,
      "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):\n\n### Test\nassert candidate(8) == '1000'",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def decimal_to_binary(n):\n    return bin(n)[2:]",
      "test_content": "from llm_output import decimal_to_binary\n\ndef check(candidate):\n    assert candidate(8) == '1000'\n    assert candidate(18) == '10010'\n    assert candidate(7) == '111'\n\ncheck(decimal_to_binary)",
      "context": "{\"function_name\": \"decimal_to_binary\"}",
      "attempt_num": 1
    },
    {
      "task_id": 101,
      "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):\n\n### Test\nassert candidate([12,3,5,7,19], 2) == 3",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def kth_element(arr, k):\n    return arr[k-1]",
      "test_content": "from llm_output import kth_element\n\ndef check(candidate):\n    assert candidate([12,3,5,7,19], 2) == 3\n    assert candidate([17,24,8,23], 3) == 8\n    assert candidate([16,21,25,36,4], 4) == 36\n\ncheck(kth_element)",
      "context": "{\"function_name\": \"kth_element\"}",
      "attempt_num": 1
    },
    {
      "task_id": 103,
      "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):\n\n### Test\nassert candidate(3, 1) == 4",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def eulerian_num(n, m):\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m))",
      "test_content": "from llm_output import eulerian_num\n\ndef check(candidate):\n    assert candidate(3, 1) == 4\n    assert candidate(4, 1) == 11\n    assert candidate(5, 3) == 26\n\ncheck(eulerian_num)",
      "context": "{\"function_name\": \"eulerian_num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 104,
      "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):\n\n### Test\nassert candidate(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[[\"\"\"green\"\"\", \"\"\"orange\"\"\"], [\"\"\"black\"\"\", \"\"\"white\"\"\"], [\"\"\"black\"\"\", \"\"\"orange\"\"\", \"\"\"white\"\"\"]]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def sort_sublists(input_list):\n    return [sorted(sublist) for sublist in input_list]",
      "test_content": "from llm_output import sort_sublists\n\ndef check(candidate):\n    assert candidate(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[[\"\"\"green\"\"\", \"\"\"orange\"\"\"], [\"\"\"black\"\"\", \"\"\"white\"\"\"], [\"\"\"black\"\"\", \"\"\"orange\"\"\", \"\"\"white\"\"\"]]\n    assert candidate(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[\"\"\" red \"\"\", \"\"\"green\"\"\"], [\"\"\" black\"\"\", \"\"\"blue \"\"\"], [\"\"\" orange\"\"\", \"\"\"brown\"\"\"]]\n    assert candidate(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[[\"\"\"gold\"\"\", \"\"\"zilver\"\"\"],[\"\"\"aluminium\"\"\", \"\"\"magnesium\"\"\"], [\"\"\"bronze\"\"\", \"\"\"steel\"\"\"]]\n\ncheck(sort_sublists)",
      "context": "{\"function_name\": \"sort_sublists\"}",
      "attempt_num": 1
    },
    {
      "task_id": 105,
      "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):\n\n### Test\nassert candidate([True,False,True]) == 2",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def count(lst):\n    return lst.count(True)",
      "test_content": "from llm_output import count\n\ndef check(candidate):\n    assert candidate([True,False,True]) == 2\n    assert candidate([False,False]) == 0\n    assert candidate([True,True,True]) == 3\n\ncheck(count)",
      "context": "{\"function_name\": \"count\"}",
      "attempt_num": 1
    },
    {
      "task_id": 106,
      "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):\n\n### Test\nassert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list)",
      "test_content": "from llm_output import add_lists\n\ndef check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert candidate([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n    assert candidate([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n\ncheck(add_lists)",
      "context": "{\"function_name\": \"add_lists\"}",
      "attempt_num": 1
    },
    {
      "task_id": 109,
      "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):\n\n### Test\nassert candidate(\"011001\",6) == 3",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        if int(s, 2) % 2 != 0:\n            count += 1\n        s = s[-1] + s[:-1]\n    return count",
      "test_content": "from llm_output import odd_Equivalent\n\ndef check(candidate):\n    assert candidate(\"011001\",6) == 3\n    assert candidate(\"11011\",5) == 4\n    assert candidate(\"1010\",4) == 2\n\ncheck(odd_Equivalent)",
      "context": "{\"function_name\": \"odd_Equivalent\"}",
      "attempt_num": 1
    },
    {
      "task_id": 111,
      "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):\n\n### Test\nassert set(candidate([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)",
      "test_content": "from llm_output import common_in_nested_lists\n\ndef check(candidate):\n    assert set(candidate([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n    assert set(candidate([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])\n    assert set(candidate([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])\n\ncheck(common_in_nested_lists)",
      "context": "{\"function_name\": \"common_in_nested_lists\"}",
      "attempt_num": 1
    },
    {
      "task_id": 113,
      "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):\n\n### Test\nassert candidate(\"python\")==False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
      "test_content": "from llm_output import check_integer\n\ndef check(candidate):\n    assert candidate(\"python\")==False\n    assert candidate(\"1\")==True\n    assert candidate(\"12345\")==True\n\ncheck(check_integer)",
      "context": "{\"function_name\": \"check_integer\"}",
      "attempt_num": 1
    },
    {
      "task_id": 115,
      "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):\n\n### Test\nassert candidate([{},{},{}])==True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def empty_dit(list1):\n    return all(len(d) == 0 for d in list1)",
      "test_content": "from llm_output import empty_dit\n\ndef check(candidate):\n    assert candidate([{},{},{}])==True\n    assert candidate([{1,2},{},{}])==False\n    assert candidate({})==True\n\ncheck(empty_dit)",
      "context": "{\"function_name\": \"empty_dit\"}",
      "attempt_num": 1
    },
    {
      "task_id": 116,
      "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):\n\n### Test\nassert candidate((1,2,3))==123",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def tuple_to_int(nums):\n    return int(''.join(map(str, nums)))",
      "test_content": "from llm_output import tuple_to_int\n\ndef check(candidate):\n    assert candidate((1,2,3))==123\n    assert candidate((4,5,6))==456\n    assert candidate((5,6,7))==567\n\ncheck(tuple_to_int)",
      "context": "{\"function_name\": \"tuple_to_int\"}",
      "attempt_num": 1
    },
    {
      "task_id": 118,
      "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):\n\n### Test\nassert candidate(\"python programming\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\"]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def string_to_list(string):\n    return string.split(\" \")",
      "test_content": "from llm_output import string_to_list\n\ndef check(candidate):\n    assert candidate(\"python programming\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\"]\n    assert candidate(\"lists tuples strings\")==[\"\"\"lists\"\"\",\"\"\"tuples\"\"\",\"\"\"strings\"\"\"]\n    assert candidate(\"write a program\")==[\"\"\"write\"\"\",\"\"\"a\"\"\",\"\"\"program\"\"\"]\n\ncheck(string_to_list)",
      "context": "{\"function_name\": \"string_to_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 119,
      "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):\n\n### Test\nassert candidate([1,1,2,2,3]) == 3",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]",
      "test_content": "from llm_output import search\n\ndef check(candidate):\n    assert candidate([1,1,2,2,3]) == 3\n    assert candidate([1,1,3,3,4,4,5,5,7,7,8]) == 8\n    assert candidate([1,2,2,3,3,4,4]) == 1\n\ncheck(search)",
      "context": "{\"function_name\": \"search\"}",
      "attempt_num": 1
    },
    {
      "task_id": 120,
      "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):\n\n### Test\nassert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef max_product_tuple(list1):\n    max_product = 0\n    for pair in list1:\n        product = abs(pair[0] * pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product",
      "test_content": "from llm_output import max_product_tuple\n\ndef check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n    assert candidate([(10,20), (15,2), (5,10)] )==200\n    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==484\n\ncheck(max_product_tuple)",
      "context": "{\"function_name\": \"max_product_tuple\"}",
      "attempt_num": 1
    },
    {
      "task_id": 123,
      "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):\n\n### Test\nassert candidate(999)==504",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner > num and sum_of_divisors(partner) == num:\n            amicable_sum += num + partner\n\n    return amicable_sum",
      "test_content": "from llm_output import amicable_numbers_sum\n\ndef check(candidate):\n    assert candidate(999)==504\n    assert candidate(9999)==31626\n    assert candidate(99)==0\n\ncheck(amicable_numbers_sum)",
      "context": "{\"function_name\": \"amicable_numbers_sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 125,
      "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):\n\n### Test\nassert candidate(\"11000010001\") == 6",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def find_length(string):\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff",
      "test_content": "from llm_output import find_length\n\ndef check(candidate):\n    assert candidate(\"11000010001\") == 6\n    assert candidate(\"10111\") == 1\n    assert candidate(\"11011101100101\") == 2\n\ncheck(find_length)",
      "context": "{\"function_name\": \"find_length\"}",
      "attempt_num": 1
    },
    {
      "task_id": 126,
      "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):\n\n### Test\nassert candidate(10,15) == 6",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef sum(a, b):\n    gcd = math.gcd(a, b)\n    total_sum = 0\n    for i in range(1, gcd + 1):\n        if gcd % i == 0:\n            total_sum += i\n    return total_sum",
      "test_content": "from llm_output import sum\n\ndef check(candidate):\n    assert candidate(10,15) == 6\n    assert candidate(100,150) == 93\n    assert candidate(4,6) == 3\n\ncheck(sum)",
      "context": "{\"function_name\": \"sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 127,
      "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):\n\n### Test\nassert candidate(10,20)==200",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def multiply_int(x, y):\n    return x * y",
      "test_content": "from llm_output import multiply_int\n\ndef check(candidate):\n    assert candidate(10,20)==200\n    assert candidate(5,10)==50\n    assert candidate(4,8)==32\n\ncheck(multiply_int)",
      "context": "{\"function_name\": \"multiply_int\"}",
      "attempt_num": 1
    },
    {
      "task_id": 128,
      "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):\n\n### Test\nassert candidate(3,\"python is a programming language\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\",\"\"\"language\"\"\"]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def long_words(n, str):\n    words = str.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list",
      "test_content": "from llm_output import long_words\n\ndef check(candidate):\n    assert candidate(3,\"python is a programming language\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\",\"\"\"language\"\"\"]\n    assert candidate(2,\"writing a program\")==[\"\"\"writing\"\"\",\"\"\"program\"\"\"]\n    assert candidate(5,\"sorting list\")==[\"\"\"sorting\"\"\"]\n\ncheck(long_words)",
      "context": "{\"function_name\": \"long_words\"}",
      "attempt_num": 1
    },
    {
      "task_id": 129,
      "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):\n\n### Test\nassert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import numpy as np\n\ndef magic_square_test(my_matrix):\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    \n    # Check rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check diagonals\n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    if sum(my_matrix[i][n-1-i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True",
      "test_content": "from llm_output import magic_square_test\n\ndef check(candidate):\n    assert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n\ncheck(magic_square_test)",
      "context": "{\"function_name\": \"magic_square_test\"}",
      "attempt_num": 1
    },
    {
      "task_id": 130,
      "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):\n\n### Test\nassert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from collections import Counter\n\ndef max_occurrences(nums):\n    count = Counter(nums)\n    max_count = max(count.values())\n    for num, freq in count.items():\n        if freq == max_count:\n            return num",
      "test_content": "from llm_output import max_occurrences\n\ndef check(candidate):\n    assert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n    assert candidate([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\n    assert candidate([10,20,20,30,40,90,80,50,30,20,50,10])==20\n\ncheck(max_occurrences)",
      "context": "{\"function_name\": \"max_occurrences\"}",
      "attempt_num": 1
    },
    {
      "task_id": 131,
      "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):\n\n### Test\nassert candidate(\"Python\") == \"Python\"",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str_list) - 1\n    \n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n    \n    return ''.join(str_list)",
      "test_content": "from llm_output import reverse_vowels\n\ndef check(candidate):\n    assert candidate(\"Python\") == \"Python\"\n    assert candidate(\"USA\") == \"ASU\"\n    assert candidate(\"ab\") == \"ab\"\n\ncheck(reverse_vowels)",
      "context": "{\"function_name\": \"reverse_vowels\"}",
      "attempt_num": 1
    },
    {
      "task_id": 132,
      "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):\n\n### Test\nassert candidate((\"\"\"e\"\"\", \"\"\"x\"\"\", \"\"\"e\"\"\", \"\"\"r\"\"\", \"\"\"c\"\"\", \"\"\"i\"\"\", \"\"\"s\"\"\", \"\"\"e\"\"\", \"\"\"s\"\"\"))==(\"exercises\")",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def tup_string(tup1):\n    return ''.join(tup1)",
      "test_content": "from llm_output import tup_string\n\ndef check(candidate):\n    assert candidate((\"\"\"e\"\"\", \"\"\"x\"\"\", \"\"\"e\"\"\", \"\"\"r\"\"\", \"\"\"c\"\"\", \"\"\"i\"\"\", \"\"\"s\"\"\", \"\"\"e\"\"\", \"\"\"s\"\"\"))==(\"exercises\")\n    assert candidate((\"\"\"p\"\"\",\"\"\"y\"\"\",\"\"\"t\"\"\",\"\"\"h\"\"\",\"\"\"o\"\"\",\"\"\"n\"\"\"))==(\"python\")\n    assert candidate((\"\"\"p\"\"\",\"\"\"r\"\"\",\"\"\"o\"\"\",\"\"\"g\"\"\",\"\"\"r\"\"\",\"\"\"a\"\"\",\"\"\"m\"\"\"))==(\"program\")\n\ncheck(tup_string)",
      "context": "{\"function_name\": \"tup_string\"}",
      "attempt_num": 1
    },
    {
      "task_id": 133,
      "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):\n\n### Test\nassert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)",
      "test_content": "from llm_output import sum_negativenum\n\ndef check(candidate):\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n    assert candidate([10,15,-14,13,-18,12,-20])==-52\n    assert candidate([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894\n\ncheck(sum_negativenum)",
      "context": "{\"function_name\": \"sum_negativenum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 135,
      "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):\n\n### Test\nassert candidate(10) == 190",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)",
      "test_content": "from llm_output import hexagonal_num\n\ndef check(candidate):\n    assert candidate(10) == 190\n    assert candidate(5) == 45\n    assert candidate(7) == 91\n\ncheck(hexagonal_num)",
      "context": "{\"function_name\": \"hexagonal_num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 137,
      "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):\n\n### Test\nassert math.isclose(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef zero_count(nums):\n    total_numbers = len(nums)\n    zero_count = nums.count(0)\n    non_zero_count = total_numbers - zero_count\n    if non_zero_count == 0:\n        return 0\n    ratio = zero_count / non_zero_count\n    return ratio",
      "test_content": "from llm_output import zero_count\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n    assert math.isclose(candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\n    assert math.isclose(candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)\n\ncheck(zero_count)",
      "context": "{\"function_name\": \"zero_count\"}",
      "attempt_num": 1
    },
    {
      "task_id": 139,
      "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):\n\n### Test\nassert math.isclose(candidate(10), 62.830000000000005, rel_tol=0.001)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r",
      "test_content": "from llm_output import circle_circumference\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(10), 62.830000000000005, rel_tol=0.001)\n    assert math.isclose(candidate(5), 31.415000000000003, rel_tol=0.001)\n    assert math.isclose(candidate(4), 25.132, rel_tol=0.001)\n\ncheck(circle_circumference)",
      "context": "{\"function_name\": \"circle_circumference\"}",
      "attempt_num": 1
    },
    {
      "task_id": 140,
      "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):\n\n### Test\nassert set(candidate([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from typing import List, Tuple\n\ndef extract_singly(test_list: List[Tuple[int, ...]]) -> set:\n    return set(number for sublist in test_list for number in sublist)",
      "test_content": "from llm_output import extract_singly\n\ndef check(candidate):\n    assert set(candidate([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n    assert set(candidate([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])\n    assert set(candidate([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])\n\ncheck(extract_singly)",
      "context": "{\"function_name\": \"extract_singly\"}",
      "attempt_num": 1
    },
    {
      "task_id": 141,
      "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):\n\n### Test\nassert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def pancake_sort(nums):\n    def flip(sublist, k):\n        sublist[:k+1] = reversed(sublist[:k+1])\n\n    n = len(nums)\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in nums[:i]\n        max_index = nums.index(max(nums[:i]))\n        \n        # Flip the sublist to move the maximum element to the beginning\n        flip(nums, max_index)\n        \n        # Flip the sublist to move the maximum element to its correct position\n        flip(nums, i - 1)\n    \n    return nums",
      "test_content": "from llm_output import pancake_sort\n\ndef check(candidate):\n    assert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert candidate([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n    assert candidate([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n\ncheck(pancake_sort)",
      "context": "{\"function_name\": \"pancake_sort\"}",
      "attempt_num": 1
    },
    {
      "task_id": 142,
      "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):\n\n### Test\nassert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
      "test_content": "from llm_output import count_samepair\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\n    assert candidate([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\n\ncheck(count_samepair)",
      "context": "{\"function_name\": \"count_samepair\"}",
      "attempt_num": 1
    },
    {
      "task_id": 145,
      "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):\n\n### Test\nassert candidate((2,1,5,3)) == 4",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef max_Abs_Diff(arr):\n    return max(arr) - min(arr)",
      "test_content": "from llm_output import max_Abs_Diff\n\ndef check(candidate):\n    assert candidate((2,1,5,3)) == 4\n    assert candidate((9,3,2,5,1)) == 8\n    assert candidate((3,2,1)) == 2\n\ncheck(max_Abs_Diff)",
      "context": "{\"function_name\": \"max_Abs_Diff\"}",
      "attempt_num": 1
    },
    {
      "task_id": 160,
      "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):\n\n### Test\nassert candidate(2, 3, 7) == (2, 1)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from math import gcd\n\ndef find_solution(a, b, n):\n    if n % gcd(a, b) != 0:\n        return None\n    x = 0\n    y = n // b\n    while x * a + y * b != n:\n        x += 1\n        y = (n - x * a) // b\n    return (x, y)",
      "test_content": "from llm_output import find_solution\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ncheck(find_solution)",
      "context": "{\"function_name\": \"find_solution\"}",
      "attempt_num": 1
    },
    {
      "task_id": 161,
      "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]",
      "test_content": "from llm_output import remove_elements\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]\n\ncheck(remove_elements)",
      "context": "{\"function_name\": \"remove_elements\"}",
      "attempt_num": 1
    },
    {
      "task_id": 162,
      "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):\n\n### Test\nassert candidate(6) == 12",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def sum_series(n):\n    return sum(n - 2*i for i in range(n // 2 + 1) if n - 2*i >= 0)",
      "test_content": "from llm_output import sum_series\n\ndef check(candidate):\n    assert candidate(6) == 12\n    assert candidate(10) == 30\n    assert candidate(9) == 25\n\ncheck(sum_series)",
      "context": "{\"function_name\": \"sum_series\"}",
      "attempt_num": 1
    },
    {
      "task_id": 163,
      "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):\n\n### Test\nassert math.isclose(candidate(4, 20), 400., rel_tol=0.001)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef area_polygon(s, l):\n    return (s * l ** 2) / (4 * math.tan(math.pi / s))",
      "test_content": "from llm_output import area_polygon\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(4, 20), 400., rel_tol=0.001)\n    assert math.isclose(candidate(10, 15), 1731.197, rel_tol=0.001)\n    assert math.isclose(candidate(9, 7), 302.909, rel_tol=0.001)\n\ncheck(area_polygon)",
      "context": "{\"function_name\": \"area_polygon\"}",
      "attempt_num": 1
    },
    {
      "task_id": 164,
      "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):\n\n### Test\nassert candidate(36, 57) == False\n### Remediation Message\nThis code is not correct as it led to the following issues:\nTraceback (most recent call last):\n  File \"/Users/madnanrizqu/Code/Research/learn/thesis/languages/python/mbpp_sanitized_qwen25coder7b_td_1760709780449087/llm_output_test.py\", line 8, in <module>\n    check(are_equivalent)\n  File \"/Users/madnanrizqu/Code/Research/learn/thesis/languages/python/mbpp_sanitized_qwen25coder7b_td_1760709780449087/llm_output_test.py\", line 4, in check\n    assert candidate(36, 57) == False\n           ^^^^^^^^^^^^^^^^^\nTypeError: are_equivalent() takes 1 positional argument but 2 were given\n",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef are_equivalent(n, m):\n    def sum_of_divisors(x):\n        total = 1\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                total += i\n                if i != x // i:\n                    total += x // i\n        return total\n    \n    return sum_of_divisors(n) == sum_of_divisors(m)",
      "test_content": "from llm_output import are_equivalent\n\ndef check(candidate):\n    assert candidate(36, 57) == False\n    assert candidate(2, 4) == False\n    assert candidate(23, 47) == True\n\ncheck(are_equivalent)",
      "context": "{\"function_name\": \"are_equivalent\"}",
      "attempt_num": 2
    },
    {
      "task_id": 165,
      "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):\n\n### Test\nassert candidate(\"xbcefg\") == 2",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import string\n\ndef count_char_position(str1):\n    count = 0\n    alphabet = string.ascii_lowercase\n    for i, char in enumerate(str1.lower()):\n        if char in alphabet and alphabet.index(char) == i:\n            count += 1\n    return count",
      "test_content": "from llm_output import count_char_position\n\ndef check(candidate):\n    assert candidate(\"xbcefg\") == 2\n    assert candidate(\"ABcED\") == 3\n    assert candidate(\"AbgdeF\") == 5\n\ncheck(count_char_position)",
      "context": "{\"function_name\": \"count_char_position\"}",
      "attempt_num": 1
    },
    {
      "task_id": 166,
      "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):\n\n### Test\nassert candidate([5, 4, 7, 2, 1]) == 4",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
      "test_content": "from llm_output import find_even_pair\n\ndef check(candidate):\n    assert candidate([5, 4, 7, 2, 1]) == 4\n    assert candidate([7, 2, 8, 1, 0, 5, 11]) == 9\n    assert candidate([1, 2, 3]) == 1\n\ncheck(find_even_pair)",
      "context": "{\"function_name\": \"find_even_pair\"}",
      "attempt_num": 1
    },
    {
      "task_id": 167,
      "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):\n\n### Test\nassert candidate(0) == 1",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef next_power_of_2(n):\n    if n == 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))",
      "test_content": "from llm_output import next_power_of_2\n\ndef check(candidate):\n    assert candidate(0) == 1\n    assert candidate(5) == 8\n    assert candidate(17) == 32\n\ncheck(next_power_of_2)",
      "context": "{\"function_name\": \"next_power_of_2\"}",
      "attempt_num": 1
    },
    {
      "task_id": 168,
      "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):\n\n### Test\nassert candidate([1,2,3], 4) == 0",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def frequency(a, x):\n    return a.count(x)",
      "test_content": "from llm_output import frequency\n\ndef check(candidate):\n    assert candidate([1,2,3], 4) == 0\n    assert candidate([1,2,2,3,3,3,4], 3) == 3\n    assert candidate([0,1,2,3,1,2], 1) == 2\n\ncheck(frequency)",
      "context": "{\"function_name\": \"frequency\"}",
      "attempt_num": 1
    },
    {
      "task_id": 170,
      "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):\n\n### Test\nassert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def sum_range_list(list1, m, n):\n    return sum(list1[m:n+1])",
      "test_content": "from llm_output import sum_range_list\n\ndef check(candidate):\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38\n\ncheck(sum_range_list)",
      "context": "{\"function_name\": \"sum_range_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 171,
      "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):\n\n### Test\nassert candidate(5) == 25",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef perimeter_pentagon(a):\n    return 5 * a",
      "test_content": "from llm_output import perimeter_pentagon\n\ndef check(candidate):\n    assert candidate(5) == 25\n    assert candidate(10) == 50\n    assert candidate(15) == 75\n\ncheck(perimeter_pentagon)",
      "context": "{\"function_name\": \"perimeter_pentagon\"}",
      "attempt_num": 1
    },
    {
      "task_id": 172,
      "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):\n\n### Test\nassert candidate(\"letstdlenstdporstd\") == 3\nassert candidate(\"truststdsolensporsd\") == 1",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def count_occurance(s):\n    return s.count('std')",
      "test_content": "from llm_output import count_occurance\n\ndef check(candidate):\n    assert candidate(\"letstdlenstdporstd\") == 3\n    assert candidate(\"truststdsolensporsd\") == 1\n    assert candidate(\"makestdsostdworthit\") == 2\n    assert candidate(\"stds\") == 1\n    assert candidate(\"\") == 0\n\ncheck(count_occurance)",
      "context": "{\"function_name\": \"count_occurance\"}",
      "attempt_num": 1
    },
    {
      "task_id": 222,
      "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):\n\n### Test\nassert candidate((5, 6, 7, 3, 5, 6) ) == True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def check_type(test_tuple):\n    return all(isinstance(element, type(test_tuple[0])) for element in test_tuple)",
      "test_content": "from llm_output import check_type\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6) ) == True\n    assert candidate((1, 2, \"4\") ) == False\n    assert candidate((3, 2, 1, 4, 5) ) == True\n\ncheck(check_type)",
      "context": "{\"function_name\": \"check_type\"}",
      "attempt_num": 1
    },
    {
      "task_id": 224,
      "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):\n\n### Test\nassert candidate(2) == 1",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def count_Set_Bits(n):\n    return bin(n).count('1')",
      "test_content": "from llm_output import count_Set_Bits\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(4) == 1\n    assert candidate(6) == 2\n\ncheck(count_Set_Bits)",
      "context": "{\"function_name\": \"count_Set_Bits\"}",
      "attempt_num": 1
    },
    {
      "task_id": 226,
      "prompt": "### Prompt\nWrite a python function to remove the characters which have odd index values of a given string.\n\n### Signature\ndef odd_values_string(str):\n\n### Test\nassert candidate('abcdef') == 'ace'\nassert candidate('python') == 'pto'",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def odd_values_string(str):\n    return ''.join(str[i] for i in range(len(str)) if i % 2 == 0)",
      "test_content": "from llm_output import odd_values_string\n\ndef check(candidate):\n    assert candidate('abcdef') == 'ace'\n    assert candidate('python') == 'pto'\n    assert candidate('data') == 'dt'\n    assert candidate('lambs') == 'lms'\n\ncheck(odd_values_string)",
      "context": "{\"function_name\": \"odd_values_string\"}",
      "attempt_num": 1
    },
    {
      "task_id": 227,
      "prompt": "### Prompt\nWrite a function to find minimum of three numbers.\n\n### Signature\ndef min_of_three(a,b,c):\n\n### Test\nassert candidate(10,20,0)==0",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)",
      "test_content": "from llm_output import min_of_three\n\ndef check(candidate):\n    assert candidate(10,20,0)==0\n    assert candidate(19,15,18)==15\n    assert candidate(-10,-20,-30)==-30\n\ncheck(min_of_three)",
      "context": "{\"function_name\": \"min_of_three\"}",
      "attempt_num": 1
    },
    {
      "task_id": 228,
      "prompt": "### Prompt\nWrite a python function to check whether all the bits are unset in the given range or not.\n\n### Signature\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n\n### Test\nassert candidate(4,1,2) == True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    return (n & mask) == 0",
      "test_content": "from llm_output import all_Bits_Set_In_The_Given_Range\n\ndef check(candidate):\n    assert candidate(4,1,2) == True\n    assert candidate(17,2,4) == True\n    assert candidate(39,4,6) == False\n\ncheck(all_Bits_Set_In_The_Given_Range)",
      "context": "{\"function_name\": \"all_Bits_Set_In_The_Given_Range\"}",
      "attempt_num": 1
    },
    {
      "task_id": 230,
      "prompt": "### Prompt\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n### Signature\ndef replace_blank(str1,char):\n\n### Test\nassert candidate(\"hello people\",\"\"\"@\"\"\")==(\"hello@people\")",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)",
      "test_content": "from llm_output import replace_blank\n\ndef check(candidate):\n    assert candidate(\"hello people\",\"\"\"@\"\"\")==(\"hello@people\")\n    assert candidate(\"python program language\",\"\"\"$\"\"\")==(\"python$program$language\")\n    assert candidate(\"blank space\",\"-\")==(\"blank-space\")\n\ncheck(replace_blank)",
      "context": "{\"function_name\": \"replace_blank\"}",
      "attempt_num": 1
    },
    {
      "task_id": 232,
      "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n### Signature\ndef larg_nnum(list1,n):\n\n### Test\nassert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]",
      "test_content": "from llm_output import larg_nnum\n\ndef check(candidate):\n    assert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n    assert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])\n    assert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])\n\ncheck(larg_nnum)",
      "context": "{\"function_name\": \"larg_nnum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 233,
      "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cylinder.\n\n### Signature\ndef lateralsuface_cylinder(r,h):\n\n### Test\nassert math.isclose(candidate(10,5), 314.15000000000003, rel_tol=0.001)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h",
      "test_content": "from llm_output import lateralsuface_cylinder\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(10,5), 314.15000000000003, rel_tol=0.001)\n    assert math.isclose(candidate(4,5), 125.66000000000001, rel_tol=0.001)\n    assert math.isclose(candidate(4,10), 251.32000000000002, rel_tol=0.001)\n\ncheck(lateralsuface_cylinder)",
      "context": "{\"function_name\": \"lateralsuface_cylinder\"}",
      "attempt_num": 1
    },
    {
      "task_id": 234,
      "prompt": "### Prompt\nWrite a function to find the volume of a cube given its side length.\n\n### Signature\ndef volume_cube(l):\n\n### Test\nassert candidate(3)==27",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef volume_cube(l):\n    return l ** 3",
      "test_content": "from llm_output import volume_cube\n\ndef check(candidate):\n    assert candidate(3)==27\n    assert candidate(2)==8\n    assert candidate(5)==125\n\ncheck(volume_cube)",
      "context": "{\"function_name\": \"volume_cube\"}",
      "attempt_num": 1
    },
    {
      "task_id": 235,
      "prompt": "### Prompt\nWrite a python function to set all even bits of a given number.\n\n### Signature\ndef even_bit_set_number(n):\n\n### Test\nassert candidate(10) == 10",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def even_bit_set_number(n):\n    mask = 0\n    bit_position = 0\n    while n >> bit_position:\n        if bit_position % 2 == 1:\n            mask |= (1 << bit_position)\n        bit_position += 1\n    return n | mask",
      "test_content": "from llm_output import even_bit_set_number\n\ndef check(candidate):\n    assert candidate(10) == 10\n    assert candidate(20) == 30\n    assert candidate(30) == 30\n\ncheck(even_bit_set_number)",
      "context": "{\"function_name\": \"even_bit_set_number\"}",
      "attempt_num": 1
    },
    {
      "task_id": 238,
      "prompt": "### Prompt\nWrite a python function to count the number of non-empty substrings of a given string.\n\n### Signature\ndef number_of_substrings(str):\n\n### Test\nassert candidate(\"abc\") == 6",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def number_of_substrings(str):\n    n = len(str)\n    return n * (n + 1) // 2",
      "test_content": "from llm_output import number_of_substrings\n\ndef check(candidate):\n    assert candidate(\"abc\") == 6\n    assert candidate(\"abcd\") == 10\n    assert candidate(\"abcde\") == 15\n\ncheck(number_of_substrings)",
      "context": "{\"function_name\": \"number_of_substrings\"}",
      "attempt_num": 1
    },
    {
      "task_id": 240,
      "prompt": "### Prompt\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\n### Signature\ndef replace_list(list1,list2):\n\n### Test\nassert candidate([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1",
      "test_content": "from llm_output import replace_list\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n    assert candidate([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\n    assert candidate([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]\n\ncheck(replace_list)",
      "context": "{\"function_name\": \"replace_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 242,
      "prompt": "### Prompt\nWrite a function to count the total number of characters in a string.\n\n### Signature\ndef count_charac(str1):\n\n### Test\nassert candidate(\"python programming\")==18",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def count_charac(str1):\n    return len(str1)",
      "test_content": "from llm_output import count_charac\n\ndef check(candidate):\n    assert candidate(\"python programming\")==18\n    assert candidate(\"language\")==8\n    assert candidate(\"words\")==5\n\ncheck(count_charac)",
      "context": "{\"function_name\": \"count_charac\"}",
      "attempt_num": 1
    },
    {
      "task_id": 244,
      "prompt": "### Prompt\nWrite a python function to find the next perfect square greater than a given number.\n\n### Signature\ndef next_Perfect_Square(N):\n\n### Test\nassert candidate(35) == 36",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef next_Perfect_Square(N):\n    root = math.isqrt(N)\n    return (root + 1) ** 2",
      "test_content": "from llm_output import next_Perfect_Square\n\ndef check(candidate):\n    assert candidate(35) == 36\n    assert candidate(6) == 9\n    assert candidate(9) == 16\n\ncheck(next_Perfect_Square)",
      "context": "{\"function_name\": \"next_Perfect_Square\"}",
      "attempt_num": 1
    },
    {
      "task_id": 245,
      "prompt": "### Prompt\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\n### Signature\ndef max_sum(arr):\n\n### Test\nassert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    \n    for i in range(n):\n        inc[i] = arr[i]\n        dec[i] = arr[i]\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_sum",
      "test_content": "from llm_output import max_sum\n\ndef check(candidate):\n    assert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n    assert candidate([80, 60, 30, 40, 20, 10]) == 210\n    assert candidate([2, 3 ,14, 16, 21, 23, 29, 30]) == 138\n\ncheck(max_sum)",
      "context": "{\"function_name\": \"max_sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 246,
      "prompt": "### Prompt\nWrite a function for computing square roots using the babylonian method.\n\n### Signature\ndef babylonian_squareroot(number):\n\n### Test\nassert math.isclose(candidate(10), 3.162277660168379, rel_tol=0.001)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot compute the square root of a negative number.\")\n    if number == 0:\n        return 0\n    guess = number / 2.0\n    while True:\n        next_guess = (guess + number / guess) / 2\n        if abs(next_guess - guess) < 1e-10:\n            return next_guess\n        guess = next_guess",
      "test_content": "from llm_output import babylonian_squareroot\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(10), 3.162277660168379, rel_tol=0.001)\n    assert math.isclose(candidate(2), 1.414213562373095, rel_tol=0.001)\n    assert math.isclose(candidate(9), 3.0, rel_tol=0.001)\n\ncheck(babylonian_squareroot)",
      "context": "{\"function_name\": \"babylonian_squareroot\"}",
      "attempt_num": 1
    },
    {
      "task_id": 247,
      "prompt": "### Prompt\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n\n### Signature\ndef lps(str):\n\n### Test\nassert candidate(\"TENS FOR TENS\") == 5",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]",
      "test_content": "from llm_output import lps\n\ndef check(candidate):\n    assert candidate(\"TENS FOR TENS\") == 5\n    assert candidate(\"CARDIO FOR CARDS\") == 7\n    assert candidate(\"PART OF THE JOURNEY IS PART\") == 9\n\ncheck(lps)",
      "context": "{\"function_name\": \"lps\"}",
      "attempt_num": 1
    },
    {
      "task_id": 248,
      "prompt": "### Prompt\nWrite a function that takes in an integer n and calculates the harmonic sum of n-1.\n\n### Signature\ndef harmonic_sum(n):\n\n### Test\nassert math.isclose(candidate(7), 2.5928571428571425, rel_tol=0.001)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef harmonic_sum(n):\n    if n <= 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)",
      "test_content": "from llm_output import harmonic_sum\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(7), 2.5928571428571425, rel_tol=0.001)\n    assert math.isclose(candidate(4), 2.083333333333333, rel_tol=0.001)\n    assert math.isclose(candidate(19), 3.547739657143682, rel_tol=0.001)\n\ncheck(harmonic_sum)",
      "context": "{\"function_name\": \"harmonic_sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 250,
      "prompt": "### Prompt\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\n### Signature\ndef count_X(tup, x):\n\n### Test\nassert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def count_X(tup, x):\n    return tup.count(x)",
      "test_content": "from llm_output import count_X\n\ndef check(candidate):\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n\ncheck(count_X)",
      "context": "{\"function_name\": \"count_X\"}",
      "attempt_num": 1
    },
    {
      "task_id": 251,
      "prompt": "### Prompt\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\n### Signature\ndef insert_element(list,element):\n\n### Test\nassert candidate(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.extend([element, item])\n    return result",
      "test_content": "from llm_output import insert_element\n\ndef check(candidate):\n    assert candidate(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n    assert candidate(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\n    assert candidate(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']\n\ncheck(insert_element)",
      "context": "{\"function_name\": \"insert_element\"}",
      "attempt_num": 1
    },
    {
      "task_id": 252,
      "prompt": "### Prompt\nWrite a python function to convert complex numbers to polar coordinates.\n\n### Signature\ndef convert(numbers):\n\n### Test\nassert candidate(1) == (1.0, 0.0)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import cmath\n\ndef convert(numbers):\n    return cmath.polar(numbers)",
      "test_content": "from llm_output import convert\n\ndef check(candidate):\n    assert candidate(1) == (1.0, 0.0)\n    assert candidate(4) == (4.0,0.0)\n    assert candidate(5) == (5.0,0.0)\n\ncheck(convert)",
      "context": "{\"function_name\": \"convert\"}",
      "attempt_num": 1
    },
    {
      "task_id": 253,
      "prompt": "### Prompt\nWrite a python function that returns the number of integer elements in a given list.\n\n### Signature\ndef count_integer(list1):\n\n### Test\nassert candidate([1,2,'abc',1.2]) == 2",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def count_integer(list1):\n    return sum(isinstance(item, int) for item in list1)",
      "test_content": "from llm_output import count_integer\n\ndef check(candidate):\n    assert candidate([1,2,'abc',1.2]) == 2\n    assert candidate([1,2,3]) == 3\n    assert candidate([1,1.2,4,5.1]) == 2\n\ncheck(count_integer)",
      "context": "{\"function_name\": \"count_integer\"}",
      "attempt_num": 1
    },
    {
      "task_id": 256,
      "prompt": "### Prompt\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n### Signature\ndef count_Primes_nums(n):\n\n### Test\nassert candidate(5) == 2",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    return sum(is_prime)",
      "test_content": "from llm_output import count_Primes_nums\n\ndef check(candidate):\n    assert candidate(5) == 2\n    assert candidate(10) == 4\n    assert candidate(100) == 25\n\ncheck(count_Primes_nums)",
      "context": "{\"function_name\": \"count_Primes_nums\"}",
      "attempt_num": 1
    },
    {
      "task_id": 257,
      "prompt": "### Prompt\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\n### Signature\ndef swap_numbers(a,b):\n\n### Test\nassert candidate(10,20)==(20,10)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def swap_numbers(a, b):\n    return (b, a)",
      "test_content": "from llm_output import swap_numbers\n\ndef check(candidate):\n    assert candidate(10,20)==(20,10)\n    assert candidate(15,17)==(17,15)\n    assert candidate(100,200)==(200,100)\n\ncheck(swap_numbers)",
      "context": "{\"function_name\": \"swap_numbers\"}",
      "attempt_num": 1
    },
    {
      "task_id": 259,
      "prompt": "### Prompt\nWrite a function to maximize the given two tuples.\n\n### Signature\ndef maximize_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    result = tuple(tuple(max(a, b) for a, b in zip(inner_tup1, inner_tup2)) for inner_tup1, inner_tup2 in zip(test_tup1, test_tup2))\n    return result",
      "test_content": "from llm_output import maximize_elements\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))\n\ncheck(maximize_elements)",
      "context": "{\"function_name\": \"maximize_elements\"}",
      "attempt_num": 1
    },
    {
      "task_id": 261,
      "prompt": "### Prompt\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n### Signature\ndef division_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def division_elements(test_tup1, test_tup2):\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))",
      "test_content": "from llm_output import division_elements\n\ndef check(candidate):\n    assert candidate((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n    assert candidate((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\n    assert candidate((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n\ncheck(division_elements)",
      "context": "{\"function_name\": \"division_elements\"}",
      "attempt_num": 1
    },
    {
      "task_id": 262,
      "prompt": "### Prompt\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\n### Signature\ndef split_two_parts(list1, L):\n\n### Test\nassert candidate([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]",
      "test_content": "from llm_output import split_two_parts\n\ndef check(candidate):\n    assert candidate([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert candidate(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n\ncheck(split_two_parts)",
      "context": "{\"function_name\": \"split_two_parts\"}",
      "attempt_num": 1
    },
    {
      "task_id": 264,
      "prompt": "### Prompt\nWrite a function to calculate a dog's age in dog's years.\n\n### Signature\ndef dog_age(h_age):\n\n### Test\nassert candidate(12)==61",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def dog_age(h_age):\n    if h_age < 0:\n        return \"Invalid age\"\n    elif h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4",
      "test_content": "from llm_output import dog_age\n\ndef check(candidate):\n    assert candidate(12)==61\n    assert candidate(15)==73\n    assert candidate(24)==109\n\ncheck(dog_age)",
      "context": "{\"function_name\": \"dog_age\"}",
      "attempt_num": 1
    },
    {
      "task_id": 265,
      "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\n### Signature\ndef list_split(S, step):\n\n### Test\nassert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from typing import List\n\ndef list_split(S: List, step: int) -> List[List]:\n    return [S[i::step] for i in range(step)]",
      "test_content": "from llm_output import list_split\n\ndef check(candidate):\n    assert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\n    assert candidate(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n\ncheck(list_split)",
      "context": "{\"function_name\": \"list_split\"}",
      "attempt_num": 1
    },
    {
      "task_id": 266,
      "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cube given its side length.\n\n### Signature\ndef lateralsurface_cube(l):\n\n### Test\nassert candidate(5)==100",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef lateralsurface_cube(l):\n    return 4 * l * l",
      "test_content": "from llm_output import lateralsurface_cube\n\ndef check(candidate):\n    assert candidate(5)==100\n    assert candidate(9)==324\n    assert candidate(10)==400\n\ncheck(lateralsurface_cube)",
      "context": "{\"function_name\": \"lateralsurface_cube\"}",
      "attempt_num": 1
    },
    {
      "task_id": 267,
      "prompt": "### Prompt\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n### Signature\ndef square_Sum(n):\n\n### Test\nassert candidate(2) == 10",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def square_Sum(n):\n    return sum((2*i + 1)**2 for i in range(n))",
      "test_content": "from llm_output import square_Sum\n\ndef check(candidate):\n    assert candidate(2) == 10\n    assert candidate(3) == 35\n    assert candidate(4) == 84\n\ncheck(square_Sum)",
      "context": "{\"function_name\": \"square_Sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 269,
      "prompt": "### Prompt\nWrite a function to find the ascii value of a character.\n\n### Signature\ndef ascii_value(k):\n\n### Test\nassert candidate('A')==65",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def ascii_value(k):\n    return ord(k)",
      "test_content": "from llm_output import ascii_value\n\ndef check(candidate):\n    assert candidate('A')==65\n    assert candidate('R')==82\n    assert candidate('S')==83\n\ncheck(ascii_value)",
      "context": "{\"function_name\": \"ascii_value\"}",
      "attempt_num": 1
    },
    {
      "task_id": 270,
      "prompt": "### Prompt\nWrite a python function to find the sum of even numbers at even positions of a list.\n\n### Signature\ndef sum_even_and_even_index(arr):\n\n### Test\nassert candidate([5, 6, 12, 1, 18, 8]) == 30",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def sum_even_and_even_index(arr):\n    return sum(x for i, x in enumerate(arr) if i % 2 == 0 and x % 2 == 0)",
      "test_content": "from llm_output import sum_even_and_even_index\n\ndef check(candidate):\n    assert candidate([5, 6, 12, 1, 18, 8]) == 30\n    assert candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\n    assert candidate([5, 6, 12, 1]) == 12\n\ncheck(sum_even_and_even_index)",
      "context": "{\"function_name\": \"sum_even_and_even_index\"}",
      "attempt_num": 1
    },
    {
      "task_id": 271,
      "prompt": "### Prompt\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n### Signature\ndef even_Power_Sum(n):\n\n### Test\nassert candidate(2) == 1056",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    return total_sum",
      "test_content": "from llm_output import even_Power_Sum\n\ndef check(candidate):\n    assert candidate(2) == 1056\n    assert candidate(3) == 8832\n    assert candidate(1) == 32\n\ncheck(even_Power_Sum)",
      "context": "{\"function_name\": \"even_Power_Sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 272,
      "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n### Signature\ndef rear_extract(test_list):\n\n### Test\nassert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def rear_extract(test_list):\n    return [tup[-1] for tup in test_list]",
      "test_content": "from llm_output import rear_extract\n\ndef check(candidate):\n    assert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    assert candidate([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n    assert candidate([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n\ncheck(rear_extract)",
      "context": "{\"function_name\": \"rear_extract\"}",
      "attempt_num": 1
    },
    {
      "task_id": 273,
      "prompt": "### Prompt\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n### Signature\ndef substract_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))",
      "test_content": "from llm_output import substract_elements\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ncheck(substract_elements)",
      "context": "{\"function_name\": \"substract_elements\"}",
      "attempt_num": 1
    },
    {
      "task_id": 274,
      "prompt": "### Prompt\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n### Signature\ndef even_binomial_Coeff_Sum( n):\n\n### Test\nassert candidate(4) == 8",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    sum_even = 0\n    for i in range(0, n + 1, 2):\n        sum_even += comb(n, i)\n    return sum_even",
      "test_content": "from llm_output import even_binomial_Coeff_Sum\n\ndef check(candidate):\n    assert candidate(4) == 8\n    assert candidate(6) == 32\n    assert candidate(2) == 2\n\ncheck(even_binomial_Coeff_Sum)",
      "context": "{\"function_name\": \"even_binomial_Coeff_Sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 276,
      "prompt": "### Prompt\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n\n### Signature\ndef volume_cylinder(r,h):\n\n### Test\nassert math.isclose(candidate(10,5), 1570.7500000000002, rel_tol=0.001)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef volume_cylinder(r, h):\n    return math.pi * r**2 * h",
      "test_content": "from llm_output import volume_cylinder\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(10,5), 1570.7500000000002, rel_tol=0.001)\n    assert math.isclose(candidate(4,5), 251.32000000000002, rel_tol=0.001)\n    assert math.isclose(candidate(4,10), 502.64000000000004, rel_tol=0.001)\n\ncheck(volume_cylinder)",
      "context": "{\"function_name\": \"volume_cylinder\"}",
      "attempt_num": 1
    },
    {
      "task_id": 277,
      "prompt": "### Prompt\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n### Signature\ndef dict_filter(dict,n):\n\n### Test\nassert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def dict_filter(dict,n):\n    return {k: v for k, v in dict.items() if v >= n}",
      "test_content": "from llm_output import dict_filter\n\ndef check(candidate):\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\n\ncheck(dict_filter)",
      "context": "{\"function_name\": \"dict_filter\"}",
      "attempt_num": 1
    },
    {
      "task_id": 278,
      "prompt": "### Prompt\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n\n### Signature\ndef count_first_elements(test_tup):\n\n### Test\nassert candidate((1, 5, 7, (4, 6), 10) ) == 3",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count",
      "test_content": "from llm_output import count_first_elements\n\ndef check(candidate):\n    assert candidate((1, 5, 7, (4, 6), 10) ) == 3\n    assert candidate((2, 9, (5, 7), 11) ) == 2\n    assert candidate((11, 15, 5, 8, (2, 3), 8) ) == 4\n\ncheck(count_first_elements)",
      "context": "{\"function_name\": \"count_first_elements\"}",
      "attempt_num": 1
    },
    {
      "task_id": 279,
      "prompt": "### Prompt\nWrite a function to find the nth decagonal number.\n\n### Signature\ndef is_num_decagonal(n):\n\n### Test\nassert candidate(3) == 27",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def is_num_decagonal(n):\n    return 4 * n * n - 3 * n",
      "test_content": "from llm_output import is_num_decagonal\n\ndef check(candidate):\n    assert candidate(3) == 27\n    assert candidate(7) == 175\n    assert candidate(10) == 370\n\ncheck(is_num_decagonal)",
      "context": "{\"function_name\": \"is_num_decagonal\"}",
      "attempt_num": 1
    },
    {
      "task_id": 280,
      "prompt": "### Prompt\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n### Signature\ndef sequential_search(dlist, item):\n\n### Test\nassert candidate([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def sequential_search(dlist, item):\n    for index, element in enumerate(dlist):\n        if element == item:\n            return True, index\n    return False, -1",
      "test_content": "from llm_output import sequential_search\n\ndef check(candidate):\n    assert candidate([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n    assert candidate([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\n    assert candidate([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n\ncheck(sequential_search)",
      "context": "{\"function_name\": \"sequential_search\"}",
      "attempt_num": 1
    },
    {
      "task_id": 281,
      "prompt": "### Prompt\nWrite a python function to check if the elements of a given list are unique or not.\n\n### Signature\ndef all_unique(test_list):\n\n### Test\nassert candidate([1,2,3]) == True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def all_unique(test_list):\n    return len(test_list) == len(set(test_list))",
      "test_content": "from llm_output import all_unique\n\ndef check(candidate):\n    assert candidate([1,2,3]) == True\n    assert candidate([1,2,1,2]) == False\n    assert candidate([1,2,3,4,5]) == True\n\ncheck(all_unique)",
      "context": "{\"function_name\": \"all_unique\"}",
      "attempt_num": 1
    },
    {
      "task_id": 282,
      "prompt": "### Prompt\nWrite a function to subtract two lists element-wise.\n\n### Signature\ndef sub_list(nums1,nums2):\n\n### Test\nassert candidate([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def sub_list(nums1, nums2):\n    return [a - b for a, b in zip(nums1, nums2)]",
      "test_content": "from llm_output import sub_list\n\ndef check(candidate):\n    assert candidate([1, 2, 3],[4,5,6])==[-3,-3,-3]\n    assert candidate([1,2],[3,4])==[-2,-2]\n    assert candidate([90,120],[50,70])==[40,50]\n\ncheck(sub_list)",
      "context": "{\"function_name\": \"sub_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 283,
      "prompt": "### Prompt\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n### Signature\ndef validate(n):\n\n### Test\nassert candidate(1234) == True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def validate(n):\n    digit_count = {}\n    for digit in str(n):\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n    \n    for digit, count in digit_count.items():\n        if int(digit) < count:\n            return False\n    return True",
      "test_content": "from llm_output import validate\n\ndef check(candidate):\n    assert candidate(1234) == True\n    assert candidate(51241) == False\n    assert candidate(321) == True\n\ncheck(validate)",
      "context": "{\"function_name\": \"validate\"}",
      "attempt_num": 1
    },
    {
      "task_id": 284,
      "prompt": "### Prompt\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\n### Signature\ndef check_element(list,element):\n\n### Test\nassert candidate([\"green\", \"orange\", \"black\", \"white\"],\"\"\"blue\"\"\")==False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)",
      "test_content": "from llm_output import check_element\n\ndef check(candidate):\n    assert candidate([\"green\", \"orange\", \"black\", \"white\"],\"\"\"blue\"\"\")==False\n    assert candidate([1,2,3,4],7)==False\n    assert candidate([\"green\", \"green\", \"green\", \"green\"],\"\"\"green\"\"\")==True\n\ncheck(check_element)",
      "context": "{\"function_name\": \"check_element\"}",
      "attempt_num": 1
    },
    {
      "task_id": 285,
      "prompt": "### Prompt\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n### Signature\ndef text_match_two_three(text):\n\n### Test\nassert candidate(\"ac\")==(False)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = 'ab{2,3}'\n    return bool(re.search(pattern, text))",
      "test_content": "from llm_output import text_match_two_three\n\ndef check(candidate):\n    assert candidate(\"ac\")==(False)\n    assert candidate(\"dc\")==(False)\n    assert candidate(\"abbbba\")==(True)\n\ncheck(text_match_two_three)",
      "context": "{\"function_name\": \"text_match_two_three\"}",
      "attempt_num": 1
    },
    {
      "task_id": 286,
      "prompt": "### Prompt\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n### Signature\ndef max_sub_array_sum_repeated(a, n, k):\n\n### Test\nassert candidate([10, 20, -30, -1], 4, 3) == 30",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    max_current = max_global = a[0]\n    for i in range(1, n * k):\n        max_current = max(a[i % n], max_current + a[i % n])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global",
      "test_content": "from llm_output import max_sub_array_sum_repeated\n\ndef check(candidate):\n    assert candidate([10, 20, -30, -1], 4, 3) == 30\n    assert candidate([-1, 10, 20], 3, 2) == 59\n    assert candidate([-1, -2, -3], 3, 3) == -1\n\ncheck(max_sub_array_sum_repeated)",
      "context": "{\"function_name\": \"max_sub_array_sum_repeated\"}",
      "attempt_num": 1
    },
    {
      "task_id": 287,
      "prompt": "### Prompt\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n### Signature\ndef square_Sum(n):\n\n### Test\nassert candidate(2) == 20",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def square_Sum(n):\n    return sum((2*i)**2 for i in range(1, n+1))",
      "test_content": "from llm_output import square_Sum\n\ndef check(candidate):\n    assert candidate(2) == 20\n    assert candidate(3) == 56\n    assert candidate(4) == 120\n\ncheck(square_Sum)",
      "context": "{\"function_name\": \"square_Sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 290,
      "prompt": "### Prompt\nWrite a function to find the list of maximum length in a list of lists.\n\n### Signature\ndef max_length(list1):\n\n### Test\nassert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def max_length(list1):\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_len, max_list",
      "test_content": "from llm_output import max_length\n\ndef check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert candidate([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\n    assert candidate([[5], [15,20,25]])==(3, [15,20,25])\n\ncheck(max_length)",
      "context": "{\"function_name\": \"max_length\"}",
      "attempt_num": 1
    },
    {
      "task_id": 292,
      "prompt": "### Prompt\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n### Signature\ndef find(n,m):\n\n### Test\nassert candidate(10,3) == 3",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef find(n, m):\n    return math.floor(n / m)",
      "test_content": "from llm_output import find\n\ndef check(candidate):\n    assert candidate(10,3) == 3\n    assert candidate(4,2) == 2\n    assert candidate(20,5) == 4\n\ncheck(find)",
      "context": "{\"function_name\": \"find\"}",
      "attempt_num": 1
    },
    {
      "task_id": 293,
      "prompt": "### Prompt\nWrite a function to find the third side of a right angled triangle.\n\n### Signature\ndef otherside_rightangle(w,h):\n\n### Test\nassert candidate(7,8)==10.63014581273465",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w**2 + h**2)",
      "test_content": "from llm_output import otherside_rightangle\n\ndef check(candidate):\n    assert candidate(7,8)==10.63014581273465\n    assert candidate(3,4)==5\n    assert candidate(7,15)==16.55294535724685\n\ncheck(otherside_rightangle)",
      "context": "{\"function_name\": \"otherside_rightangle\"}",
      "attempt_num": 1
    },
    {
      "task_id": 294,
      "prompt": "### Prompt\nWrite a function to find the maximum value in a given heterogeneous list.\n\n### Signature\ndef max_val(listval):\n\n### Test\nassert candidate(['Python', 3, 2, 4, 5, 'version'])==5",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def max_val(listval):\n    return max(item for item in listval if isinstance(item, (int, float)))",
      "test_content": "from llm_output import max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version'])==5\n    assert candidate(['Python', 15, 20, 25])==25\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==50\n\ncheck(max_val)",
      "context": "{\"function_name\": \"max_val\"}",
      "attempt_num": 1
    },
    {
      "task_id": 295,
      "prompt": "### Prompt\nWrite a function to return the sum of all divisors of a number.\n\n### Signature\ndef sum_div(number):\n\n### Test\nassert candidate(8)==7",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            divisors.append(i)\n            if i != number // i:\n                divisors.append(number // i)\n    return sum(divisors)",
      "test_content": "from llm_output import sum_div\n\ndef check(candidate):\n    assert candidate(8)==7\n    assert candidate(12)==16\n    assert candidate(7)==1\n\ncheck(sum_div)",
      "context": "{\"function_name\": \"sum_div\"}",
      "attempt_num": 1
    },
    {
      "task_id": 296,
      "prompt": "### Prompt\nWrite a python function to count inversions in an array.\n\n### Signature\ndef get_Inv_Count(arr):\n\n### Test\nassert candidate([1,20,6,4,5]) == 5",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def get_Inv_Count(arr):\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
      "test_content": "from llm_output import get_Inv_Count\n\ndef check(candidate):\n    assert candidate([1,20,6,4,5]) == 5\n    assert candidate([1,2,1]) == 1\n    assert candidate([1,2,5,6,1]) == 3\n\ncheck(get_Inv_Count)",
      "context": "{\"function_name\": \"get_Inv_Count\"}",
      "attempt_num": 1
    },
    {
      "task_id": 297,
      "prompt": "### Prompt\nWrite a function to flatten a given nested list structure.\n\n### Signature\ndef flatten_list(list1):\n\n### Test\nassert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from collections import deque\n\ndef flatten_list(list1):\n    flattened = []\n    queue = deque([list1])\n    \n    while queue:\n        current = queue.popleft()\n        if isinstance(current, list):\n            queue.extendleft(reversed(current))\n        else:\n            flattened.append(current)\n    \n    return flattened",
      "test_content": "from llm_output import flatten_list\n\ndef check(candidate):\n    assert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n\ncheck(flatten_list)",
      "context": "{\"function_name\": \"flatten_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 299,
      "prompt": "### Prompt\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\n### Signature\ndef max_aggregate(stdata):\n\n### Test\nassert candidate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    aggregate = defaultdict(int)\n    for name, score in stdata:\n        aggregate[name] += score\n    return max(aggregate.items(), key=lambda x: x[1])",
      "test_content": "from llm_output import max_aggregate\n\ndef check(candidate):\n    assert candidate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n    assert candidate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\n    assert candidate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\n\ncheck(max_aggregate)",
      "context": "{\"function_name\": \"max_aggregate\"}",
      "attempt_num": 1
    },
    {
      "task_id": 300,
      "prompt": "### Prompt\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n### Signature\ndef count_binary_seq(n):\n\n### Test\nassert math.isclose(candidate(1), 2.0, rel_tol=0.001)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from math import comb\n\ndef count_binary_seq(n):\n    count = 0\n    for i in range(n + 1):\n        count += comb(n, i) ** 2\n    return count",
      "test_content": "from llm_output import count_binary_seq\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(1), 2.0, rel_tol=0.001)\n    assert math.isclose(candidate(2), 6.0, rel_tol=0.001)\n    assert math.isclose(candidate(3), 20.0, rel_tol=0.001)\n\ncheck(count_binary_seq)",
      "context": "{\"function_name\": \"count_binary_seq\"}",
      "attempt_num": 1
    },
    {
      "task_id": 304,
      "prompt": "### Prompt\nWrite a python function to find element at a given index after number of rotations.\n\n### Signature\ndef find_Element(arr,ranges,rotations,index) :\n\n### Test\nassert candidate([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def find_Element(arr,ranges,rotations,index) :\n    for i in range(rotations-1,-1,-1):\n        left = ranges[i][0]\n        right = ranges[i][1]\n        if left <= index <= right:\n            if index == left:\n                index = right\n            else:\n                index -= 1\n    return arr[index]",
      "test_content": "from llm_output import find_Element\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n    assert candidate([1,2,3,4],[[0,1],[0,2]],1,2) == 3\n    assert candidate([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1\n\ncheck(find_Element)",
      "context": "{\"function_name\": \"find_Element\"}",
      "attempt_num": 1
    },
    {
      "task_id": 308,
      "prompt": "### Prompt\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n### Signature\ndef large_product(nums1, nums2, N):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import heapq\n\ndef large_product(nums1, nums2, N):\n    return heapq.nlargest(N, (a * b for a in nums1 for b in nums2))",
      "test_content": "from llm_output import large_product\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]\n\ncheck(large_product)",
      "context": "{\"function_name\": \"large_product\"}",
      "attempt_num": 1
    },
    {
      "task_id": 309,
      "prompt": "### Prompt\nWrite a python function to find the maximum of two numbers.\n\n### Signature\ndef maximum(a,b):\n\n### Test\nassert candidate(5,10) == 10",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def maximum(a, b):\n    return max(a, b)",
      "test_content": "from llm_output import maximum\n\ndef check(candidate):\n    assert candidate(5,10) == 10\n    assert candidate(-1,-2) == -1\n    assert candidate(9,7) == 9\n\ncheck(maximum)",
      "context": "{\"function_name\": \"maximum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 312,
      "prompt": "### Prompt\nWrite a function to find the volume of a cone.\n\n### Signature\ndef volume_cone(r,h):\n\n### Test\nassert math.isclose(candidate(5,12), 314.15926535897927, rel_tol=0.001)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef volume_cone(r, h):\n    return (1/3) * math.pi * r**2 * h",
      "test_content": "from llm_output import volume_cone\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(5,12), 314.15926535897927, rel_tol=0.001)\n    assert math.isclose(candidate(10,15), 1570.7963267948965, rel_tol=0.001)\n    assert math.isclose(candidate(19,17), 6426.651371693521, rel_tol=0.001)\n\ncheck(volume_cone)",
      "context": "{\"function_name\": \"volume_cone\"}",
      "attempt_num": 1
    },
    {
      "task_id": 388,
      "prompt": "### Prompt\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\n### Signature\ndef highest_Power_of_2(n):\n\n### Test\nassert candidate(10) == 8",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef highest_Power_of_2(n):\n    return 2 ** math.floor(math.log2(n))",
      "test_content": "from llm_output import highest_Power_of_2\n\ndef check(candidate):\n    assert candidate(10) == 8\n    assert candidate(19) == 16\n    assert candidate(32) == 32\n\ncheck(highest_Power_of_2)",
      "context": "{\"function_name\": \"highest_Power_of_2\"}",
      "attempt_num": 1
    },
    {
      "task_id": 389,
      "prompt": "### Prompt\nWrite a function to find the n'th lucas number.\n\n### Signature\ndef find_lucas(n):\n\n### Test\nassert candidate(9) == 76",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b",
      "test_content": "from llm_output import find_lucas\n\ndef check(candidate):\n    assert candidate(9) == 76\n    assert candidate(4) == 7\n    assert candidate(3) == 4\n\ncheck(find_lucas)",
      "context": "{\"function_name\": \"find_lucas\"}",
      "attempt_num": 1
    },
    {
      "task_id": 390,
      "prompt": "### Prompt\nWrite a function to apply a given format string to all of the elements in a list.\n\n### Signature\ndef add_string(list_, string):\n\n### Test\nassert candidate([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import string\n\ndef add_string(list_, string):\n    return [string.format(i) for i in list_]",
      "test_content": "from llm_output import add_string\n\ndef check(candidate):\n    assert candidate([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    assert candidate(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\n    assert candidate([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\n\ncheck(add_string)",
      "context": "{\"function_name\": \"add_string\"}",
      "attempt_num": 1
    },
    {
      "task_id": 391,
      "prompt": "### Prompt\nWrite a function to convert more than one list to nested dictionary.\n\n### Signature\ndef convert_list_dictionary(l1, l2, l3):\n\n### Test\nassert candidate([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{\"\"\"S001\"\"\": {\"\"\"Adina Park\"\"\": 85}}, {\"\"\"S002\"\"\": {\"\"\"Leyton Marsh\"\"\": 98}}, {\"\"\"S003\"\"\": {\"\"\"Duncan Boyle\"\"\": 89}}, {\"\"\"S004\"\"\": {\"\"\"Saim Richards\"\"\": 92}}]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def convert_list_dictionary(l1, l2, l3):\n    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]",
      "test_content": "from llm_output import convert_list_dictionary\n\ndef check(candidate):\n    assert candidate([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{\"\"\"S001\"\"\": {\"\"\"Adina Park\"\"\": 85}}, {\"\"\"S002\"\"\": {\"\"\"Leyton Marsh\"\"\": 98}}, {\"\"\"S003\"\"\": {\"\"\"Duncan Boyle\"\"\": 89}}, {\"\"\"S004\"\"\": {\"\"\"Saim Richards\"\"\": 92}}]\n    assert candidate([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{\"\"\"abc\"\"\":{\"\"\"python\"\"\":100}},{\"\"\"def\"\"\":{\"\"\"program\"\"\":200}},{\"\"\"ghi\"\"\":{\"\"\"language\"\"\":300}},{\"\"\"jkl\"\"\":{\"\"\"programs\"\"\":400}}]\n    assert candidate([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{\"\"\"A1\"\"\":{\"\"\"java\"\"\":10}},{\"\"\"A2\"\"\":{\"\"\"C\"\"\":20}},{\"\"\"A3\"\"\":{\"\"\"C++\"\"\":30}},{\"\"\"A4\"\"\":{\"\"\"DBMS\"\"\":40}}]\n\ncheck(convert_list_dictionary)",
      "context": "{\"function_name\": \"convert_list_dictionary\"}",
      "attempt_num": 1
    },
    {
      "task_id": 392,
      "prompt": "### Prompt\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n### Signature\ndef get_max_sum (n):\n\n### Test\nassert get_max_sum(60) == 106",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import functools\n\n@functools.lru_cache(None)\ndef get_max_sum (n):\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))",
      "test_content": "from llm_output import get_max_sum \n\ndef check(candidate):\n    assert get_max_sum(60) == 106\n    assert get_max_sum(10) == 12\n    assert get_max_sum(2) == 2\n\ncheck(get_max_sum )",
      "context": "{\"function_name\": \"get_max_sum \"}",
      "attempt_num": 1
    },
    {
      "task_id": 393,
      "prompt": "### Prompt\nWrite a function to find the list with maximum length.\n\n### Signature\ndef max_length_list(input_list):\n\n### Test\nassert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def max_length_list(input_list):\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_length, max_list",
      "test_content": "from llm_output import max_length_list\n\ndef check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert candidate([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\n    assert candidate([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])\n\ncheck(max_length_list)",
      "context": "{\"function_name\": \"max_length_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 394,
      "prompt": "### Prompt\nWrite a function to check if given tuple contains no duplicates.\n\n### Signature\ndef check_distinct(test_tup):\n\n### Test\nassert candidate((1, 4, 5, 6, 1, 4)) == False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))",
      "test_content": "from llm_output import check_distinct\n\ndef check(candidate):\n    assert candidate((1, 4, 5, 6, 1, 4)) == False\n    assert candidate((1, 4, 5, 6)) == True\n    assert candidate((2, 3, 4, 5, 6)) == True\n\ncheck(check_distinct)",
      "context": "{\"function_name\": \"check_distinct\"}",
      "attempt_num": 1
    },
    {
      "task_id": 395,
      "prompt": "### Prompt\nWrite a python function to find the first non-repeated character in a given string.\n\n### Signature\ndef first_non_repeating_character(str1):\n\n### Test\nassert candidate(\"abcabc\") == None",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import collections\n\ndef first_non_repeating_character(str1):\n    char_count = collections.Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None",
      "test_content": "from llm_output import first_non_repeating_character\n\ndef check(candidate):\n    assert candidate(\"abcabc\") == None\n    assert candidate(\"abc\") == \"a\"\n    assert candidate(\"ababc\") == \"c\"\n\ncheck(first_non_repeating_character)",
      "context": "{\"function_name\": \"first_non_repeating_character\"}",
      "attempt_num": 1
    },
    {
      "task_id": 396,
      "prompt": "### Prompt\nWrite a function to check whether the given string starts and ends with the same character or not.\n\n### Signature\ndef check_char(string):\n\n### Test\nassert candidate(\"abba\") == \"Valid\"",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def check_char(string):\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"",
      "test_content": "from llm_output import check_char\n\ndef check(candidate):\n    assert candidate(\"abba\") == \"Valid\"\n    assert candidate(\"a\") == \"Valid\"\n    assert candidate(\"abcd\") == \"Invalid\"\n\ncheck(check_char)",
      "context": "{\"function_name\": \"check_char\"}",
      "attempt_num": 1
    },
    {
      "task_id": 397,
      "prompt": "### Prompt\nWrite a function to find the median of three numbers.\n\n### Signature\ndef median_numbers(a,b,c):\n\n### Test\nassert candidate(25,55,65)==55.0",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]",
      "test_content": "from llm_output import median_numbers\n\ndef check(candidate):\n    assert candidate(25,55,65)==55.0\n    assert candidate(20,10,30)==20.0\n    assert candidate(15,45,75)==45.0\n\ncheck(median_numbers)",
      "context": "{\"function_name\": \"median_numbers\"}",
      "attempt_num": 1
    },
    {
      "task_id": 399,
      "prompt": "### Prompt\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\n### Signature\ndef bitwise_xor(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def bitwise_xor(test_tup1, test_tup2):\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))",
      "test_content": "from llm_output import bitwise_xor\n\ndef check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    assert candidate((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n    assert candidate((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)\n\ncheck(bitwise_xor)",
      "context": "{\"function_name\": \"bitwise_xor\"}",
      "attempt_num": 1
    },
    {
      "task_id": 401,
      "prompt": "### Prompt\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n### Signature\ndef add_nested_tuples(test_tup1, test_tup2):\n\n### Test\nassert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def add_nested_tuples(test_tup1, test_tup2):\n    result = tuple(tuple(sum(pair) for pair in zip(inner_tup1, inner_tup2))\n                   for inner_tup1, inner_tup2 in zip(test_tup1, test_tup2))\n    return result",
      "test_content": "from llm_output import add_nested_tuples\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ncheck(add_nested_tuples)",
      "context": "{\"function_name\": \"add_nested_tuples\"}",
      "attempt_num": 1
    },
    {
      "task_id": 404,
      "prompt": "### Prompt\nWrite a python function to find the minimum of two numbers.\n\n### Signature\ndef minimum(a,b):\n\n### Test\nassert candidate(1,2) == 1",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def minimum(a, b):\n    return min(a, b)",
      "test_content": "from llm_output import minimum\n\ndef check(candidate):\n    assert candidate(1,2) == 1\n    assert candidate(-5,-4) == -5\n    assert candidate(0,0) == 0\n\ncheck(minimum)",
      "context": "{\"function_name\": \"minimum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 405,
      "prompt": "### Prompt\nWrite a function to check whether an element exists within a tuple.\n\n### Signature\ndef check_tuplex(tuplex,tuple1):\n\n### Test\nassert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),\"\"\"r\"\"\")==True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def check_tuplex(tuplex, tuple1):\n    return tuple1 in tuplex",
      "test_content": "from llm_output import check_tuplex\n\ndef check(candidate):\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),\"\"\"r\"\"\")==True\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),\"\"\"5\"\"\")==False\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n\ncheck(check_tuplex)",
      "context": "{\"function_name\": \"check_tuplex\"}",
      "attempt_num": 1
    },
    {
      "task_id": 406,
      "prompt": "### Prompt\nWrite a python function to find whether the parity of a given number is odd.\n\n### Signature\ndef find_Parity(x):\n\n### Test\nassert candidate(12) == False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def find_Parity(x):\n    return x % 2 != 0",
      "test_content": "from llm_output import find_Parity\n\ndef check(candidate):\n    assert candidate(12) == False\n    assert candidate(7) == True\n    assert candidate(10) == False\n\ncheck(find_Parity)",
      "context": "{\"function_name\": \"find_Parity\"}",
      "attempt_num": 1
    },
    {
      "task_id": 409,
      "prompt": "### Prompt\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\n### Signature\ndef min_product_tuple(list1):\n\n### Test\nassert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef min_product_tuple(list1):\n    min_product = math.inf\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product",
      "test_content": "from llm_output import min_product_tuple\n\ndef check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert candidate([(10,20), (15,2), (5,10)] )==30\n    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==100\n\ncheck(min_product_tuple)",
      "context": "{\"function_name\": \"min_product_tuple\"}",
      "attempt_num": 1
    },
    {
      "task_id": 410,
      "prompt": "### Prompt\nWrite a function to find the minimum value in a given heterogeneous list.\n\n### Signature\ndef min_val(listval):\n\n### Test\nassert candidate(['Python', 3, 2, 4, 5, 'version'])==2",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import sys\n\ndef min_val(listval):\n    min_value = sys.maxsize\n    for item in listval:\n        if isinstance(item, (int, float)) and item < min_value:\n            min_value = item\n    return min_value",
      "test_content": "from llm_output import min_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version'])==2\n    assert candidate(['Python', 15, 20, 25])==15\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==20\n\ncheck(min_val)",
      "context": "{\"function_name\": \"min_val\"}",
      "attempt_num": 1
    },
    {
      "task_id": 412,
      "prompt": "### Prompt\nWrite a python function to remove odd numbers from a given list.\n\n### Signature\ndef remove_odd(l):\n\n### Test\nassert candidate([1,2,3]) == [2]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def remove_odd(l):\n    return [x for x in l if x % 2 == 0]",
      "test_content": "from llm_output import remove_odd\n\ndef check(candidate):\n    assert candidate([1,2,3]) == [2]\n    assert candidate([2,4,6]) == [2,4,6]\n    assert candidate([10,20,3]) == [10,20]\n\ncheck(remove_odd)",
      "context": "{\"function_name\": \"remove_odd\"}",
      "attempt_num": 1
    },
    {
      "task_id": 413,
      "prompt": "### Prompt\nWrite a function to extract the nth element from a given list of tuples.\n\n### Signature\ndef extract_nth_element(list1, n):\n\n### Test\nassert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def extract_nth_element(list1, n):\n    return [item[n] for item in list1]",
      "test_content": "from llm_output import extract_nth_element\n\ndef check(candidate):\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n\ncheck(extract_nth_element)",
      "context": "{\"function_name\": \"extract_nth_element\"}",
      "attempt_num": 1
    },
    {
      "task_id": 414,
      "prompt": "### Prompt\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\n### Signature\ndef overlapping(list1,list2):\n\n### Test\nassert candidate([1,2,3,4,5],[6,7,8,9]) == False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def overlapping(list1, list2):\n    return bool(set(list1) & set(list2))",
      "test_content": "from llm_output import overlapping\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5],[6,7,8,9]) == False\n    assert candidate([1,2,3],[4,5,6]) == False\n    assert candidate([1,4,5],[1,4,5]) == True\n\ncheck(overlapping)",
      "context": "{\"function_name\": \"overlapping\"}",
      "attempt_num": 1
    },
    {
      "task_id": 418,
      "prompt": "### Prompt\nWrite a python function to find the element of a list having maximum length.\n\n### Signature\ndef Find_Max(lst):\n\n### Test\nassert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def Find_Max(lst):\n    return max(lst, key=len)",
      "test_content": "from llm_output import Find_Max\n\ndef check(candidate):\n    assert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    assert candidate([[1],[1,2],[1,2,3]]) == [1,2,3]\n    assert candidate([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n\ncheck(Find_Max)",
      "context": "{\"function_name\": \"Find_Max\"}",
      "attempt_num": 1
    },
    {
      "task_id": 420,
      "prompt": "### Prompt\nWrite a python function to find the cube sum of first n even natural numbers.\n\n### Signature\ndef cube_Sum(n):\n\n### Test\nassert candidate(2) == 72",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def cube_Sum(n):\n    return sum((2*i)**3 for i in range(1, n+1))",
      "test_content": "from llm_output import cube_Sum\n\ndef check(candidate):\n    assert candidate(2) == 72\n    assert candidate(3) == 288\n    assert candidate(4) == 800\n\ncheck(cube_Sum)",
      "context": "{\"function_name\": \"cube_Sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 421,
      "prompt": "### Prompt\nWrite a function to concatenate each element of tuple by the delimiter.\n\n### Signature\ndef concatenate_tuple(test_tup):\n\n### Test\nassert candidate((\"ID\", \"is\", 4, \"UTS\") ) == \"\"\"ID-is-4-UTS\"\"\"",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import string\n\ndef concatenate_tuple(test_tup):\n    # Convert all elements to string and join with '-'\n    result = '-'.join(str(element) for element in test_tup)\n    return result",
      "test_content": "from llm_output import concatenate_tuple\n\ndef check(candidate):\n    assert candidate((\"ID\", \"is\", 4, \"UTS\") ) == \"\"\"ID-is-4-UTS\"\"\"\n    assert candidate((\"QWE\", \"is\", 4, \"RTY\") ) == \"\"\"QWE-is-4-RTY\"\"\"\n    assert candidate((\"ZEN\", \"is\", 4, \"OP\") ) == \"\"\"ZEN-is-4-OP\"\"\"\n\ncheck(concatenate_tuple)",
      "context": "{\"function_name\": \"concatenate_tuple\"}",
      "attempt_num": 1
    },
    {
      "task_id": 422,
      "prompt": "### Prompt\nWrite a python function to find the average of cubes of first n natural numbers.\n\n### Signature\ndef find_Average_Of_Cube(n):\n\n### Test\nassert candidate(2) == 4.5",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def find_Average_Of_Cube(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total / n",
      "test_content": "from llm_output import find_Average_Of_Cube\n\ndef check(candidate):\n    assert candidate(2) == 4.5\n    assert candidate(3) == 12\n    assert candidate(1) == 1\n\ncheck(find_Average_Of_Cube)",
      "context": "{\"function_name\": \"find_Average_Of_Cube\"}",
      "attempt_num": 1
    },
    {
      "task_id": 424,
      "prompt": "### Prompt\nWrite a function to extract only the rear index element of each string in the given tuple.\n\n### Signature\ndef extract_rear(test_tuple):\n\n### Test\nassert candidate(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def extract_rear(test_tuple):\n    return [word[-1] for word in test_tuple]",
      "test_content": "from llm_output import extract_rear\n\ndef check(candidate):\n    assert candidate(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n    assert candidate(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\n    assert candidate(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n\ncheck(extract_rear)",
      "context": "{\"function_name\": \"extract_rear\"}",
      "attempt_num": 1
    },
    {
      "task_id": 425,
      "prompt": "### Prompt\nWrite a function to count the number of sublists containing a particular element.\n\n### Signature\ndef count_element_in_list(list1, x):\n\n### Test\nassert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
      "test_content": "from llm_output import count_element_in_list\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\n\ncheck(count_element_in_list)",
      "context": "{\"function_name\": \"count_element_in_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 426,
      "prompt": "### Prompt\nWrite a function to filter odd numbers.\n\n### Signature\ndef filter_oddnumbers(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]",
      "test_content": "from llm_output import filter_oddnumbers\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n    assert candidate([10,20,45,67,84,93])==[45,67,93]\n    assert candidate([5,7,9,8,6,4,3])==[5,7,9,3]\n\ncheck(filter_oddnumbers)",
      "context": "{\"function_name\": \"filter_oddnumbers\"}",
      "attempt_num": 1
    },
    {
      "task_id": 427,
      "prompt": "### Prompt\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n### Signature\ndef change_date_format(dt):\n\n### Test\nassert candidate(\"2026-01-02\") == \"\"\"02-01-2026\"\"\"",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from datetime import datetime\n\ndef change_date_format(dt):\n    date_obj = datetime.strptime(dt, \"%Y-%m-%d\")\n    return date_obj.strftime(\"%d-%m-%Y\")",
      "test_content": "from llm_output import change_date_format\n\ndef check(candidate):\n    assert candidate(\"2026-01-02\") == \"\"\"02-01-2026\"\"\"\n    assert candidate(\"2020-11-13\") == \"\"\"13-11-2020\"\"\"\n    assert candidate(\"2021-04-26\") == \"\"\"26-04-2021\"\"\"\n\ncheck(change_date_format)",
      "context": "{\"function_name\": \"change_date_format\"}",
      "attempt_num": 1
    },
    {
      "task_id": 429,
      "prompt": "### Prompt\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\n### Signature\ndef and_tuples(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def and_tuples(test_tup1, test_tup2):\n    result = tuple(a & b for a, b in zip(test_tup1, test_tup2))\n    return result",
      "test_content": "from llm_output import and_tuples\n\ndef check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    assert candidate((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n    assert candidate((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n\ncheck(and_tuples)",
      "context": "{\"function_name\": \"and_tuples\"}",
      "attempt_num": 1
    },
    {
      "task_id": 432,
      "prompt": "### Prompt\nWrite a function to find the median length of a trapezium.\n\n### Signature\ndef median_trapezium(base1,base2,height):\n\n### Test\nassert candidate(15,25,35)==20",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def median_trapezium(base1, base2, height):\n    return (base1 + base2) / 2",
      "test_content": "from llm_output import median_trapezium\n\ndef check(candidate):\n    assert candidate(15,25,35)==20\n    assert candidate(10,20,30)==15\n    assert candidate(6,9,4)==7.5\n\ncheck(median_trapezium)",
      "context": "{\"function_name\": \"median_trapezium\"}",
      "attempt_num": 1
    },
    {
      "task_id": 433,
      "prompt": "### Prompt\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\n### Signature\ndef check_greater(arr, number):\n\n### Test\nassert candidate([1, 2, 3, 4, 5], 4) == False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def check_greater(arr, number):\n    for element in arr:\n        if number <= element:\n            return False\n    return True",
      "test_content": "from llm_output import check_greater\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5], 4) == False\n    assert candidate([2, 3, 4, 5, 6], 8) == True\n    assert candidate([9, 7, 4, 8, 6, 1], 11) == True\n\ncheck(check_greater)",
      "context": "{\"function_name\": \"check_greater\"}",
      "attempt_num": 1
    },
    {
      "task_id": 434,
      "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by one or more b's.\n\n### Signature\ndef text_match_one(text):\n\n### Test\nassert candidate(\"ac\")==False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef text_match_one(text):\n    pattern = 'ab+'\n    return bool(re.search(pattern, text))",
      "test_content": "from llm_output import text_match_one\n\ndef check(candidate):\n    assert candidate(\"ac\")==False\n    assert candidate(\"dc\")==False\n    assert candidate(\"abba\")==True\n\ncheck(text_match_one)",
      "context": "{\"function_name\": \"text_match_one\"}",
      "attempt_num": 1
    },
    {
      "task_id": 435,
      "prompt": "### Prompt\nWrite a python function to find the last digit of a given number.\n\n### Signature\ndef last_Digit(n) :\n\n### Test\nassert candidate(123) == 3",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def last_Digit(n) :\n    return n % 10",
      "test_content": "from llm_output import last_Digit\n\ndef check(candidate):\n    assert candidate(123) == 3\n    assert candidate(25) == 5\n    assert candidate(30) == 0\n\ncheck(last_Digit)",
      "context": "{\"function_name\": \"last_Digit\"}",
      "attempt_num": 1
    },
    {
      "task_id": 436,
      "prompt": "### Prompt\nWrite a python function to return the negative numbers in a list.\n\n### Signature\ndef neg_nos(list1):\n\n### Test\nassert candidate([-1,4,5,-6]) == [-1,-6]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def neg_nos(list1):\n    return [num for num in list1 if num < 0]",
      "test_content": "from llm_output import neg_nos\n\ndef check(candidate):\n    assert candidate([-1,4,5,-6]) == [-1,-6]\n    assert candidate([-1,-2,3,4]) == [-1,-2]\n    assert candidate([-7,-6,8,9]) == [-7,-6]\n\ncheck(neg_nos)",
      "context": "{\"function_name\": \"neg_nos\"}",
      "attempt_num": 1
    },
    {
      "task_id": 439,
      "prompt": "### Prompt\nWrite a function to join a list of multiple integers into a single integer.\n\n### Signature\ndef multiple_to_single(L):\n\n### Test\nassert candidate([11, 33, 50])==113350",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def multiple_to_single(L):\n    return int(''.join(str(i) for i in L))",
      "test_content": "from llm_output import multiple_to_single\n\ndef check(candidate):\n    assert candidate([11, 33, 50])==113350\n    assert candidate([-1,2,3,4,5,6])==-123456\n    assert candidate([10,15,20,25])==10152025\n\ncheck(multiple_to_single)",
      "context": "{\"function_name\": \"multiple_to_single\"}",
      "attempt_num": 1
    },
    {
      "task_id": 440,
      "prompt": "### Prompt\nWrite a function to find the first adverb and their positions in a given sentence.\n\n### Signature\ndef find_adverb_position(text):\n\n### Test\nassert candidate(\"clearly!! we can see the sky\")==(0, 7, \"\"\"clearly\"\"\")",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef find_adverb_position(text):\n    match = re.search(r\"\\b\\w+ly\\b\", text)\n    if match:\n        return match.start(), match.end(), match.group(0)\n    else:\n        return None",
      "test_content": "from llm_output import find_adverb_position\n\ndef check(candidate):\n    assert candidate(\"clearly!! we can see the sky\")==(0, 7, \"\"\"clearly\"\"\")\n    assert candidate(\"seriously!! there are many roses\")==(0, 9, \"\"\"seriously\"\"\")\n    assert candidate(\"unfortunately!! sita is going to home\")==(0, 13, \"\"\"unfortunately\"\"\")\n\ncheck(find_adverb_position)",
      "context": "{\"function_name\": \"find_adverb_position\"}",
      "attempt_num": 1
    },
    {
      "task_id": 441,
      "prompt": "### Prompt\nWrite a function to find the surface area of a cube of a given size.\n\n### Signature\ndef surfacearea_cube(l):\n\n### Test\nassert candidate(5)==150",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef surfacearea_cube(l):\n    return 6 * l * l",
      "test_content": "from llm_output import surfacearea_cube\n\ndef check(candidate):\n    assert candidate(5)==150\n    assert candidate(3)==54\n    assert candidate(10)==600\n\ncheck(surfacearea_cube)",
      "context": "{\"function_name\": \"surfacearea_cube\"}",
      "attempt_num": 1
    },
    {
      "task_id": 445,
      "prompt": "### Prompt\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n### Signature\ndef index_multiplication(test_tup1, test_tup2):\n\n### Test\nassert candidate(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def index_multiplication(test_tup1, test_tup2):\n    result = tuple(tuple(a * b for a, b in zip(inner_tup1, inner_tup2))\n                   for inner_tup1, inner_tup2 in zip(test_tup1, test_tup2))\n    return result",
      "test_content": "from llm_output import index_multiplication\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\n\ncheck(index_multiplication)",
      "context": "{\"function_name\": \"index_multiplication\"}",
      "attempt_num": 1
    },
    {
      "task_id": 446,
      "prompt": "### Prompt\nWrite a python function to count the occurence of all elements of list in a tuple.\n\n### Signature\ndef count_Occurrence(tup, lst):\n\n### Test\nassert candidate(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    counter = Counter(tup)\n    return sum(counter[element] for element in lst if element in counter)",
      "test_content": "from llm_output import count_Occurrence\n\ndef check(candidate):\n    assert candidate(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n    assert candidate((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\n    assert candidate((1,2,3,4,5,6),[1,2]) == 2\n\ncheck(count_Occurrence)",
      "context": "{\"function_name\": \"count_Occurrence\"}",
      "attempt_num": 1
    },
    {
      "task_id": 447,
      "prompt": "### Prompt\nWrite a function to find cubes of individual elements in a list.\n\n### Signature\ndef cube_nums(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def cube_nums(nums):\n    return [num ** 3 for num in nums]",
      "test_content": "from llm_output import cube_nums\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert candidate([10,20,30])==([1000, 8000, 27000])\n    assert candidate([12,15])==([1728, 3375])\n\ncheck(cube_nums)",
      "context": "{\"function_name\": \"cube_nums\"}",
      "attempt_num": 1
    },
    {
      "task_id": 448,
      "prompt": "### Prompt\nWrite a function to calculate the sum of perrin numbers.\n\n### Signature\ndef cal_sum(n):\n\n### Test\nassert candidate(9) == 49",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def cal_sum(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 5\n    elif n == 2:\n        return 7\n    \n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        next_val = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_val)\n    \n    return sum(perrin)",
      "test_content": "from llm_output import cal_sum\n\ndef check(candidate):\n    assert candidate(9) == 49\n    assert candidate(10) == 66\n    assert candidate(11) == 88\n\ncheck(cal_sum)",
      "context": "{\"function_name\": \"cal_sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 451,
      "prompt": "### Prompt\nWrite a function to remove all whitespaces from the given string.\n\n### Signature\ndef remove_whitespaces(text1):\n\n### Test\nassert candidate(' Google    Flutter ') == 'GoogleFlutter'",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def remove_whitespaces(text1):\n    return text1.replace(\" \", \"\")",
      "test_content": "from llm_output import remove_whitespaces\n\ndef check(candidate):\n    assert candidate(' Google    Flutter ') == 'GoogleFlutter'\n    assert candidate(' Google    Dart ') == 'GoogleDart'\n    assert candidate(' iOS    Swift ') == 'iOSSwift'\n\ncheck(remove_whitespaces)",
      "context": "{\"function_name\": \"remove_whitespaces\"}",
      "attempt_num": 1
    },
    {
      "task_id": 452,
      "prompt": "### Prompt\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n### Signature\ndef loss_amount(actual_cost,sale_amount):\n\n### Test\nassert candidate(1500,1200)==0",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0",
      "test_content": "from llm_output import loss_amount\n\ndef check(candidate):\n    assert candidate(1500,1200)==0\n    assert candidate(100,200)==100\n    assert candidate(2000,5000)==3000\n\ncheck(loss_amount)",
      "context": "{\"function_name\": \"loss_amount\"}",
      "attempt_num": 1
    },
    {
      "task_id": 453,
      "prompt": "### Prompt\nWrite a python function to find the sum of even factors of a number.\n\n### Signature\ndef sumofFactors(n) :\n\n### Test\nassert candidate(18) == 26",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def sumofFactors(n):\n    # Initialize result\n    result = 0\n    \n    # Iterate through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # Check if i is even\n            if i % 2 == 0:\n                result += i\n                \n    return result",
      "test_content": "from llm_output import sumofFactors\n\ndef check(candidate):\n    assert candidate(18) == 26\n    assert candidate(30) == 48\n    assert candidate(6) == 8\n\ncheck(sumofFactors)",
      "context": "{\"function_name\": \"sumofFactors\"}",
      "attempt_num": 1
    },
    {
      "task_id": 454,
      "prompt": "### Prompt\nWrite a function that matches a word containing 'z'.\n\n### Signature\ndef text_match_wordz(text):\n\n### Test\nassert candidate(\"pythonz.\")==True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef text_match_wordz(text):\n    pattern = '\\w*z.\\w*'\n    if re.search(pattern,  text):\n        return True\n    else:\n        return False",
      "test_content": "from llm_output import text_match_wordz\n\ndef check(candidate):\n    assert candidate(\"pythonz.\")==True\n    assert candidate(\"xyz.\")==True\n    assert candidate(\"  lang  .\")==False\n\ncheck(text_match_wordz)",
      "context": "{\"function_name\": \"text_match_wordz\"}",
      "attempt_num": 1
    },
    {
      "task_id": 455,
      "prompt": "### Prompt\nWrite a function to check whether the given month number contains 31 days or not.\n\n### Signature\ndef check_monthnumb_number(monthnum2):\n\n### Test\nassert candidate(5)==True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def check_monthnumb_number(monthnum2):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return monthnum2 in months_with_31_days",
      "test_content": "from llm_output import check_monthnumb_number\n\ndef check(candidate):\n    assert candidate(5)==True\n    assert candidate(2)==False\n    assert candidate(6)==False\n\ncheck(check_monthnumb_number)",
      "context": "{\"function_name\": \"check_monthnumb_number\"}",
      "attempt_num": 1
    },
    {
      "task_id": 456,
      "prompt": "### Prompt\nWrite a function to reverse each string in a given list of string values.\n\n### Signature\ndef reverse_string_list(stringlist):\n\n### Test\nassert candidate(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]",
      "test_content": "from llm_output import reverse_string_list\n\ndef check(candidate):\n    assert candidate(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    assert candidate(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\n    assert candidate(['jack','john','mary'])==['kcaj','nhoj','yram']\n\ncheck(reverse_string_list)",
      "context": "{\"function_name\": \"reverse_string_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 457,
      "prompt": "### Prompt\nWrite a python function to find the sublist having minimum length.\n\n### Signature\ndef Find_Min(lst):\n\n### Test\nassert candidate([[1],[1,2],[1,2,3]]) == [1]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from typing import List\n\ndef Find_Min(lst: List[List[int]]) -> List[int]:\n    return min(lst, key=len)",
      "test_content": "from llm_output import Find_Min\n\ndef check(candidate):\n    assert candidate([[1],[1,2],[1,2,3]]) == [1]\n    assert candidate([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\n    assert candidate([['x'],['x','y'],['x','y','z']]) == ['x']\n\ncheck(Find_Min)",
      "context": "{\"function_name\": \"Find_Min\"}",
      "attempt_num": 1
    },
    {
      "task_id": 458,
      "prompt": "### Prompt\nWrite a function to find the area of a rectangle.\n\n### Signature\ndef rectangle_area(l,b):\n\n### Test\nassert candidate(10,20)==200",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def rectangle_area(l, b):\n    return l * b",
      "test_content": "from llm_output import rectangle_area\n\ndef check(candidate):\n    assert candidate(10,20)==200\n    assert candidate(10,5)==50\n    assert candidate(4,2)==8\n\ncheck(rectangle_area)",
      "context": "{\"function_name\": \"rectangle_area\"}",
      "attempt_num": 1
    },
    {
      "task_id": 459,
      "prompt": "### Prompt\nWrite a function to remove uppercase substrings from a given string.\n\n### Signature\ndef remove_uppercase(str1):\n\n### Test\nassert candidate('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef remove_uppercase(str1):\n    return re.sub('[A-Z]', '', str1)",
      "test_content": "from llm_output import remove_uppercase\n\ndef check(candidate):\n    assert candidate('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert candidate('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\n    assert candidate('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n\ncheck(remove_uppercase)",
      "context": "{\"function_name\": \"remove_uppercase\"}",
      "attempt_num": 1
    },
    {
      "task_id": 460,
      "prompt": "### Prompt\nWrite a python function to get the first element of each sublist.\n\n### Signature\ndef Extract(lst):\n\n### Test\nassert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst if sublist]",
      "test_content": "from llm_output import Extract\n\ndef check(candidate):\n    assert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert candidate([[1,2,3],[4, 5]]) == [1,4]\n    assert candidate([[9,8,1],[1,2]]) == [9,1]\n\ncheck(Extract)",
      "context": "{\"function_name\": \"Extract\"}",
      "attempt_num": 1
    },
    {
      "task_id": 463,
      "prompt": "### Prompt\nWrite a function to find the maximum product subarray of the given array.\n\n### Signature\ndef max_subarray_product(arr):\n\n### Test\nassert candidate([1, -2, -3, 0, 7, -8, -2]) == 112",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import sys\n\ndef max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = -sys.maxsize - 1\n    current_max = 1\n    current_min = 1\n    \n    for num in arr:\n        if num == 0:\n            current_max, current_min = 1, 1\n            continue\n        \n        temp = current_max * num\n        current_max = max(num, temp, current_min * num)\n        current_min = min(num, temp, current_min * num)\n        \n        max_product = max(max_product, current_max)\n    \n    return max_product",
      "test_content": "from llm_output import max_subarray_product\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert candidate([6, -3, -10, 0, 2]) == 180\n    assert candidate([-2, -40, 0, -2, -3]) == 80\n\ncheck(max_subarray_product)",
      "context": "{\"function_name\": \"max_subarray_product\"}",
      "attempt_num": 1
    },
    {
      "task_id": 464,
      "prompt": "### Prompt\nWrite a function to check if all values are same in a dictionary.\n\n### Signature\ndef check_value(dict, n):\n\n### Test\nassert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def check_value(dict, n):\n    return all(value == n for value in dict.values())",
      "test_content": "from llm_output import check_value\n\ndef check(candidate):\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False\n\ncheck(check_value)",
      "context": "{\"function_name\": \"check_value\"}",
      "attempt_num": 1
    },
    {
      "task_id": 465,
      "prompt": "### Prompt\nWrite a function to drop empty items from a given dictionary.\n\n### Signature\ndef drop_empty(dict1):\n\n### Test\nassert candidate({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value is not None}",
      "test_content": "from llm_output import drop_empty\n\ndef check(candidate):\n    assert candidate({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    assert candidate({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\n    assert candidate({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\n\ncheck(drop_empty)",
      "context": "{\"function_name\": \"drop_empty\"}",
      "attempt_num": 1
    },
    {
      "task_id": 470,
      "prompt": "### Prompt\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n### Signature\ndef add_pairwise(test_tup):\n\n### Test\nassert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def add_pairwise(test_tup):\n    return tuple(x + y for x, y in zip(test_tup, test_tup[1:]))",
      "test_content": "from llm_output import add_pairwise\n\ndef check(candidate):\n    assert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    assert candidate((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    assert candidate((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n\ncheck(add_pairwise)",
      "context": "{\"function_name\": \"add_pairwise\"}",
      "attempt_num": 1
    },
    {
      "task_id": 471,
      "prompt": "### Prompt\nWrite a python function to find the product of the array multiplication modulo n.\n\n### Signature\ndef find_remainder(arr, n):\n\n### Test\nassert candidate([ 100, 10, 5, 25, 35, 14 ],11) ==9",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product",
      "test_content": "from llm_output import find_remainder\n\ndef check(candidate):\n    assert candidate([ 100, 10, 5, 25, 35, 14 ],11) ==9\n    assert candidate([1,1,1],1) == 0\n    assert candidate([1,2,1],2) == 0\n\ncheck(find_remainder)",
      "context": "{\"function_name\": \"find_remainder\"}",
      "attempt_num": 1
    },
    {
      "task_id": 472,
      "prompt": "### Prompt\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\n### Signature\ndef check_Consecutive(l):\n\n### Test\nassert candidate([1,2,3,4,5]) == True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def check_Consecutive(l):\n    return sorted(l) == list(range(min(l), max(l) + 1))",
      "test_content": "from llm_output import check_Consecutive\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5]) == True\n    assert candidate([1,2,3,5,6]) == False\n    assert candidate([1,2,1]) == False\n\ncheck(check_Consecutive)",
      "context": "{\"function_name\": \"check_Consecutive\"}",
      "attempt_num": 1
    },
    {
      "task_id": 474,
      "prompt": "### Prompt\nWrite a function to replace characters in a string.\n\n### Signature\ndef replace_char(str1,ch,newch):\n\n### Test\nassert candidate(\"polygon\",\"\"\"y\"\"\",\"\"\"l\"\"\")==(\"pollgon\")",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)",
      "test_content": "from llm_output import replace_char\n\ndef check(candidate):\n    assert candidate(\"polygon\",\"\"\"y\"\"\",\"\"\"l\"\"\")==(\"pollgon\")\n    assert candidate(\"character\",\"\"\"c\"\"\",\"\"\"a\"\"\")==(\"aharaater\")\n    assert candidate(\"python\",\"\"\"l\"\"\",\"\"\"a\"\"\")==(\"python\")\n\ncheck(replace_char)",
      "context": "{\"function_name\": \"replace_char\"}",
      "attempt_num": 1
    },
    {
      "task_id": 475,
      "prompt": "### Prompt\nWrite a function to sort a dictionary by value.\n\n### Signature\ndef sort_counter(dict1):\n\n### Test\nassert candidate({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import operator\n\ndef sort_counter(dict1):\n    return sorted(dict1.items(), key=operator.itemgetter(1), reverse=True)",
      "test_content": "from llm_output import sort_counter\n\ndef check(candidate):\n    assert candidate({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    assert candidate({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    assert candidate({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n\ncheck(sort_counter)",
      "context": "{\"function_name\": \"sort_counter\"}",
      "attempt_num": 1
    },
    {
      "task_id": 476,
      "prompt": "### Prompt\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\n### Signature\ndef big_sum(nums):\n\n### Test\nassert candidate([1,2,3]) == 4",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def big_sum(nums):\n    return max(nums) + min(nums)",
      "test_content": "from llm_output import big_sum\n\ndef check(candidate):\n    assert candidate([1,2,3]) == 4\n    assert candidate([-1,2,3,4]) == 3\n    assert candidate([2,3,6]) == 8\n\ncheck(big_sum)",
      "context": "{\"function_name\": \"big_sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 477,
      "prompt": "### Prompt\nWrite a python function to convert the given string to lower case.\n\n### Signature\ndef is_lower(string):\n\n### Test\nassert candidate(\"InValid\") == \"invalid\"",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def is_lower(string):\n    return string.lower()",
      "test_content": "from llm_output import is_lower\n\ndef check(candidate):\n    assert candidate(\"InValid\") == \"invalid\"\n    assert candidate(\"TruE\") == \"true\"\n    assert candidate(\"SenTenCE\") == \"sentence\"\n\ncheck(is_lower)",
      "context": "{\"function_name\": \"is_lower\"}",
      "attempt_num": 1
    },
    {
      "task_id": 478,
      "prompt": "### Prompt\nWrite a function to remove lowercase substrings from a given string.\n\n### Signature\ndef remove_lowercase(str1):\n\n### Test\nassert candidate(\"PYTHon\")==(\"\"\"PYTH\"\"\")",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]', '', str1)",
      "test_content": "from llm_output import remove_lowercase\n\ndef check(candidate):\n    assert candidate(\"PYTHon\")==(\"\"\"PYTH\"\"\")\n    assert candidate(\"FInD\")==(\"\"\"FID\"\"\")\n    assert candidate(\"STRinG\")==(\"\"\"STRG\"\"\")\n\ncheck(remove_lowercase)",
      "context": "{\"function_name\": \"remove_lowercase\"}",
      "attempt_num": 1
    },
    {
      "task_id": 479,
      "prompt": "### Prompt\nWrite a python function to find the first digit of a given number.\n\n### Signature\ndef first_Digit(n) :\n\n### Test\nassert candidate(123) == 1",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def first_Digit(n):\n    while n >= 10:\n        n = n // 10\n    return n",
      "test_content": "from llm_output import first_Digit\n\ndef check(candidate):\n    assert candidate(123) == 1\n    assert candidate(456) == 4\n    assert candidate(12) == 1\n\ncheck(first_Digit)",
      "context": "{\"function_name\": \"first_Digit\"}",
      "attempt_num": 1
    },
    {
      "task_id": 554,
      "prompt": "### Prompt\nWrite a python function which takes a list of integers and only returns the odd ones.\n\n### Signature\ndef Split(list):\n\n### Test\nassert candidate([1,2,3,4,5,6]) == [1,3,5]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]",
      "test_content": "from llm_output import Split\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6]) == [1,3,5]\n    assert candidate([10,11,12,13]) == [11,13]\n    assert candidate([7,8,9,1]) == [7,9,1]\n\ncheck(Split)",
      "context": "{\"function_name\": \"Split\"}",
      "attempt_num": 1
    },
    {
      "task_id": 555,
      "prompt": "### Prompt\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n### Signature\ndef difference(n) :\n\n### Test\nassert candidate(3) == 30",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
      "test_content": "from llm_output import difference\n\ndef check(candidate):\n    assert candidate(3) == 30\n    assert candidate(5) == 210\n    assert candidate(2) == 6\n\ncheck(difference)",
      "context": "{\"function_name\": \"difference\"}",
      "attempt_num": 1
    },
    {
      "task_id": 556,
      "prompt": "### Prompt\nWrite a python function to count the number of pairs whose xor value is odd.\n\n### Signature\ndef find_Odd_Pair(A,N) :\n\n### Test\nassert candidate([5,4,7,2,1],5) == 6",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count",
      "test_content": "from llm_output import find_Odd_Pair\n\ndef check(candidate):\n    assert candidate([5,4,7,2,1],5) == 6\n    assert candidate([7,2,8,1,0,5,11],7) == 12\n    assert candidate([1,2,3],3) == 2\n\ncheck(find_Odd_Pair)",
      "context": "{\"function_name\": \"find_Odd_Pair\"}",
      "attempt_num": 1
    },
    {
      "task_id": 557,
      "prompt": "### Prompt\nWrite a function to toggle the case of all characters in a string.\n\n### Signature\ndef toggle_string(string):\n\n### Test\nassert candidate(\"Python\")==(\"pYTHON\")",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def toggle_string(string):\n    return string.swapcase()",
      "test_content": "from llm_output import toggle_string\n\ndef check(candidate):\n    assert candidate(\"Python\")==(\"pYTHON\")\n    assert candidate(\"Pangram\")==(\"pANGRAM\")\n    assert candidate(\"LIttLE\")==(\"liTTle\")\n\ncheck(toggle_string)",
      "context": "{\"function_name\": \"toggle_string\"}",
      "attempt_num": 1
    },
    {
      "task_id": 558,
      "prompt": "### Prompt\nWrite a python function to find the sum of the per-digit difference between two integers.\n\n### Signature\ndef digit_distance_nums(n1, n2):\n\n### Test\nassert candidate(1,2) == 1",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef digit_distance_nums(n1, n2):\n    return sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str(n1).zfill(10), str(n2).zfill(10)))",
      "test_content": "from llm_output import digit_distance_nums\n\ndef check(candidate):\n    assert candidate(1,2) == 1\n    assert candidate(23,56) == 6\n    assert candidate(123,256) == 7\n\ncheck(digit_distance_nums)",
      "context": "{\"function_name\": \"digit_distance_nums\"}",
      "attempt_num": 1
    },
    {
      "task_id": 559,
      "prompt": "### Prompt\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n\n### Signature\ndef max_sub_array_sum(a, size):\n\n### Test\nassert candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def max_sub_array_sum(a, size):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n            \n    return max_so_far",
      "test_content": "from llm_output import max_sub_array_sum\n\ndef check(candidate):\n    assert candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n    assert candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\n    assert candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10\n\ncheck(max_sub_array_sum)",
      "context": "{\"function_name\": \"max_sub_array_sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 560,
      "prompt": "### Prompt\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n\n### Signature\ndef union_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def union_elements(test_tup1, test_tup2):\n    # Combine both tuples and convert to a set to remove duplicates\n    combined_set = set(test_tup1) | set(test_tup2)\n    # Convert the set back to a sorted tuple\n    result = tuple(sorted(combined_set))\n    return result",
      "test_content": "from llm_output import union_elements\n\ndef check(candidate):\n    assert candidate((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n    assert candidate((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\n    assert candidate((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)\n\ncheck(union_elements)",
      "context": "{\"function_name\": \"union_elements\"}",
      "attempt_num": 1
    },
    {
      "task_id": 562,
      "prompt": "### Prompt\nWrite a python function to find the length of the longest sublists.\n\n### Signature\ndef Find_Max_Length(lst):\n\n### Test\nassert candidate([[1],[1,4],[5,6,7,8]]) == 4",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)",
      "test_content": "from llm_output import Find_Max_Length\n\ndef check(candidate):\n    assert candidate([[1],[1,4],[5,6,7,8]]) == 4\n    assert candidate([[0,1],[2,2,],[3,2,1]]) == 3\n    assert candidate([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5\n\ncheck(Find_Max_Length)",
      "context": "{\"function_name\": \"Find_Max_Length\"}",
      "attempt_num": 1
    },
    {
      "task_id": 564,
      "prompt": "### Prompt\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n### Signature\ndef count_Pairs(arr,n):\n\n### Test\nassert candidate([1,2,1],3) == 2",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from itertools import combinations\n\ndef count_Pairs(arr,n):\n    count = 0\n    for pair in combinations(arr, 2):\n        if pair[0] != pair[1]:\n            count += 1\n    return count",
      "test_content": "from llm_output import count_Pairs\n\ndef check(candidate):\n    assert candidate([1,2,1],3) == 2\n    assert candidate([1,1,1,1],4) == 0\n    assert candidate([1,2,3,4,5],5) == 10\n\ncheck(count_Pairs)",
      "context": "{\"function_name\": \"count_Pairs\"}",
      "attempt_num": 1
    },
    {
      "task_id": 565,
      "prompt": "### Prompt\nWrite a python function to split a string into characters.\n\n### Signature\ndef split(word):\n\n### Test\nassert candidate('python') == ['p','y','t','h','o','n']",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def split(word):\n    return list(word)",
      "test_content": "from llm_output import split\n\ndef check(candidate):\n    assert candidate('python') == ['p','y','t','h','o','n']\n    assert candidate('Name') == ['N','a','m','e']\n    assert candidate('program') == ['p','r','o','g','r','a','m']\n\ncheck(split)",
      "context": "{\"function_name\": \"split\"}",
      "attempt_num": 1
    },
    {
      "task_id": 566,
      "prompt": "### Prompt\nWrite a function to get the sum of the digits of a non-negative integer.\n\n### Signature\ndef sum_digits(n):\n\n### Test\nassert candidate(345)==12",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))",
      "test_content": "from llm_output import sum_digits\n\ndef check(candidate):\n    assert candidate(345)==12\n    assert candidate(12)==3\n    assert candidate(97)==16\n\ncheck(sum_digits)",
      "context": "{\"function_name\": \"sum_digits\"}",
      "attempt_num": 1
    },
    {
      "task_id": 567,
      "prompt": "### Prompt\nWrite a function to check whether a specified list is sorted or not.\n\n### Signature\ndef issort_list(list1):\n\n### Test\nassert candidate([1,2,4,6,8,10,12,14,16,17])==True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def issort_list(list1):\n    return list1 == sorted(list1)",
      "test_content": "from llm_output import issort_list\n\ndef check(candidate):\n    assert candidate([1,2,4,6,8,10,12,14,16,17])==True\n    assert candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\n    assert candidate([1, 2, 4, 6, 8, 10,15,14,20])==False\n\ncheck(issort_list)",
      "context": "{\"function_name\": \"issort_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 568,
      "prompt": "### Prompt\nWrite a function to create a list of N empty dictionaries.\n\n### Signature\ndef empty_list(length):\n\n### Test\nassert candidate(5)==[{},{},{},{},{}]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def empty_list(length):\n    return [{} for _ in range(length)]",
      "test_content": "from llm_output import empty_list\n\ndef check(candidate):\n    assert candidate(5)==[{},{},{},{},{}]\n    assert candidate(6)==[{},{},{},{},{},{}]\n    assert candidate(7)==[{},{},{},{},{},{},{}]\n\ncheck(empty_list)",
      "context": "{\"function_name\": \"empty_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 569,
      "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(list1):\n\n### Test\nassert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def sort_sublists(list1):\n    return [sorted(sublist) for sublist in list1]",
      "test_content": "from llm_output import sort_sublists\n\ndef check(candidate):\n    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    assert candidate([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n\ncheck(sort_sublists)",
      "context": "{\"function_name\": \"sort_sublists\"}",
      "attempt_num": 1
    },
    {
      "task_id": 573,
      "prompt": "### Prompt\nWrite a python function to calculate the product of the unique numbers in a given list.\n\n### Signature\ndef unique_product(list_data):\n\n### Test\nassert candidate([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from functools import reduce\nfrom operator import mul\n\ndef unique_product(list_data):\n    unique_numbers = set(list_data)\n    return reduce(mul, unique_numbers, 1)",
      "test_content": "from llm_output import unique_product\n\ndef check(candidate):\n    assert candidate([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n    assert candidate([1, 2, 3, 1,]) == 6\n    assert candidate([7, 8, 9, 0, 1, 1]) == 0\n\ncheck(unique_product)",
      "context": "{\"function_name\": \"unique_product\"}",
      "attempt_num": 1
    },
    {
      "task_id": 576,
      "prompt": "### Prompt\nWrite a python function to check whether a list is sublist of another or not.\n\n### Signature\ndef is_Sub_Array(A,B):\n\n### Test\nassert candidate([1,4,3,5],[1,2]) == False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def is_Sub_Array(A, B):\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False",
      "test_content": "from llm_output import is_Sub_Array\n\ndef check(candidate):\n    assert candidate([1,4,3,5],[1,2]) == False\n    assert candidate([1,2,1],[1,2,1]) == True\n    assert candidate([1,0,2,2],[2,2,0]) ==False\n\ncheck(is_Sub_Array)",
      "context": "{\"function_name\": \"is_Sub_Array\"}",
      "attempt_num": 1
    },
    {
      "task_id": 577,
      "prompt": "### Prompt\nWrite a python function to find the last digit in factorial of a given number.\n\n### Signature\ndef last_Digit_Factorial(n):\n\n### Test\nassert candidate(4) == 4",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    last_digit = 1\n    for i in range(2, n + 1):\n        last_digit = (last_digit * (i % 10)) % 10\n    return last_digit",
      "test_content": "from llm_output import last_Digit_Factorial\n\ndef check(candidate):\n    assert candidate(4) == 4\n    assert candidate(21) == 0\n    assert candidate(30) == 0\n\ncheck(last_Digit_Factorial)",
      "context": "{\"function_name\": \"last_Digit_Factorial\"}",
      "attempt_num": 1
    },
    {
      "task_id": 578,
      "prompt": "### Prompt\nWrite a function to interleave 3 lists of the same length into a single flat list.\n\n### Signature\ndef interleave_lists(list1,list2,list3):\n\n### Test\nassert candidate([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def interleave_lists(list1, list2, list3):\n    return [item for sublist in zip(list1, list2, list3) for item in sublist]",
      "test_content": "from llm_output import interleave_lists\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    assert candidate([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\n    assert candidate([11,44], [10,15], [20,5])==[11,10,20,44,15,5]\n\ncheck(interleave_lists)",
      "context": "{\"function_name\": \"interleave_lists\"}",
      "attempt_num": 1
    },
    {
      "task_id": 579,
      "prompt": "### Prompt\nWrite a function to find the dissimilar elements in the given two tuples.\n\n### Signature\ndef find_dissimilar(test_tup1, test_tup2):\n\n### Test\nassert candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def find_dissimilar(test_tup1, test_tup2):\n    return tuple(set(test_tup1) ^ set(test_tup2))",
      "test_content": "from llm_output import find_dissimilar\n\ndef check(candidate):\n    assert candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n    assert candidate((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\n    assert candidate((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)\n\ncheck(find_dissimilar)",
      "context": "{\"function_name\": \"find_dissimilar\"}",
      "attempt_num": 1
    },
    {
      "task_id": 582,
      "prompt": "### Prompt\nWrite a function to check if a dictionary is empty\n\n### Signature\ndef my_dict(dict1):\n\n### Test\nassert candidate({10})==False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def my_dict(dict1):\n    return not bool(dict1)",
      "test_content": "from llm_output import my_dict\n\ndef check(candidate):\n    assert candidate({10})==False\n    assert candidate({11})==False\n    assert candidate({})==True\n\ncheck(my_dict)",
      "context": "{\"function_name\": \"my_dict\"}",
      "attempt_num": 1
    },
    {
      "task_id": 583,
      "prompt": "### Prompt\nWrite a function which returns nth catalan number.\n\n### Signature\ndef catalan_number(num):\n\n### Test\nassert candidate(10)==16796",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from math import factorial\n\ndef catalan_number(num):\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))",
      "test_content": "from llm_output import catalan_number\n\ndef check(candidate):\n    assert candidate(10)==16796\n    assert candidate(9)==4862\n    assert candidate(7)==429\n\ncheck(catalan_number)",
      "context": "{\"function_name\": \"catalan_number\"}",
      "attempt_num": 1
    },
    {
      "task_id": 584,
      "prompt": "### Prompt\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n\n### Signature\ndef find_adverbs(text):\n\n### Test\nassert candidate(\"Clearly, he has no excuse for such behavior.\") == \"\"\"0-7: Clearly\"\"\"",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef find_adverbs(text):\n    pattern = r\"\\b\\w+ly\\b\"\n    match = re.search(pattern, text)\n    if match:\n        return f\"{match.start()}-{match.end()}: {match.group()}\"\n    else:\n        return None",
      "test_content": "from llm_output import find_adverbs\n\ndef check(candidate):\n    assert candidate(\"Clearly, he has no excuse for such behavior.\") == \"\"\"0-7: Clearly\"\"\"\n    assert candidate(\"Please handle the situation carefuly\") == \"\"\"28-36: carefuly\"\"\"\n    assert candidate(\"Complete the task quickly\") == \"\"\"18-25: quickly\"\"\"\n\ncheck(find_adverbs)",
      "context": "{\"function_name\": \"find_adverbs\"}",
      "attempt_num": 1
    },
    {
      "task_id": 585,
      "prompt": "### Prompt\nWrite a function to find the n most expensive items in a given dataset.\n\n### Signature\ndef expensive_items(items,n):\n\n### Test\nassert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import heapq\n\ndef expensive_items(items,n):\n    return heapq.nlargest(n, items, key=lambda x: x['price'])",
      "test_content": "from llm_output import expensive_items\n\ndef check(candidate):\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\ncheck(expensive_items)",
      "context": "{\"function_name\": \"expensive_items\"}",
      "attempt_num": 1
    },
    {
      "task_id": 586,
      "prompt": "### Prompt\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n\n### Signature\ndef split_Arr(l, n):\n\n### Test\nassert candidate([12,10,5,6,52,36],2) == [5,6,52,36,12,10]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def split_Arr(l, n):\n    return l[n:] + l[:n]",
      "test_content": "from llm_output import split_Arr\n\ndef check(candidate):\n    assert candidate([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n    assert candidate([1,2,3,4],1) == [2,3,4,1]\n    assert candidate([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]\n\ncheck(split_Arr)",
      "context": "{\"function_name\": \"split_Arr\"}",
      "attempt_num": 1
    },
    {
      "task_id": 587,
      "prompt": "### Prompt\nWrite a function to convert a list to a tuple.\n\n### Signature\ndef list_tuple(listx):\n\n### Test\nassert candidate([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def list_tuple(listx):\n    return tuple(listx)",
      "test_content": "from llm_output import list_tuple\n\ndef check(candidate):\n    assert candidate([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n    assert candidate([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\n    assert candidate([58,44,56])==(58,44,56)\n\ncheck(list_tuple)",
      "context": "{\"function_name\": \"list_tuple\"}",
      "attempt_num": 1
    },
    {
      "task_id": 588,
      "prompt": "### Prompt\nWrite a python function to find the difference between largest and smallest value in a given list.\n\n### Signature\ndef big_diff(nums):\n\n### Test\nassert candidate([1,2,3,4]) == 3",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def big_diff(nums):\n    return max(nums) - min(nums)",
      "test_content": "from llm_output import big_diff\n\ndef check(candidate):\n    assert candidate([1,2,3,4]) == 3\n    assert candidate([4,5,12]) == 8\n    assert candidate([9,2,3]) == 7\n\ncheck(big_diff)",
      "context": "{\"function_name\": \"big_diff\"}",
      "attempt_num": 1
    },
    {
      "task_id": 589,
      "prompt": "### Prompt\nWrite a function to find perfect squares between two given numbers.\n\n### Signature\ndef perfect_squares(a, b):\n\n### Test\nassert candidate(1,30)==[1, 4, 9, 16, 25]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef perfect_squares(a, b):\n    return [i**2 for i in range(math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) + 1)]",
      "test_content": "from llm_output import perfect_squares\n\ndef check(candidate):\n    assert candidate(1,30)==[1, 4, 9, 16, 25]\n    assert candidate(50,100)==[64, 81, 100]\n    assert candidate(100,200)==[100, 121, 144, 169, 196]\n\ncheck(perfect_squares)",
      "context": "{\"function_name\": \"perfect_squares\"}",
      "attempt_num": 1
    },
    {
      "task_id": 591,
      "prompt": "### Prompt\nWrite a python function to interchange the first and last elements in a list.\n\n### Signature\ndef swap_List(newList):\n\n### Test\nassert candidate([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def swap_List(newList):\n    # Store the first and last element\n    first = newList[0]\n    last = newList[-1]\n    \n    # Swap the first and last element\n    newList[0] = last\n    newList[-1] = first\n    \n    return newList",
      "test_content": "from llm_output import swap_List\n\ndef check(candidate):\n    assert candidate([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n    assert candidate([1, 2, 3]) == [3, 2, 1]\n    assert candidate([4, 5, 6]) == [6, 5, 4]\n\ncheck(swap_List)",
      "context": "{\"function_name\": \"swap_List\"}",
      "attempt_num": 1
    },
    {
      "task_id": 593,
      "prompt": "### Prompt\nWrite a function to remove leading zeroes from an ip address.\n\n### Signature\ndef removezero_ip(ip):\n\n### Test\nassert candidate(\"216.08.094.196\")==(\"\"\"216.8.94.196\"\"\")",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def removezero_ip(ip):\n    return '.'.join([str(int(octet)) for octet in ip.split('.')])",
      "test_content": "from llm_output import removezero_ip\n\ndef check(candidate):\n    assert candidate(\"216.08.094.196\")==(\"\"\"216.8.94.196\"\"\")\n    assert candidate(\"12.01.024\")==(\"\"\"12.1.24\"\"\")\n    assert candidate(\"216.08.094.0196\")==(\"\"\"216.8.94.196\"\"\")\n\ncheck(removezero_ip)",
      "context": "{\"function_name\": \"removezero_ip\"}",
      "attempt_num": 1
    },
    {
      "task_id": 594,
      "prompt": "### Prompt\nWrite a function to find the difference of the first even and first odd number of a given list.\n\n### Signature\ndef diff_even_odd(list1):\n\n### Test\nassert candidate([1,3,5,7,4,1,6,8])==3",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    return first_even - first_odd",
      "test_content": "from llm_output import diff_even_odd\n\ndef check(candidate):\n    assert candidate([1,3,5,7,4,1,6,8])==3\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==1\n    assert candidate([1,5,7,9,10])==9\n\ncheck(diff_even_odd)",
      "context": "{\"function_name\": \"diff_even_odd\"}",
      "attempt_num": 1
    },
    {
      "task_id": 598,
      "prompt": "### Prompt\nWrite a function to check whether the given number is armstrong or not.\n\n### Signature\ndef armstrong_number(number):\n\n### Test\nassert candidate(153)==True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def armstrong_number(number):\n    # Convert the number to a string to easily iterate over digits\n    digits = str(number)\n    # Calculate the number of digits\n    num_digits = len(digits)\n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in digits)\n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == number",
      "test_content": "from llm_output import armstrong_number\n\ndef check(candidate):\n    assert candidate(153)==True\n    assert candidate(259)==False\n    assert candidate(4458)==False\n\ncheck(armstrong_number)",
      "context": "{\"function_name\": \"armstrong_number\"}",
      "attempt_num": 1
    },
    {
      "task_id": 599,
      "prompt": "### Prompt\nWrite a function to find sum and average of first n natural numbers.\n\n### Signature\ndef sum_average(number):\n\n### Test\nassert candidate(10)==(55, 5.5)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def sum_average(number):\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    return total_sum, average",
      "test_content": "from llm_output import sum_average\n\ndef check(candidate):\n    assert candidate(10)==(55, 5.5)\n    assert candidate(15)==(120, 8.0)\n    assert candidate(20)==(210, 10.5)\n\ncheck(sum_average)",
      "context": "{\"function_name\": \"sum_average\"}",
      "attempt_num": 1
    },
    {
      "task_id": 600,
      "prompt": "### Prompt\nWrite a python function to check whether the given number is even or not.\n\n### Signature\ndef is_Even(n) :\n\n### Test\nassert candidate(1) == False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def is_Even(n) :\n    return n % 2 == 0",
      "test_content": "from llm_output import is_Even\n\ndef check(candidate):\n    assert candidate(1) == False\n    assert candidate(2) == True\n    assert candidate(3) == False\n\ncheck(is_Even)",
      "context": "{\"function_name\": \"is_Even\"}",
      "attempt_num": 1
    },
    {
      "task_id": 602,
      "prompt": "### Prompt\nWrite a python function to find the first repeated character in a given string.\n\n### Signature\ndef first_repeated_char(str1):\n\n### Test\nassert candidate(\"abcabc\") == \"a\"",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def first_repeated_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None",
      "test_content": "from llm_output import first_repeated_char\n\ndef check(candidate):\n    assert candidate(\"abcabc\") == \"a\"\n    assert candidate(\"abc\") == None\n    assert candidate(\"123123\") == \"1\"\n\ncheck(first_repeated_char)",
      "context": "{\"function_name\": \"first_repeated_char\"}",
      "attempt_num": 1
    },
    {
      "task_id": 604,
      "prompt": "### Prompt\nWrite a function to reverse words seperated by spaces in a given string.\n\n### Signature\ndef reverse_words(s):\n\n### Test\nassert candidate(\"python program\")==(\"program python\")",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])",
      "test_content": "from llm_output import reverse_words\n\ndef check(candidate):\n    assert candidate(\"python program\")==(\"program python\")\n    assert candidate(\"java language\")==(\"language java\")\n    assert candidate(\"indian man\")==(\"man indian\")\n\ncheck(reverse_words)",
      "context": "{\"function_name\": \"reverse_words\"}",
      "attempt_num": 1
    },
    {
      "task_id": 605,
      "prompt": "### Prompt\nWrite a function to check if the given integer is a prime number.\n\n### Signature\ndef prime_num(num):\n\n### Test\nassert candidate(13)==True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef prime_num(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True",
      "test_content": "from llm_output import prime_num\n\ndef check(candidate):\n    assert candidate(13)==True\n    assert candidate(7)==True\n    assert candidate(-1010)==False\n\ncheck(prime_num)",
      "context": "{\"function_name\": \"prime_num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 606,
      "prompt": "### Prompt\nWrite a function to convert degrees to radians.\n\n### Signature\ndef radian_degree(degree):\n\n### Test\nassert candidate(90)==1.5707963267948966",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef radian_degree(degree):\n    return math.radians(degree)",
      "test_content": "from llm_output import radian_degree\n\ndef check(candidate):\n    assert candidate(90)==1.5707963267948966\n    assert candidate(60)==1.0471975511965976\n    assert candidate(120)==2.0943951023931953\n\ncheck(radian_degree)",
      "context": "{\"function_name\": \"radian_degree\"}",
      "attempt_num": 1
    },
    {
      "task_id": 607,
      "prompt": "### Prompt\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\n### Signature\ndef find_literals(text, pattern):\n\n### Test\nassert candidate('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
      "test_content": "from llm_output import find_literals\n\ndef check(candidate):\n    assert candidate('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n    assert candidate('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\n    assert candidate('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n\ncheck(find_literals)",
      "context": "{\"function_name\": \"find_literals\"}",
      "attempt_num": 1
    },
    {
      "task_id": 611,
      "prompt": "### Prompt\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\n### Signature\ndef max_of_nth(test_list, N):\n\n### Test\nassert candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import numpy as np\n\ndef max_of_nth(test_list, N):\n    return np.max(np.array(test_list)[:, N])",
      "test_content": "from llm_output import max_of_nth\n\ndef check(candidate):\n    assert candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n    assert candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\n    assert candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11\n\ncheck(max_of_nth)",
      "context": "{\"function_name\": \"max_of_nth\"}",
      "attempt_num": 1
    },
    {
      "task_id": 614,
      "prompt": "### Prompt\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n### Signature\ndef cummulative_sum(test_list):\n\n### Test\nassert candidate([(1, 3), (5, 6, 7), (2, 6)]) == 30",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def cummulative_sum(test_list):\n    return sum(sum(sublist) for sublist in test_list)",
      "test_content": "from llm_output import cummulative_sum\n\ndef check(candidate):\n    assert candidate([(1, 3), (5, 6, 7), (2, 6)]) == 30\n    assert candidate([(2, 4), (6, 7, 8), (3, 7)]) == 37\n    assert candidate([(3, 5), (7, 8, 9), (4, 8)]) == 44\n\ncheck(cummulative_sum)",
      "context": "{\"function_name\": \"cummulative_sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 616,
      "prompt": "### Prompt\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\n### Signature\ndef tuple_modulo(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def tuple_modulo(test_tup1, test_tup2):\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))",
      "test_content": "from llm_output import tuple_modulo\n\ndef check(candidate):\n    assert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n    assert candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\n    assert candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)\n\ncheck(tuple_modulo)",
      "context": "{\"function_name\": \"tuple_modulo\"}",
      "attempt_num": 1
    },
    {
      "task_id": 618,
      "prompt": "### Prompt\nWrite a function to divide two lists element wise.\n\n### Signature\ndef div_list(nums1,nums2):\n\n### Test\nassert candidate([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]",
      "test_content": "from llm_output import div_list\n\ndef check(candidate):\n    assert candidate([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n    assert candidate([3,2],[1,4])==[3.0, 0.5]\n    assert candidate([90,120],[50,70])==[1.8, 1.7142857142857142]\n\ncheck(div_list)",
      "context": "{\"function_name\": \"div_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 619,
      "prompt": "### Prompt\nWrite a function to move all the numbers to the end of the given string.\n\n### Signature\ndef move_num(test_str):\n\n### Test\nassert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def move_num(test_str):\n    num_chars = [char for char in test_str if char.isdigit()]\n    non_num_chars = [char for char in test_str if not char.isdigit()]\n    return ''.join(non_num_chars + num_chars)",
      "test_content": "from llm_output import move_num\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ncheck(move_num)",
      "context": "{\"function_name\": \"move_num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 620,
      "prompt": "### Prompt\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n### Signature\ndef largest_subset(a):\n\n### Test\nassert candidate([ 1, 3, 6, 13, 17, 18 ]) == 4",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
      "test_content": "from llm_output import largest_subset\n\ndef check(candidate):\n    assert candidate([ 1, 3, 6, 13, 17, 18 ]) == 4\n    assert candidate([10, 5, 3, 15, 20]) == 3\n    assert candidate([18, 1, 3, 6, 13, 17]) == 4\n\ncheck(largest_subset)",
      "context": "{\"function_name\": \"largest_subset\"}",
      "attempt_num": 1
    },
    {
      "task_id": 623,
      "prompt": "### Prompt\nWrite a function to compute the n-th power of each number in a list.\n\n### Signature\ndef nth_nums(nums,n):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef nth_nums(nums,n):\n    return [math.pow(num, n) for num in nums]",
      "test_content": "from llm_output import nth_nums\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10,20,30],3)==([1000, 8000, 27000])\n    assert candidate([12,15],5)==([248832, 759375])\n\ncheck(nth_nums)",
      "context": "{\"function_name\": \"nth_nums\"}",
      "attempt_num": 1
    },
    {
      "task_id": 624,
      "prompt": "### Prompt\nWrite a python function to convert a given string to uppercase.\n\n### Signature\ndef is_upper(string):\n\n### Test\nassert candidate(\"person\") ==\"PERSON\"",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def is_upper(string):\n    return string.upper()",
      "test_content": "from llm_output import is_upper\n\ndef check(candidate):\n    assert candidate(\"person\") ==\"PERSON\"\n    assert candidate(\"final\") == \"FINAL\"\n    assert candidate(\"Valid\") == \"VALID\"\n\ncheck(is_upper)",
      "context": "{\"function_name\": \"is_upper\"}",
      "attempt_num": 1
    },
    {
      "task_id": 625,
      "prompt": "### Prompt\nWrite a python function to interchange the first and last element in a given list.\n\n### Signature\ndef swap_List(newList):\n\n### Test\nassert candidate([1,2,3]) == [3,2,1]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def swap_List(newList):\n    # Store the first element in a temporary variable\n    temp = newList[0]\n    # Assign the last element to the first position\n    newList[0] = newList[-1]\n    # Assign the value stored in temp (original first element) to the last position\n    newList[-1] = temp\n    # Return the modified list\n    return newList",
      "test_content": "from llm_output import swap_List\n\ndef check(candidate):\n    assert candidate([1,2,3]) == [3,2,1]\n    assert candidate([1,2,3,4,4]) == [4,2,3,4,1]\n    assert candidate([4,5,6]) == [6,5,4]\n\ncheck(swap_List)",
      "context": "{\"function_name\": \"swap_List\"}",
      "attempt_num": 1
    },
    {
      "task_id": 627,
      "prompt": "### Prompt\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\n### Signature\ndef find_First_Missing(array,start=0,end=None):\n\n### Test\nassert candidate([0,1,2,3]) == 4",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    if start > end:\n        return start\n    \n    mid = (start + end) // 2\n    \n    if array[mid] > mid:\n        return find_First_Missing(array, start, mid - 1)\n    else:\n        return find_First_Missing(array, mid + 1, end)",
      "test_content": "from llm_output import find_First_Missing\n\ndef check(candidate):\n    assert candidate([0,1,2,3]) == 4\n    assert candidate([0,1,2,6,9]) == 3\n    assert candidate([2,3,5,8,9]) == 0\n\ncheck(find_First_Missing)",
      "context": "{\"function_name\": \"find_First_Missing\"}",
      "attempt_num": 1
    },
    {
      "task_id": 628,
      "prompt": "### Prompt\nWrite a function to replace all spaces in the given string with '%20'.\n\n### Signature\ndef replace_spaces(string):\n\n### Test\nassert candidate(\"My Name is Dawood\") == \"\"\"My%20Name%20is%20Dawood\"\"\"",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")",
      "test_content": "from llm_output import replace_spaces\n\ndef check(candidate):\n    assert candidate(\"My Name is Dawood\") == \"\"\"My%20Name%20is%20Dawood\"\"\"\n    assert candidate(\"I am a Programmer\") == \"\"\"I%20am%20a%20Programmer\"\"\"\n    assert candidate(\"I love Coding\") == \"\"\"I%20love%20Coding\"\"\"\n\ncheck(replace_spaces)",
      "context": "{\"function_name\": \"replace_spaces\"}",
      "attempt_num": 1
    },
    {
      "task_id": 629,
      "prompt": "### Prompt\nWrite a python function to find even numbers from a list of numbers.\n\n### Signature\ndef Split(list):\n\n### Test\nassert candidate([1,2,3,4,5]) == [2,4]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def Split(list):\n    return [num for num in list if num % 2 == 0]",
      "test_content": "from llm_output import Split\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5]) == [2,4]\n    assert candidate([4,5,6,7,8,0,1]) == [4,6,8,0]\n    assert candidate ([8,12,15,19]) == [8,12]\n\ncheck(Split)",
      "context": "{\"function_name\": \"Split\"}",
      "attempt_num": 1
    },
    {
      "task_id": 632,
      "prompt": "### Prompt\nWrite a python function to move all zeroes to the end of the given list.\n\n### Signature\ndef move_zero(num_list):\n\n### Test\nassert candidate([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def move_zero(num_list):\n    non_zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] != 0:\n            num_list[i], num_list[non_zero_index] = num_list[non_zero_index], num_list[i]\n            non_zero_index += 1\n    return num_list",
      "test_content": "from llm_output import move_zero\n\ndef check(candidate):\n    assert candidate([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n    assert candidate([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\n    assert candidate([0,1,0,1,1]) == [1,1,1,0,0]\n\ncheck(move_zero)",
      "context": "{\"function_name\": \"move_zero\"}",
      "attempt_num": 1
    },
    {
      "task_id": 633,
      "prompt": "### Prompt\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\n### Signature\ndef pair_xor_Sum(arr,n) :\n\n### Test\nassert candidate([5,9,7,6],4) == 47",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum",
      "test_content": "from llm_output import pair_xor_Sum\n\ndef check(candidate):\n    assert candidate([5,9,7,6],4) == 47\n    assert candidate([7,3,5],3) == 12\n    assert candidate([7,3],2) == 4\n\ncheck(pair_xor_Sum)",
      "context": "{\"function_name\": \"pair_xor_Sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 635,
      "prompt": "### Prompt\nWrite a function to sort the given list.\n\n### Signature\ndef heap_sort(iterable):\n\n### Test\nassert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import heapq\n\ndef heap_sort(iterable):\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]",
      "test_content": "from llm_output import heap_sort\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert candidate( [7, 1, 9, 5])==[1,5,7,9]\n\ncheck(heap_sort)",
      "context": "{\"function_name\": \"heap_sort\"}",
      "attempt_num": 1
    },
    {
      "task_id": 637,
      "prompt": "### Prompt\nWrite a function to check whether the given amount has no profit and no loss\n\n### Signature\ndef noprofit_noloss(actual_cost,sale_amount):\n\n### Test\nassert candidate(1500,1200)==False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount",
      "test_content": "from llm_output import noprofit_noloss\n\ndef check(candidate):\n    assert candidate(1500,1200)==False\n    assert candidate(100,100)==True\n    assert candidate(2000,5000)==False\n\ncheck(noprofit_noloss)",
      "context": "{\"function_name\": \"noprofit_noloss\"}",
      "attempt_num": 1
    },
    {
      "task_id": 638,
      "prompt": "### Prompt\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n### Signature\ndef wind_chill(v,t):\n\n### Test\nassert candidate(120,35)==40",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef wind_chill(v, t):\n    return round(13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16))",
      "test_content": "from llm_output import wind_chill\n\ndef check(candidate):\n    assert candidate(120,35)==40\n    assert candidate(40,20)==19\n    assert candidate(10,8)==6\n\ncheck(wind_chill)",
      "context": "{\"function_name\": \"wind_chill\"}",
      "attempt_num": 1
    },
    {
      "task_id": 639,
      "prompt": "### Prompt\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n### Signature\ndef sample_nam(sample_names):\n\n### Test\nassert candidate(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name[0].isupper())",
      "test_content": "from llm_output import sample_nam\n\ndef check(candidate):\n    assert candidate(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n    assert candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\n    assert candidate([\"abcd\", \"Python\", \"abba\", \"aba\"])==6\n\ncheck(sample_nam)",
      "context": "{\"function_name\": \"sample_nam\"}",
      "attempt_num": 1
    },
    {
      "task_id": 641,
      "prompt": "### Prompt\nWrite a function to find the nth nonagonal number.\n\n### Signature\ndef is_nonagonal(n):\n\n### Test\nassert candidate(10) == 325",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2",
      "test_content": "from llm_output import is_nonagonal\n\ndef check(candidate):\n    assert candidate(10) == 325\n    assert candidate(15) == 750\n    assert candidate(18) == 1089\n\ncheck(is_nonagonal)",
      "context": "{\"function_name\": \"is_nonagonal\"}",
      "attempt_num": 1
    },
    {
      "task_id": 644,
      "prompt": "### Prompt\nWrite a python function to reverse an array upto a given position.\n\n### Signature\ndef reverse_Array_Upto_K(input, k):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def reverse_Array_Upto_K(input, k):\n    input[:k] = reversed(input[:k])\n    return input",
      "test_content": "from llm_output import reverse_Array_Upto_K\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n    assert candidate([4, 5, 6, 7], 2) == [5, 4, 6, 7]\n    assert candidate([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]\n\ncheck(reverse_Array_Upto_K)",
      "context": "{\"function_name\": \"reverse_Array_Upto_K\"}",
      "attempt_num": 1
    },
    {
      "task_id": 720,
      "prompt": "### Prompt\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\n### Signature\ndef add_dict_to_tuple(test_tup, test_dict):\n\n### Test\nassert candidate((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {\"\"\"MSAM\"\"\": 1, \"\"\"is\"\"\": 2, \"\"\"best\"\"\": 3})",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def add_dict_to_tuple(test_tup, test_dict):\n    return test_tup + (test_dict,)",
      "test_content": "from llm_output import add_dict_to_tuple\n\ndef check(candidate):\n    assert candidate((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {\"\"\"MSAM\"\"\": 1, \"\"\"is\"\"\": 2, \"\"\"best\"\"\": 3})\n    assert candidate((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {\"\"\"UTS\"\"\": 2, \"\"\"is\"\"\": 3, \"\"\"Worst\"\"\": 4})\n    assert candidate((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {\"\"\"POS\"\"\": 3, \"\"\"is\"\"\": 4, \"\"\"Okay\"\"\": 5})\n\ncheck(add_dict_to_tuple)",
      "context": "{\"function_name\": \"add_dict_to_tuple\"}",
      "attempt_num": 1
    },
    {
      "task_id": 723,
      "prompt": "### Prompt\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\n### Signature\ndef count_same_pair(nums1, nums2):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def count_same_pair(nums1, nums2):\n    return sum(1 for a, b in zip(nums1, nums2) if a == b)",
      "test_content": "from llm_output import count_same_pair\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1\n    assert candidate([0, 1, 1, 2],[0, 1, 2, 2])==3\n\ncheck(count_same_pair)",
      "context": "{\"function_name\": \"count_same_pair\"}",
      "attempt_num": 1
    },
    {
      "task_id": 724,
      "prompt": "### Prompt\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\n### Signature\ndef power_base_sum(base, power):\n\n### Test\nassert candidate(2,100)==115\nassert candidate(8,10)==37",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))",
      "test_content": "from llm_output import power_base_sum\n\ndef check(candidate):\n    assert candidate(2,100)==115\n    assert candidate(8,10)==37\n    assert candidate(8,15)==62\n    assert candidate(3,3)==9\n\ncheck(power_base_sum)",
      "context": "{\"function_name\": \"power_base_sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 725,
      "prompt": "### Prompt\nWrite a function to extract values between quotation marks \" \" of the given string.\n\n### Signature\ndef extract_quotation(text1):\n\n### Test\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef extract_quotation(text1):\n    return re.findall(r'\"([^\"]+)\"', text1)",
      "test_content": "from llm_output import extract_quotation\n\n\ndef check(candidate):\n    assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n    assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\n    assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\n    assert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []\n\n\ncheck(extract_quotation)",
      "context": "{\"function_name\": \"extract_quotation\"}",
      "attempt_num": 1
    },
    {
      "task_id": 726,
      "prompt": "### Prompt\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n### Signature\ndef multiply_elements(test_tup):\n\n### Test\nassert candidate((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert candidate((2, 4, 5, 6, 7)) == (8, 20, 30, 42)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def multiply_elements(test_tup):\n    return tuple(test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1))",
      "test_content": "from llm_output import multiply_elements\n\ndef check(candidate):\n    assert candidate((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n    assert candidate((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\n    assert candidate((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\n    assert candidate((12,)) == ()\n\ncheck(multiply_elements)",
      "context": "{\"function_name\": \"multiply_elements\"}",
      "attempt_num": 1
    },
    {
      "task_id": 728,
      "prompt": "### Prompt\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n### Signature\ndef sum_list(lst1,lst2):\n\n### Test\nassert candidate([10,20,30],[15,25,35])==[25,45,65]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]",
      "test_content": "from llm_output import sum_list\n\ndef check(candidate):\n    assert candidate([10,20,30],[15,25,35])==[25,45,65]\n    assert candidate([1,2,3],[5,6,7])==[6,8,10]\n    assert candidate([15,20,30],[15,45,75])==[30,65,105]\n\ncheck(sum_list)",
      "context": "{\"function_name\": \"sum_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 730,
      "prompt": "### Prompt\nWrite a function to remove consecutive duplicates of a given list.\n\n### Signature\ndef consecutive_duplicates(nums):\n\n### Test\nassert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def consecutive_duplicates(nums):\n    return [nums[i] for i in range(len(nums)) if i == 0 or nums[i] != nums[i-1]]",
      "test_content": "from llm_output import consecutive_duplicates\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']\n\ncheck(consecutive_duplicates)",
      "context": "{\"function_name\": \"consecutive_duplicates\"}",
      "attempt_num": 1
    },
    {
      "task_id": 731,
      "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\n### Signature\ndef lateralsurface_cone(r,h):\n\n### Test\nassert candidate(5,12)==204.20352248333654",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area",
      "test_content": "from llm_output import lateralsurface_cone\n\ndef check(candidate):\n    assert candidate(5,12)==204.20352248333654\n    assert candidate(10,15)==566.3586699569488\n    assert candidate(19,17)==1521.8090132193388\n\ncheck(lateralsurface_cone)",
      "context": "{\"function_name\": \"lateralsurface_cone\"}",
      "attempt_num": 1
    },
    {
      "task_id": 732,
      "prompt": "### Prompt\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\n### Signature\ndef replace_specialchar(text):\n\n### Test\nassert candidate('Python language, Programming language.')==('Python:language::Programming:language:')",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')",
      "test_content": "from llm_output import replace_specialchar\n\ndef check(candidate):\n    assert candidate('Python language, Programming language.')==('Python:language::Programming:language:')\n    assert candidate('a b c,d e f')==('a:b:c:d:e:f')\n    assert candidate('ram reshma,ram rahim')==('ram:reshma:ram:rahim')\n\ncheck(replace_specialchar)",
      "context": "{\"function_name\": \"replace_specialchar\"}",
      "attempt_num": 1
    },
    {
      "task_id": 733,
      "prompt": "### Prompt\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\n### Signature\ndef find_first_occurrence(A, x):\n\n### Test\nassert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import bisect\n\ndef find_first_occurrence(A, x):\n    index = bisect.bisect_left(A, x)\n    if index != len(A) and A[index] == x:\n        return index\n    else:\n        return -1",
      "test_content": "from llm_output import find_first_occurrence\n\ndef check(candidate):\n    assert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    assert candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\n    assert candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n\ncheck(find_first_occurrence)",
      "context": "{\"function_name\": \"find_first_occurrence\"}",
      "attempt_num": 1
    },
    {
      "task_id": 736,
      "prompt": "### Prompt\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\n### Signature\ndef left_insertion(a, x):\n\n### Test\nassert candidate([1,2,4,5],6)==4",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import bisect\n\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)",
      "test_content": "from llm_output import left_insertion\n\ndef check(candidate):\n    assert candidate([1,2,4,5],6)==4\n    assert candidate([1,2,4,5],3)==2\n    assert candidate([1,2,4,5],7)==4\n\ncheck(left_insertion)",
      "context": "{\"function_name\": \"left_insertion\"}",
      "attempt_num": 1
    },
    {
      "task_id": 737,
      "prompt": "### Prompt\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\n### Signature\ndef check_str(string):\n\n### Test\nassert candidate(\"annie\")",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef check_str(string):\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))",
      "test_content": "from llm_output import check_str\n\ndef check(candidate):\n    assert candidate(\"annie\")\n    assert not candidate(\"dawood\")\n    assert candidate(\"Else\")\n\ncheck(check_str)",
      "context": "{\"function_name\": \"check_str\"}",
      "attempt_num": 1
    },
    {
      "task_id": 740,
      "prompt": "### Prompt\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\n### Signature\ndef tuple_to_dict(test_tup):\n\n### Test\nassert candidate((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def tuple_to_dict(test_tup):\n    return dict(test_tup[i:i+2] for i in range(0, len(test_tup), 2))",
      "test_content": "from llm_output import tuple_to_dict\n\ndef check(candidate):\n    assert candidate((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n    assert candidate((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\n    assert candidate((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}\n\ncheck(tuple_to_dict)",
      "context": "{\"function_name\": \"tuple_to_dict\"}",
      "attempt_num": 1
    },
    {
      "task_id": 741,
      "prompt": "### Prompt\nWrite a python function to check whether all the characters are same or not.\n\n### Signature\ndef all_Characters_Same(s) :\n\n### Test\nassert candidate(\"python\") == False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def all_Characters_Same(s):\n    return len(set(s)) == 1",
      "test_content": "from llm_output import all_Characters_Same\n\ndef check(candidate):\n    assert candidate(\"python\") == False\n    assert candidate(\"aaa\") == True\n    assert candidate(\"data\") == False\n\ncheck(all_Characters_Same)",
      "context": "{\"function_name\": \"all_Characters_Same\"}",
      "attempt_num": 1
    },
    {
      "task_id": 743,
      "prompt": "### Prompt\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\n### Signature\ndef rotate_right(list, m):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def rotate_right(lst, m):\n    return lst[-m:] + lst[:-m]",
      "test_content": "from llm_output import rotate_right\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n\ncheck(rotate_right)",
      "context": "{\"function_name\": \"rotate_right\"}",
      "attempt_num": 1
    },
    {
      "task_id": 744,
      "prompt": "### Prompt\nWrite a function to check if the given tuple has any none value or not.\n\n### Signature\ndef check_none(test_tup):\n\n### Test\nassert candidate((10, 4, 5, 6, None)) == True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def check_none(test_tup):\n    return None in test_tup",
      "test_content": "from llm_output import check_none\n\ndef check(candidate):\n    assert candidate((10, 4, 5, 6, None)) == True\n    assert candidate((7, 8, 9, 11, 14)) == False\n    assert candidate((1, 2, 3, 4, None)) == True\n\ncheck(check_none)",
      "context": "{\"function_name\": \"check_none\"}",
      "attempt_num": 1
    },
    {
      "task_id": 745,
      "prompt": "### Prompt\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\n### Signature\ndef divisible_by_digits(startnum, endnum):\n\n### Test\nassert candidate(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum + 1) if all(int(digit) != 0 and n % int(digit) == 0 for digit in str(n))]",
      "test_content": "from llm_output import divisible_by_digits\n\ndef check(candidate):\n    assert candidate(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    assert candidate(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n    assert candidate(20,25)==[22, 24]\n\ncheck(divisible_by_digits)",
      "context": "{\"function_name\": \"divisible_by_digits\"}",
      "attempt_num": 1
    },
    {
      "task_id": 746,
      "prompt": "### Prompt\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\n### Signature\ndef sector_area(r,a):\n\n### Test\nassert candidate(4,45)==6.283185307179586",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    return 0.5 * r * r * math.radians(a)",
      "test_content": "from llm_output import sector_area\n\ndef check(candidate):\n    assert candidate(4,45)==6.283185307179586\n    assert candidate(9,45)==31.808625617596654\n    assert candidate(9,361)==None\n\ncheck(sector_area)",
      "context": "{\"function_name\": \"sector_area\"}",
      "attempt_num": 1
    },
    {
      "task_id": 747,
      "prompt": "### Prompt\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n### Signature\ndef lcs_of_three(X, Y, Z):\n\n### Test\nassert candidate('AGGT12', '12TXAYB', '12XBA') == 2",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Create a 3D array to store lengths of longest common subsequence.\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    \n    # Build the L[][][] in bottom-up fashion\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n    \n    # L[m][n][o] contains the length of LCS for X[0..m-1], Y[0..n-1] and Z[0..o-1]\n    return L[m][n][o]",
      "test_content": "from llm_output import lcs_of_three\n\ndef check(candidate):\n    assert candidate('AGGT12', '12TXAYB', '12XBA') == 2\n    assert candidate('Reels', 'Reelsfor', 'ReelsforReels') == 5\n    assert candidate('abcd1e2', 'bc12ea', 'bd1ea') == 3\n\ncheck(lcs_of_three)",
      "context": "{\"function_name\": \"lcs_of_three\"}",
      "attempt_num": 1
    },
    {
      "task_id": 748,
      "prompt": "### Prompt\nWrite a function to put spaces between words starting with capital letters in a given string.\n\n### Signature\ndef capital_words_spaces(str1):\n\n### Test\nassert candidate(\"Python\") == \"\"\"Python\"\"\"",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef capital_words_spaces(str1):\n    return re.sub(r'([a-z])([A-Z])', r'\\1 \\2', str1)",
      "test_content": "from llm_output import capital_words_spaces\n\ndef check(candidate):\n    assert candidate(\"Python\") == \"\"\"Python\"\"\"\n    assert candidate(\"PythonProgrammingExamples\") == \"\"\"Python Programming Examples\"\"\"\n    assert candidate(\"GetReadyToBeCodingFreak\") == \"\"\"Get Ready To Be Coding Freak\"\"\"\n\ncheck(capital_words_spaces)",
      "context": "{\"function_name\": \"capital_words_spaces\"}",
      "attempt_num": 1
    },
    {
      "task_id": 749,
      "prompt": "### Prompt\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n### Signature\ndef sort_numeric_strings(nums_str):\n\n### Test\nassert candidate( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef sort_numeric_strings(nums_str):\n    # Convert each string to an integer\n    nums = [int(num) for num in nums_str]\n    # Sort the list of integers\n    nums.sort()\n    return nums",
      "test_content": "from llm_output import sort_numeric_strings\n\ndef check(candidate):\n    assert candidate( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    assert candidate(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n    assert candidate(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n\ncheck(sort_numeric_strings)",
      "context": "{\"function_name\": \"sort_numeric_strings\"}",
      "attempt_num": 1
    },
    {
      "task_id": 750,
      "prompt": "### Prompt\nWrite a function to add the given tuple to the given list.\n\n### Signature\ndef add_tuple(test_list, test_tup):\n\n### Test\nassert candidate([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def add_tuple(test_list, test_tup):\n    test_list.extend(test_tup)\n    return test_list",
      "test_content": "from llm_output import add_tuple\n\ndef check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n    assert candidate([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\n    assert candidate([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n\ncheck(add_tuple)",
      "context": "{\"function_name\": \"add_tuple\"}",
      "attempt_num": 1
    },
    {
      "task_id": 753,
      "prompt": "### Prompt\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n### Signature\ndef min_k(test_list, K):\n\n### Test\nassert candidate([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from operator import itemgetter\n\ndef min_k(test_list, K):\n    return sorted(test_list, key=itemgetter(1))[:K]",
      "test_content": "from llm_output import min_k\n\ndef check(candidate):\n    assert candidate([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n    assert candidate([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n    assert candidate([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]\n\ncheck(min_k)",
      "context": "{\"function_name\": \"min_k\"}",
      "attempt_num": 1
    },
    {
      "task_id": 754,
      "prompt": "### Prompt\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\n### Signature\ndef extract_index_list(l1, l2, l3):\n\n### Test\nassert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def extract_index_list(l1, l2, l3):\n    return [x for x, y, z in zip(l1, l2, l3) if x == y == z]",
      "test_content": "from llm_output import extract_index_list\n\ndef check(candidate):\n    assert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n    assert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\n    assert candidate([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\n    assert candidate([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]\n\ncheck(extract_index_list)",
      "context": "{\"function_name\": \"extract_index_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 756,
      "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\n### Signature\ndef text_match_zero_one(text):\n\n### Test\nassert candidate(\"ac\")==False\nassert candidate(\"dc\")==False\nassert candidate(\"abbbba\")==True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef text_match_zero_one(text):\n    pattern = 'ab+'\n    return bool(re.search(pattern, text))",
      "test_content": "from llm_output import text_match_zero_one\n\ndef check(candidate):\n    assert candidate(\"ac\")==False\n    assert candidate(\"dc\")==False\n    assert candidate(\"abbbba\")==True\n    assert candidate(\"dsabbbba\")==True\n    assert candidate(\"asbbbba\")==False\n    assert candidate(\"abaaa\")==True\n\ncheck(text_match_zero_one)",
      "context": "{\"function_name\": \"text_match_zero_one\"}",
      "attempt_num": 1
    },
    {
      "task_id": 757,
      "prompt": "### Prompt\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\n### Signature\ndef count_reverse_pairs(test_list):\n\n### Test\nassert candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from collections import Counter\n\ndef count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
      "test_content": "from llm_output import count_reverse_pairs\n\ndef check(candidate):\n    assert candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n    assert candidate([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\n    assert candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2\n\ncheck(count_reverse_pairs)",
      "context": "{\"function_name\": \"count_reverse_pairs\"}",
      "attempt_num": 1
    },
    {
      "task_id": 758,
      "prompt": "### Prompt\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n### Signature\ndef unique_sublists(list1):\n\n### Test\nassert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from collections import defaultdict\n\ndef unique_sublists(list1):\n    sublist_count = defaultdict(int)\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        sublist_count[tuple_sublist] += 1\n    return dict(sublist_count)",
      "test_content": "from llm_output import unique_sublists\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert candidate([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\n    assert candidate([['john']])=={('john',): 1}\n\ncheck(unique_sublists)",
      "context": "{\"function_name\": \"unique_sublists\"}",
      "attempt_num": 1
    },
    {
      "task_id": 759,
      "prompt": "### Prompt\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\n### Signature\ndef is_decimal(num):\n\n### Test\nassert candidate('123.11')==True\nassert candidate('e666.86')==False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef is_decimal(num):\n    pattern = r\"^\\d+\\.\\d{2}$\"\n    return bool(re.match(pattern, num))",
      "test_content": "from llm_output import is_decimal\n\ndef check(candidate):\n    assert candidate('123.11')==True\n    assert candidate('e666.86')==False\n    assert candidate('3.124587')==False\n    assert candidate('1.11')==True\n    assert candidate('1.1.11')==False\n\ncheck(is_decimal)",
      "context": "{\"function_name\": \"is_decimal\"}",
      "attempt_num": 1
    },
    {
      "task_id": 760,
      "prompt": "### Prompt\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\n### Signature\ndef unique_Element(arr):\n\n### Test\nassert candidate([1,1,1]) == True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def unique_Element(arr):\n    return len(set(arr)) == 1",
      "test_content": "from llm_output import unique_Element\n\ndef check(candidate):\n    assert candidate([1,1,1]) == True\n    assert candidate([1,2,1,2]) == False\n    assert candidate([1,2,3,4,5]) == False\n\ncheck(unique_Element)",
      "context": "{\"function_name\": \"unique_Element\"}",
      "attempt_num": 1
    },
    {
      "task_id": 762,
      "prompt": "### Prompt\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n### Signature\ndef check_monthnumber_number(monthnum3):\n\n### Test\nassert candidate(6)==True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def check_monthnumber_number(monthnum3):\n    return monthnum3 in (4, 6, 9, 11)",
      "test_content": "from llm_output import check_monthnumber_number\n\ndef check(candidate):\n    assert candidate(6)==True\n    assert candidate(2)==False\n    assert candidate(12)==False\n\ncheck(check_monthnumber_number)",
      "context": "{\"function_name\": \"check_monthnumber_number\"}",
      "attempt_num": 1
    },
    {
      "task_id": 764,
      "prompt": "### Prompt\nWrite a python function to count number of digits in a given string.\n\n### Signature\ndef number_ctr(str):\n\n### Test\nassert candidate('program2bedone') == 1\nassert candidate('3wonders') == 1",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def number_ctr(str):\n    return sum(c.isdigit() for c in str)",
      "test_content": "from llm_output import number_ctr\n\ndef check(candidate):\n    assert candidate('program2bedone') == 1\n    assert candidate('3wonders') == 1\n    assert candidate('123') == 3\n    assert candidate('3wond-1ers2') == 3\n\ncheck(number_ctr)",
      "context": "{\"function_name\": \"number_ctr\"}",
      "attempt_num": 1
    },
    {
      "task_id": 766,
      "prompt": "### Prompt\nWrite a function to return a list of all pairs of consecutive items in a given list.\n\n### Signature\ndef pair_wise(l1):\n\n### Test\nassert candidate([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert candidate([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]",
      "test_content": "from llm_output import pair_wise\n\ndef check(candidate):\n    assert candidate([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    assert candidate([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\n    assert candidate([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n\ncheck(pair_wise)",
      "context": "{\"function_name\": \"pair_wise\"}",
      "attempt_num": 1
    },
    {
      "task_id": 767,
      "prompt": "### Prompt\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\n### Signature\ndef get_pairs_count(arr, sum):\n\n### Test\nassert candidate([1,1,1,1],2) == 6\nassert candidate([1,5,7,-1,5],6) == 3",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
      "test_content": "from llm_output import get_pairs_count\n\ndef check(candidate):\n    assert candidate([1,1,1,1],2) == 6\n    assert candidate([1,5,7,-1,5],6) == 3\n    assert candidate([1,-2,3],1) == 1\n    assert candidate([-1,-2,3],-3) == 1\n\ncheck(get_pairs_count)",
      "context": "{\"function_name\": \"get_pairs_count\"}",
      "attempt_num": 1
    },
    {
      "task_id": 770,
      "prompt": "### Prompt\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\n### Signature\ndef odd_num_sum(n) :\n\n### Test\nassert candidate(2) == 82",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(1, 2*n, 2):\n        total_sum += i**4\n    return total_sum",
      "test_content": "from llm_output import odd_num_sum\n\ndef check(candidate):\n    assert candidate(2) == 82\n    assert candidate(3) == 707\n    assert candidate(4) == 3108\n\ncheck(odd_num_sum)",
      "context": "{\"function_name\": \"odd_num_sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 771,
      "prompt": "### Prompt\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\n### Signature\ndef check_expression(exp):\n\n### Test\nassert candidate(\"{()}[{}]\") == True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in exp:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if not stack or mapping[char] != stack.pop():\n                return False\n    \n    return not stack",
      "test_content": "from llm_output import check_expression\n\ndef check(candidate):\n    assert candidate(\"{()}[{}]\") == True\n    assert candidate(\"{()}[{]\") == False\n    assert candidate(\"{()}[{}][]({})\") == True\n\ncheck(check_expression)",
      "context": "{\"function_name\": \"check_expression\"}",
      "attempt_num": 1
    },
    {
      "task_id": 772,
      "prompt": "### Prompt\nWrite a function to remove all the words with k length in the given string.\n\n### Signature\ndef remove_length(test_str, K):\n\n### Test\nassert candidate('The person is most value tet', 3) == 'person is most value'",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)",
      "test_content": "from llm_output import remove_length\n\ndef check(candidate):\n    assert candidate('The person is most value tet', 3) == 'person is most value'\n    assert candidate('If you told me about this ok', 4) == 'If you me about ok'\n    assert candidate('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n\ncheck(remove_length)",
      "context": "{\"function_name\": \"remove_length\"}",
      "attempt_num": 1
    },
    {
      "task_id": 773,
      "prompt": "### Prompt\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n### Signature\ndef occurance_substring(text,pattern):\n\n### Test\nassert candidate('python programming, python language','python')==('python', 0, 6)\nassert candidate('python programming,programming language','programming')==('programming', 7, 18)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef occurance_substring(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
      "test_content": "from llm_output import occurance_substring\n\ndef check(candidate):\n    assert candidate('python programming, python language','python')==('python', 0, 6)\n    assert candidate('python programming,programming language','programming')==('programming', 7, 18)\n    assert candidate('python programming,programming language','language')==('language', 31, 39)\n    assert candidate('c++ programming, c++ language','python')==None\n\ncheck(occurance_substring)",
      "context": "{\"function_name\": \"occurance_substring\"}",
      "attempt_num": 1
    },
    {
      "task_id": 775,
      "prompt": "### Prompt\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\n### Signature\ndef odd_position(nums):\n\n### Test\nassert candidate([2,1,4,3,6,7,6,3]) == True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
      "test_content": "from llm_output import odd_position\n\ndef check(candidate):\n    assert candidate([2,1,4,3,6,7,6,3]) == True\n    assert candidate([4,1,2]) == True\n    assert candidate([1,2,3]) == False\n\ncheck(odd_position)",
      "context": "{\"function_name\": \"odd_position\"}",
      "attempt_num": 1
    },
    {
      "task_id": 778,
      "prompt": "### Prompt\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\n### Signature\ndef pack_consecutive_duplicates(list1):\n\n### Test\nassert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for _, group in groupby(list1)]",
      "test_content": "from llm_output import pack_consecutive_duplicates\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ncheck(pack_consecutive_duplicates)",
      "context": "{\"function_name\": \"pack_consecutive_duplicates\"}",
      "attempt_num": 1
    },
    {
      "task_id": 779,
      "prompt": "### Prompt\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\n### Signature\ndef unique_sublists(list1):\n\n### Test\nassert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "from collections import defaultdict\n\ndef unique_sublists(list1):\n    sublist_count = defaultdict(int)\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        sublist_count[tuple_sublist] += 1\n    return dict(sublist_count)",
      "test_content": "from llm_output import unique_sublists\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert candidate([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}\n\ncheck(unique_sublists)",
      "context": "{\"function_name\": \"unique_sublists\"}",
      "attempt_num": 1
    },
    {
      "task_id": 781,
      "prompt": "### Prompt\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\n### Signature\ndef count_divisors(n) :\n\n### Test\nassert candidate(10)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count % 2 == 0",
      "test_content": "from llm_output import count_divisors\n\ndef check(candidate):\n    assert candidate(10)\n    assert not candidate(100)\n    assert candidate(125)\n\ncheck(count_divisors)",
      "context": "{\"function_name\": \"count_divisors\"}",
      "attempt_num": 1
    },
    {
      "task_id": 782,
      "prompt": "### Prompt\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\n### Signature\ndef odd_length_sum(arr):\n\n### Test\nassert candidate([1,2,4]) == 14",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        total_sum += ((((i + 1) * (n - i) + 1) // 2) * arr[i])\n    return total_sum",
      "test_content": "from llm_output import odd_length_sum\n\ndef check(candidate):\n    assert candidate([1,2,4]) == 14\n    assert candidate([1,2,1,2]) == 15\n    assert candidate([1,7]) == 8\n\ncheck(odd_length_sum)",
      "context": "{\"function_name\": \"odd_length_sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 783,
      "prompt": "### Prompt\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n### Signature\ndef rgb_to_hsv(r, g, b):\n\n### Test\nassert candidate(255, 255, 255)==(0, 0.0, 100.0)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df / mx) * 100\n    v = mx * 100\n    return h, s, v",
      "test_content": "from llm_output import rgb_to_hsv\n\ndef check(candidate):\n    assert candidate(255, 255, 255)==(0, 0.0, 100.0)\n    assert candidate(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\n    assert candidate(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)\n\ncheck(rgb_to_hsv)",
      "context": "{\"function_name\": \"rgb_to_hsv\"}",
      "attempt_num": 1
    },
    {
      "task_id": 784,
      "prompt": "### Prompt\nWrite a function to find the product of first even and odd number of a given list.\n\n### Signature\ndef mul_even_odd(list1):\n\n### Test\nassert candidate([1,3,5,7,4,1,6,8])==4",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def mul_even_odd(list1):\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2 != 0:\n            odd = num\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    else:\n        return None",
      "test_content": "from llm_output import mul_even_odd\n\ndef check(candidate):\n    assert candidate([1,3,5,7,4,1,6,8])==4\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==2\n    assert candidate([1,5,7,9,10])==10\n\ncheck(mul_even_odd)",
      "context": "{\"function_name\": \"mul_even_odd\"}",
      "attempt_num": 1
    },
    {
      "task_id": 785,
      "prompt": "### Prompt\nWrite a function to convert tuple string to integer tuple.\n\n### Signature\ndef tuple_str_int(test_str):\n\n### Test\nassert candidate(\"(7, 8, 9)\") == (7, 8, 9)\nassert candidate(\"(1, 2, 3)\") == (1, 2, 3)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import ast\n\ndef tuple_str_int(test_str):\n    return ast.literal_eval(test_str)",
      "test_content": "from llm_output import tuple_str_int\n\ndef check(candidate):\n    assert candidate(\"(7, 8, 9)\") == (7, 8, 9)\n    assert candidate(\"(1, 2, 3)\") == (1, 2, 3)\n    assert candidate(\"(4, 5, 6)\") == (4, 5, 6)\n    assert candidate(\"(7, 81, 19)\") == (7, 81, 19)\n\ncheck(tuple_str_int)",
      "context": "{\"function_name\": \"tuple_str_int\"}",
      "attempt_num": 1
    },
    {
      "task_id": 786,
      "prompt": "### Prompt\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\n### Signature\ndef right_insertion(a, x):\n\n### Test\nassert candidate([1,2,4,5],6)==4\n### Remediation Message\nThis code is not correct as it led to the following issues:\nWarning: Code markers not found in code block",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import bisect\n\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)",
      "test_content": "from llm_output import right_insertion\n\ndef check(candidate):\n    assert candidate([1,2,4,5],6)==4\n    assert candidate([1,2,4,5],3)==2\n    assert candidate([1,2,4,5],7)==4\n\ncheck(right_insertion)",
      "context": "{\"function_name\": \"right_insertion\"}",
      "attempt_num": 3
    },
    {
      "task_id": 787,
      "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by three 'b'.\n\n### Signature\ndef text_match_three(text):\n\n### Test\nassert not candidate(\"ac\")\nassert not candidate(\"dc\")",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef text_match_three(text):\n    pattern = 'ab{3}'\n    return bool(re.search(pattern, text))",
      "test_content": "from llm_output import text_match_three\n\ndef check(candidate):\n    assert not candidate(\"ac\")\n    assert not candidate(\"dc\")\n    assert candidate(\"abbbba\")\n    assert candidate(\"caacabbbba\")\n\ncheck(text_match_three)",
      "context": "{\"function_name\": \"text_match_three\"}",
      "attempt_num": 1
    },
    {
      "task_id": 788,
      "prompt": "### Prompt\nWrite a function to create a new tuple from the given string and list.\n\n### Signature\ndef new_tuple(test_list, test_str):\n\n### Test\nassert candidate([\"WEB\", \"is\"], \"best\") == (\"\"\"WEB\"\"\", \"\"\"is\"\"\", \"\"\"best\"\"\")",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def new_tuple(test_list, test_str):\n    return tuple(test_list + [test_str])",
      "test_content": "from llm_output import new_tuple\n\ndef check(candidate):\n    assert candidate([\"WEB\", \"is\"], \"best\") == (\"\"\"WEB\"\"\", \"\"\"is\"\"\", \"\"\"best\"\"\")\n    assert candidate([\"We\", \"are\"], \"Developers\") == (\"\"\"We\"\"\", \"\"\"are\"\"\", \"\"\"Developers\"\"\")\n    assert candidate([\"Part\", \"is\"], \"Wrong\") == (\"\"\"Part\"\"\", \"\"\"is\"\"\", \"\"\"Wrong\"\"\")\n\ncheck(new_tuple)",
      "context": "{\"function_name\": \"new_tuple\"}",
      "attempt_num": 1
    },
    {
      "task_id": 790,
      "prompt": "### Prompt\nWrite a python function to check whether every even index contains even numbers of a given list.\n\n### Signature\ndef even_position(nums):\n\n### Test\nassert candidate([3,2,1]) == False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True",
      "test_content": "from llm_output import even_position\n\ndef check(candidate):\n    assert candidate([3,2,1]) == False\n    assert candidate([1,2,3]) == False\n    assert candidate([2,1,4]) == True\n\ncheck(even_position)",
      "context": "{\"function_name\": \"even_position\"}",
      "attempt_num": 1
    },
    {
      "task_id": 791,
      "prompt": "### Prompt\nWrite a function to remove tuples from the given tuple.\n\n### Signature\ndef remove_nested(test_tup):\n\n### Test\nassert candidate((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert candidate((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def remove_nested(test_tup):\n    # Using a generator expression to filter out tuples\n    result = tuple(item for item in test_tup if not isinstance(item, tuple))\n    return result",
      "test_content": "from llm_output import remove_nested\n\ndef check(candidate):\n    assert candidate((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n    assert candidate((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\n    assert candidate((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\n    assert candidate((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)\n\ncheck(remove_nested)",
      "context": "{\"function_name\": \"remove_nested\"}",
      "attempt_num": 1
    },
    {
      "task_id": 792,
      "prompt": "### Prompt\nWrite a python function to count the number of lists in a given number of lists.\n\n### Signature\ndef count_list(input_list):\n\n### Test\nassert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def count_list(input_list):\n    return len(input_list)",
      "test_content": "from llm_output import count_list\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n    assert candidate([[1,2],[2,3],[4,5]]) == 3\n    assert candidate([[1,0],[2,0]]) == 2\n\ncheck(count_list)",
      "context": "{\"function_name\": \"count_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 793,
      "prompt": "### Prompt\nWrite a python function to find the last position of an element in a sorted array.\n\n### Signature\ndef last(arr,x):\n\n### Test\nassert candidate([1,2,3],1) == 0",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import bisect\n\ndef last(arr, x):\n    # Find the rightmost index where x should be inserted to maintain sorted order\n    index = bisect.bisect_right(arr, x)\n    # If the index is greater than 0 and the element at index-1 is x, return index-1\n    if index > 0 and arr[index-1] == x:\n        return index-1\n    # Otherwise, return -1 indicating x is not in the array\n    return -1",
      "test_content": "from llm_output import last\n\ndef check(candidate):\n    assert candidate([1,2,3],1) == 0\n    assert candidate([1,1,1,2,3,4],1) == 2\n    assert candidate([2,3,2,3,6,8,9],3) == 3\n\ncheck(last)",
      "context": "{\"function_name\": \"last\"}",
      "attempt_num": 1
    },
    {
      "task_id": 794,
      "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n### Signature\ndef text_starta_endb(text):\n\n### Test\nassert candidate(\"aabbbb\")",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))",
      "test_content": "from llm_output import text_starta_endb\n\ndef check(candidate):\n    assert candidate(\"aabbbb\")\n    assert not candidate(\"aabAbbbc\")\n    assert not candidate(\"accddbbjjj\")\n\ncheck(text_starta_endb)",
      "context": "{\"function_name\": \"text_starta_endb\"}",
      "attempt_num": 1
    },
    {
      "task_id": 796,
      "prompt": "### Prompt\nWrite function to find the sum of all items in the given dictionary.\n\n### Signature\ndef return_sum(dict):\n\n### Test\nassert candidate({'a': 100, 'b':200, 'c':300}) == 600",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def return_sum(dict):\n    return sum(dict.values())",
      "test_content": "from llm_output import return_sum\n\ndef check(candidate):\n    assert candidate({'a': 100, 'b':200, 'c':300}) == 600\n    assert candidate({'a': 25, 'b':18, 'c':45}) == 88\n    assert candidate({'a': 36, 'b':39, 'c':49}) == 124\n\ncheck(return_sum)",
      "context": "{\"function_name\": \"return_sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 798,
      "prompt": "### Prompt\nWrite a python function to find the sum of an array.\n\n### Signature\ndef _sum(arr):\n\n### Test\nassert candidate([1, 2, 3]) == 6",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def _sum(arr):\n    return sum(arr)",
      "test_content": "from llm_output import _sum\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([15, 12, 13, 10]) == 50\n    assert candidate([0, 1, 2]) == 3\n\ncheck(_sum)",
      "context": "{\"function_name\": \"_sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 799,
      "prompt": "### Prompt\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n### Signature\ndef left_rotate(n,d):\n\n### Test\nassert candidate(16,2) == 64\nassert candidate(10,2) == 40\nassert candidate(99,3) == 792",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def left_rotate(n, d):\n    return (n << d) | (n >> (32 - d))",
      "test_content": "from llm_output import left_rotate\n\ndef check(candidate):\n    assert candidate(16,2) == 64\n    assert candidate(10,2) == 40\n    assert candidate(99,3) == 792\n    assert candidate(99,3) == 792\n    assert candidate(0b0001,3) == 0b1000\n    assert candidate(0b0101,3) == 0b101000\n    assert candidate(0b11101,3) == 0b11101000\n\ncheck(left_rotate)",
      "context": "{\"function_name\": \"left_rotate\"}",
      "attempt_num": 1
    },
    {
      "task_id": 800,
      "prompt": "### Prompt\nWrite a function to remove all whitespaces from a string.\n\n### Signature\ndef remove_all_spaces(text):\n\n### Test\nassert candidate('python  program')==('pythonprogram')\nassert candidate('python   programming    language')==('pythonprogramminglanguage')",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def remove_all_spaces(text):\n    return text.replace(\" \", \"\")",
      "test_content": "from llm_output import remove_all_spaces\n\ndef check(candidate):\n    assert candidate('python  program')==('pythonprogram')\n    assert candidate('python   programming    language')==('pythonprogramminglanguage')\n    assert candidate('python                     program')==('pythonprogram')\n    assert candidate('   python                     program')=='pythonprogram'\n\ncheck(remove_all_spaces)",
      "context": "{\"function_name\": \"remove_all_spaces\"}",
      "attempt_num": 1
    },
    {
      "task_id": 802,
      "prompt": "### Prompt\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n### Signature\ndef count_rotation(arr):\n\n### Test\nassert candidate([3,2,1]) == 1\nassert candidate([4,5,1,2,3]) == 2",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            return i\n    return 0",
      "test_content": "from llm_output import count_rotation\n\ndef check(candidate):\n    assert candidate([3,2,1]) == 1\n    assert candidate([4,5,1,2,3]) == 2\n    assert candidate([7,8,9,1,2,3]) == 3\n    assert candidate([1,2,3]) == 0\n    assert candidate([1,3,2]) == 2\n\ncheck(count_rotation)",
      "context": "{\"function_name\": \"count_rotation\"}",
      "attempt_num": 1
    },
    {
      "task_id": 803,
      "prompt": "### Prompt\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\n### Signature\ndef is_perfect_square(n) :\n\n### Test\nassert not candidate(10)\nassert candidate(36)\nassert not candidate(14)",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return root * root == n",
      "test_content": "from llm_output import is_perfect_square\n\ndef check(candidate):\n    assert not candidate(10)\n    assert candidate(36)\n    assert not candidate(14)\n    assert candidate(14*14)\n    assert not candidate(125)\n    assert candidate(125*125)\n\ncheck(is_perfect_square)",
      "context": "{\"function_name\": \"is_perfect_square\"}",
      "attempt_num": 1
    },
    {
      "task_id": 804,
      "prompt": "### Prompt\nWrite a function to check whether the product of numbers in a list is even or not.\n\n### Signature\ndef is_product_even(arr):\n\n### Test\nassert candidate([1,2,3])",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
      "test_content": "from llm_output import is_product_even\n\ndef check(candidate):\n    assert candidate([1,2,3])\n    assert candidate([1,2,1,4])\n    assert not candidate([1,1])\n\ncheck(is_product_even)",
      "context": "{\"function_name\": \"is_product_even\"}",
      "attempt_num": 1
    },
    {
      "task_id": 805,
      "prompt": "### Prompt\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\n### Signature\ndef max_sum_list(lists):\n\n### Test\nassert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def max_sum_list(lists):\n    return max(lists, key=sum)",
      "test_content": "from llm_output import max_sum_list\n\ndef check(candidate):\n    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n    assert candidate([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]\n    assert candidate([[2,3,1]])==[2,3,1]\n\ncheck(max_sum_list)",
      "context": "{\"function_name\": \"max_sum_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 806,
      "prompt": "### Prompt\nWrite a function to find maximum run of uppercase characters in the given string.\n\n### Signature\ndef max_run_uppercase(test_str):\n\n### Test\nassert candidate('GeMKSForGERksISBESt') == 5",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "import re\n\ndef max_run_uppercase(test_str):\n    # Find all sequences of uppercase letters\n    uppercase_sequences = re.findall(r'[A-Z]+', test_str)\n    # Find the length of the longest sequence\n    max_length = max(len(seq) for seq in uppercase_sequences)\n    return max_length",
      "test_content": "from llm_output import max_run_uppercase\n\ndef check(candidate):\n    assert candidate('GeMKSForGERksISBESt') == 5\n    assert candidate('PrECIOusMOVemENTSYT') == 6\n    assert candidate('GooGLEFluTTER') == 4\n\ncheck(max_run_uppercase)",
      "context": "{\"function_name\": \"max_run_uppercase\"}",
      "attempt_num": 1
    },
    {
      "task_id": 807,
      "prompt": "### Prompt\nWrite a python function to find the first odd number in a given list of numbers.\n\n### Signature\ndef first_odd(nums):\n\n### Test\nassert candidate([1,3,5]) == 1",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None",
      "test_content": "from llm_output import first_odd\n\ndef check(candidate):\n    assert candidate([1,3,5]) == 1\n    assert candidate([2,4,1,3]) == 1\n    assert candidate ([8,9,1]) == 9\n\ncheck(first_odd)",
      "context": "{\"function_name\": \"first_odd\"}",
      "attempt_num": 1
    },
    {
      "task_id": 808,
      "prompt": "### Prompt\nWrite a function to check if the given tuples contain the k or not.\n\n### Signature\ndef check_K(test_tup, K):\n\n### Test\nassert candidate((10, 4, 5, 6, 8), 6) == True",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def check_K(test_tup, K):\n    return K in test_tup",
      "test_content": "from llm_output import check_K\n\ndef check(candidate):\n    assert candidate((10, 4, 5, 6, 8), 6) == True\n    assert candidate((1, 2, 3, 4, 5, 6), 7) == False\n    assert candidate((7, 8, 9, 44, 11, 12), 11) == True\n\ncheck(check_K)",
      "context": "{\"function_name\": \"check_K\"}",
      "attempt_num": 1
    },
    {
      "task_id": 809,
      "prompt": "### Prompt\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n### Signature\ndef check_smaller(test_tup1, test_tup2):\n\n### Test\nassert candidate((1, 2, 3), (2, 3, 4)) == False",
      "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
      "solution": "def check_smaller(test_tup1, test_tup2):\n    return all(x > y for x, y in zip(test_tup1, test_tup2))",
      "test_content": "from llm_output import check_smaller\n\ndef check(candidate):\n    assert candidate((1, 2, 3), (2, 3, 4)) == False\n    assert candidate((4, 5, 6), (3, 4, 5)) == True\n    assert candidate((11, 12, 13), (10, 11, 12)) == True\n\ncheck(check_smaller)",
      "context": "{\"function_name\": \"check_smaller\"}",
      "attempt_num": 1
    }
  ]
}