[
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 2,
        "solution": "```python\ndef similar_elements(test_tup1, test_tup2):\n    # Convert both tuples to sets to remove duplicates and find intersection\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the intersection of both sets\n    similar_elements = set1.intersection(set2)\n    \n    # Convert the result back to a list\n    return list(similar_elements)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
        "timestamp": "2025-09-20T14:48:13.953095",
        "response_time": "2.06",
        "context": "{\"function_name\": \"similar_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 3,
        "solution": "```python\n###START===\nimport math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
        "timestamp": "2025-09-20T14:48:15.524288",
        "response_time": "1.57",
        "context": "{\"function_name\": \"is_not_prime\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 4,
        "solution": "```python\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    # Use heapq.nlargest to find the n largest numbers\n    largest_nums = heapq.nlargest(n, nums)\n    # Return the largest numbers in descending order\n    return largest_nums\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
        "timestamp": "2025-09-20T14:48:16.424057",
        "response_time": "0.90",
        "context": "{\"function_name\": \"heap_queue_largest\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 6,
        "solution": "```python\n===START===\ndef is_Power_Of_Two(x):\n    # Check if x is a power of two\n    return x > 0 and (x & (x - 1)) == 0\n\ndef check_bit_difference(x, y):\n    # Check if x and y differ at exactly one bit position\n    return is_Power_Of_Two(x ^ y)\n\n# Example usage:\nx = 10  # Binary: 1010\ny = 14  # Binary: 1110\nprint(check_bit_difference(x, y))  # Output: True\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
        "timestamp": "2025-09-20T14:48:18.187116",
        "response_time": "1.76",
        "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 7,
        "solution": "```python\ndef find_char_long(text):\n    # Split the text into words\n    words = text.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
        "timestamp": "2025-09-20T14:48:19.118344",
        "response_time": "0.93",
        "context": "{\"function_name\": \"find_char_long\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 8,
        "solution": "```python\ndef square_nums(nums):\n    return [num ** 2 for num in nums]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
        "timestamp": "2025-09-20T14:48:19.550510",
        "response_time": "0.43",
        "context": "{\"function_name\": \"square_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 9,
        "solution": "```python\ndef find_Rotations(str):\n    if not str:\n        return 0\n    \n    n = len(str)\n    for i in range(1, n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
        "timestamp": "2025-09-20T14:48:20.461170",
        "response_time": "0.91",
        "context": "{\"function_name\": \"find_Rotations\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 11,
        "solution": "```python\ndef remove_Occ(s, ch):\n    # Find the first occurrence of the character\n    first_occurrence = s.find(ch)\n    # Find the last occurrence of the character\n    last_occurrence = s.rfind(ch)\n    \n    # If the character is not found, return the original string\n    if first_occurrence == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_occurrence] + s[first_occurrence + 1:]\n    \n    # If the character is found again, remove the last occurrence\n    if last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence + 1:]\n    \n    return s\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
        "timestamp": "2025-09-20T14:48:22.534226",
        "response_time": "2.07",
        "context": "{\"function_name\": \"remove_Occ\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 12,
        "solution": "```python\ndef sort_matrix(M):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the matrix based on the row sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, M))]\n    \n    return sorted_matrix\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
        "timestamp": "2025-09-20T14:48:23.547958",
        "response_time": "1.01",
        "context": "{\"function_name\": \"sort_matrix\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 14,
        "solution": "```python\ndef find_Volume(l, b, h):\n    # Calculate the area of the triangular base\n    base_area = 0.5 * b * h\n    \n    # Calculate the volume of the triangular prism\n    volume = base_area * l\n    \n    return volume\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
        "timestamp": "2025-09-20T14:48:24.452802",
        "response_time": "0.90",
        "context": "{\"function_name\": \"find_Volume\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 16,
        "solution": "```python\nimport re\n\ndef text_lowercase_underscore(text):\n    # Use regular expression to find sequences of lowercase letters joined with an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    return bool(re.match(pattern, text))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
        "timestamp": "2025-09-20T14:48:25.293709",
        "response_time": "0.84",
        "context": "{\"function_name\": \"text_lowercase_underscore\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 17,
        "solution": "```python\ndef square_perimeter(a):\n    return 4 * a\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
        "timestamp": "2025-09-20T14:48:25.708989",
        "response_time": "0.41",
        "context": "{\"function_name\": \"square_perimeter\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 18,
        "solution": "```python\ndef str_to_list(string):\n    return list(string)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
        "timestamp": "2025-09-20T14:48:26.086900",
        "response_time": "0.38",
        "context": "{\"function_name\": \"remove_dirty_chars\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 19,
        "solution": "```python\ndef test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
        "timestamp": "2025-09-20T14:48:26.769927",
        "response_time": "0.68",
        "context": "{\"function_name\": \"test_duplicate\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 20,
        "solution": "```python\ndef is_woodall(x):\n    if x < 0:\n        return False\n    n = 1\n    while True:\n        woodall_number = n * (3 * n - 1) // 2\n        if woodall_number == x:\n            return True\n        if woodall_number > x:\n            return False\n        n += 1\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
        "timestamp": "2025-09-20T14:48:27.981832",
        "response_time": "1.21",
        "context": "{\"function_name\": \"is_woodall\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 56,
        "solution": "```python\ndef rev(num):\n    # Convert the number to a string to reverse it\n    num_str = str(num)\n    # Reverse the string\n    reversed_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_str)\n    # Check if the number is one less than twice its reverse\n    return num == 2 * reversed_num - 1\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
        "timestamp": "2025-09-20T14:48:29.260725",
        "response_time": "1.28",
        "context": "{\"function_name\": \"check\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 57,
        "solution": "```python\ndef find_Max_Num(arr):\n    # Convert each digit to a string to facilitate sorting\n    arr = [str(digit) for digit in arr]\n    \n    # Sort the digits in descending order\n    arr.sort(reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    max_num = ''.join(arr)\n    \n    # Convert the result back to an integer\n    return int(max_num)\n\n# Example usage:\n# arr = [3, 30, 34, 5, 9]\n# print(find_Max_Num(arr))  # Output: 9534330\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
        "timestamp": "2025-09-20T14:48:31.107300",
        "response_time": "1.84",
        "context": "{\"function_name\": \"find_Max_Num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 58,
        "solution": "```python\ndef opposite_Signs(x, y):\n    return x * y < 0\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
        "timestamp": "2025-09-20T14:48:31.573834",
        "response_time": "0.46",
        "context": "{\"function_name\": \"opposite_Signs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 59,
        "solution": "```python\ndef is_octagonal(n):\n    # Calculate the nth octagonal number using the formula\n    # O(n) = n * (3 * n - 2)\n    octagonal_number = n * (3 * n - 2)\n    \n    # Check if the calculated number is equal to the input n\n    return octagonal_number == n\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
        "timestamp": "2025-09-20T14:48:32.676298",
        "response_time": "1.10",
        "context": "{\"function_name\": \"is_octagonal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 61,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef count_Substrings(s: str) -> int:\n    n = len(s)\n    count = 0\n    prefix_sum = 0\n    prefix_sum_count = defaultdict(int)\n    prefix_sum_count[0] = 1\n\n    for i in range(n):\n        prefix_sum += int(s[i])\n        if prefix_sum - i == i:\n            count += 1\n        count += prefix_sum_count[prefix_sum - i]\n        prefix_sum_count[prefix_sum] += 1\n\n    return count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
        "timestamp": "2025-09-20T14:48:34.298409",
        "response_time": "1.62",
        "context": "{\"function_name\": \"count_Substrings\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 62,
        "solution": "```python\ndef smallest_num(xs):\n    if not xs:\n        return None  # Return None if the list is empty\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
        "timestamp": "2025-09-20T14:48:35.173026",
        "response_time": "0.87",
        "context": "{\"function_name\": \"smallest_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 63,
        "solution": "```python\ndef max_difference(test_list):\n    if len(test_list) < 2:\n        return 0  # Not enough elements to form a pair\n\n    min_element = min(test_list)\n    max_element = max(test_list)\n\n    return max_element - min_element\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
        "timestamp": "2025-09-20T14:48:36.049763",
        "response_time": "0.87",
        "context": "{\"function_name\": \"max_difference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 64,
        "solution": "```python\ndef subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjectmarks\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
        "timestamp": "2025-09-20T14:48:36.835539",
        "response_time": "0.78",
        "context": "{\"function_name\": \"subject_marks\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 65,
        "solution": "```python\ndef recursive_list_sum(data_list):\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
        "timestamp": "2025-09-20T14:48:37.624797",
        "response_time": "0.79",
        "context": "{\"function_name\": \"recursive_list_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 66,
        "solution": "```python\ndef pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
        "timestamp": "2025-09-20T14:48:38.306974",
        "response_time": "0.68",
        "context": "{\"function_name\": \"pos_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 67,
        "solution": "```python\nfrom math import factorial\n\ndef bell_number(n):\n    # Initialize the Bell triangle\n    bell_triangle = [[0] * (n + 1) for _ in range(n + 1)]\n    bell_triangle[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n + 1):\n        bell_triangle[i][0] = bell_triangle[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell_triangle[i][j] = bell_triangle[i - 1][j - 1] + bell_triangle[i][j - 1]\n    \n    # The number of ways to partition a set of n elements is the nth Bell number\n    return bell_triangle[n][0]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
        "timestamp": "2025-09-20T14:48:40.523514",
        "response_time": "2.21",
        "context": "{\"function_name\": \"bell_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 68,
        "solution": "```python\ndef is_Monotonic(A):\n    if not A:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
        "timestamp": "2025-09-20T14:48:41.719801",
        "response_time": "1.19",
        "context": "{\"function_name\": \"is_Monotonic\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 69,
        "solution": "```python\ndef is_sublist(l, s):\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
        "timestamp": "2025-09-20T14:48:42.786636",
        "response_time": "1.06",
        "context": "{\"function_name\": \"is_sublist\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 70,
        "solution": "```python\ndef find_equal_tuple(Input):\n    # Check if the input is a list of tuples\n    if not isinstance(Input, list) or not all(isinstance(item, tuple) for item in Input):\n        return False\n    \n    # Get the length of the first tuple\n    first_tuple_length = len(Input[0])\n    \n    # Check if all tuples have the same length\n    for tup in Input:\n        if len(tup) != first_tuple_length:\n            return False\n    \n    return True\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
        "timestamp": "2025-09-20T14:48:44.272407",
        "response_time": "1.48",
        "context": "{\"function_name\": \"get_equal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 71,
        "solution": "```python\n===START===\nimport math\n\ndef comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n        sorted = True\n\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums\n\n===END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
        "timestamp": "2025-09-20T14:48:46.026262",
        "response_time": "1.75",
        "context": "{\"function_name\": \"comb_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 72,
        "solution": "```python\n===START===\ndef dif_Square(n):\n    if n < 0:\n        return False\n    for i in range(int(n**0.5) + 1):\n        if (n - i**2) >= 0 and int((n - i**2)**0.5)**2 == n - i**2:\n            return True\n    return False\n\n===END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
        "timestamp": "2025-09-20T14:48:47.271777",
        "response_time": "1.24",
        "context": "{\"function_name\": \"dif_Square\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 74,
        "solution": "```python\ndef is_samepatterns(colors, patterns):\n    # Check if the number of colors matches the number of patterns\n    if len(colors) != len(patterns):\n        return False\n    \n    # Iterate over each color and pattern pair\n    for color, pattern in zip(colors, patterns):\n        # Check if the color matches the pattern\n        if color != pattern:\n            return False\n    \n    # If all colors match their respective patterns, return True\n    return True\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
        "timestamp": "2025-09-20T14:48:48.649406",
        "response_time": "1.37",
        "context": "{\"function_name\": \"is_samepatterns\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 75,
        "solution": "```python\ndef find_tuples(test_list, K):\n    # Use list comprehension to filter tuples where all elements are divisible by K\n    result = [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
        "timestamp": "2025-09-20T14:48:49.526268",
        "response_time": "0.87",
        "context": "{\"function_name\": \"find_tuples\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 77,
        "solution": "```python\ndef is_Diff(n):\n    # Check if the number is divisible by 11\n    return n % 11 == 0\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
        "timestamp": "2025-09-20T14:48:50.131253",
        "response_time": "0.60",
        "context": "{\"function_name\": \"is_Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 79,
        "solution": "```python\ndef word_len(s):\n    return len(s) % 2 != 0\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
        "timestamp": "2025-09-20T14:48:50.578748",
        "response_time": "0.44",
        "context": "{\"function_name\": \"word_len\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 80,
        "solution": "```python\ndef tetrahedral_number(n):\n    # Calculate the nth tetrahedral number using the formula: n * (n + 1) * (n + 2) / 6\n    return n * (n + 1) * (n + 2) // 6\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
        "timestamp": "2025-09-20T14:48:51.548274",
        "response_time": "0.97",
        "context": "{\"function_name\": \"tetrahedral_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 82,
        "solution": "```python\nimport math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
        "timestamp": "2025-09-20T14:48:52.083442",
        "response_time": "0.53",
        "context": "{\"function_name\": \"volume_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 83,
        "solution": "```python\ndef get_Char(strr):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in strr)\n    \n    # Find the character corresponding to the sum modulo 26\n    result_char = chr((ascii_sum % 26) + ord('A'))\n    \n    return result_char\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
        "timestamp": "2025-09-20T14:48:53.201635",
        "response_time": "1.12",
        "context": "{\"function_name\": \"get_Char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 84,
        "solution": "```python\ndef sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    \n    # Initialize the sequence with the first two numbers\n    sequence = [1, 1]\n    \n    # Calculate the sequence up to the nth number\n    for i in range(3, n + 1):\n        next_value = sequence[sequence[i - 1] - 1] + sequence[i - sequence[i - 1]]\n        sequence.append(next_value)\n    \n    return sequence[n - 1]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
        "timestamp": "2025-09-20T14:48:54.825777",
        "response_time": "1.62",
        "context": "{\"function_name\": \"sequence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 85,
        "solution": "```python\nimport math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
        "timestamp": "2025-09-20T14:48:55.323852",
        "response_time": "0.49",
        "context": "{\"function_name\": \"surfacearea_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 86,
        "solution": "```python\ndef centered_hexagonal_number(n):\n    # The nth centered hexagonal number is given by the formula: 3n(n-1) + 1\n    return 3 * n * (n - 1) + 1\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
        "timestamp": "2025-09-20T14:48:56.157349",
        "response_time": "0.83",
        "context": "{\"function_name\": \"centered_hexagonal_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 87,
        "solution": "```python\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # Create a new dictionary to store the merged result\n    merged_dict = {}\n    \n    # Iterate over the first dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    \n    # Iterate over the second dictionary\n    for key, value in dict2.items():\n        # If the key already exists in the merged dictionary, update its value\n        if key in merged_dict:\n            merged_dict[key] = value\n        else:\n            # Otherwise, add the key-value pair to the merged dictionary\n            merged_dict[key] = value\n    \n    # Iterate over the third dictionary\n    for key, value in dict3.items():\n        # If the key already exists in the merged dictionary, update its value\n        if key in merged_dict:\n            merged_dict[key] = value\n        else:\n            # Otherwise, add the key-value pair to the merged dictionary\n            merged_dict[key] = value\n    \n    # Return the merged dictionary\n    return merged_dict\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
        "timestamp": "2025-09-20T14:48:59.034351",
        "response_time": "2.87",
        "context": "{\"function_name\": \"merge_dictionaries_three\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 88,
        "solution": "```python\nfrom collections import Counter\n\ndef freq_count(list1):\n    return dict(Counter(list1))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):",
        "timestamp": "2025-09-20T14:48:59.508212",
        "response_time": "0.47",
        "context": "{\"function_name\": \"freq_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 89,
        "solution": "```python\ndef closest_num(N):\n    # Convert the input to an integer\n    N = int(N)\n    \n    # Initialize the closest number to N\n    closest = N\n    \n    # Iterate through numbers from N-1 down to 1\n    for i in range(N-1, 0, -1):\n        # If the current number is smaller than the closest number found so far\n        if i < closest:\n            # Update the closest number\n            closest = i\n    \n    # Return the closest smaller number\n    return closest\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):",
        "timestamp": "2025-09-20T14:49:01.047071",
        "response_time": "1.54",
        "context": "{\"function_name\": \"closest_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 90,
        "solution": "```python\ndef len_log(list1):\n    if not list1:\n        return 0\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):",
        "timestamp": "2025-09-20T14:49:01.913545",
        "response_time": "0.86",
        "context": "{\"function_name\": \"len_log\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 91,
        "solution": "```python\ndef find_substring(str1, sub_str):\n    return sub_str in str1\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):",
        "timestamp": "2025-09-20T14:49:02.360999",
        "response_time": "0.44",
        "context": "{\"function_name\": \"find_substring\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 92,
        "solution": "```python\ndef is_undulating(n):\n    # Convert the number to a string to easily iterate over digits\n    str_n = str(n)\n    \n    # Check if the string length is less than 3, which cannot form an undulating number\n    if len(str_n) < 3:\n        return False\n    \n    # Check if the first two digits are the same\n    if str_n[0] == str_n[1]:\n        # Check if the rest of the digits alternate between the first two digits\n        for i in range(2, len(str_n)):\n            if str_n[i] != str_n[i-2]:\n                return False\n        return True\n    \n    # Check if the first and last digits are the same\n    if str_n[0] == str_n[-1]:\n        # Check if the rest of the digits alternate between the first and last digits\n        for i in range(1, len(str_n) - 1):\n            if str_n[i] != str_n[i-1]:\n                return False\n        return True\n    \n    # If neither of the above conditions is met, the number is not undulating\n    return False\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):",
        "timestamp": "2025-09-20T14:49:05.524375",
        "response_time": "3.16",
        "context": "{\"function_name\": \"is_undulating\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 93,
        "solution": "```python\ndef power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):",
        "timestamp": "2025-09-20T14:49:06.101950",
        "response_time": "0.58",
        "context": "{\"function_name\": \"power\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 94,
        "solution": "```python\ndef index_minimum(test_list):\n    if not test_list:\n        return None  # Return None if the list is empty\n\n    # Initialize the minimum value and its index\n    min_value = float('inf')\n    min_index = -1\n\n    # Iterate through the list of tuples\n    for index, (value, _) in enumerate(test_list):\n        # Check if the current value is smaller than the minimum value found so far\n        if value < min_value:\n            min_value = value\n            min_index = index\n\n    return min_index\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):",
        "timestamp": "2025-09-20T14:49:07.701090",
        "response_time": "1.59",
        "context": "{\"function_name\": \"index_minimum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 95,
        "solution": "```python\ndef Find_Min_Length(lst):\n    if not lst:\n        return 0\n    \n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    return min_length\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):",
        "timestamp": "2025-09-20T14:49:08.594955",
        "response_time": "0.89",
        "context": "{\"function_name\": \"Find_Min_Length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 96,
        "solution": "```python\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):",
        "timestamp": "2025-09-20T14:49:09.325099",
        "response_time": "0.73",
        "context": "{\"function_name\": \"divisor\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 97,
        "solution": "```python\nfrom collections import defaultdict\n\ndef frequency_lists(list1):\n    frequency_dict = defaultdict(int)\n    for sublist in list1:\n        for element in sublist:\n            frequency_dict[element] += 1\n    return dict(frequency_dict)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):",
        "timestamp": "2025-09-20T14:49:10.165829",
        "response_time": "0.84",
        "context": "{\"function_name\": \"frequency_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 98,
        "solution": "```python\ndef multiply_num(numbers):\n    if not numbers:\n        return 0  # Return 0 if the list is empty to avoid division by zero\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):",
        "timestamp": "2025-09-20T14:49:11.086297",
        "response_time": "0.92",
        "context": "{\"function_name\": \"multiply_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 99,
        "solution": "```python\ndef decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):",
        "timestamp": "2025-09-20T14:49:11.963834",
        "response_time": "0.87",
        "context": "{\"function_name\": \"decimal_to_binary\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 100,
        "solution": "```python\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    if num < 0:\n        return None  # Negative numbers cannot be palindromes\n\n    num += 1  # Start checking from the next number\n\n    while not is_palindrome(num):\n        num += 1\n\n    return num\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):",
        "timestamp": "2025-09-20T14:49:13.191337",
        "response_time": "1.23",
        "context": "{\"function_name\": \"next_smallest_palindrome\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 101,
        "solution": "```python\ndef kth_element(arr, k):\n    # Check if k is within the valid range\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of bounds\")\n    \n    # Return the kth element (1-based index)\n    return arr[k - 1]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):",
        "timestamp": "2025-09-20T14:49:14.180976",
        "response_time": "0.99",
        "context": "{\"function_name\": \"kth_element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 102,
        "solution": "```python\ndef snake_to_camel(word):\n    # Split the word by underscores\n    parts = word.split('_')\n    # Capitalize the first letter of each part and join them together\n    camel_case_word = ''.join(part.capitalize() for part in parts)\n    return camel_case_word\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
        "timestamp": "2025-09-20T14:49:15.141177",
        "response_time": "0.96",
        "context": "{\"function_name\": \"snake_to_camel\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 103,
        "solution": "```python\nfrom math import comb\n\ndef eulerian_num(n, m):\n    if m >= n or m < 0:\n        return 0\n    if m == 0:\n        return 1\n    if m == 1:\n        return n - 1\n    return comb(n, m) * (m + 1) - comb(n, m - 1) * (n - m + 1)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):",
        "timestamp": "2025-09-20T14:49:16.436388",
        "response_time": "1.29",
        "context": "{\"function_name\": \"eulerian_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 104,
        "solution": "```python\ndef sort_sublists(input_list):\n    # Use list comprehension to sort each sublist\n    sorted_list = [sorted(sublist) for sublist in input_list]\n    return sorted_list\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):",
        "timestamp": "2025-09-20T14:49:17.124273",
        "response_time": "0.68",
        "context": "{\"function_name\": \"sort_sublists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 105,
        "solution": "```python\ndef count(lst):\n    return sum(1 for item in lst if item)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):",
        "timestamp": "2025-09-20T14:49:17.918189",
        "response_time": "0.79",
        "context": "{\"function_name\": \"count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 106,
        "solution": "```python\ndef add_lists(test_list, test_tup):\n    # Convert the list to a tuple and concatenate with the given tuple\n    result = test_tup + tuple(test_list)\n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):",
        "timestamp": "2025-09-20T14:49:18.636047",
        "response_time": "0.72",
        "context": "{\"function_name\": \"add_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 108,
        "solution": "```python\nfrom typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    # Merge all lists into one\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    return merged_list\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):",
        "timestamp": "2025-09-20T14:49:19.729845",
        "response_time": "1.09",
        "context": "{\"function_name\": \"merge_sorted_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 109,
        "solution": "```python\ndef odd_Equivalent(s, n):\n    # Convert the binary string to a list of integers\n    binary_list = [int(bit) for bit in s]\n    \n    # Initialize a counter for numbers with an odd value\n    odd_count = 0\n    \n    # Iterate over the binary list\n    for i in range(n):\n        # Rotate the list to the right by 1\n        binary_list.insert(0, binary_list.pop())\n        \n        # Check if the number of 1s in the list is odd\n        if sum(binary_list) % 2 == 1:\n            odd_count += 1\n    \n    return odd_count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):",
        "timestamp": "2025-09-20T14:49:21.622903",
        "response_time": "1.89",
        "context": "{\"function_name\": \"odd_Equivalent\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 111,
        "solution": "```python\ndef common_in_nested_lists(nestedlist):\n    # Flatten the nested list\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    \n    # Use a set to find unique elements\n    unique_elements = set(flat_list)\n    \n    # Find the intersection of all unique elements\n    common_elements = set()\n    for element in unique_elements:\n        if all(element in sublist for sublist in nestedlist):\n            common_elements.add(element)\n    \n    return list(common_elements)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):",
        "timestamp": "2025-09-20T14:49:23.061763",
        "response_time": "1.43",
        "context": "{\"function_name\": \"common_in_nested_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 113,
        "solution": "```python\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):",
        "timestamp": "2025-09-20T14:49:23.576197",
        "response_time": "0.51",
        "context": "{\"function_name\": \"check_integer\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 115,
        "solution": "```python\ndef empty_dit(list1):\n    return all(not d for d in list1)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):",
        "timestamp": "2025-09-20T14:49:24.035357",
        "response_time": "0.46",
        "context": "{\"function_name\": \"empty_dit\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 116,
        "solution": "```python\ndef tuple_to_int(nums):\n    # Convert each number in the tuple to a string, join them together, and convert to an integer\n    return int(''.join(map(str, nums)))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):",
        "timestamp": "2025-09-20T14:49:24.750026",
        "response_time": "0.71",
        "context": "{\"function_name\": \"tuple_to_int\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 117,
        "solution": "```python\ndef list_to_float(test_list):\n    # Initialize an empty list to store the converted elements\n    result = []\n    \n    # Iterate over each sublist in the input list\n    for sublist in test_list:\n        # Initialize an empty list to store the converted elements of the current sublist\n        sublist_result = []\n        \n        # Iterate over each element in the current sublist\n        for element in sublist:\n            # Try to convert the element to a float\n            try:\n                float_value = float(element)\n                sublist_result.append(float_value)\n            except ValueError:\n                # If conversion fails, append the original element\n                sublist_result.append(element)\n        \n        # Append the converted sublist to the result list\n        result.append(sublist_result)\n    \n    # Return the final result list\n    return result\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):",
        "timestamp": "2025-09-20T14:49:26.939066",
        "response_time": "2.19",
        "context": "{\"function_name\": \"list_to_float\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 118,
        "solution": "```python\ndef string_to_list(string):\n    return string.split()\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):",
        "timestamp": "2025-09-20T14:49:27.311136",
        "response_time": "0.37",
        "context": "{\"function_name\": \"string_to_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 119,
        "solution": "```python\ndef search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        # Check if mid is even or odd\n        if mid % 2 == 0:\n            # If mid is even, check if the element at mid is the same as the element at mid + 1\n            if arr[mid] == arr[mid + 1]:\n                # If they are the same, the unique element must be in the right half\n                left = mid + 2\n            else:\n                # If they are different, the unique element must be in the left half\n                right = mid\n        else:\n            # If mid is odd, check if the element at mid is the same as the element at mid - 1\n            if arr[mid] == arr[mid - 1]:\n                # If they are the same, the unique element must be in the right half\n                left = mid + 1\n            else:\n                # If they are different, the unique element must be in the left half\n                right = mid\n    \n    # The left pointer will be at the unique element\n    return arr[left]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):",
        "timestamp": "2025-09-20T14:49:30.578805",
        "response_time": "3.26",
        "context": "{\"function_name\": \"search\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 120,
        "solution": "```python\ndef max_product_tuple(list1):\n    max_product = float('-inf')\n    for tup in list1:\n        if len(tup) == 2:\n            product = abs(tup[0] * tup[1])\n            if product > max_product:\n                max_product = product\n    return max_product\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):",
        "timestamp": "2025-09-20T14:49:31.602368",
        "response_time": "1.02",
        "context": "{\"function_name\": \"max_product_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 123,
        "solution": "```python\ndef amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    amicable_sum = 0\n    for num in range(2, limit):\n        divisor_sum = sum_of_divisors(num)\n        if divisor_sum != num and sum_of_divisors(divisor_sum) == num:\n            amicable_sum += num\n\n    return amicable_sum\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):",
        "timestamp": "2025-09-20T14:49:32.996238",
        "response_time": "1.39",
        "context": "{\"function_name\": \"amicable_numbers_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 124,
        "solution": "```python\nimport cmath\n\ndef angle_complex(a, b):\n    # Create a complex number from the given real and imaginary parts\n    complex_num = complex(a, b)\n    # Calculate the angle of the complex number\n    angle = cmath.phase(complex_num)\n    return angle\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):",
        "timestamp": "2025-09-20T14:49:33.937570",
        "response_time": "0.94",
        "context": "{\"function_name\": \"angle_complex\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 125,
        "solution": "```python\ndef find_length(string):\n    max_diff = 0\n    current_diff = 0\n    zero_count = 0\n    one_count = 0\n\n    for char in string:\n        if char == '0':\n            zero_count += 1\n            current_diff += 1\n        else:\n            one_count += 1\n            current_diff -= 1\n\n        max_diff = max(max_diff, current_diff)\n\n        # Reset current_diff if it becomes negative\n        if current_diff < 0:\n            current_diff = 0\n\n    return max_diff\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):",
        "timestamp": "2025-09-20T14:49:35.607577",
        "response_time": "1.66",
        "context": "{\"function_name\": \"find_length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 126,
        "solution": "```python\ndef sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    common_divisors = set()\n    for i in range(1, gcd(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n\n    return sum(common_divisors)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):",
        "timestamp": "2025-09-20T14:49:36.909246",
        "response_time": "1.30",
        "context": "{\"function_name\": \"sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 127,
        "solution": "```python\ndef multiply_int(x, y):\n    return x * y\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):",
        "timestamp": "2025-09-20T14:49:37.300406",
        "response_time": "0.39",
        "context": "{\"function_name\": \"multiply_int\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 128,
        "solution": "```python\ndef long_words(n, str):\n    # Split the input string into a list of words\n    words = str.split()\n    \n    # Filter words that are longer than n characters\n    long_words_list = [word for word in words if len(word) > n]\n    \n    return long_words_list\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):",
        "timestamp": "2025-09-20T14:49:38.290575",
        "response_time": "0.99",
        "context": "{\"function_name\": \"long_words\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 129,
        "solution": "```python\nimport numpy as np\n\ndef magic_square_test(my_matrix):\n    # Convert the input list to a numpy array for easier manipulation\n    matrix = np.array(my_matrix)\n    \n    # Check if the matrix is square\n    if matrix.shape[0] != matrix.shape[1]:\n        return False\n    \n    # Calculate the sum of the first row to use as a reference\n    n = matrix.shape[0]\n    magic_sum = np.sum(matrix[0])\n    \n    # Check if all rows have the same sum\n    for row in matrix:\n        if np.sum(row) != magic_sum:\n            return False\n    \n    # Check if all columns have the same sum\n    for col in matrix.T:\n        if np.sum(col) != magic_sum:\n            return False\n    \n    # Check if the sums of the diagonals are the same\n    if np.sum(np.diag(matrix)) != magic_sum or np.sum(np.diag(matrix[::-1])) != magic_sum:\n        return False\n    \n    return True\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):",
        "timestamp": "2025-09-20T14:49:41.015326",
        "response_time": "2.72",
        "context": "{\"function_name\": \"magic_square_test\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 130,
        "solution": "```python\nfrom collections import Counter\n\ndef max_occurrences(nums):\n    # Count the occurrences of each item in the list\n    count = Counter(nums)\n    \n    # Find the item with the maximum frequency\n    max_item = max(count, key=count.get)\n    \n    return max_item\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):",
        "timestamp": "2025-09-20T14:49:41.982100",
        "response_time": "0.97",
        "context": "{\"function_name\": \"max_occurrences\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 131,
        "solution": "```python\n###START===\nimport string\n\ndef reverse_vowels(str1):\n    vowels = set('aeiouAEIOU')\n    str1 = list(str1)\n    left, right = 0, len(str1) - 1\n    \n    while left < right:\n        if str1[left] not in vowels:\n            left += 1\n        elif str1[right] not in vowels:\n            right -= 1\n        else:\n            str1[left], str1[right] = str1[right], str1[left]\n            left += 1\n            right -= 1\n    \n    return ''.join(str1)\n\n###END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):",
        "timestamp": "2025-09-20T14:49:43.723922",
        "response_time": "1.74",
        "context": "{\"function_name\": \"reverse_vowels\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 132,
        "solution": "```python\ndef tup_string(tup1):\n    return str(tup1)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):",
        "timestamp": "2025-09-20T14:49:44.124522",
        "response_time": "0.40",
        "context": "{\"function_name\": \"tup_string\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 133,
        "solution": "```python\ndef sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):",
        "timestamp": "2025-09-20T14:49:44.628399",
        "response_time": "0.50",
        "context": "{\"function_name\": \"sum_negativenum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 135,
        "solution": "```python\ndef hexagonal_num(n):\n    # The nth hexagonal number is given by the formula: n * (2n - 1)\n    return n * (2 * n - 1)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):",
        "timestamp": "2025-09-20T14:49:45.336018",
        "response_time": "0.70",
        "context": "{\"function_name\": \"hexagonal_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 137,
        "solution": "```python\ndef zero_count(nums):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if zero_count == 0:\n        return float('inf')  # Return infinity if there are no zeroes\n    else:\n        return zero_count / non_zero_count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):",
        "timestamp": "2025-09-20T14:49:46.606737",
        "response_time": "1.27",
        "context": "{\"function_name\": \"zero_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 138,
        "solution": "```python\n===START===\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    while n > 0:\n        if n % 2 != 0:\n            return False\n        n //= 2\n    return True\n\n===END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):",
        "timestamp": "2025-09-20T14:49:47.561656",
        "response_time": "0.95",
        "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 139,
        "solution": "```python\nimport math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):",
        "timestamp": "2025-09-20T14:49:48.063880",
        "response_time": "0.50",
        "context": "{\"function_name\": \"circle_circumference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 140,
        "solution": "```python\nfrom typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    # Initialize an empty set to store the numbers\n    result_set = set()\n    \n    # Iterate over each sublist in the test_list\n    for sublist in test_list:\n        # Add each number in the sublist to the result_set\n        result_set.update(sublist)\n    \n    return result_set\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):",
        "timestamp": "2025-09-20T14:49:49.293541",
        "response_time": "1.23",
        "context": "{\"function_name\": \"extract_singly\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 141,
        "solution": "```python\ndef pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted portion of the list\n        max_index = nums.index(max(nums[:n-i]))\n        \n        # Flip the maximum element to the front\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n        \n        # Flip the entire unsorted portion to move the maximum element to its correct position\n        nums[:n-i] = nums[:n-i][::-1]\n    \n    return nums\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):",
        "timestamp": "2025-09-20T14:49:50.883359",
        "response_time": "1.58",
        "context": "{\"function_name\": \"pancake_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 142,
        "solution": "```python\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):",
        "timestamp": "2025-09-20T14:49:51.757393",
        "response_time": "0.87",
        "context": "{\"function_name\": \"count_samepair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 143,
        "solution": "```python\ndef find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):",
        "timestamp": "2025-09-20T14:49:52.410762",
        "response_time": "0.65",
        "context": "{\"function_name\": \"find_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 145,
        "solution": "```python\ndef max_Abs_Diff(arr):\n    if not arr:\n        return 0\n    \n    min_val = arr[0]\n    max_val = arr[0]\n    \n    for num in arr:\n        min_val = min(min_val, num)\n        max_val = max(max_val, num)\n    \n    return max_val - min_val\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):",
        "timestamp": "2025-09-20T14:49:53.482650",
        "response_time": "1.07",
        "context": "{\"function_name\": \"max_Abs_Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 160,
        "solution": "```python\nfrom typing import *\nfrom collections import *\n\ndef find_solution(a, b, n):\n    # Check if a and b are coprime\n    if gcd(a, b) != 1:\n        return None\n    \n    # Use Extended Euclidean Algorithm to find x and y\n    x, y, gcd_val = extended_gcd(a, b)\n    \n    # Check if gcd_val is equal to n\n    if gcd_val != n:\n        return None\n    \n    # Scale x and y to satisfy ax + by = n\n    x = x * (n // gcd_val)\n    y = y * (n // gcd_val)\n    \n    return (x, y)\n\ndef extended_gcd(a, b):\n    if b == 0:\n        return (1, 0, a)\n    else:\n        x, y, gcd_val = extended_gcd(b, a % b)\n        return (y, x - (a // b) * y, gcd_val)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):",
        "timestamp": "2025-09-20T14:49:56.132038",
        "response_time": "2.65",
        "context": "{\"function_name\": \"find_solution\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 161,
        "solution": "```python\ndef remove_elements(list1, list2):\n    # Use a set for list2 for O(1) average time complexity for lookups\n    set2 = set(list2)\n    # Use a list comprehension to filter out elements in list1 that are in set2\n    return [element for element in list1 if element not in set2]\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):",
        "timestamp": "2025-09-20T14:49:57.241863",
        "response_time": "1.10",
        "context": "{\"function_name\": \"remove_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 162,
        "solution": "```python\ndef sum_series(n):\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):",
        "timestamp": "2025-09-20T14:49:57.881154",
        "response_time": "0.64",
        "context": "{\"function_name\": \"sum_series\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 163,
        "solution": "```python\nimport math\n\ndef area_polygon(s, l):\n    # Calculate the area of a regular polygon\n    area = (s * l**2) / (4 * math.tan(math.pi / s))\n    return area\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):",
        "timestamp": "2025-09-20T14:49:58.671839",
        "response_time": "0.79",
        "context": "{\"function_name\": \"area_polygon\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 164,
        "solution": "```python\ndef div_sum(n):\n    if n <= 0:\n        return 0\n    divisors = [1]\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    return sum(divisors)\n\ndef are_div_sums_equal(a, b):\n    return div_sum(a) == div_sum(b)\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):",
        "timestamp": "2025-09-20T14:50:00.093358",
        "response_time": "1.42",
        "context": "{\"function_name\": \"are_equivalent\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 165,
        "solution": "```python\ndef count_char_position(str1):\n    # Define the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    # Initialize a counter for matching characters\n    count = 0\n    \n    # Iterate over the string\n    for i, char in enumerate(str1):\n        # Convert character to lowercase for case insensitivity\n        char = char.lower()\n        \n        # Check if the character is in the alphabet and at the same position\n        if char in alphabet and i == alphabet.index(char):\n            count += 1\n    \n    return count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):",
        "timestamp": "2025-09-20T14:50:01.634534",
        "response_time": "1.54",
        "context": "{\"function_name\": \"count_char_position\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 166,
        "solution": "```python\ndef find_even_pair(A):\n    # Initialize a counter for even pairs\n    even_pair_count = 0\n    \n    # Iterate over all pairs in the list\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            # Check if the xor of the pair is even\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_pair_count += 1\n    \n    return even_pair_count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):",
        "timestamp": "2025-09-20T14:50:03.012939",
        "response_time": "1.38",
        "context": "{\"function_name\": \"find_even_pair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 167,
        "solution": "```python\nimport math\n\ndef next_power_of_2(n):\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):",
        "timestamp": "2025-09-20T14:50:03.658128",
        "response_time": "0.64",
        "context": "{\"function_name\": \"next_power_of_2\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 168,
        "solution": "```python\ndef frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):",
        "timestamp": "2025-09-20T14:50:04.354018",
        "response_time": "0.69",
        "context": "{\"function_name\": \"frequency\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 170,
        "solution": "```python\ndef sum_range_list(list1, m, n):\n    # Ensure m is less than or equal to n\n    if m > n:\n        m, n = n, m\n    \n    # Calculate the sum of the range\n    total_sum = sum(list1[m:n+1])\n    \n    return total_sum\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):",
        "timestamp": "2025-09-20T14:50:05.387356",
        "response_time": "1.03",
        "context": "{\"function_name\": \"sum_range_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 171,
        "solution": "```python\ndef perimeter_pentagon(a):\n    # Calculate the perimeter of a regular pentagon\n    return 5 * a\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):",
        "timestamp": "2025-09-20T14:50:05.931879",
        "response_time": "0.54",
        "context": "{\"function_name\": \"perimeter_pentagon\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 172,
        "solution": "```python\ndef count_occurance(s):\n    return s.count('std')\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):",
        "timestamp": "2025-09-20T14:50:06.341624",
        "response_time": "0.40",
        "context": "{\"function_name\": \"count_occurance\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 222,
        "solution": "```python\ndef check_type(test_tuple):\n    # Check if the tuple is empty\n    if not test_tuple:\n        return True\n    \n    # Get the type of the first element\n    first_type = type(test_tuple[0])\n    \n    # Check if all elements in the tuple have the same type\n    for element in test_tuple:\n        if type(element) != first_type:\n            return False\n    \n    return True\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):",
        "timestamp": "2025-09-20T14:50:07.589230",
        "response_time": "1.24",
        "context": "{\"function_name\": \"check_type\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 223,
        "solution": "```python\ndef is_majority(arr, n, x):\n    # Find the index of the first occurrence of x\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # Calculate the starting index of the majority element\n    start = left - 1\n    \n    # Calculate the ending index of the majority element\n    end = start + n // 2\n    \n    # Check if the majority element is within the bounds of the array\n    if end < n and arr[end] == x:\n        return True\n    else:\n        return False\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):",
        "timestamp": "2025-09-20T14:50:09.744047",
        "response_time": "2.15",
        "context": "{\"function_name\": \"binary_search\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder3b",
        "dataset_row_id": 224,
        "solution": "```python\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):",
        "timestamp": "2025-09-20T14:50:10.416552",
        "response_time": "0.67",
        "context": "{\"function_name\": \"count_Set_Bits\"}"
    }
]