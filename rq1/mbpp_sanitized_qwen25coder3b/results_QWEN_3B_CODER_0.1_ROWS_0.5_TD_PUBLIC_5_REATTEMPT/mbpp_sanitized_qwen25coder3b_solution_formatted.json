[
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 2,
    "solution": "def similar_elements(test_tup1, test_tup2):\n    # Convert both tuples to sets to remove duplicates and find intersection\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the intersection of both sets\n    similar_elements = set1.intersection(set2)\n    \n    # Convert the result back to a list\n    return list(similar_elements)",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
    "timestamp": "2025-09-20T14:24:03.805618",
    "response_time": "2.38",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 3,
    "solution": "###START===\nimport math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n\n###END===",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
    "timestamp": "2025-09-20T14:24:05.255342",
    "response_time": "1.45",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 4,
    "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    # Use heapq.nlargest to find the n largest numbers\n    largest_nums = heapq.nlargest(n, nums)\n    # Return the largest numbers in descending order\n    return largest_nums",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
    "timestamp": "2025-09-20T14:24:06.074283",
    "response_time": "0.82",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 6,
    "solution": "===START===\ndef differ_At_One_Bit_Pos(x):\n    # Check if x is a power of two\n    return x > 0 and (x & (x - 1)) == 0\n\ndef check_bit_difference(x, y):\n    # Check if x and y differ at exactly one bit position\n    return is_Power_Of_Two(x ^ y)\n\n# Example usage:\nx = 10  # Binary: 1010\ny = 14  # Binary: 1110\nprint(check_bit_difference(x, y))  # Output: True",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
    "timestamp": "2025-09-20T14:24:07.712403",
    "response_time": "1.64",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 7,
    "solution": "def find_char_long(text):\n    # Split the text into words\n    words = text.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
    "timestamp": "2025-09-20T14:24:08.568394",
    "response_time": "0.85",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 8,
    "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
    "timestamp": "2025-09-20T14:24:09.001513",
    "response_time": "0.43",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 9,
    "solution": "def find_Rotations(str):\n    if not str:\n        return 0\n    \n    n = len(str)\n    for i in range(1, n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
    "timestamp": "2025-09-20T14:24:09.948164",
    "response_time": "0.94",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 11,
    "solution": "def remove_Occ(s, ch):\n    # Find the first occurrence of the character\n    first_occurrence = s.find(ch)\n    # Find the last occurrence of the character\n    last_occurrence = s.rfind(ch)\n    \n    # If the character is not found, return the original string\n    if first_occurrence == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_occurrence] + s[first_occurrence + 1:]\n    \n    # If the character is found again, remove the last occurrence\n    if last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence + 1:]\n    \n    return s",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
    "timestamp": "2025-09-20T14:24:11.909976",
    "response_time": "1.96",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 12,
    "solution": "def sort_matrix(M):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the matrix based on the row sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, M))]\n    \n    return sorted_matrix",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
    "timestamp": "2025-09-20T14:24:13.017452",
    "response_time": "1.10",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 14,
    "solution": "def find_Volume(l, b, h):\n    # Calculate the area of the triangular base\n    base_area = 0.5 * b * h\n    \n    # Calculate the volume of the triangular prism\n    volume = base_area * l\n    \n    return volume",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
    "timestamp": "2025-09-20T14:24:13.891243",
    "response_time": "0.87",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 16,
    "solution": "import re\n\ndef text_lowercase_underscore(text):\n    # Use regular expression to find sequences of lowercase letters joined with an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    return bool(re.match(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
    "timestamp": "2025-09-20T14:24:14.695673",
    "response_time": "0.80",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 17,
    "solution": "def square_perimeter(a):\n    return 4 * a",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
    "timestamp": "2025-09-20T14:24:15.208025",
    "response_time": "0.51",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 18,
    "solution": "def remove_dirty_chars(string):\n    return list(string)",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
    "timestamp": "2025-09-20T14:24:15.599592",
    "response_time": "0.39",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 19,
    "solution": "def test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
    "timestamp": "2025-09-20T14:24:16.704023",
    "response_time": "1.10",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 20,
    "solution": "def is_woodall(x):\n    if x < 0:\n        return False\n    n = 1\n    while True:\n        woodall_number = n * (3 * n - 1) // 2\n        if woodall_number == x:\n            return True\n        if woodall_number > x:\n            return False\n        n += 1",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
    "timestamp": "2025-09-20T14:24:18.162648",
    "response_time": "1.46",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 56,
    "solution": "def check(num):\n    # Convert the number to a string to reverse it\n    num_str = str(num)\n    # Reverse the string\n    reversed_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_str)\n    # Check if the number is one less than twice its reverse\n    return num == 2 * reversed_num - 1",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
    "timestamp": "2025-09-20T14:24:19.338502",
    "response_time": "1.17",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 57,
    "solution": "def find_Max_Num(arr):\n    # Convert each digit to a string to facilitate sorting\n    arr = [str(digit) for digit in arr]\n    \n    # Sort the digits in descending order\n    arr.sort(reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    max_num = ''.join(arr)\n    \n    # Convert the result back to an integer\n    return int(max_num)\n\n# Example usage:\n# arr = [3, 30, 34, 5, 9]\n# print(find_Max_Num(arr))  # Output: 9534330",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
    "timestamp": "2025-09-20T14:24:21.016021",
    "response_time": "1.67",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 58,
    "solution": "def opposite_Signs(x, y):\n    return x * y < 0",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
    "timestamp": "2025-09-20T14:24:21.455732",
    "response_time": "0.44",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 59,
    "solution": "def is_octagonal(n):\n    # Calculate the nth octagonal number using the formula\n    # O(n) = n * (3 * n - 2)\n    octagonal_number = n * (3 * n - 2)\n    \n    # Check if the calculated number is equal to the input n\n    return octagonal_number == n",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
    "timestamp": "2025-09-20T14:24:22.571161",
    "response_time": "1.11",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 61,
    "solution": "from typing import *\nfrom collections import *\n\ndef count_Substrings(s: str) -> int:\n    n = len(s)\n    count = 0\n    prefix_sum = 0\n    prefix_sum_count = defaultdict(int)\n    prefix_sum_count[0] = 1\n\n    for i in range(n):\n        prefix_sum += int(s[i])\n        if prefix_sum - i == i:\n            count += 1\n        count += prefix_sum_count[prefix_sum - i]\n        prefix_sum_count[prefix_sum] += 1\n\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
    "timestamp": "2025-09-20T14:24:24.333916",
    "response_time": "1.76",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 62,
    "solution": "def smallest_num(xs):\n    if not xs:\n        return None  # Return None if the list is empty\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
    "timestamp": "2025-09-20T14:24:25.319472",
    "response_time": "0.98",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 63,
    "solution": "def max_difference(test_list):\n    if len(test_list) < 2:\n        return 0  # Not enough elements to form a pair\n\n    min_element = min(test_list)\n    max_element = max(test_list)\n\n    return max_element - min_element",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
    "timestamp": "2025-09-20T14:24:26.254033",
    "response_time": "0.93",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 64,
    "solution": "def subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjectmarks",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
    "timestamp": "2025-09-20T14:24:27.149735",
    "response_time": "0.89",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 65,
    "solution": "def recursive_list_sum(data_list):\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
    "timestamp": "2025-09-20T14:24:27.976189",
    "response_time": "0.82",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 66,
    "solution": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
    "timestamp": "2025-09-20T14:24:28.590416",
    "response_time": "0.61",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 67,
    "solution": "from math import factorial\n\ndef bell_number(n):\n    # Initialize the Bell triangle\n    bell_triangle = [[0] * (n + 1) for _ in range(n + 1)]\n    bell_triangle[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n + 1):\n        bell_triangle[i][0] = bell_triangle[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell_triangle[i][j] = bell_triangle[i - 1][j - 1] + bell_triangle[i][j - 1]\n    \n    # The number of ways to partition a set of n elements is the nth Bell number\n    return bell_triangle[n][0]",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
    "timestamp": "2025-09-20T14:24:30.681065",
    "response_time": "2.09",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 68,
    "solution": "def is_Monotonic(A):\n    if not A:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
    "timestamp": "2025-09-20T14:24:31.780815",
    "response_time": "1.10",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 69,
    "solution": "def is_sublist(l, s):\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
    "timestamp": "2025-09-20T14:24:32.751573",
    "response_time": "0.97",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 70,
    "solution": "def get_equal(Input):\n    # Check if the input is a list of tuples\n    if not isinstance(Input, list) or not all(isinstance(item, tuple) for item in Input):\n        return False\n    \n    # Get the length of the first tuple\n    first_tuple_length = len(Input[0])\n    \n    # Check if all tuples have the same length\n    for tup in Input:\n        if len(tup) != first_tuple_length:\n            return False\n    \n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
    "timestamp": "2025-09-20T14:24:34.097918",
    "response_time": "1.34",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 71,
    "solution": "import math\n\ndef comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n        sorted = True\n\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
    "timestamp": "2025-09-20T14:24:35.707049",
    "response_time": "1.61",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 72,
    "solution": "def dif_Square(n):\n    if n < 0:\n        return False\n    for i in range(int(n**0.5) + 1):\n        if (n - i**2) >= 0 and int((n - i**2)**0.5)**2 == n - i**2:\n            return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
    "timestamp": "2025-09-20T14:24:36.859756",
    "response_time": "1.15",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 74,
    "solution": "def is_samepatterns(colors, patterns):\n    # Check if the number of colors matches the number of patterns\n    if len(colors) != len(patterns):\n        return False\n    \n    # Iterate over each color and pattern pair\n    for color, pattern in zip(colors, patterns):\n        # Check if the color matches the pattern\n        if color != pattern:\n            return False\n    \n    # If all colors match their respective patterns, return True\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
    "timestamp": "2025-09-20T14:24:38.180232",
    "response_time": "1.32",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 75,
    "solution": "def find_tuples(test_list, K):\n    # Use list comprehension to filter tuples where all elements are divisible by K\n    result = [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
    "timestamp": "2025-09-20T14:24:38.981675",
    "response_time": "0.80",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 77,
    "solution": "def is_Diff(n):\n    # Check if the number is divisible by 11\n    return n % 11 == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
    "timestamp": "2025-09-20T14:24:39.663245",
    "response_time": "0.68",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 79,
    "solution": "def word_len(s):\n    return len(s) % 2 != 0",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
    "timestamp": "2025-09-20T14:24:40.077269",
    "response_time": "0.41",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 80,
    "solution": "def tetrahedral_number(n):\n    # Calculate the nth tetrahedral number using the formula: n * (n + 1) * (n + 2) / 6\n    return n * (n + 1) * (n + 2) // 6",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
    "timestamp": "2025-09-20T14:24:40.970492",
    "response_time": "0.89",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 82,
    "solution": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
    "timestamp": "2025-09-20T14:24:41.607810",
    "response_time": "0.63",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 83,
    "solution": "def get_Char(strr):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in strr)\n    \n    # Find the character corresponding to the sum modulo 26\n    result_char = chr((ascii_sum % 26) + ord('A'))\n    \n    return result_char",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
    "timestamp": "2025-09-20T14:24:42.832036",
    "response_time": "1.22",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 84,
    "solution": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    \n    # Initialize the sequence with the first two numbers\n    sequence = [1, 1]\n    \n    # Calculate the sequence up to the nth number\n    for i in range(3, n + 1):\n        next_value = sequence[sequence[i - 1] - 1] + sequence[i - sequence[i - 1]]\n        sequence.append(next_value)\n    \n    return sequence[n - 1]",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
    "timestamp": "2025-09-20T14:24:44.344927",
    "response_time": "1.51",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 85,
    "solution": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
    "timestamp": "2025-09-20T14:24:44.830604",
    "response_time": "0.48",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 86,
    "solution": "def centered_hexagonal_number(n):\n    # The nth centered hexagonal number is given by the formula: 3n(n-1) + 1\n    return 3 * n * (n - 1) + 1",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
    "timestamp": "2025-09-20T14:24:45.695276",
    "response_time": "0.86",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder3b",
    "dataset_row_id": 87,
    "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Create a new dictionary to store the merged result\n    merged_dict = {}\n    \n    # Iterate over the first dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    \n    # Iterate over the second dictionary\n    for key, value in dict2.items():\n        # If the key already exists in the merged dictionary, update its value\n        if key in merged_dict:\n            merged_dict[key] = value\n        else:\n            # Otherwise, add the key-value pair to the merged dictionary\n            merged_dict[key] = value\n    \n    # Iterate over the third dictionary\n    for key, value in dict3.items():\n        # If the key already exists in the merged dictionary, update its value\n        if key in merged_dict:\n            merged_dict[key] = value\n        else:\n            # Otherwise, add the key-value pair to the merged dictionary\n            merged_dict[key] = value\n    \n    # Return the merged dictionary\n    return merged_dict",
    "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
    "timestamp": "2025-09-20T14:24:48.362819",
    "response_time": "2.66",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  }
]