{
  "Qwen/Qwen2.5-Coder-3B-Instruct": [
    {
      "task_id": 2,
      "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def similar_elements(test_tup1, test_tup2):\n    # Convert both lists to sets to remove duplicates and allow for set operations\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the intersection of both sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set back to a list and return\n    return list(common_elements)",
      "test_content": "from llm_output import similar_elements\n\ndef check(candidate):\n    assert set(candidate((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n    assert set(candidate((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))\n    assert set(candidate((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))\n\ncheck(similar_elements)",
      "context": "{\"function_name\": \"similar_elements\"}",
      "attempt_num": 1
    },
    {
      "task_id": 3,
      "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom math import sqrt\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n\n###END===",
      "test_content": "from llm_output import is_not_prime\n\ndef check(candidate):\n    assert candidate(2) == False\n    assert candidate(10) == True\n    assert candidate(35) == True\n    assert candidate(37) == False\n\ncheck(is_not_prime)",
      "context": "{\"function_name\": \"is_not_prime\"}",
      "attempt_num": 1
    },
    {
      "task_id": 4,
      "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from heapq import nlargest\n\ndef heap_queue_largest(nums, n):\n    return nlargest(n, nums)",
      "test_content": "from llm_output import heap_queue_largest\n\ndef check(candidate):\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n\ncheck(heap_queue_largest)",
      "context": "{\"function_name\": \"heap_queue_largest\"}",
      "attempt_num": 1
    },
    {
      "task_id": 7,
      "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nimport re\n\ndef find_char_long(text):\n    # Use regular expression to find all words with at least 4 characters\n    return re.findall(r'\\b\\w{4,}\\b', text)\n\n###END===",
      "test_content": "from llm_output import find_char_long\n\ndef check(candidate):\n    assert set(candidate('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n    assert set(candidate('Jing Eco and Tech')) == set(['Jing', 'Tech'])\n    assert set(candidate('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])\n\ncheck(find_char_long)",
      "context": "{\"function_name\": \"find_char_long\"}",
      "attempt_num": 1
    },
    {
      "task_id": 8,
      "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def square_nums(nums):\n    return [x**2 for x in nums]",
      "test_content": "from llm_output import square_nums\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10,20,30])==([100,400,900])\n    assert candidate([12,15])==([144,225])\n\ncheck(square_nums)",
      "context": "{\"function_name\": \"square_nums\"}",
      "attempt_num": 1
    },
    {
      "task_id": 9,
      "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def find_Rotations(str):\n    if not str:\n        return 0\n\n    n = len(str)\n    for i in range(1, n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n",
      "test_content": "from llm_output import find_Rotations\n\ndef check(candidate):\n    assert candidate(\"aaaa\") == 1\n    assert candidate(\"ab\") == 2\n    assert candidate(\"abc\") == 3\n\ncheck(find_Rotations)",
      "context": "{\"function_name\": \"find_Rotations\"}",
      "attempt_num": 1
    },
    {
      "task_id": 12,
      "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the matrix based on the row sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, M))]\n    \n    return sorted_matrix",
      "test_content": "from llm_output import sort_matrix\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert candidate([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n\ncheck(sort_matrix)",
      "context": "{\"function_name\": \"sort_matrix\"}",
      "attempt_num": 1
    },
    {
      "task_id": 14,
      "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom math import pi\n\ndef find_Volume(l, b, h):\n    # Calculate the area of the triangular base\n    base_area = 0.5 * b * h\n    \n    # Calculate the volume of the triangular prism\n    volume = base_area * l\n    \n    return volume\n\n###END===",
      "test_content": "from llm_output import find_Volume\n\ndef check(candidate):\n    assert candidate(10,8,6) == 240\n    assert candidate(3,2,2) == 6\n    assert candidate(1,2,1) == 1\n\ncheck(find_Volume)",
      "context": "{\"function_name\": \"find_Volume\"}",
      "attempt_num": 1
    },
    {
      "task_id": 16,
      "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "import re\n\ndef text_lowercase_underscore(text):\n    # Use regular expression to find sequences of lowercase letters joined with an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    return bool(re.match(pattern, text))",
      "test_content": "from llm_output import text_lowercase_underscore\n\ndef check(candidate):\n    assert candidate(\"aab_cbbbc\")==(True)\n    assert candidate(\"aab_Abbbc\")==(False)\n    assert candidate(\"Aaab_abbbc\")==(False)\n\ncheck(text_lowercase_underscore)",
      "context": "{\"function_name\": \"text_lowercase_underscore\"}",
      "attempt_num": 1
    },
    {
      "task_id": 17,
      "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def square_perimeter(a):\n    return 4 * a",
      "test_content": "from llm_output import square_perimeter\n\ndef check(candidate):\n    assert candidate(10)==40\n    assert candidate(5)==20\n    assert candidate(4)==16\n\ncheck(square_perimeter)",
      "context": "{\"function_name\": \"square_perimeter\"}",
      "attempt_num": 1
    },
    {
      "task_id": 19,
      "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n###END===",
      "test_content": "from llm_output import test_duplicate\n\ndef check(candidate):\n    assert candidate(([1,2,3,4,5]))==False\n    assert candidate(([1,2,3,4, 4]))==True\n    assert candidate([1,1,2,2,3,3,4,4,5])==True\n\ncheck(test_duplicate)",
      "context": "{\"function_name\": \"test_duplicate\"}",
      "attempt_num": 1
    },
    {
      "task_id": 57,
      "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom typing import *\nfrom collections import *\n\ndef find_Max_Num(arr) :\n    # Convert each digit to a string and sort them in descending order\n    arr = sorted(map(str, arr), reverse=True)\n    \n    # Join the sorted strings to form the largest number\n    max_num = ''.join(arr)\n    \n    # Convert the result back to an integer\n    return int(max_num)\n\n# Example usage:\n# print(find_Max_Num([3, 30, 34, 5, 9]))  # Output: 9534330\n###END===",
      "test_content": "from llm_output import find_Max_Num\n\ndef check(candidate):\n    assert candidate([1,2,3]) == 321\n    assert candidate([4,5,6,1]) == 6541\n    assert candidate([1,2,3,9]) == 9321\n\ncheck(find_Max_Num)",
      "context": "{\"function_name\": \"find_Max_Num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 58,
      "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\ndef opposite_Signs(x, y):\n    return x * y < 0\n\n###END===",
      "test_content": "from llm_output import opposite_Signs\n\ndef check(candidate):\n    assert candidate(1,-2) == True\n    assert candidate(3,2) == False\n    assert candidate(-10,-10) == False\n    assert candidate(-2,2) == True\n\ncheck(opposite_Signs)",
      "context": "{\"function_name\": \"opposite_Signs\"}",
      "attempt_num": 1
    },
    {
      "task_id": 62,
      "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def smallest_num(xs):\n    if not xs:\n        raise ValueError(\"List is empty\")\n    return min(xs)",
      "test_content": "from llm_output import smallest_num\n\ndef check(candidate):\n    assert candidate([10, 20, 1, 45, 99]) == 1\n    assert candidate([1, 2, 3]) == 1\n    assert candidate([45, 46, 50, 60]) == 45\n\ncheck(smallest_num)",
      "context": "{\"function_name\": \"smallest_num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 63,
      "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    # Initialize the maximum difference to a very small number\n    max_diff = float('-inf')\n    \n    # Iterate through each pair in the list\n    for pair in test_list:\n        # Calculate the difference between the two elements in the pair\n        diff = abs(pair[0] - pair[1])\n        \n        # Update the maximum difference if the current difference is larger\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff",
      "test_content": "from llm_output import max_difference\n\ndef check(candidate):\n    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    assert candidate([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n    assert candidate([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n\ncheck(max_difference)",
      "context": "{\"function_name\": \"max_difference\"}",
      "attempt_num": 1
    },
    {
      "task_id": 64,
      "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjectmarks",
      "test_content": "from llm_output import subject_marks\n\ndef check(candidate):\n    assert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert candidate([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\n    assert candidate([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\n\ncheck(subject_marks)",
      "context": "{\"function_name\": \"subject_marks\"}",
      "attempt_num": 1
    },
    {
      "task_id": 65,
      "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def recursive_list_sum(data_list):\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total",
      "test_content": "from llm_output import recursive_list_sum\n\ndef check(candidate):\n    assert candidate(([1, 2, [3,4],[5,6]]))==21\n    assert candidate(([7, 10, [15,14],[19,41]]))==106\n    assert candidate(([10, 20, [30,40],[50,60]]))==210\n\ncheck(recursive_list_sum)",
      "context": "{\"function_name\": \"recursive_list_sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 66,
      "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def pos_count(lst):\n    return sum(1 for num in lst if num > 0)",
      "test_content": "from llm_output import pos_count\n\ndef check(candidate):\n    assert candidate([1,-2,3,-4]) == 2\n    assert candidate([3,4,5,-1]) == 3\n    assert candidate([1,2,3,4]) == 4\n\ncheck(pos_count)",
      "context": "{\"function_name\": \"pos_count\"}",
      "attempt_num": 1
    },
    {
      "task_id": 67,
      "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from math import factorial\n\ndef bell_number(n):\n    # Initialize a list to store Bell numbers\n    bell = [0] * (n + 1)\n    bell[0] = 1  # Base case: B(0) = 1\n\n    # Compute Bell numbers using the recurrence relation\n    for i in range(1, n + 1):\n        for j in range(i):\n            bell[i] += bell[j] * factorial(i - 1) // factorial(j) // factorial(i - j - 1)\n\n    return bell[n]",
      "test_content": "from llm_output import bell_number\n\ndef check(candidate):\n    assert candidate(2)==2\n    assert candidate(10)==115975\n    assert candidate(56)==6775685320645824322581483068371419745979053216268760300\n\ncheck(bell_number)",
      "context": "{\"function_name\": \"bell_number\"}",
      "attempt_num": 1
    },
    {
      "task_id": 68,
      "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    if not A:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n\n###END===",
      "test_content": "from llm_output import is_Monotonic\n\ndef check(candidate):\n    assert candidate([6, 5, 4, 4]) == True\n    assert candidate([1, 2, 2, 3]) == True\n    assert candidate([1, 3, 2]) == False\n\ncheck(is_Monotonic)",
      "context": "{\"function_name\": \"is_Monotonic\"}",
      "attempt_num": 1
    },
    {
      "task_id": 69,
      "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def is_sublist(l, s):\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
      "test_content": "from llm_output import is_sublist\n\ndef check(candidate):\n    assert candidate([2,4,3,5,7],[3,7])==False\n    assert candidate([2,4,3,5,7],[4,3])==True\n    assert candidate([2,4,3,5,7],[1,6])==False\n\ncheck(is_sublist)",
      "context": "{\"function_name\": \"is_sublist\"}",
      "attempt_num": 1
    },
    {
      "task_id": 70,
      "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def get_equal(Input):\n    # Check if the input is a list of tuples\n    if not isinstance(Input, list) or not all(isinstance(item, tuple) for item in Input):\n        raise ValueError(\"Input must be a list of tuples\")\n    \n    # Get the length of the first tuple\n    first_tuple_length = len(Input[0])\n    \n    # Check if all tuples have the same length\n    for tup in Input:\n        if len(tup) != first_tuple_length:\n            return False\n    \n    return True",
      "test_content": "from llm_output import get_equal\n\ndef check(candidate):\n    assert candidate([(11, 22, 33), (44, 55, 66)]) == True\n    assert candidate([(1, 2, 3), (4, 5, 6, 7)]) == False\n    assert candidate([(1, 2), (3, 4)]) == True\n\ncheck(get_equal)",
      "context": "{\"function_name\": \"get_equal\"}",
      "attempt_num": 1
    },
    {
      "task_id": 75,
      "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int]], K: int) -> List[Tuple[int]]:\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each tuple in the test_list\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible, add the tuple to the result list\n            result.append(tup)\n    \n    # Return the list of tuples that meet the condition\n    return result",
      "test_content": "from llm_output import find_tuples\n\ndef check(candidate):\n    assert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n    assert candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\n    assert candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]\n\ncheck(find_tuples)",
      "context": "{\"function_name\": \"find_tuples\"}",
      "attempt_num": 1
    },
    {
      "task_id": 77,
      "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\ndef is_Diff(n):\n    # Check if the number is divisible by 11\n    return n % 11 == 0\n\n###END===",
      "test_content": "from llm_output import is_Diff\n\ndef check(candidate):\n    assert candidate (12345) == False\n    assert candidate(1212112) == True\n    assert candidate(1212) == False\n\ncheck(is_Diff)",
      "context": "{\"function_name\": \"is_Diff\"}",
      "attempt_num": 1
    },
    {
      "task_id": 79,
      "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def word_len(s):\n    return len(s) % 2 != 0",
      "test_content": "from llm_output import word_len\n\ndef check(candidate):\n    assert candidate(\"Hadoop\") == False\n    assert candidate(\"great\") == True\n    assert candidate(\"structure\") == True\n\ncheck(word_len)",
      "context": "{\"function_name\": \"word_len\"}",
      "attempt_num": 1
    },
    {
      "task_id": 80,
      "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def tetrahedral_number(n):\n    # Calculate the nth tetrahedral number using the formula\n    return n * (n + 1) * (n + 2) // 6",
      "test_content": "from llm_output import tetrahedral_number\n\ndef check(candidate):\n    assert candidate(5) == 35\n    assert candidate(6) == 56\n    assert candidate(7) == 84\n\ncheck(tetrahedral_number)",
      "context": "{\"function_name\": \"tetrahedral_number\"}",
      "attempt_num": 1
    },
    {
      "task_id": 82,
      "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)",
      "test_content": "from llm_output import volume_sphere\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(10), 4188.790204786391, rel_tol=0.001)\n    assert math.isclose(candidate(25), 65449.84694978735, rel_tol=0.001)\n    assert math.isclose(candidate(20), 33510.32163829113, rel_tol=0.001)\n\ncheck(volume_sphere)",
      "context": "{\"function_name\": \"volume_sphere\"}",
      "attempt_num": 1
    },
    {
      "task_id": 85,
      "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2",
      "test_content": "from llm_output import surfacearea_sphere\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(10), 1256.6370614359173, rel_tol=0.001)\n    assert math.isclose(candidate(15), 2827.4333882308138, rel_tol=0.001)\n    assert math.isclose(candidate(20), 5026.548245743669, rel_tol=0.001)\n\ncheck(surfacearea_sphere)",
      "context": "{\"function_name\": \"surfacearea_sphere\"}",
      "attempt_num": 1
    },
    {
      "task_id": 86,
      "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def centered_hexagonal_number(n):\n    # Calculate the nth centered hexagonal number using the formula\n    return 3 * n * (n - 1) + 1",
      "test_content": "from llm_output import centered_hexagonal_number\n\ndef check(candidate):\n    assert candidate(10) == 271\n    assert candidate(2) == 7\n    assert candidate(9) == 217\n\ncheck(centered_hexagonal_number)",
      "context": "{\"function_name\": \"centered_hexagonal_number\"}",
      "attempt_num": 1
    },
    {
      "task_id": 88,
      "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from collections import Counter\n\ndef freq_count(list1):\n    return Counter(list1)",
      "test_content": "from llm_output import freq_count\n\ndef check(candidate):\n    assert candidate([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n    assert candidate([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\n    assert candidate([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})\n\ncheck(freq_count)",
      "context": "{\"function_name\": \"freq_count\"}",
      "attempt_num": 1
    },
    {
      "task_id": 89,
      "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def closest_num(N):\n    # Start of the code\n    if N <= 1:\n        return None  # No smaller number than 1\n    else:\n        return N - 1  # The closest smaller number to N is N - 1\n    # End of the code",
      "test_content": "from llm_output import closest_num\n\ndef check(candidate):\n    assert candidate(11) == 10\n    assert candidate(7) == 6\n    assert candidate(12) == 11\n\ncheck(closest_num)",
      "context": "{\"function_name\": \"closest_num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 90,
      "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def len_log(list1):\n    if not list1:\n        return 0\n    longest_word = max(list1, key=len)\n    return len(longest_word)",
      "test_content": "from llm_output import len_log\n\ndef check(candidate):\n    assert candidate([\"python\",\"PHP\",\"bigdata\"]) == 7\n    assert candidate([\"a\",\"ab\",\"abc\"]) == 3\n    assert candidate([\"small\",\"big\",\"tall\"]) == 5\n\ncheck(len_log)",
      "context": "{\"function_name\": \"len_log\"}",
      "attempt_num": 1
    },
    {
      "task_id": 93,
      "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result",
      "test_content": "from llm_output import power\n\ndef check(candidate):\n    assert candidate(3,4) == 81\n    assert candidate(2,3) == 8\n    assert candidate(5,5) == 3125\n\ncheck(power)",
      "context": "{\"function_name\": \"power\"}",
      "attempt_num": 1
    },
    {
      "task_id": 95,
      "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
      "test_content": "from llm_output import Find_Min_Length\n\ndef check(candidate):\n    assert candidate([[1],[1,2]]) == 1\n    assert candidate([[1,2],[1,2,3],[1,2,3,4]]) == 2\n    assert candidate([[3,3,3],[4,4,4,4]]) == 3\n\ncheck(Find_Min_Length)",
      "context": "{\"function_name\": \"Find_Min_Length\"}",
      "attempt_num": 1
    },
    {
      "task_id": 96,
      "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
      "test_content": "from llm_output import divisor\n\ndef check(candidate):\n    assert candidate(15) == 4\n    assert candidate(12) == 6\n    assert candidate(9) == 3\n\ncheck(divisor)",
      "context": "{\"function_name\": \"divisor\"}",
      "attempt_num": 1
    },
    {
      "task_id": 97,
      "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from collections import defaultdict\n\ndef frequency_lists(list1):\n    frequency_dict = defaultdict(int)\n    for sublist in list1:\n        for element in sublist:\n            frequency_dict[element] += 1\n    return dict(frequency_dict)",
      "test_content": "from llm_output import frequency_lists\n\ndef check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    assert candidate([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n    assert candidate([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n\ncheck(frequency_lists)",
      "context": "{\"function_name\": \"frequency_lists\"}",
      "attempt_num": 1
    },
    {
      "task_id": 98,
      "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def multiply_num(numbers):\n    if not numbers:\n        return 0  # Return 0 if the list is empty to avoid division by zero\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
      "test_content": "from llm_output import multiply_num\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n    assert math.isclose(candidate((-10,-20,-30)), -2000.0, rel_tol=0.001)\n    assert math.isclose(candidate((19,15,18)), 1710.0, rel_tol=0.001)\n\ncheck(multiply_num)",
      "context": "{\"function_name\": \"multiply_num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 99,
      "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary",
      "test_content": "from llm_output import decimal_to_binary\n\ndef check(candidate):\n    assert candidate(8) == '1000'\n    assert candidate(18) == '10010'\n    assert candidate(7) == '111'\n\ncheck(decimal_to_binary)",
      "context": "{\"function_name\": \"decimal_to_binary\"}",
      "attempt_num": 1
    },
    {
      "task_id": 100,
      "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom typing import *\nfrom collections import *\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    if num < 10:\n        return num + 1\n\n    # Increment the number until a palindrome is found\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num\n\n###END===",
      "test_content": "from llm_output import next_smallest_palindrome\n\ndef check(candidate):\n    assert candidate(99)==101\n    assert candidate(1221)==1331\n    assert candidate(120)==121\n\ncheck(next_smallest_palindrome)",
      "context": "{\"function_name\": \"next_smallest_palindrome\"}",
      "attempt_num": 1
    },
    {
      "task_id": 101,
      "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of bounds\")\n    return arr[k - 1]",
      "test_content": "from llm_output import kth_element\n\ndef check(candidate):\n    assert candidate([12,3,5,7,19], 2) == 3\n    assert candidate([17,24,8,23], 3) == 8\n    assert candidate([16,21,25,36,4], 4) == 36\n\ncheck(kth_element)",
      "context": "{\"function_name\": \"kth_element\"}",
      "attempt_num": 1
    },
    {
      "task_id": 102,
      "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def snake_to_camel(word):\n    # Split the word by underscores\n    parts = word.split('_')\n    # Capitalize the first letter of each part and join them together\n    return ''.join(part.capitalize() for part in parts)",
      "test_content": "from llm_output import snake_to_camel\n\ndef check(candidate):\n    assert candidate('python_program')=='PythonProgram'\n    assert candidate('python_language')==('PythonLanguage')\n    assert candidate('programming_language')==('ProgrammingLanguage')\n\ncheck(snake_to_camel)",
      "context": "{\"function_name\": \"snake_to_camel\"}",
      "attempt_num": 1
    },
    {
      "task_id": 104,
      "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    # Sort each sublist in the input list\n    sorted_list = [sorted(sublist) for sublist in input_list]\n    return sorted_list",
      "test_content": "from llm_output import sort_sublists\n\ndef check(candidate):\n    assert candidate(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[[\"\"\"green\"\"\", \"\"\"orange\"\"\"], [\"\"\"black\"\"\", \"\"\"white\"\"\"], [\"\"\"black\"\"\", \"\"\"orange\"\"\", \"\"\"white\"\"\"]]\n    assert candidate(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[\"\"\" red \"\"\", \"\"\"green\"\"\"], [\"\"\" black\"\"\", \"\"\"blue \"\"\"], [\"\"\" orange\"\"\", \"\"\"brown\"\"\"]]\n    assert candidate(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[[\"\"\"gold\"\"\", \"\"\"zilver\"\"\"],[\"\"\"aluminium\"\"\", \"\"\"magnesium\"\"\"], [\"\"\"bronze\"\"\", \"\"\"steel\"\"\"]]\n\ncheck(sort_sublists)",
      "context": "{\"function_name\": \"sort_sublists\"}",
      "attempt_num": 1
    },
    {
      "task_id": 105,
      "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def count(lst):\n    return sum(1 for item in lst if item)",
      "test_content": "from llm_output import count\n\ndef check(candidate):\n    assert candidate([True,False,True]) == 2\n    assert candidate([False,False]) == 0\n    assert candidate([True,True,True]) == 3\n\ncheck(count)",
      "context": "{\"function_name\": \"count\"}",
      "attempt_num": 1
    },
    {
      "task_id": 106,
      "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def add_lists(test_list, test_tup):\n    # Convert the list to a tuple and concatenate with the given tuple\n    result = test_tup + tuple(test_list)\n    return result",
      "test_content": "from llm_output import add_lists\n\ndef check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert candidate([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n    assert candidate([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n\ncheck(add_lists)",
      "context": "{\"function_name\": \"add_lists\"}",
      "attempt_num": 1
    },
    {
      "task_id": 108,
      "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    # Merge all lists into one\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    return merged_list",
      "test_content": "from llm_output import merge_sorted_list\n\ndef check(candidate):\n    assert candidate([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n\ncheck(merge_sorted_list)",
      "context": "{\"function_name\": \"merge_sorted_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 111,
      "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    # Flatten the nested list\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    \n    # Use a set to find unique elements\n    unique_elements = set(flat_list)\n    \n    # Find common elements by comparing with the original flat list\n    common_elements = [item for item in flat_list if flat_list.count(item) == len(nestedlist)]\n    \n    return common_elements",
      "test_content": "from llm_output import common_in_nested_lists\n\ndef check(candidate):\n    assert set(candidate([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n    assert set(candidate([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])\n    assert set(candidate([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])\n\ncheck(common_in_nested_lists)",
      "context": "{\"function_name\": \"common_in_nested_lists\"}",
      "attempt_num": 1
    },
    {
      "task_id": 113,
      "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nimport re\n\ndef check_integer(text):\n    # Use regular expression to check if the text is a valid integer\n    return bool(re.match(r'^-?\\d+$', text))\n\n###END===",
      "test_content": "from llm_output import check_integer\n\ndef check(candidate):\n    assert candidate(\"python\")==False\n    assert candidate(\"1\")==True\n    assert candidate(\"12345\")==True\n\ncheck(check_integer)",
      "context": "{\"function_name\": \"check_integer\"}",
      "attempt_num": 1
    },
    {
      "task_id": 115,
      "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def empty_dit(list1):\n    return all(not d for d in list1)",
      "test_content": "from llm_output import empty_dit\n\ndef check(candidate):\n    assert candidate([{},{},{}])==True\n    assert candidate([{1,2},{},{}])==False\n    assert candidate({})==True\n\ncheck(empty_dit)",
      "context": "{\"function_name\": \"empty_dit\"}",
      "attempt_num": 1
    },
    {
      "task_id": 116,
      "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def tuple_to_int(nums):\n    # Convert each number in the tuple to a string, join them together, and convert back to an integer\n    return int(''.join(map(str, nums)))",
      "test_content": "from llm_output import tuple_to_int\n\ndef check(candidate):\n    assert candidate((1,2,3))==123\n    assert candidate((4,5,6))==456\n    assert candidate((5,6,7))==567\n\ncheck(tuple_to_int)",
      "context": "{\"function_name\": \"tuple_to_int\"}",
      "attempt_num": 1
    },
    {
      "task_id": 118,
      "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def string_to_list(string):\n    return string.split()",
      "test_content": "from llm_output import string_to_list\n\ndef check(candidate):\n    assert candidate(\"python programming\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\"]\n    assert candidate(\"lists tuples strings\")==[\"\"\"lists\"\"\",\"\"\"tuples\"\"\",\"\"\"strings\"\"\"]\n    assert candidate(\"write a program\")==[\"\"\"write\"\"\",\"\"\"a\"\"\",\"\"\"program\"\"\"]\n\ncheck(string_to_list)",
      "context": "{\"function_name\": \"string_to_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 119,
      "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        # If mid is even, check if the element at mid is the only one\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        # If mid is odd, check if the element at mid is the only one\n        else:\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid\n    \n    return arr[left]",
      "test_content": "from llm_output import search\n\ndef check(candidate):\n    assert candidate([1,1,2,2,3]) == 3\n    assert candidate([1,1,3,3,4,4,5,5,7,7,8]) == 8\n    assert candidate([1,2,2,3,3,4,4]) == 1\n\ncheck(search)",
      "context": "{\"function_name\": \"search\"}",
      "attempt_num": 1
    },
    {
      "task_id": 120,
      "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = float('-inf')\n    for pair in list1:\n        product = abs(pair[0] * pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product",
      "test_content": "from llm_output import max_product_tuple\n\ndef check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n    assert candidate([(10,20), (15,2), (5,10)] )==200\n    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==484\n\ncheck(max_product_tuple)",
      "context": "{\"function_name\": \"max_product_tuple\"}",
      "attempt_num": 1
    },
    {
      "task_id": 123,
      "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import *\nfrom collections import *\n\ndef amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    amicable_pairs = set()\n    for i in range(2, limit):\n        sum_i = sum_of_divisors(i)\n        if sum_i > i and sum_of_divisors(sum_i) == i:\n            amicable_pairs.add(i)\n            amicable_pairs.add(sum_i)\n\n    return sum(amicable_pairs)",
      "test_content": "from llm_output import amicable_numbers_sum\n\ndef check(candidate):\n    assert candidate(999)==504\n    assert candidate(9999)==31626\n    assert candidate(99)==0\n\ncheck(amicable_numbers_sum)",
      "context": "{\"function_name\": \"amicable_numbers_sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 125,
      "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import *\nfrom collections import *\n\ndef find_length(string):\n    max_diff = 0\n    current_diff = 0\n    zero_count = 0\n    one_count = 0\n\n    for char in string:\n        if char == '0':\n            zero_count += 1\n            current_diff += 1\n        else:\n            one_count += 1\n            current_diff -= 1\n\n        max_diff = max(max_diff, current_diff)\n\n        # Reset current_diff if it becomes negative\n        if current_diff < 0:\n            current_diff = 0\n\n    return max_diff",
      "test_content": "from llm_output import find_length\n\ndef check(candidate):\n    assert candidate(\"11000010001\") == 6\n    assert candidate(\"10111\") == 1\n    assert candidate(\"11011101100101\") == 2\n\ncheck(find_length)",
      "context": "{\"function_name\": \"find_length\"}",
      "attempt_num": 1
    },
    {
      "task_id": 126,
      "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom math import gcd\n\ndef sum(a, b):\n    # Calculate the greatest common divisor of a and b\n    common_divisor = gcd(a, b)\n    \n    # Initialize the sum of common divisors\n    sum_common_divisors = 0\n    \n    # Iterate through all numbers from 1 to the common divisor\n    for i in range(1, common_divisor + 1):\n        # Check if i is a divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            # Add i to the sum of common divisors\n            sum_common_divisors += i\n    \n    return sum_common_divisors\n\n###END===",
      "test_content": "from llm_output import sum\n\ndef check(candidate):\n    assert candidate(10,15) == 6\n    assert candidate(100,150) == 93\n    assert candidate(4,6) == 3\n\ncheck(sum)",
      "context": "{\"function_name\": \"sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 127,
      "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def multiply_int(x, y):\n    return x * y",
      "test_content": "from llm_output import multiply_int\n\ndef check(candidate):\n    assert candidate(10,20)==200\n    assert candidate(5,10)==50\n    assert candidate(4,8)==32\n\ncheck(multiply_int)",
      "context": "{\"function_name\": \"multiply_int\"}",
      "attempt_num": 1
    },
    {
      "task_id": 128,
      "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def long_words(n, str):\n    # Split the input string into a list of words\n    words = str.split()\n    \n    # Filter the list to include only words longer than n characters\n    long_words_list = [word for word in words if len(word) > n]\n    \n    return long_words_list",
      "test_content": "from llm_output import long_words\n\ndef check(candidate):\n    assert candidate(3,\"python is a programming language\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\",\"\"\"language\"\"\"]\n    assert candidate(2,\"writing a program\")==[\"\"\"writing\"\"\",\"\"\"program\"\"\"]\n    assert candidate(5,\"sorting list\")==[\"\"\"sorting\"\"\"]\n\ncheck(long_words)",
      "context": "{\"function_name\": \"long_words\"}",
      "attempt_num": 1
    },
    {
      "task_id": 130,
      "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from collections import Counter\n\ndef max_occurrences(nums):\n    # Count the occurrences of each item in the list\n    count = Counter(nums)\n    \n    # Find the item with the maximum frequency\n    max_item = max(count, key=count.get)\n    \n    return max_item",
      "test_content": "from llm_output import max_occurrences\n\ndef check(candidate):\n    assert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n    assert candidate([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\n    assert candidate([10,20,20,30,40,90,80,50,30,20,50,10])==20\n\ncheck(max_occurrences)",
      "context": "{\"function_name\": \"max_occurrences\"}",
      "attempt_num": 1
    },
    {
      "task_id": 131,
      "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nimport string\n\ndef reverse_vowels(str1):\n    vowels = set('aeiouAEIOU')\n    str1 = list(str1)\n    left, right = 0, len(str1) - 1\n    \n    while left < right:\n        if str1[left] not in vowels:\n            left += 1\n        elif str1[right] not in vowels:\n            right -= 1\n        else:\n            str1[left], str1[right] = str1[right], str1[left]\n            left += 1\n            right -= 1\n    \n    return ''.join(str1)\n\n###END===",
      "test_content": "from llm_output import reverse_vowels\n\ndef check(candidate):\n    assert candidate(\"Python\") == \"Python\"\n    assert candidate(\"USA\") == \"ASU\"\n    assert candidate(\"ab\") == \"ab\"\n\ncheck(reverse_vowels)",
      "context": "{\"function_name\": \"reverse_vowels\"}",
      "attempt_num": 1
    },
    {
      "task_id": 133,
      "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)",
      "test_content": "from llm_output import sum_negativenum\n\ndef check(candidate):\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n    assert candidate([10,15,-14,13,-18,12,-20])==-52\n    assert candidate([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894\n\ncheck(sum_negativenum)",
      "context": "{\"function_name\": \"sum_negativenum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 135,
      "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def hexagonal_num(n):\n    # Calculate the nth hexagonal number using the formula: n * (2n - 1)\n    return n * (2 * n - 1)",
      "test_content": "from llm_output import hexagonal_num\n\ndef check(candidate):\n    assert candidate(10) == 190\n    assert candidate(5) == 45\n    assert candidate(7) == 91\n\ncheck(hexagonal_num)",
      "context": "{\"function_name\": \"hexagonal_num\"}",
      "attempt_num": 1
    },
    {
      "task_id": 139,
      "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r",
      "test_content": "from llm_output import circle_circumference\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(10), 62.830000000000005, rel_tol=0.001)\n    assert math.isclose(candidate(5), 31.415000000000003, rel_tol=0.001)\n    assert math.isclose(candidate(4), 25.132, rel_tol=0.001)\n\ncheck(circle_circumference)",
      "context": "{\"function_name\": \"circle_circumference\"}",
      "attempt_num": 1
    },
    {
      "task_id": 140,
      "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    # Initialize an empty set to store the unique numbers\n    result_set = set()\n    \n    # Iterate over each sublist in the test_list\n    for sublist in test_list:\n        # Add each number in the sublist to the result_set\n        result_set.update(sublist)\n    \n    return result_set",
      "test_content": "from llm_output import extract_singly\n\ndef check(candidate):\n    assert set(candidate([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n    assert set(candidate([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])\n    assert set(candidate([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])\n\ncheck(extract_singly)",
      "context": "{\"function_name\": \"extract_singly\"}",
      "attempt_num": 1
    },
    {
      "task_id": 141,
      "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted portion of the list\n        max_index = nums.index(max(nums[:n-i]))\n        \n        # Flip the maximum element to the beginning of the unsorted portion\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n        \n        # Flip the entire unsorted portion to move the maximum element to its correct position\n        nums[:n-i] = nums[:n-i][::-1]\n    \n    return nums",
      "test_content": "from llm_output import pancake_sort\n\ndef check(candidate):\n    assert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert candidate([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n    assert candidate([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n\ncheck(pancake_sort)",
      "context": "{\"function_name\": \"pancake_sort\"}",
      "attempt_num": 1
    },
    {
      "task_id": 142,
      "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def count_samepair(list1, list2, list3):\n    # Initialize a counter for identical items\n    count = 0\n    \n    # Iterate over the indices of the lists\n    for i in range(len(list1)):\n        # Check if the items at the same index in all three lists are identical\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count",
      "test_content": "from llm_output import count_samepair\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\n    assert candidate([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\n\ncheck(count_samepair)",
      "context": "{\"function_name\": \"count_samepair\"}",
      "attempt_num": 1
    },
    {
      "task_id": 145,
      "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def max_Abs_Diff(arr):\n    if not arr:\n        return 0\n    \n    min_val = arr[0]\n    max_val = arr[0]\n    \n    for num in arr:\n        min_val = min(min_val, num)\n        max_val = max(max_val, num)\n    \n    return max_val - min_val",
      "test_content": "from llm_output import max_Abs_Diff\n\ndef check(candidate):\n    assert candidate((2,1,5,3)) == 4\n    assert candidate((9,3,2,5,1)) == 8\n    assert candidate((3,2,1)) == 2\n\ncheck(max_Abs_Diff)",
      "context": "{\"function_name\": \"max_Abs_Diff\"}",
      "attempt_num": 1
    },
    {
      "task_id": 161,
      "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def remove_elements(list1, list2):\n    # Use a set for list2 for O(1) average time complexity for lookups\n    set2 = set(list2)\n    # Use a list comprehension to filter out elements in list1 that are in set2\n    return [element for element in list1 if element not in set2]",
      "test_content": "from llm_output import remove_elements\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]\n\ncheck(remove_elements)",
      "context": "{\"function_name\": \"remove_elements\"}",
      "attempt_num": 1
    },
    {
      "task_id": 163,
      "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from math import tan, pi\n\ndef area_polygon(s, l):\n    # Calculate the area of a regular polygon\n    n = s  # Number of sides\n    area = (n * l**2) / (4 * tan(pi / n))\n    return area",
      "test_content": "from llm_output import area_polygon\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(4, 20), 400., rel_tol=0.001)\n    assert math.isclose(candidate(10, 15), 1731.197, rel_tol=0.001)\n    assert math.isclose(candidate(9, 7), 302.909, rel_tol=0.001)\n\ncheck(area_polygon)",
      "context": "{\"function_name\": \"area_polygon\"}",
      "attempt_num": 1
    },
    {
      "task_id": 165,
      "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def count_char_position(str1):\n    # Define the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    # Initialize a counter for matching characters\n    count = 0\n    \n    # Iterate over the string\n    for i, char in enumerate(str1):\n        # Convert character to lowercase for case insensitivity\n        char = char.lower()\n        \n        # Check if the character is in the alphabet and at the same position\n        if char in alphabet and i == alphabet.index(char):\n            count += 1\n    \n    return count",
      "test_content": "from llm_output import count_char_position\n\ndef check(candidate):\n    assert candidate(\"xbcefg\") == 2\n    assert candidate(\"ABcED\") == 3\n    assert candidate(\"AbgdeF\") == 5\n\ncheck(count_char_position)",
      "context": "{\"function_name\": \"count_char_position\"}",
      "attempt_num": 1
    },
    {
      "task_id": 166,
      "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
      "test_content": "from llm_output import find_even_pair\n\ndef check(candidate):\n    assert candidate([5, 4, 7, 2, 1]) == 4\n    assert candidate([7, 2, 8, 1, 0, 5, 11]) == 9\n    assert candidate([1, 2, 3]) == 1\n\ncheck(find_even_pair)",
      "context": "{\"function_name\": \"find_even_pair\"}",
      "attempt_num": 1
    },
    {
      "task_id": 167,
      "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "import math\n\ndef next_power_of_2(n):\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))",
      "test_content": "from llm_output import next_power_of_2\n\ndef check(candidate):\n    assert candidate(0) == 1\n    assert candidate(5) == 8\n    assert candidate(17) == 32\n\ncheck(next_power_of_2)",
      "context": "{\"function_name\": \"next_power_of_2\"}",
      "attempt_num": 1
    },
    {
      "task_id": 168,
      "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count",
      "test_content": "from llm_output import frequency\n\ndef check(candidate):\n    assert candidate([1,2,3], 4) == 0\n    assert candidate([1,2,2,3,3,3,4], 3) == 3\n    assert candidate([0,1,2,3,1,2], 1) == 2\n\ncheck(frequency)",
      "context": "{\"function_name\": \"frequency\"}",
      "attempt_num": 1
    },
    {
      "task_id": 170,
      "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def sum_range_list(list1, m, n):\n    # Check if m is less than n\n    if m < n:\n        # Calculate the sum of numbers from index m to n (inclusive)\n        return sum(list1[m:n+1])\n    else:\n        # If m is greater than or equal to n, return 0\n        return 0",
      "test_content": "from llm_output import sum_range_list\n\ndef check(candidate):\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38\n\ncheck(sum_range_list)",
      "context": "{\"function_name\": \"sum_range_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 171,
      "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def perimeter_pentagon(a):\n    # Calculate the perimeter of a regular pentagon\n    return 5 * a",
      "test_content": "from llm_output import perimeter_pentagon\n\ndef check(candidate):\n    assert candidate(5) == 25\n    assert candidate(10) == 50\n    assert candidate(15) == 75\n\ncheck(perimeter_pentagon)",
      "context": "{\"function_name\": \"perimeter_pentagon\"}",
      "attempt_num": 1
    },
    {
      "task_id": 172,
      "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def count_occurance(s):\n    return s.count('std')",
      "test_content": "from llm_output import count_occurance\n\ndef check(candidate):\n    assert candidate(\"letstdlenstdporstd\") == 3\n    assert candidate(\"truststdsolensporsd\") == 1\n    assert candidate(\"makestdsostdworthit\") == 2\n    assert candidate(\"stds\") == 1\n    assert candidate(\"\") == 0\n\ncheck(count_occurance)",
      "context": "{\"function_name\": \"count_occurance\"}",
      "attempt_num": 1
    },
    {
      "task_id": 222,
      "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import *\nfrom collections import *\n\ndef check_type(test_tuple):\n    # Check if the tuple is empty\n    if not test_tuple:\n        return True\n    \n    # Get the type of the first element\n    first_type = type(test_tuple[0])\n    \n    # Check if all elements in the tuple have the same type\n    for element in test_tuple:\n        if type(element) != first_type:\n            return False\n    \n    return True",
      "test_content": "from llm_output import check_type\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6) ) == True\n    assert candidate((1, 2, \"4\") ) == False\n    assert candidate((3, 2, 1, 4, 5) ) == True\n\ncheck(check_type)",
      "context": "{\"function_name\": \"check_type\"}",
      "attempt_num": 1
    },
    {
      "task_id": 224,
      "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###END===",
      "test_content": "from llm_output import count_Set_Bits\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(4) == 1\n    assert candidate(6) == 2\n\ncheck(count_Set_Bits)",
      "context": "{\"function_name\": \"count_Set_Bits\"}",
      "attempt_num": 1
    },
    {
      "task_id": 226,
      "prompt": "### Prompt\nWrite a python function to remove the characters which have odd index values of a given string.\n\n### Signature\ndef odd_values_string(str):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def odd_values_string(str):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate over the string using enumerate to get both index and character\n    for index, char in enumerate(str):\n        # Check if the index is even (0-based index)\n        if index % 2 == 0:\n            # Append the character to the result string\n            result += char\n    \n    # Return the resulting string with odd index characters removed\n    return result",
      "test_content": "from llm_output import odd_values_string\n\ndef check(candidate):\n    assert candidate('abcdef') == 'ace'\n    assert candidate('python') == 'pto'\n    assert candidate('data') == 'dt'\n    assert candidate('lambs') == 'lms'\n\ncheck(odd_values_string)",
      "context": "{\"function_name\": \"odd_values_string\"}",
      "attempt_num": 1
    },
    {
      "task_id": 227,
      "prompt": "### Prompt\nWrite a function to find minimum of three numbers.\n\n### Signature\ndef min_of_three(a,b,c):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)",
      "test_content": "from llm_output import min_of_three\n\ndef check(candidate):\n    assert candidate(10,20,0)==0\n    assert candidate(19,15,18)==15\n    assert candidate(-10,-20,-30)==-30\n\ncheck(min_of_three)",
      "context": "{\"function_name\": \"min_of_three\"}",
      "attempt_num": 1
    },
    {
      "task_id": 230,
      "prompt": "### Prompt\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n### Signature\ndef replace_blank(str1,char):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)",
      "test_content": "from llm_output import replace_blank\n\ndef check(candidate):\n    assert candidate(\"hello people\",\"\"\"@\"\"\")==(\"hello@people\")\n    assert candidate(\"python program language\",\"\"\"$\"\"\")==(\"python$program$language\")\n    assert candidate(\"blank space\",\"-\")==(\"blank-space\")\n\ncheck(replace_blank)",
      "context": "{\"function_name\": \"replace_blank\"}",
      "attempt_num": 1
    },
    {
      "task_id": 232,
      "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n### Signature\ndef larg_nnum(list1,n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def larg_nnum(list1, n):\n    if n <= 0:\n        return []\n    if n >= len(list1):\n        return list1[:]\n    \n    # Sort the list in descending order and return the first n elements\n    return sorted(list1, reverse=True)[:n]",
      "test_content": "from llm_output import larg_nnum\n\ndef check(candidate):\n    assert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n    assert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])\n    assert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])\n\ncheck(larg_nnum)",
      "context": "{\"function_name\": \"larg_nnum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 233,
      "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cylinder.\n\n### Signature\ndef lateralsuface_cylinder(r,h):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nimport math\n\ndef lateralsuface_cylinder(r, h):\n    # Calculate the lateral surface area of a cylinder\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area\n\n###END===",
      "test_content": "from llm_output import lateralsuface_cylinder\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(10,5), 314.15000000000003, rel_tol=0.001)\n    assert math.isclose(candidate(4,5), 125.66000000000001, rel_tol=0.001)\n    assert math.isclose(candidate(4,10), 251.32000000000002, rel_tol=0.001)\n\ncheck(lateralsuface_cylinder)",
      "context": "{\"function_name\": \"lateralsuface_cylinder\"}",
      "attempt_num": 1
    },
    {
      "task_id": 234,
      "prompt": "### Prompt\nWrite a function to find the volume of a cube given its side length.\n\n### Signature\ndef volume_cube(l):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def volume_cube(l):\n    return l ** 3",
      "test_content": "from llm_output import volume_cube\n\ndef check(candidate):\n    assert candidate(3)==27\n    assert candidate(2)==8\n    assert candidate(5)==125\n\ncheck(volume_cube)",
      "context": "{\"function_name\": \"volume_cube\"}",
      "attempt_num": 1
    },
    {
      "task_id": 238,
      "prompt": "### Prompt\nWrite a python function to count the number of non-empty substrings of a given string.\n\n### Signature\ndef number_of_substrings(str):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def number_of_substrings(str):\n    n = len(str)\n    return n * (n + 1) // 2",
      "test_content": "from llm_output import number_of_substrings\n\ndef check(candidate):\n    assert candidate(\"abc\") == 6\n    assert candidate(\"abcd\") == 10\n    assert candidate(\"abcde\") == 15\n\ncheck(number_of_substrings)",
      "context": "{\"function_name\": \"number_of_substrings\"}",
      "attempt_num": 1
    },
    {
      "task_id": 239,
      "prompt": "### Prompt\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n### Signature\ndef get_total_number_of_sequences(m,n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import *\nfrom collections import *\n\ndef get_total_number_of_sequences(m, n):\n    # Initialize a DP table where dp[i][j] represents the number of sequences of length i ending with j\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base case: There is one way to form a sequence of length 1 with any number from 1 to m\n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    # Fill the DP table\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, j // 2 + 1):\n                dp[i][j] += dp[i - 1][k]\n    \n    # The total number of sequences of length n is the sum of sequences ending with any number from 1 to m\n    total_sequences = sum(dp[n][j] for j in range(1, m + 1))\n    \n    return total_sequences",
      "test_content": "from llm_output import get_total_number_of_sequences\n\ndef check(candidate):\n    assert candidate(10, 4) == 4\n    assert candidate(5, 2) == 6\n    assert candidate(16, 3) == 84\n\ncheck(get_total_number_of_sequences)",
      "context": "{\"function_name\": \"get_total_number_of_sequences\"}",
      "attempt_num": 1
    },
    {
      "task_id": 240,
      "prompt": "### Prompt\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\n### Signature\ndef replace_list(list1,list2):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def replace_list(list1, list2):\n    if list2:\n        list1[-1:] = list2\n    return list1",
      "test_content": "from llm_output import replace_list\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n    assert candidate([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\n    assert candidate([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]\n\ncheck(replace_list)",
      "context": "{\"function_name\": \"replace_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 242,
      "prompt": "### Prompt\nWrite a function to count the total number of characters in a string.\n\n### Signature\ndef count_charac(str1):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def count_charac(str1):\n    return len(str1)",
      "test_content": "from llm_output import count_charac\n\ndef check(candidate):\n    assert candidate(\"python programming\")==18\n    assert candidate(\"language\")==8\n    assert candidate(\"words\")==5\n\ncheck(count_charac)",
      "context": "{\"function_name\": \"count_charac\"}",
      "attempt_num": 1
    },
    {
      "task_id": 244,
      "prompt": "### Prompt\nWrite a python function to find the next perfect square greater than a given number.\n\n### Signature\ndef next_Perfect_Square(N):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "import math\n\ndef next_Perfect_Square(N):\n    # Find the integer square root of N\n    root = math.isqrt(N)\n    # Calculate the next perfect square\n    next_square = (root + 1) ** 2\n    return next_square",
      "test_content": "from llm_output import next_Perfect_Square\n\ndef check(candidate):\n    assert candidate(35) == 36\n    assert candidate(6) == 9\n    assert candidate(9) == 16\n\ncheck(next_Perfect_Square)",
      "context": "{\"function_name\": \"next_Perfect_Square\"}",
      "attempt_num": 1
    },
    {
      "task_id": 246,
      "prompt": "### Prompt\nWrite a function for computing square roots using the babylonian method.\n\n### Signature\ndef babylonian_squareroot(number):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "import math\n\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    \n    # Initial guess\n    guess = number / 2.0\n    \n    # Tolerance for convergence\n    tolerance = 1e-10\n    \n    while True:\n        next_guess = (guess + number / guess) / 2.0\n        if abs(next_guess - guess) < tolerance:\n            return next_guess\n        guess = next_guess",
      "test_content": "from llm_output import babylonian_squareroot\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(10), 3.162277660168379, rel_tol=0.001)\n    assert math.isclose(candidate(2), 1.414213562373095, rel_tol=0.001)\n    assert math.isclose(candidate(9), 3.0, rel_tol=0.001)\n\ncheck(babylonian_squareroot)",
      "context": "{\"function_name\": \"babylonian_squareroot\"}",
      "attempt_num": 1
    },
    {
      "task_id": 247,
      "prompt": "### Prompt\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n\n### Signature\ndef lps(str):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom typing import *\nfrom collections import *\n\ndef lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the table. The outer loop is for substring lengths\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]\n\n###END===",
      "test_content": "from llm_output import lps\n\ndef check(candidate):\n    assert candidate(\"TENS FOR TENS\") == 5\n    assert candidate(\"CARDIO FOR CARDS\") == 7\n    assert candidate(\"PART OF THE JOURNEY IS PART\") == 9\n\ncheck(lps)",
      "context": "{\"function_name\": \"lps\"}",
      "attempt_num": 1
    },
    {
      "task_id": 250,
      "prompt": "### Prompt\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\n### Signature\ndef count_X(tup, x):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def count_X(tup, x):\n    return tup.count(x)",
      "test_content": "from llm_output import count_X\n\ndef check(candidate):\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n\ncheck(count_X)",
      "context": "{\"function_name\": \"count_X\"}",
      "attempt_num": 1
    },
    {
      "task_id": 251,
      "prompt": "### Prompt\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\n### Signature\ndef insert_element(list,element):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result",
      "test_content": "from llm_output import insert_element\n\ndef check(candidate):\n    assert candidate(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n    assert candidate(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\n    assert candidate(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']\n\ncheck(insert_element)",
      "context": "{\"function_name\": \"insert_element\"}",
      "attempt_num": 1
    },
    {
      "task_id": 253,
      "prompt": "### Prompt\nWrite a python function that returns the number of integer elements in a given list.\n\n### Signature\ndef count_integer(list1):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count",
      "test_content": "from llm_output import count_integer\n\ndef check(candidate):\n    assert candidate([1,2,'abc',1.2]) == 2\n    assert candidate([1,2,3]) == 3\n    assert candidate([1,1.2,4,5.1]) == 2\n\ncheck(count_integer)",
      "context": "{\"function_name\": \"count_integer\"}",
      "attempt_num": 1
    },
    {
      "task_id": 256,
      "prompt": "### Prompt\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n### Signature\ndef count_Primes_nums(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom math import sqrt\n\ndef count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(sqrt(n)) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\n\n###END===",
      "test_content": "from llm_output import count_Primes_nums\n\ndef check(candidate):\n    assert candidate(5) == 2\n    assert candidate(10) == 4\n    assert candidate(100) == 25\n\ncheck(count_Primes_nums)",
      "context": "{\"function_name\": \"count_Primes_nums\"}",
      "attempt_num": 1
    },
    {
      "task_id": 257,
      "prompt": "### Prompt\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\n### Signature\ndef swap_numbers(a,b):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def swap_numbers(a, b):\n    return (b, a)",
      "test_content": "from llm_output import swap_numbers\n\ndef check(candidate):\n    assert candidate(10,20)==(20,10)\n    assert candidate(15,17)==(17,15)\n    assert candidate(100,200)==(200,100)\n\ncheck(swap_numbers)",
      "context": "{\"function_name\": \"swap_numbers\"}",
      "attempt_num": 1
    },
    {
      "task_id": 261,
      "prompt": "### Prompt\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n### Signature\ndef division_elements(test_tup1, test_tup2):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def division_elements(test_tup1, test_tup2):\n    # Check if both tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Perform element-wise division\n    result = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n    \n    return result",
      "test_content": "from llm_output import division_elements\n\ndef check(candidate):\n    assert candidate((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n    assert candidate((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\n    assert candidate((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n\ncheck(division_elements)",
      "context": "{\"function_name\": \"division_elements\"}",
      "attempt_num": 1
    },
    {
      "task_id": 262,
      "prompt": "### Prompt\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\n### Signature\ndef split_two_parts(list1, L):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def split_two_parts(list1, L):\n    if L < 0 or L > len(list1):\n        raise ValueError(\"L must be between 0 and the length of the list\")\n    return (list1[:L], list1[L:])",
      "test_content": "from llm_output import split_two_parts\n\ndef check(candidate):\n    assert candidate([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert candidate(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n\ncheck(split_two_parts)",
      "context": "{\"function_name\": \"split_two_parts\"}",
      "attempt_num": 1
    },
    {
      "task_id": 264,
      "prompt": "### Prompt\nWrite a function to calculate a dog's age in dog's years.\n\n### Signature\ndef dog_age(h_age):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def dog_age(h_age):\n    if h_age < 0:\n        raise ValueError(\"Age cannot be negative\")\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4",
      "test_content": "from llm_output import dog_age\n\ndef check(candidate):\n    assert candidate(12)==61\n    assert candidate(15)==73\n    assert candidate(24)==109\n\ncheck(dog_age)",
      "context": "{\"function_name\": \"dog_age\"}",
      "attempt_num": 1
    },
    {
      "task_id": 266,
      "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cube given its side length.\n\n### Signature\ndef lateralsurface_cube(l):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def lateralsurface_cube(l):\n    # Calculate the lateral surface area of a cube\n    return 4 * l * l",
      "test_content": "from llm_output import lateralsurface_cube\n\ndef check(candidate):\n    assert candidate(5)==100\n    assert candidate(9)==324\n    assert candidate(10)==400\n\ncheck(lateralsurface_cube)",
      "context": "{\"function_name\": \"lateralsurface_cube\"}",
      "attempt_num": 1
    },
    {
      "task_id": 267,
      "prompt": "### Prompt\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n### Signature\ndef square_Sum(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom typing import *\nfrom collections import *\n\ndef square_Sum(n):\n    return sum((2*i + 1)**2 for i in range(n))\n\n###END===",
      "test_content": "from llm_output import square_Sum\n\ndef check(candidate):\n    assert candidate(2) == 10\n    assert candidate(3) == 35\n    assert candidate(4) == 84\n\ncheck(square_Sum)",
      "context": "{\"function_name\": \"square_Sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 269,
      "prompt": "### Prompt\nWrite a function to find the ascii value of a character.\n\n### Signature\ndef ascii_value(k):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def ascii_value(k):\n    return ord(k)",
      "test_content": "from llm_output import ascii_value\n\ndef check(candidate):\n    assert candidate('A')==65\n    assert candidate('R')==82\n    assert candidate('S')==83\n\ncheck(ascii_value)",
      "context": "{\"function_name\": \"ascii_value\"}",
      "attempt_num": 1
    },
    {
      "task_id": 270,
      "prompt": "### Prompt\nWrite a python function to find the sum of even numbers at even positions of a list.\n\n### Signature\ndef sum_even_and_even_index(arr):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def sum_even_and_even_index(arr):\n    total_sum = 0\n    for i in range(0, len(arr), 2):  # Iterate over even indices\n        if arr[i] % 2 == 0:  # Check if the number at the even index is even\n            total_sum += arr[i]\n    return total_sum",
      "test_content": "from llm_output import sum_even_and_even_index\n\ndef check(candidate):\n    assert candidate([5, 6, 12, 1, 18, 8]) == 30\n    assert candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\n    assert candidate([5, 6, 12, 1]) == 12\n\ncheck(sum_even_and_even_index)",
      "context": "{\"function_name\": \"sum_even_and_even_index\"}",
      "attempt_num": 1
    },
    {
      "task_id": 271,
      "prompt": "### Prompt\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n### Signature\ndef even_Power_Sum(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom typing import *\nfrom collections import *\n\ndef even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    return total_sum\n\n###END===",
      "test_content": "from llm_output import even_Power_Sum\n\ndef check(candidate):\n    assert candidate(2) == 1056\n    assert candidate(3) == 8832\n    assert candidate(1) == 32\n\ncheck(even_Power_Sum)",
      "context": "{\"function_name\": \"even_Power_Sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 272,
      "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n### Signature\ndef rear_extract(test_list):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def rear_extract(test_list):\n    # Initialize an empty list to store the rear elements\n    result = []\n    \n    # Iterate over each tuple in the input list\n    for tup in test_list:\n        # Append the last element of the tuple to the result list\n        result.append(tup[-1])\n    \n    # Return the list of rear elements\n    return result",
      "test_content": "from llm_output import rear_extract\n\ndef check(candidate):\n    assert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    assert candidate([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n    assert candidate([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n\ncheck(rear_extract)",
      "context": "{\"function_name\": \"rear_extract\"}",
      "attempt_num": 1
    },
    {
      "task_id": 273,
      "prompt": "### Prompt\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n### Signature\ndef substract_elements(test_tup1, test_tup2):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def substract_elements(test_tup1, test_tup2):\n    # Check if both tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # Subtract elements of the first tuple by the elements of the second tuple\n    result = tuple(a - b for a, b in zip(test_tup1, test_tup2))\n    \n    return result",
      "test_content": "from llm_output import substract_elements\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ncheck(substract_elements)",
      "context": "{\"function_name\": \"substract_elements\"}",
      "attempt_num": 1
    },
    {
      "task_id": 274,
      "prompt": "### Prompt\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n### Signature\ndef even_binomial_Coeff_Sum( n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            total_sum += comb(n, i)\n    return total_sum",
      "test_content": "from llm_output import even_binomial_Coeff_Sum\n\ndef check(candidate):\n    assert candidate(4) == 8\n    assert candidate(6) == 32\n    assert candidate(2) == 2\n\ncheck(even_binomial_Coeff_Sum)",
      "context": "{\"function_name\": \"even_binomial_Coeff_Sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 276,
      "prompt": "### Prompt\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n\n### Signature\ndef volume_cylinder(r,h):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nimport math\n\ndef volume_cylinder(r, h):\n    return math.pi * r**2 * h\n\n###END===",
      "test_content": "from llm_output import volume_cylinder\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(10,5), 1570.7500000000002, rel_tol=0.001)\n    assert math.isclose(candidate(4,5), 251.32000000000002, rel_tol=0.001)\n    assert math.isclose(candidate(4,10), 502.64000000000004, rel_tol=0.001)\n\ncheck(volume_cylinder)",
      "context": "{\"function_name\": \"volume_cylinder\"}",
      "attempt_num": 1
    },
    {
      "task_id": 277,
      "prompt": "### Prompt\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n### Signature\ndef dict_filter(dict,n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}",
      "test_content": "from llm_output import dict_filter\n\ndef check(candidate):\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\n\ncheck(dict_filter)",
      "context": "{\"function_name\": \"dict_filter\"}",
      "attempt_num": 1
    },
    {
      "task_id": 278,
      "prompt": "### Prompt\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n\n### Signature\ndef count_first_elements(test_tup):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def count_first_elements(test_tup):\n    # Initialize a counter\n    count = 0\n    \n    # Iterate through the tuple\n    for element in test_tup:\n        # If the element is a tuple, break the loop\n        if isinstance(element, tuple):\n            break\n        # Increment the counter for each non-tuple element\n        count += 1\n    \n    return count",
      "test_content": "from llm_output import count_first_elements\n\ndef check(candidate):\n    assert candidate((1, 5, 7, (4, 6), 10) ) == 3\n    assert candidate((2, 9, (5, 7), 11) ) == 2\n    assert candidate((11, 15, 5, 8, (2, 3), 8) ) == 4\n\ncheck(count_first_elements)",
      "context": "{\"function_name\": \"count_first_elements\"}",
      "attempt_num": 1
    },
    {
      "task_id": 280,
      "prompt": "### Prompt\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n### Signature\ndef sequential_search(dlist, item):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def sequential_search(dlist, item):\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)",
      "test_content": "from llm_output import sequential_search\n\ndef check(candidate):\n    assert candidate([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n    assert candidate([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\n    assert candidate([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n\ncheck(sequential_search)",
      "context": "{\"function_name\": \"sequential_search\"}",
      "attempt_num": 1
    },
    {
      "task_id": 281,
      "prompt": "### Prompt\nWrite a python function to check if the elements of a given list are unique or not.\n\n### Signature\ndef all_unique(test_list):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))\n\n###END===",
      "test_content": "from llm_output import all_unique\n\ndef check(candidate):\n    assert candidate([1,2,3]) == True\n    assert candidate([1,2,1,2]) == False\n    assert candidate([1,2,3,4,5]) == True\n\ncheck(all_unique)",
      "context": "{\"function_name\": \"all_unique\"}",
      "attempt_num": 1
    },
    {
      "task_id": 282,
      "prompt": "### Prompt\nWrite a function to subtract two lists element-wise.\n\n### Signature\ndef sub_list(nums1,nums2):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def sub_list(nums1, nums2):\n    # Check if both lists have the same length\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    # Subtract corresponding elements of the lists\n    result = [a - b for a, b in zip(nums1, nums2)]\n    \n    return result",
      "test_content": "from llm_output import sub_list\n\ndef check(candidate):\n    assert candidate([1, 2, 3],[4,5,6])==[-3,-3,-3]\n    assert candidate([1,2],[3,4])==[-2,-2]\n    assert candidate([90,120],[50,70])==[40,50]\n\ncheck(sub_list)",
      "context": "{\"function_name\": \"sub_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 283,
      "prompt": "### Prompt\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n### Signature\ndef validate(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom collections import Counter\n\ndef validate(n):\n    # Convert the integer to a string to iterate over each digit\n    digits = str(n)\n    \n    # Count the frequency of each digit\n    digit_count = Counter(digits)\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if int(digit) < count:\n            return False\n    \n    return True\n\n###END===",
      "test_content": "from llm_output import validate\n\ndef check(candidate):\n    assert candidate(1234) == True\n    assert candidate(51241) == False\n    assert candidate(321) == True\n\ncheck(validate)",
      "context": "{\"function_name\": \"validate\"}",
      "attempt_num": 1
    },
    {
      "task_id": 284,
      "prompt": "### Prompt\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\n### Signature\ndef check_element(list,element):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)",
      "test_content": "from llm_output import check_element\n\ndef check(candidate):\n    assert candidate([\"green\", \"orange\", \"black\", \"white\"],\"\"\"blue\"\"\")==False\n    assert candidate([1,2,3,4],7)==False\n    assert candidate([\"green\", \"green\", \"green\", \"green\"],\"\"\"green\"\"\")==True\n\ncheck(check_element)",
      "context": "{\"function_name\": \"check_element\"}",
      "attempt_num": 1
    },
    {
      "task_id": 285,
      "prompt": "### Prompt\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n### Signature\ndef text_match_two_three(text):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "import re\n\ndef text_match_two_three(text):\n    # Use regular expression to find the pattern 'ab{2,3}'\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))",
      "test_content": "from llm_output import text_match_two_three\n\ndef check(candidate):\n    assert candidate(\"ac\")==(False)\n    assert candidate(\"dc\")==(False)\n    assert candidate(\"abbbba\")==(True)\n\ncheck(text_match_two_three)",
      "context": "{\"function_name\": \"text_match_two_three\"}",
      "attempt_num": 1
    },
    {
      "task_id": 287,
      "prompt": "### Prompt\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n### Signature\ndef square_Sum(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom typing import *\nfrom collections import *\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(2, 2*n+1, 2))\n\n###END===",
      "test_content": "from llm_output import square_Sum\n\ndef check(candidate):\n    assert candidate(2) == 20\n    assert candidate(3) == 56\n    assert candidate(4) == 120\n\ncheck(square_Sum)",
      "context": "{\"function_name\": \"square_Sum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 291,
      "prompt": "### Prompt\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n### Signature\ndef count_no_of_ways(n, k):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom typing import *\nfrom collections import *\n\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    # Initialize the base cases\n    same = k  # Number of ways to paint the first two posts with the same color\n    diff = k * (k - 1)  # Number of ways to paint the first two posts with different colors\n    \n    # Iterate from 3 to n to find the number of ways to paint the rest of the posts\n    for i in range(2, n):\n        # Calculate the number of ways to paint the current post with the same color as the previous one\n        same_next = diff\n        # Calculate the number of ways to paint the current post with a different color than the previous one\n        diff_next = same * (k - 1) + diff * (k - 1)\n        \n        # Update the same and diff variables for the next iteration\n        same = same_next\n        diff = diff_next\n    \n    # The total number of ways to paint the fence is the sum of ways with the same and different colors\n    return same + diff\n\n###END===",
      "test_content": "from llm_output import count_no_of_ways\n\ndef check(candidate):\n    assert candidate(2, 4) == 16\n    assert candidate(3, 2) == 6\n    assert candidate(4, 4) == 228\n\ncheck(count_no_of_ways)",
      "context": "{\"function_name\": \"count_no_of_ways\"}",
      "attempt_num": 1
    },
    {
      "task_id": 292,
      "prompt": "### Prompt\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n### Signature\ndef find(n,m):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from math import floor\n\ndef find(n, m):\n    if m == 0:\n        raise ValueError(\"Division by zero is not allowed.\")\n    return floor(n / m)",
      "test_content": "from llm_output import find\n\ndef check(candidate):\n    assert candidate(10,3) == 3\n    assert candidate(4,2) == 2\n    assert candidate(20,5) == 4\n\ncheck(find)",
      "context": "{\"function_name\": \"find\"}",
      "attempt_num": 1
    },
    {
      "task_id": 293,
      "prompt": "### Prompt\nWrite a function to find the third side of a right angled triangle.\n\n### Signature\ndef otherside_rightangle(w,h):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from math import sqrt\n\ndef otherside_rightangle(w, h):\n    # Calculate the third side using the Pythagorean theorem\n    return sqrt(w**2 + h**2)",
      "test_content": "from llm_output import otherside_rightangle\n\ndef check(candidate):\n    assert candidate(7,8)==10.63014581273465\n    assert candidate(3,4)==5\n    assert candidate(7,15)==16.55294535724685\n\ncheck(otherside_rightangle)",
      "context": "{\"function_name\": \"otherside_rightangle\"}",
      "attempt_num": 1
    },
    {
      "task_id": 295,
      "prompt": "### Prompt\nWrite a function to return the sum of all divisors of a number.\n\n### Signature\ndef sum_div(number):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def sum_div(number):\n    if number <= 0:\n        return 0\n    total = 1  # 1 is a divisor of every number\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            total += i\n            if i != number // i:\n                total += number // i\n    return total",
      "test_content": "from llm_output import sum_div\n\ndef check(candidate):\n    assert candidate(8)==7\n    assert candidate(12)==16\n    assert candidate(7)==1\n\ncheck(sum_div)",
      "context": "{\"function_name\": \"sum_div\"}",
      "attempt_num": 1
    },
    {
      "task_id": 296,
      "prompt": "### Prompt\nWrite a python function to count inversions in an array.\n\n### Signature\ndef get_Inv_Count(arr):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom typing import *\nfrom collections import *\n\ndef get_Inv_Count(arr):\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += (mid - i + 1)\n                j += 1\n            k += 1\n\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)\n\n###END===",
      "test_content": "from llm_output import get_Inv_Count\n\ndef check(candidate):\n    assert candidate([1,20,6,4,5]) == 5\n    assert candidate([1,2,1]) == 1\n    assert candidate([1,2,5,6,1]) == 3\n\ncheck(get_Inv_Count)",
      "context": "{\"function_name\": \"get_Inv_Count\"}",
      "attempt_num": 1
    },
    {
      "task_id": 297,
      "prompt": "### Prompt\nWrite a function to flatten a given nested list structure.\n\n### Signature\ndef flatten_list(list1):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def flatten_list(list1):\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result",
      "test_content": "from llm_output import flatten_list\n\ndef check(candidate):\n    assert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n\ncheck(flatten_list)",
      "context": "{\"function_name\": \"flatten_list\"}",
      "attempt_num": 1
    },
    {
      "task_id": 300,
      "prompt": "### Prompt\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n### Signature\ndef count_binary_seq(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import *\nfrom collections import *\n\ndef count_binary_seq(n):\n    # Initialize the count of valid sequences\n    count = 0\n    \n    # Iterate over all possible binary sequences of length 2n\n    for i in range(2 ** (2 * n)):\n        # Convert the number to a binary string and pad with leading zeros\n        binary_str = format(i, '0' + str(2 * n) + 'b')\n        \n        # Calculate the sum of the first n bits and the last n bits\n        sum_first_n = sum(int(bit) for bit in binary_str[:n])\n        sum_last_n = sum(int(bit) for bit in binary_str[n:])\n        \n        # If the sums are equal, increment the count\n        if sum_first_n == sum_last_n:\n            count += 1\n    \n    return count",
      "test_content": "from llm_output import count_binary_seq\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(1), 2.0, rel_tol=0.001)\n    assert math.isclose(candidate(2), 6.0, rel_tol=0.001)\n    assert math.isclose(candidate(3), 20.0, rel_tol=0.001)\n\ncheck(count_binary_seq)",
      "context": "{\"function_name\": \"count_binary_seq\"}",
      "attempt_num": 1
    },
    {
      "task_id": 309,
      "prompt": "### Prompt\nWrite a python function to find the maximum of two numbers.\n\n### Signature\ndef maximum(a,b):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def maximum(a, b):\n    return a if a > b else b",
      "test_content": "from llm_output import maximum\n\ndef check(candidate):\n    assert candidate(5,10) == 10\n    assert candidate(-1,-2) == -1\n    assert candidate(9,7) == 9\n\ncheck(maximum)",
      "context": "{\"function_name\": \"maximum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 312,
      "prompt": "### Prompt\nWrite a function to find the volume of a cone.\n\n### Signature\ndef volume_cone(r,h):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nimport math\n\ndef volume_cone(r, h):\n    # Calculate the volume of a cone using the formula: (1/3) * \u03c0 * r^2 * h\n    return (1/3) * math.pi * r**2 * h\n\n###END===",
      "test_content": "from llm_output import volume_cone\n\nimport math\ndef check(candidate):\n    assert math.isclose(candidate(5,12), 314.15926535897927, rel_tol=0.001)\n    assert math.isclose(candidate(10,15), 1570.7963267948965, rel_tol=0.001)\n    assert math.isclose(candidate(19,17), 6426.651371693521, rel_tol=0.001)\n\ncheck(volume_cone)",
      "context": "{\"function_name\": \"volume_cone\"}",
      "attempt_num": 1
    },
    {
      "task_id": 388,
      "prompt": "### Prompt\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\n### Signature\ndef highest_Power_of_2(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nimport math\n\ndef highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    return 2 ** math.floor(math.log2(n))\n\n###END===",
      "test_content": "from llm_output import highest_Power_of_2\n\ndef check(candidate):\n    assert candidate(10) == 8\n    assert candidate(19) == 16\n    assert candidate(32) == 32\n\ncheck(highest_Power_of_2)",
      "context": "{\"function_name\": \"highest_Power_of_2\"}",
      "attempt_num": 1
    },
    {
      "task_id": 389,
      "prompt": "### Prompt\nWrite a function to find the n'th lucas number.\n\n### Signature\ndef find_lucas(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import *\nfrom collections import *\n\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b",
      "test_content": "from llm_output import find_lucas\n\ndef check(candidate):\n    assert candidate(9) == 76\n    assert candidate(4) == 7\n    assert candidate(3) == 4\n\ncheck(find_lucas)",
      "context": "{\"function_name\": \"find_lucas\"}",
      "attempt_num": 1
    },
    {
      "task_id": 394,
      "prompt": "### Prompt\nWrite a function to check if given tuple contains no duplicates.\n\n### Signature\ndef check_distinct(test_tup):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))",
      "test_content": "from llm_output import check_distinct\n\ndef check(candidate):\n    assert candidate((1, 4, 5, 6, 1, 4)) == False\n    assert candidate((1, 4, 5, 6)) == True\n    assert candidate((2, 3, 4, 5, 6)) == True\n\ncheck(check_distinct)",
      "context": "{\"function_name\": \"check_distinct\"}",
      "attempt_num": 1
    },
    {
      "task_id": 395,
      "prompt": "### Prompt\nWrite a python function to find the first non-repeated character in a given string.\n\n### Signature\ndef first_non_repeating_character(str1):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom collections import Counter\n\ndef first_non_repeating_character(str1):\n    # Count the occurrences of each character in the string\n    char_count = Counter(str1)\n    \n    # Iterate through the string to find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None\n\n###END===",
      "test_content": "from llm_output import first_non_repeating_character\n\ndef check(candidate):\n    assert candidate(\"abcabc\") == None\n    assert candidate(\"abc\") == \"a\"\n    assert candidate(\"ababc\") == \"c\"\n\ncheck(first_non_repeating_character)",
      "context": "{\"function_name\": \"first_non_repeating_character\"}",
      "attempt_num": 1
    },
    {
      "task_id": 397,
      "prompt": "### Prompt\nWrite a function to find the median of three numbers.\n\n### Signature\ndef median_numbers(a,b,c):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def median_numbers(a, b, c):\n    # Sort the numbers\n    numbers = sorted([a, b, c])\n    # Return the middle number\n    return numbers[1]",
      "test_content": "from llm_output import median_numbers\n\ndef check(candidate):\n    assert candidate(25,55,65)==55.0\n    assert candidate(20,10,30)==20.0\n    assert candidate(15,45,75)==45.0\n\ncheck(median_numbers)",
      "context": "{\"function_name\": \"median_numbers\"}",
      "attempt_num": 1
    },
    {
      "task_id": 399,
      "prompt": "### Prompt\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\n### Signature\ndef bitwise_xor(test_tup1, test_tup2):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def bitwise_xor(test_tup1, test_tup2):\n    # Initialize an empty list to store the results\n    res = []\n    \n    # Iterate over the elements of the tuples\n    for i, j in zip(test_tup1, test_tup2):\n        # Perform bitwise XOR operation and append the result to the list\n        res.append(i ^ j)\n    \n    # Convert the list to a tuple and return it\n    return tuple(res)",
      "test_content": "from llm_output import bitwise_xor\n\ndef check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    assert candidate((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n    assert candidate((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)\n\ncheck(bitwise_xor)",
      "context": "{\"function_name\": \"bitwise_xor\"}",
      "attempt_num": 1
    },
    {
      "task_id": 401,
      "prompt": "### Prompt\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n### Signature\ndef add_nested_tuples(test_tup1, test_tup2):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int, ...], ...], test_tup2: Tuple[Tuple[int, ...], ...]) -> Tuple[Tuple[int, ...], ...]:\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over the elements of the first tuple\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        # Perform element-wise addition of the tuples\n        added_tuple = tuple(a + b for a, b in zip(tup1, tup2))\n        # Append the result to the list\n        result.append(added_tuple)\n    \n    # Convert the list to a tuple and return\n    return tuple(result)",
      "test_content": "from llm_output import add_nested_tuples\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ncheck(add_nested_tuples)",
      "context": "{\"function_name\": \"add_nested_tuples\"}",
      "attempt_num": 1
    },
    {
      "task_id": 404,
      "prompt": "### Prompt\nWrite a python function to find the minimum of two numbers.\n\n### Signature\ndef minimum(a,b):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def minimum(a, b):\n    return a if a < b else b",
      "test_content": "from llm_output import minimum\n\ndef check(candidate):\n    assert candidate(1,2) == 1\n    assert candidate(-5,-4) == -5\n    assert candidate(0,0) == 0\n\ncheck(minimum)",
      "context": "{\"function_name\": \"minimum\"}",
      "attempt_num": 1
    },
    {
      "task_id": 405,
      "prompt": "### Prompt\nWrite a function to check whether an element exists within a tuple.\n\n### Signature\ndef check_tuplex(tuplex,tuple1):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\ndef check_tuplex(tuplex, tuple1):\n    # Check if tuple1 is a subset of tuplex\n    return tuple1 in tuplex\n\n# Example usage:\ntuplex = (1, 2, 3, 4, 5)\ntuple1 = (2, 3)\nprint(check_tuplex(tuplex, tuple1))  # Output: True\n\ntuple1 = (6, 7)\nprint(check_tuplex(tuplex, tuple1))  # Output: False\n###END===",
      "test_content": "from llm_output import check_tuplex\n\ndef check(candidate):\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),\"\"\"r\"\"\")==True\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),\"\"\"5\"\"\")==False\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n\ncheck(check_tuplex)",
      "context": "{\"function_name\": \"check_tuplex\"}",
      "attempt_num": 1
    },
    {
      "task_id": 406,
      "prompt": "### Prompt\nWrite a python function to find whether the parity of a given number is odd.\n\n### Signature\ndef find_Parity(x):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\ndef find_Parity(x):\n    # Check if the number is odd by using the modulus operator\n    return x % 2 != 0\n\n###END===",
      "test_content": "from llm_output import find_Parity\n\ndef check(candidate):\n    assert candidate(12) == False\n    assert candidate(7) == True\n    assert candidate(10) == False\n\ncheck(find_Parity)",
      "context": "{\"function_name\": \"find_Parity\"}",
      "attempt_num": 1
    },
    {
      "task_id": 409,
      "prompt": "### Prompt\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\n### Signature\ndef min_product_tuple(list1):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    min_product = float('inf')\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product",
      "test_content": "from llm_output import min_product_tuple\n\ndef check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert candidate([(10,20), (15,2), (5,10)] )==30\n    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==100\n\ncheck(min_product_tuple)",
      "context": "{\"function_name\": \"min_product_tuple\"}",
      "attempt_num": 1
    },
    {
      "task_id": 411,
      "prompt": "### Prompt\nWrite a function to convert the given snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def snake_to_camel(word):\n    # Split the word by underscores\n    parts = word.split('_')\n    # Capitalize the first letter of each part and join them together\n    return ''.join(part.capitalize() for part in parts)",
      "test_content": "from llm_output import snake_to_camel\n\ndef check(candidate):\n    assert candidate('android_tv') == 'AndroidTv'\n    assert candidate('google_pixel') == 'GooglePixel'\n    assert candidate('apple_watch') == 'AppleWatch'\n\ncheck(snake_to_camel)",
      "context": "{\"function_name\": \"snake_to_camel\"}",
      "attempt_num": 1
    },
    {
      "task_id": 412,
      "prompt": "### Prompt\nWrite a python function to remove odd numbers from a given list.\n\n### Signature\ndef remove_odd(l):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def remove_odd(l):\n    return [x for x in l if x % 2 == 0]",
      "test_content": "from llm_output import remove_odd\n\ndef check(candidate):\n    assert candidate([1,2,3]) == [2]\n    assert candidate([2,4,6]) == [2,4,6]\n    assert candidate([10,20,3]) == [10,20]\n\ncheck(remove_odd)",
      "context": "{\"function_name\": \"remove_odd\"}",
      "attempt_num": 1
    },
    {
      "task_id": 413,
      "prompt": "### Prompt\nWrite a function to extract the nth element from a given list of tuples.\n\n### Signature\ndef extract_nth_element(list1, n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def extract_nth_element(list1, n):\n    # Check if the list is empty\n    if not list1:\n        return None\n    \n    # Check if n is within the valid range\n    if n < 0 or n >= len(list1):\n        return None\n    \n    # Extract the nth element from each tuple\n    result = [t[n] for t in list1]\n    \n    return result",
      "test_content": "from llm_output import extract_nth_element\n\ndef check(candidate):\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n\ncheck(extract_nth_element)",
      "context": "{\"function_name\": \"extract_nth_element\"}",
      "attempt_num": 1
    },
    {
      "task_id": 414,
      "prompt": "### Prompt\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\n### Signature\ndef overlapping(list1,list2):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom typing import *\nfrom collections import *\n\ndef overlapping(list1, list2):\n    # Convert both lists to sets to remove duplicates and allow for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Check if there is any intersection between the two sets\n    return not set1.isdisjoint(set2)\n\n###END===",
      "test_content": "from llm_output import overlapping\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5],[6,7,8,9]) == False\n    assert candidate([1,2,3],[4,5,6]) == False\n    assert candidate([1,4,5],[1,4,5]) == True\n\ncheck(overlapping)",
      "context": "{\"function_name\": \"overlapping\"}",
      "attempt_num": 1
    },
    {
      "task_id": 418,
      "prompt": "### Prompt\nWrite a python function to find the element of a list having maximum length.\n\n### Signature\ndef Find_Max(lst):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def Find_Max(lst):\n    if not lst:\n        return None  # Return None if the list is empty\n\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element",
      "test_content": "from llm_output import Find_Max\n\ndef check(candidate):\n    assert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    assert candidate([[1],[1,2],[1,2,3]]) == [1,2,3]\n    assert candidate([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n\ncheck(Find_Max)",
      "context": "{\"function_name\": \"Find_Max\"}",
      "attempt_num": 1
    },
    {
      "task_id": 422,
      "prompt": "### Prompt\nWrite a python function to find the average of cubes of first n natural numbers.\n\n### Signature\ndef find_Average_Of_Cube(n):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "###START===\nfrom typing import *\nfrom collections import *\n\ndef find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average\n    average = sum_of_cubes / n\n    return average\n\n###END===",
      "test_content": "from llm_output import find_Average_Of_Cube\n\ndef check(candidate):\n    assert candidate(2) == 4.5\n    assert candidate(3) == 12\n    assert candidate(1) == 1\n\ncheck(find_Average_Of_Cube)",
      "context": "{\"function_name\": \"find_Average_Of_Cube\"}",
      "attempt_num": 1
    },
    {
      "task_id": 424,
      "prompt": "### Prompt\nWrite a function to extract only the rear index element of each string in the given tuple.\n\n### Signature\ndef extract_rear(test_tuple):",
      "llm_name": "Qwen/Qwen2.5-Coder-3B-Instruct",
      "solution": "def extract_rear(test_tuple):\n    # Initialize an empty list to store the rear index elements\n    rear_elements = []\n    \n    # Iterate over each string in the tuple\n    for string in test_tuple:\n        # Check if the string is not empty\n        if string:\n            # Append the last character of the string to the list\n            rear_elements.append(string[-1])\n    \n    # Return the list of rear index elements\n    return rear_elements",
      "test_content": "from llm_output import extract_rear\n\ndef check(candidate):\n    assert candidate(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n    assert candidate(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\n    assert candidate(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n\ncheck(extract_rear)",
      "context": "{\"function_name\": \"extract_rear\"}",
      "attempt_num": 1
    }
  ]
}