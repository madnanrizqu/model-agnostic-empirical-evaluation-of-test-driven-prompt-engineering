[
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 425,
    "solution": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of sublists containing a particular element.\n\n### Signature\ndef count_element_in_list(list1, x):\n\n### Test\nassert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
    "timestamp": "2025-10-17T16:58:12.545492",
    "response_time": "2.41",
    "context": "{\"function_name\": \"count_element_in_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 426,
    "solution": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to filter odd numbers.\n\n### Signature\ndef filter_oddnumbers(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
    "timestamp": "2025-10-17T16:58:13.406760",
    "response_time": "0.86",
    "context": "{\"function_name\": \"filter_oddnumbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 427,
    "solution": "from datetime import datetime\n\ndef change_date_format(dt):\n    date_obj = datetime.strptime(dt, \"%Y-%m-%d\")\n    return date_obj.strftime(\"%d-%m-%Y\")",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n### Signature\ndef change_date_format(dt):\n\n### Test\nassert candidate(\"2026-01-02\") == \"\"\"02-01-2026\"\"\"",
    "timestamp": "2025-10-17T16:58:14.606116",
    "response_time": "1.20",
    "context": "{\"function_name\": \"change_date_format\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 428,
    "solution": "def shell_sort(my_list):\n    sublist_count = len(my_list) // 2\n    while sublist_count > 0:\n        for start_position in range(sublist_count):\n            gap_insertion_sort(my_list, start_position, sublist_count)\n        sublist_count = sublist_count // 2\n\ndef gap_insertion_sort(my_list, start, gap):\n    for i in range(start + gap, len(my_list), gap):\n        current_value = my_list[i]\n        position = i\n\n        while position >= gap and my_list[position - gap] > current_value:\n            my_list[position] = my_list[position - gap]\n            position = position - gap\n\n        my_list[position] = current_value",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort the given array by using shell sort.\n\n### Signature\ndef shell_sort(my_list):\n\n### Test\nassert candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
    "timestamp": "2025-10-17T16:58:18.238250",
    "response_time": "3.63",
    "context": "{\"function_name\": \"shell_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 429,
    "solution": "def and_tuples(test_tup1, test_tup2):\n    result = tuple(a & b for a, b in zip(test_tup1, test_tup2))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\n### Signature\ndef and_tuples(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
    "timestamp": "2025-10-17T16:58:19.484109",
    "response_time": "1.25",
    "context": "{\"function_name\": \"and_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 430,
    "solution": "import math\n\ndef parabola_directrix(a, b, c):\n    return c - (1 / (4 * a))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the directrix of a parabola.\n\n### Signature\ndef parabola_directrix(a, b, c):\n\n### Test\nassert candidate(5,3,2)==-198",
    "timestamp": "2025-10-17T16:58:20.427128",
    "response_time": "0.94",
    "context": "{\"function_name\": \"parabola_directrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 431,
    "solution": "def common_element(list1, list2):\n    return bool(set(list1) & set(list2))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes two lists and returns true if they have at least one common element.\n\n### Signature\ndef common_element(list1, list2):\n\n### Test\nassert candidate([1,2,3,4,5], [5,6,7,8,9])==True",
    "timestamp": "2025-10-17T16:58:21.222381",
    "response_time": "0.79",
    "context": "{\"function_name\": \"common_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 432,
    "solution": "def median_trapezium(base1, base2, height):\n    return (base1 + base2) / 2",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the median length of a trapezium.\n\n### Signature\ndef median_trapezium(base1,base2,height):\n\n### Test\nassert candidate(15,25,35)==20",
    "timestamp": "2025-10-17T16:58:22.176263",
    "response_time": "0.95",
    "context": "{\"function_name\": \"median_trapezium\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 433,
    "solution": "def check_greater(arr, number):\n    for element in arr:\n        if number <= element:\n            return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\n### Signature\ndef check_greater(arr, number):\n\n### Test\nassert candidate([1, 2, 3, 4, 5], 4) == False",
    "timestamp": "2025-10-17T16:58:23.124236",
    "response_time": "0.95",
    "context": "{\"function_name\": \"check_greater\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 434,
    "solution": "import re\n\ndef text_match_one(text):\n    pattern = 'ab+'\n    return bool(re.search(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by one or more b's.\n\n### Signature\ndef text_match_one(text):\n\n### Test\nassert candidate(\"ac\")==False",
    "timestamp": "2025-10-17T16:58:24.025605",
    "response_time": "0.90",
    "context": "{\"function_name\": \"text_match_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 435,
    "solution": "def last_Digit(n) :\n    return n % 10",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the last digit of a given number.\n\n### Signature\ndef last_Digit(n) :\n\n### Test\nassert candidate(123) == 3",
    "timestamp": "2025-10-17T16:58:24.694335",
    "response_time": "0.67",
    "context": "{\"function_name\": \"last_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 436,
    "solution": "def neg_nos(list1):\n    return [num for num in list1 if num < 0]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to return the negative numbers in a list.\n\n### Signature\ndef neg_nos(list1):\n\n### Test\nassert candidate([-1,4,5,-6]) == [-1,-6]",
    "timestamp": "2025-10-17T16:58:25.538863",
    "response_time": "0.84",
    "context": "{\"function_name\": \"neg_nos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 437,
    "solution": "def remove_odd(str1):\n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove odd characters in a string.\n\n### Signature\ndef remove_odd(str1):\n\n### Test\nassert candidate(\"python\")==(\"yhn\")",
    "timestamp": "2025-10-17T16:58:26.558774",
    "response_time": "1.02",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 438,
    "solution": "from collections import defaultdict\n\ndef count_bidirectional(test_list):\n    bidirectional_count = 0\n    seen = defaultdict(int)\n    \n    for pair in test_list:\n        if seen[pair] == 1:\n            bidirectional_count += 1\n        seen[pair] += 1\n        seen[pair[::-1]] += 1\n    \n    return bidirectional_count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count bidirectional tuple pairs.\n\n### Signature\ndef count_bidirectional(test_list):\n\n### Test\nassert candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3",
    "timestamp": "2025-10-17T16:58:28.685736",
    "response_time": "2.13",
    "context": "{\"function_name\": \"count_bidirectional\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 439,
    "solution": "def multiple_to_single(L):\n    return int(''.join(str(i) for i in L))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to join a list of multiple integers into a single integer.\n\n### Signature\ndef multiple_to_single(L):\n\n### Test\nassert candidate([11, 33, 50])==113350",
    "timestamp": "2025-10-17T16:58:29.479788",
    "response_time": "0.79",
    "context": "{\"function_name\": \"multiple_to_single\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 440,
    "solution": "import re\n\ndef find_adverb_position(text):\n    match = re.search(r\"\\b\\w+ly\\b\", text)\n    if match:\n        return match.start(), match.end(), match.group(0)\n    else:\n        return None",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the first adverb and their positions in a given sentence.\n\n### Signature\ndef find_adverb_position(text):\n\n### Test\nassert candidate(\"clearly!! we can see the sky\")==(0, 7, \"\"\"clearly\"\"\")",
    "timestamp": "2025-10-17T16:58:30.940910",
    "response_time": "1.46",
    "context": "{\"function_name\": \"find_adverb_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 441,
    "solution": "import math\n\ndef surfacearea_cube(l):\n    return 6 * l * l",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cube of a given size.\n\n### Signature\ndef surfacearea_cube(l):\n\n### Test\nassert candidate(5)==150",
    "timestamp": "2025-10-17T16:58:31.677281",
    "response_time": "0.74",
    "context": "{\"function_name\": \"surfacearea_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 442,
    "solution": "import numpy as np\n\ndef positive_count(nums):\n    return np.mean(np.array(nums) > 0)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the ration of positive numbers in an array of integers.\n\n### Signature\ndef positive_count(nums):\n\n### Test\nassert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
    "timestamp": "2025-10-17T16:58:32.527368",
    "response_time": "0.85",
    "context": "{\"function_name\": \"positive_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 443,
    "solution": "def largest_neg(list1):\n    # Filter out negative numbers from the list\n    negative_numbers = [num for num in list1 if num < 0]\n    \n    # Check if there are any negative numbers\n    if not negative_numbers:\n        return None  # Return None if no negative numbers are found\n    \n    # Return the largest negative number\n    return max(negative_numbers)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the largest negative number from the given list.\n\n### Signature\ndef largest_neg(list1):\n\n### Test\nassert candidate([1,2,3,-4,-6]) == -6",
    "timestamp": "2025-10-17T16:58:34.671440",
    "response_time": "2.14",
    "context": "{\"function_name\": \"largest_neg\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 444,
    "solution": "from typing import List, Tuple\n\ndef trim_tuple(test_list: List[Tuple[int]], K: int) -> str:\n    result = [tuple(sub[K:]) for sub in test_list]\n    return str(result)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to trim each tuple by k in the given tuple list.\n\n### Signature\ndef trim_tuple(test_list, K):\n\n### Test\nassert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
    "timestamp": "2025-10-17T16:58:35.991677",
    "response_time": "1.32",
    "context": "{\"function_name\": \"trim_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 445,
    "solution": "def index_multiplication(test_tup1, test_tup2):\n    result = tuple(tuple(a * b for a, b in zip(inner_tup1, inner_tup2))\n                   for inner_tup1, inner_tup2 in zip(test_tup1, test_tup2))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n### Signature\ndef index_multiplication(test_tup1, test_tup2):\n\n### Test\nassert candidate(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
    "timestamp": "2025-10-17T16:58:37.824408",
    "response_time": "1.83",
    "context": "{\"function_name\": \"index_multiplication\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 446,
    "solution": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    counter = Counter(tup)\n    return sum(counter[element] for element in lst if element in counter)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the occurence of all elements of list in a tuple.\n\n### Signature\ndef count_Occurrence(tup, lst):\n\n### Test\nassert candidate(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
    "timestamp": "2025-10-17T16:58:38.984824",
    "response_time": "1.16",
    "context": "{\"function_name\": \"count_Occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 447,
    "solution": "def cube_nums(nums):\n    return [num ** 3 for num in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find cubes of individual elements in a list.\n\n### Signature\ndef cube_nums(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
    "timestamp": "2025-10-17T16:58:39.725328",
    "response_time": "0.74",
    "context": "{\"function_name\": \"cube_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 448,
    "solution": "def cal_sum(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 5\n    elif n == 2:\n        return 7\n    \n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        next_val = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_val)\n    \n    return sum(perrin)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the sum of perrin numbers.\n\n### Signature\ndef cal_sum(n):\n\n### Test\nassert candidate(9) == 49",
    "timestamp": "2025-10-17T16:58:42.457170",
    "response_time": "2.73",
    "context": "{\"function_name\": \"cal_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 450,
    "solution": "def extract_string(str, l):\n    return [s for s in str if len(s) > l]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract specified size of strings from a given list of string values.\n\n### Signature\ndef extract_string(str, l):\n\n### Test\nassert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
    "timestamp": "2025-10-17T16:58:43.291075",
    "response_time": "0.83",
    "context": "{\"function_name\": \"extract_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 451,
    "solution": "def remove_whitespaces(text1):\n    return text1.replace(\" \", \"\")",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from the given string.\n\n### Signature\ndef remove_whitespaces(text1):\n\n### Test\nassert candidate(' Google    Flutter ') == 'GoogleFlutter'",
    "timestamp": "2025-10-17T16:58:44.011074",
    "response_time": "0.72",
    "context": "{\"function_name\": \"remove_whitespaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 452,
    "solution": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n### Signature\ndef loss_amount(actual_cost,sale_amount):\n\n### Test\nassert candidate(1500,1200)==0",
    "timestamp": "2025-10-17T16:58:45.093218",
    "response_time": "1.08",
    "context": "{\"function_name\": \"loss_amount\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 453,
    "solution": "def sumofFactors(n):\n    # Initialize result\n    result = 0\n    \n    # Iterate through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # Check if i is even\n            if i % 2 == 0:\n                result += i\n                \n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of even factors of a number.\n\n### Signature\ndef sumofFactors(n) :\n\n### Test\nassert candidate(18) == 26",
    "timestamp": "2025-10-17T16:58:47.440315",
    "response_time": "2.35",
    "context": "{\"function_name\": \"sumofFactors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 454,
    "solution": "import re\n\ndef text_match_wordz(text):\n    pattern = '\\w*z.\\w*'\n    if re.search(pattern,  text):\n        return True\n    else:\n        return False",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a word containing 'z'.\n\n### Signature\ndef text_match_wordz(text):\n\n### Test\nassert candidate(\"pythonz.\")==True",
    "timestamp": "2025-10-17T16:58:48.680440",
    "response_time": "1.24",
    "context": "{\"function_name\": \"text_match_wordz\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 455,
    "solution": "def check_monthnumb_number(monthnum2):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return monthnum2 in months_with_31_days",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 31 days or not.\n\n### Signature\ndef check_monthnumb_number(monthnum2):\n\n### Test\nassert candidate(5)==True",
    "timestamp": "2025-10-17T16:58:50.519917",
    "response_time": "1.84",
    "context": "{\"function_name\": \"check_monthnumb_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 456,
    "solution": "def reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to reverse each string in a given list of string values.\n\n### Signature\ndef reverse_string_list(stringlist):\n\n### Test\nassert candidate(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
    "timestamp": "2025-10-17T16:58:51.301384",
    "response_time": "0.78",
    "context": "{\"function_name\": \"reverse_string_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 457,
    "solution": "from typing import List\n\ndef Find_Min(lst: List[List[int]]) -> List[int]:\n    return min(lst, key=len)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sublist having minimum length.\n\n### Signature\ndef Find_Min(lst):\n\n### Test\nassert candidate([[1],[1,2],[1,2,3]]) == [1]",
    "timestamp": "2025-10-17T16:58:52.210645",
    "response_time": "0.91",
    "context": "{\"function_name\": \"Find_Min\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 458,
    "solution": "def rectangle_area(l, b):\n    return l * b",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the area of a rectangle.\n\n### Signature\ndef rectangle_area(l,b):\n\n### Test\nassert candidate(10,20)==200",
    "timestamp": "2025-10-17T16:58:52.855949",
    "response_time": "0.64",
    "context": "{\"function_name\": \"rectangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 459,
    "solution": "import re\n\ndef remove_uppercase(str1):\n    return re.sub('[A-Z]', '', str1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove uppercase substrings from a given string.\n\n### Signature\ndef remove_uppercase(str1):\n\n### Test\nassert candidate('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
    "timestamp": "2025-10-17T16:58:53.691746",
    "response_time": "0.83",
    "context": "{\"function_name\": \"remove_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 460,
    "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst if sublist]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to get the first element of each sublist.\n\n### Signature\ndef Extract(lst):\n\n### Test\nassert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
    "timestamp": "2025-10-17T16:58:54.466889",
    "response_time": "0.77",
    "context": "{\"function_name\": \"Extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 461,
    "solution": "def upper_ctr(str):\n    return sum(1 for char in str if char.isupper())",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the upper case characters in a given string.\n\n### Signature\ndef upper_ctr(str):\n\n### Test\nassert candidate('PYthon') == 1",
    "timestamp": "2025-10-17T16:58:55.245100",
    "response_time": "0.78",
    "context": "{\"function_name\": \"upper_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 462,
    "solution": "from itertools import combinations\n\ndef combinations_list(list1):\n    result = []\n    for i in range(len(list1) + 1):\n        for combo in combinations(list1, i):\n            result.append(list(combo))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find all possible combinations of the elements of a given list.\n\n### Signature\ndef combinations_list(list1):\n\n### Test\nassert candidate(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
    "timestamp": "2025-10-17T16:58:56.681489",
    "response_time": "1.44",
    "context": "{\"function_name\": \"combinations_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 463,
    "solution": "import sys\n\ndef max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = -sys.maxsize - 1\n    current_max = 1\n    current_min = 1\n    \n    for num in arr:\n        if num == 0:\n            current_max, current_min = 1, 1\n            continue\n        \n        temp = current_max * num\n        current_max = max(num, temp, current_min * num)\n        current_min = min(num, temp, current_min * num)\n        \n        max_product = max(max_product, current_max)\n    \n    return max_product",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum product subarray of the given array.\n\n### Signature\ndef max_subarray_product(arr):\n\n### Test\nassert candidate([1, -2, -3, 0, 7, -8, -2]) == 112",
    "timestamp": "2025-10-17T16:58:59.967972",
    "response_time": "3.29",
    "context": "{\"function_name\": \"max_subarray_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 464,
    "solution": "def check_value(dict, n):\n    return all(value == n for value in dict.values())",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if all values are same in a dictionary.\n\n### Signature\ndef check_value(dict, n):\n\n### Test\nassert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
    "timestamp": "2025-10-17T16:59:00.758809",
    "response_time": "0.79",
    "context": "{\"function_name\": \"check_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 465,
    "solution": "def drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value is not None}",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to drop empty items from a given dictionary.\n\n### Signature\ndef drop_empty(dict1):\n\n### Test\nassert candidate({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
    "timestamp": "2025-10-17T16:59:01.725612",
    "response_time": "0.97",
    "context": "{\"function_name\": \"drop_empty\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 468,
    "solution": "from functools import reduce\nfrom operator import mul\n\ndef max_product(arr):\n    n = len(arr)\n    dp = [arr[i] for i in range(n)]\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] * arr[i]:\n                dp[i] = dp[j] * arr[i]\n    \n    return max(dp)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n### Signature\ndef max_product(arr):\n\n### Test\nassert candidate([3, 100, 4, 5, 150, 6]) == 3000",
    "timestamp": "2025-10-17T16:59:04.162998",
    "response_time": "2.44",
    "context": "{\"function_name\": \"max_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 470,
    "solution": "def add_pairwise(test_tup):\n    return tuple(x + y for x, y in zip(test_tup, test_tup[1:]))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n### Signature\ndef add_pairwise(test_tup):\n\n### Test\nassert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
    "timestamp": "2025-10-17T16:59:05.202502",
    "response_time": "1.04",
    "context": "{\"function_name\": \"add_pairwise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 471,
    "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the product of the array multiplication modulo n.\n\n### Signature\ndef find_remainder(arr, n):\n\n### Test\nassert candidate([ 100, 10, 5, 25, 35, 14 ],11) ==9",
    "timestamp": "2025-10-17T16:59:06.330556",
    "response_time": "1.13",
    "context": "{\"function_name\": \"find_remainder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 472,
    "solution": "def check_Consecutive(l):\n    return sorted(l) == list(range(min(l), max(l) + 1))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\n### Signature\ndef check_Consecutive(l):\n\n### Test\nassert candidate([1,2,3,4,5]) == True",
    "timestamp": "2025-10-17T16:59:07.216312",
    "response_time": "0.88",
    "context": "{\"function_name\": \"check_Consecutive\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 473,
    "solution": "from typing import List, Tuple, Set\n\ndef tuple_intersection(test_list1: List[Tuple[int]], test_list2: List[Tuple[int]]) -> Set[Tuple[int]]:\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return intersection",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n### Signature\ndef tuple_intersection(test_list1, test_list2):\n\n### Test\nassert candidate([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
    "timestamp": "2025-10-17T16:59:09.090354",
    "response_time": "1.87",
    "context": "{\"function_name\": \"tuple_intersection\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 474,
    "solution": "def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to replace characters in a string.\n\n### Signature\ndef replace_char(str1,ch,newch):\n\n### Test\nassert candidate(\"polygon\",\"\"\"y\"\"\",\"\"\"l\"\"\")==(\"pollgon\")",
    "timestamp": "2025-10-17T16:59:09.952863",
    "response_time": "0.86",
    "context": "{\"function_name\": \"replace_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 475,
    "solution": "import operator\n\ndef sort_counter(dict1):\n    return sorted(dict1.items(), key=operator.itemgetter(1), reverse=True)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a dictionary by value.\n\n### Signature\ndef sort_counter(dict1):\n\n### Test\nassert candidate({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
    "timestamp": "2025-10-17T16:59:10.911573",
    "response_time": "0.96",
    "context": "{\"function_name\": \"sort_counter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 476,
    "solution": "def big_sum(nums):\n    return max(nums) + min(nums)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\n### Signature\ndef big_sum(nums):\n\n### Test\nassert candidate([1,2,3]) == 4",
    "timestamp": "2025-10-17T16:59:11.557307",
    "response_time": "0.64",
    "context": "{\"function_name\": \"big_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 477,
    "solution": "def is_lower(string):\n    return string.lower()",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to convert the given string to lower case.\n\n### Signature\ndef is_lower(string):\n\n### Test\nassert candidate(\"InValid\") == \"invalid\"",
    "timestamp": "2025-10-17T16:59:12.176321",
    "response_time": "0.62",
    "context": "{\"function_name\": \"is_lower\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 478,
    "solution": "import re\n\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]', '', str1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove lowercase substrings from a given string.\n\n### Signature\ndef remove_lowercase(str1):\n\n### Test\nassert candidate(\"PYTHon\")==(\"\"\"PYTH\"\"\")",
    "timestamp": "2025-10-17T16:59:13.013303",
    "response_time": "0.84",
    "context": "{\"function_name\": \"remove_lowercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 479,
    "solution": "def first_Digit(n):\n    while n >= 10:\n        n = n // 10\n    return n",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the first digit of a given number.\n\n### Signature\ndef first_Digit(n) :\n\n### Test\nassert candidate(123) == 1",
    "timestamp": "2025-10-17T16:59:13.984762",
    "response_time": "0.97",
    "context": "{\"function_name\": \"first_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 554,
    "solution": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and only returns the odd ones.\n\n### Signature\ndef Split(list):\n\n### Test\nassert candidate([1,2,3,4,5,6]) == [1,3,5]",
    "timestamp": "2025-10-17T16:59:14.840474",
    "response_time": "0.85",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 555,
    "solution": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n### Signature\ndef difference(n) :\n\n### Test\nassert candidate(3) == 30",
    "timestamp": "2025-10-17T16:59:16.538020",
    "response_time": "1.70",
    "context": "{\"function_name\": \"difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 556,
    "solution": "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose xor value is odd.\n\n### Signature\ndef find_Odd_Pair(A,N) :\n\n### Test\nassert candidate([5,4,7,2,1],5) == 6",
    "timestamp": "2025-10-17T16:59:18.586666",
    "response_time": "2.05",
    "context": "{\"function_name\": \"find_Odd_Pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 557,
    "solution": "def toggle_string(string):\n    return string.swapcase()",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to toggle the case of all characters in a string.\n\n### Signature\ndef toggle_string(string):\n\n### Test\nassert candidate(\"Python\")==(\"pYTHON\")",
    "timestamp": "2025-10-17T16:59:19.165230",
    "response_time": "0.58",
    "context": "{\"function_name\": \"toggle_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 558,
    "solution": "import math\n\ndef digit_distance_nums(n1, n2):\n    return sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str(n1).zfill(10), str(n2).zfill(10)))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of the per-digit difference between two integers.\n\n### Signature\ndef digit_distance_nums(n1, n2):\n\n### Test\nassert candidate(1,2) == 1",
    "timestamp": "2025-10-17T16:59:20.716133",
    "response_time": "1.55",
    "context": "{\"function_name\": \"digit_distance_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 559,
    "solution": "def max_sub_array_sum(a, size):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n            \n    return max_so_far",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n\n### Signature\ndef max_sub_array_sum(a, size):\n\n### Test\nassert candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
    "timestamp": "2025-10-17T16:59:23.311485",
    "response_time": "2.59",
    "context": "{\"function_name\": \"max_sub_array_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 560,
    "solution": "def union_elements(test_tup1, test_tup2):\n    # Combine both tuples and convert to a set to remove duplicates\n    combined_set = set(test_tup1) | set(test_tup2)\n    # Convert the set back to a sorted tuple\n    result = tuple(sorted(combined_set))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n\n### Signature\ndef union_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
    "timestamp": "2025-10-17T16:59:25.195959",
    "response_time": "1.88",
    "context": "{\"function_name\": \"union_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 562,
    "solution": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest sublists.\n\n### Signature\ndef Find_Max_Length(lst):\n\n### Test\nassert candidate([[1],[1,4],[5,6,7,8]]) == 4",
    "timestamp": "2025-10-17T16:59:25.957377",
    "response_time": "0.76",
    "context": "{\"function_name\": \"Find_Max_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 563,
    "solution": "import re\n\ndef extract_values(text):\n    return re.findall(r'\"(.*?)\"', text)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks from a string.\n\n### Signature\ndef extract_values(text):\n\n### Test\nassert extract_values(\"Python\", \"PHP\", \"Java\") == [\"Python\", \"PHP\", \"Java\"]",
    "timestamp": "2025-10-17T16:59:26.759685",
    "response_time": "0.80",
    "context": "{\"function_name\": \"extract_values\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 564,
    "solution": "from itertools import combinations\n\ndef count_Pairs(arr,n):\n    count = 0\n    for pair in combinations(arr, 2):\n        if pair[0] != pair[1]:\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n### Signature\ndef count_Pairs(arr,n):\n\n### Test\nassert candidate([1,2,1],3) == 2",
    "timestamp": "2025-10-17T16:59:28.198649",
    "response_time": "1.44",
    "context": "{\"function_name\": \"count_Pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 565,
    "solution": "def split(word):\n    return list(word)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to split a string into characters.\n\n### Signature\ndef split(word):\n\n### Test\nassert candidate('python') == ['p','y','t','h','o','n']",
    "timestamp": "2025-10-17T16:59:28.735510",
    "response_time": "0.54",
    "context": "{\"function_name\": \"split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 566,
    "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to get the sum of the digits of a non-negative integer.\n\n### Signature\ndef sum_digits(n):\n\n### Test\nassert candidate(345)==12",
    "timestamp": "2025-10-17T16:59:29.477643",
    "response_time": "0.74",
    "context": "{\"function_name\": \"sum_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 567,
    "solution": "def issort_list(list1):\n    return list1 == sorted(list1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether a specified list is sorted or not.\n\n### Signature\ndef issort_list(list1):\n\n### Test\nassert candidate([1,2,4,6,8,10,12,14,16,17])==True",
    "timestamp": "2025-10-17T16:59:30.168695",
    "response_time": "0.69",
    "context": "{\"function_name\": \"issort_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 568,
    "solution": "def empty_list(length):\n    return [{} for _ in range(length)]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to create a list of N empty dictionaries.\n\n### Signature\ndef empty_list(length):\n\n### Test\nassert candidate(5)==[{},{},{},{},{}]",
    "timestamp": "2025-10-17T16:59:30.963462",
    "response_time": "0.79",
    "context": "{\"function_name\": \"empty_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 569,
    "solution": "def sort_sublists(list1):\n    return [sorted(sublist) for sublist in list1]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(list1):\n\n### Test\nassert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
    "timestamp": "2025-10-17T16:59:31.755511",
    "response_time": "0.79",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 572,
    "solution": "def two_unique_nums(nums):\n    return list(set(nums))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove duplicate numbers from a given number of lists.\n\n### Signature\ndef two_unique_nums(nums):\n\n### Test\nassert candidate([1,2,3,2,3,4,5]) == [1, 4, 5]",
    "timestamp": "2025-10-17T16:59:32.346401",
    "response_time": "0.59",
    "context": "{\"function_name\": \"two_unique_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 573,
    "solution": "from functools import reduce\nfrom operator import mul\n\ndef unique_product(list_data):\n    unique_numbers = set(list_data)\n    return reduce(mul, unique_numbers, 1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to calculate the product of the unique numbers in a given list.\n\n### Signature\ndef unique_product(list_data):\n\n### Test\nassert candidate([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
    "timestamp": "2025-10-17T16:59:33.484128",
    "response_time": "1.14",
    "context": "{\"function_name\": \"unique_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 574,
    "solution": "import math\n\ndef surfacearea_cylinder(r, h):\n    return 2 * math.pi * r * (r + h)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cylinder.\n\n### Signature\ndef surfacearea_cylinder(r,h):\n\n### Test\nassert candidate(10,5)==942.45",
    "timestamp": "2025-10-17T16:59:34.430493",
    "response_time": "0.95",
    "context": "{\"function_name\": \"surfacearea_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 576,
    "solution": "def is_Sub_Array(A, B):\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether a list is sublist of another or not.\n\n### Signature\ndef is_Sub_Array(A,B):\n\n### Test\nassert candidate([1,4,3,5],[1,2]) == False",
    "timestamp": "2025-10-17T16:59:36.241395",
    "response_time": "1.81",
    "context": "{\"function_name\": \"is_Sub_Array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 577,
    "solution": "def last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    last_digit = 1\n    for i in range(2, n + 1):\n        last_digit = (last_digit * (i % 10)) % 10\n    return last_digit",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the last digit in factorial of a given number.\n\n### Signature\ndef last_Digit_Factorial(n):\n\n### Test\nassert candidate(4) == 4",
    "timestamp": "2025-10-17T16:59:38.185456",
    "response_time": "1.94",
    "context": "{\"function_name\": \"last_Digit_Factorial\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 578,
    "solution": "def interleave_lists(list1, list2, list3):\n    return [item for sublist in zip(list1, list2, list3) for item in sublist]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to interleave 3 lists of the same length into a single flat list.\n\n### Signature\ndef interleave_lists(list1,list2,list3):\n\n### Test\nassert candidate([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
    "timestamp": "2025-10-17T16:59:39.316848",
    "response_time": "1.13",
    "context": "{\"function_name\": \"interleave_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 579,
    "solution": "def find_dissimilar(test_tup1, test_tup2):\n    return tuple(set(test_tup1) ^ set(test_tup2))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the dissimilar elements in the given two tuples.\n\n### Signature\ndef find_dissimilar(test_tup1, test_tup2):\n\n### Test\nassert candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
    "timestamp": "2025-10-17T16:59:40.358754",
    "response_time": "1.04",
    "context": "{\"function_name\": \"find_dissimilar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 580,
    "solution": "def extract_even(test_tuple, even_fnc):\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return tuple(result)\n\ndef even_fnc(x):\n    return x % 2 == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove uneven elements in the nested mixed tuple.\n\n### Signature\ndef even_ele(test_tuple, even_fnc):\n\n### Test\nassert candidate((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
    "timestamp": "2025-10-17T16:59:42.357522",
    "response_time": "2.00",
    "context": "{\"function_name\": \"extract_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 581,
    "solution": "import math\n\ndef surface_Area(b, s):\n    base_area = b ** 2\n    slant_height = math.sqrt(s ** 2 + (b / 2) ** 2)\n    lateral_area = 2 * b * slant_height\n    total_surface_area = base_area + lateral_area\n    return total_surface_area",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\n### Signature\ndef surface_Area(b,s):\n\n### Test\nassert candidate(3,4) == 33",
    "timestamp": "2025-10-17T16:59:44.384812",
    "response_time": "2.03",
    "context": "{\"function_name\": \"surface_Area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 582,
    "solution": "def my_dict(dict1):\n    return not bool(dict1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if a dictionary is empty\n\n### Signature\ndef my_dict(dict1):\n\n### Test\nassert candidate({10})==False",
    "timestamp": "2025-10-17T16:59:45.021866",
    "response_time": "0.64",
    "context": "{\"function_name\": \"my_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 583,
    "solution": "from math import factorial\n\ndef catalan_number(num):\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function which returns nth catalan number.\n\n### Signature\ndef catalan_number(num):\n\n### Test\nassert candidate(10)==16796",
    "timestamp": "2025-10-17T16:59:46.090514",
    "response_time": "1.07",
    "context": "{\"function_name\": \"catalan_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 584,
    "solution": "import re\n\ndef find_adverbs(text):\n    pattern = r\"\\b\\w+ly\\b\"\n    match = re.search(pattern, text)\n    if match:\n        return f\"{match.start()}-{match.end()}: {match.group()}\"\n    else:\n        return None",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n\n### Signature\ndef find_adverbs(text):\n\n### Test\nassert candidate(\"Clearly, he has no excuse for such behavior.\") == \"\"\"0-7: Clearly\"\"\"",
    "timestamp": "2025-10-17T16:59:47.758810",
    "response_time": "1.67",
    "context": "{\"function_name\": \"find_adverbs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 585,
    "solution": "import heapq\n\ndef expensive_items(items,n):\n    return heapq.nlargest(n, items, key=lambda x: x['price'])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n most expensive items in a given dataset.\n\n### Signature\ndef expensive_items(items,n):\n\n### Test\nassert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
    "timestamp": "2025-10-17T16:59:48.710291",
    "response_time": "0.95",
    "context": "{\"function_name\": \"expensive_items\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 586,
    "solution": "def split_Arr(l, n):\n    return l[n:] + l[:n]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n\n### Signature\ndef split_Arr(l, n):\n\n### Test\nassert candidate([12,10,5,6,52,36],2) == [5,6,52,36,12,10]",
    "timestamp": "2025-10-17T16:59:49.460277",
    "response_time": "0.75",
    "context": "{\"function_name\": \"split_Arr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 587,
    "solution": "def list_tuple(listx):\n    return tuple(listx)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a list to a tuple.\n\n### Signature\ndef list_tuple(listx):\n\n### Test\nassert candidate([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
    "timestamp": "2025-10-17T16:59:50.074743",
    "response_time": "0.61",
    "context": "{\"function_name\": \"list_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 588,
    "solution": "def big_diff(nums):\n    return max(nums) - min(nums)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the difference between largest and smallest value in a given list.\n\n### Signature\ndef big_diff(nums):\n\n### Test\nassert candidate([1,2,3,4]) == 3",
    "timestamp": "2025-10-17T16:59:50.732176",
    "response_time": "0.66",
    "context": "{\"function_name\": \"big_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 589,
    "solution": "import math\n\ndef perfect_squares(a, b):\n    return [i**2 for i in range(math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) + 1)]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find perfect squares between two given numbers.\n\n### Signature\ndef perfect_squares(a, b):\n\n### Test\nassert candidate(1,30)==[1, 4, 9, 16, 25]",
    "timestamp": "2025-10-17T16:59:51.896485",
    "response_time": "1.16",
    "context": "{\"function_name\": \"perfect_squares\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 590,
    "solution": "import cmath\n\ndef polar_rect(x, y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(complex(x, y))\n    return (r, theta)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert polar coordinates to rectangular coordinates.\n\n### Signature\ndef polar_rect(x,y):\n\n### Test\nassert candidate(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
    "timestamp": "2025-10-17T16:59:53.232100",
    "response_time": "1.33",
    "context": "{\"function_name\": \"polar_rect\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 591,
    "solution": "def swap_List(newList):\n    # Store the first and last element\n    first = newList[0]\n    last = newList[-1]\n    \n    # Swap the first and last element\n    newList[0] = last\n    newList[-1] = first\n    \n    return newList",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last elements in a list.\n\n### Signature\ndef swap_List(newList):\n\n### Test\nassert candidate([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
    "timestamp": "2025-10-17T16:59:54.923298",
    "response_time": "1.69",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 592,
    "solution": "from math import comb\n\ndef sum_Of_product(n, k):\n    sum_product = 0\n    for i in range(1, n):\n        sum_product += comb(n, i) * comb(n, i - 1)\n    return sum_product",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\n### Signature\ndef binomial_Coeff(n,k):\n\n### Test\nassert candidate(3) == 15",
    "timestamp": "2025-10-17T16:59:56.468826",
    "response_time": "1.54",
    "context": "{\"function_name\": \"sum_Of_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 593,
    "solution": "def removezero_ip(ip):\n    return '.'.join([str(int(octet)) for octet in ip.split('.')])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove leading zeroes from an ip address.\n\n### Signature\ndef removezero_ip(ip):\n\n### Test\nassert candidate(\"216.08.094.196\")==(\"\"\"216.8.94.196\"\"\")",
    "timestamp": "2025-10-17T16:59:57.430358",
    "response_time": "0.96",
    "context": "{\"function_name\": \"removezero_ip\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 594,
    "solution": "def diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    return first_even - first_odd",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the difference of the first even and first odd number of a given list.\n\n### Signature\ndef diff_even_odd(list1):\n\n### Test\nassert candidate([1,3,5,7,4,1,6,8])==3",
    "timestamp": "2025-10-17T16:59:59.883272",
    "response_time": "2.45",
    "context": "{\"function_name\": \"diff_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 595,
    "solution": "import collections\n\ndef min_Swaps(str1, str2):\n    count = collections.Counter(str1) - collections.Counter(str2)\n    if count['1'] != -count['0']:\n        return -1\n    swaps = 0\n    i = 0\n    while i < len(str1):\n        if str1[i] != str2[i]:\n            j = i + 1\n            while j < len(str1) and str1[j] != str2[i]:\n                j += 1\n            if j == len(str1):\n                return -1\n            while j > i:\n                str1 = str1[:j] + str1[j-1] + str1[j+1:]\n                swaps += 1\n                j -= 1\n        i += 1\n    return swaps",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n### Signature\ndef min_Swaps(str1,str2) :\n\n### Test\nassert candidate(\"1101\",\"1110\") == 1",
    "timestamp": "2025-10-17T17:00:04.134673",
    "response_time": "4.25",
    "context": "{\"function_name\": \"min_Swaps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 596,
    "solution": "import sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the size in bytes of the given tuple.\n\n### Signature\ndef tuple_size(tuple_list):\n\n### Test\nassert candidate((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
    "timestamp": "2025-10-17T17:00:04.839775",
    "response_time": "0.70",
    "context": "{\"function_name\": \"tuple_size\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 597,
    "solution": "import bisect\n\ndef find_kth(arr1, arr2, k):\n    if k <= 0 or k > len(arr1) + len(arr2):\n        raise ValueError(\"k is out of bounds\")\n    \n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    low, high = 0, len(arr1)\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n        \n        max_left1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        min_right1 = float('inf') if partition1 == len(arr1) else arr1[partition1]\n        \n        max_left2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        min_right2 = float('inf') if partition2 == len(arr2) else arr2[partition2]\n        \n        if max_left1 <= min_right2 and max_left2 <= min_right1:\n            if (len(arr1) + len(arr2)) % 2 == 0:\n                return (max(max_left1, max_left2) + min(min_right1, min_right2)) / 2\n            else:\n                return max(max_left1, max_left2)\n        elif max_left1 > min_right2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find kth element from the given two sorted arrays.\n\n### Signature\ndef find_kth(arr1, arr2, k):\n\n### Test\nassert candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6",
    "timestamp": "2025-10-17T17:00:12.429907",
    "response_time": "7.59",
    "context": "{\"function_name\": \"find_kth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 598,
    "solution": "def armstrong_number(number):\n    # Convert the number to a string to easily iterate over digits\n    digits = str(number)\n    # Calculate the number of digits\n    num_digits = len(digits)\n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in digits)\n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == number",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given number is armstrong or not.\n\n### Signature\ndef armstrong_number(number):\n\n### Test\nassert candidate(153)==True",
    "timestamp": "2025-10-17T17:00:15.174943",
    "response_time": "2.74",
    "context": "{\"function_name\": \"armstrong_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 599,
    "solution": "def sum_average(number):\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    return total_sum, average",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find sum and average of first n natural numbers.\n\n### Signature\ndef sum_average(number):\n\n### Test\nassert candidate(10)==(55, 5.5)",
    "timestamp": "2025-10-17T17:00:16.349068",
    "response_time": "1.17",
    "context": "{\"function_name\": \"sum_average\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 600,
    "solution": "def is_Even(n) :\n    return n % 2 == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given number is even or not.\n\n### Signature\ndef is_Even(n) :\n\n### Test\nassert candidate(1) == False",
    "timestamp": "2025-10-17T17:00:17.071735",
    "response_time": "0.72",
    "context": "{\"function_name\": \"is_Even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 602,
    "solution": "def first_repeated_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the first repeated character in a given string.\n\n### Signature\ndef first_repeated_char(str1):\n\n### Test\nassert candidate(\"abcabc\") == \"a\"",
    "timestamp": "2025-10-17T17:00:18.479773",
    "response_time": "1.41",
    "context": "{\"function_name\": \"first_repeated_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 603,
    "solution": "def get_ludic(n):\n    if n < 1:\n        return []\n    \n    ludic = list(range(1, n + 1))\n    index = 1\n    \n    while index < len(ludic):\n        ludic = ludic[:index] + ludic[index + ludic[index]:]\n        index += 1\n    \n    return ludic",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\n### Signature\ndef get_ludic(n):\n\n### Test\nassert candidate(10) == [1, 2, 3, 5, 7]",
    "timestamp": "2025-10-17T17:00:20.592372",
    "response_time": "2.11",
    "context": "{\"function_name\": \"get_ludic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 604,
    "solution": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to reverse words seperated by spaces in a given string.\n\n### Signature\ndef reverse_words(s):\n\n### Test\nassert candidate(\"python program\")==(\"program python\")",
    "timestamp": "2025-10-17T17:00:21.302645",
    "response_time": "0.71",
    "context": "{\"function_name\": \"reverse_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 605,
    "solution": "import math\n\ndef prime_num(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given integer is a prime number.\n\n### Signature\ndef prime_num(num):\n\n### Test\nassert candidate(13)==True",
    "timestamp": "2025-10-17T17:00:22.846781",
    "response_time": "1.54",
    "context": "{\"function_name\": \"prime_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 606,
    "solution": "import math\n\ndef radian_degree(degree):\n    return math.radians(degree)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert degrees to radians.\n\n### Signature\ndef radian_degree(degree):\n\n### Test\nassert candidate(90)==1.5707963267948966",
    "timestamp": "2025-10-17T17:00:23.579139",
    "response_time": "0.73",
    "context": "{\"function_name\": \"radian_degree\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 607,
    "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\n### Signature\ndef find_literals(text, pattern):\n\n### Test\nassert candidate('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)",
    "timestamp": "2025-10-17T17:00:24.933345",
    "response_time": "1.35",
    "context": "{\"function_name\": \"find_literals\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 608,
    "solution": "from math import factorial\n\ndef bell_Number(n):\n    bell = [0] * (n + 1)\n    bell[0] = 1\n\n    for i in range(1, n + 1):\n        bell[i] = 0\n        for j in range(i - 1, -1, -1):\n            bell[j] = bell[j] + bell[j - 1]\n\n    return bell[n]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find nth bell number.\n\n### Signature\ndef bell_Number(n):\n\n### Test\nassert candidate(2) == 2",
    "timestamp": "2025-10-17T17:00:27.291196",
    "response_time": "2.36",
    "context": "{\"function_name\": \"bell_Number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 610,
    "solution": "def remove_kth_element(list1, L):\n    return list1[:L] + list1[L+1:]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\n### Signature\ndef remove_kth_element(list1, L):\n\n### Test\nassert candidate([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
    "timestamp": "2025-10-17T17:00:28.170462",
    "response_time": "0.88",
    "context": "{\"function_name\": \"remove_kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 611,
    "solution": "import numpy as np\n\ndef max_of_nth(test_list, N):\n    return np.max(np.array(test_list)[:, N])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\n### Signature\ndef max_of_nth(test_list, N):\n\n### Test\nassert candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19",
    "timestamp": "2025-10-17T17:00:29.092295",
    "response_time": "0.92",
    "context": "{\"function_name\": \"max_of_nth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 612,
    "solution": "from typing import List\n\ndef merge(lst: List[List[str]]) -> List[List[str]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n### Signature\ndef merge(lst):\n\n### Test\nassert candidate([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]",
    "timestamp": "2025-10-17T17:00:30.720786",
    "response_time": "1.63",
    "context": "{\"function_name\": \"merge\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 614,
    "solution": "def cummulative_sum(test_list):\n    return sum(sum(sublist) for sublist in test_list)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n### Signature\ndef cummulative_sum(test_list):\n\n### Test\nassert candidate([(1, 3), (5, 6, 7), (2, 6)]) == 30",
    "timestamp": "2025-10-17T17:00:31.528502",
    "response_time": "0.81",
    "context": "{\"function_name\": \"cummulative_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 615,
    "solution": "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[int, ...], ...]) -> List[float]:\n    return [sum(tup) / len(tup) for tup in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\n### Signature\ndef average_tuple(nums):\n\n### Test\nassert candidate(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]",
    "timestamp": "2025-10-17T17:00:32.809955",
    "response_time": "1.28",
    "context": "{\"function_name\": \"average_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 616,
    "solution": "def tuple_modulo(test_tup1, test_tup2):\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\n### Signature\ndef tuple_modulo(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
    "timestamp": "2025-10-17T17:00:33.959821",
    "response_time": "1.15",
    "context": "{\"function_name\": \"tuple_modulo\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 617,
    "solution": "import math\n\ndef min_Jumps(steps, d):\n    return math.sqrt(steps**2 + d**2)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n### Signature\ndef min_Jumps(steps, d):\n\n### Test\nassert candidate((3,4),11)==3.5",
    "timestamp": "2025-10-17T17:00:34.810826",
    "response_time": "0.85",
    "context": "{\"function_name\": \"min_Jumps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 618,
    "solution": "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to divide two lists element wise.\n\n### Signature\ndef div_list(nums1,nums2):\n\n### Test\nassert candidate([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
    "timestamp": "2025-10-17T17:00:36.095233",
    "response_time": "1.28",
    "context": "{\"function_name\": \"div_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 619,
    "solution": "def move_num(test_str):\n    num_chars = [char for char in test_str if char.isdigit()]\n    non_num_chars = [char for char in test_str if not char.isdigit()]\n    return ''.join(non_num_chars + num_chars)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to move all the numbers to the end of the given string.\n\n### Signature\ndef move_num(test_str):\n\n### Test\nassert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'",
    "timestamp": "2025-10-17T17:00:37.531137",
    "response_time": "1.43",
    "context": "{\"function_name\": \"move_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 620,
    "solution": "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n### Signature\ndef largest_subset(a):\n\n### Test\nassert candidate([ 1, 3, 6, 13, 17, 18 ]) == 4",
    "timestamp": "2025-10-17T17:00:39.849663",
    "response_time": "2.31",
    "context": "{\"function_name\": \"largest_subset\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 622,
    "solution": "import bisect\n\ndef get_median(arr1, arr2, n):\n    if n <= 0:\n        raise ValueError(\"The size of the arrays must be greater than 0\")\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    mid1 = arr1[n // 2]\n    mid2 = arr2[n // 2]\n\n    if mid1 == mid2:\n        return mid1\n\n    if mid1 < mid2:\n        if n % 2 == 0:\n            return (max(arr1[n // 2 - 1], arr2[n // 2 - 1]) + min(arr1[n // 2], arr2[n // 2])) / 2\n        else:\n            return max(arr1[n // 2 - 1], arr2[n // 2 - 1])\n    else:\n        if n % 2 == 0:\n            return (max(arr1[n // 2 - 1], arr2[n // 2 - 1]) + min(arr1[n // 2], arr2[n // 2])) / 2\n        else:\n            return max(arr1[n // 2 - 1], arr2[n // 2 - 1])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the median of two sorted lists of same size.\n\n### Signature\ndef get_median(arr1, arr2, n):\n\n### Test\nassert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0",
    "timestamp": "2025-10-17T17:00:47.191723",
    "response_time": "7.34",
    "context": "{\"function_name\": \"get_median\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 623,
    "solution": "import math\n\ndef nth_nums(nums,n):\n    return [math.pow(num, n) for num in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to compute the n-th power of each number in a list.\n\n### Signature\ndef nth_nums(nums,n):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
    "timestamp": "2025-10-17T17:00:48.047015",
    "response_time": "0.85",
    "context": "{\"function_name\": \"nth_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 624,
    "solution": "def is_upper(string):\n    return string.upper()",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to convert a given string to uppercase.\n\n### Signature\ndef is_upper(string):\n\n### Test\nassert candidate(\"person\") ==\"PERSON\"",
    "timestamp": "2025-10-17T17:00:48.626996",
    "response_time": "0.58",
    "context": "{\"function_name\": \"is_upper\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 625,
    "solution": "def swap_List(newList):\n    # Store the first element in a temporary variable\n    temp = newList[0]\n    # Assign the last element to the first position\n    newList[0] = newList[-1]\n    # Assign the value stored in temp (original first element) to the last position\n    newList[-1] = temp\n    # Return the modified list\n    return newList",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last element in a given list.\n\n### Signature\ndef swap_List(newList):\n\n### Test\nassert candidate([1,2,3]) == [3,2,1]",
    "timestamp": "2025-10-17T17:00:50.908169",
    "response_time": "2.28",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 626,
    "solution": "import math\n\ndef triangle_area(r):\n    if r <= 0:\n        return None\n    return (1/2) * r * r",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n### Signature\ndef triangle_area(r) :\n\n### Test\nassert candidate(-1) == None",
    "timestamp": "2025-10-17T17:00:51.952973",
    "response_time": "1.04",
    "context": "{\"function_name\": \"triangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 627,
    "solution": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    if start > end:\n        return start\n    \n    mid = (start + end) // 2\n    \n    if array[mid] > mid:\n        return find_First_Missing(array, start, mid - 1)\n    else:\n        return find_First_Missing(array, mid + 1, end)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\n### Signature\ndef find_First_Missing(array,start=0,end=None):\n\n### Test\nassert candidate([0,1,2,3]) == 4",
    "timestamp": "2025-10-17T17:00:54.491024",
    "response_time": "2.54",
    "context": "{\"function_name\": \"find_First_Missing\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 628,
    "solution": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to replace all spaces in the given string with '%20'.\n\n### Signature\ndef replace_spaces(string):\n\n### Test\nassert candidate(\"My Name is Dawood\") == \"\"\"My%20Name%20is%20Dawood\"\"\"",
    "timestamp": "2025-10-17T17:00:55.160129",
    "response_time": "0.67",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 629,
    "solution": "def Split(list):\n    return [num for num in list if num % 2 == 0]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find even numbers from a list of numbers.\n\n### Signature\ndef Split(list):\n\n### Test\nassert candidate([1,2,3,4,5]) == [2,4]",
    "timestamp": "2025-10-17T17:00:55.964841",
    "response_time": "0.80",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 630,
    "solution": "from itertools import product\n\ndef get_coordinates(ele, sub = []):\n    x, y = ele\n    return [[x + dx, y + dy] for dx, dy in product([-1, 0, 1], repeat=2) if (dx, dy) != (0, 0)]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n### Signature\ndef adjac(ele, sub = []):\n\n### Test\nassert candidate((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]",
    "timestamp": "2025-10-17T17:00:57.770914",
    "response_time": "1.80",
    "context": "{\"function_name\": \"get_coordinates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 631,
    "solution": "def replace_spaces(text):\n    return text.replace(' ', '_').replace('_', ' ')",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\n### Signature\ndef replace_spaces(text):\n\n### Test\nassert candidate('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
    "timestamp": "2025-10-17T17:00:58.493543",
    "response_time": "0.72",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 632,
    "solution": "def move_zero(num_list):\n    non_zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] != 0:\n            num_list[i], num_list[non_zero_index] = num_list[non_zero_index], num_list[i]\n            non_zero_index += 1\n    return num_list",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to move all zeroes to the end of the given list.\n\n### Signature\ndef move_zero(num_list):\n\n### Test\nassert candidate([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
    "timestamp": "2025-10-17T17:01:00.452209",
    "response_time": "1.96",
    "context": "{\"function_name\": \"move_zero\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 633,
    "solution": "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\n### Signature\ndef pair_xor_Sum(arr,n) :\n\n### Test\nassert candidate([5,9,7,6],4) == 47",
    "timestamp": "2025-10-17T17:01:02.256634",
    "response_time": "1.80",
    "context": "{\"function_name\": \"pair_xor_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 635,
    "solution": "import heapq\n\ndef heap_sort(iterable):\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort the given list.\n\n### Signature\ndef heap_sort(iterable):\n\n### Test\nassert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
    "timestamp": "2025-10-17T17:01:03.403655",
    "response_time": "1.15",
    "context": "{\"function_name\": \"heap_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 637,
    "solution": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given amount has no profit and no loss\n\n### Signature\ndef noprofit_noloss(actual_cost,sale_amount):\n\n### Test\nassert candidate(1500,1200)==False",
    "timestamp": "2025-10-17T17:01:04.209826",
    "response_time": "0.80",
    "context": "{\"function_name\": \"noprofit_noloss\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 638,
    "solution": "import math\n\ndef wind_chill(v, t):\n    return round(13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n### Signature\ndef wind_chill(v,t):\n\n### Test\nassert candidate(120,35)==40",
    "timestamp": "2025-10-17T17:01:06.048869",
    "response_time": "1.84",
    "context": "{\"function_name\": \"wind_chill\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 639,
    "solution": "def sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name[0].isupper())",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n### Signature\ndef sample_nam(sample_names):\n\n### Test\nassert candidate(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16",
    "timestamp": "2025-10-17T17:01:06.986409",
    "response_time": "0.94",
    "context": "{\"function_name\": \"sample_nam\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 640,
    "solution": "def remove_parenthesis(items):\n    return [item.split(' (')[0] for item in items]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n\n### Signature\ndef remove_parenthesis(items):\n\n### Test\nassert candidate([\"python (chrome)\"])==(\"python\")",
    "timestamp": "2025-10-17T17:01:07.904691",
    "response_time": "0.91",
    "context": "{\"function_name\": \"remove_parenthesis\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 641,
    "solution": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth nonagonal number.\n\n### Signature\ndef is_nonagonal(n):\n\n### Test\nassert candidate(10) == 325",
    "timestamp": "2025-10-17T17:01:08.800916",
    "response_time": "0.89",
    "context": "{\"function_name\": \"is_nonagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 643,
    "solution": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\n### Signature\ndef text_match_wordz_middle(text):\n\n### Test\nassert candidate(\"pythonzabc.\")==True",
    "timestamp": "2025-10-17T17:01:09.890106",
    "response_time": "1.09",
    "context": "{\"function_name\": \"text_match_wordz_middle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 644,
    "solution": "def reverse_Array_Upto_K(input, k):\n    input[:k] = reversed(input[:k])\n    return input",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to reverse an array upto a given position.\n\n### Signature\ndef reverse_Array_Upto_K(input, k):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
    "timestamp": "2025-10-17T17:01:10.877269",
    "response_time": "0.99",
    "context": "{\"function_name\": \"reverse_Array_Upto_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 720,
    "solution": "def add_dict_to_tuple(test_tup, test_dict):\n    return test_tup + (test_dict,)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\n### Signature\ndef add_dict_to_tuple(test_tup, test_dict):\n\n### Test\nassert candidate((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {\"\"\"MSAM\"\"\": 1, \"\"\"is\"\"\": 2, \"\"\"best\"\"\": 3})",
    "timestamp": "2025-10-17T17:01:11.798602",
    "response_time": "0.92",
    "context": "{\"function_name\": \"add_dict_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 721,
    "solution": "from collections import deque\n\ndef maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    max_cost = dp[N-1][N-1]\n    max_cells = N + N - 2\n    max_average = max_cost / max_cells\n    \n    return max_average",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n### Signature\ndef maxAverageOfPath(cost):\n\n### Test\nassert candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2",
    "timestamp": "2025-10-17T17:01:16.465748",
    "response_time": "4.67",
    "context": "{\"function_name\": \"maxAverageOfPath\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 722,
    "solution": "def filter_data(students, h, w):\n    return {name: data for name, data in students.items() if data[0] > h and data[1] > w}",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\n### Signature\ndef filter_data(students,h,w):\n\n### Test\nassert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}",
    "timestamp": "2025-10-17T17:01:17.716116",
    "response_time": "1.25",
    "context": "{\"function_name\": \"filter_data\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 723,
    "solution": "def count_same_pair(nums1, nums2):\n    return sum(1 for a, b in zip(nums1, nums2) if a == b)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\n### Signature\ndef count_same_pair(nums1, nums2):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
    "timestamp": "2025-10-17T17:01:18.981824",
    "response_time": "1.26",
    "context": "{\"function_name\": \"count_same_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 724,
    "solution": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\n### Signature\ndef power_base_sum(base, power):\n\n### Test\nassert candidate(2,100)==115\nassert candidate(8,10)==37",
    "timestamp": "2025-10-17T17:01:19.943797",
    "response_time": "0.96",
    "context": "{\"function_name\": \"power_base_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 725,
    "solution": "import re\n\ndef extract_quotation(text1):\n    return re.findall(r'\"([^\"]+)\"', text1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks \" \" of the given string.\n\n### Signature\ndef extract_quotation(text1):\n\n### Test\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']",
    "timestamp": "2025-10-17T17:01:20.840192",
    "response_time": "0.89",
    "context": "{\"function_name\": \"extract_quotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 726,
    "solution": "def multiply_elements(test_tup):\n    return tuple(test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n### Signature\ndef multiply_elements(test_tup):\n\n### Test\nassert candidate((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert candidate((2, 4, 5, 6, 7)) == (8, 20, 30, 42)",
    "timestamp": "2025-10-17T17:01:21.955148",
    "response_time": "1.11",
    "context": "{\"function_name\": \"multiply_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 728,
    "solution": "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n### Signature\ndef sum_list(lst1,lst2):\n\n### Test\nassert candidate([10,20,30],[15,25,35])==[25,45,65]",
    "timestamp": "2025-10-17T17:01:22.901157",
    "response_time": "0.94",
    "context": "{\"function_name\": \"sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 730,
    "solution": "def consecutive_duplicates(nums):\n    return [nums[i] for i in range(len(nums)) if i == 0 or nums[i] != nums[i-1]]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove consecutive duplicates of a given list.\n\n### Signature\ndef consecutive_duplicates(nums):\n\n### Test\nassert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]",
    "timestamp": "2025-10-17T17:01:24.055475",
    "response_time": "1.15",
    "context": "{\"function_name\": \"consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 731,
    "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\n### Signature\ndef lateralsurface_cone(r,h):\n\n### Test\nassert candidate(5,12)==204.20352248333654",
    "timestamp": "2025-10-17T17:01:25.493644",
    "response_time": "1.44",
    "context": "{\"function_name\": \"lateralsurface_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 732,
    "solution": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\n### Signature\ndef replace_specialchar(text):\n\n### Test\nassert candidate('Python language, Programming language.')==('Python:language::Programming:language:')",
    "timestamp": "2025-10-17T17:01:26.346480",
    "response_time": "0.85",
    "context": "{\"function_name\": \"replace_specialchar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 733,
    "solution": "import bisect\n\ndef find_first_occurrence(A, x):\n    index = bisect.bisect_left(A, x)\n    if index != len(A) and A[index] == x:\n        return index\n    else:\n        return -1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\n### Signature\ndef find_first_occurrence(A, x):\n\n### Test\nassert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
    "timestamp": "2025-10-17T17:01:27.868176",
    "response_time": "1.52",
    "context": "{\"function_name\": \"find_first_occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 734,
    "solution": "from itertools import combinations\n\ndef sum_Of_Subarray_Prod(arr):\n    total_sum = 0\n    n = len(arr)\n    for r in range(1, n + 1):\n        for subset in combinations(arr, r):\n            product = 1\n            for num in subset:\n                product *= num\n            total_sum += product\n    return total_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\n### Signature\ndef sum_Of_Subarray_Prod(arr):\n\n### Test\nassert candidate([1,2,3]) == 20",
    "timestamp": "2025-10-17T17:01:29.998744",
    "response_time": "2.13",
    "context": "{\"function_name\": \"sum_Of_Subarray_Prod\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 735,
    "solution": "import math\n\ndef toggle_middle_bits(n):\n    # Calculate the number of bits in n\n    num_bits = int(math.log2(n)) + 1\n    \n    # Create a mask with all bits set except the first and last bit\n    mask = (1 << (num_bits - 1)) - 1\n    \n    # Toggle the bits of n using the mask\n    result = n ^ mask\n    \n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\n### Signature\ndef set_middle_bits(n):\n\n### Test\nassert candidate(9) == 15\nassert candidate(10) == 12",
    "timestamp": "2025-10-17T17:01:33.348711",
    "response_time": "3.35",
    "context": "{\"function_name\": \"toggle_middle_bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 736,
    "solution": "import bisect\n\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\n### Signature\ndef left_insertion(a, x):\n\n### Test\nassert candidate([1,2,4,5],6)==4",
    "timestamp": "2025-10-17T17:01:34.315041",
    "response_time": "0.96",
    "context": "{\"function_name\": \"left_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 737,
    "solution": "import re\n\ndef check_str(string):\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\n### Signature\ndef check_str(string):\n\n### Test\nassert candidate(\"annie\")",
    "timestamp": "2025-10-17T17:01:36.065632",
    "response_time": "1.75",
    "context": "{\"function_name\": \"check_str\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 738,
    "solution": "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    else:\n        return 1 / (pow(2, n)) + geometric_sum(n - 1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\n### Signature\ndef geometric_sum(n):\n\n### Test\nassert candidate(7) == 1.9921875",
    "timestamp": "2025-10-17T17:01:38.534893",
    "response_time": "2.47",
    "context": "{\"function_name\": \"geometric_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 739,
    "solution": "import math\n\ndef find_Index(n):\n    # Calculate the smallest number with n digits\n    smallest_n_digit = 10**(n-1)\n    \n    # Calculate the index using the formula derived from the properties of triangular numbers\n    index = math.ceil((2 * smallest_n_digit - 1) / 3)\n    \n    return index",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\n### Signature\ndef find_Index(n):\n\n### Test\nassert candidate(2) == 4",
    "timestamp": "2025-10-17T17:01:40.524027",
    "response_time": "1.99",
    "context": "{\"function_name\": \"find_Index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 740,
    "solution": "def tuple_to_dict(test_tup):\n    return dict(test_tup[i:i+2] for i in range(0, len(test_tup), 2))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\n### Signature\ndef tuple_to_dict(test_tup):\n\n### Test\nassert candidate((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}",
    "timestamp": "2025-10-17T17:01:41.646608",
    "response_time": "1.12",
    "context": "{\"function_name\": \"tuple_to_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 741,
    "solution": "def all_Characters_Same(s):\n    return len(set(s)) == 1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether all the characters are same or not.\n\n### Signature\ndef all_Characters_Same(s) :\n\n### Test\nassert candidate(\"python\") == False",
    "timestamp": "2025-10-17T17:01:42.440584",
    "response_time": "0.79",
    "context": "{\"function_name\": \"all_Characters_Same\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 742,
    "solution": "import math\n\ndef area_tetrahedron(side):\n    return (math.sqrt(3) / 4) * (side ** 2)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to caluclate the area of a tetrahedron.\n\n### Signature\ndef area_tetrahedron(side):\n\n### Test\nassert candidate(3)==15.588457268119894",
    "timestamp": "2025-10-17T17:01:43.495754",
    "response_time": "1.05",
    "context": "{\"function_name\": \"area_tetrahedron\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 743,
    "solution": "def rotate_right(lst, m):\n    return lst[-m:] + lst[:-m]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\n### Signature\ndef rotate_right(list, m):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]",
    "timestamp": "2025-10-17T17:01:44.235074",
    "response_time": "0.74",
    "context": "{\"function_name\": \"rotate_right\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 744,
    "solution": "def check_none(test_tup):\n    return None in test_tup",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given tuple has any none value or not.\n\n### Signature\ndef check_none(test_tup):\n\n### Test\nassert candidate((10, 4, 5, 6, None)) == True",
    "timestamp": "2025-10-17T17:01:44.933527",
    "response_time": "0.70",
    "context": "{\"function_name\": \"check_none\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 745,
    "solution": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum + 1) if all(int(digit) != 0 and n % int(digit) == 0 for digit in str(n))]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\n### Signature\ndef divisible_by_digits(startnum, endnum):\n\n### Test\nassert candidate(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
    "timestamp": "2025-10-17T17:01:46.485342",
    "response_time": "1.55",
    "context": "{\"function_name\": \"divisible_by_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 746,
    "solution": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    return 0.5 * r * r * math.radians(a)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\n### Signature\ndef sector_area(r,a):\n\n### Test\nassert candidate(4,45)==6.283185307179586",
    "timestamp": "2025-10-17T17:01:47.709237",
    "response_time": "1.22",
    "context": "{\"function_name\": \"sector_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 747,
    "solution": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Create a 3D array to store lengths of longest common subsequence.\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    \n    # Build the L[][][] in bottom-up fashion\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n    \n    # L[m][n][o] contains the length of LCS for X[0..m-1], Y[0..n-1] and Z[0..o-1]\n    return L[m][n][o]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n### Signature\ndef lcs_of_three(X, Y, Z):\n\n### Test\nassert candidate('AGGT12', '12TXAYB', '12XBA') == 2",
    "timestamp": "2025-10-17T17:01:54.568841",
    "response_time": "6.86",
    "context": "{\"function_name\": \"lcs_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 748,
    "solution": "import re\n\ndef capital_words_spaces(str1):\n    return re.sub(r'([a-z])([A-Z])', r'\\1 \\2', str1)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to put spaces between words starting with capital letters in a given string.\n\n### Signature\ndef capital_words_spaces(str1):\n\n### Test\nassert candidate(\"Python\") == \"\"\"Python\"\"\"",
    "timestamp": "2025-10-17T17:01:55.699393",
    "response_time": "1.13",
    "context": "{\"function_name\": \"capital_words_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 749,
    "solution": "import re\n\ndef sort_numeric_strings(nums_str):\n    # Convert each string to an integer\n    nums = [int(num) for num in nums_str]\n    # Sort the list of integers\n    nums.sort()\n    return nums",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n### Signature\ndef sort_numeric_strings(nums_str):\n\n### Test\nassert candidate( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
    "timestamp": "2025-10-17T17:01:57.127618",
    "response_time": "1.43",
    "context": "{\"function_name\": \"sort_numeric_strings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 750,
    "solution": "def add_tuple(test_list, test_tup):\n    test_list.extend(test_tup)\n    return test_list",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to add the given tuple to the given list.\n\n### Signature\ndef add_tuple(test_list, test_tup):\n\n### Test\nassert candidate([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]",
    "timestamp": "2025-10-17T17:01:57.984599",
    "response_time": "0.85",
    "context": "{\"function_name\": \"add_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 751,
    "solution": "def check_min_heap(arr, i):\n    n = len(arr)\n    if i > (n // 2) - 1:\n        return True\n    if arr[i] <= arr[2 * i + 1] and arr[i] <= arr[2 * i + 2] and check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2):\n        return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n### Signature\ndef check_min_heap_helper(arr, i):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6]) == True",
    "timestamp": "2025-10-17T17:02:00.602017",
    "response_time": "2.62",
    "context": "{\"function_name\": \"check_min_heap\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 752,
    "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\n### Signature\ndef jacobsthal_num(n):\n\n### Test\nassert candidate(5) == 11\nassert candidate(2) == 1",
    "timestamp": "2025-10-17T17:02:02.724295",
    "response_time": "2.12",
    "context": "{\"function_name\": \"jacobsthal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 753,
    "solution": "from operator import itemgetter\n\ndef min_k(test_list, K):\n    return sorted(test_list, key=itemgetter(1))[:K]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n### Signature\ndef min_k(test_list, K):\n\n### Test\nassert candidate([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
    "timestamp": "2025-10-17T17:02:03.735978",
    "response_time": "1.01",
    "context": "{\"function_name\": \"min_k\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 754,
    "solution": "def extract_index_list(l1, l2, l3):\n    return [x for x, y, z in zip(l1, l2, l3) if x == y == z]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\n### Signature\ndef extract_index_list(l1, l2, l3):\n\n### Test\nassert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
    "timestamp": "2025-10-17T17:02:05.074892",
    "response_time": "1.34",
    "context": "{\"function_name\": \"extract_index_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 755,
    "solution": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    \n    first, second = float('inf'), float('inf')\n    \n    for num in numbers:\n        if num <= first:\n            first, second = num, first\n        elif num < second:\n            second = num\n    \n    if second == float('inf'):\n        raise ValueError(\"List must contain at least two distinct elements\")\n    \n    return second",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the second smallest number in a list.\n\n### Signature\ndef second_smallest(numbers):\n\n### Test\nassert candidate([1, 2, -8, -2, 0, -2])==-2\nassert candidate([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
    "timestamp": "2025-10-17T17:02:07.669958",
    "response_time": "2.59",
    "context": "{\"function_name\": \"second_smallest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 756,
    "solution": "import re\n\ndef text_match_zero_one(text):\n    pattern = 'ab+'\n    return bool(re.search(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\n### Signature\ndef text_match_zero_one(text):\n\n### Test\nassert candidate(\"ac\")==False\nassert candidate(\"dc\")==False\nassert candidate(\"abbbba\")==True",
    "timestamp": "2025-10-17T17:02:08.584787",
    "response_time": "0.91",
    "context": "{\"function_name\": \"text_match_zero_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 757,
    "solution": "from collections import Counter\n\ndef count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\n### Signature\ndef count_reverse_pairs(test_list):\n\n### Test\nassert candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2",
    "timestamp": "2025-10-17T17:02:10.408236",
    "response_time": "1.82",
    "context": "{\"function_name\": \"count_reverse_pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 758,
    "solution": "from collections import defaultdict\n\ndef unique_sublists(list1):\n    sublist_count = defaultdict(int)\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        sublist_count[tuple_sublist] += 1\n    return dict(sublist_count)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n### Signature\ndef unique_sublists(list1):\n\n### Test\nassert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
    "timestamp": "2025-10-17T17:02:11.978143",
    "response_time": "1.57",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 759,
    "solution": "import re\n\ndef is_decimal(num):\n    pattern = r\"^\\d+\\.\\d{2}$\"\n    return bool(re.match(pattern, num))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\n### Signature\ndef is_decimal(num):\n\n### Test\nassert candidate('123.11')==True\nassert candidate('e666.86')==False",
    "timestamp": "2025-10-17T17:02:13.069076",
    "response_time": "1.09",
    "context": "{\"function_name\": \"is_decimal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 760,
    "solution": "def unique_Element(arr):\n    return len(set(arr)) == 1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\n### Signature\ndef unique_Element(arr):\n\n### Test\nassert candidate([1,1,1]) == True",
    "timestamp": "2025-10-17T17:02:13.737767",
    "response_time": "0.67",
    "context": "{\"function_name\": \"unique_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 762,
    "solution": "def check_monthnumber_number(monthnum3):\n    return monthnum3 in (4, 6, 9, 11)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n### Signature\ndef check_monthnumber_number(monthnum3):\n\n### Test\nassert candidate(6)==True",
    "timestamp": "2025-10-17T17:02:14.718460",
    "response_time": "0.98",
    "context": "{\"function_name\": \"check_monthnumber_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 763,
    "solution": "def find_min_diff(arr,n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\n### Signature\ndef find_min_diff(arr,n):\n\n### Test\nassert candidate((1,5,3,19,18,25),6) == 1",
    "timestamp": "2025-10-17T17:02:16.275770",
    "response_time": "1.55",
    "context": "{\"function_name\": \"find_min_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 764,
    "solution": "def number_ctr(str):\n    return sum(c.isdigit() for c in str)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count number of digits in a given string.\n\n### Signature\ndef number_ctr(str):\n\n### Test\nassert candidate('program2bedone') == 1\nassert candidate('3wonders') == 1",
    "timestamp": "2025-10-17T17:02:17.024358",
    "response_time": "0.74",
    "context": "{\"function_name\": \"number_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 765,
    "solution": "import math\n\ndef is_polite(n):\n    return n + int(math.log2(n + 1)) == int(math.log2(n + 1)) + 1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\n### Signature\ndef is_polite(n):\n\n### Test\nassert candidate(7) == 11",
    "timestamp": "2025-10-17T17:02:18.182137",
    "response_time": "1.13",
    "context": "{\"function_name\": \"is_polite\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 766,
    "solution": "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to return a list of all pairs of consecutive items in a given list.\n\n### Signature\ndef pair_wise(l1):\n\n### Test\nassert candidate([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert candidate([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
    "timestamp": "2025-10-17T17:02:19.639342",
    "response_time": "1.45",
    "context": "{\"function_name\": \"pair_wise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 767,
    "solution": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\n### Signature\ndef get_pairs_count(arr, sum):\n\n### Test\nassert candidate([1,1,1,1],2) == 6\nassert candidate([1,5,7,-1,5],6) == 3",
    "timestamp": "2025-10-17T17:02:21.456443",
    "response_time": "1.81",
    "context": "{\"function_name\": \"get_pairs_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 769,
    "solution": "def Diff(li1, li2):\n    return list(set(li1) - set(li2))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to get the difference between two lists.\n\n### Signature\ndef Diff(li1,li2):\n\n### Test\nassert (candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]",
    "timestamp": "2025-10-17T17:02:22.252742",
    "response_time": "0.79",
    "context": "{\"function_name\": \"Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 770,
    "solution": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(1, 2*n, 2):\n        total_sum += i**4\n    return total_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\n### Signature\ndef odd_num_sum(n) :\n\n### Test\nassert candidate(2) == 82",
    "timestamp": "2025-10-17T17:02:23.629548",
    "response_time": "1.37",
    "context": "{\"function_name\": \"odd_num_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 771,
    "solution": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in exp:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if not stack or mapping[char] != stack.pop():\n                return False\n    \n    return not stack",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\n### Signature\ndef check_expression(exp):\n\n### Test\nassert candidate(\"{()}[{}]\") == True",
    "timestamp": "2025-10-17T17:02:25.733608",
    "response_time": "2.10",
    "context": "{\"function_name\": \"check_expression\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 772,
    "solution": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove all the words with k length in the given string.\n\n### Signature\ndef remove_length(test_str, K):\n\n### Test\nassert candidate('The person is most value tet', 3) == 'person is most value'",
    "timestamp": "2025-10-17T17:02:27.009235",
    "response_time": "1.27",
    "context": "{\"function_name\": \"remove_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 773,
    "solution": "import re\n\ndef occurance_substring(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n### Signature\ndef occurance_substring(text,pattern):\n\n### Test\nassert candidate('python programming, python language','python')==('python', 0, 6)\nassert candidate('python programming,programming language','programming')==('programming', 7, 18)",
    "timestamp": "2025-10-17T17:02:28.388040",
    "response_time": "1.38",
    "context": "{\"function_name\": \"occurance_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 775,
    "solution": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\n### Signature\ndef odd_position(nums):\n\n### Test\nassert candidate([2,1,4,3,6,7,6,3]) == True",
    "timestamp": "2025-10-17T17:02:29.607430",
    "response_time": "1.22",
    "context": "{\"function_name\": \"odd_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 776,
    "solution": "import re\n\ndef count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    pattern = r'(?<=[{}])[{}](?=[{}])'.format(vowels, vowels, vowels)\n    matches = re.findall(pattern, test_str)\n    return len(matches)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\n### Signature\ndef count_vowels(test_str):\n\n### Test\nassert candidate('bestinstareels') == 7",
    "timestamp": "2025-10-17T17:02:31.399231",
    "response_time": "1.79",
    "context": "{\"function_name\": \"count_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 777,
    "solution": "def find_sum(arr):\n    from collections import Counter\n    count = Counter(arr)\n    return sum([x for x in count if count[x] == 1])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of non-repeated elements in a given list.\n\n### Signature\ndef find_sum(arr):\n\n### Test\nassert candidate([1,2,3,1,1,4,5,6]) == 21",
    "timestamp": "2025-10-17T17:02:32.598903",
    "response_time": "1.20",
    "context": "{\"function_name\": \"find_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 778,
    "solution": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for _, group in groupby(list1)]",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\n### Signature\ndef pack_consecutive_duplicates(list1):\n\n### Test\nassert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]",
    "timestamp": "2025-10-17T17:02:33.593276",
    "response_time": "0.99",
    "context": "{\"function_name\": \"pack_consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 779,
    "solution": "from collections import defaultdict\n\ndef unique_sublists(list1):\n    sublist_count = defaultdict(int)\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        sublist_count[tuple_sublist] += 1\n    return dict(sublist_count)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\n### Signature\ndef unique_sublists(list1):\n\n### Test\nassert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
    "timestamp": "2025-10-17T17:02:35.205132",
    "response_time": "1.61",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 780,
    "solution": "from itertools import combinations\n\ndef find_combinations(test_list):\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, i):\n            result.append(sum(x for t in combo for x in t))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\n### Signature\ndef find_combinations(test_list):\n\n### Test\nassert candidate([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]",
    "timestamp": "2025-10-17T17:02:37.024340",
    "response_time": "1.82",
    "context": "{\"function_name\": \"find_combinations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 781,
    "solution": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count % 2 == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\n### Signature\ndef count_divisors(n) :\n\n### Test\nassert candidate(10)",
    "timestamp": "2025-10-17T17:02:39.091952",
    "response_time": "2.06",
    "context": "{\"function_name\": \"count_divisors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 782,
    "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        total_sum += ((((i + 1) * (n - i) + 1) // 2) * arr[i])\n    return total_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\n### Signature\ndef odd_length_sum(arr):\n\n### Test\nassert candidate([1,2,4]) == 14",
    "timestamp": "2025-10-17T17:02:40.902880",
    "response_time": "1.81",
    "context": "{\"function_name\": \"odd_length_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 783,
    "solution": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df / mx) * 100\n    v = mx * 100\n    return h, s, v",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n### Signature\ndef rgb_to_hsv(r, g, b):\n\n### Test\nassert candidate(255, 255, 255)==(0, 0.0, 100.0)",
    "timestamp": "2025-10-17T17:02:46.570456",
    "response_time": "5.66",
    "context": "{\"function_name\": \"rgb_to_hsv\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 784,
    "solution": "def mul_even_odd(list1):\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2 != 0:\n            odd = num\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    else:\n        return None",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the product of first even and odd number of a given list.\n\n### Signature\ndef mul_even_odd(list1):\n\n### Test\nassert candidate([1,3,5,7,4,1,6,8])==4",
    "timestamp": "2025-10-17T17:02:48.999003",
    "response_time": "2.43",
    "context": "{\"function_name\": \"mul_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 785,
    "solution": "import ast\n\ndef tuple_str_int(test_str):\n    return ast.literal_eval(test_str)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert tuple string to integer tuple.\n\n### Signature\ndef tuple_str_int(test_str):\n\n### Test\nassert candidate(\"(7, 8, 9)\") == (7, 8, 9)\nassert candidate(\"(1, 2, 3)\") == (1, 2, 3)",
    "timestamp": "2025-10-17T17:02:50.122095",
    "response_time": "1.12",
    "context": "{\"function_name\": \"tuple_str_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 786,
    "solution": "import bisect\n\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\n### Signature\ndef right_insertion(a, x):\n\n### Test\nassert candidate([1,2,4,5],6)==4",
    "timestamp": "2025-10-17T17:02:51.017248",
    "response_time": "0.89",
    "context": "{\"function_name\": \"right_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 787,
    "solution": "import re\n\ndef text_match_three(text):\n    pattern = 'ab{3}'\n    return bool(re.search(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by three 'b'.\n\n### Signature\ndef text_match_three(text):\n\n### Test\nassert not candidate(\"ac\")\nassert not candidate(\"dc\")",
    "timestamp": "2025-10-17T17:02:51.940406",
    "response_time": "0.92",
    "context": "{\"function_name\": \"text_match_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 788,
    "solution": "def new_tuple(test_list, test_str):\n    return tuple(test_list + [test_str])",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to create a new tuple from the given string and list.\n\n### Signature\ndef new_tuple(test_list, test_str):\n\n### Test\nassert candidate([\"WEB\", \"is\"], \"best\") == (\"\"\"WEB\"\"\", \"\"\"is\"\"\", \"\"\"best\"\"\")",
    "timestamp": "2025-10-17T17:02:52.706831",
    "response_time": "0.76",
    "context": "{\"function_name\": \"new_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 790,
    "solution": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether every even index contains even numbers of a given list.\n\n### Signature\ndef even_position(nums):\n\n### Test\nassert candidate([3,2,1]) == False",
    "timestamp": "2025-10-17T17:02:53.931518",
    "response_time": "1.22",
    "context": "{\"function_name\": \"even_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 791,
    "solution": "def remove_nested(test_tup):\n    # Using a generator expression to filter out tuples\n    result = tuple(item for item in test_tup if not isinstance(item, tuple))\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove tuples from the given tuple.\n\n### Signature\ndef remove_nested(test_tup):\n\n### Test\nassert candidate((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert candidate((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)",
    "timestamp": "2025-10-17T17:02:55.202039",
    "response_time": "1.27",
    "context": "{\"function_name\": \"remove_nested\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 792,
    "solution": "def count_list(input_list):\n    return len(input_list)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of lists in a given number of lists.\n\n### Signature\ndef count_list(input_list):\n\n### Test\nassert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4",
    "timestamp": "2025-10-17T17:02:55.809136",
    "response_time": "0.60",
    "context": "{\"function_name\": \"count_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 793,
    "solution": "import bisect\n\ndef last(arr, x):\n    # Find the rightmost index where x should be inserted to maintain sorted order\n    index = bisect.bisect_right(arr, x)\n    # If the index is greater than 0 and the element at index-1 is x, return index-1\n    if index > 0 and arr[index-1] == x:\n        return index-1\n    # Otherwise, return -1 indicating x is not in the array\n    return -1",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the last position of an element in a sorted array.\n\n### Signature\ndef last(arr,x):\n\n### Test\nassert candidate([1,2,3],1) == 0",
    "timestamp": "2025-10-17T17:02:58.578181",
    "response_time": "2.77",
    "context": "{\"function_name\": \"last\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 794,
    "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n### Signature\ndef text_starta_endb(text):\n\n### Test\nassert candidate(\"aabbbb\")",
    "timestamp": "2025-10-17T17:02:59.609071",
    "response_time": "1.03",
    "context": "{\"function_name\": \"text_starta_endb\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 796,
    "solution": "def return_sum(dict):\n    return sum(dict.values())",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite function to find the sum of all items in the given dictionary.\n\n### Signature\ndef return_sum(dict):\n\n### Test\nassert candidate({'a': 100, 'b':200, 'c':300}) == 600",
    "timestamp": "2025-10-17T17:03:00.198630",
    "response_time": "0.59",
    "context": "{\"function_name\": \"return_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 797,
    "solution": "def sum_in_range(n):\n    return sum(i for i in range(1, n+1, 2))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\n### Signature\ndef sum_odd(n):\n\n### Test\nassert candidate(2,5) == 8",
    "timestamp": "2025-10-17T17:03:01.059043",
    "response_time": "0.86",
    "context": "{\"function_name\": \"sum_in_range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 798,
    "solution": "def _sum(arr):\n    return sum(arr)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of an array.\n\n### Signature\ndef _sum(arr):\n\n### Test\nassert candidate([1, 2, 3]) == 6",
    "timestamp": "2025-10-17T17:03:01.619676",
    "response_time": "0.56",
    "context": "{\"function_name\": \"_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 799,
    "solution": "def left_rotate(n, d):\n    return (n << d) | (n >> (32 - d))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n### Signature\ndef left_rotate(n,d):\n\n### Test\nassert candidate(16,2) == 64\nassert candidate(10,2) == 40\nassert candidate(99,3) == 792",
    "timestamp": "2025-10-17T17:03:02.509981",
    "response_time": "0.89",
    "context": "{\"function_name\": \"left_rotate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 800,
    "solution": "def remove_all_spaces(text):\n    return text.replace(\" \", \"\")",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from a string.\n\n### Signature\ndef remove_all_spaces(text):\n\n### Test\nassert candidate('python  program')==('pythonprogram')\nassert candidate('python   programming    language')==('pythonprogramminglanguage')",
    "timestamp": "2025-10-17T17:03:03.159601",
    "response_time": "0.65",
    "context": "{\"function_name\": \"remove_all_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 801,
    "solution": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of equal numbers from three given integers.\n\n### Signature\ndef test_three_equal(x,y,z):\n\n### Test\nassert candidate(1,1,1) == 3",
    "timestamp": "2025-10-17T17:03:04.723896",
    "response_time": "1.56",
    "context": "{\"function_name\": \"test_three_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 802,
    "solution": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            return i\n    return 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n### Signature\ndef count_rotation(arr):\n\n### Test\nassert candidate([3,2,1]) == 1\nassert candidate([4,5,1,2,3]) == 2",
    "timestamp": "2025-10-17T17:03:06.000875",
    "response_time": "1.27",
    "context": "{\"function_name\": \"count_rotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 803,
    "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return root * root == n",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\n### Signature\ndef is_perfect_square(n) :\n\n### Test\nassert not candidate(10)\nassert candidate(36)\nassert not candidate(14)",
    "timestamp": "2025-10-17T17:03:07.209643",
    "response_time": "1.21",
    "context": "{\"function_name\": \"is_perfect_square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 804,
    "solution": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the product of numbers in a list is even or not.\n\n### Signature\ndef is_product_even(arr):\n\n### Test\nassert candidate([1,2,3])",
    "timestamp": "2025-10-17T17:03:08.339845",
    "response_time": "1.13",
    "context": "{\"function_name\": \"is_product_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 805,
    "solution": "def max_sum_list(lists):\n    return max(lists, key=sum)",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\n### Signature\ndef max_sum_list(lists):\n\n### Test\nassert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]",
    "timestamp": "2025-10-17T17:03:09.046855",
    "response_time": "0.70",
    "context": "{\"function_name\": \"max_sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 806,
    "solution": "import re\n\ndef max_run_uppercase(test_str):\n    # Find all sequences of uppercase letters\n    uppercase_sequences = re.findall(r'[A-Z]+', test_str)\n    # Find the length of the longest sequence\n    max_length = max(len(seq) for seq in uppercase_sequences)\n    return max_length",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to find maximum run of uppercase characters in the given string.\n\n### Signature\ndef max_run_uppercase(test_str):\n\n### Test\nassert candidate('GeMKSForGERksISBESt') == 5",
    "timestamp": "2025-10-17T17:03:10.856483",
    "response_time": "1.81",
    "context": "{\"function_name\": \"max_run_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 807,
    "solution": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the first odd number in a given list of numbers.\n\n### Signature\ndef first_odd(nums):\n\n### Test\nassert candidate([1,3,5]) == 1",
    "timestamp": "2025-10-17T17:03:11.849691",
    "response_time": "0.99",
    "context": "{\"function_name\": \"first_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 808,
    "solution": "def check_K(test_tup, K):\n    return K in test_tup",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given tuples contain the k or not.\n\n### Signature\ndef check_K(test_tup, K):\n\n### Test\nassert candidate((10, 4, 5, 6, 8), 6) == True",
    "timestamp": "2025-10-17T17:03:12.598210",
    "response_time": "0.75",
    "context": "{\"function_name\": \"check_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder7b_second_half_td",
    "dataset_row_id": 809,
    "solution": "def check_smaller(test_tup1, test_tup2):\n    return all(x > y for x, y in zip(test_tup1, test_tup2))",
    "llm_name": "Qwen/Qwen2.5-Coder-7B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n### Signature\ndef check_smaller(test_tup1, test_tup2):\n\n### Test\nassert candidate((1, 2, 3), (2, 3, 4)) == False",
    "timestamp": "2025-10-17T17:03:13.751222",
    "response_time": "1.15",
    "context": "{\"function_name\": \"check_smaller\"}"
  }
]