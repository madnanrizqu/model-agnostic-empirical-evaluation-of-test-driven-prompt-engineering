[
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 2,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef similar_elements(test_tup1: Tuple, test_tup2: Tuple) -> str:\n    # Convert tuples to sets to find intersection\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the intersection of both sets\n    shared_elements = set1.intersection(set2)\n    \n    # Convert the result back to a sorted list and then to a string\n    result = str(sorted(shared_elements))\n    \n    return result\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
        "timestamp": "2025-08-14T08:07:44.220077",
        "response_time": "3.50",
        "context": "{\"function_name\": \"similar_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 3,
        "solution": "===START===\nfrom typing import List\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
        "timestamp": "2025-08-14T08:07:47.213116",
        "response_time": "2.98",
        "context": "{\"function_name\": \"is_not_prime\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 4,
        "solution": "===START===\nfrom typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> str:\n    # Implementing a simple heap to find the n largest elements\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    def build_max_heap(arr):\n        n = len(arr)\n        for i in range(n // 2 - 1, -1, -1):\n            heapify(arr, n, i)\n\n    def extract_max(arr):\n        n = len(arr)\n        arr[0], arr[n - 1] = arr[n - 1], arr[0]\n        max_element = arr.pop()\n        heapify(arr, n - 1, 0)\n        return max_element\n\n    # Build a max heap from the list of numbers\n    build_max_heap(nums)\n\n    # Extract the n largest elements\n    largest_elements = []\n    for _ in range(n):\n        largest_elements.append(extract_max(nums))\n\n    # Return the largest elements in descending order\n    return ' '.join(map(str, largest_elements))\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
        "timestamp": "2025-08-14T08:07:53.048505",
        "response_time": "5.83",
        "context": "{\"function_name\": \"heap_queue_largest\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 6,
        "solution": "===START===\nfrom typing import Tuple\n\ndef is_Power_Of_Two (x: int) -> bool:\n    return (x & (x - 1)) == 0 and x != 0\n\ndef check_one_bit_difference(num1: int, num2: int) -> str:\n    xor_result = num1 ^ num2\n    return \"Yes\" if is_Power_Of_Two(xor_result) else \"No\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
        "timestamp": "2025-08-14T08:07:54.975831",
        "response_time": "1.93",
        "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 7,
        "solution": "===START===\nfrom typing import List\n\ndef find_char_long(text: str) -> str:\n    words = text.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return ' '.join(long_words)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
        "timestamp": "2025-08-14T08:07:56.364650",
        "response_time": "1.39",
        "context": "{\"function_name\": \"find_char_long\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 8,
        "solution": "===START===\nfrom typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
        "timestamp": "2025-08-14T08:07:57.384126",
        "response_time": "1.02",
        "context": "{\"function_name\": \"square_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 9,
        "solution": "===START===\nfrom typing import List\n\ndef find_Rotations(s: str) -> str:\n    n = len(s)\n    for i in range(1, n + 1):\n        rotated = s[i:] + s[:i]\n        if rotated == s:\n            return str(i)\n    return str(n)\n\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
        "timestamp": "2025-08-14T08:07:58.839382",
        "response_time": "1.45",
        "context": "{\"function_name\": \"find_Rotations\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 11,
        "solution": "===START===\nfrom typing import List\n\ndef remove_Occ(s: str, ch: str) -> str:\n    first_occurrence_index = s.find(ch)\n    if first_occurrence_index == -1:\n        return s\n    \n    last_occurrence_index = s.rfind(ch)\n    if last_occurrence_index == -1 or first_occurrence_index == last_occurrence_index:\n        return s[:first_occurrence_index] + s[first_occurrence_index + 1:]\n    \n    return s[:first_occurrence_index] + s[first_occurrence_index + 1:last_occurrence_index] + s[last_occurrence_index + 1:]\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
        "timestamp": "2025-08-14T08:08:03.305502",
        "response_time": "4.46",
        "context": "{\"function_name\": \"remove_Occ\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 12,
        "solution": "===START===\nfrom typing import List\n\ndef sort_matrix(M: List[List[int]]) -> str:\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(M, key=sum)\n    \n    # Convert the sorted matrix to a string representation\n    result = \"\\n\".join([\" \".join(map(str, row)) for row in sorted_matrix])\n    \n    return result\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
        "timestamp": "2025-08-14T08:08:04.980947",
        "response_time": "1.67",
        "context": "{\"function_name\": \"sort_matrix\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 14,
        "solution": "===START===\nfrom typing import Union\n\ndef find_Volume(l: Union[int, float], b: Union[int, float], h: Union[int, float]) -> str:\n    # Volume of a triangular prism = (1/2) * base * height * length\n    volume = (1/2) * b * h * l\n    return str(volume)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
        "timestamp": "2025-08-14T08:08:07.614249",
        "response_time": "2.63",
        "context": "{\"function_name\": \"find_Volume\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 16,
        "solution": "===START===\nfrom typing import List\n\ndef text_lowercase_underscore(text: str) -> str:\n    import re\n    pattern = re.compile(r'^[a-z]+(_[a-z]+)*$')\n    return \"true\" if pattern.match(text) else \"false\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
        "timestamp": "2025-08-14T08:08:10.035961",
        "response_time": "2.42",
        "context": "{\"function_name\": \"text_lowercase_underscore\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 17,
        "solution": "===START===\nfrom typing import Union\n\ndef square_perimeter(a: Union[int, float]) -> str:\n    perimeter = 4 * a\n    return str(perimeter)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
        "timestamp": "2025-08-14T08:08:11.889860",
        "response_time": "1.85",
        "context": "{\"function_name\": \"square_perimeter\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 18,
        "solution": "===START===\nfrom typing import List\n\ndef str_to_list(string: str) -> List[str]:\n    return list(string)\n\ndef remove_characters(first_string: str, second_string: str) -> str:\n    second_set = set(str_to_list(second_string))\n    result = [char for char in first_string if char not in second_set]\n    return ''.join(result)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
        "timestamp": "2025-08-14T08:08:13.874680",
        "response_time": "1.98",
        "context": "{\"function_name\": \"remove_dirty_chars\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 19,
        "solution": "===START===\nfrom typing import List\n\ndef test_duplicate(arraynums: List[int]) -> str:\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return \"Duplicates found\"\n        seen.add(num)\n    return \"No duplicates\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
        "timestamp": "2025-08-14T08:08:15.389542",
        "response_time": "1.51",
        "context": "{\"function_name\": \"test_duplicate\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 20,
        "solution": "===START===\nfrom typing import Union\n\ndef is_woodall(x: Union[int, float]) -> str:\n    if not isinstance(x, int) or x < 0:\n        return \"False\"\n    \n    n = 0\n    while (n * (2 ** n) - 1) <= x:\n        if (n * (2 ** n) - 1) == x:\n            return \"True\"\n        n += 1\n    \n    return \"False\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
        "timestamp": "2025-08-14T08:08:18.050376",
        "response_time": "2.66",
        "context": "{\"function_name\": \"is_woodall\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 56,
        "solution": "===START===\nfrom typing import Union\n\ndef rev(num: Union[int, str]) -> str:\n    # Convert the number to a string to reverse it\n    num_str = str(num)\n    reversed_str = num_str[::-1]\n    # Calculate twice the reversed number and subtract one\n    twice_reversed_minus_one = 2 * int(reversed_str) - 1\n    # Check if the original number is equal to twice the reversed number minus one\n    if int(num_str) == twice_reversed_minus_one:\n        return \"True\"\n    else:\n        return \"False\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
        "timestamp": "2025-08-14T08:08:21.455124",
        "response_time": "3.40",
        "context": "{\"function_name\": \"check\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 57,
        "solution": "===START===\nfrom typing import List\n\ndef find_Max_Num(arr: List[int]) -> str:\n    # Convert each integer in the list to a string\n    arr_str = list(map(str, arr))\n    \n    # Sort the array based on the custom key\n    # The key is a lambda function that sorts the numbers by their value repeated 9 times\n    # This ensures that the comparison is based on the potential largest number they can form\n    arr_str.sort(key=lambda x: x*9, reverse=True)\n    \n    # Join the sorted array into a single string\n    max_num_str = ''.join(arr_str)\n    \n    return max_num_str\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
        "timestamp": "2025-08-14T08:08:24.287405",
        "response_time": "2.83",
        "context": "{\"function_name\": \"find_Max_Num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 58,
        "solution": "===START===\nfrom typing import Tuple\n\ndef opposite_Signs(x: int, y: int) -> str:\n    return \"True\" if (x ^ y) < 0 else \"False\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
        "timestamp": "2025-08-14T08:08:26.511019",
        "response_time": "2.22",
        "context": "{\"function_name\": \"opposite_Signs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 59,
        "solution": "===START===\nfrom typing import Union\n\ndef is_octagonal(n: int) -> Union[int, str]:\n    if n <= 0:\n        return \"Input must be a positive integer\"\n    # Formula to find the nth octagonal number: O_n = n * (3 * n - 2)\n    octagonal_number = n * (3 * n - 2)\n    return str(octagonal_number)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
        "timestamp": "2025-08-14T08:08:29.224707",
        "response_time": "2.71",
        "context": "{\"function_name\": \"is_octagonal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 61,
        "solution": "===START===\nfrom typing import List\n\ndef count_Substrings(s: str) -> str:\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == (j - i + 1):\n                count += 1\n                \n    return str(count)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
        "timestamp": "2025-08-14T08:08:32.211099",
        "response_time": "2.98",
        "context": "{\"function_name\": \"count_Substrings\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 62,
        "solution": "===START===\nfrom typing import List\n\ndef smallest_num(xs: List[int]) -> str:\n    if not xs:\n        return \"List is empty\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return str(smallest)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
        "timestamp": "2025-08-14T08:08:33.716581",
        "response_time": "1.50",
        "context": "{\"function_name\": \"smallest_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 63,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> str:\n    if not test_list:\n        return \"0\"\n    \n    max_diff = float('-inf')\n    for pair in test_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    \n    return str(max_diff)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
        "timestamp": "2025-08-14T08:08:37.716027",
        "response_time": "4.00",
        "context": "{\"function_name\": \"max_difference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 64,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
        "timestamp": "2025-08-14T08:08:39.725010",
        "response_time": "2.01",
        "context": "{\"function_name\": \"subject_marks\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 65,
        "solution": "===START===\nfrom typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
        "timestamp": "2025-08-14T08:08:41.650112",
        "response_time": "1.92",
        "context": "{\"function_name\": \"recursive_list_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 66,
        "solution": "===START===\nfrom typing import List\n\ndef pos_count(lst: List[int]) -> str:\n    count = 0\n    for number in lst:\n        if number > 0:\n            count += 1\n    return str(count)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
        "timestamp": "2025-08-14T08:08:43.274831",
        "response_time": "1.62",
        "context": "{\"function_name\": \"pos_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 67,
        "solution": "===START===\nfrom typing import List\n\ndef bell_number(n: int) -> str:\n    def bell_triangle(n: int) -> List[List[int]]:\n        bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n        bell[0][0] = 1\n        \n        for i in range(1, n+1):\n            # Explicitly put the value of Bell(i-1)\n            bell[i][0] = bell[i-1][i-1]\n            \n            # Fill for remaining values of i\n            for j in range(1, i+1):\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        \n        return bell\n\n    if n < 0:\n        return \"0\"\n    \n    bell = bell_triangle(n)\n    return str(bell[n][0])\n\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
        "timestamp": "2025-08-14T08:08:47.889640",
        "response_time": "4.61",
        "context": "{\"function_name\": \"bell_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 68,
        "solution": "===START===\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> str:\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n    \n    if increasing or decreasing:\n        return \"True\"\n    else:\n        return \"False\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
        "timestamp": "2025-08-14T08:08:50.399582",
        "response_time": "2.51",
        "context": "{\"function_name\": \"is_Monotonic\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 69,
        "solution": "===START===\nfrom typing import List\n\ndef is_sublist(l: List, s: List) -> str:\n    if not s:\n        return \"True\"\n    if len(s) > len(l):\n        return \"False\"\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return \"True\"\n    return \"False\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
        "timestamp": "2025-08-14T08:08:52.977235",
        "response_time": "2.58",
        "context": "{\"function_name\": \"is_sublist\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 70,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef find_equal_tuple(Input: List[Tuple]) -> str:\n    if not Input:\n        return \"All tuples have equal length.\"\n    \n    first_length = len(Input[0])\n    for t in Input:\n        if len(t) != first_length:\n            return \"Not all tuples have equal length.\"\n    \n    return \"All tuples have equal length.\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
        "timestamp": "2025-08-14T08:08:55.808030",
        "response_time": "2.83",
        "context": "{\"function_name\": \"get_equal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 71,
        "solution": "===START===\nfrom typing import List\n\ndef comb_sort(nums: List[int]) -> str:\n    def get_next_gap(gap: int) -> int:\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return str(nums)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
        "timestamp": "2025-08-14T08:09:00.861433",
        "response_time": "5.05",
        "context": "{\"function_name\": \"comb_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 72,
        "solution": "===START===\nfrom typing import Union\n\ndef dif_Square(n: int) -> str:\n    # A number can be represented as the difference of two squares if and only if it is not of the form 4k+2\n    if n % 4 == 2:\n        return \"No\"\n    else:\n        return \"Yes\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
        "timestamp": "2025-08-14T08:09:03.040055",
        "response_time": "2.18",
        "context": "{\"function_name\": \"dif_Square\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 74,
        "solution": "===START===\nfrom typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> str:\n    if len(colors) != len(patterns):\n        return \"False\"\n    \n    pattern_to_color = {}\n    color_to_pattern = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return \"False\"\n        else:\n            pattern_to_color[pattern] = color\n        \n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return \"False\"\n        else:\n            color_to_pattern[color] = pattern\n    \n    return \"True\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
        "timestamp": "2025-08-14T08:09:06.886321",
        "response_time": "3.84",
        "context": "{\"function_name\": \"is_samepatterns\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 75,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int]], K: int) -> str:\n    result = [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n    return str(result)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
        "timestamp": "2025-08-14T08:09:08.288458",
        "response_time": "1.40",
        "context": "{\"function_name\": \"find_tuples\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 77,
        "solution": "===START===\nfrom typing import Union\n\ndef is_Diff(n: Union[int, str]) -> str:\n    # Convert input to string if it's an integer\n    if isinstance(n, int):\n        n = str(n)\n    \n    # Calculate the alternating sum of the digits\n    odd_sum = 0\n    even_sum = 0\n    for i, digit in enumerate(n):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n    \n    # Check if the difference is divisible by 11\n    if (odd_sum - even_sum) % 11 == 0:\n        return \"Divisible by 11\"\n    else:\n        return \"Not divisible by 11\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
        "timestamp": "2025-08-14T08:09:12.597733",
        "response_time": "4.31",
        "context": "{\"function_name\": \"is_Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 79,
        "solution": "===START===\nfrom typing import List\n\ndef word_len(s: str) -> str:\n    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
        "timestamp": "2025-08-14T08:09:13.678436",
        "response_time": "1.08",
        "context": "{\"function_name\": \"word_len\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 80,
        "solution": "===START===\nfrom typing import Union\n\ndef tetrahedral_number(n: int) -> Union[int, str]:\n    if n < 0:\n        return \"Input must be a non-negative integer\"\n    return (n * (n + 1) * (n + 2)) // 6\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
        "timestamp": "2025-08-14T08:09:15.613902",
        "response_time": "1.93",
        "context": "{\"function_name\": \"tetrahedral_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 82,
        "solution": "===START===\nfrom math import pi\n\ndef volume_sphere(r):\n    return str((4/3) * pi * r**3)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
        "timestamp": "2025-08-14T08:09:17.702895",
        "response_time": "2.09",
        "context": "{\"function_name\": \"volume_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 83,
        "solution": "===START===\nfrom typing import List\n\ndef get_Char(strr: str) -> str:\n    ascii_sum = sum(ord(char) for char in strr)\n    result_ascii = ascii_sum % 26\n    # Map result_ascii to a character, assuming 'a' as 0, 'b' as 1, ..., 'z' as 25\n    result_char = chr(result_ascii + ord('a'))\n    return result_char\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
        "timestamp": "2025-08-14T08:09:20.252503",
        "response_time": "2.55",
        "context": "{\"function_name\": \"get_Char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 84,
        "solution": "===START===\nfrom typing import List\n\ndef sequence(n: int) -> str:\n    if n <= 0:\n        return \"\"\n    if n == 1:\n        return \"1\"\n    \n    # Initialize the sequence with the first two known values\n    seq: List[int] = [0, 1, 1]\n    \n    # Generate the sequence up to the nth number\n    for i in range(3, n + 1):\n        seq.append(seq[seq[i - 1]] + seq[i - seq[i - 1]])\n    \n    # Convert the sequence to a space-separated string\n    return ' '.join(map(str, seq[1:n + 1]))\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
        "timestamp": "2025-08-14T08:09:24.360643",
        "response_time": "4.11",
        "context": "{\"function_name\": \"sequence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 85,
        "solution": "===START===\nfrom math import pi\n\ndef surfacearea_sphere(r):\n    return str(4 * pi * r ** 2)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
        "timestamp": "2025-08-14T08:09:25.389675",
        "response_time": "1.03",
        "context": "{\"function_name\": \"surfacearea_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 86,
        "solution": "===START===\nfrom typing import Union\n\ndef centered_hexagonal_number(n: int) -> Union[int, str]:\n    if n < 1:\n        return \"Input must be a positive integer.\"\n    return 3 * n * (n - 1) + 1\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
        "timestamp": "2025-08-14T08:09:26.893139",
        "response_time": "1.50",
        "context": "{\"function_name\": \"centered_hexagonal_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 87,
        "solution": "===START===\nfrom typing import Dict, Any\n\ndef merge_dictionaries_three(dict1: Dict[Any, Any], dict2: Dict[Any, Any], dict3: Dict[Any, Any]) -> Dict[Any, Any]:\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
        "timestamp": "2025-08-14T08:09:29.877110",
        "response_time": "2.98",
        "context": "{\"function_name\": \"merge_dictionaries_three\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 88,
        "solution": "===START===\nfrom typing import List, Dict\n\ndef freq_count(list1: List) -> Dict:\n    frequency: Dict = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):",
        "timestamp": "2025-08-14T08:09:31.795220",
        "response_time": "1.92",
        "context": "{\"function_name\": \"freq_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 89,
        "solution": "===START===\nfrom typing import List\n\ndef closest_num(N):\n    return str(N - 1)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):",
        "timestamp": "2025-08-14T08:09:32.557056",
        "response_time": "0.76",
        "context": "{\"function_name\": \"closest_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 90,
        "solution": "===START===\nfrom typing import List\n\ndef len_log(list1: List[str]) -> str:\n    if not list1:\n        return \"0\"\n    max_length = max(len(word) for word in list1)\n    return str(max_length)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):",
        "timestamp": "2025-08-14T08:09:33.818330",
        "response_time": "1.26",
        "context": "{\"function_name\": \"len_log\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 91,
        "solution": "===START===\nfrom typing import List\n\ndef find_substring(str1: str, sub_str: str) -> str:\n    if sub_str in str1:\n        return \"Substring found\"\n    else:\n        return \"Substring not found\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):",
        "timestamp": "2025-08-14T08:09:35.403959",
        "response_time": "1.58",
        "context": "{\"function_name\": \"find_substring\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 92,
        "solution": "===START===\nfrom typing import List\n\ndef is_undulating(n: int) -> str:\n    num_str = str(n)\n    length = len(num_str)\n    \n    if length < 3:\n        return \"False\"\n    \n    pattern = [num_str[0], num_str[1]]\n    \n    for i in range(2, length):\n        if num_str[i] != pattern[i % 2]:\n            return \"False\"\n    \n    return \"True\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):",
        "timestamp": "2025-08-14T08:09:38.324613",
        "response_time": "2.92",
        "context": "{\"function_name\": \"is_undulating\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 93,
        "solution": "===START===\nfrom typing import Union\n\ndef power(a: Union[int, float], b: Union[int, float]) -> Union[int, float]:\n    result = 1\n    if b == 0:\n        return 1\n    elif b < 0:\n        a = 1 / a\n        b = -b\n    for _ in range(int(b)):\n        result *= a\n    return result\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):",
        "timestamp": "2025-08-14T08:09:41.447101",
        "response_time": "3.12",
        "context": "{\"function_name\": \"power\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 94,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[int, int]]) -> str:\n    if not test_list:\n        return \"\"\n    \n    min_tuple = min(test_list, key=lambda x: x[1])\n    return str(min_tuple[0])\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):",
        "timestamp": "2025-08-14T08:09:42.895103",
        "response_time": "1.45",
        "context": "{\"function_name\": \"index_minimum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 95,
        "solution": "===START===\nfrom typing import List\n\ndef Find_Min_Length(lst: List[List]) -> str:\n    if not lst:\n        return \"0\"\n    min_length = min(len(sublist) for sublist in lst)\n    return str(min_length)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):",
        "timestamp": "2025-08-14T08:09:44.586470",
        "response_time": "1.69",
        "context": "{\"function_name\": \"Find_Min_Length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 96,
        "solution": "===START===\nfrom typing import List\n\ndef divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):",
        "timestamp": "2025-08-14T08:09:47.656501",
        "response_time": "3.07",
        "context": "{\"function_name\": \"divisor\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 97,
        "solution": "===START===\nfrom typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):",
        "timestamp": "2025-08-14T08:09:49.648232",
        "response_time": "1.99",
        "context": "{\"function_name\": \"frequency_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 98,
        "solution": "===START===\nfrom typing import List\n\ndef multiply_num(numbers: List[float]) -> str:\n    if not numbers:\n        return \"0\"\n    \n    product = 1\n    for number in numbers:\n        product *= number\n    \n    result = product / len(numbers)\n    return str(result)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):",
        "timestamp": "2025-08-14T08:09:52.160840",
        "response_time": "2.51",
        "context": "{\"function_name\": \"multiply_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 99,
        "solution": "===START===\nfrom typing import Union\n\ndef decimal_to_binary(n: Union[int, str]) -> str:\n    # Ensure the input is an integer\n    if isinstance(n, str):\n        n = int(n)\n    \n    # Special case for zero\n    if n == 0:\n        return \"0\"\n    \n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    \n    return binary_str\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):",
        "timestamp": "2025-08-14T08:09:55.015575",
        "response_time": "2.85",
        "context": "{\"function_name\": \"decimal_to_binary\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 100,
        "solution": "===START===\nfrom typing import List\n\ndef next_smallest_palindrome(num: int) -> int:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    \n    num += 1\n    while not is_palindrome(str(num)):\n        num += 1\n    return num\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):",
        "timestamp": "2025-08-14T08:09:56.655193",
        "response_time": "1.64",
        "context": "{\"function_name\": \"next_smallest_palindrome\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 101,
        "solution": "===START===\nfrom typing import List\n\ndef kth_element(arr: List[int], k: int) -> str:\n    if k < 1 or k > len(arr):\n        return \"Index out of bounds\"\n    return str(arr[k - 1])\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):",
        "timestamp": "2025-08-14T08:09:59.548077",
        "response_time": "2.89",
        "context": "{\"function_name\": \"kth_element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 102,
        "solution": "===START===\nfrom typing import List\n\ndef snake_to_camel(word: str) -> str:\n    components: List[str] = word.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
        "timestamp": "2025-08-14T08:10:03.080325",
        "response_time": "3.53",
        "context": "{\"function_name\": \"snake_to_camel\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 103,
        "solution": "===START===\nfrom typing import List\n\ndef eulerian_num(n: int, m: int) -> int:\n    # Create a table to store results of subproblems\n    dp: List[List[int]] = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    \n    # Base case: A(0, 0) = 1\n    dp[0][0] = 1\n    \n    # Fill the table using recursive relation\n    for i in range(1, n + 1):\n        for j in range(m + 1):\n            if j == 0:\n                dp[i][j] = (i - 1) * dp[i - 1][j] + dp[i - 1][j + 1]\n            else:\n                dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n    \n    return dp[n][m]\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):",
        "timestamp": "2025-08-14T08:10:07.883781",
        "response_time": "4.80",
        "context": "{\"function_name\": \"eulerian_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 104,
        "solution": "===START===\nfrom typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):",
        "timestamp": "2025-08-14T08:10:09.170859",
        "response_time": "1.29",
        "context": "{\"function_name\": \"sort_sublists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 105,
        "solution": "===START===\nfrom typing import List\n\ndef count(lst: List[bool]) -> str:\n    true_count = sum(1 for item in lst if item)\n    return str(true_count)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):",
        "timestamp": "2025-08-14T08:10:11.125386",
        "response_time": "1.95",
        "context": "{\"function_name\": \"count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 106,
        "solution": "===START===\nfrom typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> str:\n    result = test_tup + tuple(test_list)\n    return str(result)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):",
        "timestamp": "2025-08-14T08:10:13.204430",
        "response_time": "2.08",
        "context": "{\"function_name\": \"add_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 108,
        "solution": "===START===\nfrom typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> str:\n    # Merge the three lists\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    # Convert the sorted list to a string\n    return ' '.join(map(str, merged_list))\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):",
        "timestamp": "2025-08-14T08:10:16.038727",
        "response_time": "2.83",
        "context": "{\"function_name\": \"merge_sorted_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 109,
        "solution": "===START===\nfrom typing import List\n\ndef odd_Equivalent(s: str, n: int) -> str:\n    def is_odd(num_str: str) -> bool:\n        return int(num_str, 2) % 2 == 1\n\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated_str = s[i:] + s[:i]\n        if is_odd(rotated_str):\n            count += 1\n\n    return str(count)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):",
        "timestamp": "2025-08-14T08:10:18.781047",
        "response_time": "2.74",
        "context": "{\"function_name\": \"odd_Equivalent\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 111,
        "solution": "===START===\nfrom typing import List, Any\n\ndef common_in_nested_lists(nestedlist: List[List[Any]]) -> str:\n    if not nestedlist:\n        return \"\"\n    \n    # Start with the first set of elements\n    common_elements = set(nestedlist[0])\n    \n    # Intersect with each subsequent set\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    \n    # Convert the result to a sorted list and then to a string\n    return str(sorted(common_elements))\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):",
        "timestamp": "2025-08-14T08:10:21.640347",
        "response_time": "2.86",
        "context": "{\"function_name\": \"common_in_nested_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 113,
        "solution": "===START===\nfrom typing import Union\n\ndef check_integer(text: str) -> str:\n    try:\n        int(text)\n        return \"True\"\n    except ValueError:\n        return \"False\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):",
        "timestamp": "2025-08-14T08:10:24.007387",
        "response_time": "2.37",
        "context": "{\"function_name\": \"check_integer\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 115,
        "solution": "===START===\nfrom typing import List, Dict\n\ndef empty_dit(list1: List[Dict]) -> str:\n    for d in list1:\n        if d:\n            return \"Not all dictionaries are empty\"\n    return \"All dictionaries are empty\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):",
        "timestamp": "2025-08-14T08:10:25.279477",
        "response_time": "1.27",
        "context": "{\"function_name\": \"empty_dit\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 116,
        "solution": "===START===\nfrom typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int]) -> str:\n    return ''.join(map(str, nums))\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):",
        "timestamp": "2025-08-14T08:10:26.588323",
        "response_time": "1.31",
        "context": "{\"function_name\": \"tuple_to_int\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 117,
        "solution": "===START===\nfrom typing import List, Union\n\ndef list_to_float(test_list: List[List[Union[str, int, float]]]) -> List[List[float]]:\n    def convert_to_float(element):\n        try:\n            return float(element)\n        except (ValueError, TypeError):\n            return element\n\n    return [[convert_to_float(item) for item in sublist] for sublist in test_list]\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):",
        "timestamp": "2025-08-14T08:10:28.661947",
        "response_time": "2.07",
        "context": "{\"function_name\": \"list_to_float\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 118,
        "solution": "===START===\nfrom typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):",
        "timestamp": "2025-08-14T08:10:30.867344",
        "response_time": "2.20",
        "context": "{\"function_name\": \"string_to_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 119,
        "solution": "===START===\nfrom typing import List\n\ndef search(arr: List[int]) -> str:\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Ensure mid is even for comparison with the next element\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the single element is on the right side\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    # When left == right, we have found the single element\n    return str(arr[left])\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):",
        "timestamp": "2025-08-14T08:10:34.347499",
        "response_time": "3.48",
        "context": "{\"function_name\": \"search\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 120,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> str:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return str(max_product)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):",
        "timestamp": "2025-08-14T08:10:35.862195",
        "response_time": "1.51",
        "context": "{\"function_name\": \"max_product_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 123,
        "solution": "===START===\nfrom typing import List\n\ndef amicable_numbers_sum(limit: int) -> str:\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    amicable_sum = 0\n    visited = set()\n\n    for num in range(2, limit):\n        if num in visited:\n            continue\n        partner = sum_of_divisors(num)\n        if partner != num and sum_of_divisors(partner) == num:\n            amicable_sum += num + partner\n            visited.add(partner)\n\n    return str(amicable_sum)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):",
        "timestamp": "2025-08-14T08:10:40.761642",
        "response_time": "4.89",
        "context": "{\"function_name\": \"amicable_numbers_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 124,
        "solution": "===START===\nfrom math import atan2\n\ndef angle_complex(a, b):\n    return str(atan2(b, a))\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):",
        "timestamp": "2025-08-14T08:10:41.644490",
        "response_time": "0.88",
        "context": "{\"function_name\": \"angle_complex\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 125,
        "solution": "===START===\nfrom typing import List\n\ndef find_length(string: str) -> str:\n    max_diff = 0\n    current_diff = 0\n    \n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        \n        if current_diff < 0:\n            current_diff = 0\n        \n        max_diff = max(max_diff, current_diff)\n    \n    return str(max_diff)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):",
        "timestamp": "2025-08-14T08:10:44.963597",
        "response_time": "3.32",
        "context": "{\"function_name\": \"find_length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 126,
        "solution": "===START===\nfrom typing import List\n\ndef sum(a: int, b: int) -> str:\n    def find_divisors(n: int) -> List[int]:\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    divisors_a = find_divisors(a)\n    divisors_b = find_divisors(b)\n    common_divisors = set(divisors_a).intersection(divisors_b)\n    return str(sum(common_divisors))\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):",
        "timestamp": "2025-08-14T08:10:47.905841",
        "response_time": "2.94",
        "context": "{\"function_name\": \"sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 127,
        "solution": "===START===\nfrom typing import Tuple\n\ndef multiply_int(x, y):\n    return str(x * y)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):",
        "timestamp": "2025-08-14T08:10:48.945452",
        "response_time": "1.04",
        "context": "{\"function_name\": \"multiply_int\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 128,
        "solution": "===START===\nfrom typing import List\n\ndef long_words(n: int, str: List[str]) -> List[str]:\n    return [word for word in str if len(word) > n]\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):",
        "timestamp": "2025-08-14T08:10:51.267989",
        "response_time": "2.32",
        "context": "{\"function_name\": \"long_words\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 129,
        "solution": "===START===\nfrom typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> str:\n    n = len(my_matrix)\n    if any(len(row) != n for row in my_matrix):\n        return \"Not a magic square\"\n    \n    magic_sum = sum(my_matrix[0])\n    \n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return \"Not a magic square\"\n    \n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_sum:\n            return \"Not a magic square\"\n    \n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum:\n        return \"Not a magic square\"\n    \n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return \"Not a magic square\"\n    \n    return \"Magic square\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):",
        "timestamp": "2025-08-14T08:10:55.910467",
        "response_time": "4.64",
        "context": "{\"function_name\": \"magic_square_test\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 130,
        "solution": "===START===\nfrom typing import List\n\ndef max_occurrences(nums: List[int]) -> str:\n    frequency = {}\n    for num in nums:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    max_freq = 0\n    max_item = None\n    for num, freq in frequency.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = num\n    \n    return str(max_item)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):",
        "timestamp": "2025-08-14T08:11:00.664434",
        "response_time": "4.75",
        "context": "{\"function_name\": \"max_occurrences\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 131,
        "solution": "===START===\nfrom typing import List\n\ndef reverse_vowels(str1: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    str_list: List[str] = list(str1)\n    i, j = 0, len(str_list) - 1\n    \n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n    \n    return ''.join(str_list)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):",
        "timestamp": "2025-08-14T08:11:04.234391",
        "response_time": "3.57",
        "context": "{\"function_name\": \"reverse_vowels\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 132,
        "solution": "===START===\nfrom typing import Tuple, Any\n\ndef tup_string(tup1: Tuple[Any, ...]) -> str:\n    return str(tup1)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):",
        "timestamp": "2025-08-14T08:11:05.257213",
        "response_time": "1.02",
        "context": "{\"function_name\": \"tup_string\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 133,
        "solution": "===START===\nfrom typing import List\n\ndef sum_negativenum(nums: List[int]) -> str:\n    negative_sum = sum(num for num in nums if num < 0)\n    return str(negative_sum)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):",
        "timestamp": "2025-08-14T08:11:07.593114",
        "response_time": "2.33",
        "context": "{\"function_name\": \"sum_negativenum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 135,
        "solution": "===START===\nfrom typing import Union\n\ndef hexagonal_num(n: int) -> Union[int, str]:\n    if n <= 0:\n        return \"Input must be a positive integer\"\n    return n * (2 * n - 1)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):",
        "timestamp": "2025-08-14T08:11:09.195286",
        "response_time": "1.60",
        "context": "{\"function_name\": \"hexagonal_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 137,
        "solution": "===START===\nfrom typing import List\n\ndef zero_count(nums: List[int]) -> str:\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return \"undefined\"\n    \n    ratio = zero_count / non_zero_count\n    return f\"{ratio:.2f}\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):",
        "timestamp": "2025-08-14T08:11:12.258402",
        "response_time": "3.06",
        "context": "{\"function_name\": \"zero_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 138,
        "solution": "===START===\nfrom typing import List\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return \"No\"\n    \n    while n > 0:\n        if n & 1 == 0:\n            n >>= 1\n        else:\n            n -= 1\n    \n    return \"Yes\" if n == 0 else \"No\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):",
        "timestamp": "2025-08-14T08:11:14.071062",
        "response_time": "1.81",
        "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 139,
        "solution": "===START===\nfrom math import pi\n\ndef circle_circumference(r):\n    return str(2 * pi * r)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):",
        "timestamp": "2025-08-14T08:11:14.937221",
        "response_time": "0.86",
        "context": "{\"function_name\": \"circle_circumference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 140,
        "solution": "===START===\nfrom typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    result_set = set()\n    for sublist in test_list:\n        for item in sublist:\n            result_set.add(item)\n    return result_set\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):",
        "timestamp": "2025-08-14T08:11:16.640128",
        "response_time": "1.70",
        "context": "{\"function_name\": \"extract_singly\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 141,
        "solution": "===START===\nfrom typing import List\n\ndef pancake_sort(nums: List[int]) -> str:\n    def flip(sublist, k):\n        sublist[:k] = sublist[:k][::-1]\n\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = max(range(size), key=nums.__getitem__)\n        if max_index != size - 1:\n            if max_index != 0:\n                flip(nums, max_index + 1)\n            flip(nums, size)\n    \n    return ' '.join(map(str, nums))\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):",
        "timestamp": "2025-08-14T08:11:20.406608",
        "response_time": "3.76",
        "context": "{\"function_name\": \"pancake_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 142,
        "solution": "===START===\nfrom typing import List\n\ndef count_samepair(list1: List, list2: List, list3: List) -> str:\n    count = 0\n    min_length = min(len(list1), len(list2), len(list3))\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return str(count)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):",
        "timestamp": "2025-08-14T08:11:22.810441",
        "response_time": "2.40",
        "context": "{\"function_name\": \"count_samepair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 143,
        "solution": "===START===\nfrom typing import Tuple, List, Any\n\ndef find_lists(Input: Tuple[Any, ...]) -> str:\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return str(count)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):",
        "timestamp": "2025-08-14T08:11:24.546050",
        "response_time": "1.73",
        "context": "{\"function_name\": \"find_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 145,
        "solution": "===START===\nfrom typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> str:\n    if not arr:\n        return \"0\"\n    \n    min_val = arr[0]\n    max_val = arr[0]\n    \n    for num in arr:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    \n    return str(max_val - min_val)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):",
        "timestamp": "2025-08-14T08:11:27.403541",
        "response_time": "2.86",
        "context": "{\"function_name\": \"max_Abs_Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 160,
        "solution": "===START===\nfrom typing import Tuple, Optional\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    def extended_gcd(a: int, b: int) -> Tuple[int, int, int]:\n        if a == 0:\n            return b, 0, 1\n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return gcd, x, y\n\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    scale = n // gcd\n    return (x * scale, y * scale)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):",
        "timestamp": "2025-08-14T08:11:30.544044",
        "response_time": "3.13",
        "context": "{\"function_name\": \"find_solution\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 161,
        "solution": "===START===\nfrom typing import List\n\ndef remove_elements(list1: List, list2: List) -> List:\n    return [element for element in list1 if element not in list2]\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):",
        "timestamp": "2025-08-14T08:11:33.322617",
        "response_time": "2.78",
        "context": "{\"function_name\": \"remove_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 162,
        "solution": "===START===\nfrom typing import Union\n\ndef sum_series(n: int) -> Union[int, str]:\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return str(total)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):",
        "timestamp": "2025-08-14T08:11:35.004644",
        "response_time": "1.68",
        "context": "{\"function_name\": \"sum_series\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 163,
        "solution": "===START===\nfrom math import tan, pi\n\ndef area_polygon(s, l):\n    area = (s * l**2) / (4 * tan(pi / s))\n    return str(area)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):",
        "timestamp": "2025-08-14T08:11:37.515893",
        "response_time": "2.51",
        "context": "{\"function_name\": \"area_polygon\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 164,
        "solution": "===START===\nfrom typing import List\n\ndef sum_of_divisors(n: int) -> int:\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\ndef div_sum(n: int, m: int) -> str:\n    sum_n = sum_of_divisors(n)\n    sum_m = sum_of_divisors(m)\n    return \"true\" if sum_n == sum_m else \"false\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):",
        "timestamp": "2025-08-14T08:11:40.753108",
        "response_time": "3.23",
        "context": "{\"function_name\": \"are_equivalent\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 165,
        "solution": "===START===\nfrom typing import List\n\ndef count_char_position(str1: str) -> str:\n    count = 0\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i].isalpha() and (ord(str1[i]) - ord('a') + 1) == (i + 1):\n            count += 1\n    return str(count)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):",
        "timestamp": "2025-08-14T08:11:43.154494",
        "response_time": "2.40",
        "context": "{\"function_name\": \"count_char_position\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 166,
        "solution": "===START===\nfrom typing import List\n\ndef find_even_pair(A: List[int]) -> str:\n    even_count = 0\n    odd_count = 0\n    \n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    even_pairs = (even_count * (even_count - 1)) // 2\n    odd_pairs = (odd_count * (odd_count - 1)) // 2\n    \n    total_even_xor_pairs = even_pairs + odd_pairs\n    \n    return str(total_even_xor_pairs)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):",
        "timestamp": "2025-08-14T08:11:47.065832",
        "response_time": "3.91",
        "context": "{\"function_name\": \"find_even_pair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 167,
        "solution": "===START===\nfrom typing import Union\n\ndef next_power_of_2(n: Union[int, float]) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):",
        "timestamp": "2025-08-14T08:11:49.457653",
        "response_time": "2.39",
        "context": "{\"function_name\": \"next_power_of_2\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 168,
        "solution": "===START===\nfrom typing import List\n\ndef frequency(a: List[int], x: int) -> str:\n    count = 0\n    for number in a:\n        if number == x:\n            count += 1\n    return str(count)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):",
        "timestamp": "2025-08-14T08:11:51.195980",
        "response_time": "1.73",
        "context": "{\"function_name\": \"frequency\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 170,
        "solution": "===START===\nfrom typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> str:\n    if m < 0 or n >= len(list1) or m > n:\n        return \"Invalid range\"\n    return str(sum(list1[m:n+1]))\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):",
        "timestamp": "2025-08-14T08:11:53.100910",
        "response_time": "1.90",
        "context": "{\"function_name\": \"sum_range_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 171,
        "solution": "===START===\nfrom typing import Union\n\ndef perimeter_pentagon(a: Union[int, float]) -> str:\n    perimeter = 5 * a\n    return str(perimeter)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):",
        "timestamp": "2025-08-14T08:11:55.316396",
        "response_time": "2.21",
        "context": "{\"function_name\": \"perimeter_pentagon\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 172,
        "solution": "===START===\nfrom typing import List\n\ndef count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return str(count)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):",
        "timestamp": "2025-08-14T08:11:57.079468",
        "response_time": "1.76",
        "context": "{\"function_name\": \"count_occurance\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 222,
        "solution": "===START===\nfrom typing import Tuple, Any\n\ndef check_type(test_tuple: Tuple[Any, ...]) -> str:\n    if not test_tuple:\n        return \"Tuple is empty\"\n    \n    first_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != first_type:\n            return \"All elements do not have the same data type\"\n    \n    return \"All elements have the same data type\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):",
        "timestamp": "2025-08-14T08:11:59.928265",
        "response_time": "2.85",
        "context": "{\"function_name\": \"check_type\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 223,
        "solution": "===START===\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> str:\n    # Find the first occurrence of x in arr\n    first_occurrence = -1\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            first_occurrence = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # If x is not present in arr\n    if first_occurrence == -1:\n        return \"False\"\n    \n    # Check if x is the majority element\n    last_occurrence = first_occurrence + n // 2\n    if last_occurrence < n and arr[last_occurrence] == x:\n        return \"True\"\n    else:\n        return \"False\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):",
        "timestamp": "2025-08-14T08:12:04.940938",
        "response_time": "5.01",
        "context": "{\"function_name\": \"binary_search\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 224,
        "solution": "===START===\nfrom typing import Any\n\ndef count_Set_Bits(n: int) -> str:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return str(count)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):",
        "timestamp": "2025-08-14T08:12:07.530930",
        "response_time": "2.59",
        "context": "{\"function_name\": \"count_Set_Bits\"}"
    }
]