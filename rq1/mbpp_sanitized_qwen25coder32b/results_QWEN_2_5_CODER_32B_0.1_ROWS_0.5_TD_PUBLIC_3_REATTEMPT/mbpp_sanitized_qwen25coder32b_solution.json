[
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 2,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef similar_elements(test_tup1: Tuple, test_tup2: Tuple) -> str:\n    # Convert tuples to sets to find common elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find intersection of both sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set of common elements back to a sorted list\n    result_list = sorted(list(common_elements))\n    \n    # Return the result as a string\n    return ', '.join(map(str, result_list))\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
        "timestamp": "2025-08-13T11:12:19.585508",
        "response_time": "3.12",
        "context": "{\"function_name\": \"similar_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 3,
        "solution": "===START===\nfrom typing import List\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
        "timestamp": "2025-08-13T11:12:22.163176",
        "response_time": "2.58",
        "context": "{\"function_name\": \"is_not_prime\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 4,
        "solution": "===START===\nfrom typing import List\nimport heapq\n\ndef heap_queue_largest(nums: List[int], n: int) -> str:\n    largest_nums = heapq.nlargest(n, nums)\n    largest_nums.sort(reverse=True)\n    return ' '.join(map(str, largest_nums))\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
        "timestamp": "2025-08-13T11:12:23.644122",
        "response_time": "1.48",
        "context": "{\"function_name\": \"heap_queue_largest\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 6,
        "solution": "===START===\nfrom typing import Tuple\n\ndef is_Power_Of_Two (x: int) -> bool:\n    return (x & (x - 1)) == 0 and x != 0\n\ndef check_one_bit_difference(num1: int, num2: int) -> str:\n    xor_result = num1 ^ num2\n    return \"true\" if is_Power_Of_Two(xor_result) else \"false\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
        "timestamp": "2025-08-13T11:12:26.186161",
        "response_time": "2.54",
        "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 7,
        "solution": "===START===\nfrom typing import List\n\ndef find_char_long(text: str) -> str:\n    words = text.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return ' '.join(long_words)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
        "timestamp": "2025-08-13T11:12:27.926853",
        "response_time": "1.74",
        "context": "{\"function_name\": \"find_char_long\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 8,
        "solution": "===START===\nfrom typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
        "timestamp": "2025-08-13T11:12:30.340427",
        "response_time": "2.41",
        "context": "{\"function_name\": \"square_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 9,
        "solution": "===START===\nfrom typing import List\n\ndef find_Rotations(s: str) -> str:\n    n = len(s)\n    for i in range(1, n + 1):\n        rotated = s[i:] + s[:i]\n        if rotated == s:\n            return str(i)\n    return str(n)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
        "timestamp": "2025-08-13T11:12:32.684595",
        "response_time": "2.34",
        "context": "{\"function_name\": \"find_Rotations\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 11,
        "solution": "===START===\nfrom typing import List\n\ndef remove_Occ(s: str, ch: str) -> str:\n    first_occurrence_index = s.find(ch)\n    if first_occurrence_index == -1:\n        return s\n    \n    last_occurrence_index = s.rfind(ch)\n    if last_occurrence_index == -1 or first_occurrence_index == last_occurrence_index:\n        return s[:first_occurrence_index] + s[first_occurrence_index + 1:]\n    \n    return s[:first_occurrence_index] + s[first_occurrence_index + 1:last_occurrence_index] + s[last_occurrence_index + 1:]\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
        "timestamp": "2025-08-13T11:12:36.167412",
        "response_time": "3.48",
        "context": "{\"function_name\": \"remove_Occ\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 12,
        "solution": "===START===\nfrom typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    return sorted(M, key=sum)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
        "timestamp": "2025-08-13T11:12:38.079149",
        "response_time": "1.91",
        "context": "{\"function_name\": \"sort_matrix\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 14,
        "solution": "===START===\nfrom typing import Union\n\ndef find_Volume(l: Union[int, float], b: Union[int, float], h: Union[int, float]) -> str:\n    # Volume of a triangular prism = (Base Area) * (Height of the prism)\n    # Base Area of a triangle = (base * height) / 2\n    base_area = (b * h) / 2\n    volume = base_area * l\n    return str(volume)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
        "timestamp": "2025-08-13T11:12:40.852766",
        "response_time": "2.77",
        "context": "{\"function_name\": \"find_Volume\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 16,
        "solution": "===START===\nfrom typing import List\n\ndef text_lowercase_underscore(text: str) -> str:\n    import re\n    pattern = re.compile(r'^[a-z]+(_[a-z]+)*$')\n    return \"true\" if pattern.match(text) else \"false\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
        "timestamp": "2025-08-13T11:12:43.021683",
        "response_time": "2.17",
        "context": "{\"function_name\": \"text_lowercase_underscore\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 17,
        "solution": "===START===\nfrom typing import Union\n\ndef square_perimeter(a: Union[int, float]) -> str:\n    perimeter = 4 * a\n    return str(perimeter)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
        "timestamp": "2025-08-13T11:12:45.492655",
        "response_time": "2.47",
        "context": "{\"function_name\": \"square_perimeter\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 18,
        "solution": "===START===\nfrom typing import List\n\ndef str_to_list(string: str) -> List[str]:\n    return list(string)\n\ndef remove_characters(first_string: str, second_string: str) -> str:\n    first_list = str_to_list(first_string)\n    second_set = set(str_to_list(second_string))\n    result_list = [char for char in first_list if char not in second_set]\n    return ''.join(result_list)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
        "timestamp": "2025-08-13T11:12:47.402641",
        "response_time": "1.91",
        "context": "{\"function_name\": \"remove_dirty_chars\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 19,
        "solution": "===START===\nfrom typing import List\n\ndef test_duplicate(arraynums: List[int]) -> str:\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return \"True\"\n        seen.add(num)\n    return \"False\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
        "timestamp": "2025-08-13T11:12:50.187316",
        "response_time": "2.78",
        "context": "{\"function_name\": \"test_duplicate\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 20,
        "solution": "===START===\nfrom typing import Union\n\ndef is_woodall(x: Union[int, float]) -> str:\n    if not isinstance(x, int) or x < 0:\n        return \"False\"\n    \n    n = 0\n    while (n * (2 ** n) - 1) <= x:\n        if (n * (2 ** n) - 1) == x:\n            return \"True\"\n        n += 1\n    \n    return \"False\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
        "timestamp": "2025-08-13T11:12:53.372286",
        "response_time": "3.18",
        "context": "{\"function_name\": \"is_woodall\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 56,
        "solution": "===START===\nfrom typing import Union\n\ndef rev(num: Union[int, str]) -> str:\n    # Convert the number to a string to reverse it\n    num_str = str(num)\n    reversed_str = num_str[::-1]\n    # Calculate twice the reversed number and subtract one\n    twice_reversed_minus_one = 2 * int(reversed_str) - 1\n    # Check if the original number is equal to twice the reversed number minus one\n    if int(num_str) == twice_reversed_minus_one:\n        return \"True\"\n    else:\n        return \"False\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
        "timestamp": "2025-08-13T11:12:56.726656",
        "response_time": "3.35",
        "context": "{\"function_name\": \"check\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 57,
        "solution": "===START===\nfrom typing import List\n\ndef find_Max_Num(arr: List[int]) -> str:\n    # Convert each integer in the list to a string\n    arr_str = list(map(str, arr))\n    \n    # Sort the array based on the custom key\n    # The key is a lambda function that sorts the numbers by their value repeated 9 times\n    # This ensures that the comparison is based on the potential largest number they can form\n    arr_str.sort(key=lambda x: x*9, reverse=True)\n    \n    # Join the sorted array into a single string\n    max_num = ''.join(arr_str)\n    \n    return max_num\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
        "timestamp": "2025-08-13T11:13:00.611208",
        "response_time": "3.88",
        "context": "{\"function_name\": \"find_Max_Num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 58,
        "solution": "===START===\nfrom typing import Tuple\n\ndef opposite_Signs(x: int, y: int) -> str:\n    return \"True\" if (x ^ y) < 0 else \"False\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
        "timestamp": "2025-08-13T11:13:02.536832",
        "response_time": "1.92",
        "context": "{\"function_name\": \"opposite_Signs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 59,
        "solution": "===START===\nfrom typing import Union\n\ndef is_octagonal(n: int) -> Union[int, str]:\n    if n <= 0:\n        return \"Input must be a positive integer\"\n    # Formula to find the nth octagonal number: O_n = n * (3 * n - 2)\n    octagonal_number = n * (3 * n - 2)\n    return str(octagonal_number)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
        "timestamp": "2025-08-13T11:13:04.933022",
        "response_time": "2.39",
        "context": "{\"function_name\": \"is_octagonal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 61,
        "solution": "===START===\nfrom typing import List\n\ndef count_Substrings(s: str) -> str:\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == (j - i + 1):\n                count += 1\n                \n    return str(count)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
        "timestamp": "2025-08-13T11:13:07.392239",
        "response_time": "2.46",
        "context": "{\"function_name\": \"count_Substrings\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 62,
        "solution": "===START===\nfrom typing import List\n\ndef smallest_num(xs: List[int]) -> str:\n    if not xs:\n        return \"List is empty\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return str(smallest)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
        "timestamp": "2025-08-13T11:13:09.856758",
        "response_time": "2.46",
        "context": "{\"function_name\": \"smallest_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 63,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> str:\n    if not test_list:\n        return \"0\"\n    \n    max_diff = float('-inf')\n    for pair in test_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    \n    return str(max_diff)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
        "timestamp": "2025-08-13T11:13:12.685581",
        "response_time": "2.83",
        "context": "{\"function_name\": \"max_difference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 64,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
        "timestamp": "2025-08-13T11:13:14.878055",
        "response_time": "2.19",
        "context": "{\"function_name\": \"subject_marks\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 65,
        "solution": "===START===\nfrom typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
        "timestamp": "2025-08-13T11:13:17.341907",
        "response_time": "2.46",
        "context": "{\"function_name\": \"recursive_list_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 66,
        "solution": "===START===\nfrom typing import List\n\ndef pos_count(lst: List[int]) -> str:\n    count = 0\n    for number in lst:\n        if number > 0:\n            count += 1\n    return str(count)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
        "timestamp": "2025-08-13T11:13:19.624896",
        "response_time": "2.28",
        "context": "{\"function_name\": \"pos_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 67,
        "solution": "===START===\nfrom typing import List\n\ndef bell_number(n: int) -> int:\n    # Create a table to store results of subproblems\n    bell: List[List[int]] = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # Base case: Bell(0) is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly put value in first column\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill for remaining columns of row i\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # Bell number is the first element of the last row\n    return bell[n][0]\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
        "timestamp": "2025-08-13T11:13:24.569925",
        "response_time": "4.94",
        "context": "{\"function_name\": \"bell_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 68,
        "solution": "===START===\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> str:\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n    \n    return \"true\" if increasing or decreasing else \"false\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
        "timestamp": "2025-08-13T11:13:27.433982",
        "response_time": "2.86",
        "context": "{\"function_name\": \"is_Monotonic\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 69,
        "solution": "===START===\nfrom typing import List\n\ndef is_sublist(l: List, s: List) -> str:\n    if not s:\n        return \"True\"\n    if len(s) > len(l):\n        return \"False\"\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return \"True\"\n    return \"False\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
        "timestamp": "2025-08-13T11:13:34.168801",
        "response_time": "6.73",
        "context": "{\"function_name\": \"is_sublist\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 70,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef find_equal_tuple(Input: List[Tuple]) -> str:\n    if not Input:\n        return \"All tuples have equal length.\"\n    \n    first_length = len(Input[0])\n    for t in Input:\n        if len(t) != first_length:\n            return \"Not all tuples have equal length.\"\n    \n    return \"All tuples have equal length.\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
        "timestamp": "2025-08-13T11:13:37.034495",
        "response_time": "2.86",
        "context": "{\"function_name\": \"get_equal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 71,
        "solution": "===START===\nfrom typing import List\n\ndef comb_sort(nums: List[int]) -> str:\n    def get_next_gap(gap: int) -> int:\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return str(nums)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
        "timestamp": "2025-08-13T11:13:41.603290",
        "response_time": "4.57",
        "context": "{\"function_name\": \"comb_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 72,
        "solution": "===START===\nfrom typing import Union\n\ndef dif_Square(n: int) -> str:\n    # A number can be expressed as the difference of two squares if and only if it is not of the form 4k+2\n    if n % 4 == 2:\n        return \"No\"\n    else:\n        return \"Yes\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
        "timestamp": "2025-08-13T11:13:44.205330",
        "response_time": "2.60",
        "context": "{\"function_name\": \"dif_Square\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 74,
        "solution": "===START===\nfrom typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> str:\n    if len(colors) != len(patterns):\n        return \"False\"\n    \n    pattern_to_color = {}\n    color_to_pattern = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return \"False\"\n        else:\n            pattern_to_color[pattern] = color\n        \n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return \"False\"\n        else:\n            color_to_pattern[color] = pattern\n    \n    return \"True\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
        "timestamp": "2025-08-13T11:13:47.324975",
        "response_time": "3.12",
        "context": "{\"function_name\": \"is_samepatterns\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 75,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int]], K: int) -> List[Tuple[int]]:\n    result = [tup for tup in test_list if all(element % K == 0 for element in tup)]\n    return str(result)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
        "timestamp": "2025-08-13T11:13:52.094115",
        "response_time": "4.77",
        "context": "{\"function_name\": \"find_tuples\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 77,
        "solution": "===START===\nfrom typing import Union\n\ndef is_Diff(n: Union[int, str]) -> str:\n    # Convert input to string if it's an integer\n    n_str = str(n)\n    \n    # Calculate the alternating sum of digits\n    alt_sum = 0\n    for i, digit in enumerate(n_str):\n        if i % 2 == 0:\n            alt_sum += int(digit)\n        else:\n            alt_sum -= int(digit)\n    \n    # Check if the alternating sum is divisible by 11\n    if alt_sum % 11 == 0:\n        return \"Divisible by 11\"\n    else:\n        return \"Not divisible by 11\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
        "timestamp": "2025-08-13T11:13:55.799076",
        "response_time": "3.70",
        "context": "{\"function_name\": \"is_Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 79,
        "solution": "===START===\nfrom typing import List\n\ndef word_len(s: str) -> str:\n    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
        "timestamp": "2025-08-13T11:13:57.322779",
        "response_time": "1.52",
        "context": "{\"function_name\": \"word_len\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 80,
        "solution": "===START===\nfrom typing import Union\n\ndef tetrahedral_number(n: int) -> Union[int, str]:\n    if n < 0:\n        return \"Invalid input: n must be a non-negative integer\"\n    return (n * (n + 1) * (n + 2)) // 6\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
        "timestamp": "2025-08-13T11:14:00.431849",
        "response_time": "3.11",
        "context": "{\"function_name\": \"tetrahedral_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 82,
        "solution": "===START===\nfrom math import pi\n\ndef volume_sphere(r):\n    return str((4/3) * pi * r**3)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
        "timestamp": "2025-08-13T11:14:01.682243",
        "response_time": "1.25",
        "context": "{\"function_name\": \"volume_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 83,
        "solution": "===START===\nfrom typing import List\n\ndef get_Char(strr: str) -> str:\n    ascii_sum = sum(ord(char) for char in strr)\n    result_ascii = ascii_sum % 26\n    # Mapping result_ascii to a character 'a' to 'z'\n    result_char = chr(result_ascii + ord('a'))\n    return result_char\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
        "timestamp": "2025-08-13T11:14:04.076678",
        "response_time": "2.39",
        "context": "{\"function_name\": \"get_Char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 84,
        "solution": "===START===\nfrom typing import List\n\ndef sequence(n: int) -> str:\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return \"1\"\n    \n    # Initialize the sequence with the first two known values\n    seq: List[int] = [0, 1, 1]\n    \n    # Generate the sequence up to the nth number\n    for i in range(3, n + 1):\n        next_value = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n        seq.append(next_value)\n    \n    # Convert the sequence to a space-separated string\n    return \" \".join(map(str, seq[1:n + 1]))\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
        "timestamp": "2025-08-13T11:14:08.059057",
        "response_time": "3.98",
        "context": "{\"function_name\": \"sequence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 85,
        "solution": "===START===\nfrom math import pi\n\ndef surfacearea_sphere(r):\n    return str(4 * pi * r ** 2)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
        "timestamp": "2025-08-13T11:14:10.065270",
        "response_time": "2.00",
        "context": "{\"function_name\": \"surfacearea_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 86,
        "solution": "===START===\nfrom typing import Union\n\ndef centered_hexagonal_number(n: int) -> Union[int, str]:\n    if n < 1:\n        return \"Input must be a positive integer.\"\n    return 3 * n * (n - 1) + 1\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
        "timestamp": "2025-08-13T11:14:12.740026",
        "response_time": "2.67",
        "context": "{\"function_name\": \"centered_hexagonal_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder32b",
        "dataset_row_id": 87,
        "solution": "===START===\nfrom typing import Dict, Any\n\ndef merge_dictionaries_three(dict1: Dict[Any, Any], dict2: Dict[Any, Any], dict3: Dict[Any, Any]) -> str:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return str(merged_dict)\n===END===",
        "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
        "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
        "timestamp": "2025-08-13T11:14:15.496943",
        "response_time": "2.75",
        "context": "{\"function_name\": \"merge_dictionaries_three\"}"
    }
]