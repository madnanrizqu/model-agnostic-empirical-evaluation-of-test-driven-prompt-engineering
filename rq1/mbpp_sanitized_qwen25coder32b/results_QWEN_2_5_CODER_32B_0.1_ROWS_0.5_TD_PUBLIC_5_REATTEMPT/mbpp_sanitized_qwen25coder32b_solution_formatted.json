[
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 2,
    "solution": "def similar_elements(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup2))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
    "timestamp": "2025-09-20T14:05:14.815270",
    "response_time": "1.81",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 3,
    "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
    "timestamp": "2025-09-20T14:05:18.023544",
    "response_time": "3.21",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 4,
    "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)[::-1]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
    "timestamp": "2025-09-20T14:05:19.134878",
    "response_time": "1.11",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 6,
    "solution": "def is_Power_Of_Two (x):\n    return (x != 0) and (x & (x - 1)) == 0\n\ndef differ_at_one_bit_position(a, b):\n    xor_result = a ^ b\n    return is_Power_Of_Two(xor_result)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
    "timestamp": "2025-09-20T14:05:21.332770",
    "response_time": "2.20",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 7,
    "solution": "import re\n\ndef find_char_long(text):\n    # Use regular expression to find all words with at least 4 characters\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
    "timestamp": "2025-09-20T14:05:23.060743",
    "response_time": "1.73",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 8,
    "solution": "def square_nums(nums):\n    return [x ** 2 for x in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
    "timestamp": "2025-09-20T14:05:23.942459",
    "response_time": "0.88",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 9,
    "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
    "timestamp": "2025-09-20T14:05:25.660575",
    "response_time": "1.72",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 11,
    "solution": "def remove_Occ(s, ch):\n    # Find the first occurrence and remove it\n    first_occurrence = s.find(ch)\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence + 1:]\n    \n    # Find the last occurrence and remove it\n    last_occurrence = s.rfind(ch)\n    if last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence + 1:]\n    \n    return s",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
    "timestamp": "2025-09-20T14:05:29.090981",
    "response_time": "3.43",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 12,
    "solution": "def sort_matrix(M):\n    from operator import itemgetter\n    # Pair each row with its sum, sort by the sum, and then extract the sorted rows\n    sorted_matrix = [row for _, row in sorted(zip(map(sum, M), M), key=itemgetter(0))]\n    return sorted_matrix",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
    "timestamp": "2025-09-20T14:05:31.270163",
    "response_time": "2.18",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 14,
    "solution": "def find_Volume(l,b,h) :\n    # l is the length of the prism\n    # b is the base of the triangular face\n    # h is the height of the triangular face\n    # Volume of a triangular prism = (1/2) * base * height * length\n    return 0.5 * b * h * l",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
    "timestamp": "2025-09-20T14:05:33.758148",
    "response_time": "2.49",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 16,
    "solution": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
    "timestamp": "2025-09-20T14:05:35.246463",
    "response_time": "1.49",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 17,
    "solution": "def square_perimeter(a):\n    return 4 * a",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
    "timestamp": "2025-09-20T14:05:36.023886",
    "response_time": "0.77",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 18,
    "solution": "def remove_dirty_chars(string):\n    return list(string)\n\ndef remove_characters(first_string, second_string):\n    first_list = str_to_list(first_string)\n    second_list = str_to_list(second_string)\n    result = [char for char in first_list if char not in second_list]\n    return ''.join(result)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
    "timestamp": "2025-09-20T14:05:38.230266",
    "response_time": "2.20",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 19,
    "solution": "def test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
    "timestamp": "2025-09-20T14:05:39.680367",
    "response_time": "1.45",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 20,
    "solution": "def is_woodall(x):\n    if x < 0:\n        return False\n    n = 0\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        if woodall_number > x:\n            return False\n        n += 1",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
    "timestamp": "2025-09-20T14:05:42.176989",
    "response_time": "2.49",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 56,
    "solution": "def check(num):\n    reversed_num = int(str(num)[::-1])\n    return num == 2 * reversed_num - 1",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
    "timestamp": "2025-09-20T14:05:43.379864",
    "response_time": "1.20",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 57,
    "solution": "from functools import cmp_to_key\n\ndef find_Max_Num(arr):\n    # Convert all integers in the array to strings\n    arr = list(map(str, arr))\n    \n    # Define a custom comparator\n    def compare(x, y):\n        # Compare concatenated results\n        if x + y > y + x:\n            return -1\n        elif x + y < y + x:\n            return 1\n        else:\n            return 0\n    \n    # Sort the array with the custom comparator\n    arr.sort(key=cmp_to_key(compare))\n    \n    # Join the sorted array to form the largest number\n    largest_num = ''.join(arr)\n    \n    # Handle the case where the largest number is '0'\n    if largest_num[0] == '0':\n        return '0'\n    \n    return largest_num",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
    "timestamp": "2025-09-20T14:05:48.543410",
    "response_time": "5.16",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 58,
    "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
    "timestamp": "2025-09-20T14:05:49.545622",
    "response_time": "1.00",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 59,
    "solution": "def is_octagonal(n):\n    if n <= 0:\n        return None\n    # The formula for the nth octagonal number is O_n = n * (3 * n - 2)\n    return n * (3 * n - 2)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
    "timestamp": "2025-09-20T14:05:51.645287",
    "response_time": "2.10",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 61,
    "solution": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    balance = 0\n    prefix_count = defaultdict(int)\n    prefix_count[0] = 1\n    \n    for i, char in enumerate(s):\n        balance += int(char) - 1\n        count += prefix_count[balance]\n        prefix_count[balance] += 1\n    \n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
    "timestamp": "2025-09-20T14:05:54.333175",
    "response_time": "2.69",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 62,
    "solution": "def smallest_num(xs):\n    if not xs:\n        raise ValueError(\"The list is empty\")\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
    "timestamp": "2025-09-20T14:05:56.061069",
    "response_time": "1.72",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 63,
    "solution": "from itertools import combinations\n\ndef max_difference(test_list):\n    # Generate all possible pairs\n    pairs = combinations(test_list, 2)\n    # Calculate the absolute difference for each pair\n    differences = [abs(a - b) for a, b in pairs]\n    # Return the maximum difference found\n    return max(differences) if differences else 0",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
    "timestamp": "2025-09-20T14:05:58.561180",
    "response_time": "2.50",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 64,
    "solution": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
    "timestamp": "2025-09-20T14:05:59.531919",
    "response_time": "0.97",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 65,
    "solution": "def recursive_list_sum(data_list):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n\n    return sum(flatten(data_list))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
    "timestamp": "2025-09-20T14:06:01.234847",
    "response_time": "1.70",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 66,
    "solution": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
    "timestamp": "2025-09-20T14:06:02.595388",
    "response_time": "1.36",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 67,
    "solution": "def bell_number(n):\n    # Initialize a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Base case: Bell(0) is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly put the value of Bell(i, 0)\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # Bell(n) is the first value of row n\n    return bell[n][0]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
    "timestamp": "2025-09-20T14:06:08.064674",
    "response_time": "5.47",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 68,
    "solution": "def is_Monotonic(A):\n    if not A:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
    "timestamp": "2025-09-20T14:06:10.592778",
    "response_time": "2.52",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 69,
    "solution": "def is_sublist(l, s):\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
    "timestamp": "2025-09-20T14:06:12.862759",
    "response_time": "2.27",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 70,
    "solution": "def get_equal(Input):\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    for t in Input:\n        if len(t) != first_length:\n            return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
    "timestamp": "2025-09-20T14:06:14.688054",
    "response_time": "1.82",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 71,
    "solution": "def comb_sort(nums):\n    import math\n\n    def get_next_gap(gap):\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
    "timestamp": "2025-09-20T14:06:18.865268",
    "response_time": "4.17",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 72,
    "solution": "def dif_Square(n):\n    # A number can be represented as the difference of two squares if and only if it is not of the form 4k+2\n    # This is because (a^2 - b^2) = (a-b)(a+b) and the product of two integers can be any integer except those of the form 4k+2\n    if n % 4 == 2:\n        return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
    "timestamp": "2025-09-20T14:06:21.994408",
    "response_time": "3.13",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 74,
    "solution": "from collections import defaultdict\n\ndef is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = defaultdict(str)\n    pattern_to_color = defaultdict(str)\n    \n    for color, pattern in zip(colors, patterns):\n        if color_to_pattern[color] and color_to_pattern[color] != pattern:\n            return False\n        if pattern_to_color[pattern] and pattern_to_color[pattern] != color:\n            return False\n        color_to_pattern[color] = pattern\n        pattern_to_color[pattern] = color\n    \n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
    "timestamp": "2025-09-20T14:06:25.784336",
    "response_time": "3.79",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 75,
    "solution": "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int]], K: int) -> List[Tuple[int]]:\n    result = [tup for tup in test_list if all(element % K == 0 for element in tup)]\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
    "timestamp": "2025-09-20T14:06:27.813643",
    "response_time": "2.03",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 77,
    "solution": "def is_Diff(n):\n    # Convert the number to a string to easily access each digit\n    str_n = str(n)\n    \n    # Initialize two variables to store the sum of digits at odd and even positions\n    odd_sum = 0\n    even_sum = 0\n    \n    # Iterate over the string representation of the number\n    for i in range(len(str_n)):\n        # Convert the current character back to an integer\n        digit = int(str_n[i])\n        \n        # Check if the position is odd or even\n        if i % 2 == 0:\n            odd_sum += digit\n        else:\n            even_sum += digit\n    \n    # Calculate the difference between the sum of odd and even positioned digits\n    difference = abs(odd_sum - even_sum)\n    \n    # Check if the difference is divisible by 11\n    return difference % 11 == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
    "timestamp": "2025-09-20T14:06:33.452972",
    "response_time": "5.64",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 79,
    "solution": "def word_len(s):\n    return len(s) % 2 != 0",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
    "timestamp": "2025-09-20T14:06:34.454812",
    "response_time": "1.00",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 80,
    "solution": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) // 6",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
    "timestamp": "2025-09-20T14:06:35.689327",
    "response_time": "1.23",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 82,
    "solution": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
    "timestamp": "2025-09-20T14:06:36.921091",
    "response_time": "1.23",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 83,
    "solution": "import string\n\ndef get_Char(strr):\n    total_ascii = sum(ord(char) for char in strr)\n    mod_value = total_ascii % 26\n    if mod_value == 0:\n        return 'z'\n    return string.ascii_lowercase[mod_value - 1]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
    "timestamp": "2025-09-20T14:06:38.972413",
    "response_time": "2.05",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 84,
    "solution": "def sequence(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Initialize the sequence with the first two known values\n    seq = [0, 1, 1]\n    \n    # Generate the sequence up to the nth number\n    for i in range(3, n + 1):\n        next_value = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n        seq.append(next_value)\n    \n    return seq[n]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
    "timestamp": "2025-09-20T14:06:42.544711",
    "response_time": "3.57",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 85,
    "solution": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
    "timestamp": "2025-09-20T14:06:44.009886",
    "response_time": "1.46",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 86,
    "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
    "timestamp": "2025-09-20T14:06:45.232676",
    "response_time": "1.22",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b",
    "dataset_row_id": 87,
    "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
    "timestamp": "2025-09-20T14:06:46.953130",
    "response_time": "1.72",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  }
]