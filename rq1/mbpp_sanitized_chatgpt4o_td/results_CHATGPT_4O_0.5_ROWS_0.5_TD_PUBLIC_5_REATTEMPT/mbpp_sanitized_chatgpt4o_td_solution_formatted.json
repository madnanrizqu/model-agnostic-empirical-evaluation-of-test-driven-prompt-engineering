[
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 2,
    "solution": "def similar_elements(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup2))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):\n\n### Test\nassert set(candidate((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))",
    "timestamp": "2025-10-17T18:43:31.204530",
    "response_time": "3.67",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 3,
    "solution": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n    return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):\n\n### Test\nassert candidate(2) == False\nassert candidate(10) == True",
    "timestamp": "2025-10-17T18:43:33.431016",
    "response_time": "2.22",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 4,
    "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return sorted(heapq.nlargest(n, nums), reverse=True)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):\n\n### Test\nassert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]",
    "timestamp": "2025-10-17T18:43:34.673156",
    "response_time": "1.24",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 6,
    "solution": "def differ_At_One_Bit_Pos(x, y):\n    # XOR the two numbers, if they differ at exactly one bit position, the result will be a power of 2\n    xor_result = x ^ y\n    # Check if the result is a power of 2 (only one bit set)\n    return (xor_result & (xor_result - 1)) == 0 and xor_result != 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):\n\n### Test\nassert candidate(13,9) == True\nassert candidate(15,8) == False\nassert candidate(2,4) == False",
    "timestamp": "2025-10-17T18:43:38.693942",
    "response_time": "4.01",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 7,
    "solution": "def find_char_long(text):\n    # Split the text into words\n    words = text.split()\n    # Filter words that are at least 4 characters long\n    result = [word for word in words if len(word) >= 4]\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):\n\n### Test\nassert set(candidate('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])",
    "timestamp": "2025-10-17T18:43:40.822866",
    "response_time": "2.13",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 8,
    "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
    "timestamp": "2025-10-17T18:43:42.391826",
    "response_time": "1.56",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 9,
    "solution": "def find_Rotations(str):\n    n = len(str)\n    for i in range(1, n + 1):\n        if str == str[i:] + str[:i]:\n            return i",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):\n\n### Test\nassert candidate(\"aaaa\") == 1",
    "timestamp": "2025-10-17T18:43:43.579599",
    "response_time": "1.19",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 11,
    "solution": "def remove_Occ(s, ch):\n    # Find the first occurrence of the character\n    first_index = s.find(ch)\n    # Find the last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    # If the character is not found, return the original string\n    if first_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index + 1:]\n    \n    # Adjust the last index if it comes after the first removal\n    if last_index > first_index:\n        last_index -= 1\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index + 1:]\n    \n    return s",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):\n\n### Test\nassert candidate(\"hello\",\"l\") == \"heo\"",
    "timestamp": "2025-10-17T18:43:46.945947",
    "response_time": "3.36",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 12,
    "solution": "def sort_matrix(M):\n    # Sort the matrix based on the sum of each row\n    return sorted(M, key=sum)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):\n\n### Test\nassert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
    "timestamp": "2025-10-17T18:43:48.044265",
    "response_time": "1.10",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 14,
    "solution": "def find_Volume(l, b, h):\n    # The volume of a triangular prism is given by the formula:\n    # Volume = (1/2 * base * height) * length\n    return (0.5 * b * h) * l",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :\n\n### Test\nassert candidate(10,8,6) == 240",
    "timestamp": "2025-10-17T18:43:49.988577",
    "response_time": "1.94",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 16,
    "solution": "import re\n\ndef text_lowercase_underscore(text):\n    # Check if the string matches the pattern of lowercase letters joined by underscores\n    return bool(re.fullmatch(r'[a-z]+(_[a-z]+)*', text))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):\n\n### Test\nassert candidate(\"aab_cbbbc\")==(True)",
    "timestamp": "2025-10-17T18:43:52.325107",
    "response_time": "2.33",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 17,
    "solution": "def square_perimeter(a):\n    return 4 * a",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):\n\n### Test\nassert candidate(10)==40",
    "timestamp": "2025-10-17T18:43:53.252488",
    "response_time": "0.93",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 18,
    "solution": "def remove_dirty_chars(string1, string2):\n    result = ''.join([char for char in string1 if char not in string2])\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):\n\n### Test\nassert candidate(\"probasscurve\", \"pros\") == \"\"\"bacuve\"\"\"",
    "timestamp": "2025-10-17T18:43:54.697532",
    "response_time": "1.44",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 19,
    "solution": "def test_duplicate(arraynums):\n    # Use a set to track seen numbers\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True  # Duplicate found\n        seen.add(num)\n    return False  # No duplicates found",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):\n\n### Test\nassert candidate(([1,2,3,4,5]))==False",
    "timestamp": "2025-10-17T18:43:56.986340",
    "response_time": "2.29",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 20,
    "solution": "def is_woodall(x):\n    \"\"\"\n    Function to check if a given number is a Woodall number.\n    A Woodall number is of the form n * 2^n - 1, where n is a positive integer.\n    \"\"\"\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):\n\n### Test\nassert candidate(383) == True",
    "timestamp": "2025-10-17T18:43:59.694310",
    "response_time": "2.71",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 56,
    "solution": "def check(num):\n    # Reverse the number\n    reversed_num = int(str(num)[::-1])\n    # Check if the number is one less than twice its reverse\n    return num == 2 * reversed_num - 1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):\n\n### Test\nassert candidate(70) == False",
    "timestamp": "2025-10-17T18:44:00.969176",
    "response_time": "1.27",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 57,
    "solution": "from functools import cmp_to_key\n\ndef find_Max_Num(arr):\n    def compare(x, y):\n        # Compare concatenated strings in both orders\n        if x + y > y + x:\n            return -1\n        elif x + y < y + x:\n            return 1\n        else:\n            return 0\n\n    # Convert all integers to strings for comparison\n    arr = list(map(str, arr))\n    # Sort using the custom comparator\n    arr.sort(key=cmp_to_key(compare))\n    # Join the sorted array into a single string and convert to integer\n    return int(''.join(arr))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :\n\n### Test\nassert candidate([1,2,3]) == 321",
    "timestamp": "2025-10-17T18:44:04.337129",
    "response_time": "3.37",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 58,
    "solution": "def opposite_Signs(x, y):\n    # Check if the product of x and y is negative\n    return (x * y) < 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):\n\n### Test\nassert candidate(1,-2) == True\nassert candidate(3,2) == False",
    "timestamp": "2025-10-17T18:44:06.183993",
    "response_time": "1.84",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 59,
    "solution": "def is_octagonal(n):\n    # The formula for the nth octagonal number is: n * (3n - 2)\n    return n * (3 * n - 2)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):\n\n### Test\nassert candidate(5) == 65",
    "timestamp": "2025-10-17T18:44:08.062075",
    "response_time": "1.88",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 61,
    "solution": "def count_Substrings(s):\n    def digit_sum(substring):\n        return sum(int(char) for char in substring)\n    \n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if digit_sum(substring) == len(substring):\n                count += 1\n    \n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):\n\n### Test\nassert candidate('112112') == 6",
    "timestamp": "2025-10-17T18:44:10.672610",
    "response_time": "2.61",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 62,
    "solution": "def smallest_num(xs):\n    if not xs:\n        raise ValueError(\"The list is empty\")\n    return min(xs)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):\n\n### Test\nassert candidate([10, 20, 1, 45, 99]) == 1",
    "timestamp": "2025-10-17T18:44:11.936671",
    "response_time": "1.26",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 63,
    "solution": "def max_difference(test_list):\n    # Calculate the difference for each tuple and find the maximum difference\n    return max(abs(a - b) for a, b in test_list)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):\n\n### Test\nassert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
    "timestamp": "2025-10-17T18:44:13.125481",
    "response_time": "1.19",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 64,
    "solution": "def subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second value of each tuple\n    return sorted(subjectmarks, key=lambda x: x[1])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):\n\n### Test\nassert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
    "timestamp": "2025-10-17T18:44:14.929585",
    "response_time": "1.80",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 65,
    "solution": "def recursive_list_sum(data_list):\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):\n\n### Test\nassert candidate(([1, 2, [3,4],[5,6]]))==21",
    "timestamp": "2025-10-17T18:44:16.114800",
    "response_time": "1.18",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 66,
    "solution": "def pos_count(lst):\n    return sum(1 for x in lst if x > 0)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):\n\n### Test\nassert candidate([1,-2,3,-4]) == 2",
    "timestamp": "2025-10-17T18:44:16.890008",
    "response_time": "0.77",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 67,
    "solution": "def bell_number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Base case: Bell(0, 0) = 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # First value in every row is the last value of the previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the entries in the current row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # Return the nth Bell number\n    return bell[n][0]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):\n\n### Test\nassert candidate(2)==2",
    "timestamp": "2025-10-17T18:44:20.532906",
    "response_time": "3.64",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 68,
    "solution": "def is_Monotonic(A):\n    if not A:\n        return True  # An empty array is considered monotonic\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        if A[i] < A[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):\n\n### Test\nassert candidate([6, 5, 4, 4]) == True",
    "timestamp": "2025-10-17T18:44:22.403772",
    "response_time": "1.87",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 69,
    "solution": "def is_sublist(l, s):\n    # Check if the sublist `s` exists in list `l`\n    if not s:  # An empty sublist is always a sublist\n        return True\n    if not l:  # If the main list is empty, no sublist can exist\n        return False\n    \n    # Iterate through the main list to check for the sublist\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):\n\n### Test\nassert candidate([2,4,3,5,7],[3,7])==False",
    "timestamp": "2025-10-17T18:44:26.579010",
    "response_time": "4.17",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 70,
    "solution": "def get_equal(Input):\n    # Check if all tuples in the list have the same length\n    if not Input:\n        return True  # If the input list is empty, return True\n    first_length = len(Input[0])\n    return all(len(t) == first_length for t in Input)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):\n\n### Test\nassert candidate([(11, 22, 33), (44, 55, 66)]) == True",
    "timestamp": "2025-10-17T18:44:30.312161",
    "response_time": "3.73",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 71,
    "solution": "def comb_sort(nums):\n    def get_next_gap(gap):\n        # Shrink gap by shrink factor\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):\n\n### Test\nassert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
    "timestamp": "2025-10-17T18:44:33.933047",
    "response_time": "3.62",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 72,
    "solution": "def dif_Square(n):\n    # A number can be represented as the difference of two squares if and only if it is not of the form 4k+2\n    # where k is an integer.\n    return n % 4 != 2",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):\n\n### Test\nassert candidate(5) == True",
    "timestamp": "2025-10-17T18:44:38.135952",
    "response_time": "4.20",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 74,
    "solution": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):\n\n### Test\nassert candidate([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
    "timestamp": "2025-10-17T18:44:41.153499",
    "response_time": "3.01",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 75,
    "solution": "def find_tuples(test_list, K):\n    # Filter tuples where all elements are divisible by K\n    return [tup for tup in test_list if all(ele % K == 0 for ele in tup)]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):\n\n### Test\nassert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
    "timestamp": "2025-10-17T18:44:42.732019",
    "response_time": "1.58",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 77,
    "solution": "def is_Diff(n):\n    \"\"\"\n    Function to determine if a number is divisible by 11.\n    \"\"\"\n    # Calculate the alternating sum of the digits\n    digits = [int(d) for d in str(n)]\n    alternating_sum = sum(digits[i] if i % 2 == 0 else -digits[i] for i in range(len(digits)))\n    \n    # Check divisibility by 11\n    return alternating_sum % 11 == 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):\n\n### Test\nassert candidate (12345) == False",
    "timestamp": "2025-10-17T18:44:45.456012",
    "response_time": "2.72",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 79,
    "solution": "def word_len(s):\n    return len(s) % 2 != 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):\n\n### Test\nassert candidate(\"Hadoop\") == False",
    "timestamp": "2025-10-17T18:44:46.837298",
    "response_time": "1.38",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 80,
    "solution": "def tetrahedral_number(n):\n    # The nth tetrahedral number is given by the formula:\n    # T(n) = n * (n + 1) * (n + 2) / 6\n    return n * (n + 1) * (n + 2) // 6",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):\n\n### Test\nassert candidate(5) == 35",
    "timestamp": "2025-10-17T18:44:48.437644",
    "response_time": "1.60",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 82,
    "solution": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r**3)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 4188.790204786391, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:44:49.693473",
    "response_time": "1.25",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 83,
    "solution": "def get_Char(strr):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in strr)\n    # Find the modulo 26 of the sum\n    mod_26 = ascii_sum % 26\n    # Convert the result to a character by adding it to 'a' (ASCII value 97)\n    result_char = chr(mod_26 + ord('a'))\n    return result_char",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):\n\n### Test\nassert candidate(\"abc\") == \"f\"",
    "timestamp": "2025-10-17T18:44:53.867700",
    "response_time": "4.17",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 84,
    "solution": "def sequence(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    \n    # Initialize the sequence with the first two values\n    seq = [0] * (n + 1)\n    seq[1] = 1\n    seq[2] = 1\n    \n    # Compute the sequence iteratively\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    \n    return seq[n]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):\n\n### Test\nassert candidate(10) == 6",
    "timestamp": "2025-10-17T18:44:57.435281",
    "response_time": "3.56",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 85,
    "solution": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 1256.6370614359173, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:44:59.546689",
    "response_time": "2.11",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 86,
    "solution": "def centered_hexagonal_number(n):\n    # The formula for the nth centered hexagonal number is:\n    # 3 * n * (n - 1) + 1\n    return 3 * n * (n - 1) + 1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):\n\n### Test\nassert candidate(10) == 271",
    "timestamp": "2025-10-17T18:45:01.764271",
    "response_time": "2.21",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 87,
    "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge the three dictionaries into one\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\n### Test\nassert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={\"\"\"B\"\"\": \"\"\"Black\"\"\", \"\"\"R\"\"\": \"\"\"Red\"\"\", \"\"\"P\"\"\": \"\"\"Pink\"\"\", \"\"\"G\"\"\": \"\"\"Green\"\"\", \"\"\"W\"\"\": \"\"\"White\"\"\", \"\"\"O\"\"\": \"\"\"Orange\"\"\"}",
    "timestamp": "2025-10-17T18:45:04.190738",
    "response_time": "2.42",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 88,
    "solution": "def freq_count(list1):\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):\n\n### Test\nassert candidate([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})",
    "timestamp": "2025-10-17T18:45:05.544146",
    "response_time": "1.34",
    "context": "{\"function_name\": \"freq_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 89,
    "solution": "def closest_num(N):\n    # The closest smaller number than N is simply N - 1\n    return N - 1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):\n\n### Test\nassert candidate(11) == 10",
    "timestamp": "2025-10-17T18:45:07.067746",
    "response_time": "1.52",
    "context": "{\"function_name\": \"closest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 90,
    "solution": "def len_log(list1):\n    # Find the length of the longest word in the list\n    return max(len(word) for word in list1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):\n\n### Test\nassert candidate([\"python\",\"PHP\",\"bigdata\"]) == 7",
    "timestamp": "2025-10-17T18:45:08.429736",
    "response_time": "1.36",
    "context": "{\"function_name\": \"len_log\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 91,
    "solution": "def find_substring(str1, sub_str):\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):\n\n### Test\nassert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
    "timestamp": "2025-10-17T18:45:09.445117",
    "response_time": "1.01",
    "context": "{\"function_name\": \"find_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 92,
    "solution": "def is_undulating(n):\n    # Convert the number to a string for easier manipulation\n    n_str = str(n)\n    \n    # An undulating number must have at least 3 digits\n    if len(n_str) < 3:\n        return False\n    \n    # Extract the first two digits\n    a, b = n_str[0], n_str[1]\n    \n    # Check if the first two digits are the same\n    if a == b:\n        return False\n    \n    # Check if the number alternates between the two digits\n    for i in range(len(n_str)):\n        if i % 2 == 0 and n_str[i] != a:\n            return False\n        if i % 2 == 1 and n_str[i] != b:\n            return False\n    \n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):\n\n### Test\nassert candidate(1212121) == True",
    "timestamp": "2025-10-17T18:45:25.952544",
    "response_time": "16.50",
    "context": "{\"function_name\": \"is_undulating\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 93,
    "solution": "def power(a, b):\n    return a ** b",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):\n\n### Test\nassert candidate(3,4) == 81",
    "timestamp": "2025-10-17T18:45:27.476559",
    "response_time": "1.52",
    "context": "{\"function_name\": \"power\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 94,
    "solution": "def index_minimum(test_list):\n    # Find the tuple with the smallest second value\n    min_tuple = min(test_list, key=lambda x: x[1])\n    # Return the first value of that tuple\n    return min_tuple[0]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):\n\n### Test\nassert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
    "timestamp": "2025-10-17T18:45:29.544868",
    "response_time": "2.06",
    "context": "{\"function_name\": \"index_minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 95,
    "solution": "def Find_Min_Length(lst):\n    if not lst:  # Check if the list is empty\n        return 0\n    return min(len(sublist) for sublist in lst)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):\n\n### Test\nassert candidate([[1],[1,2]]) == 1",
    "timestamp": "2025-10-17T18:45:32.306061",
    "response_time": "2.75",
    "context": "{\"function_name\": \"Find_Min_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 96,
    "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):\n\n### Test\nassert candidate(15) == 4",
    "timestamp": "2025-10-17T18:45:35.118521",
    "response_time": "2.81",
    "context": "{\"function_name\": \"divisor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 97,
    "solution": "from collections import Counter\n\ndef frequency_lists(list1):\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    # Use Counter to count the frequency of each element\n    return dict(Counter(flattened_list))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):\n\n### Test\nassert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
    "timestamp": "2025-10-17T18:45:37.143498",
    "response_time": "2.02",
    "context": "{\"function_name\": \"frequency_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 98,
    "solution": "from functools import reduce\nimport math\n\ndef multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = reduce(lambda x, y: x * y, numbers)\n    return product / len(numbers)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):\n\n### Test\nassert math.isclose(candidate((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:45:38.544985",
    "response_time": "1.40",
    "context": "{\"function_name\": \"multiply_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 99,
    "solution": "def decimal_to_binary(n):\n    # Convert the decimal number to binary using bin() and remove the '0b' prefix\n    return bin(n)[2:]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):\n\n### Test\nassert candidate(8) == '1000'",
    "timestamp": "2025-10-17T18:45:40.161745",
    "response_time": "1.61",
    "context": "{\"function_name\": \"decimal_to_binary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 100,
    "solution": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    num += 1  # Start checking from the next number\n    while not is_palindrome(num):\n        num += 1\n    return num",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):\n\n### Test\nassert candidate(99)==101",
    "timestamp": "2025-10-17T18:45:43.216553",
    "response_time": "3.05",
    "context": "{\"function_name\": \"next_smallest_palindrome\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 101,
    "solution": "def kth_element(arr, k):\n    # Return the k-th element using 1-based indexing\n    return arr[k - 1]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):\n\n### Test\nassert candidate([12,3,5,7,19], 2) == 3",
    "timestamp": "2025-10-17T18:45:45.115332",
    "response_time": "1.90",
    "context": "{\"function_name\": \"kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 102,
    "solution": "def snake_to_camel(word):\n    # Split the word by underscores\n    parts = word.split('_')\n    # Capitalize the first letter of each part and join them\n    return ''.join(part.capitalize() for part in parts)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):\n\n### Test\nassert candidate('python_program')=='PythonProgram'",
    "timestamp": "2025-10-17T18:45:46.808090",
    "response_time": "1.69",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 103,
    "solution": "def eulerian_num(n, m):\n    if m < 0 or m >= n:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):\n\n### Test\nassert candidate(3, 1) == 4",
    "timestamp": "2025-10-17T18:45:49.051208",
    "response_time": "2.24",
    "context": "{\"function_name\": \"eulerian_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 104,
    "solution": "def sort_sublists(input_list):\n    return [sorted(sublist) for sublist in input_list]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):\n\n### Test\nassert candidate(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[[\"\"\"green\"\"\", \"\"\"orange\"\"\"], [\"\"\"black\"\"\", \"\"\"white\"\"\"], [\"\"\"black\"\"\", \"\"\"orange\"\"\", \"\"\"white\"\"\"]]",
    "timestamp": "2025-10-17T18:45:50.228420",
    "response_time": "1.17",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 105,
    "solution": "def count(lst):\n    return sum(1 for item in lst if item is True)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):\n\n### Test\nassert candidate([True,False,True]) == 2",
    "timestamp": "2025-10-17T18:45:52.250631",
    "response_time": "2.02",
    "context": "{\"function_name\": \"count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 106,
    "solution": "def add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):\n\n### Test\nassert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
    "timestamp": "2025-10-17T18:45:53.187855",
    "response_time": "0.93",
    "context": "{\"function_name\": \"add_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 108,
    "solution": "def merge_sorted_list(num1, num2, num3):\n    # Combine all three lists\n    combined_list = num1 + num2 + num3\n    # Sort the combined list\n    combined_list.sort()\n    return combined_list\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):\n\n### Test\nassert candidate([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
    "timestamp": "2025-10-17T18:45:55.043688",
    "response_time": "1.85",
    "context": "{\"function_name\": \"merge_sorted_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 109,
    "solution": "def odd_Equivalent(s, n):\n    # Function to check if a binary string represents an odd number\n    def is_odd(binary_str):\n        # A binary number is odd if its last digit is '1'\n        return binary_str[-1] == '1'\n    \n    count = 0\n    length = len(s)\n    \n    # Rotate the binary string n times\n    for i in range(n):\n        # Check if the current binary string is odd\n        if is_odd(s):\n            count += 1\n        # Rotate the string by moving the first character to the end\n        s = s[1:] + s[0]\n    \n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):\n\n### Test\nassert candidate(\"011001\",6) == 3",
    "timestamp": "2025-10-17T18:45:58.737399",
    "response_time": "3.69",
    "context": "{\"function_name\": \"odd_Equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 111,
    "solution": "def common_in_nested_lists(nestedlist):\n    if not nestedlist:\n        return []\n    \n    # Start with the set of the first list\n    common_elements = set(nestedlist[0])\n    \n    # Intersect with the sets of the remaining lists\n    for lst in nestedlist[1:]:\n        common_elements &= set(lst)\n    \n    return list(common_elements)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):\n\n### Test\nassert set(candidate([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])",
    "timestamp": "2025-10-17T18:46:03.067366",
    "response_time": "4.33",
    "context": "{\"function_name\": \"common_in_nested_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 113,
    "solution": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):\n\n### Test\nassert candidate(\"python\")==False",
    "timestamp": "2025-10-17T18:46:04.373877",
    "response_time": "1.30",
    "context": "{\"function_name\": \"check_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 115,
    "solution": "def empty_dit(list1):\n    # Check if all dictionaries in the list are empty\n    return all(not d for d in list1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):\n\n### Test\nassert candidate([{},{},{}])==True",
    "timestamp": "2025-10-17T18:46:05.497298",
    "response_time": "1.12",
    "context": "{\"function_name\": \"empty_dit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 116,
    "solution": "def tuple_to_int(nums):\n    # Convert each integer in the tuple to a string, join them, and convert back to an integer\n    return int(''.join(map(str, nums)))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):\n\n### Test\nassert candidate((1,2,3))==123",
    "timestamp": "2025-10-17T18:46:09.373119",
    "response_time": "3.87",
    "context": "{\"function_name\": \"tuple_to_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 117,
    "solution": "def list_to_float(test_list):\n    result = []\n    for sublist in test_list:\n        converted_sublist = []\n        for item in sublist:\n            try:\n                converted_sublist.append(float(item))\n            except ValueError:\n                converted_sublist.append(item)\n        result.append(tuple(converted_sublist))\n    return result\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):\n\n### Test\nassert candidate( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]",
    "timestamp": "2025-10-17T18:46:10.756314",
    "response_time": "1.38",
    "context": "{\"function_name\": \"list_to_float\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 118,
    "solution": "def string_to_list(string):\n    return string.split(\" \")",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):\n\n### Test\nassert candidate(\"python programming\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\"]",
    "timestamp": "2025-10-17T18:46:11.796964",
    "response_time": "1.04",
    "context": "{\"function_name\": \"string_to_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 119,
    "solution": "def search(arr):\n    # Using binary search to find the single element in a sorted array\n    low, high = 0, len(arr) - 1\n    \n    while low < high:\n        mid = low + (high - low) // 2\n        \n        # Ensure mid is even for comparison\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the pair is valid\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    \n    return arr[low]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):\n\n### Test\nassert candidate([1,1,2,2,3]) == 3",
    "timestamp": "2025-10-17T18:46:15.688131",
    "response_time": "3.89",
    "context": "{\"function_name\": \"search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 120,
    "solution": "def max_product_tuple(list1):\n    max_product = float('-inf')  # Initialize with negative infinity\n    for pair in list1:\n        product = abs(pair[0] * pair[1])  # Calculate the absolute product\n        if product > max_product:\n            max_product = product  # Update max_product if a larger one is found\n    return max_product",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):\n\n### Test\nassert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
    "timestamp": "2025-10-17T18:46:18.272723",
    "response_time": "2.58",
    "context": "{\"function_name\": \"max_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 123,
    "solution": "def amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        \"\"\"Helper function to calculate the sum of proper divisors of n.\"\"\"\n        divisors_sum = 1  # 1 is a proper divisor of every number > 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors_sum += i\n                if i != n // i:  # Avoid adding the square root twice for perfect squares\n                    divisors_sum += n // i\n        return divisors_sum\n\n    amicable_sum = 0\n    for a in range(2, limit + 1):\n        b = sum_of_divisors(a)\n        if b != a and b <= limit and sum_of_divisors(b) == a:\n            amicable_sum += a\n\n    return amicable_sum",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):\n\n### Test\nassert candidate(999)==504",
    "timestamp": "2025-10-17T18:46:22.790416",
    "response_time": "4.51",
    "context": "{\"function_name\": \"amicable_numbers_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 124,
    "solution": "import math\n\ndef angle_complex(a, b):\n    # Create the complex number\n    complex_num = complex(a, b)\n    # Calculate and return the angle (phase) of the complex number\n    return math.atan2(complex_num.imag, complex_num.real)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):\n\n### Test\nassert math.isclose(candidate(0,1j), 1.5707963267948966, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:46:24.404259",
    "response_time": "1.61",
    "context": "{\"function_name\": \"angle_complex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 125,
    "solution": "def find_length(string):\n    max_diff = 0\n    current_diff = 0\n\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:  # char == '1'\n            current_diff -= 1\n\n        if current_diff < 0:\n            current_diff = 0\n\n        max_diff = max(max_diff, current_diff)\n\n    return max_diff",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):\n\n### Test\nassert candidate(\"11000010001\") == 6",
    "timestamp": "2025-10-17T18:46:26.876625",
    "response_time": "2.47",
    "context": "{\"function_name\": \"find_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 126,
    "solution": "def sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    common_divisor = gcd(a, b)\n    result = 0\n    for i in range(1, common_divisor + 1):\n        if common_divisor % i == 0:\n            result += i\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):\n\n### Test\nassert candidate(10,15) == 6",
    "timestamp": "2025-10-17T18:46:28.731110",
    "response_time": "1.85",
    "context": "{\"function_name\": \"sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 127,
    "solution": "def multiply_int(x, y):\n    return x * y",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):\n\n### Test\nassert candidate(10,20)==200",
    "timestamp": "2025-10-17T18:46:29.540039",
    "response_time": "0.81",
    "context": "{\"function_name\": \"multiply_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 128,
    "solution": "def long_words(n, str):\n    # Split the string into words\n    words = str.split()\n    # Filter words longer than n characters\n    return [word for word in words if len(word) > n]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):\n\n### Test\nassert candidate(3,\"python is a programming language\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\",\"\"\"language\"\"\"]",
    "timestamp": "2025-10-17T18:46:31.259836",
    "response_time": "1.72",
    "context": "{\"function_name\": \"long_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 129,
    "solution": "def magic_square_test(my_matrix):\n    # Check if the matrix is square\n    n = len(my_matrix)\n    if any(len(row) != n for row in my_matrix):\n        return False\n\n    # Calculate the sum of the first row to use as the magic sum\n    magic_sum = sum(my_matrix[0])\n\n    # Check sums of all rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check sums of all columns\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check sum of the main diagonal\n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check sum of the secondary diagonal\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    # If all checks pass, it is a magic square\n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):\n\n### Test\nassert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
    "timestamp": "2025-10-17T18:46:34.291955",
    "response_time": "3.03",
    "context": "{\"function_name\": \"magic_square_test\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 130,
    "solution": "from collections import Counter\n\ndef max_occurrences(nums):\n    # Count the frequency of each element in the list\n    frequency = Counter(nums)\n    # Find the element with the maximum frequency\n    max_item = max(frequency, key=frequency.get)\n    return max_item",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):\n\n### Test\nassert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2",
    "timestamp": "2025-10-17T18:46:36.200855",
    "response_time": "1.90",
    "context": "{\"function_name\": \"max_occurrences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 131,
    "solution": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str1) - 1\n    \n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n    \n    return ''.join(str_list)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):\n\n### Test\nassert candidate(\"Python\") == \"Python\"",
    "timestamp": "2025-10-17T18:46:38.849001",
    "response_time": "2.65",
    "context": "{\"function_name\": \"reverse_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 132,
    "solution": "def tup_string(tup1):\n    return ''.join(tup1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):\n\n### Test\nassert candidate((\"\"\"e\"\"\", \"\"\"x\"\"\", \"\"\"e\"\"\", \"\"\"r\"\"\", \"\"\"c\"\"\", \"\"\"i\"\"\", \"\"\"s\"\"\", \"\"\"e\"\"\", \"\"\"s\"\"\"))==(\"exercises\")",
    "timestamp": "2025-10-17T18:46:41.287462",
    "response_time": "2.44",
    "context": "{\"function_name\": \"tup_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 133,
    "solution": "def sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):\n\n### Test\nassert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
    "timestamp": "2025-10-17T18:46:42.375388",
    "response_time": "1.08",
    "context": "{\"function_name\": \"sum_negativenum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 135,
    "solution": "def hexagonal_num(n):\n    # The nth hexagonal number is given by the formula: n * (2n - 1)\n    return n * (2 * n - 1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):\n\n### Test\nassert candidate(10) == 190",
    "timestamp": "2025-10-17T18:46:43.865737",
    "response_time": "1.49",
    "context": "{\"function_name\": \"hexagonal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 137,
    "solution": "import math\n\ndef zero_count(nums):\n    if not nums:\n        return 0  # Handle empty list case\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    return zeroes / (zeroes + non_zeroes)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):\n\n### Test\nassert math.isclose(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:46:45.876100",
    "response_time": "2.01",
    "context": "{\"function_name\": \"zero_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 138,
    "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    \n    # Check if all bits in the binary representation of n are unique\n    # This ensures that n can be represented as a sum of distinct powers of 2\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n            if n % 2 == 0:\n                n //= 2\n            else:\n                return False\n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):\n\n### Test\nassert candidate(10) == True",
    "timestamp": "2025-10-17T18:46:48.963094",
    "response_time": "3.08",
    "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 139,
    "solution": "import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):\n\n### Test\nassert math.isclose(candidate(10), 62.830000000000005, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:46:50.601725",
    "response_time": "1.63",
    "context": "{\"function_name\": \"circle_circumference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 140,
    "solution": "def extract_singly(test_list):\n    result_set = set()\n    for sublist in test_list:\n        result_set.update(sublist)\n    return result_set",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):\n\n### Test\nassert set(candidate([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])",
    "timestamp": "2025-10-17T18:46:52.874337",
    "response_time": "2.27",
    "context": "{\"function_name\": \"extract_singly\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 141,
    "solution": "def pancake_sort(nums):\n    def flip(sublist, k):\n        \"\"\"Helper function to reverse the first k elements of the sublist.\"\"\"\n        sublist[:k] = sublist[:k][::-1]\n\n    n = len(nums)\n    for size in range(n, 1, -1):\n        # Find the index of the maximum element in the current unsorted portion\n        max_index = max(range(size), key=lambda i: nums[i])\n        \n        # If the maximum element is not already in its correct position\n        if max_index != size - 1:\n            # Bring the maximum element to the front if it's not already there\n            if max_index != 0:\n                flip(nums, max_index + 1)\n            # Move the maximum element to its correct position\n            flip(nums, size)\n    \n    return nums",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):\n\n### Test\nassert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
    "timestamp": "2025-10-17T18:46:59.161786",
    "response_time": "6.28",
    "context": "{\"function_name\": \"pancake_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 142,
    "solution": "def count_samepair(list1, list2, list3):\n    # Initialize a counter for identical items in the same position\n    count = 0\n    \n    # Iterate through the lists using their indices\n    for i in range(min(len(list1), len(list2), len(list3))):\n        # Check if the items at the same position in all three lists are identical\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):\n\n### Test\nassert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
    "timestamp": "2025-10-17T18:47:02.166619",
    "response_time": "3.00",
    "context": "{\"function_name\": \"count_samepair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 143,
    "solution": "def find_lists(Input):\n    # Count the number of elements in the tuple that are of type list\n    return sum(1 for item in Input if isinstance(item, list))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):\n\n### Test\nassert candidate(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
    "timestamp": "2025-10-17T18:47:04.939991",
    "response_time": "2.77",
    "context": "{\"function_name\": \"find_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 145,
    "solution": "def max_Abs_Diff(arr):\n    if not arr or len(arr) < 2:\n        return 0  # If the array is empty or has less than 2 elements, return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val - min_val",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):\n\n### Test\nassert candidate((2,1,5,3)) == 4",
    "timestamp": "2025-10-17T18:47:07.986434",
    "response_time": "3.04",
    "context": "{\"function_name\": \"max_Abs_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 160,
    "solution": "def find_solution(a, b, n):\n    # Iterate over possible values of x\n    for x in range(n // a + 1):\n        # Calculate the remaining value after subtracting ax from n\n        remainder = n - a * x\n        # Check if the remainder is divisible by b\n        if remainder % b == 0:\n            # Calculate y\n            y = remainder // b\n            return (x, y)\n    # If no solution is found, return None\n    return None",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):\n\n### Test\nassert candidate(2, 3, 7) == (2, 1)",
    "timestamp": "2025-10-17T18:47:10.606486",
    "response_time": "2.61",
    "context": "{\"function_name\": \"find_solution\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 161,
    "solution": "def remove_elements(list1, list2):\n    return [item for item in list1 if item not in list2]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]",
    "timestamp": "2025-10-17T18:47:11.629212",
    "response_time": "1.02",
    "context": "{\"function_name\": \"remove_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 162,
    "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += (n - 2 * i)\n    return total",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):\n\n### Test\nassert candidate(6) == 12",
    "timestamp": "2025-10-17T18:47:13.479653",
    "response_time": "1.85",
    "context": "{\"function_name\": \"sum_series\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 163,
    "solution": "import math\n\ndef area_polygon(s, l):\n    # Formula for the area of a regular polygon:\n    # (s * l^2) / (4 * tan(pi / s))\n    return (s * l**2) / (4 * math.tan(math.pi / s))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):\n\n### Test\nassert math.isclose(candidate(4, 20), 400., rel_tol=0.001)",
    "timestamp": "2025-10-17T18:47:15.815420",
    "response_time": "2.33",
    "context": "{\"function_name\": \"area_polygon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 164,
    "solution": "def are_equivalent(n):\n    def sum_of_divisors(num):\n        divisors_sum = 0\n        for i in range(1, num // 2 + 1):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum + num  # Include the number itself as a divisor\n\n    return sum_of_divisors\n\ndef candidate(a, b):\n    sum_divisors = div_sum(0)  # Get the sum_of_divisors function\n    return sum_divisors(a) == sum_divisors(b)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):\n\n### Test\nassert candidate(36, 57) == False",
    "timestamp": "2025-10-17T18:47:21.012381",
    "response_time": "5.19",
    "context": "{\"function_name\": \"are_equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 165,
    "solution": "def count_char_position(str1):\n    count = 0\n    for i, char in enumerate(str1.lower()):\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):\n\n### Test\nassert candidate(\"xbcefg\") == 2",
    "timestamp": "2025-10-17T18:47:23.100764",
    "response_time": "2.08",
    "context": "{\"function_name\": \"count_char_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 166,
    "solution": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):\n\n### Test\nassert candidate([5, 4, 7, 2, 1]) == 4",
    "timestamp": "2025-10-17T18:47:24.402111",
    "response_time": "1.30",
    "context": "{\"function_name\": \"find_even_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 167,
    "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):\n\n### Test\nassert candidate(0) == 1",
    "timestamp": "2025-10-17T18:47:25.612998",
    "response_time": "1.21",
    "context": "{\"function_name\": \"next_power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 168,
    "solution": "def frequency(a, x):\n    return a.count(x)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):\n\n### Test\nassert candidate([1,2,3], 4) == 0",
    "timestamp": "2025-10-17T18:52:44.461075",
    "response_time": "318.84",
    "context": "{\"function_name\": \"frequency\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 170,
    "solution": "def sum_range_list(list1, m, n):\n    # Ensure m and n are within the bounds of the list\n    if m < 0 or n >= len(list1) or m > n:\n        return 0  # Return 0 for invalid range\n    \n    # Calculate the sum of the sublist from index m to n (inclusive)\n    return sum(list1[m:n+1])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):\n\n### Test\nassert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29",
    "timestamp": "2025-10-17T18:52:47.118576",
    "response_time": "2.65",
    "context": "{\"function_name\": \"sum_range_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 171,
    "solution": "def perimeter_pentagon(a):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its side.\n\n    :param a: Length of one side of the pentagon\n    :return: Perimeter of the pentagon\n    \"\"\"\n    return 5 * a",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):\n\n### Test\nassert candidate(5) == 25",
    "timestamp": "2025-10-17T18:52:50.853663",
    "response_time": "3.73",
    "context": "{\"function_name\": \"perimeter_pentagon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 172,
    "solution": "def count_occurance(s):\n    return s.count('std')",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):\n\n### Test\nassert candidate(\"letstdlenstdporstd\") == 3\nassert candidate(\"truststdsolensporsd\") == 1",
    "timestamp": "2025-10-17T18:52:52.098253",
    "response_time": "1.24",
    "context": "{\"function_name\": \"count_occurance\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 222,
    "solution": "def check_type(test_tuple):\n    # Get the type of the first element\n    first_type = type(test_tuple[0])\n    # Check if all elements have the same type as the first element\n    return all(type(element) == first_type for element in test_tuple)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):\n\n### Test\nassert candidate((5, 6, 7, 3, 5, 6) ) == True",
    "timestamp": "2025-10-17T18:52:55.056707",
    "response_time": "2.95",
    "context": "{\"function_name\": \"check_type\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 223,
    "solution": "from bisect import bisect_left, bisect_right\n\ndef binary_search(arr, n, x):\n    # Find the first occurrence of x\n    left_index = bisect_left(arr, x)\n    # Find the last occurrence of x\n    right_index = bisect_right(arr, x)\n    \n    # Calculate the count of x in the array\n    count = right_index - left_index\n    \n    # Check if x is the majority element\n    return count > n // 2\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):\n\n### Test\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
    "timestamp": "2025-10-17T18:52:58.601879",
    "response_time": "3.54",
    "context": "{\"function_name\": \"binary_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 224,
    "solution": "def count_Set_Bits(n):\n    return bin(n).count('1')",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):\n\n### Test\nassert candidate(2) == 1",
    "timestamp": "2025-10-17T18:53:00.261097",
    "response_time": "1.66",
    "context": "{\"function_name\": \"count_Set_Bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 226,
    "solution": "def odd_values_string(str):\n    # Return a new string with characters at even indices (0-based index)\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to remove the characters which have odd index values of a given string.\n\n### Signature\ndef odd_values_string(str):\n\n### Test\nassert candidate('abcdef') == 'ace'\nassert candidate('python') == 'pto'",
    "timestamp": "2025-10-17T18:53:01.942190",
    "response_time": "1.68",
    "context": "{\"function_name\": \"odd_values_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 227,
    "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find minimum of three numbers.\n\n### Signature\ndef min_of_three(a,b,c):\n\n### Test\nassert candidate(10,20,0)==0",
    "timestamp": "2025-10-17T18:53:04.018579",
    "response_time": "2.07",
    "context": "{\"function_name\": \"min_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 228,
    "solution": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a mask with bits set in the range [l, r]\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    # Check if all bits in the range are unset\n    return (n & mask) == 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether all the bits are unset in the given range or not.\n\n### Signature\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n\n### Test\nassert candidate(4,1,2) == True",
    "timestamp": "2025-10-17T18:53:07.769746",
    "response_time": "3.75",
    "context": "{\"function_name\": \"all_Bits_Set_In_The_Given_Range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 229,
    "solution": "def re_arrange_array(arr, n):\n    # Separate the first n elements into negatives and non-negatives\n    negatives = [x for x in arr[:n] if x < 0]\n    non_negatives = [x for x in arr[:n] if x >= 0]\n    \n    # Combine negatives and non-negatives while preserving the rest of the array\n    return negatives + non_negatives + arr[n:]\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n### Signature\ndef re_arrange_array(arr, n):\n\n### Test\nassert candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
    "timestamp": "2025-10-17T18:53:11.335744",
    "response_time": "3.56",
    "context": "{\"function_name\": \"re_arrange_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 230,
    "solution": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n### Signature\ndef replace_blank(str1,char):\n\n### Test\nassert candidate(\"hello people\",\"\"\"@\"\"\")==(\"hello@people\")",
    "timestamp": "2025-10-17T18:53:12.773420",
    "response_time": "1.43",
    "context": "{\"function_name\": \"replace_blank\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 232,
    "solution": "def larg_nnum(list1, n):\n    # Sort the list in descending order and return the first n elements\n    return sorted(list1, reverse=True)[:n]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n### Signature\ndef larg_nnum(list1,n):\n\n### Test\nassert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])",
    "timestamp": "2025-10-17T18:53:14.228800",
    "response_time": "1.45",
    "context": "{\"function_name\": \"larg_nnum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 233,
    "solution": "import math\n\ndef lateralsuface_cylinder(r, h):\n    # Lateral surface area of a cylinder = 2 * \u03c0 * r * h\n    return 2 * math.pi * r * h",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cylinder.\n\n### Signature\ndef lateralsuface_cylinder(r,h):\n\n### Test\nassert math.isclose(candidate(10,5), 314.15000000000003, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:53:16.439572",
    "response_time": "2.21",
    "context": "{\"function_name\": \"lateralsuface_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 234,
    "solution": "def volume_cube(l):\n    return l ** 3",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the volume of a cube given its side length.\n\n### Signature\ndef volume_cube(l):\n\n### Test\nassert candidate(3)==27",
    "timestamp": "2025-10-17T18:53:17.358610",
    "response_time": "0.91",
    "context": "{\"function_name\": \"volume_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 235,
    "solution": "def even_bit_set_number(n):\n    # Initialize a mask with all even bits set\n    mask = 0\n    bit_position = 0\n    \n    # Create a mask with all even bits set\n    while bit_position < n.bit_length() or bit_position < 32:  # Assuming 32-bit numbers\n        if bit_position % 2 == 0:  # Check if the bit position is even\n            mask |= (1 << bit_position)\n        bit_position += 1\n    \n    # Set all even bits of n using the mask\n    return n | mask",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to set all even bits of a given number.\n\n### Signature\ndef even_bit_set_number(n):\n\n### Test\nassert candidate(10) == 10",
    "timestamp": "2025-10-17T18:53:20.522929",
    "response_time": "3.16",
    "context": "{\"function_name\": \"even_bit_set_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 237,
    "solution": "from collections import Counter\n\ndef check_occurences(test_list):\n    # Normalize tuples to ensure (a, b) and (b, a) are treated the same\n    normalized_list = [tuple(sorted(t)) for t in test_list]\n    # Count occurrences of each tuple\n    return dict(Counter(normalized_list))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n### Signature\ndef check_occurences(test_list):\n\n### Test\nassert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
    "timestamp": "2025-10-17T18:53:22.882653",
    "response_time": "2.36",
    "context": "{\"function_name\": \"check_occurences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 238,
    "solution": "def number_of_substrings(str):\n    # The number of non-empty substrings of a string of length n is given by n * (n + 1) / 2\n    n = len(str)\n    return n * (n + 1) // 2",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of non-empty substrings of a given string.\n\n### Signature\ndef number_of_substrings(str):\n\n### Test\nassert candidate(\"abc\") == 6",
    "timestamp": "2025-10-17T18:53:24.356254",
    "response_time": "1.47",
    "context": "{\"function_name\": \"number_of_substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 239,
    "solution": "def get_total_number_of_sequences(m, n):\n    def count_sequences(current, remaining_length):\n        if remaining_length == 0:\n            return 1\n        total = 0\n        for next_value in range(current * 2, m + 1):\n            total += count_sequences(next_value, remaining_length - 1)\n        return total\n\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, n - 1)\n    \n    return total_sequences",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n### Signature\ndef get_total_number_of_sequences(m,n):\n\n### Test\nassert candidate(10, 4) == 4",
    "timestamp": "2025-10-17T18:53:26.422536",
    "response_time": "2.06",
    "context": "{\"function_name\": \"get_total_number_of_sequences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 240,
    "solution": "def replace_list(list1, list2):\n    # Replace the last element of list1 with the elements of list2\n    return list1[:-1] + list2",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\n### Signature\ndef replace_list(list1,list2):\n\n### Test\nassert candidate([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
    "timestamp": "2025-10-17T18:53:28.295513",
    "response_time": "1.87",
    "context": "{\"function_name\": \"replace_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 242,
    "solution": "def count_charac(str1):\n    return len(str1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the total number of characters in a string.\n\n### Signature\ndef count_charac(str1):\n\n### Test\nassert candidate(\"python programming\")==18",
    "timestamp": "2025-10-17T18:53:30.199540",
    "response_time": "1.90",
    "context": "{\"function_name\": \"count_charac\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 244,
    "solution": "import math\n\ndef next_Perfect_Square(N):\n    # Find the square root of the given number\n    root = math.sqrt(N)\n    # Find the next integer greater than the square root\n    next_root = math.ceil(root)\n    # Return the square of the next integer\n    return next_root ** 2",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the next perfect square greater than a given number.\n\n### Signature\ndef next_Perfect_Square(N):\n\n### Test\nassert candidate(35) == 36",
    "timestamp": "2025-10-17T18:53:32.470117",
    "response_time": "2.27",
    "context": "{\"function_name\": \"next_Perfect_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 245,
    "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    # Initialize increasing and decreasing sum arrays\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Fill the increasing sum array\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Fill the decreasing sum array\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[j] < arr[i] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_bitonic_sum",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\n### Signature\ndef max_sum(arr):\n\n### Test\nassert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194",
    "timestamp": "2025-10-17T18:53:35.846989",
    "response_time": "3.37",
    "context": "{\"function_name\": \"max_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 246,
    "solution": "import math\n\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number\")\n    \n    # Initial guess\n    guess = number / 2.0\n    tolerance = 1e-10  # Precision tolerance\n    \n    while True:\n        # Compute a better guess\n        better_guess = (guess + number / guess) / 2.0\n        \n        # Check if the improvement is within the tolerance\n        if abs(better_guess - guess) < tolerance:\n            return better_guess\n        \n        # Update the guess\n        guess = better_guess",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function for computing square roots using the babylonian method.\n\n### Signature\ndef babylonian_squareroot(number):\n\n### Test\nassert math.isclose(candidate(10), 3.162277660168379, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:53:39.105814",
    "response_time": "3.25",
    "context": "{\"function_name\": \"babylonian_squareroot\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 247,
    "solution": "def lps(str):\n    n = len(str)\n    # Create a 2D array to store the length of palindromic subsequences\n    dp = [[0] * n for _ in range(n)]\n\n    # Strings of length 1 are palindromes of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Build the table. The bottom-up approach is used here.\n    for cl in range(2, n + 1):  # cl is the length of the substring\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    # The length of the longest palindromic subsequence is in dp[0][n-1]\n    return dp[0][n - 1]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n\n### Signature\ndef lps(str):\n\n### Test\nassert candidate(\"TENS FOR TENS\") == 5",
    "timestamp": "2025-10-17T18:53:43.113168",
    "response_time": "4.00",
    "context": "{\"function_name\": \"lps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 248,
    "solution": "def harmonic_sum(n):\n    if n <= 1:\n        return 0\n    return sum(1 / i for i in range(1, n))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in an integer n and calculates the harmonic sum of n-1.\n\n### Signature\ndef harmonic_sum(n):\n\n### Test\nassert math.isclose(candidate(7), 2.5928571428571425, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:53:45.119864",
    "response_time": "2.00",
    "context": "{\"function_name\": \"harmonic_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 249,
    "solution": "def intersection_array(array_nums1, array_nums2):\n    # Use set intersection to find common elements\n    return list(set(array_nums1) & set(array_nums2))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the intersection of two arrays.\n\n### Signature\ndef intersection_array(array_nums1,array_nums2):\n\n### Test\nassert candidate([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
    "timestamp": "2025-10-17T18:53:48.709796",
    "response_time": "3.59",
    "context": "{\"function_name\": \"intersection_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 250,
    "solution": "def count_X(tup, x):\n    return tup.count(x)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\n### Signature\ndef count_X(tup, x):\n\n### Test\nassert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
    "timestamp": "2025-10-17T18:53:49.722929",
    "response_time": "1.01",
    "context": "{\"function_name\": \"count_X\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 251,
    "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\n### Signature\ndef insert_element(list,element):\n\n### Test\nassert candidate(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']",
    "timestamp": "2025-10-17T18:53:52.881572",
    "response_time": "3.15",
    "context": "{\"function_name\": \"insert_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 252,
    "solution": "import cmath\n\ndef convert(numbers):\n    return cmath.polar(numbers)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to convert complex numbers to polar coordinates.\n\n### Signature\ndef convert(numbers):\n\n### Test\nassert candidate(1) == (1.0, 0.0)",
    "timestamp": "2025-10-17T18:53:55.194049",
    "response_time": "2.31",
    "context": "{\"function_name\": \"convert\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 253,
    "solution": "def count_integer(list1):\n    return sum(1 for item in list1 if isinstance(item, int))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that returns the number of integer elements in a given list.\n\n### Signature\ndef count_integer(list1):\n\n### Test\nassert candidate([1,2,'abc',1.2]) == 2",
    "timestamp": "2025-10-17T18:53:56.795367",
    "response_time": "1.60",
    "context": "{\"function_name\": \"count_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 255,
    "solution": "from itertools import product\n\ndef combinations_colors(l, n):\n    return list(product(l, repeat=n))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\n### Signature\ndef combinations_colors(l, n):\n\n### Test\nassert candidate( [\"Red\",\"Green\",\"Blue\"],1)==[(\"\"\"Red\"\"\",), (\"\"\"Green\"\"\",), (\"\"\"Blue\"\"\",)]",
    "timestamp": "2025-10-17T18:53:57.825763",
    "response_time": "1.03",
    "context": "{\"function_name\": \"combinations_colors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 256,
    "solution": "import math\n\ndef count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    primes = [True] * n\n    primes[0] = primes[1] = False  # 0 and 1 are not prime numbers\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    \n    return sum(primes)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n### Signature\ndef count_Primes_nums(n):\n\n### Test\nassert candidate(5) == 2",
    "timestamp": "2025-10-17T18:54:02.466387",
    "response_time": "4.64",
    "context": "{\"function_name\": \"count_Primes_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 257,
    "solution": "def swap_numbers(a, b):\n    return (b, a)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\n### Signature\ndef swap_numbers(a,b):\n\n### Test\nassert candidate(10,20)==(20,10)",
    "timestamp": "2025-10-17T18:54:04.307777",
    "response_time": "1.84",
    "context": "{\"function_name\": \"swap_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 259,
    "solution": "def maximize_elements(test_tup1, test_tup2):\n    # Use zip to iterate over both tuples simultaneously\n    # For each pair of tuples, take the maximum of corresponding elements\n    return tuple((max(a[0], b[0]), max(a[1], b[1])) for a, b in zip(test_tup1, test_tup2))\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to maximize the given two tuples.\n\n### Signature\ndef maximize_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
    "timestamp": "2025-10-17T18:54:07.258170",
    "response_time": "2.95",
    "context": "{\"function_name\": \"maximize_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 260,
    "solution": "def newman_prime(n):\n    # List to store the Newman\u2013Shanks\u2013Williams prime numbers\n    nsws_primes = []\n    \n    # Function to calculate the nth NSW number\n    def nsw_number(k):\n        if k == 0 or k == 1:\n            return 1\n        return 2 * nsw_number(k - 1) + nsw_number(k - 2)\n    \n    # Generate NSW numbers and check for primality\n    k = 0\n    while len(nsws_primes) < n:\n        nsw = nsw_number(k)\n        if is_prime(nsw):\n            nsws_primes.append(nsw)\n        k += 1\n    \n    return nsws_primes[-1]\n\n# Helper function to check if a number is prime\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n### Signature\ndef newman_prime(n):\n\n### Test\nassert candidate(3) == 7",
    "timestamp": "2025-10-17T18:54:12.909148",
    "response_time": "5.65",
    "context": "{\"function_name\": \"newman_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 261,
    "solution": "def division_elements(test_tup1, test_tup2):\n    return tuple(a // b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n### Signature\ndef division_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
    "timestamp": "2025-10-17T18:54:14.291512",
    "response_time": "1.38",
    "context": "{\"function_name\": \"division_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 262,
    "solution": "def split_two_parts(list1, L):\n    # Split the list into two parts\n    return (list1[:L], list1[L:])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\n### Signature\ndef split_two_parts(list1, L):\n\n### Test\nassert candidate([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
    "timestamp": "2025-10-17T18:54:15.632743",
    "response_time": "1.34",
    "context": "{\"function_name\": \"split_two_parts\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 264,
    "solution": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n    The first two human years count as 10.5 dog years each.\n    Each additional human year counts as 4 dog years.\n    \"\"\"\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate a dog's age in dog's years.\n\n### Signature\ndef dog_age(h_age):\n\n### Test\nassert candidate(12)==61",
    "timestamp": "2025-10-17T18:54:19.138105",
    "response_time": "3.50",
    "context": "{\"function_name\": \"dog_age\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 265,
    "solution": "def list_split(S, step):\n    # Create a list of lists for each group based on the step\n    result = [[] for _ in range(step)]\n    \n    # Distribute elements into the respective sublists\n    for i, element in enumerate(S):\n        result[i % step].append(element)\n    \n    return result\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\n### Signature\ndef list_split(S, step):\n\n### Test\nassert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]",
    "timestamp": "2025-10-17T18:54:22.516339",
    "response_time": "3.37",
    "context": "{\"function_name\": \"list_split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 266,
    "solution": "def lateralsurface_cube(l):\n    # Lateral surface area of a cube is 4 times the area of one side\n    return 4 * (l ** 2)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cube given its side length.\n\n### Signature\ndef lateralsurface_cube(l):\n\n### Test\nassert candidate(5)==100",
    "timestamp": "2025-10-17T18:54:23.920871",
    "response_time": "1.40",
    "context": "{\"function_name\": \"lateralsurface_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 267,
    "solution": "def square_Sum(n):\n    # Initialize the sum\n    sum_of_squares = 0\n    \n    # Loop through the first n odd numbers\n    for i in range(n):\n        odd_number = 2 * i + 1\n        sum_of_squares += odd_number ** 2\n    \n    return sum_of_squares",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n### Signature\ndef square_Sum(n):\n\n### Test\nassert candidate(2) == 10",
    "timestamp": "2025-10-17T18:54:25.897339",
    "response_time": "1.97",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 268,
    "solution": "def find_star_num(n):\n    # The formula for the nth star number is: 6n(n-1) + 1\n    return 6 * n * (n - 1) + 1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the n'th star number.\n\n### Signature\ndef find_star_num(n):\n\n### Test\nassert candidate(3) == 37",
    "timestamp": "2025-10-17T18:54:27.429409",
    "response_time": "1.53",
    "context": "{\"function_name\": \"find_star_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 269,
    "solution": "def ascii_value(k):\n    return ord(k)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the ascii value of a character.\n\n### Signature\ndef ascii_value(k):\n\n### Test\nassert candidate('A')==65",
    "timestamp": "2025-10-17T18:54:28.285879",
    "response_time": "0.85",
    "context": "{\"function_name\": \"ascii_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 270,
    "solution": "def sum_even_and_even_index(arr):\n    # Initialize sum\n    total = 0\n    \n    # Iterate through the list with index\n    for i in range(len(arr)):\n        # Check if the index is even and the value at that index is even\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    \n    return total",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of even numbers at even positions of a list.\n\n### Signature\ndef sum_even_and_even_index(arr):\n\n### Test\nassert candidate([5, 6, 12, 1, 18, 8]) == 30",
    "timestamp": "2025-10-17T18:54:30.502699",
    "response_time": "2.21",
    "context": "{\"function_name\": \"sum_even_and_even_index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 271,
    "solution": "def even_Power_Sum(n):\n    # Initialize the sum\n    total_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i  # Calculate the ith even number\n        total_sum += even_number ** 5  # Add its fifth power to the sum\n    \n    return total_sum",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n### Signature\ndef even_Power_Sum(n):\n\n### Test\nassert candidate(2) == 1056",
    "timestamp": "2025-10-17T18:54:34.094818",
    "response_time": "3.59",
    "context": "{\"function_name\": \"even_Power_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 272,
    "solution": "def rear_extract(test_list):\n    return [tup[-1] for tup in test_list]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n### Signature\ndef rear_extract(test_list):\n\n### Test\nassert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
    "timestamp": "2025-10-17T18:54:35.967099",
    "response_time": "1.87",
    "context": "{\"function_name\": \"rear_extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 273,
    "solution": "def substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n### Signature\ndef substract_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
    "timestamp": "2025-10-17T18:54:37.808736",
    "response_time": "1.84",
    "context": "{\"function_name\": \"substract_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 274,
    "solution": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    return sum(comb(n, k) for k in range(0, n + 1, 2))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n### Signature\ndef even_binomial_Coeff_Sum( n):\n\n### Test\nassert candidate(4) == 8",
    "timestamp": "2025-10-17T18:54:39.307384",
    "response_time": "1.49",
    "context": "{\"function_name\": \"even_binomial_Coeff_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 276,
    "solution": "import math\n\ndef volume_cylinder(r, h):\n    return math.pi * r**2 * h",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n\n### Signature\ndef volume_cylinder(r,h):\n\n### Test\nassert math.isclose(candidate(10,5), 1570.7500000000002, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:54:40.939661",
    "response_time": "1.63",
    "context": "{\"function_name\": \"volume_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 277,
    "solution": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n### Signature\ndef dict_filter(dict,n):\n\n### Test\nassert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
    "timestamp": "2025-10-17T18:54:42.029607",
    "response_time": "1.08",
    "context": "{\"function_name\": \"dict_filter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 278,
    "solution": "def count_first_elements(test_tup):\n    # Iterate through the tuple and find the index of the first tuple element\n    for i, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            return i\n    # If no tuple is found, return 0\n    return 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n\n### Signature\ndef count_first_elements(test_tup):\n\n### Test\nassert candidate((1, 5, 7, (4, 6), 10) ) == 3",
    "timestamp": "2025-10-17T18:54:43.586608",
    "response_time": "1.55",
    "context": "{\"function_name\": \"count_first_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 279,
    "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n    \"\"\"\n    return n * (4 * n - 3)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth decagonal number.\n\n### Signature\ndef is_num_decagonal(n):\n\n### Test\nassert candidate(3) == 27",
    "timestamp": "2025-10-17T18:54:45.500881",
    "response_time": "1.91",
    "context": "{\"function_name\": \"is_num_decagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 280,
    "solution": "def sequential_search(dlist, item):\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n### Signature\ndef sequential_search(dlist, item):\n\n### Test\nassert candidate([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
    "timestamp": "2025-10-17T18:54:46.684205",
    "response_time": "1.18",
    "context": "{\"function_name\": \"sequential_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 281,
    "solution": "def all_unique(test_list):\n    return len(test_list) == len(set(test_list))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check if the elements of a given list are unique or not.\n\n### Signature\ndef all_unique(test_list):\n\n### Test\nassert candidate([1,2,3]) == True",
    "timestamp": "2025-10-17T18:54:48.216160",
    "response_time": "1.53",
    "context": "{\"function_name\": \"all_unique\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 282,
    "solution": "def sub_list(nums1, nums2):\n    return [a - b for a, b in zip(nums1, nums2)]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to subtract two lists element-wise.\n\n### Signature\ndef sub_list(nums1,nums2):\n\n### Test\nassert candidate([1, 2, 3],[4,5,6])==[-3,-3,-3]",
    "timestamp": "2025-10-17T18:54:49.616945",
    "response_time": "1.40",
    "context": "{\"function_name\": \"sub_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 283,
    "solution": "def validate(n):\n    # Convert the number to a string to iterate over its digits\n    str_n = str(n)\n    \n    # Create a dictionary to count the frequency of each digit\n    digit_count = {}\n    for digit in str_n:\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    \n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n### Signature\ndef validate(n):\n\n### Test\nassert candidate(1234) == True",
    "timestamp": "2025-10-17T18:54:52.754496",
    "response_time": "3.13",
    "context": "{\"function_name\": \"validate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 284,
    "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\n### Signature\ndef check_element(list,element):\n\n### Test\nassert candidate([\"green\", \"orange\", \"black\", \"white\"],\"\"\"blue\"\"\")==False",
    "timestamp": "2025-10-17T18:54:54.766321",
    "response_time": "2.01",
    "context": "{\"function_name\": \"check_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 285,
    "solution": "import re\n\ndef text_match_two_three(text):\n    # Use regex to check for 'a' followed by two or three 'b' characters\n    pattern = r'a(bb|bbb)'\n    return bool(re.search(pattern, text))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n### Signature\ndef text_match_two_three(text):\n\n### Test\nassert candidate(\"ac\")==(False)",
    "timestamp": "2025-10-17T18:54:56.876803",
    "response_time": "2.11",
    "context": "{\"function_name\": \"text_match_two_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 286,
    "solution": "def max_sub_array_sum_repeated(a, n, k):\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    # Calculate the sum of the array\n    array_sum = sum(a)\n\n    # If k == 1, we just need to find the max subarray sum in the single array\n    if k == 1:\n        return kadane(a)\n\n    # Find the max subarray sum for two concatenated arrays\n    max_prefix_suffix_sum = kadane(a * 2)\n\n    # If the total sum of the array is positive, we can add (k-2) * array_sum\n    if array_sum > 0:\n        return max_prefix_suffix_sum + (k - 2) * array_sum\n    else:\n        return max_prefix_suffix_sum",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n### Signature\ndef max_sub_array_sum_repeated(a, n, k):\n\n### Test\nassert candidate([10, 20, -30, -1], 4, 3) == 30",
    "timestamp": "2025-10-17T18:55:03.679519",
    "response_time": "6.80",
    "context": "{\"function_name\": \"max_sub_array_sum_repeated\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 287,
    "solution": "def square_Sum(n):\n    # Calculate the sum of squares of the first n even natural numbers\n    return sum((2 * i) ** 2 for i in range(1, n + 1))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n### Signature\ndef square_Sum(n):\n\n### Test\nassert candidate(2) == 20",
    "timestamp": "2025-10-17T18:55:05.459664",
    "response_time": "1.78",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 290,
    "solution": "def max_length(list1):\n    # Find the maximum length of the lists in list1\n    max_len = max(len(sublist) for sublist in list1)\n    # Find the first list with the maximum length\n    max_list = next(sublist for sublist in list1 if len(sublist) == max_len)\n    return max_len, max_list",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the list of maximum length in a list of lists.\n\n### Signature\ndef max_length(list1):\n\n### Test\nassert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
    "timestamp": "2025-10-17T18:55:09.377162",
    "response_time": "3.91",
    "context": "{\"function_name\": \"max_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 291,
    "solution": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n\n    # Initialize variables for the first two posts\n    same = k  # Ways to paint the first two posts with the same color\n    diff = k * (k - 1)  # Ways to paint the first two posts with different colors\n    total = same + diff  # Total ways to paint the first two posts\n\n    # Iterate for the rest of the posts\n    for i in range(3, n + 1):\n        same = diff  # If the current post has the same color as the previous one\n        diff = total * (k - 1)  # If the current post has a different color\n        total = same + diff  # Update the total ways\n\n    return total",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n### Signature\ndef count_no_of_ways(n, k):\n\n### Test\nassert candidate(2, 4) == 16",
    "timestamp": "2025-10-17T18:55:14.342317",
    "response_time": "4.96",
    "context": "{\"function_name\": \"count_no_of_ways\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 292,
    "solution": "def find(n, m):\n    return n // m",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n### Signature\ndef find(n,m):\n\n### Test\nassert candidate(10,3) == 3",
    "timestamp": "2025-10-17T18:55:16.277948",
    "response_time": "1.93",
    "context": "{\"function_name\": \"find\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 293,
    "solution": "import math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w**2 + h**2)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the third side of a right angled triangle.\n\n### Signature\ndef otherside_rightangle(w,h):\n\n### Test\nassert candidate(7,8)==10.63014581273465",
    "timestamp": "2025-10-17T18:55:17.295870",
    "response_time": "1.01",
    "context": "{\"function_name\": \"otherside_rightangle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 294,
    "solution": "def max_val(listval):\n    # Filter out only numeric values from the list\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    # Return the maximum value among the numeric values\n    return max(numeric_values) if numeric_values else None",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum value in a given heterogeneous list.\n\n### Signature\ndef max_val(listval):\n\n### Test\nassert candidate(['Python', 3, 2, 4, 5, 'version'])==5",
    "timestamp": "2025-10-17T18:55:19.564498",
    "response_time": "2.26",
    "context": "{\"function_name\": \"max_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 295,
    "solution": "def sum_div(number):\n    # Initialize sum of divisors\n    total = 0\n    # Loop through all numbers from 1 to number-1\n    for i in range(1, number):\n        # Check if i is a divisor of number\n        if number % i == 0:\n            total += i\n    return total",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to return the sum of all divisors of a number.\n\n### Signature\ndef sum_div(number):\n\n### Test\nassert candidate(8)==7",
    "timestamp": "2025-10-17T18:55:22.608017",
    "response_time": "3.04",
    "context": "{\"function_name\": \"sum_div\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 296,
    "solution": "def get_Inv_Count(arr):\n    def merge_and_count(arr, temp_arr, left, right):\n        if left >= right:\n            return 0\n        \n        mid = (left + right) // 2\n        \n        inv_count = merge_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge(arr, temp_arr, left, mid, right)\n        \n        return inv_count\n    \n    def merge(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        \n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += (mid - i + 1)\n                j += 1\n            k += 1\n        \n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        \n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        \n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        \n        return inv_count\n    \n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_and_count(arr, temp_arr, 0, n - 1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count inversions in an array.\n\n### Signature\ndef get_Inv_Count(arr):\n\n### Test\nassert candidate([1,20,6,4,5]) == 5",
    "timestamp": "2025-10-17T18:55:27.691036",
    "response_time": "5.08",
    "context": "{\"function_name\": \"get_Inv_Count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 297,
    "solution": "def flatten_list(list1):\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to flatten a given nested list structure.\n\n### Signature\ndef flatten_list(list1):\n\n### Test\nassert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
    "timestamp": "2025-10-17T18:55:29.474236",
    "response_time": "1.78",
    "context": "{\"function_name\": \"flatten_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 299,
    "solution": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # Dictionary to store the aggregate scores\n    aggregate_scores = defaultdict(int)\n    \n    # Sum up the scores for each name\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    \n    # Find the name with the maximum aggregate score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\n### Signature\ndef max_aggregate(stdata):\n\n### Test\nassert candidate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
    "timestamp": "2025-10-17T18:55:32.538470",
    "response_time": "3.06",
    "context": "{\"function_name\": \"max_aggregate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 300,
    "solution": "from math import comb\n\ndef count_binary_seq(n):\n    # The problem is equivalent to finding the number of ways to split 2n bits\n    # such that the sum of the first n bits equals the sum of the last n bits.\n    # This is achieved by summing over all possible sums (k) from 0 to n,\n    # and calculating the product of combinations for the first and last n bits.\n    \n    total_count = 0\n    for k in range(n + 1):\n        total_count += comb(n, k) ** 2\n    return total_count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n### Signature\ndef count_binary_seq(n):\n\n### Test\nassert math.isclose(candidate(1), 2.0, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:55:36.106866",
    "response_time": "3.56",
    "context": "{\"function_name\": \"count_binary_seq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 301,
    "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max(dict_depth(value) for value in d.values() if isinstance(value, dict))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the depth of a dictionary.\n\n### Signature\ndef dict_depth(d):\n\n### Test\nassert candidate({'a':1, 'b': {'c': {'d': {}}}})==4",
    "timestamp": "2025-10-17T18:55:38.369118",
    "response_time": "2.26",
    "context": "{\"function_name\": \"dict_depth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 304,
    "solution": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    \n    # Perform the rotations\n    for _ in range(rotations):\n        for r in ranges:\n            start, end = r\n            # Rotate the subarray from start to end\n            temp = arr[start:end+1]\n            arr[start:end+1] = [temp[-1]] + temp[:-1]\n    \n    # Return the element at the given index\n    return arr[index]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find element at a given index after number of rotations.\n\n### Signature\ndef find_Element(arr,ranges,rotations,index) :\n\n### Test\nassert candidate([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
    "timestamp": "2025-10-17T18:55:40.601473",
    "response_time": "2.23",
    "context": "{\"function_name\": \"find_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 305,
    "solution": "def start_withp(words):\n    # Split the input list into individual words\n    all_words = \" \".join(words).split()\n    # Filter words that start with 'p' or 'P'\n    p_words = [word for word in all_words if word.lower().startswith('p')]\n    # Return the first two words that start with 'p' or 'P'\n    return tuple(p_words[:2])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to return two words from a list of words starting with letter 'p'.\n\n### Signature\ndef start_withp(words):\n\n### Test\nassert candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==(\"\"\"Python\"\"\", \"\"\"PHP\"\"\")",
    "timestamp": "2025-10-17T18:55:42.648610",
    "response_time": "2.04",
    "context": "{\"function_name\": \"start_withp\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 306,
    "solution": "def max_sum_increasing_subseq(a, n, index, k):\n    # Ensure k > index\n    if k <= index:\n        return 0\n\n    # Initialize dp array to store the maximum sum of increasing subsequences\n    dp = [0] * n\n\n    # Fill dp array for the prefix until index\n    for i in range(index + 1):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n\n    # Find the maximum sum of increasing subsequences that include a[k]\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_sum = max(max_sum, dp[i] + a[k])\n\n    return max_sum",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\n### Signature\ndef max_sum_increasing_subseq(a, n, index, k):\n\n### Test\nassert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
    "timestamp": "2025-10-17T18:55:46.614751",
    "response_time": "3.96",
    "context": "{\"function_name\": \"max_sum_increasing_subseq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 307,
    "solution": "def colon_tuplex(tuplex, m, n):\n    # Convert the tuple to a list to allow modification\n    temp_list = list(tuplex)\n    \n    # Check if the index m is valid\n    if 0 <= m < len(temp_list):\n        # If the element at index m is a list, append n to it\n        if isinstance(temp_list[m], list):\n            temp_list[m].append(n)\n    \n    # Convert the list back to a tuple and return\n    return tuple(temp_list)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get a colon of a tuple.\n\n### Signature\ndef colon_tuplex(tuplex,m,n):\n\n### Test\nassert candidate((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)",
    "timestamp": "2025-10-17T18:55:49.917657",
    "response_time": "3.30",
    "context": "{\"function_name\": \"colon_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 308,
    "solution": "from heapq import nlargest\n\ndef large_product(nums1, nums2, N):\n    # Generate all possible products\n    products = [x * y for x in nums1 for y in nums2]\n    # Find the N largest products\n    return nlargest(N, products)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n### Signature\ndef large_product(nums1, nums2, N):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
    "timestamp": "2025-10-17T18:55:51.775673",
    "response_time": "1.85",
    "context": "{\"function_name\": \"large_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 309,
    "solution": "def maximum(a, b):\n    return a if a > b else b",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the maximum of two numbers.\n\n### Signature\ndef maximum(a,b):\n\n### Test\nassert candidate(5,10) == 10",
    "timestamp": "2025-10-17T18:55:53.190045",
    "response_time": "1.41",
    "context": "{\"function_name\": \"maximum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 310,
    "solution": "def string_to_tuple(str1):\n    return tuple(str1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a given string to a tuple of characters.\n\n### Signature\ndef string_to_tuple(str1):\n\n### Test\nassert candidate(\"python 3.0\")==(\"\"\"p\"\"\", \"\"\"y\"\"\", \"\"\"t\"\"\", \"\"\"h\"\"\", \"\"\"o\"\"\", \"\"\"n\"\"\", \"\"\"3\"\"\", \"\"\".\"\"\", \"\"\"0\"\"\")",
    "timestamp": "2025-10-17T18:55:54.523561",
    "response_time": "1.33",
    "context": "{\"function_name\": \"string_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 311,
    "solution": "def set_left_most_unset_bit(n):\n    # Find the number of bits in the binary representation of n\n    num_bits = n.bit_length()\n    \n    # Iterate from the most significant bit to the least significant bit\n    for i in range(num_bits, -1, -1):\n        # Check if the bit at position i is unset\n        if not (n & (1 << i)):\n            # Set the bit at position i\n            n |= (1 << i)\n            break\n    \n    return n",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to set the left most unset bit.\n\n### Signature\ndef set_left_most_unset_bit(n):\n\n### Test\nassert candidate(10) == 14",
    "timestamp": "2025-10-17T18:55:57.222806",
    "response_time": "2.69",
    "context": "{\"function_name\": \"set_left_most_unset_bit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 312,
    "solution": "import math\n\ndef volume_cone(r, h):\n    return (1/3) * math.pi * r**2 * h",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the volume of a cone.\n\n### Signature\ndef volume_cone(r,h):\n\n### Test\nassert math.isclose(candidate(5,12), 314.15926535897927, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:56:00.968657",
    "response_time": "3.74",
    "context": "{\"function_name\": \"volume_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 388,
    "solution": "def highest_Power_of_2(n):\n    # Start with the highest power of 2 less than or equal to n\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\n### Signature\ndef highest_Power_of_2(n):\n\n### Test\nassert candidate(10) == 8",
    "timestamp": "2025-10-17T18:56:02.314961",
    "response_time": "1.34",
    "context": "{\"function_name\": \"highest_Power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 389,
    "solution": "def find_lucas(n):\n    # Base cases for Lucas numbers\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    a, b = 2, 1\n    \n    # Compute the nth Lucas number iteratively\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    \n    return b",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the n'th lucas number.\n\n### Signature\ndef find_lucas(n):\n\n### Test\nassert candidate(9) == 76",
    "timestamp": "2025-10-17T18:56:04.899690",
    "response_time": "2.58",
    "context": "{\"function_name\": \"find_lucas\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 390,
    "solution": "def add_string(list_, string):\n    return [string.format(item) for item in list_]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to apply a given format string to all of the elements in a list.\n\n### Signature\ndef add_string(list_, string):\n\n### Test\nassert candidate([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
    "timestamp": "2025-10-17T18:56:07.119275",
    "response_time": "2.21",
    "context": "{\"function_name\": \"add_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 391,
    "solution": "def convert_list_dictionary(l1, l2, l3):\n    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert more than one list to nested dictionary.\n\n### Signature\ndef convert_list_dictionary(l1, l2, l3):\n\n### Test\nassert candidate([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{\"\"\"S001\"\"\": {\"\"\"Adina Park\"\"\": 85}}, {\"\"\"S002\"\"\": {\"\"\"Leyton Marsh\"\"\": 98}}, {\"\"\"S003\"\"\": {\"\"\"Duncan Boyle\"\"\": 89}}, {\"\"\"S004\"\"\": {\"\"\"Saim Richards\"\"\": 92}}]",
    "timestamp": "2025-10-17T18:56:09.261362",
    "response_time": "2.14",
    "context": "{\"function_name\": \"convert_list_dictionary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 392,
    "solution": "def get_max_sum (n):\n    memo = {}\n\n    def helper(x):\n        if x in memo:\n            return memo[x]\n        if x == 0:\n            return 0\n        result = max(helper(x // 2) + helper(x // 3) + helper(x // 4) + helper(x // 5), x)\n        memo[x] = result\n        return result\n\n    return helper(n)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n### Signature\ndef get_max_sum (n):\n\n### Test\nassert get_max_sum(60) == 106",
    "timestamp": "2025-10-17T18:56:14.477442",
    "response_time": "5.21",
    "context": "{\"function_name\": \"get_max_sum \"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 393,
    "solution": "def max_length_list(input_list):\n    if not input_list:\n        return (0, [])\n    \n    max_list = max(input_list, key=len)\n    return (len(max_list), max_list)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the list with maximum length.\n\n### Signature\ndef max_length_list(input_list):\n\n### Test\nassert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
    "timestamp": "2025-10-17T18:56:16.261343",
    "response_time": "1.78",
    "context": "{\"function_name\": \"max_length_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 394,
    "solution": "def check_distinct(test_tup):\n    # Convert the tuple to a set and compare its length with the tuple\n    return len(test_tup) == len(set(test_tup))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if given tuple contains no duplicates.\n\n### Signature\ndef check_distinct(test_tup):\n\n### Test\nassert candidate((1, 4, 5, 6, 1, 4)) == False",
    "timestamp": "2025-10-17T18:56:18.706702",
    "response_time": "2.44",
    "context": "{\"function_name\": \"check_distinct\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 395,
    "solution": "def first_non_repeating_character(str1):\n    # Create a dictionary to count occurrences of each character\n    char_count = {}\n    \n    # Count each character in the string\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Find the first character with a count of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the first non-repeated character in a given string.\n\n### Signature\ndef first_non_repeating_character(str1):\n\n### Test\nassert candidate(\"abcabc\") == None",
    "timestamp": "2025-10-17T18:56:21.759755",
    "response_time": "3.05",
    "context": "{\"function_name\": \"first_non_repeating_character\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 396,
    "solution": "def check_char(string):\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given string starts and ends with the same character or not.\n\n### Signature\ndef check_char(string):\n\n### Test\nassert candidate(\"abba\") == \"Valid\"",
    "timestamp": "2025-10-17T18:56:23.135076",
    "response_time": "1.37",
    "context": "{\"function_name\": \"check_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 397,
    "solution": "def median_numbers(a, b, c):\n    # Sort the three numbers and return the middle one\n    return sorted([a, b, c])[1]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the median of three numbers.\n\n### Signature\ndef median_numbers(a,b,c):\n\n### Test\nassert candidate(25,55,65)==55.0",
    "timestamp": "2025-10-17T18:56:25.956234",
    "response_time": "2.82",
    "context": "{\"function_name\": \"median_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 398,
    "solution": "def sum_of_digits(nums):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n    \n    return sum(digit_sum(num) for num in nums)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to compute the sum of digits of each number of a given list.\n\n### Signature\ndef sum_of_digits(nums):\n\n### Test\nassert candidate([10,2,56])==14",
    "timestamp": "2025-10-17T18:56:27.301129",
    "response_time": "1.34",
    "context": "{\"function_name\": \"sum_of_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 399,
    "solution": "def bitwise_xor(test_tup1, test_tup2):\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\n### Signature\ndef bitwise_xor(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
    "timestamp": "2025-10-17T18:56:29.195061",
    "response_time": "1.89",
    "context": "{\"function_name\": \"bitwise_xor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 400,
    "solution": "def extract_freq(test_list):\n    # Use a set to store unique tuples\n    unique_tuples = set()\n    \n    for tup in test_list:\n        # Add the tuple and its reverse to the set\n        unique_tuples.add(tuple(sorted(tup)))\n    \n    # Return the count of unique tuples\n    return len(unique_tuples)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract the number of unique tuples in the given list.\n\n### Signature\ndef extract_freq(test_list):\n\n### Test\nassert candidate([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
    "timestamp": "2025-10-17T18:56:32.039019",
    "response_time": "2.84",
    "context": "{\"function_name\": \"extract_freq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 401,
    "solution": "def add_nested_tuples(test_tup1, test_tup2):\n    # Perform index-wise addition of tuple elements\n    return tuple((a + c, b + d) for (a, b), (c, d) in zip(test_tup1, test_tup2))\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n### Signature\ndef add_nested_tuples(test_tup1, test_tup2):\n\n### Test\nassert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
    "timestamp": "2025-10-17T18:56:33.775431",
    "response_time": "1.73",
    "context": "{\"function_name\": \"add_nested_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 404,
    "solution": "def minimum(a, b):\n    return a if a < b else b",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the minimum of two numbers.\n\n### Signature\ndef minimum(a,b):\n\n### Test\nassert candidate(1,2) == 1",
    "timestamp": "2025-10-17T18:56:34.784843",
    "response_time": "1.00",
    "context": "{\"function_name\": \"minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 405,
    "solution": "def check_tuplex(tuplex, element):\n    return element in tuplex",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether an element exists within a tuple.\n\n### Signature\ndef check_tuplex(tuplex,tuple1):\n\n### Test\nassert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),\"\"\"r\"\"\")==True",
    "timestamp": "2025-10-17T18:56:36.733032",
    "response_time": "1.94",
    "context": "{\"function_name\": \"check_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 406,
    "solution": "def find_Parity(x):\n    # A number has odd parity if the number of 1s in its binary representation is odd\n    # Count the number of 1s in the binary representation of x\n    count_of_ones = bin(x).count('1')\n    # Return True if the count is odd, otherwise False\n    return count_of_ones % 2 != 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find whether the parity of a given number is odd.\n\n### Signature\ndef find_Parity(x):\n\n### Test\nassert candidate(12) == False",
    "timestamp": "2025-10-17T18:56:38.770872",
    "response_time": "2.03",
    "context": "{\"function_name\": \"find_Parity\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 407,
    "solution": "def rearrange_bigger(n):\n    # Convert the number to a list of its digits\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Find the first digit that is smaller than the digit to its right\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, return -1 (no bigger number possible)\n        return -1\n    \n    # Find the smallest digit to the right of digits[i] that is larger than digits[i]\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            # Swap the two digits\n            digits[i], digits[j] = digits[j], digits[i]\n            break\n    \n    # Sort the digits to the right of i in ascending order\n    digits = digits[:i + 1] + sorted(digits[i + 1:])\n    \n    # Convert the list of digits back to an integer\n    return int(''.join(digits))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\n### Signature\ndef rearrange_bigger(n):\n\n### Test\nassert candidate(12)==21",
    "timestamp": "2025-10-17T18:56:50.477768",
    "response_time": "11.70",
    "context": "{\"function_name\": \"rearrange_bigger\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 408,
    "solution": "import heapq\n\ndef push(nums1, nums2, k):\n    if not nums1 or not nums2 or k <= 0:\n        return []\n    \n    min_heap = []\n    result = []\n    \n    # Initialize the heap with the first element of nums1 paired with every element of nums2\n    for i in range(min(k, len(nums1))):  # Only need the first k elements from nums1\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n    \n    # Extract the k smallest pairs\n    while k > 0 and min_heap:\n        sum_val, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        k -= 1\n        \n        # If there is a next element in nums2, push the next pair into the heap\n        if j + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    \n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n### Signature\ndef k_smallest_pairs(nums1, nums2, k):\n\n### Test\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
    "timestamp": "2025-10-17T18:56:54.847748",
    "response_time": "4.36",
    "context": "{\"function_name\": \"push\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 409,
    "solution": "def min_product_tuple(list1):\n    # Calculate the product for each tuple and return the minimum product\n    return min(a * b for a, b in list1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\n### Signature\ndef min_product_tuple(list1):\n\n### Test\nassert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
    "timestamp": "2025-10-17T18:56:56.416598",
    "response_time": "1.56",
    "context": "{\"function_name\": \"min_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 410,
    "solution": "def min_val(listval):\n    # Filter out non-numeric values from the list\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    # Return the minimum value among the numeric values\n    return min(numeric_values)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the minimum value in a given heterogeneous list.\n\n### Signature\ndef min_val(listval):\n\n### Test\nassert candidate(['Python', 3, 2, 4, 5, 'version'])==2",
    "timestamp": "2025-10-17T18:56:57.866787",
    "response_time": "1.44",
    "context": "{\"function_name\": \"min_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 411,
    "solution": "def snake_to_camel(word):\n    # Split the word by underscores\n    parts = word.split('_')\n    # Capitalize the first letter of each part and join them\n    return ''.join(part.capitalize() for part in parts)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert the given snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):\n\n### Test\nassert candidate('android_tv') == 'AndroidTv'",
    "timestamp": "2025-10-17T18:56:59.658094",
    "response_time": "1.78",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 412,
    "solution": "def remove_odd(l):\n    return [x for x in l if x % 2 == 0]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to remove odd numbers from a given list.\n\n### Signature\ndef remove_odd(l):\n\n### Test\nassert candidate([1,2,3]) == [2]",
    "timestamp": "2025-10-17T18:57:00.961383",
    "response_time": "1.30",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 413,
    "solution": "def extract_nth_element(list1, n):\n    return [tup[n] for tup in list1]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract the nth element from a given list of tuples.\n\n### Signature\ndef extract_nth_element(list1, n):\n\n### Test\nassert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
    "timestamp": "2025-10-17T18:57:02.628824",
    "response_time": "1.66",
    "context": "{\"function_name\": \"extract_nth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 414,
    "solution": "def overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\n### Signature\ndef overlapping(list1,list2):\n\n### Test\nassert candidate([1,2,3,4,5],[6,7,8,9]) == False",
    "timestamp": "2025-10-17T18:57:04.225750",
    "response_time": "1.59",
    "context": "{\"function_name\": \"overlapping\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 415,
    "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        return None  # Not enough elements to form a pair\n    \n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # The two largest numbers will give the maximum product\n    return (arr[0], arr[1])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find a pair with highest product from a given array of integers.\n\n### Signature\ndef max_Product(arr):\n\n### Test\nassert candidate([1,2,3,4,7,0,8,4]) == (7,8)",
    "timestamp": "2025-10-17T18:57:07.180550",
    "response_time": "2.95",
    "context": "{\"function_name\": \"max_Product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 417,
    "solution": "from collections import defaultdict\n\ndef group_tuples(Input):\n    grouped = defaultdict(list)\n    for first, second in Input:\n        grouped[first].append(second)\n    \n    result = []\n    for key, values in grouped.items():\n        result.append((key, *values))\n    \n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find common first element in given list of tuple.\n\n### Signature\ndef group_tuples(Input):\n\n### Test\nassert candidate([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
    "timestamp": "2025-10-17T18:57:09.665235",
    "response_time": "2.48",
    "context": "{\"function_name\": \"group_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 418,
    "solution": "def Find_Max(lst):\n    # Return the element with the maximum length\n    return max(lst, key=len)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the element of a list having maximum length.\n\n### Signature\ndef Find_Max(lst):\n\n### Test\nassert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
    "timestamp": "2025-10-17T18:57:10.975467",
    "response_time": "1.31",
    "context": "{\"function_name\": \"Find_Max\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 419,
    "solution": "def round_and_sum(list1):\n    # Round each number in the list\n    rounded_list = [round(num) for num in list1]\n    # Calculate the sum of the rounded numbers\n    total_sum = sum(rounded_list)\n    # Multiply the sum by the length of the list\n    result = total_sum * len(list1)\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\n### Signature\ndef round_and_sum(list1):\n\n### Test\nassert candidate([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
    "timestamp": "2025-10-17T18:57:12.845898",
    "response_time": "1.86",
    "context": "{\"function_name\": \"round_and_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 420,
    "solution": "def cube_Sum(n):\n    # Calculate the sum of cubes of the first n even natural numbers\n    return sum((2 * i) ** 3 for i in range(1, n + 1))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the cube sum of first n even natural numbers.\n\n### Signature\ndef cube_Sum(n):\n\n### Test\nassert candidate(2) == 72",
    "timestamp": "2025-10-17T18:57:15.343386",
    "response_time": "2.49",
    "context": "{\"function_name\": \"cube_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 421,
    "solution": "def concatenate_tuple(test_tup):\n    # Convert all elements to string and join them with '-'\n    return '-'.join(map(str, test_tup))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to concatenate each element of tuple by the delimiter.\n\n### Signature\ndef concatenate_tuple(test_tup):\n\n### Test\nassert candidate((\"ID\", \"is\", 4, \"UTS\") ) == \"\"\"ID-is-4-UTS\"\"\"",
    "timestamp": "2025-10-17T18:57:16.892659",
    "response_time": "1.54",
    "context": "{\"function_name\": \"concatenate_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 422,
    "solution": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average\n    average = sum_of_cubes / n\n    return average",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the average of cubes of first n natural numbers.\n\n### Signature\ndef find_Average_Of_Cube(n):\n\n### Test\nassert candidate(2) == 4.5",
    "timestamp": "2025-10-17T18:57:19.843868",
    "response_time": "2.94",
    "context": "{\"function_name\": \"find_Average_Of_Cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 424,
    "solution": "def extract_rear(test_tuple):\n    # Extract the last character of each string in the tuple\n    return [s[-1] for s in test_tuple]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract only the rear index element of each string in the given tuple.\n\n### Signature\ndef extract_rear(test_tuple):\n\n### Test\nassert candidate(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
    "timestamp": "2025-10-17T18:57:21.779344",
    "response_time": "1.93",
    "context": "{\"function_name\": \"extract_rear\"}"
  }
]