[
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 2,
    "solution": "```python\n===START===\ndef similar_elements(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup2))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):\n\n### Test\nassert set(candidate((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))",
    "timestamp": "2025-10-17T18:43:31.204530",
    "response_time": "3.67",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 3,
    "solution": "```python\n===START===\nimport math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n    return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):\n\n### Test\nassert candidate(2) == False\nassert candidate(10) == True",
    "timestamp": "2025-10-17T18:43:33.431016",
    "response_time": "2.22",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 4,
    "solution": "```python\n===START===\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    return sorted(heapq.nlargest(n, nums), reverse=True)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):\n\n### Test\nassert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]",
    "timestamp": "2025-10-17T18:43:34.673156",
    "response_time": "1.24",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 6,
    "solution": "```python\n===START===\ndef is_Power_Of_Two(x, y):\n    # XOR the two numbers, if they differ at exactly one bit position, the result will be a power of 2\n    xor_result = x ^ y\n    # Check if the result is a power of 2 (only one bit set)\n    return (xor_result & (xor_result - 1)) == 0 and xor_result != 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):\n\n### Test\nassert candidate(13,9) == True\nassert candidate(15,8) == False\nassert candidate(2,4) == False",
    "timestamp": "2025-10-17T18:43:38.693942",
    "response_time": "4.01",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 7,
    "solution": "```python\n===START===\ndef find_char_long(text):\n    # Split the text into words\n    words = text.split()\n    # Filter words that are at least 4 characters long\n    result = [word for word in words if len(word) >= 4]\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):\n\n### Test\nassert set(candidate('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])",
    "timestamp": "2025-10-17T18:43:40.822866",
    "response_time": "2.13",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 8,
    "solution": "```python\n===START===\ndef square_nums(nums):\n    return [num ** 2 for num in nums]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
    "timestamp": "2025-10-17T18:43:42.391826",
    "response_time": "1.56",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 9,
    "solution": "```python\n===START===\ndef find_Rotations(str):\n    n = len(str)\n    for i in range(1, n + 1):\n        if str == str[i:] + str[:i]:\n            return i\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):\n\n### Test\nassert candidate(\"aaaa\") == 1",
    "timestamp": "2025-10-17T18:43:43.579599",
    "response_time": "1.19",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 11,
    "solution": "```python\n===START===\ndef remove_Occ(s, ch):\n    # Find the first occurrence of the character\n    first_index = s.find(ch)\n    # Find the last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    # If the character is not found, return the original string\n    if first_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index + 1:]\n    \n    # Adjust the last index if it comes after the first removal\n    if last_index > first_index:\n        last_index -= 1\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index + 1:]\n    \n    return s\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):\n\n### Test\nassert candidate(\"hello\",\"l\") == \"heo\"",
    "timestamp": "2025-10-17T18:43:46.945947",
    "response_time": "3.36",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 12,
    "solution": "```python\n===START===\ndef sort_matrix(M):\n    # Sort the matrix based on the sum of each row\n    return sorted(M, key=sum)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):\n\n### Test\nassert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
    "timestamp": "2025-10-17T18:43:48.044265",
    "response_time": "1.10",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 14,
    "solution": "```python\n===START===\ndef find_Volume(l, b, h):\n    # The volume of a triangular prism is given by the formula:\n    # Volume = (1/2 * base * height) * length\n    return (0.5 * b * h) * l\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :\n\n### Test\nassert candidate(10,8,6) == 240",
    "timestamp": "2025-10-17T18:43:49.988577",
    "response_time": "1.94",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 16,
    "solution": "```python\n===START===\nimport re\n\ndef text_lowercase_underscore(text):\n    # Check if the string matches the pattern of lowercase letters joined by underscores\n    return bool(re.fullmatch(r'[a-z]+(_[a-z]+)*', text))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):\n\n### Test\nassert candidate(\"aab_cbbbc\")==(True)",
    "timestamp": "2025-10-17T18:43:52.325107",
    "response_time": "2.33",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 17,
    "solution": "===START===\ndef square_perimeter(a):\n    return 4 * a\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):\n\n### Test\nassert candidate(10)==40",
    "timestamp": "2025-10-17T18:43:53.252488",
    "response_time": "0.93",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 18,
    "solution": "```python\n===START===\ndef str_to_list(string1, string2):\n    result = ''.join([char for char in string1 if char not in string2])\n    return result\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):\n\n### Test\nassert candidate(\"probasscurve\", \"pros\") == \"\"\"bacuve\"\"\"",
    "timestamp": "2025-10-17T18:43:54.697532",
    "response_time": "1.44",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 19,
    "solution": "```python\n===START===\ndef test_duplicate(arraynums):\n    # Use a set to track seen numbers\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True  # Duplicate found\n        seen.add(num)\n    return False  # No duplicates found\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):\n\n### Test\nassert candidate(([1,2,3,4,5]))==False",
    "timestamp": "2025-10-17T18:43:56.986340",
    "response_time": "2.29",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 20,
    "solution": "===START===\ndef is_woodall(x):\n    \"\"\"\n    Function to check if a given number is a Woodall number.\n    A Woodall number is of the form n * 2^n - 1, where n is a positive integer.\n    \"\"\"\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):\n\n### Test\nassert candidate(383) == True",
    "timestamp": "2025-10-17T18:43:59.694310",
    "response_time": "2.71",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 56,
    "solution": "```python\n===START===\ndef rev(num):\n    # Reverse the number\n    reversed_num = int(str(num)[::-1])\n    # Check if the number is one less than twice its reverse\n    return num == 2 * reversed_num - 1\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):\n\n### Test\nassert candidate(70) == False",
    "timestamp": "2025-10-17T18:44:00.969176",
    "response_time": "1.27",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 57,
    "solution": "```python\n===START===\nfrom functools import cmp_to_key\n\ndef find_Max_Num(arr):\n    def compare(x, y):\n        # Compare concatenated strings in both orders\n        if x + y > y + x:\n            return -1\n        elif x + y < y + x:\n            return 1\n        else:\n            return 0\n\n    # Convert all integers to strings for comparison\n    arr = list(map(str, arr))\n    # Sort using the custom comparator\n    arr.sort(key=cmp_to_key(compare))\n    # Join the sorted array into a single string and convert to integer\n    return int(''.join(arr))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :\n\n### Test\nassert candidate([1,2,3]) == 321",
    "timestamp": "2025-10-17T18:44:04.337129",
    "response_time": "3.37",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 58,
    "solution": "```python\n===START===\ndef opposite_Signs(x, y):\n    # Check if the product of x and y is negative\n    return (x * y) < 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):\n\n### Test\nassert candidate(1,-2) == True\nassert candidate(3,2) == False",
    "timestamp": "2025-10-17T18:44:06.183993",
    "response_time": "1.84",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 59,
    "solution": "===START===\ndef is_octagonal(n):\n    # The formula for the nth octagonal number is: n * (3n - 2)\n    return n * (3 * n - 2)\n\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):\n\n### Test\nassert candidate(5) == 65",
    "timestamp": "2025-10-17T18:44:08.062075",
    "response_time": "1.88",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 61,
    "solution": "```python\n===START===\ndef count_Substrings(s):\n    def digit_sum(substring):\n        return sum(int(char) for char in substring)\n    \n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if digit_sum(substring) == len(substring):\n                count += 1\n    \n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):\n\n### Test\nassert candidate('112112') == 6",
    "timestamp": "2025-10-17T18:44:10.672610",
    "response_time": "2.61",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 62,
    "solution": "```python\n===START===\ndef smallest_num(xs):\n    if not xs:\n        raise ValueError(\"The list is empty\")\n    return min(xs)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):\n\n### Test\nassert candidate([10, 20, 1, 45, 99]) == 1",
    "timestamp": "2025-10-17T18:44:11.936671",
    "response_time": "1.26",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 63,
    "solution": "```python\n===START===\ndef max_difference(test_list):\n    # Calculate the difference for each tuple and find the maximum difference\n    return max(abs(a - b) for a, b in test_list)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):\n\n### Test\nassert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
    "timestamp": "2025-10-17T18:44:13.125481",
    "response_time": "1.19",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 64,
    "solution": "```python\n===START===\ndef subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second value of each tuple\n    return sorted(subjectmarks, key=lambda x: x[1])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):\n\n### Test\nassert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
    "timestamp": "2025-10-17T18:44:14.929585",
    "response_time": "1.80",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 65,
    "solution": "```python\n===START===\ndef recursive_list_sum(data_list):\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):\n\n### Test\nassert candidate(([1, 2, [3,4],[5,6]]))==21",
    "timestamp": "2025-10-17T18:44:16.114800",
    "response_time": "1.18",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 66,
    "solution": "===START===\ndef pos_count(lst):\n    return sum(1 for x in lst if x > 0)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):\n\n### Test\nassert candidate([1,-2,3,-4]) == 2",
    "timestamp": "2025-10-17T18:44:16.890008",
    "response_time": "0.77",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 67,
    "solution": "===START===\ndef bell_number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Base case: Bell(0, 0) = 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # First value in every row is the last value of the previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the entries in the current row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # Return the nth Bell number\n    return bell[n][0]\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):\n\n### Test\nassert candidate(2)==2",
    "timestamp": "2025-10-17T18:44:20.532906",
    "response_time": "3.64",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 68,
    "solution": "```python\n===START===\ndef is_Monotonic(A):\n    if not A:\n        return True  # An empty array is considered monotonic\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        if A[i] < A[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):\n\n### Test\nassert candidate([6, 5, 4, 4]) == True",
    "timestamp": "2025-10-17T18:44:22.403772",
    "response_time": "1.87",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 69,
    "solution": "```python\n===START===\ndef is_sublist(l, s):\n    # Check if the sublist `s` exists in list `l`\n    if not s:  # An empty sublist is always a sublist\n        return True\n    if not l:  # If the main list is empty, no sublist can exist\n        return False\n    \n    # Iterate through the main list to check for the sublist\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):\n\n### Test\nassert candidate([2,4,3,5,7],[3,7])==False",
    "timestamp": "2025-10-17T18:44:26.579010",
    "response_time": "4.17",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 70,
    "solution": "```python\n===START===\ndef find_equal_tuple(Input):\n    # Check if all tuples in the list have the same length\n    if not Input:\n        return True  # If the input list is empty, return True\n    first_length = len(Input[0])\n    return all(len(t) == first_length for t in Input)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):\n\n### Test\nassert candidate([(11, 22, 33), (44, 55, 66)]) == True",
    "timestamp": "2025-10-17T18:44:30.312161",
    "response_time": "3.73",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 71,
    "solution": "```python\n===START===\ndef comb_sort(nums):\n    def get_next_gap(gap):\n        # Shrink gap by shrink factor\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):\n\n### Test\nassert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
    "timestamp": "2025-10-17T18:44:33.933047",
    "response_time": "3.62",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 72,
    "solution": "```python\n===START===\ndef dif_Square(n):\n    # A number can be represented as the difference of two squares if and only if it is not of the form 4k+2\n    # where k is an integer.\n    return n % 4 != 2\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):\n\n### Test\nassert candidate(5) == True",
    "timestamp": "2025-10-17T18:44:38.135952",
    "response_time": "4.20",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 74,
    "solution": "```python\n===START===\ndef is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):\n\n### Test\nassert candidate([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
    "timestamp": "2025-10-17T18:44:41.153499",
    "response_time": "3.01",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 75,
    "solution": "```python\n===START===\ndef find_tuples(test_list, K):\n    # Filter tuples where all elements are divisible by K\n    return [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):\n\n### Test\nassert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
    "timestamp": "2025-10-17T18:44:42.732019",
    "response_time": "1.58",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 77,
    "solution": "```python\n===START===\ndef is_Diff(n):\n    \"\"\"\n    Function to determine if a number is divisible by 11.\n    \"\"\"\n    # Calculate the alternating sum of the digits\n    digits = [int(d) for d in str(n)]\n    alternating_sum = sum(digits[i] if i % 2 == 0 else -digits[i] for i in range(len(digits)))\n    \n    # Check divisibility by 11\n    return alternating_sum % 11 == 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):\n\n### Test\nassert candidate (12345) == False",
    "timestamp": "2025-10-17T18:44:45.456012",
    "response_time": "2.72",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 79,
    "solution": "```python\n===START===\ndef word_len(s):\n    return len(s) % 2 != 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):\n\n### Test\nassert candidate(\"Hadoop\") == False",
    "timestamp": "2025-10-17T18:44:46.837298",
    "response_time": "1.38",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 80,
    "solution": "===START===\ndef tetrahedral_number(n):\n    # The nth tetrahedral number is given by the formula:\n    # T(n) = n * (n + 1) * (n + 2) / 6\n    return n * (n + 1) * (n + 2) // 6\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):\n\n### Test\nassert candidate(5) == 35",
    "timestamp": "2025-10-17T18:44:48.437644",
    "response_time": "1.60",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 82,
    "solution": "```python\n===START===\nimport math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r**3)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 4188.790204786391, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:44:49.693473",
    "response_time": "1.25",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 83,
    "solution": "```python\n===START===\ndef get_Char(strr):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in strr)\n    # Find the modulo 26 of the sum\n    mod_26 = ascii_sum % 26\n    # Convert the result to a character by adding it to 'a' (ASCII value 97)\n    result_char = chr(mod_26 + ord('a'))\n    return result_char\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):\n\n### Test\nassert candidate(\"abc\") == \"f\"",
    "timestamp": "2025-10-17T18:44:53.867700",
    "response_time": "4.17",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 84,
    "solution": "===START===\ndef sequence(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    \n    # Initialize the sequence with the first two values\n    seq = [0] * (n + 1)\n    seq[1] = 1\n    seq[2] = 1\n    \n    # Compute the sequence iteratively\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    \n    return seq[n]\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):\n\n### Test\nassert candidate(10) == 6",
    "timestamp": "2025-10-17T18:44:57.435281",
    "response_time": "3.56",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 85,
    "solution": "```python\n===START===\nimport math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 1256.6370614359173, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:44:59.546689",
    "response_time": "2.11",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 86,
    "solution": "===START===\ndef centered_hexagonal_number(n):\n    # The formula for the nth centered hexagonal number is:\n    # 3 * n * (n - 1) + 1\n    return 3 * n * (n - 1) + 1\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):\n\n### Test\nassert candidate(10) == 271",
    "timestamp": "2025-10-17T18:45:01.764271",
    "response_time": "2.21",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 87,
    "solution": "```python\n# ===START===\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge the three dictionaries into one\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\n### Test\nassert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={\"\"\"B\"\"\": \"\"\"Black\"\"\", \"\"\"R\"\"\": \"\"\"Red\"\"\", \"\"\"P\"\"\": \"\"\"Pink\"\"\", \"\"\"G\"\"\": \"\"\"Green\"\"\", \"\"\"W\"\"\": \"\"\"White\"\"\", \"\"\"O\"\"\": \"\"\"Orange\"\"\"}",
    "timestamp": "2025-10-17T18:45:04.190738",
    "response_time": "2.42",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 88,
    "solution": "```python\n===START===\ndef freq_count(list1):\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):\n\n### Test\nassert candidate([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})",
    "timestamp": "2025-10-17T18:45:05.544146",
    "response_time": "1.34",
    "context": "{\"function_name\": \"freq_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 89,
    "solution": "```python\n===START===\ndef closest_num(N):\n    # The closest smaller number than N is simply N - 1\n    return N - 1\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):\n\n### Test\nassert candidate(11) == 10",
    "timestamp": "2025-10-17T18:45:07.067746",
    "response_time": "1.52",
    "context": "{\"function_name\": \"closest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 90,
    "solution": "```python\n===START===\ndef len_log(list1):\n    # Find the length of the longest word in the list\n    return max(len(word) for word in list1)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):\n\n### Test\nassert candidate([\"python\",\"PHP\",\"bigdata\"]) == 7",
    "timestamp": "2025-10-17T18:45:08.429736",
    "response_time": "1.36",
    "context": "{\"function_name\": \"len_log\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 91,
    "solution": "```python\n===START===\ndef find_substring(str1, sub_str):\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):\n\n### Test\nassert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
    "timestamp": "2025-10-17T18:45:09.445117",
    "response_time": "1.01",
    "context": "{\"function_name\": \"find_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 92,
    "solution": "```python\n===START===\ndef is_undulating(n):\n    # Convert the number to a string for easier manipulation\n    n_str = str(n)\n    \n    # An undulating number must have at least 3 digits\n    if len(n_str) < 3:\n        return False\n    \n    # Extract the first two digits\n    a, b = n_str[0], n_str[1]\n    \n    # Check if the first two digits are the same\n    if a == b:\n        return False\n    \n    # Check if the number alternates between the two digits\n    for i in range(len(n_str)):\n        if i % 2 == 0 and n_str[i] != a:\n            return False\n        if i % 2 == 1 and n_str[i] != b:\n            return False\n    \n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):\n\n### Test\nassert candidate(1212121) == True",
    "timestamp": "2025-10-17T18:45:25.952544",
    "response_time": "16.50",
    "context": "{\"function_name\": \"is_undulating\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 93,
    "solution": "===START===\ndef power(a, b):\n    return a ** b\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):\n\n### Test\nassert candidate(3,4) == 81",
    "timestamp": "2025-10-17T18:45:27.476559",
    "response_time": "1.52",
    "context": "{\"function_name\": \"power\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 94,
    "solution": "```python\n===START===\ndef index_minimum(test_list):\n    # Find the tuple with the smallest second value\n    min_tuple = min(test_list, key=lambda x: x[1])\n    # Return the first value of that tuple\n    return min_tuple[0]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):\n\n### Test\nassert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
    "timestamp": "2025-10-17T18:45:29.544868",
    "response_time": "2.06",
    "context": "{\"function_name\": \"index_minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 95,
    "solution": "```python\n===START===\ndef Find_Min_Length(lst):\n    if not lst:  # Check if the list is empty\n        return 0\n    return min(len(sublist) for sublist in lst)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):\n\n### Test\nassert candidate([[1],[1,2]]) == 1",
    "timestamp": "2025-10-17T18:45:32.306061",
    "response_time": "2.75",
    "context": "{\"function_name\": \"Find_Min_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 96,
    "solution": "===START===\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):\n\n### Test\nassert candidate(15) == 4",
    "timestamp": "2025-10-17T18:45:35.118521",
    "response_time": "2.81",
    "context": "{\"function_name\": \"divisor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 97,
    "solution": "```python\n===START===\nfrom collections import Counter\n\ndef frequency_lists(list1):\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    # Use Counter to count the frequency of each element\n    return dict(Counter(flattened_list))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):\n\n### Test\nassert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
    "timestamp": "2025-10-17T18:45:37.143498",
    "response_time": "2.02",
    "context": "{\"function_name\": \"frequency_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 98,
    "solution": "```python\n===START===\nfrom functools import reduce\nimport math\n\ndef multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = reduce(lambda x, y: x * y, numbers)\n    return product / len(numbers)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):\n\n### Test\nassert math.isclose(candidate((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:45:38.544985",
    "response_time": "1.40",
    "context": "{\"function_name\": \"multiply_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 99,
    "solution": "===START===\ndef decimal_to_binary(n):\n    # Convert the decimal number to binary using bin() and remove the '0b' prefix\n    return bin(n)[2:]\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):\n\n### Test\nassert candidate(8) == '1000'",
    "timestamp": "2025-10-17T18:45:40.161745",
    "response_time": "1.61",
    "context": "{\"function_name\": \"decimal_to_binary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 100,
    "solution": "```python\n===START===\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    num += 1  # Start checking from the next number\n    while not is_palindrome(num):\n        num += 1\n    return num\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):\n\n### Test\nassert candidate(99)==101",
    "timestamp": "2025-10-17T18:45:43.216553",
    "response_time": "3.05",
    "context": "{\"function_name\": \"next_smallest_palindrome\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 101,
    "solution": "```python\n===START===\ndef kth_element(arr, k):\n    # Return the k-th element using 1-based indexing\n    return arr[k - 1]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):\n\n### Test\nassert candidate([12,3,5,7,19], 2) == 3",
    "timestamp": "2025-10-17T18:45:45.115332",
    "response_time": "1.90",
    "context": "{\"function_name\": \"kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 102,
    "solution": "```python\n===START===\ndef snake_to_camel(word):\n    # Split the word by underscores\n    parts = word.split('_')\n    # Capitalize the first letter of each part and join them\n    return ''.join(part.capitalize() for part in parts)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):\n\n### Test\nassert candidate('python_program')=='PythonProgram'",
    "timestamp": "2025-10-17T18:45:46.808090",
    "response_time": "1.69",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 103,
    "solution": "===START===\ndef eulerian_num(n, m):\n    if m < 0 or m >= n:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):\n\n### Test\nassert candidate(3, 1) == 4",
    "timestamp": "2025-10-17T18:45:49.051208",
    "response_time": "2.24",
    "context": "{\"function_name\": \"eulerian_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 104,
    "solution": "```python\n===START===\ndef sort_sublists(input_list):\n    return [sorted(sublist) for sublist in input_list]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):\n\n### Test\nassert candidate(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[[\"\"\"green\"\"\", \"\"\"orange\"\"\"], [\"\"\"black\"\"\", \"\"\"white\"\"\"], [\"\"\"black\"\"\", \"\"\"orange\"\"\", \"\"\"white\"\"\"]]",
    "timestamp": "2025-10-17T18:45:50.228420",
    "response_time": "1.17",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 105,
    "solution": "===START===\ndef count(lst):\n    return sum(1 for item in lst if item is True)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):\n\n### Test\nassert candidate([True,False,True]) == 2",
    "timestamp": "2025-10-17T18:45:52.250631",
    "response_time": "2.02",
    "context": "{\"function_name\": \"count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 106,
    "solution": "```python\n===START===\ndef add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):\n\n### Test\nassert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
    "timestamp": "2025-10-17T18:45:53.187855",
    "response_time": "0.93",
    "context": "{\"function_name\": \"add_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 108,
    "solution": "```python\n# ===START===\ndef merge_sorted_list(num1, num2, num3):\n    # Combine all three lists\n    combined_list = num1 + num2 + num3\n    # Sort the combined list\n    combined_list.sort()\n    return combined_list\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):\n\n### Test\nassert candidate([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
    "timestamp": "2025-10-17T18:45:55.043688",
    "response_time": "1.85",
    "context": "{\"function_name\": \"merge_sorted_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 109,
    "solution": "```python\n===START===\ndef odd_Equivalent(s, n):\n    # Function to check if a binary string represents an odd number\n    def is_odd(binary_str):\n        # A binary number is odd if its last digit is '1'\n        return binary_str[-1] == '1'\n    \n    count = 0\n    length = len(s)\n    \n    # Rotate the binary string n times\n    for i in range(n):\n        # Check if the current binary string is odd\n        if is_odd(s):\n            count += 1\n        # Rotate the string by moving the first character to the end\n        s = s[1:] + s[0]\n    \n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):\n\n### Test\nassert candidate(\"011001\",6) == 3",
    "timestamp": "2025-10-17T18:45:58.737399",
    "response_time": "3.69",
    "context": "{\"function_name\": \"odd_Equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 111,
    "solution": "```python\n===START===\ndef common_in_nested_lists(nestedlist):\n    if not nestedlist:\n        return []\n    \n    # Start with the set of the first list\n    common_elements = set(nestedlist[0])\n    \n    # Intersect with the sets of the remaining lists\n    for lst in nestedlist[1:]:\n        common_elements &= set(lst)\n    \n    return list(common_elements)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):\n\n### Test\nassert set(candidate([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])",
    "timestamp": "2025-10-17T18:46:03.067366",
    "response_time": "4.33",
    "context": "{\"function_name\": \"common_in_nested_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 113,
    "solution": "```python\n===START===\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):\n\n### Test\nassert candidate(\"python\")==False",
    "timestamp": "2025-10-17T18:46:04.373877",
    "response_time": "1.30",
    "context": "{\"function_name\": \"check_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 115,
    "solution": "```python\n===START===\ndef empty_dit(list1):\n    # Check if all dictionaries in the list are empty\n    return all(not d for d in list1)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):\n\n### Test\nassert candidate([{},{},{}])==True",
    "timestamp": "2025-10-17T18:46:05.497298",
    "response_time": "1.12",
    "context": "{\"function_name\": \"empty_dit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 116,
    "solution": "```python\n===START===\ndef tuple_to_int(nums):\n    # Convert each integer in the tuple to a string, join them, and convert back to an integer\n    return int(''.join(map(str, nums)))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):\n\n### Test\nassert candidate((1,2,3))==123",
    "timestamp": "2025-10-17T18:46:09.373119",
    "response_time": "3.87",
    "context": "{\"function_name\": \"tuple_to_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 117,
    "solution": "```python\n# ===START===\ndef list_to_float(test_list):\n    result = []\n    for sublist in test_list:\n        converted_sublist = []\n        for item in sublist:\n            try:\n                converted_sublist.append(float(item))\n            except ValueError:\n                converted_sublist.append(item)\n        result.append(tuple(converted_sublist))\n    return result\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):\n\n### Test\nassert candidate( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]",
    "timestamp": "2025-10-17T18:46:10.756314",
    "response_time": "1.38",
    "context": "{\"function_name\": \"list_to_float\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 118,
    "solution": "===START===\ndef string_to_list(string):\n    return string.split(\" \")\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):\n\n### Test\nassert candidate(\"python programming\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\"]",
    "timestamp": "2025-10-17T18:46:11.796964",
    "response_time": "1.04",
    "context": "{\"function_name\": \"string_to_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 119,
    "solution": "```python\n===START===\ndef search(arr):\n    # Using binary search to find the single element in a sorted array\n    low, high = 0, len(arr) - 1\n    \n    while low < high:\n        mid = low + (high - low) // 2\n        \n        # Ensure mid is even for comparison\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the pair is valid\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    \n    return arr[low]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):\n\n### Test\nassert candidate([1,1,2,2,3]) == 3",
    "timestamp": "2025-10-17T18:46:15.688131",
    "response_time": "3.89",
    "context": "{\"function_name\": \"search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 120,
    "solution": "```python\n===START===\ndef max_product_tuple(list1):\n    max_product = float('-inf')  # Initialize with negative infinity\n    for pair in list1:\n        product = abs(pair[0] * pair[1])  # Calculate the absolute product\n        if product > max_product:\n            max_product = product  # Update max_product if a larger one is found\n    return max_product\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):\n\n### Test\nassert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
    "timestamp": "2025-10-17T18:46:18.272723",
    "response_time": "2.58",
    "context": "{\"function_name\": \"max_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 123,
    "solution": "```python\n===START===\ndef amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        \"\"\"Helper function to calculate the sum of proper divisors of n.\"\"\"\n        divisors_sum = 1  # 1 is a proper divisor of every number > 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors_sum += i\n                if i != n // i:  # Avoid adding the square root twice for perfect squares\n                    divisors_sum += n // i\n        return divisors_sum\n\n    amicable_sum = 0\n    for a in range(2, limit + 1):\n        b = sum_of_divisors(a)\n        if b != a and b <= limit and sum_of_divisors(b) == a:\n            amicable_sum += a\n\n    return amicable_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):\n\n### Test\nassert candidate(999)==504",
    "timestamp": "2025-10-17T18:46:22.790416",
    "response_time": "4.51",
    "context": "{\"function_name\": \"amicable_numbers_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 124,
    "solution": "```python\n===START===\nimport math\n\ndef angle_complex(a, b):\n    # Create the complex number\n    complex_num = complex(a, b)\n    # Calculate and return the angle (phase) of the complex number\n    return math.atan2(complex_num.imag, complex_num.real)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):\n\n### Test\nassert math.isclose(candidate(0,1j), 1.5707963267948966, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:46:24.404259",
    "response_time": "1.61",
    "context": "{\"function_name\": \"angle_complex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 125,
    "solution": "```python\n===START===\ndef find_length(string):\n    max_diff = 0\n    current_diff = 0\n\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:  # char == '1'\n            current_diff -= 1\n\n        if current_diff < 0:\n            current_diff = 0\n\n        max_diff = max(max_diff, current_diff)\n\n    return max_diff\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):\n\n### Test\nassert candidate(\"11000010001\") == 6",
    "timestamp": "2025-10-17T18:46:26.876625",
    "response_time": "2.47",
    "context": "{\"function_name\": \"find_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 126,
    "solution": "```python\n===START===\ndef sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    common_divisor = gcd(a, b)\n    result = 0\n    for i in range(1, common_divisor + 1):\n        if common_divisor % i == 0:\n            result += i\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):\n\n### Test\nassert candidate(10,15) == 6",
    "timestamp": "2025-10-17T18:46:28.731110",
    "response_time": "1.85",
    "context": "{\"function_name\": \"sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 127,
    "solution": "===START===\ndef multiply_int(x, y):\n    return x * y\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):\n\n### Test\nassert candidate(10,20)==200",
    "timestamp": "2025-10-17T18:46:29.540039",
    "response_time": "0.81",
    "context": "{\"function_name\": \"multiply_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 128,
    "solution": "```python\n===START===\ndef long_words(n, str):\n    # Split the string into words\n    words = str.split()\n    # Filter words longer than n characters\n    return [word for word in words if len(word) > n]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):\n\n### Test\nassert candidate(3,\"python is a programming language\")==[\"\"\"python\"\"\",\"\"\"programming\"\"\",\"\"\"language\"\"\"]",
    "timestamp": "2025-10-17T18:46:31.259836",
    "response_time": "1.72",
    "context": "{\"function_name\": \"long_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 129,
    "solution": "```python\n===START===\ndef magic_square_test(my_matrix):\n    # Check if the matrix is square\n    n = len(my_matrix)\n    if any(len(row) != n for row in my_matrix):\n        return False\n\n    # Calculate the sum of the first row to use as the magic sum\n    magic_sum = sum(my_matrix[0])\n\n    # Check sums of all rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check sums of all columns\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check sum of the main diagonal\n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check sum of the secondary diagonal\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    # If all checks pass, it is a magic square\n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):\n\n### Test\nassert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
    "timestamp": "2025-10-17T18:46:34.291955",
    "response_time": "3.03",
    "context": "{\"function_name\": \"magic_square_test\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 130,
    "solution": "```python\n===START===\nfrom collections import Counter\n\ndef max_occurrences(nums):\n    # Count the frequency of each element in the list\n    frequency = Counter(nums)\n    # Find the element with the maximum frequency\n    max_item = max(frequency, key=frequency.get)\n    return max_item\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):\n\n### Test\nassert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2",
    "timestamp": "2025-10-17T18:46:36.200855",
    "response_time": "1.90",
    "context": "{\"function_name\": \"max_occurrences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 131,
    "solution": "```python\n===START===\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str1) - 1\n    \n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n    \n    return ''.join(str_list)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):\n\n### Test\nassert candidate(\"Python\") == \"Python\"",
    "timestamp": "2025-10-17T18:46:38.849001",
    "response_time": "2.65",
    "context": "{\"function_name\": \"reverse_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 132,
    "solution": "```python\n===START===\ndef tup_string(tup1):\n    return ''.join(tup1)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):\n\n### Test\nassert candidate((\"\"\"e\"\"\", \"\"\"x\"\"\", \"\"\"e\"\"\", \"\"\"r\"\"\", \"\"\"c\"\"\", \"\"\"i\"\"\", \"\"\"s\"\"\", \"\"\"e\"\"\", \"\"\"s\"\"\"))==(\"exercises\")",
    "timestamp": "2025-10-17T18:46:41.287462",
    "response_time": "2.44",
    "context": "{\"function_name\": \"tup_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 133,
    "solution": "```python\n===START===\ndef sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):\n\n### Test\nassert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
    "timestamp": "2025-10-17T18:46:42.375388",
    "response_time": "1.08",
    "context": "{\"function_name\": \"sum_negativenum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 135,
    "solution": "===START===\ndef hexagonal_num(n):\n    # The nth hexagonal number is given by the formula: n * (2n - 1)\n    return n * (2 * n - 1)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):\n\n### Test\nassert candidate(10) == 190",
    "timestamp": "2025-10-17T18:46:43.865737",
    "response_time": "1.49",
    "context": "{\"function_name\": \"hexagonal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 137,
    "solution": "```python\n===START===\nimport math\n\ndef zero_count(nums):\n    if not nums:\n        return 0  # Handle empty list case\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    return zeroes / (zeroes + non_zeroes)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):\n\n### Test\nassert math.isclose(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:46:45.876100",
    "response_time": "2.01",
    "context": "{\"function_name\": \"zero_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 138,
    "solution": "```python\n===START===\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    \n    # Check if all bits in the binary representation of n are unique\n    # This ensures that n can be represented as a sum of distinct powers of 2\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n            if n % 2 == 0:\n                n //= 2\n            else:\n                return False\n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):\n\n### Test\nassert candidate(10) == True",
    "timestamp": "2025-10-17T18:46:48.963094",
    "response_time": "3.08",
    "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 139,
    "solution": "```python\n===START===\nimport math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):\n\n### Test\nassert math.isclose(candidate(10), 62.830000000000005, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:46:50.601725",
    "response_time": "1.63",
    "context": "{\"function_name\": \"circle_circumference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 140,
    "solution": "```python\n===START===\ndef extract_singly(test_list):\n    result_set = set()\n    for sublist in test_list:\n        result_set.update(sublist)\n    return result_set\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):\n\n### Test\nassert set(candidate([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])",
    "timestamp": "2025-10-17T18:46:52.874337",
    "response_time": "2.27",
    "context": "{\"function_name\": \"extract_singly\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 141,
    "solution": "```python\n===START===\ndef pancake_sort(nums):\n    def flip(sublist, k):\n        \"\"\"Helper function to reverse the first k elements of the sublist.\"\"\"\n        sublist[:k] = sublist[:k][::-1]\n\n    n = len(nums)\n    for size in range(n, 1, -1):\n        # Find the index of the maximum element in the current unsorted portion\n        max_index = max(range(size), key=lambda i: nums[i])\n        \n        # If the maximum element is not already in its correct position\n        if max_index != size - 1:\n            # Bring the maximum element to the front if it's not already there\n            if max_index != 0:\n                flip(nums, max_index + 1)\n            # Move the maximum element to its correct position\n            flip(nums, size)\n    \n    return nums\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):\n\n### Test\nassert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
    "timestamp": "2025-10-17T18:46:59.161786",
    "response_time": "6.28",
    "context": "{\"function_name\": \"pancake_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 142,
    "solution": "```python\n===START===\ndef count_samepair(list1, list2, list3):\n    # Initialize a counter for identical items in the same position\n    count = 0\n    \n    # Iterate through the lists using their indices\n    for i in range(min(len(list1), len(list2), len(list3))):\n        # Check if the items at the same position in all three lists are identical\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):\n\n### Test\nassert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
    "timestamp": "2025-10-17T18:47:02.166619",
    "response_time": "3.00",
    "context": "{\"function_name\": \"count_samepair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 143,
    "solution": "```python\n===START===\ndef find_lists(Input):\n    # Count the number of elements in the tuple that are of type list\n    return sum(1 for item in Input if isinstance(item, list))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):\n\n### Test\nassert candidate(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
    "timestamp": "2025-10-17T18:47:04.939991",
    "response_time": "2.77",
    "context": "{\"function_name\": \"find_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 145,
    "solution": "```python\n===START===\ndef max_Abs_Diff(arr):\n    if not arr or len(arr) < 2:\n        return 0  # If the array is empty or has less than 2 elements, return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val - min_val\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):\n\n### Test\nassert candidate((2,1,5,3)) == 4",
    "timestamp": "2025-10-17T18:47:07.986434",
    "response_time": "3.04",
    "context": "{\"function_name\": \"max_Abs_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 160,
    "solution": "```python\n===START===\ndef find_solution(a, b, n):\n    # Iterate over possible values of x\n    for x in range(n // a + 1):\n        # Calculate the remaining value after subtracting ax from n\n        remainder = n - a * x\n        # Check if the remainder is divisible by b\n        if remainder % b == 0:\n            # Calculate y\n            y = remainder // b\n            return (x, y)\n    # If no solution is found, return None\n    return None\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):\n\n### Test\nassert candidate(2, 3, 7) == (2, 1)",
    "timestamp": "2025-10-17T18:47:10.606486",
    "response_time": "2.61",
    "context": "{\"function_name\": \"find_solution\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 161,
    "solution": "```python\n===START===\ndef remove_elements(list1, list2):\n    return [item for item in list1 if item not in list2]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]",
    "timestamp": "2025-10-17T18:47:11.629212",
    "response_time": "1.02",
    "context": "{\"function_name\": \"remove_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 162,
    "solution": "```python\n===START===\ndef sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += (n - 2 * i)\n    return total\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):\n\n### Test\nassert candidate(6) == 12",
    "timestamp": "2025-10-17T18:47:13.479653",
    "response_time": "1.85",
    "context": "{\"function_name\": \"sum_series\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 163,
    "solution": "```python\n===START===\nimport math\n\ndef area_polygon(s, l):\n    # Formula for the area of a regular polygon:\n    # (s * l^2) / (4 * tan(pi / s))\n    return (s * l**2) / (4 * math.tan(math.pi / s))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):\n\n### Test\nassert math.isclose(candidate(4, 20), 400., rel_tol=0.001)",
    "timestamp": "2025-10-17T18:47:15.815420",
    "response_time": "2.33",
    "context": "{\"function_name\": \"area_polygon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 164,
    "solution": "```python\n===START===\ndef div_sum(n):\n    def sum_of_divisors(num):\n        divisors_sum = 0\n        for i in range(1, num // 2 + 1):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum + num  # Include the number itself as a divisor\n\n    return sum_of_divisors\n\ndef candidate(a, b):\n    sum_divisors = div_sum(0)  # Get the sum_of_divisors function\n    return sum_divisors(a) == sum_divisors(b)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):\n\n### Test\nassert candidate(36, 57) == False",
    "timestamp": "2025-10-17T18:47:21.012381",
    "response_time": "5.19",
    "context": "{\"function_name\": \"are_equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 165,
    "solution": "```python\n===START===\ndef count_char_position(str1):\n    count = 0\n    for i, char in enumerate(str1.lower()):\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):\n\n### Test\nassert candidate(\"xbcefg\") == 2",
    "timestamp": "2025-10-17T18:47:23.100764",
    "response_time": "2.08",
    "context": "{\"function_name\": \"count_char_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 166,
    "solution": "```python\n===START===\ndef find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):\n\n### Test\nassert candidate([5, 4, 7, 2, 1]) == 4",
    "timestamp": "2025-10-17T18:47:24.402111",
    "response_time": "1.30",
    "context": "{\"function_name\": \"find_even_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 167,
    "solution": "```python\n===START===\ndef next_power_of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):\n\n### Test\nassert candidate(0) == 1",
    "timestamp": "2025-10-17T18:47:25.612998",
    "response_time": "1.21",
    "context": "{\"function_name\": \"next_power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 168,
    "solution": "```python\n===START===\ndef frequency(a, x):\n    return a.count(x)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):\n\n### Test\nassert candidate([1,2,3], 4) == 0",
    "timestamp": "2025-10-17T18:52:44.461075",
    "response_time": "318.84",
    "context": "{\"function_name\": \"frequency\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 170,
    "solution": "```python\n===START===\ndef sum_range_list(list1, m, n):\n    # Ensure m and n are within the bounds of the list\n    if m < 0 or n >= len(list1) or m > n:\n        return 0  # Return 0 for invalid range\n    \n    # Calculate the sum of the sublist from index m to n (inclusive)\n    return sum(list1[m:n+1])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):\n\n### Test\nassert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29",
    "timestamp": "2025-10-17T18:52:47.118576",
    "response_time": "2.65",
    "context": "{\"function_name\": \"sum_range_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 171,
    "solution": "===START===\ndef perimeter_pentagon(a):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its side.\n\n    :param a: Length of one side of the pentagon\n    :return: Perimeter of the pentagon\n    \"\"\"\n    return 5 * a\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):\n\n### Test\nassert candidate(5) == 25",
    "timestamp": "2025-10-17T18:52:50.853663",
    "response_time": "3.73",
    "context": "{\"function_name\": \"perimeter_pentagon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 172,
    "solution": "```python\n===START===\ndef count_occurance(s):\n    return s.count('std')\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):\n\n### Test\nassert candidate(\"letstdlenstdporstd\") == 3\nassert candidate(\"truststdsolensporsd\") == 1",
    "timestamp": "2025-10-17T18:52:52.098253",
    "response_time": "1.24",
    "context": "{\"function_name\": \"count_occurance\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 222,
    "solution": "```python\n===START===\ndef check_type(test_tuple):\n    # Get the type of the first element\n    first_type = type(test_tuple[0])\n    # Check if all elements have the same type as the first element\n    return all(type(element) == first_type for element in test_tuple)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):\n\n### Test\nassert candidate((5, 6, 7, 3, 5, 6) ) == True",
    "timestamp": "2025-10-17T18:52:55.056707",
    "response_time": "2.95",
    "context": "{\"function_name\": \"check_type\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 223,
    "solution": "```python\n# ===START===\nfrom bisect import bisect_left, bisect_right\n\ndef is_majority(arr, n, x):\n    # Find the first occurrence of x\n    left_index = bisect_left(arr, x)\n    # Find the last occurrence of x\n    right_index = bisect_right(arr, x)\n    \n    # Calculate the count of x in the array\n    count = right_index - left_index\n    \n    # Check if x is the majority element\n    return count > n // 2\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):\n\n### Test\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
    "timestamp": "2025-10-17T18:52:58.601879",
    "response_time": "3.54",
    "context": "{\"function_name\": \"binary_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 224,
    "solution": "```python\n===START===\ndef count_Set_Bits(n):\n    return bin(n).count('1')\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):\n\n### Test\nassert candidate(2) == 1",
    "timestamp": "2025-10-17T18:53:00.261097",
    "response_time": "1.66",
    "context": "{\"function_name\": \"count_Set_Bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 226,
    "solution": "```python\n===START===\ndef odd_values_string(str):\n    # Return a new string with characters at even indices (0-based index)\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to remove the characters which have odd index values of a given string.\n\n### Signature\ndef odd_values_string(str):\n\n### Test\nassert candidate('abcdef') == 'ace'\nassert candidate('python') == 'pto'",
    "timestamp": "2025-10-17T18:53:01.942190",
    "response_time": "1.68",
    "context": "{\"function_name\": \"odd_values_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 227,
    "solution": "===START===\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find minimum of three numbers.\n\n### Signature\ndef min_of_three(a,b,c):\n\n### Test\nassert candidate(10,20,0)==0",
    "timestamp": "2025-10-17T18:53:04.018579",
    "response_time": "2.07",
    "context": "{\"function_name\": \"min_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 228,
    "solution": "===START===\ndef all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a mask with bits set in the range [l, r]\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    # Check if all bits in the range are unset\n    return (n & mask) == 0\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether all the bits are unset in the given range or not.\n\n### Signature\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n\n### Test\nassert candidate(4,1,2) == True",
    "timestamp": "2025-10-17T18:53:07.769746",
    "response_time": "3.75",
    "context": "{\"function_name\": \"all_Bits_Set_In_The_Given_Range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 229,
    "solution": "```python\n# ===START===\ndef re_arrange_array(arr, n):\n    # Separate the first n elements into negatives and non-negatives\n    negatives = [x for x in arr[:n] if x < 0]\n    non_negatives = [x for x in arr[:n] if x >= 0]\n    \n    # Combine negatives and non-negatives while preserving the rest of the array\n    return negatives + non_negatives + arr[n:]\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n### Signature\ndef re_arrange_array(arr, n):\n\n### Test\nassert candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
    "timestamp": "2025-10-17T18:53:11.335744",
    "response_time": "3.56",
    "context": "{\"function_name\": \"re_arrange_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 230,
    "solution": "```python\n===START===\ndef replace_blank(str1, char):\n    return str1.replace(\" \", char)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n### Signature\ndef replace_blank(str1,char):\n\n### Test\nassert candidate(\"hello people\",\"\"\"@\"\"\")==(\"hello@people\")",
    "timestamp": "2025-10-17T18:53:12.773420",
    "response_time": "1.43",
    "context": "{\"function_name\": \"replace_blank\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 232,
    "solution": "```python\n===START===\ndef larg_nnum(list1, n):\n    # Sort the list in descending order and return the first n elements\n    return sorted(list1, reverse=True)[:n]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n### Signature\ndef larg_nnum(list1,n):\n\n### Test\nassert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])",
    "timestamp": "2025-10-17T18:53:14.228800",
    "response_time": "1.45",
    "context": "{\"function_name\": \"larg_nnum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 233,
    "solution": "```python\n===START===\nimport math\n\ndef lateralsuface_cylinder(r, h):\n    # Lateral surface area of a cylinder = 2 * \u03c0 * r * h\n    return 2 * math.pi * r * h\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cylinder.\n\n### Signature\ndef lateralsuface_cylinder(r,h):\n\n### Test\nassert math.isclose(candidate(10,5), 314.15000000000003, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:53:16.439572",
    "response_time": "2.21",
    "context": "{\"function_name\": \"lateralsuface_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 234,
    "solution": "===START===\ndef volume_cube(l):\n    return l ** 3\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the volume of a cube given its side length.\n\n### Signature\ndef volume_cube(l):\n\n### Test\nassert candidate(3)==27",
    "timestamp": "2025-10-17T18:53:17.358610",
    "response_time": "0.91",
    "context": "{\"function_name\": \"volume_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 235,
    "solution": "```python\n===START===\ndef even_bit_set_number(n):\n    # Initialize a mask with all even bits set\n    mask = 0\n    bit_position = 0\n    \n    # Create a mask with all even bits set\n    while bit_position < n.bit_length() or bit_position < 32:  # Assuming 32-bit numbers\n        if bit_position % 2 == 0:  # Check if the bit position is even\n            mask |= (1 << bit_position)\n        bit_position += 1\n    \n    # Set all even bits of n using the mask\n    return n | mask\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to set all even bits of a given number.\n\n### Signature\ndef even_bit_set_number(n):\n\n### Test\nassert candidate(10) == 10",
    "timestamp": "2025-10-17T18:53:20.522929",
    "response_time": "3.16",
    "context": "{\"function_name\": \"even_bit_set_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 237,
    "solution": "```python\n===START===\nfrom collections import Counter\n\ndef check_occurences(test_list):\n    # Normalize tuples to ensure (a, b) and (b, a) are treated the same\n    normalized_list = [tuple(sorted(t)) for t in test_list]\n    # Count occurrences of each tuple\n    return dict(Counter(normalized_list))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n### Signature\ndef check_occurences(test_list):\n\n### Test\nassert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
    "timestamp": "2025-10-17T18:53:22.882653",
    "response_time": "2.36",
    "context": "{\"function_name\": \"check_occurences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 238,
    "solution": "```python\n===START===\ndef number_of_substrings(str):\n    # The number of non-empty substrings of a string of length n is given by n * (n + 1) / 2\n    n = len(str)\n    return n * (n + 1) // 2\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of non-empty substrings of a given string.\n\n### Signature\ndef number_of_substrings(str):\n\n### Test\nassert candidate(\"abc\") == 6",
    "timestamp": "2025-10-17T18:53:24.356254",
    "response_time": "1.47",
    "context": "{\"function_name\": \"number_of_substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 239,
    "solution": "```python\n===START===\ndef get_total_number_of_sequences(m, n):\n    def count_sequences(current, remaining_length):\n        if remaining_length == 0:\n            return 1\n        total = 0\n        for next_value in range(current * 2, m + 1):\n            total += count_sequences(next_value, remaining_length - 1)\n        return total\n\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, n - 1)\n    \n    return total_sequences\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n### Signature\ndef get_total_number_of_sequences(m,n):\n\n### Test\nassert candidate(10, 4) == 4",
    "timestamp": "2025-10-17T18:53:26.422536",
    "response_time": "2.06",
    "context": "{\"function_name\": \"get_total_number_of_sequences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 240,
    "solution": "```python\n===START===\ndef replace_list(list1, list2):\n    # Replace the last element of list1 with the elements of list2\n    return list1[:-1] + list2\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\n### Signature\ndef replace_list(list1,list2):\n\n### Test\nassert candidate([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
    "timestamp": "2025-10-17T18:53:28.295513",
    "response_time": "1.87",
    "context": "{\"function_name\": \"replace_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 242,
    "solution": "===START===\ndef count_charac(str1):\n    return len(str1)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the total number of characters in a string.\n\n### Signature\ndef count_charac(str1):\n\n### Test\nassert candidate(\"python programming\")==18",
    "timestamp": "2025-10-17T18:53:30.199540",
    "response_time": "1.90",
    "context": "{\"function_name\": \"count_charac\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 244,
    "solution": "```python\n===START===\nimport math\n\ndef next_Perfect_Square(N):\n    # Find the square root of the given number\n    root = math.sqrt(N)\n    # Find the next integer greater than the square root\n    next_root = math.ceil(root)\n    # Return the square of the next integer\n    return next_root ** 2\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the next perfect square greater than a given number.\n\n### Signature\ndef next_Perfect_Square(N):\n\n### Test\nassert candidate(35) == 36",
    "timestamp": "2025-10-17T18:53:32.470117",
    "response_time": "2.27",
    "context": "{\"function_name\": \"next_Perfect_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 245,
    "solution": "```python\n===START===\ndef max_sum(arr):\n    n = len(arr)\n    \n    # Initialize increasing and decreasing sum arrays\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Fill the increasing sum array\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Fill the decreasing sum array\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[j] < arr[i] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_bitonic_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\n### Signature\ndef max_sum(arr):\n\n### Test\nassert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194",
    "timestamp": "2025-10-17T18:53:35.846989",
    "response_time": "3.37",
    "context": "{\"function_name\": \"max_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 246,
    "solution": "```python\n===START===\nimport math\n\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number\")\n    \n    # Initial guess\n    guess = number / 2.0\n    tolerance = 1e-10  # Precision tolerance\n    \n    while True:\n        # Compute a better guess\n        better_guess = (guess + number / guess) / 2.0\n        \n        # Check if the improvement is within the tolerance\n        if abs(better_guess - guess) < tolerance:\n            return better_guess\n        \n        # Update the guess\n        guess = better_guess\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function for computing square roots using the babylonian method.\n\n### Signature\ndef babylonian_squareroot(number):\n\n### Test\nassert math.isclose(candidate(10), 3.162277660168379, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:53:39.105814",
    "response_time": "3.25",
    "context": "{\"function_name\": \"babylonian_squareroot\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 247,
    "solution": "```python\n===START===\ndef lps(str):\n    n = len(str)\n    # Create a 2D array to store the length of palindromic subsequences\n    dp = [[0] * n for _ in range(n)]\n\n    # Strings of length 1 are palindromes of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Build the table. The bottom-up approach is used here.\n    for cl in range(2, n + 1):  # cl is the length of the substring\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    # The length of the longest palindromic subsequence is in dp[0][n-1]\n    return dp[0][n - 1]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n\n### Signature\ndef lps(str):\n\n### Test\nassert candidate(\"TENS FOR TENS\") == 5",
    "timestamp": "2025-10-17T18:53:43.113168",
    "response_time": "4.00",
    "context": "{\"function_name\": \"lps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 248,
    "solution": "```python\n===START===\ndef harmonic_sum(n):\n    if n <= 1:\n        return 0\n    return sum(1 / i for i in range(1, n))\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in an integer n and calculates the harmonic sum of n-1.\n\n### Signature\ndef harmonic_sum(n):\n\n### Test\nassert math.isclose(candidate(7), 2.5928571428571425, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:53:45.119864",
    "response_time": "2.00",
    "context": "{\"function_name\": \"harmonic_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 249,
    "solution": "```python\n===START===\ndef intersection_array(array_nums1, array_nums2):\n    # Use set intersection to find common elements\n    return list(set(array_nums1) & set(array_nums2))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the intersection of two arrays.\n\n### Signature\ndef intersection_array(array_nums1,array_nums2):\n\n### Test\nassert candidate([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
    "timestamp": "2025-10-17T18:53:48.709796",
    "response_time": "3.59",
    "context": "{\"function_name\": \"intersection_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 250,
    "solution": "```python\n===START===\ndef count_X(tup, x):\n    return tup.count(x)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\n### Signature\ndef count_X(tup, x):\n\n### Test\nassert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
    "timestamp": "2025-10-17T18:53:49.722929",
    "response_time": "1.01",
    "context": "{\"function_name\": \"count_X\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 251,
    "solution": "```python\n===START===\ndef insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\n### Signature\ndef insert_element(list,element):\n\n### Test\nassert candidate(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']",
    "timestamp": "2025-10-17T18:53:52.881572",
    "response_time": "3.15",
    "context": "{\"function_name\": \"insert_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 252,
    "solution": "```python\n===START===\nimport cmath\n\ndef convert(numbers):\n    return cmath.polar(numbers)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to convert complex numbers to polar coordinates.\n\n### Signature\ndef convert(numbers):\n\n### Test\nassert candidate(1) == (1.0, 0.0)",
    "timestamp": "2025-10-17T18:53:55.194049",
    "response_time": "2.31",
    "context": "{\"function_name\": \"convert\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 253,
    "solution": "```python\n===START===\ndef count_integer(list1):\n    return sum(1 for item in list1 if isinstance(item, int))\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that returns the number of integer elements in a given list.\n\n### Signature\ndef count_integer(list1):\n\n### Test\nassert candidate([1,2,'abc',1.2]) == 2",
    "timestamp": "2025-10-17T18:53:56.795367",
    "response_time": "1.60",
    "context": "{\"function_name\": \"count_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 255,
    "solution": "```python\n===START===\nfrom itertools import product\n\ndef combinations_colors(l, n):\n    return list(product(l, repeat=n))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\n### Signature\ndef combinations_colors(l, n):\n\n### Test\nassert candidate( [\"Red\",\"Green\",\"Blue\"],1)==[(\"\"\"Red\"\"\",), (\"\"\"Green\"\"\",), (\"\"\"Blue\"\"\",)]",
    "timestamp": "2025-10-17T18:53:57.825763",
    "response_time": "1.03",
    "context": "{\"function_name\": \"combinations_colors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 256,
    "solution": "===START===\nimport math\n\ndef count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    primes = [True] * n\n    primes[0] = primes[1] = False  # 0 and 1 are not prime numbers\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    \n    return sum(primes)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n### Signature\ndef count_Primes_nums(n):\n\n### Test\nassert candidate(5) == 2",
    "timestamp": "2025-10-17T18:54:02.466387",
    "response_time": "4.64",
    "context": "{\"function_name\": \"count_Primes_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 257,
    "solution": "===START===\ndef swap_numbers(a, b):\n    return (b, a)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\n### Signature\ndef swap_numbers(a,b):\n\n### Test\nassert candidate(10,20)==(20,10)",
    "timestamp": "2025-10-17T18:54:04.307777",
    "response_time": "1.84",
    "context": "{\"function_name\": \"swap_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 259,
    "solution": "```python\n# ===START===\ndef maximize_elements(test_tup1, test_tup2):\n    # Use zip to iterate over both tuples simultaneously\n    # For each pair of tuples, take the maximum of corresponding elements\n    return tuple((max(a[0], b[0]), max(a[1], b[1])) for a, b in zip(test_tup1, test_tup2))\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to maximize the given two tuples.\n\n### Signature\ndef maximize_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
    "timestamp": "2025-10-17T18:54:07.258170",
    "response_time": "2.95",
    "context": "{\"function_name\": \"maximize_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 260,
    "solution": "```python\n===START===\ndef newman_prime(n):\n    # List to store the Newman\u2013Shanks\u2013Williams prime numbers\n    nsws_primes = []\n    \n    # Function to calculate the nth NSW number\n    def nsw_number(k):\n        if k == 0 or k == 1:\n            return 1\n        return 2 * nsw_number(k - 1) + nsw_number(k - 2)\n    \n    # Generate NSW numbers and check for primality\n    k = 0\n    while len(nsws_primes) < n:\n        nsw = nsw_number(k)\n        if is_prime(nsw):\n            nsws_primes.append(nsw)\n        k += 1\n    \n    return nsws_primes[-1]\n\n# Helper function to check if a number is prime\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n### Signature\ndef newman_prime(n):\n\n### Test\nassert candidate(3) == 7",
    "timestamp": "2025-10-17T18:54:12.909148",
    "response_time": "5.65",
    "context": "{\"function_name\": \"newman_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 261,
    "solution": "```python\n===START===\ndef division_elements(test_tup1, test_tup2):\n    return tuple(a // b for a, b in zip(test_tup1, test_tup2))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n### Signature\ndef division_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
    "timestamp": "2025-10-17T18:54:14.291512",
    "response_time": "1.38",
    "context": "{\"function_name\": \"division_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 262,
    "solution": "```python\n===START===\ndef split_two_parts(list1, L):\n    # Split the list into two parts\n    return (list1[:L], list1[L:])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\n### Signature\ndef split_two_parts(list1, L):\n\n### Test\nassert candidate([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
    "timestamp": "2025-10-17T18:54:15.632743",
    "response_time": "1.34",
    "context": "{\"function_name\": \"split_two_parts\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 264,
    "solution": "===START===\ndef dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n    The first two human years count as 10.5 dog years each.\n    Each additional human year counts as 4 dog years.\n    \"\"\"\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate a dog's age in dog's years.\n\n### Signature\ndef dog_age(h_age):\n\n### Test\nassert candidate(12)==61",
    "timestamp": "2025-10-17T18:54:19.138105",
    "response_time": "3.50",
    "context": "{\"function_name\": \"dog_age\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 265,
    "solution": "```python\n# ===START===\ndef list_split(S, step):\n    # Create a list of lists for each group based on the step\n    result = [[] for _ in range(step)]\n    \n    # Distribute elements into the respective sublists\n    for i, element in enumerate(S):\n        result[i % step].append(element)\n    \n    return result\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\n### Signature\ndef list_split(S, step):\n\n### Test\nassert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]",
    "timestamp": "2025-10-17T18:54:22.516339",
    "response_time": "3.37",
    "context": "{\"function_name\": \"list_split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 266,
    "solution": "===START===\ndef lateralsurface_cube(l):\n    # Lateral surface area of a cube is 4 times the area of one side\n    return 4 * (l ** 2)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cube given its side length.\n\n### Signature\ndef lateralsurface_cube(l):\n\n### Test\nassert candidate(5)==100",
    "timestamp": "2025-10-17T18:54:23.920871",
    "response_time": "1.40",
    "context": "{\"function_name\": \"lateralsurface_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 267,
    "solution": "```python\n===START===\ndef square_Sum(n):\n    # Initialize the sum\n    sum_of_squares = 0\n    \n    # Loop through the first n odd numbers\n    for i in range(n):\n        odd_number = 2 * i + 1\n        sum_of_squares += odd_number ** 2\n    \n    return sum_of_squares\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n### Signature\ndef square_Sum(n):\n\n### Test\nassert candidate(2) == 10",
    "timestamp": "2025-10-17T18:54:25.897339",
    "response_time": "1.97",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 268,
    "solution": "```python\n===START===\ndef find_star_num(n):\n    # The formula for the nth star number is: 6n(n-1) + 1\n    return 6 * n * (n - 1) + 1\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the n'th star number.\n\n### Signature\ndef find_star_num(n):\n\n### Test\nassert candidate(3) == 37",
    "timestamp": "2025-10-17T18:54:27.429409",
    "response_time": "1.53",
    "context": "{\"function_name\": \"find_star_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 269,
    "solution": "===START===\ndef ascii_value(k):\n    return ord(k)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the ascii value of a character.\n\n### Signature\ndef ascii_value(k):\n\n### Test\nassert candidate('A')==65",
    "timestamp": "2025-10-17T18:54:28.285879",
    "response_time": "0.85",
    "context": "{\"function_name\": \"ascii_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 270,
    "solution": "```python\n===START===\ndef sum_even_and_even_index(arr):\n    # Initialize sum\n    total = 0\n    \n    # Iterate through the list with index\n    for i in range(len(arr)):\n        # Check if the index is even and the value at that index is even\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    \n    return total\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of even numbers at even positions of a list.\n\n### Signature\ndef sum_even_and_even_index(arr):\n\n### Test\nassert candidate([5, 6, 12, 1, 18, 8]) == 30",
    "timestamp": "2025-10-17T18:54:30.502699",
    "response_time": "2.21",
    "context": "{\"function_name\": \"sum_even_and_even_index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 271,
    "solution": "```python\n===START===\ndef even_Power_Sum(n):\n    # Initialize the sum\n    total_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i  # Calculate the ith even number\n        total_sum += even_number ** 5  # Add its fifth power to the sum\n    \n    return total_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n### Signature\ndef even_Power_Sum(n):\n\n### Test\nassert candidate(2) == 1056",
    "timestamp": "2025-10-17T18:54:34.094818",
    "response_time": "3.59",
    "context": "{\"function_name\": \"even_Power_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 272,
    "solution": "```python\n===START===\ndef rear_extract(test_list):\n    return [tup[-1] for tup in test_list]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n### Signature\ndef rear_extract(test_list):\n\n### Test\nassert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
    "timestamp": "2025-10-17T18:54:35.967099",
    "response_time": "1.87",
    "context": "{\"function_name\": \"rear_extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 273,
    "solution": "```python\n===START===\ndef substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n### Signature\ndef substract_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
    "timestamp": "2025-10-17T18:54:37.808736",
    "response_time": "1.84",
    "context": "{\"function_name\": \"substract_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 274,
    "solution": "```python\n===START===\nfrom math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    return sum(comb(n, k) for k in range(0, n + 1, 2))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n### Signature\ndef even_binomial_Coeff_Sum( n):\n\n### Test\nassert candidate(4) == 8",
    "timestamp": "2025-10-17T18:54:39.307384",
    "response_time": "1.49",
    "context": "{\"function_name\": \"even_binomial_Coeff_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 276,
    "solution": "```python\n===START===\nimport math\n\ndef volume_cylinder(r, h):\n    return math.pi * r**2 * h\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n\n### Signature\ndef volume_cylinder(r,h):\n\n### Test\nassert math.isclose(candidate(10,5), 1570.7500000000002, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:54:40.939661",
    "response_time": "1.63",
    "context": "{\"function_name\": \"volume_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 277,
    "solution": "```python\n===START===\ndef dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n### Signature\ndef dict_filter(dict,n):\n\n### Test\nassert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
    "timestamp": "2025-10-17T18:54:42.029607",
    "response_time": "1.08",
    "context": "{\"function_name\": \"dict_filter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 278,
    "solution": "```python\n===START===\ndef count_first_elements(test_tup):\n    # Iterate through the tuple and find the index of the first tuple element\n    for i, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            return i\n    # If no tuple is found, return 0\n    return 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n\n### Signature\ndef count_first_elements(test_tup):\n\n### Test\nassert candidate((1, 5, 7, (4, 6), 10) ) == 3",
    "timestamp": "2025-10-17T18:54:43.586608",
    "response_time": "1.55",
    "context": "{\"function_name\": \"count_first_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 279,
    "solution": "===START===\ndef is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n    \"\"\"\n    return n * (4 * n - 3)\n\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth decagonal number.\n\n### Signature\ndef is_num_decagonal(n):\n\n### Test\nassert candidate(3) == 27",
    "timestamp": "2025-10-17T18:54:45.500881",
    "response_time": "1.91",
    "context": "{\"function_name\": \"is_num_decagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 280,
    "solution": "```python\n===START===\ndef sequential_search(dlist, item):\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n### Signature\ndef sequential_search(dlist, item):\n\n### Test\nassert candidate([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
    "timestamp": "2025-10-17T18:54:46.684205",
    "response_time": "1.18",
    "context": "{\"function_name\": \"sequential_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 281,
    "solution": "```python\n===START===\ndef all_unique(test_list):\n    return len(test_list) == len(set(test_list))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check if the elements of a given list are unique or not.\n\n### Signature\ndef all_unique(test_list):\n\n### Test\nassert candidate([1,2,3]) == True",
    "timestamp": "2025-10-17T18:54:48.216160",
    "response_time": "1.53",
    "context": "{\"function_name\": \"all_unique\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 282,
    "solution": "```python\n===START===\ndef sub_list(nums1, nums2):\n    return [a - b for a, b in zip(nums1, nums2)]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to subtract two lists element-wise.\n\n### Signature\ndef sub_list(nums1,nums2):\n\n### Test\nassert candidate([1, 2, 3],[4,5,6])==[-3,-3,-3]",
    "timestamp": "2025-10-17T18:54:49.616945",
    "response_time": "1.40",
    "context": "{\"function_name\": \"sub_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 283,
    "solution": "```python\n===START===\ndef validate(n):\n    # Convert the number to a string to iterate over its digits\n    str_n = str(n)\n    \n    # Create a dictionary to count the frequency of each digit\n    digit_count = {}\n    for digit in str_n:\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    \n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n### Signature\ndef validate(n):\n\n### Test\nassert candidate(1234) == True",
    "timestamp": "2025-10-17T18:54:52.754496",
    "response_time": "3.13",
    "context": "{\"function_name\": \"validate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 284,
    "solution": "```python\n===START===\ndef check_element(lst, element):\n    return all(item == element for item in lst)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\n### Signature\ndef check_element(list,element):\n\n### Test\nassert candidate([\"green\", \"orange\", \"black\", \"white\"],\"\"\"blue\"\"\")==False",
    "timestamp": "2025-10-17T18:54:54.766321",
    "response_time": "2.01",
    "context": "{\"function_name\": \"check_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 285,
    "solution": "```python\n===START===\nimport re\n\ndef text_match_two_three(text):\n    # Use regex to check for 'a' followed by two or three 'b' characters\n    pattern = r'a(bb|bbb)'\n    return bool(re.search(pattern, text))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n### Signature\ndef text_match_two_three(text):\n\n### Test\nassert candidate(\"ac\")==(False)",
    "timestamp": "2025-10-17T18:54:56.876803",
    "response_time": "2.11",
    "context": "{\"function_name\": \"text_match_two_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 286,
    "solution": "```python\n===START===\ndef max_sub_array_sum_repeated(a, n, k):\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    # Calculate the sum of the array\n    array_sum = sum(a)\n\n    # If k == 1, we just need to find the max subarray sum in the single array\n    if k == 1:\n        return kadane(a)\n\n    # Find the max subarray sum for two concatenated arrays\n    max_prefix_suffix_sum = kadane(a * 2)\n\n    # If the total sum of the array is positive, we can add (k-2) * array_sum\n    if array_sum > 0:\n        return max_prefix_suffix_sum + (k - 2) * array_sum\n    else:\n        return max_prefix_suffix_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n### Signature\ndef max_sub_array_sum_repeated(a, n, k):\n\n### Test\nassert candidate([10, 20, -30, -1], 4, 3) == 30",
    "timestamp": "2025-10-17T18:55:03.679519",
    "response_time": "6.80",
    "context": "{\"function_name\": \"max_sub_array_sum_repeated\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 287,
    "solution": "```python\n===START===\ndef square_Sum(n):\n    # Calculate the sum of squares of the first n even natural numbers\n    return sum((2 * i) ** 2 for i in range(1, n + 1))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n### Signature\ndef square_Sum(n):\n\n### Test\nassert candidate(2) == 20",
    "timestamp": "2025-10-17T18:55:05.459664",
    "response_time": "1.78",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 290,
    "solution": "```python\n===START===\ndef max_length(list1):\n    # Find the maximum length of the lists in list1\n    max_len = max(len(sublist) for sublist in list1)\n    # Find the first list with the maximum length\n    max_list = next(sublist for sublist in list1 if len(sublist) == max_len)\n    return max_len, max_list\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the list of maximum length in a list of lists.\n\n### Signature\ndef max_length(list1):\n\n### Test\nassert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
    "timestamp": "2025-10-17T18:55:09.377162",
    "response_time": "3.91",
    "context": "{\"function_name\": \"max_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 291,
    "solution": "```python\n===START===\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n\n    # Initialize variables for the first two posts\n    same = k  # Ways to paint the first two posts with the same color\n    diff = k * (k - 1)  # Ways to paint the first two posts with different colors\n    total = same + diff  # Total ways to paint the first two posts\n\n    # Iterate for the rest of the posts\n    for i in range(3, n + 1):\n        same = diff  # If the current post has the same color as the previous one\n        diff = total * (k - 1)  # If the current post has a different color\n        total = same + diff  # Update the total ways\n\n    return total\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n### Signature\ndef count_no_of_ways(n, k):\n\n### Test\nassert candidate(2, 4) == 16",
    "timestamp": "2025-10-17T18:55:14.342317",
    "response_time": "4.96",
    "context": "{\"function_name\": \"count_no_of_ways\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 292,
    "solution": "===START===\ndef find(n, m):\n    return n // m\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n### Signature\ndef find(n,m):\n\n### Test\nassert candidate(10,3) == 3",
    "timestamp": "2025-10-17T18:55:16.277948",
    "response_time": "1.93",
    "context": "{\"function_name\": \"find\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 293,
    "solution": "===START===\nimport math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w**2 + h**2)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the third side of a right angled triangle.\n\n### Signature\ndef otherside_rightangle(w,h):\n\n### Test\nassert candidate(7,8)==10.63014581273465",
    "timestamp": "2025-10-17T18:55:17.295870",
    "response_time": "1.01",
    "context": "{\"function_name\": \"otherside_rightangle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 294,
    "solution": "```python\n===START===\ndef max_val(listval):\n    # Filter out only numeric values from the list\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    # Return the maximum value among the numeric values\n    return max(numeric_values) if numeric_values else None\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum value in a given heterogeneous list.\n\n### Signature\ndef max_val(listval):\n\n### Test\nassert candidate(['Python', 3, 2, 4, 5, 'version'])==5",
    "timestamp": "2025-10-17T18:55:19.564498",
    "response_time": "2.26",
    "context": "{\"function_name\": \"max_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 295,
    "solution": "===START===\ndef sum_div(number):\n    # Initialize sum of divisors\n    total = 0\n    # Loop through all numbers from 1 to number-1\n    for i in range(1, number):\n        # Check if i is a divisor of number\n        if number % i == 0:\n            total += i\n    return total\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to return the sum of all divisors of a number.\n\n### Signature\ndef sum_div(number):\n\n### Test\nassert candidate(8)==7",
    "timestamp": "2025-10-17T18:55:22.608017",
    "response_time": "3.04",
    "context": "{\"function_name\": \"sum_div\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 296,
    "solution": "```python\n===START===\ndef get_Inv_Count(arr):\n    def merge_and_count(arr, temp_arr, left, right):\n        if left >= right:\n            return 0\n        \n        mid = (left + right) // 2\n        \n        inv_count = merge_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge(arr, temp_arr, left, mid, right)\n        \n        return inv_count\n    \n    def merge(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        \n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += (mid - i + 1)\n                j += 1\n            k += 1\n        \n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        \n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        \n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        \n        return inv_count\n    \n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_and_count(arr, temp_arr, 0, n - 1)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count inversions in an array.\n\n### Signature\ndef get_Inv_Count(arr):\n\n### Test\nassert candidate([1,20,6,4,5]) == 5",
    "timestamp": "2025-10-17T18:55:27.691036",
    "response_time": "5.08",
    "context": "{\"function_name\": \"get_Inv_Count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 297,
    "solution": "```python\n===START===\ndef flatten_list(list1):\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to flatten a given nested list structure.\n\n### Signature\ndef flatten_list(list1):\n\n### Test\nassert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
    "timestamp": "2025-10-17T18:55:29.474236",
    "response_time": "1.78",
    "context": "{\"function_name\": \"flatten_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 299,
    "solution": "```python\n===START===\nfrom collections import defaultdict\n\ndef max_aggregate(stdata):\n    # Dictionary to store the aggregate scores\n    aggregate_scores = defaultdict(int)\n    \n    # Sum up the scores for each name\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    \n    # Find the name with the maximum aggregate score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\n### Signature\ndef max_aggregate(stdata):\n\n### Test\nassert candidate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
    "timestamp": "2025-10-17T18:55:32.538470",
    "response_time": "3.06",
    "context": "{\"function_name\": \"max_aggregate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 300,
    "solution": "```python\n===START===\nfrom math import comb\n\ndef count_binary_seq(n):\n    # The problem is equivalent to finding the number of ways to split 2n bits\n    # such that the sum of the first n bits equals the sum of the last n bits.\n    # This is achieved by summing over all possible sums (k) from 0 to n,\n    # and calculating the product of combinations for the first and last n bits.\n    \n    total_count = 0\n    for k in range(n + 1):\n        total_count += comb(n, k) ** 2\n    return total_count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n### Signature\ndef count_binary_seq(n):\n\n### Test\nassert math.isclose(candidate(1), 2.0, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:55:36.106866",
    "response_time": "3.56",
    "context": "{\"function_name\": \"count_binary_seq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 301,
    "solution": "```python\n===START===\ndef dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max(dict_depth(value) for value in d.values() if isinstance(value, dict))\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the depth of a dictionary.\n\n### Signature\ndef dict_depth(d):\n\n### Test\nassert candidate({'a':1, 'b': {'c': {'d': {}}}})==4",
    "timestamp": "2025-10-17T18:55:38.369118",
    "response_time": "2.26",
    "context": "{\"function_name\": \"dict_depth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 304,
    "solution": "```python\n===START===\ndef find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    \n    # Perform the rotations\n    for _ in range(rotations):\n        for r in ranges:\n            start, end = r\n            # Rotate the subarray from start to end\n            temp = arr[start:end+1]\n            arr[start:end+1] = [temp[-1]] + temp[:-1]\n    \n    # Return the element at the given index\n    return arr[index]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find element at a given index after number of rotations.\n\n### Signature\ndef find_Element(arr,ranges,rotations,index) :\n\n### Test\nassert candidate([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
    "timestamp": "2025-10-17T18:55:40.601473",
    "response_time": "2.23",
    "context": "{\"function_name\": \"find_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 305,
    "solution": "```python\n===START===\ndef start_withp(words):\n    # Split the input list into individual words\n    all_words = \" \".join(words).split()\n    # Filter words that start with 'p' or 'P'\n    p_words = [word for word in all_words if word.lower().startswith('p')]\n    # Return the first two words that start with 'p' or 'P'\n    return tuple(p_words[:2])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to return two words from a list of words starting with letter 'p'.\n\n### Signature\ndef start_withp(words):\n\n### Test\nassert candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==(\"\"\"Python\"\"\", \"\"\"PHP\"\"\")",
    "timestamp": "2025-10-17T18:55:42.648610",
    "response_time": "2.04",
    "context": "{\"function_name\": \"start_withp\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 306,
    "solution": "```python\n===START===\ndef max_sum_increasing_subseq(a, n, index, k):\n    # Ensure k > index\n    if k <= index:\n        return 0\n\n    # Initialize dp array to store the maximum sum of increasing subsequences\n    dp = [0] * n\n\n    # Fill dp array for the prefix until index\n    for i in range(index + 1):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n\n    # Find the maximum sum of increasing subsequences that include a[k]\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_sum = max(max_sum, dp[i] + a[k])\n\n    return max_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\n### Signature\ndef max_sum_increasing_subseq(a, n, index, k):\n\n### Test\nassert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
    "timestamp": "2025-10-17T18:55:46.614751",
    "response_time": "3.96",
    "context": "{\"function_name\": \"max_sum_increasing_subseq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 307,
    "solution": "```python\n===START===\ndef colon_tuplex(tuplex, m, n):\n    # Convert the tuple to a list to allow modification\n    temp_list = list(tuplex)\n    \n    # Check if the index m is valid\n    if 0 <= m < len(temp_list):\n        # If the element at index m is a list, append n to it\n        if isinstance(temp_list[m], list):\n            temp_list[m].append(n)\n    \n    # Convert the list back to a tuple and return\n    return tuple(temp_list)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get a colon of a tuple.\n\n### Signature\ndef colon_tuplex(tuplex,m,n):\n\n### Test\nassert candidate((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)",
    "timestamp": "2025-10-17T18:55:49.917657",
    "response_time": "3.30",
    "context": "{\"function_name\": \"colon_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 308,
    "solution": "```python\n===START===\nfrom heapq import nlargest\n\ndef large_product(nums1, nums2, N):\n    # Generate all possible products\n    products = [x * y for x in nums1 for y in nums2]\n    # Find the N largest products\n    return nlargest(N, products)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n### Signature\ndef large_product(nums1, nums2, N):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
    "timestamp": "2025-10-17T18:55:51.775673",
    "response_time": "1.85",
    "context": "{\"function_name\": \"large_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 309,
    "solution": "===START===\ndef maximum(a, b):\n    return a if a > b else b\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the maximum of two numbers.\n\n### Signature\ndef maximum(a,b):\n\n### Test\nassert candidate(5,10) == 10",
    "timestamp": "2025-10-17T18:55:53.190045",
    "response_time": "1.41",
    "context": "{\"function_name\": \"maximum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 310,
    "solution": "```python\n===START===\ndef string_to_tuple(str1):\n    return tuple(str1)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a given string to a tuple of characters.\n\n### Signature\ndef string_to_tuple(str1):\n\n### Test\nassert candidate(\"python 3.0\")==(\"\"\"p\"\"\", \"\"\"y\"\"\", \"\"\"t\"\"\", \"\"\"h\"\"\", \"\"\"o\"\"\", \"\"\"n\"\"\", \"\"\"3\"\"\", \"\"\".\"\"\", \"\"\"0\"\"\")",
    "timestamp": "2025-10-17T18:55:54.523561",
    "response_time": "1.33",
    "context": "{\"function_name\": \"string_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 311,
    "solution": "```python\n===START===\ndef set_left_most_unset_bit(n):\n    # Find the number of bits in the binary representation of n\n    num_bits = n.bit_length()\n    \n    # Iterate from the most significant bit to the least significant bit\n    for i in range(num_bits, -1, -1):\n        # Check if the bit at position i is unset\n        if not (n & (1 << i)):\n            # Set the bit at position i\n            n |= (1 << i)\n            break\n    \n    return n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to set the left most unset bit.\n\n### Signature\ndef set_left_most_unset_bit(n):\n\n### Test\nassert candidate(10) == 14",
    "timestamp": "2025-10-17T18:55:57.222806",
    "response_time": "2.69",
    "context": "{\"function_name\": \"set_left_most_unset_bit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 312,
    "solution": "```python\n===START===\nimport math\n\ndef volume_cone(r, h):\n    return (1/3) * math.pi * r**2 * h\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the volume of a cone.\n\n### Signature\ndef volume_cone(r,h):\n\n### Test\nassert math.isclose(candidate(5,12), 314.15926535897927, rel_tol=0.001)",
    "timestamp": "2025-10-17T18:56:00.968657",
    "response_time": "3.74",
    "context": "{\"function_name\": \"volume_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 388,
    "solution": "```python\n===START===\ndef highest_Power_of_2(n):\n    # Start with the highest power of 2 less than or equal to n\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\n### Signature\ndef highest_Power_of_2(n):\n\n### Test\nassert candidate(10) == 8",
    "timestamp": "2025-10-17T18:56:02.314961",
    "response_time": "1.34",
    "context": "{\"function_name\": \"highest_Power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 389,
    "solution": "```python\n===START===\ndef find_lucas(n):\n    # Base cases for Lucas numbers\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    a, b = 2, 1\n    \n    # Compute the nth Lucas number iteratively\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    \n    return b\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the n'th lucas number.\n\n### Signature\ndef find_lucas(n):\n\n### Test\nassert candidate(9) == 76",
    "timestamp": "2025-10-17T18:56:04.899690",
    "response_time": "2.58",
    "context": "{\"function_name\": \"find_lucas\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 390,
    "solution": "```python\n===START===\ndef add_string(list_, string):\n    return [string.format(item) for item in list_]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to apply a given format string to all of the elements in a list.\n\n### Signature\ndef add_string(list_, string):\n\n### Test\nassert candidate([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
    "timestamp": "2025-10-17T18:56:07.119275",
    "response_time": "2.21",
    "context": "{\"function_name\": \"add_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 391,
    "solution": "```python\n# ===START===\ndef convert_list_dictionary(l1, l2, l3):\n    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert more than one list to nested dictionary.\n\n### Signature\ndef convert_list_dictionary(l1, l2, l3):\n\n### Test\nassert candidate([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{\"\"\"S001\"\"\": {\"\"\"Adina Park\"\"\": 85}}, {\"\"\"S002\"\"\": {\"\"\"Leyton Marsh\"\"\": 98}}, {\"\"\"S003\"\"\": {\"\"\"Duncan Boyle\"\"\": 89}}, {\"\"\"S004\"\"\": {\"\"\"Saim Richards\"\"\": 92}}]",
    "timestamp": "2025-10-17T18:56:09.261362",
    "response_time": "2.14",
    "context": "{\"function_name\": \"convert_list_dictionary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 392,
    "solution": "```python\n===START===\ndef get_max_sum(n):\n    memo = {}\n\n    def helper(x):\n        if x in memo:\n            return memo[x]\n        if x == 0:\n            return 0\n        result = max(helper(x // 2) + helper(x // 3) + helper(x // 4) + helper(x // 5), x)\n        memo[x] = result\n        return result\n\n    return helper(n)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n### Signature\ndef get_max_sum (n):\n\n### Test\nassert get_max_sum(60) == 106",
    "timestamp": "2025-10-17T18:56:14.477442",
    "response_time": "5.21",
    "context": "{\"function_name\": \"get_max_sum \"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 393,
    "solution": "```python\n===START===\ndef max_length_list(input_list):\n    if not input_list:\n        return (0, [])\n    \n    max_list = max(input_list, key=len)\n    return (len(max_list), max_list)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the list with maximum length.\n\n### Signature\ndef max_length_list(input_list):\n\n### Test\nassert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
    "timestamp": "2025-10-17T18:56:16.261343",
    "response_time": "1.78",
    "context": "{\"function_name\": \"max_length_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 394,
    "solution": "```python\n===START===\ndef check_distinct(test_tup):\n    # Convert the tuple to a set and compare its length with the tuple\n    return len(test_tup) == len(set(test_tup))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if given tuple contains no duplicates.\n\n### Signature\ndef check_distinct(test_tup):\n\n### Test\nassert candidate((1, 4, 5, 6, 1, 4)) == False",
    "timestamp": "2025-10-17T18:56:18.706702",
    "response_time": "2.44",
    "context": "{\"function_name\": \"check_distinct\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 395,
    "solution": "```python\n===START===\ndef first_non_repeating_character(str1):\n    # Create a dictionary to count occurrences of each character\n    char_count = {}\n    \n    # Count each character in the string\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Find the first character with a count of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the first non-repeated character in a given string.\n\n### Signature\ndef first_non_repeating_character(str1):\n\n### Test\nassert candidate(\"abcabc\") == None",
    "timestamp": "2025-10-17T18:56:21.759755",
    "response_time": "3.05",
    "context": "{\"function_name\": \"first_non_repeating_character\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 396,
    "solution": "```python\n===START===\ndef check_char(string):\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given string starts and ends with the same character or not.\n\n### Signature\ndef check_char(string):\n\n### Test\nassert candidate(\"abba\") == \"Valid\"",
    "timestamp": "2025-10-17T18:56:23.135076",
    "response_time": "1.37",
    "context": "{\"function_name\": \"check_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 397,
    "solution": "```python\n===START===\ndef median_numbers(a, b, c):\n    # Sort the three numbers and return the middle one\n    return sorted([a, b, c])[1]\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the median of three numbers.\n\n### Signature\ndef median_numbers(a,b,c):\n\n### Test\nassert candidate(25,55,65)==55.0",
    "timestamp": "2025-10-17T18:56:25.956234",
    "response_time": "2.82",
    "context": "{\"function_name\": \"median_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 398,
    "solution": "```python\n===START===\ndef sum_of_digits(nums):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n    \n    return sum(digit_sum(num) for num in nums)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to compute the sum of digits of each number of a given list.\n\n### Signature\ndef sum_of_digits(nums):\n\n### Test\nassert candidate([10,2,56])==14",
    "timestamp": "2025-10-17T18:56:27.301129",
    "response_time": "1.34",
    "context": "{\"function_name\": \"sum_of_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 399,
    "solution": "```python\n===START===\ndef bitwise_xor(test_tup1, test_tup2):\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\n### Signature\ndef bitwise_xor(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
    "timestamp": "2025-10-17T18:56:29.195061",
    "response_time": "1.89",
    "context": "{\"function_name\": \"bitwise_xor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 400,
    "solution": "```python\n===START===\ndef extract_freq(test_list):\n    # Use a set to store unique tuples\n    unique_tuples = set()\n    \n    for tup in test_list:\n        # Add the tuple and its reverse to the set\n        unique_tuples.add(tuple(sorted(tup)))\n    \n    # Return the count of unique tuples\n    return len(unique_tuples)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract the number of unique tuples in the given list.\n\n### Signature\ndef extract_freq(test_list):\n\n### Test\nassert candidate([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
    "timestamp": "2025-10-17T18:56:32.039019",
    "response_time": "2.84",
    "context": "{\"function_name\": \"extract_freq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 401,
    "solution": "```python\n# ===START===\ndef add_nested_tuples(test_tup1, test_tup2):\n    # Perform index-wise addition of tuple elements\n    return tuple((a + c, b + d) for (a, b), (c, d) in zip(test_tup1, test_tup2))\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n### Signature\ndef add_nested_tuples(test_tup1, test_tup2):\n\n### Test\nassert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
    "timestamp": "2025-10-17T18:56:33.775431",
    "response_time": "1.73",
    "context": "{\"function_name\": \"add_nested_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 404,
    "solution": "===START===\ndef minimum(a, b):\n    return a if a < b else b\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the minimum of two numbers.\n\n### Signature\ndef minimum(a,b):\n\n### Test\nassert candidate(1,2) == 1",
    "timestamp": "2025-10-17T18:56:34.784843",
    "response_time": "1.00",
    "context": "{\"function_name\": \"minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 405,
    "solution": "```python\n===START===\ndef check_tuplex(tuplex, element):\n    return element in tuplex\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether an element exists within a tuple.\n\n### Signature\ndef check_tuplex(tuplex,tuple1):\n\n### Test\nassert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),\"\"\"r\"\"\")==True",
    "timestamp": "2025-10-17T18:56:36.733032",
    "response_time": "1.94",
    "context": "{\"function_name\": \"check_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 406,
    "solution": "```python\n===START===\ndef find_Parity(x):\n    # A number has odd parity if the number of 1s in its binary representation is odd\n    # Count the number of 1s in the binary representation of x\n    count_of_ones = bin(x).count('1')\n    # Return True if the count is odd, otherwise False\n    return count_of_ones % 2 != 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find whether the parity of a given number is odd.\n\n### Signature\ndef find_Parity(x):\n\n### Test\nassert candidate(12) == False",
    "timestamp": "2025-10-17T18:56:38.770872",
    "response_time": "2.03",
    "context": "{\"function_name\": \"find_Parity\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 407,
    "solution": "```python\n===START===\ndef rearrange_bigger(n):\n    # Convert the number to a list of its digits\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Find the first digit that is smaller than the digit to its right\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, return -1 (no bigger number possible)\n        return -1\n    \n    # Find the smallest digit to the right of digits[i] that is larger than digits[i]\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            # Swap the two digits\n            digits[i], digits[j] = digits[j], digits[i]\n            break\n    \n    # Sort the digits to the right of i in ascending order\n    digits = digits[:i + 1] + sorted(digits[i + 1:])\n    \n    # Convert the list of digits back to an integer\n    return int(''.join(digits))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\n### Signature\ndef rearrange_bigger(n):\n\n### Test\nassert candidate(12)==21",
    "timestamp": "2025-10-17T18:56:50.477768",
    "response_time": "11.70",
    "context": "{\"function_name\": \"rearrange_bigger\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 408,
    "solution": "```python\n===START===\nimport heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2 or k <= 0:\n        return []\n    \n    min_heap = []\n    result = []\n    \n    # Initialize the heap with the first element of nums1 paired with every element of nums2\n    for i in range(min(k, len(nums1))):  # Only need the first k elements from nums1\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n    \n    # Extract the k smallest pairs\n    while k > 0 and min_heap:\n        sum_val, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        k -= 1\n        \n        # If there is a next element in nums2, push the next pair into the heap\n        if j + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    \n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n### Signature\ndef k_smallest_pairs(nums1, nums2, k):\n\n### Test\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
    "timestamp": "2025-10-17T18:56:54.847748",
    "response_time": "4.36",
    "context": "{\"function_name\": \"push\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 409,
    "solution": "```python\n===START===\ndef min_product_tuple(list1):\n    # Calculate the product for each tuple and return the minimum product\n    return min(a * b for a, b in list1)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\n### Signature\ndef min_product_tuple(list1):\n\n### Test\nassert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
    "timestamp": "2025-10-17T18:56:56.416598",
    "response_time": "1.56",
    "context": "{\"function_name\": \"min_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 410,
    "solution": "```python\n===START===\ndef min_val(listval):\n    # Filter out non-numeric values from the list\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    # Return the minimum value among the numeric values\n    return min(numeric_values)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the minimum value in a given heterogeneous list.\n\n### Signature\ndef min_val(listval):\n\n### Test\nassert candidate(['Python', 3, 2, 4, 5, 'version'])==2",
    "timestamp": "2025-10-17T18:56:57.866787",
    "response_time": "1.44",
    "context": "{\"function_name\": \"min_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 411,
    "solution": "```python\n===START===\ndef snake_to_camel(word):\n    # Split the word by underscores\n    parts = word.split('_')\n    # Capitalize the first letter of each part and join them\n    return ''.join(part.capitalize() for part in parts)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert the given snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):\n\n### Test\nassert candidate('android_tv') == 'AndroidTv'",
    "timestamp": "2025-10-17T18:56:59.658094",
    "response_time": "1.78",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 412,
    "solution": "```python\n===START===\ndef remove_odd(l):\n    return [x for x in l if x % 2 == 0]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to remove odd numbers from a given list.\n\n### Signature\ndef remove_odd(l):\n\n### Test\nassert candidate([1,2,3]) == [2]",
    "timestamp": "2025-10-17T18:57:00.961383",
    "response_time": "1.30",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 413,
    "solution": "```python\n===START===\ndef extract_nth_element(list1, n):\n    return [tup[n] for tup in list1]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract the nth element from a given list of tuples.\n\n### Signature\ndef extract_nth_element(list1, n):\n\n### Test\nassert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
    "timestamp": "2025-10-17T18:57:02.628824",
    "response_time": "1.66",
    "context": "{\"function_name\": \"extract_nth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 414,
    "solution": "```python\n===START===\ndef overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\n### Signature\ndef overlapping(list1,list2):\n\n### Test\nassert candidate([1,2,3,4,5],[6,7,8,9]) == False",
    "timestamp": "2025-10-17T18:57:04.225750",
    "response_time": "1.59",
    "context": "{\"function_name\": \"overlapping\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 415,
    "solution": "```python\n===START===\ndef max_Product(arr):\n    if len(arr) < 2:\n        return None  # Not enough elements to form a pair\n    \n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # The two largest numbers will give the maximum product\n    return (arr[0], arr[1])\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find a pair with highest product from a given array of integers.\n\n### Signature\ndef max_Product(arr):\n\n### Test\nassert candidate([1,2,3,4,7,0,8,4]) == (7,8)",
    "timestamp": "2025-10-17T18:57:07.180550",
    "response_time": "2.95",
    "context": "{\"function_name\": \"max_Product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 417,
    "solution": "```python\n===START===\nfrom collections import defaultdict\n\ndef group_tuples(Input):\n    grouped = defaultdict(list)\n    for first, second in Input:\n        grouped[first].append(second)\n    \n    result = []\n    for key, values in grouped.items():\n        result.append((key, *values))\n    \n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find common first element in given list of tuple.\n\n### Signature\ndef group_tuples(Input):\n\n### Test\nassert candidate([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
    "timestamp": "2025-10-17T18:57:09.665235",
    "response_time": "2.48",
    "context": "{\"function_name\": \"group_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 418,
    "solution": "```python\n===START===\ndef Find_Max(lst):\n    # Return the element with the maximum length\n    return max(lst, key=len)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the element of a list having maximum length.\n\n### Signature\ndef Find_Max(lst):\n\n### Test\nassert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
    "timestamp": "2025-10-17T18:57:10.975467",
    "response_time": "1.31",
    "context": "{\"function_name\": \"Find_Max\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 419,
    "solution": "```python\n===START===\ndef round_and_sum(list1):\n    # Round each number in the list\n    rounded_list = [round(num) for num in list1]\n    # Calculate the sum of the rounded numbers\n    total_sum = sum(rounded_list)\n    # Multiply the sum by the length of the list\n    result = total_sum * len(list1)\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\n### Signature\ndef round_and_sum(list1):\n\n### Test\nassert candidate([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
    "timestamp": "2025-10-17T18:57:12.845898",
    "response_time": "1.86",
    "context": "{\"function_name\": \"round_and_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 420,
    "solution": "===START===\ndef cube_Sum(n):\n    # Calculate the sum of cubes of the first n even natural numbers\n    return sum((2 * i) ** 3 for i in range(1, n + 1))\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the cube sum of first n even natural numbers.\n\n### Signature\ndef cube_Sum(n):\n\n### Test\nassert candidate(2) == 72",
    "timestamp": "2025-10-17T18:57:15.343386",
    "response_time": "2.49",
    "context": "{\"function_name\": \"cube_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 421,
    "solution": "```python\n===START===\ndef concatenate_tuple(test_tup):\n    # Convert all elements to string and join them with '-'\n    return '-'.join(map(str, test_tup))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to concatenate each element of tuple by the delimiter.\n\n### Signature\ndef concatenate_tuple(test_tup):\n\n### Test\nassert candidate((\"ID\", \"is\", 4, \"UTS\") ) == \"\"\"ID-is-4-UTS\"\"\"",
    "timestamp": "2025-10-17T18:57:16.892659",
    "response_time": "1.54",
    "context": "{\"function_name\": \"concatenate_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 422,
    "solution": "```python\n===START===\ndef find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average\n    average = sum_of_cubes / n\n    return average\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the average of cubes of first n natural numbers.\n\n### Signature\ndef find_Average_Of_Cube(n):\n\n### Test\nassert candidate(2) == 4.5",
    "timestamp": "2025-10-17T18:57:19.843868",
    "response_time": "2.94",
    "context": "{\"function_name\": \"find_Average_Of_Cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_td",
    "dataset_row_id": 424,
    "solution": "```python\n===START===\ndef extract_rear(test_tuple):\n    # Extract the last character of each string in the tuple\n    return [s[-1] for s in test_tuple]\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract only the rear index element of each string in the given tuple.\n\n### Signature\ndef extract_rear(test_tuple):\n\n### Test\nassert candidate(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
    "timestamp": "2025-10-17T18:57:21.779344",
    "response_time": "1.93",
    "context": "{\"function_name\": \"extract_rear\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 425,
    "solution": "```python\n===START===\ndef count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of sublists containing a particular element.\n\n### Signature\ndef count_element_in_list(list1, x):\n\n### Test\nassert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
    "timestamp": "2025-10-17T18:43:31.082273",
    "response_time": "3.57",
    "context": "{\"function_name\": \"count_element_in_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 426,
    "solution": "```python\n===START===\ndef filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to filter odd numbers.\n\n### Signature\ndef filter_oddnumbers(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
    "timestamp": "2025-10-17T18:43:33.015663",
    "response_time": "1.93",
    "context": "{\"function_name\": \"filter_oddnumbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 427,
    "solution": "```python\n===START===\ndef change_date_format(dt):\n    # Split the input date string into components\n    year, month, day = dt.split('-')\n    # Rearrange and return the date in dd-mm-yyyy format\n    return f\"{day}-{month}-{year}\"\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n### Signature\ndef change_date_format(dt):\n\n### Test\nassert candidate(\"2026-01-02\") == \"\"\"02-01-2026\"\"\"",
    "timestamp": "2025-10-17T18:43:34.705497",
    "response_time": "1.68",
    "context": "{\"function_name\": \"change_date_format\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 428,
    "solution": "```python\n===START===\ndef shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2  # Initialize the gap size\n\n    # Perform a shell sort\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # Perform a gapped insertion sort\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2  # Reduce the gap size\n\n    return my_list\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort the given array by using shell sort.\n\n### Signature\ndef shell_sort(my_list):\n\n### Test\nassert candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
    "timestamp": "2025-10-17T18:43:40.640590",
    "response_time": "5.93",
    "context": "{\"function_name\": \"shell_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 429,
    "solution": "```python\n===START===\ndef and_tuples(test_tup1, test_tup2):\n    # Perform bitwise AND operation elementwise on the tuples\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\n### Signature\ndef and_tuples(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
    "timestamp": "2025-10-17T18:43:42.623429",
    "response_time": "1.98",
    "context": "{\"function_name\": \"and_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 430,
    "solution": "```python\n===START===\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    This function calculates the directrix of a parabola given its coefficients a, b, and c\n    from the standard quadratic equation y = ax^2 + bx + c.\n    \"\"\"\n    # The formula for the directrix of a parabola is y = c - (b^2 + 1)/(4a)\n    directrix = c - (b**2 + 1) / (4 * a)\n    return int(directrix)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the directrix of a parabola.\n\n### Signature\ndef parabola_directrix(a, b, c):\n\n### Test\nassert candidate(5,3,2)==-198",
    "timestamp": "2025-10-17T18:43:46.002673",
    "response_time": "3.38",
    "context": "{\"function_name\": \"parabola_directrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 431,
    "solution": "```python\n===START===\ndef common_element(list1, list2):\n    # Convert one list to a set for faster lookup\n    set1 = set(list1)\n    # Check if any element in list2 exists in set1\n    for element in list2:\n        if element in set1:\n            return True\n    return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes two lists and returns true if they have at least one common element.\n\n### Signature\ndef common_element(list1, list2):\n\n### Test\nassert candidate([1,2,3,4,5], [5,6,7,8,9])==True",
    "timestamp": "2025-10-17T18:43:48.003109",
    "response_time": "2.00",
    "context": "{\"function_name\": \"common_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 432,
    "solution": "===START===\ndef median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium.\n    \n    The median of a trapezium is the line segment that connects the midpoints of the non-parallel sides.\n    Its length is the average of the lengths of the two parallel sides (bases).\n    \n    Parameters:\n    base1 (float): Length of the first base of the trapezium.\n    base2 (float): Length of the second base of the trapezium.\n    height (float): Height of the trapezium (not used in median calculation).\n    \n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n    return (base1 + base2) / 2\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the median length of a trapezium.\n\n### Signature\ndef median_trapezium(base1,base2,height):\n\n### Test\nassert candidate(15,25,35)==20",
    "timestamp": "2025-10-17T18:43:51.860272",
    "response_time": "3.85",
    "context": "{\"function_name\": \"median_trapezium\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 433,
    "solution": "```python\n===START===\ndef check_greater(arr, number):\n    # Check if the number is greater than all elements in the array\n    for element in arr:\n        if number <= element:\n            return False\n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\n### Signature\ndef check_greater(arr, number):\n\n### Test\nassert candidate([1, 2, 3, 4, 5], 4) == False",
    "timestamp": "2025-10-17T18:43:52.930041",
    "response_time": "1.07",
    "context": "{\"function_name\": \"check_greater\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 434,
    "solution": "```python\n===START===\nimport re\n\ndef text_match_one(text):\n    # Check if the string matches the pattern 'a' followed by one or more 'b's\n    pattern = r'^ab+$'\n    return bool(re.match(pattern, text))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by one or more b's.\n\n### Signature\ndef text_match_one(text):\n\n### Test\nassert candidate(\"ac\")==False",
    "timestamp": "2025-10-17T18:43:55.349859",
    "response_time": "2.42",
    "context": "{\"function_name\": \"text_match_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 435,
    "solution": "===START===\ndef last_Digit(n):\n    return abs(n) % 10\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the last digit of a given number.\n\n### Signature\ndef last_Digit(n) :\n\n### Test\nassert candidate(123) == 3",
    "timestamp": "2025-10-17T18:43:56.466476",
    "response_time": "1.11",
    "context": "{\"function_name\": \"last_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 436,
    "solution": "===START===\ndef neg_nos(list1):\n    return [num for num in list1 if num < 0]\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to return the negative numbers in a list.\n\n### Signature\ndef neg_nos(list1):\n\n### Test\nassert candidate([-1,4,5,-6]) == [-1,-6]",
    "timestamp": "2025-10-17T18:43:57.595974",
    "response_time": "1.13",
    "context": "{\"function_name\": \"neg_nos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 437,
    "solution": "===START===\ndef remove_odd(str1):\n    return ''.join([char for i, char in enumerate(str1) if i % 2 != 0])\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove odd characters in a string.\n\n### Signature\ndef remove_odd(str1):\n\n### Test\nassert candidate(\"python\")==(\"yhn\")",
    "timestamp": "2025-10-17T18:43:59.436364",
    "response_time": "1.84",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 438,
    "solution": "```python\n===START===\ndef count_bidirectional(test_list):\n    # Create a set to store unique bidirectional pairs\n    seen_pairs = set()\n    count = 0\n\n    for pair in test_list:\n        # Create the reverse of the current pair\n        reverse_pair = (pair[1], pair[0])\n        \n        # Check if the reverse pair is already in the set\n        if reverse_pair in seen_pairs:\n            count += 1\n        else:\n            # Add the current pair to the set\n            seen_pairs.add(pair)\n    \n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count bidirectional tuple pairs.\n\n### Signature\ndef count_bidirectional(test_list):\n\n### Test\nassert candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3",
    "timestamp": "2025-10-17T18:44:02.068456",
    "response_time": "2.63",
    "context": "{\"function_name\": \"count_bidirectional\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 439,
    "solution": "===START===\ndef multiple_to_single(L):\n    # Convert each integer in the list to a string, join them, and convert back to an integer\n    return int(''.join(map(str, L)))\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to join a list of multiple integers into a single integer.\n\n### Signature\ndef multiple_to_single(L):\n\n### Test\nassert candidate([11, 33, 50])==113350",
    "timestamp": "2025-10-17T18:44:03.271722",
    "response_time": "1.20",
    "context": "{\"function_name\": \"multiple_to_single\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 440,
    "solution": "```python\n===START===\nimport re\n\ndef find_adverb_position(text):\n    # Regular expression to find adverbs ending with 'ly'\n    match = re.search(r'\\b(\\w+ly)\\b', text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group(1)\n        return (start, end, adverb)\n    return None\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the first adverb and their positions in a given sentence.\n\n### Signature\ndef find_adverb_position(text):\n\n### Test\nassert candidate(\"clearly!! we can see the sky\")==(0, 7, \"\"\"clearly\"\"\")",
    "timestamp": "2025-10-17T18:44:05.094088",
    "response_time": "1.82",
    "context": "{\"function_name\": \"find_adverb_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 441,
    "solution": "===START===\ndef surfacearea_cube(l):\n    # Surface area of a cube is given by 6 * (side length)^2\n    return 6 * (l ** 2)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cube of a given size.\n\n### Signature\ndef surfacearea_cube(l):\n\n### Test\nassert candidate(5)==150",
    "timestamp": "2025-10-17T18:44:06.442300",
    "response_time": "1.35",
    "context": "{\"function_name\": \"surfacearea_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 442,
    "solution": "```python\n===START===\ndef positive_count(nums):\n    if not nums:\n        return 0  # Handle empty list case\n    positive_numbers = [num for num in nums if num > 0]\n    return len(positive_numbers) / len(nums)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the ration of positive numbers in an array of integers.\n\n### Signature\ndef positive_count(nums):\n\n### Test\nassert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
    "timestamp": "2025-10-17T18:44:07.874133",
    "response_time": "1.43",
    "context": "{\"function_name\": \"positive_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 443,
    "solution": "```python\n===START===\ndef largest_neg(list1):\n    # Filter out negative numbers from the list\n    negative_numbers = [num for num in list1 if num < 0]\n    # Return the largest negative number, or None if no negative numbers exist\n    return max(negative_numbers) if negative_numbers else None\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the largest negative number from the given list.\n\n### Signature\ndef largest_neg(list1):\n\n### Test\nassert candidate([1,2,3,-4,-6]) == -6",
    "timestamp": "2025-10-17T18:44:10.986860",
    "response_time": "3.11",
    "context": "{\"function_name\": \"largest_neg\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 444,
    "solution": "```python\n===START===\ndef trim_tuple(test_list, K):\n    # Trimming each tuple by K elements from the start and end\n    trimmed_list = [tup[K:-K] if K < len(tup) // 2 else () for tup in test_list]\n    return str(trimmed_list)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to trim each tuple by k in the given tuple list.\n\n### Signature\ndef trim_tuple(test_list, K):\n\n### Test\nassert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
    "timestamp": "2025-10-17T18:44:13.157826",
    "response_time": "2.17",
    "context": "{\"function_name\": \"trim_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 445,
    "solution": "```python\n# ===START===\ndef index_multiplication(test_tup1, test_tup2):\n    # Perform index-wise multiplication of tuple elements\n    return tuple((a * c, b * d) for (a, b), (c, d) in zip(test_tup1, test_tup2))\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n### Signature\ndef index_multiplication(test_tup1, test_tup2):\n\n### Test\nassert candidate(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
    "timestamp": "2025-10-17T18:44:16.073335",
    "response_time": "2.91",
    "context": "{\"function_name\": \"index_multiplication\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 446,
    "solution": "```python\n===START===\ndef count_Occurrence(tup, lst):\n    return sum(tup.count(item) for item in lst)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the occurence of all elements of list in a tuple.\n\n### Signature\ndef count_Occurrence(tup, lst):\n\n### Test\nassert candidate(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
    "timestamp": "2025-10-17T18:44:17.499778",
    "response_time": "1.42",
    "context": "{\"function_name\": \"count_Occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 447,
    "solution": "```python\n===START===\ndef cube_nums(nums):\n    return [x**3 for x in nums]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find cubes of individual elements in a list.\n\n### Signature\ndef cube_nums(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
    "timestamp": "2025-10-17T18:44:18.445287",
    "response_time": "0.94",
    "context": "{\"function_name\": \"cube_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 448,
    "solution": "```python\n===START===\ndef cal_sum(n):\n    # Function to calculate the sum of Perrin numbers up to the nth term\n    if n < 0:\n        return 0\n\n    # Initialize the first three Perrin numbers\n    perrin = [3, 0, 2]\n    sum_perrin = sum(perrin[:n])  # Sum of the first n terms\n\n    # Generate the rest of the Perrin numbers up to the nth term\n    for i in range(3, n):\n        next_perrin = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_perrin)\n        sum_perrin += next_perrin\n\n    return sum_perrin\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the sum of perrin numbers.\n\n### Signature\ndef cal_sum(n):\n\n### Test\nassert candidate(9) == 49",
    "timestamp": "2025-10-17T18:44:22.757207",
    "response_time": "4.31",
    "context": "{\"function_name\": \"cal_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 450,
    "solution": "```python\n===START===\ndef extract_string(str_list, l):\n    return [s for s in str_list if len(s) == l]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract specified size of strings from a given list of string values.\n\n### Signature\ndef extract_string(str, l):\n\n### Test\nassert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
    "timestamp": "2025-10-17T18:44:23.780674",
    "response_time": "1.02",
    "context": "{\"function_name\": \"extract_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 451,
    "solution": "```python\n===START===\ndef remove_whitespaces(text1):\n    return ''.join(text1.split())\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from the given string.\n\n### Signature\ndef remove_whitespaces(text1):\n\n### Test\nassert candidate(' Google    Flutter ') == 'GoogleFlutter'",
    "timestamp": "2025-10-17T18:44:26.168762",
    "response_time": "2.39",
    "context": "{\"function_name\": \"remove_whitespaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 452,
    "solution": "```python\n===START===\ndef loss_amount(actual_cost, sale_amount):\n    # Calculate the loss amount\n    loss = actual_cost - sale_amount\n    # Return the loss amount if there is a loss, otherwise return 0\n    return loss if loss > 0 else 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n### Signature\ndef loss_amount(actual_cost,sale_amount):\n\n### Test\nassert candidate(1500,1200)==0",
    "timestamp": "2025-10-17T18:44:27.543424",
    "response_time": "1.37",
    "context": "{\"function_name\": \"loss_amount\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 453,
    "solution": "```python\n===START===\ndef sumofFactors(n):\n    # Initialize sum of even factors\n    sum_even_factors = 0\n    \n    # Iterate through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is a factor of n and is even\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    \n    return sum_even_factors\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of even factors of a number.\n\n### Signature\ndef sumofFactors(n) :\n\n### Test\nassert candidate(18) == 26",
    "timestamp": "2025-10-17T18:44:30.087744",
    "response_time": "2.54",
    "context": "{\"function_name\": \"sumofFactors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 454,
    "solution": "```python\n===START===\nimport re\n\ndef text_match_wordz(text):\n    # Check if the text contains a word with 'z'\n    return bool(re.search(r'\\b\\w*z\\w*\\b', text))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a word containing 'z'.\n\n### Signature\ndef text_match_wordz(text):\n\n### Test\nassert candidate(\"pythonz.\")==True",
    "timestamp": "2025-10-17T18:44:31.414182",
    "response_time": "1.32",
    "context": "{\"function_name\": \"text_match_wordz\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 455,
    "solution": "```python\n===START===\ndef check_monthnumb_number(monthnum2):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    # Check if the given month number is in the list\n    return monthnum2 in months_with_31_days\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 31 days or not.\n\n### Signature\ndef check_monthnumb_number(monthnum2):\n\n### Test\nassert candidate(5)==True",
    "timestamp": "2025-10-17T18:44:33.175845",
    "response_time": "1.76",
    "context": "{\"function_name\": \"check_monthnumb_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 456,
    "solution": "```python\n# ===START===\ndef reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to reverse each string in a given list of string values.\n\n### Signature\ndef reverse_string_list(stringlist):\n\n### Test\nassert candidate(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
    "timestamp": "2025-10-17T18:44:34.597499",
    "response_time": "1.42",
    "context": "{\"function_name\": \"reverse_string_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 457,
    "solution": "```python\n===START===\ndef Find_Min(lst):\n    # Initialize the minimum length to a very large number\n    min_length = float('inf')\n    # Initialize the result to None\n    result = None\n    \n    # Iterate through each sublist in the list\n    for sublist in lst:\n        # Check if the current sublist's length is less than the minimum length\n        if len(sublist) < min_length:\n            # Update the minimum length and result\n            min_length = len(sublist)\n            result = sublist\n    \n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sublist having minimum length.\n\n### Signature\ndef Find_Min(lst):\n\n### Test\nassert candidate([[1],[1,2],[1,2,3]]) == [1]",
    "timestamp": "2025-10-17T18:44:37.314078",
    "response_time": "2.71",
    "context": "{\"function_name\": \"Find_Min\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 458,
    "solution": "===START===\ndef rectangle_area(l, b):\n    return l * b\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the area of a rectangle.\n\n### Signature\ndef rectangle_area(l,b):\n\n### Test\nassert candidate(10,20)==200",
    "timestamp": "2025-10-17T18:44:38.364245",
    "response_time": "1.05",
    "context": "{\"function_name\": \"rectangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 459,
    "solution": "```python\n===START===\ndef remove_uppercase(str1):\n    result = \"\"\n    temp = \"\"\n    for char in str1:\n        if char.isupper():\n            temp += char\n        else:\n            if temp:\n                temp = \"\"\n            result += char\n    return result\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove uppercase substrings from a given string.\n\n### Signature\ndef remove_uppercase(str1):\n\n### Test\nassert candidate('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
    "timestamp": "2025-10-17T18:44:40.440306",
    "response_time": "2.07",
    "context": "{\"function_name\": \"remove_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 460,
    "solution": "```python\n===START===\ndef Extract(lst):\n    return [sublist[0] for sublist in lst]\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to get the first element of each sublist.\n\n### Signature\ndef Extract(lst):\n\n### Test\nassert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
    "timestamp": "2025-10-17T18:44:41.599853",
    "response_time": "1.16",
    "context": "{\"function_name\": \"Extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 461,
    "solution": "```python\n===START===\ndef upper_ctr(str):\n    return sum(1 for char in str if char.isupper())\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the upper case characters in a given string.\n\n### Signature\ndef upper_ctr(str):\n\n### Test\nassert candidate('PYthon') == 1",
    "timestamp": "2025-10-17T18:44:42.543451",
    "response_time": "0.94",
    "context": "{\"function_name\": \"upper_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 462,
    "solution": "```python\n===START===\nfrom itertools import combinations\n\ndef combinations_list(list1):\n    result = []\n    for r in range(len(list1) + 1):\n        for combo in combinations(list1, r):\n            result.append(list(combo))\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find all possible combinations of the elements of a given list.\n\n### Signature\ndef combinations_list(list1):\n\n### Test\nassert candidate(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
    "timestamp": "2025-10-17T18:44:43.720516",
    "response_time": "1.17",
    "context": "{\"function_name\": \"combinations_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 463,
    "solution": "```python\n===START===\ndef max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum product subarray of the given array.\n\n### Signature\ndef max_subarray_product(arr):\n\n### Test\nassert candidate([1, -2, -3, 0, 7, -8, -2]) == 112",
    "timestamp": "2025-10-17T18:44:46.089869",
    "response_time": "2.37",
    "context": "{\"function_name\": \"max_subarray_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 464,
    "solution": "```python\n===START===\ndef check_value(dict, n):\n    # Check if all values in the dictionary are the same as n\n    return all(value == n for value in dict.values())\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if all values are same in a dictionary.\n\n### Signature\ndef check_value(dict, n):\n\n### Test\nassert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
    "timestamp": "2025-10-17T18:44:47.395189",
    "response_time": "1.30",
    "context": "{\"function_name\": \"check_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 465,
    "solution": "```python\n# ===START===\ndef drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None}\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to drop empty items from a given dictionary.\n\n### Signature\ndef drop_empty(dict1):\n\n### Test\nassert candidate({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
    "timestamp": "2025-10-17T18:44:48.529376",
    "response_time": "1.13",
    "context": "{\"function_name\": \"drop_empty\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 468,
    "solution": "```python\n===START===\ndef max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize dp array to store the maximum product for each index\n    dp = arr[:]\n    \n    # Iterate through the array to calculate the maximum product for each index\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    \n    # Return the maximum value in dp array\n    return max(dp)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n### Signature\ndef max_product(arr):\n\n### Test\nassert candidate([3, 100, 4, 5, 150, 6]) == 3000",
    "timestamp": "2025-10-17T18:44:50.869878",
    "response_time": "2.34",
    "context": "{\"function_name\": \"max_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 470,
    "solution": "```python\n===START===\ndef add_pairwise(test_tup):\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n### Signature\ndef add_pairwise(test_tup):\n\n### Test\nassert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
    "timestamp": "2025-10-17T18:44:52.992452",
    "response_time": "2.12",
    "context": "{\"function_name\": \"add_pairwise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 471,
    "solution": "```python\n===START===\ndef find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n  # Take modulo n at each step to prevent overflow\n    return product\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the product of the array multiplication modulo n.\n\n### Signature\ndef find_remainder(arr, n):\n\n### Test\nassert candidate([ 100, 10, 5, 25, 35, 14 ],11) ==9",
    "timestamp": "2025-10-17T18:44:54.982481",
    "response_time": "1.99",
    "context": "{\"function_name\": \"find_remainder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 472,
    "solution": "```python\n===START===\ndef check_Consecutive(l):\n    if not l:\n        return False\n    sorted_list = sorted(l)\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i] + 1 != sorted_list[i + 1]:\n            return False\n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\n### Signature\ndef check_Consecutive(l):\n\n### Test\nassert candidate([1,2,3,4,5]) == True",
    "timestamp": "2025-10-17T18:44:56.243512",
    "response_time": "1.26",
    "context": "{\"function_name\": \"check_Consecutive\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 473,
    "solution": "```python\n===START===\ndef tuple_intersection(test_list1, test_list2):\n    # Convert tuples in both lists to sets of frozensets to handle order-independence\n    set1 = {frozenset(t) for t in test_list1}\n    set2 = {frozenset(t) for t in test_list2}\n    \n    # Find the intersection of the two sets\n    intersection = set1 & set2\n    \n    # Convert frozensets back to tuples\n    result = {tuple(sorted(t)) for t in intersection}\n    \n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n### Signature\ndef tuple_intersection(test_list1, test_list2):\n\n### Test\nassert candidate([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
    "timestamp": "2025-10-17T18:44:59.215416",
    "response_time": "2.97",
    "context": "{\"function_name\": \"tuple_intersection\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 474,
    "solution": "```python\n===START===\ndef replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to replace characters in a string.\n\n### Signature\ndef replace_char(str1,ch,newch):\n\n### Test\nassert candidate(\"polygon\",\"\"\"y\"\"\",\"\"\"l\"\"\")==(\"pollgon\")",
    "timestamp": "2025-10-17T18:45:00.222883",
    "response_time": "1.00",
    "context": "{\"function_name\": \"replace_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 475,
    "solution": "```python\n===START===\ndef sort_counter(dict1):\n    # Sort the dictionary by value in descending order and return as a list of tuples\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a dictionary by value.\n\n### Signature\ndef sort_counter(dict1):\n\n### Test\nassert candidate({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
    "timestamp": "2025-10-17T18:45:01.655364",
    "response_time": "1.43",
    "context": "{\"function_name\": \"sort_counter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 476,
    "solution": "```python\n===START===\ndef big_sum(nums):\n    if not nums:\n        return 0\n    return max(nums) + min(nums)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\n### Signature\ndef big_sum(nums):\n\n### Test\nassert candidate([1,2,3]) == 4",
    "timestamp": "2025-10-17T18:45:02.567565",
    "response_time": "0.91",
    "context": "{\"function_name\": \"big_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 477,
    "solution": "```python\n===START===\ndef is_lower(string):\n    return string.lower()\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to convert the given string to lower case.\n\n### Signature\ndef is_lower(string):\n\n### Test\nassert candidate(\"InValid\") == \"invalid\"",
    "timestamp": "2025-10-17T18:45:04.308446",
    "response_time": "1.74",
    "context": "{\"function_name\": \"is_lower\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 478,
    "solution": "```python\n===START===\ndef remove_lowercase(str1):\n    result = ''.join([char for char in str1 if not char.islower()])\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove lowercase substrings from a given string.\n\n### Signature\ndef remove_lowercase(str1):\n\n### Test\nassert candidate(\"PYTHon\")==(\"\"\"PYTH\"\"\")",
    "timestamp": "2025-10-17T18:45:05.705145",
    "response_time": "1.39",
    "context": "{\"function_name\": \"remove_lowercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 479,
    "solution": "```python\n===START===\ndef first_Digit(n):\n    # Convert the number to a string to extract the first character\n    # Use abs() to handle negative numbers\n    return int(str(abs(n))[0])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the first digit of a given number.\n\n### Signature\ndef first_Digit(n) :\n\n### Test\nassert candidate(123) == 1",
    "timestamp": "2025-10-17T18:45:07.181045",
    "response_time": "1.47",
    "context": "{\"function_name\": \"first_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 554,
    "solution": "```python\n===START===\ndef Split(lst):\n    return [x for x in lst if x % 2 != 0]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and only returns the odd ones.\n\n### Signature\ndef Split(list):\n\n### Test\nassert candidate([1,2,3,4,5,6]) == [1,3,5]",
    "timestamp": "2025-10-17T18:45:08.426461",
    "response_time": "1.24",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 555,
    "solution": "```python\n===START===\ndef difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n + 1))\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n + 1))\n    \n    # Return the difference\n    return sum_of_cubes - sum_of_numbers\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n### Signature\ndef difference(n) :\n\n### Test\nassert candidate(3) == 30",
    "timestamp": "2025-10-17T18:45:10.534235",
    "response_time": "2.10",
    "context": "{\"function_name\": \"difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 556,
    "solution": "```python\n===START===\ndef find_Odd_Pair(A, N):\n    # Count of even and odd numbers in the array\n    odd_count = sum(1 for x in A if x % 2 != 0)\n    even_count = N - odd_count\n    \n    # XOR of an odd and an even number is always odd\n    # So, the number of such pairs is odd_count * even_count\n    return odd_count * even_count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose xor value is odd.\n\n### Signature\ndef find_Odd_Pair(A,N) :\n\n### Test\nassert candidate([5,4,7,2,1],5) == 6",
    "timestamp": "2025-10-17T18:45:18.137445",
    "response_time": "7.60",
    "context": "{\"function_name\": \"find_Odd_Pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 557,
    "solution": "```python\n===START===\ndef toggle_string(string):\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to toggle the case of all characters in a string.\n\n### Signature\ndef toggle_string(string):\n\n### Test\nassert candidate(\"Python\")==(\"pYTHON\")",
    "timestamp": "2025-10-17T18:45:19.179761",
    "response_time": "1.04",
    "context": "{\"function_name\": \"toggle_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 558,
    "solution": "```python\n===START===\ndef digit_distance_nums(n1, n2):\n    # Convert both numbers to strings to process digit by digit\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # Pad the shorter number with leading zeros to make them the same length\n    max_len = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_len)\n    str_n2 = str_n2.zfill(max_len)\n    \n    # Calculate the sum of per-digit differences\n    total_distance = 0\n    for digit1, digit2 in zip(str_n1, str_n2):\n        total_distance += abs(int(digit1) - int(digit2))\n    \n    return total_distance\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of the per-digit difference between two integers.\n\n### Signature\ndef digit_distance_nums(n1, n2):\n\n### Test\nassert candidate(1,2) == 1",
    "timestamp": "2025-10-17T18:45:23.501979",
    "response_time": "4.32",
    "context": "{\"function_name\": \"digit_distance_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 559,
    "solution": "```python\n===START===\ndef max_sub_array_sum(a, size):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n\n### Signature\ndef max_sub_array_sum(a, size):\n\n### Test\nassert candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
    "timestamp": "2025-10-17T18:45:25.074504",
    "response_time": "1.57",
    "context": "{\"function_name\": \"max_sub_array_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 560,
    "solution": "```python\n===START===\ndef union_elements(test_tup1, test_tup2):\n    # Combine the tuples into a set to remove duplicates\n    union_set = set(test_tup1).union(set(test_tup2))\n    # Convert the set back to a sorted tuple\n    return tuple(sorted(union_set))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n\n### Signature\ndef union_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
    "timestamp": "2025-10-17T18:45:29.496673",
    "response_time": "4.42",
    "context": "{\"function_name\": \"union_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 562,
    "solution": "```python\n===START===\ndef Find_Max_Length(lst):\n    # Find the length of the longest sublist\n    return max(len(sublist) for sublist in lst)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest sublists.\n\n### Signature\ndef Find_Max_Length(lst):\n\n### Test\nassert candidate([[1],[1,4],[5,6,7,8]]) == 4",
    "timestamp": "2025-10-17T18:45:32.053436",
    "response_time": "2.55",
    "context": "{\"function_name\": \"Find_Max_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 563,
    "solution": "```python\n===START===\nimport re\n\ndef extract_values(text):\n    return re.findall(r'\"(.*?)\"', text)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks from a string.\n\n### Signature\ndef extract_values(text):\n\n### Test\nassert extract_values(\"Python\", \"PHP\", \"Java\") == [\"Python\", \"PHP\", \"Java\"]",
    "timestamp": "2025-10-17T18:45:33.102675",
    "response_time": "1.05",
    "context": "{\"function_name\": \"extract_values\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 564,
    "solution": "```python\n===START===\ndef count_Pairs(arr, n):\n    # Create a dictionary to count occurrences of each number\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Calculate the total number of pairs\n    total_pairs = n * (n - 1) // 2\n\n    # Subtract the pairs where both elements are equal\n    for count in freq.values():\n        total_pairs -= count * (count - 1) // 2\n\n    return total_pairs\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n### Signature\ndef count_Pairs(arr,n):\n\n### Test\nassert candidate([1,2,1],3) == 2",
    "timestamp": "2025-10-17T18:45:36.866262",
    "response_time": "3.76",
    "context": "{\"function_name\": \"count_Pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 565,
    "solution": "```python\n===START===\ndef split(word):\n    return list(word)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to split a string into characters.\n\n### Signature\ndef split(word):\n\n### Test\nassert candidate('python') == ['p','y','t','h','o','n']",
    "timestamp": "2025-10-17T18:45:38.440193",
    "response_time": "1.57",
    "context": "{\"function_name\": \"split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 566,
    "solution": "===START===\ndef sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get the sum of the digits of a non-negative integer.\n\n### Signature\ndef sum_digits(n):\n\n### Test\nassert candidate(345)==12",
    "timestamp": "2025-10-17T18:45:39.364860",
    "response_time": "0.92",
    "context": "{\"function_name\": \"sum_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 567,
    "solution": "```python\n===START===\ndef issort_list(list1):\n    return list1 == sorted(list1)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether a specified list is sorted or not.\n\n### Signature\ndef issort_list(list1):\n\n### Test\nassert candidate([1,2,4,6,8,10,12,14,16,17])==True",
    "timestamp": "2025-10-17T18:45:40.975830",
    "response_time": "1.61",
    "context": "{\"function_name\": \"issort_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 568,
    "solution": "===START===\ndef empty_list(length):\n    return [{} for _ in range(length)]\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to create a list of N empty dictionaries.\n\n### Signature\ndef empty_list(length):\n\n### Test\nassert candidate(5)==[{},{},{},{},{}]",
    "timestamp": "2025-10-17T18:45:41.932202",
    "response_time": "0.95",
    "context": "{\"function_name\": \"empty_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 569,
    "solution": "```python\n===START===\ndef sort_sublists(list1):\n    return [sorted(sublist) for sublist in list1]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(list1):\n\n### Test\nassert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
    "timestamp": "2025-10-17T18:45:43.713014",
    "response_time": "1.78",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 572,
    "solution": "```python\n===START===\ndef two_unique_nums(nums):\n    # Create a dictionary to count occurrences of each number\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    \n    # Filter numbers that appear only once\n    unique_nums = [num for num in nums if count[num] == 1]\n    \n    return unique_nums\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to remove duplicate numbers from a given number of lists.\n\n### Signature\ndef two_unique_nums(nums):\n\n### Test\nassert candidate([1,2,3,2,3,4,5]) == [1, 4, 5]",
    "timestamp": "2025-10-17T18:45:46.509894",
    "response_time": "2.79",
    "context": "{\"function_name\": \"two_unique_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 573,
    "solution": "```python\n===START===\ndef unique_product(list_data):\n    unique_numbers = set(list_data)  # Remove duplicates by converting to a set\n    product = 1\n    for num in unique_numbers:\n        product *= num  # Calculate the product of unique numbers\n    return product\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to calculate the product of the unique numbers in a given list.\n\n### Signature\ndef unique_product(list_data):\n\n### Test\nassert candidate([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
    "timestamp": "2025-10-17T18:45:47.868046",
    "response_time": "1.35",
    "context": "{\"function_name\": \"unique_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 574,
    "solution": "===START===\nimport math\n\ndef surfacearea_cylinder(r, h):\n    # Calculate the surface area of a cylinder\n    # Surface Area = 2 * \u03c0 * r * h + 2 * \u03c0 * r^2\n    lateral_area = 2 * math.pi * r * h\n    top_and_bottom_area = 2 * math.pi * r**2\n    return round(lateral_area + top_and_bottom_area, 2)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cylinder.\n\n### Signature\ndef surfacearea_cylinder(r,h):\n\n### Test\nassert candidate(10,5)==942.45",
    "timestamp": "2025-10-17T18:45:50.981813",
    "response_time": "3.11",
    "context": "{\"function_name\": \"surfacearea_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 576,
    "solution": "```python\n===START===\ndef is_Sub_Array(A, B):\n    # Check if B is a sublist of A\n    n = len(A)\n    m = len(B)\n    \n    # If B is empty, it is a sublist of A\n    if m == 0:\n        return True\n    \n    # If B is longer than A, it cannot be a sublist\n    if m > n:\n        return False\n    \n    # Iterate through A to find if B is a sublist\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    \n    return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether a list is sublist of another or not.\n\n### Signature\ndef is_Sub_Array(A,B):\n\n### Test\nassert candidate([1,4,3,5],[1,2]) == False",
    "timestamp": "2025-10-17T18:45:54.562926",
    "response_time": "3.58",
    "context": "{\"function_name\": \"is_Sub_Array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 577,
    "solution": "```python\n===START===\ndef last_Digit_Factorial(n):\n    # If n is 0 or 1, the factorial is 1, and the last digit is also 1\n    if n == 0 or n == 1:\n        return 1\n    \n    # If n >= 5, the factorial will always have a trailing zero\n    if n >= 5:\n        return 0\n    \n    # Calculate factorial for n < 5 and return the last digit\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    \n    return factorial % 10\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the last digit in factorial of a given number.\n\n### Signature\ndef last_Digit_Factorial(n):\n\n### Test\nassert candidate(4) == 4",
    "timestamp": "2025-10-17T18:45:58.146756",
    "response_time": "3.58",
    "context": "{\"function_name\": \"last_Digit_Factorial\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 578,
    "solution": "```python\n# ===START===\ndef interleave_lists(list1, list2, list3):\n    interleaved = []\n    for a, b, c in zip(list1, list2, list3):\n        interleaved.extend([a, b, c])\n    return interleaved\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to interleave 3 lists of the same length into a single flat list.\n\n### Signature\ndef interleave_lists(list1,list2,list3):\n\n### Test\nassert candidate([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
    "timestamp": "2025-10-17T18:46:00.493528",
    "response_time": "2.34",
    "context": "{\"function_name\": \"interleave_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 579,
    "solution": "```python\n===START===\ndef find_dissimilar(test_tup1, test_tup2):\n    # Convert tuples to sets to find unique elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find symmetric difference (elements in either set but not in both)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    # Convert back to tuple and return\n    return tuple(dissimilar_elements)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the dissimilar elements in the given two tuples.\n\n### Signature\ndef find_dissimilar(test_tup1, test_tup2):\n\n### Test\nassert candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
    "timestamp": "2025-10-17T18:46:03.981763",
    "response_time": "3.49",
    "context": "{\"function_name\": \"find_dissimilar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 580,
    "solution": "```python\n===START===\ndef even_ele(test_tuple, even_fnc=lambda x: x % 2 == 0):\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple(filter_even(sub_item) for sub_item in item if isinstance(sub_item, (int, tuple)) and (isinstance(sub_item, int) and even_fnc(sub_item) or isinstance(sub_item, tuple)))\n        elif isinstance(item, int) and even_fnc(item):\n            return item\n        return None\n\n    return tuple(filter_even(item) for item in test_tuple if isinstance(item, (int, tuple)) and (isinstance(item, int) and even_fnc(item) or isinstance(item, tuple)))\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove uneven elements in the nested mixed tuple.\n\n### Signature\ndef even_ele(test_tuple, even_fnc):\n\n### Test\nassert candidate((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
    "timestamp": "2025-10-17T18:46:08.509978",
    "response_time": "4.52",
    "context": "{\"function_name\": \"extract_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 581,
    "solution": "===START===\nimport math\n\ndef surface_Area(b, s):\n    # Calculate the slant height using the Pythagorean theorem\n    slant_height = math.sqrt((b / 2) ** 2 + s ** 2)\n    \n    # Calculate the lateral surface area\n    lateral_area = 2 * b * slant_height\n    \n    # Calculate the base area\n    base_area = b ** 2\n    \n    # Total surface area is the sum of lateral area and base area\n    total_surface_area = lateral_area + base_area\n    \n    return total_surface_area\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\n### Signature\ndef surface_Area(b,s):\n\n### Test\nassert candidate(3,4) == 33",
    "timestamp": "2025-10-17T18:46:10.951136",
    "response_time": "2.44",
    "context": "{\"function_name\": \"surface_Area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 582,
    "solution": "```python\n===START===\ndef my_dict(dict1):\n    return len(dict1) == 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if a dictionary is empty\n\n### Signature\ndef my_dict(dict1):\n\n### Test\nassert candidate({10})==False",
    "timestamp": "2025-10-17T18:46:12.332549",
    "response_time": "1.38",
    "context": "{\"function_name\": \"my_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 583,
    "solution": "===START===\ndef catalan_number(num):\n    # Function to calculate the nth Catalan number\n    if num == 0 or num == 1:\n        return 1\n    \n    catalan = [0] * (num + 1)\n    catalan[0], catalan[1] = 1, 1\n    \n    for i in range(2, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[num]\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function which returns nth catalan number.\n\n### Signature\ndef catalan_number(num):\n\n### Test\nassert candidate(10)==16796",
    "timestamp": "2025-10-17T18:46:14.525670",
    "response_time": "2.19",
    "context": "{\"function_name\": \"catalan_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 584,
    "solution": "```python\n===START===\ndef find_adverbs(text):\n    words = text.split()\n    for i, word in enumerate(words):\n        if word.endswith('ly'):\n            start_index = text.find(word)\n            end_index = start_index + len(word) - 1\n            return f\"{start_index}-{end_index}: {word}\"\n    return None\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n\n### Signature\ndef find_adverbs(text):\n\n### Test\nassert candidate(\"Clearly, he has no excuse for such behavior.\") == \"\"\"0-7: Clearly\"\"\"",
    "timestamp": "2025-10-17T18:46:16.966153",
    "response_time": "2.44",
    "context": "{\"function_name\": \"find_adverbs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 585,
    "solution": "```python\n===START===\ndef expensive_items(items, n):\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the n most expensive items in a given dataset.\n\n### Signature\ndef expensive_items(items,n):\n\n### Test\nassert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
    "timestamp": "2025-10-17T18:46:18.860948",
    "response_time": "1.89",
    "context": "{\"function_name\": \"expensive_items\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 586,
    "solution": "```python\n===START===\ndef split_Arr(l, n):\n    # Split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # Combine the second part with the first part at the end\n    return second_part + first_part\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n\n### Signature\ndef split_Arr(l, n):\n\n### Test\nassert candidate([12,10,5,6,52,36],2) == [5,6,52,36,12,10]",
    "timestamp": "2025-10-17T18:46:20.381466",
    "response_time": "1.51",
    "context": "{\"function_name\": \"split_Arr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 587,
    "solution": "```python\n===START===\ndef list_tuple(listx):\n    return tuple(listx)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a list to a tuple.\n\n### Signature\ndef list_tuple(listx):\n\n### Test\nassert candidate([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
    "timestamp": "2025-10-17T18:46:22.295488",
    "response_time": "1.91",
    "context": "{\"function_name\": \"list_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 588,
    "solution": "```python\n===START===\ndef big_diff(nums):\n    if not nums:\n        return 0\n    return max(nums) - min(nums)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the difference between largest and smallest value in a given list.\n\n### Signature\ndef big_diff(nums):\n\n### Test\nassert candidate([1,2,3,4]) == 3",
    "timestamp": "2025-10-17T18:46:23.429653",
    "response_time": "1.13",
    "context": "{\"function_name\": \"big_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 589,
    "solution": "```python\n===START===\nimport math\n\ndef perfect_squares(a, b):\n    result = []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    for i in range(start, end + 1):\n        result.append(i * i)\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find perfect squares between two given numbers.\n\n### Signature\ndef perfect_squares(a, b):\n\n### Test\nassert candidate(1,30)==[1, 4, 9, 16, 25]",
    "timestamp": "2025-10-17T18:46:25.930287",
    "response_time": "2.50",
    "context": "{\"function_name\": \"perfect_squares\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 590,
    "solution": "```python\n===START===\nimport math\nimport cmath\n\ndef polar_rect(x, y):\n    # Calculate the magnitude (r) and angle (theta) for polar coordinates\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y, x)\n    \n    # Convert to polar coordinates (r, theta)\n    polar = (r, theta)\n    \n    # Convert to complex number representation\n    complex_representation = cmath.rect(r, theta)\n    \n    return polar, complex_representation\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert polar coordinates to rectangular coordinates.\n\n### Signature\ndef polar_rect(x,y):\n\n### Test\nassert candidate(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
    "timestamp": "2025-10-17T18:46:28.357670",
    "response_time": "2.42",
    "context": "{\"function_name\": \"polar_rect\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 591,
    "solution": "```python\n===START===\ndef swap_List(newList):\n    # Check if the list has at least two elements\n    if len(newList) >= 2:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last elements in a list.\n\n### Signature\ndef swap_List(newList):\n\n### Test\nassert candidate([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
    "timestamp": "2025-10-17T18:46:30.255372",
    "response_time": "1.89",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 592,
    "solution": "```python\n===START===\nfrom math import comb\n\ndef binomial_Coeff(n, k):\n    return comb(n, k)\n\ndef candidate(n):\n    total_sum = 0\n    for k in range(n):\n        total_sum += binomial_Coeff(n, k) * binomial_Coeff(n, k + 1)\n    return total_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\n### Signature\ndef binomial_Coeff(n,k):\n\n### Test\nassert candidate(3) == 15",
    "timestamp": "2025-10-17T18:46:32.165941",
    "response_time": "1.91",
    "context": "{\"function_name\": \"sum_Of_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 593,
    "solution": "```python\n===START===\ndef removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Remove leading zeros from each part\n    cleaned_parts = [str(int(part)) for part in parts]\n    # Join the cleaned parts back into an IP address\n    return '.'.join(cleaned_parts)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove leading zeroes from an ip address.\n\n### Signature\ndef removezero_ip(ip):\n\n### Test\nassert candidate(\"216.08.094.196\")==(\"\"\"216.8.94.196\"\"\")",
    "timestamp": "2025-10-17T18:46:34.168845",
    "response_time": "1.99",
    "context": "{\"function_name\": \"removezero_ip\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 594,
    "solution": "```python\n===START===\ndef diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return abs(first_even - first_odd)\n    else:\n        return None\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the difference of the first even and first odd number of a given list.\n\n### Signature\ndef diff_even_odd(list1):\n\n### Test\nassert candidate([1,3,5,7,4,1,6,8])==3",
    "timestamp": "2025-10-17T18:46:39.043343",
    "response_time": "4.87",
    "context": "{\"function_name\": \"diff_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 595,
    "solution": "```python\n===START===\ndef min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return -1  # Return -1 if the lengths of the strings are not equal\n\n    # Count the number of mismatches for '0' and '1'\n    count_01 = 0  # Count of '0' in str1 and '1' in str2\n    count_10 = 0  # Count of '1' in str1 and '0' in str2\n\n    for bit1, bit2 in zip(str1, str2):\n        if bit1 == '0' and bit2 == '1':\n            count_01 += 1\n        elif bit1 == '1' and bit2 == '0':\n            count_10 += 1\n\n    # If the mismatches are not balanced, it's impossible to convert\n    if count_01 != count_10:\n        return -1\n\n    # The minimum swaps required is equal to the count of mismatches\n    return count_01\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n### Signature\ndef min_Swaps(str1,str2) :\n\n### Test\nassert candidate(\"1101\",\"1110\") == 1",
    "timestamp": "2025-10-17T18:46:42.996290",
    "response_time": "3.95",
    "context": "{\"function_name\": \"min_Swaps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 596,
    "solution": "```python\n===START===\nimport sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the size in bytes of the given tuple.\n\n### Signature\ndef tuple_size(tuple_list):\n\n### Test\nassert candidate((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
    "timestamp": "2025-10-17T18:46:43.884826",
    "response_time": "0.88",
    "context": "{\"function_name\": \"tuple_size\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 597,
    "solution": "```python\n===START===\ndef find_kth(arr1, arr2, k):\n    def kth_element(arr1, arr2, k):\n        if not arr1:\n            return arr2[k - 1]\n        if not arr2:\n            return arr1[k - 1]\n        if k == 1:\n            return min(arr1[0], arr2[0])\n\n        mid1 = arr1[k // 2 - 1] if len(arr1) >= k // 2 else float('inf')\n        mid2 = arr2[k // 2 - 1] if len(arr2) >= k // 2 else float('inf')\n\n        if mid1 < mid2:\n            return kth_element(arr1[k // 2:], arr2, k - k // 2)\n        else:\n            return kth_element(arr1, arr2[k // 2:], k - k // 2)\n\n    return kth_element(arr1, arr2, k)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find kth element from the given two sorted arrays.\n\n### Signature\ndef find_kth(arr1, arr2, k):\n\n### Test\nassert candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6",
    "timestamp": "2025-10-17T18:46:47.434426",
    "response_time": "3.55",
    "context": "{\"function_name\": \"find_kth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 598,
    "solution": "```python\n===START===\ndef armstrong_number(number):\n    # Convert the number to a string to iterate over its digits\n    digits = str(number)\n    # Calculate the number of digits\n    num_digits = len(digits)\n    # Calculate the sum of each digit raised to the power of num_digits\n    armstrong_sum = sum(int(digit) ** num_digits for digit in digits)\n    # Check if the calculated sum is equal to the original number\n    return armstrong_sum == number\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given number is armstrong or not.\n\n### Signature\ndef armstrong_number(number):\n\n### Test\nassert candidate(153)==True",
    "timestamp": "2025-10-17T18:46:50.023303",
    "response_time": "2.56",
    "context": "{\"function_name\": \"armstrong_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 599,
    "solution": "```python\n===START===\ndef sum_average(number):\n    # Calculate the sum of the first n natural numbers\n    total_sum = number * (number + 1) // 2\n    # Calculate the average\n    average = total_sum / number\n    # Return the sum and average as a tuple\n    return total_sum, average\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find sum and average of first n natural numbers.\n\n### Signature\ndef sum_average(number):\n\n### Test\nassert candidate(10)==(55, 5.5)",
    "timestamp": "2025-10-17T18:46:54.018597",
    "response_time": "3.99",
    "context": "{\"function_name\": \"sum_average\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 600,
    "solution": "```python\n===START===\ndef is_Even(n):\n    return n % 2 == 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given number is even or not.\n\n### Signature\ndef is_Even(n) :\n\n### Test\nassert candidate(1) == False",
    "timestamp": "2025-10-17T18:46:54.947880",
    "response_time": "0.92",
    "context": "{\"function_name\": \"is_Even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 602,
    "solution": "```python\n===START===\ndef first_repeated_char(str1):\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the first repeated character in a given string.\n\n### Signature\ndef first_repeated_char(str1):\n\n### Test\nassert candidate(\"abcabc\") == \"a\"",
    "timestamp": "2025-10-17T18:46:56.268065",
    "response_time": "1.32",
    "context": "{\"function_name\": \"first_repeated_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 603,
    "solution": "```python\n===START===\ndef get_ludic(n):\n    if n < 1:\n        return []\n    \n    # Initialize the list of numbers from 1 to n\n    numbers = list(range(1, n + 1))\n    index = 1  # Start with the second number (index 1, which is 2)\n\n    while index < len(numbers):\n        step = numbers[index]  # The current number to use as step\n        if step > len(numbers):\n            break\n        # Remove every step-th number starting from the step-th index\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % step != 0 or i == index]\n        index += 1  # Move to the next number in the list\n\n    return numbers\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\n### Signature\ndef get_ludic(n):\n\n### Test\nassert candidate(10) == [1, 2, 3, 5, 7]",
    "timestamp": "2025-10-17T18:47:00.551570",
    "response_time": "4.28",
    "context": "{\"function_name\": \"get_ludic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 604,
    "solution": "```python\n===START===\ndef reverse_words(s):\n    # Split the string into words, reverse the list of words, and join them back with spaces\n    return ' '.join(s.split()[::-1])\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to reverse words seperated by spaces in a given string.\n\n### Signature\ndef reverse_words(s):\n\n### Test\nassert candidate(\"python program\")==(\"program python\")",
    "timestamp": "2025-10-17T18:47:01.820566",
    "response_time": "1.26",
    "context": "{\"function_name\": \"reverse_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 605,
    "solution": "```python\n===START===\ndef prime_num(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given integer is a prime number.\n\n### Signature\ndef prime_num(num):\n\n### Test\nassert candidate(13)==True",
    "timestamp": "2025-10-17T18:47:03.035633",
    "response_time": "1.21",
    "context": "{\"function_name\": \"prime_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 606,
    "solution": "```python\n===START===\nimport math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert degrees to radians.\n\n### Signature\ndef radian_degree(degree):\n\n### Test\nassert candidate(90)==1.5707963267948966",
    "timestamp": "2025-10-17T18:47:04.624583",
    "response_time": "1.58",
    "context": "{\"function_name\": \"radian_degree\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 607,
    "solution": "```python\n===START===\nimport re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\n### Signature\ndef find_literals(text, pattern):\n\n### Test\nassert candidate('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)",
    "timestamp": "2025-10-17T18:47:05.805615",
    "response_time": "1.18",
    "context": "{\"function_name\": \"find_literals\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 608,
    "solution": "===START===\ndef bell_Number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Base case\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # First value in every row is the last value of the previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the entries in the current row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # Return the nth Bell number\n    return bell[n][0]\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find nth bell number.\n\n### Signature\ndef bell_Number(n):\n\n### Test\nassert candidate(2) == 2",
    "timestamp": "2025-10-17T18:47:09.549839",
    "response_time": "3.74",
    "context": "{\"function_name\": \"bell_Number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 610,
    "solution": "```python\n===START===\ndef remove_kth_element(list1, k):\n    if 0 <= k < len(list1):\n        return list1[:k] + list1[k+1:]\n    return list1\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\n### Signature\ndef remove_kth_element(list1, L):\n\n### Test\nassert candidate([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
    "timestamp": "2025-10-17T18:47:12.400889",
    "response_time": "2.85",
    "context": "{\"function_name\": \"remove_kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 611,
    "solution": "```python\n===START===\ndef max_of_nth(test_list, N):\n    # Extract the N'th column from the matrix\n    nth_column = [row[N] for row in test_list]\n    # Return the maximum value in the N'th column\n    return max(nth_column)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\n### Signature\ndef max_of_nth(test_list, N):\n\n### Test\nassert candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19",
    "timestamp": "2025-10-17T18:47:14.137703",
    "response_time": "1.73",
    "context": "{\"function_name\": \"max_of_nth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 612,
    "solution": "```python\n===START===\ndef merge(lst):\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n### Signature\ndef merge(lst):\n\n### Test\nassert candidate([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]",
    "timestamp": "2025-10-17T18:47:15.482615",
    "response_time": "1.34",
    "context": "{\"function_name\": \"merge\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 614,
    "solution": "```python\n===START===\ndef cummulative_sum(test_list):\n    return sum(sum(tup) for tup in test_list)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n### Signature\ndef cummulative_sum(test_list):\n\n### Test\nassert candidate([(1, 3), (5, 6, 7), (2, 6)]) == 30",
    "timestamp": "2025-10-17T18:47:17.326540",
    "response_time": "1.84",
    "context": "{\"function_name\": \"cummulative_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 615,
    "solution": "```python\n===START===\ndef average_tuple(nums):\n    return [sum(t) / len(t) for t in nums]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\n### Signature\ndef average_tuple(nums):\n\n### Test\nassert candidate(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]",
    "timestamp": "2025-10-17T18:47:18.237607",
    "response_time": "0.90",
    "context": "{\"function_name\": \"average_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 616,
    "solution": "```python\n===START===\ndef tuple_modulo(test_tup1, test_tup2):\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\n### Signature\ndef tuple_modulo(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
    "timestamp": "2025-10-17T18:47:19.970309",
    "response_time": "1.73",
    "context": "{\"function_name\": \"tuple_modulo\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 617,
    "solution": "```python\n===START===\nimport math\n\ndef min_Jumps(steps, d):\n    # Calculate the magnitude of each step\n    step_length = math.sqrt(steps[0]**2 + steps[1]**2)\n    # Calculate the number of jumps required\n    jumps = d / step_length\n    return jumps\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n### Signature\ndef min_Jumps(steps, d):\n\n### Test\nassert candidate((3,4),11)==3.5",
    "timestamp": "2025-10-17T18:47:22.495143",
    "response_time": "2.52",
    "context": "{\"function_name\": \"min_Jumps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 618,
    "solution": "```python\n===START===\ndef div_list(nums1, nums2):\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [a / b if b != 0 else float('inf') for a, b in zip(nums1, nums2)]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to divide two lists element wise.\n\n### Signature\ndef div_list(nums1,nums2):\n\n### Test\nassert candidate([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
    "timestamp": "2025-10-17T18:47:23.935179",
    "response_time": "1.44",
    "context": "{\"function_name\": \"div_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 619,
    "solution": "```python\n===START===\ndef move_num(test_str):\n    # Separate characters and digits\n    chars = ''.join([ch for ch in test_str if not ch.isdigit()])\n    digits = ''.join([ch for ch in test_str if ch.isdigit()])\n    # Concatenate characters and digits\n    return chars + digits\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to move all the numbers to the end of the given string.\n\n### Signature\ndef move_num(test_str):\n\n### Test\nassert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'",
    "timestamp": "2025-10-17T18:47:26.419217",
    "response_time": "2.48",
    "context": "{\"function_name\": \"move_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 620,
    "solution": "```python\n===START===\nfrom collections import defaultdict\n\ndef largest_subset(a):\n    # Sort the array\n    a.sort()\n    n = len(a)\n    \n    # dp[i] will store the size of the largest subset ending with a[i]\n    dp = [1] * n\n    \n    # To store the maximum size of the subset\n    max_size = 1\n    \n    # Iterate through the array\n    for i in range(1, n):\n        for j in range(i):\n            # Check if a[i] is divisible by a[j]\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_size = max(max_size, dp[i])\n    \n    return max_size\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n### Signature\ndef largest_subset(a):\n\n### Test\nassert candidate([ 1, 3, 6, 13, 17, 18 ]) == 4",
    "timestamp": "2025-10-17T18:47:29.289438",
    "response_time": "2.87",
    "context": "{\"function_name\": \"largest_subset\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 622,
    "solution": "```python\n===START===\ndef get_median(arr1, arr2, n):\n    # Merge the two sorted arrays\n    merged = []\n    i, j = 0, 0\n    \n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    \n    # Append remaining elements from arr1\n    while i < n:\n        merged.append(arr1[i])\n        i += 1\n    \n    # Append remaining elements from arr2\n    while j < n:\n        merged.append(arr2[j])\n        j += 1\n    \n    # Calculate the median\n    mid = len(merged) // 2\n    if len(merged) % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) / 2.0\n    else:\n        return merged[mid]\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the median of two sorted lists of same size.\n\n### Signature\ndef get_median(arr1, arr2, n):\n\n### Test\nassert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0",
    "timestamp": "2025-10-17T18:47:33.589289",
    "response_time": "4.29",
    "context": "{\"function_name\": \"get_median\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 623,
    "solution": "```python\n===START===\ndef nth_nums(nums, n):\n    return [x**n for x in nums]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to compute the n-th power of each number in a list.\n\n### Signature\ndef nth_nums(nums,n):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
    "timestamp": "2025-10-17T18:47:34.639285",
    "response_time": "1.05",
    "context": "{\"function_name\": \"nth_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 624,
    "solution": "===START===\ndef is_upper(string):\n    return string.upper()\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to convert a given string to uppercase.\n\n### Signature\ndef is_upper(string):\n\n### Test\nassert candidate(\"person\") ==\"PERSON\"",
    "timestamp": "2025-10-17T18:47:36.018724",
    "response_time": "1.38",
    "context": "{\"function_name\": \"is_upper\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 625,
    "solution": "```python\n===START===\ndef swap_List(newList):\n    # Check if the list has at least two elements\n    if len(newList) > 1:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last element in a given list.\n\n### Signature\ndef swap_List(newList):\n\n### Test\nassert candidate([1,2,3]) == [3,2,1]",
    "timestamp": "2025-10-17T18:47:38.402520",
    "response_time": "2.38",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 626,
    "solution": "```python\n===START===\nimport math\n\ndef triangle_area(r):\n    if r <= 0:\n        return None\n    \n    # The largest triangle that can be inscribed in a semicircle is a right triangle\n    # with the hypotenuse equal to the diameter of the semicircle.\n    # The area of such a triangle is (1/2) * base * height.\n    # Here, base = height = radius of the semicircle.\n    base = r\n    height = r\n    area = 0.5 * base * height\n    return area\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n### Signature\ndef triangle_area(r) :\n\n### Test\nassert candidate(-1) == None",
    "timestamp": "2025-10-17T18:47:40.636188",
    "response_time": "2.23",
    "context": "{\"function_name\": \"triangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 627,
    "solution": "```python\n===START===\ndef find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        # Check if the missing number is on the left side\n        if array[mid] != mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return start\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\n### Signature\ndef find_First_Missing(array,start=0,end=None):\n\n### Test\nassert candidate([0,1,2,3]) == 4",
    "timestamp": "2025-10-17T18:47:42.712458",
    "response_time": "2.07",
    "context": "{\"function_name\": \"find_First_Missing\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 628,
    "solution": "```python\n===START===\ndef replace_spaces(string):\n    return string.replace(\" \", \"%20\")\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to replace all spaces in the given string with '%20'.\n\n### Signature\ndef replace_spaces(string):\n\n### Test\nassert candidate(\"My Name is Dawood\") == \"\"\"My%20Name%20is%20Dawood\"\"\"",
    "timestamp": "2025-10-17T18:47:43.802905",
    "response_time": "1.09",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 629,
    "solution": "```python\n===START===\ndef Split(lst):\n    return [num for num in lst if num % 2 == 0]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find even numbers from a list of numbers.\n\n### Signature\ndef Split(list):\n\n### Test\nassert candidate([1,2,3,4,5]) == [2,4]",
    "timestamp": "2025-10-17T18:47:45.337135",
    "response_time": "1.53",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 630,
    "solution": "```python\n===START===\ndef adjac(ele, sub=[]):\n    x, y = ele\n    adjacent_coords = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            adjacent_coords.append([i, j])\n    return adjacent_coords\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n### Signature\ndef adjac(ele, sub = []):\n\n### Test\nassert candidate((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]",
    "timestamp": "2025-10-17T18:47:47.149538",
    "response_time": "1.81",
    "context": "{\"function_name\": \"get_coordinates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 631,
    "solution": "```python\n===START===\ndef replace_spaces(text):\n    # Replace whitespaces with underscores and underscores with whitespaces\n    return text.replace(' ', '_').replace('_', ' ', 1)\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\n### Signature\ndef replace_spaces(text):\n\n### Test\nassert candidate('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
    "timestamp": "2025-10-17T18:47:48.681317",
    "response_time": "1.53",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 632,
    "solution": "```python\n===START===\ndef move_zero(num_list):\n    # Separate non-zero elements and count zeroes\n    non_zeroes = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    \n    # Append zeroes to the end of the non-zero elements\n    return non_zeroes + [0] * zero_count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to move all zeroes to the end of the given list.\n\n### Signature\ndef move_zero(num_list):\n\n### Test\nassert candidate([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
    "timestamp": "2025-10-17T18:47:51.785157",
    "response_time": "3.10",
    "context": "{\"function_name\": \"move_zero\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 633,
    "solution": "```python\n===START===\ndef pair_xor_Sum(arr, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\n### Signature\ndef pair_xor_Sum(arr,n) :\n\n### Test\nassert candidate([5,9,7,6],4) == 47",
    "timestamp": "2025-10-17T18:47:53.063849",
    "response_time": "1.28",
    "context": "{\"function_name\": \"pair_xor_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 635,
    "solution": "```python\n===START===\nimport heapq\n\ndef heap_sort(iterable):\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort the given list.\n\n### Signature\ndef heap_sort(iterable):\n\n### Test\nassert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
    "timestamp": "2025-10-17T18:47:54.939285",
    "response_time": "1.87",
    "context": "{\"function_name\": \"heap_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 637,
    "solution": "```python\n===START===\ndef noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given amount has no profit and no loss\n\n### Signature\ndef noprofit_noloss(actual_cost,sale_amount):\n\n### Test\nassert candidate(1500,1200)==False",
    "timestamp": "2025-10-17T18:47:55.841206",
    "response_time": "0.90",
    "context": "{\"function_name\": \"noprofit_noloss\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 638,
    "solution": "```python\n===START===\nimport math\n\ndef wind_chill(v, t):\n    # Convert wind velocity from km/h to m/s\n    v_m_s = v / 3.6\n    \n    # Calculate wind chill index using the formula\n    wci = 13.12 + 0.6215 * t - 11.37 * (v_m_s ** 0.16) + 0.3965 * t * (v_m_s ** 0.16)\n    \n    # Return the wind chill index rounded to the next integer\n    return math.ceil(wci)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n### Signature\ndef wind_chill(v,t):\n\n### Test\nassert candidate(120,35)==40",
    "timestamp": "2025-10-17T18:47:58.685442",
    "response_time": "2.84",
    "context": "{\"function_name\": \"wind_chill\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 639,
    "solution": "```python\n===START===\ndef sample_nam(sample_names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    # Sum the lengths of the remaining names\n    return sum(len(name) for name in filtered_names)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n### Signature\ndef sample_nam(sample_names):\n\n### Test\nassert candidate(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16",
    "timestamp": "2025-10-17T18:48:01.613243",
    "response_time": "2.92",
    "context": "{\"function_name\": \"sample_nam\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 640,
    "solution": "```python\n===START===\ndef remove_parenthesis(items):\n    result = []\n    for item in items:\n        # Remove content within parentheses and the parentheses themselves\n        cleaned_item = \"\"\n        skip = 0\n        for char in item:\n            if char == '(':\n                skip += 1\n            elif char == ')':\n                skip -= 1\n            elif skip == 0:\n                cleaned_item += char\n        result.append(cleaned_item.strip())\n    return result\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n\n### Signature\ndef remove_parenthesis(items):\n\n### Test\nassert candidate([\"python (chrome)\"])==(\"python\")",
    "timestamp": "2025-10-17T18:48:06.005404",
    "response_time": "4.39",
    "context": "{\"function_name\": \"remove_parenthesis\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 641,
    "solution": "```python\n===START===\ndef is_nonagonal(n):\n    # The nth nonagonal number is given by the formula:\n    # N(n) = n * (7n - 5) / 2\n    return n * (7 * n - 5) // 2\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth nonagonal number.\n\n### Signature\ndef is_nonagonal(n):\n\n### Test\nassert candidate(10) == 325",
    "timestamp": "2025-10-17T18:48:07.976807",
    "response_time": "1.97",
    "context": "{\"function_name\": \"is_nonagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 643,
    "solution": "```python\n===START===\ndef text_match_wordz_middle(text):\n    # Check if 'z' is in the string but not at the start or end\n    if 'z' in text[1:-1]:\n        return True\n    return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\n### Signature\ndef text_match_wordz_middle(text):\n\n### Test\nassert candidate(\"pythonzabc.\")==True",
    "timestamp": "2025-10-17T18:48:10.103195",
    "response_time": "2.12",
    "context": "{\"function_name\": \"text_match_wordz_middle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 644,
    "solution": "```python\n===START===\ndef reverse_Array_Upto_K(input, k):\n    # Reverse the array up to the k-th position (1-based index)\n    if k > 0 and k <= len(input):\n        input[:k] = input[:k][::-1]\n    return input\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to reverse an array upto a given position.\n\n### Signature\ndef reverse_Array_Upto_K(input, k):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
    "timestamp": "2025-10-17T18:48:12.197808",
    "response_time": "2.09",
    "context": "{\"function_name\": \"reverse_Array_Upto_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 720,
    "solution": "```python\n===START===\ndef add_dict_to_tuple(test_tup, test_dict):\n    # Add the dictionary to the tuple and return the new tuple\n    return test_tup + (test_dict,)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\n### Signature\ndef add_dict_to_tuple(test_tup, test_dict):\n\n### Test\nassert candidate((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {\"\"\"MSAM\"\"\": 1, \"\"\"is\"\"\": 2, \"\"\"best\"\"\": 3})",
    "timestamp": "2025-10-17T18:48:13.470490",
    "response_time": "1.27",
    "context": "{\"function_name\": \"add_dict_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 721,
    "solution": "```python\n===START===\ndef maxAverageOfPath(cost):\n    n = len(cost)\n    # Create a dp table to store the maximum sum for each cell\n    dp = [[0] * n for _ in range(n)]\n    \n    # Initialize the top-left cell\n    dp[0][0] = cost[0][0]\n    \n    # Fill the first row\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    \n    # Fill the first column\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    \n    # Fill the rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    \n    # The maximum sum is stored in the bottom-right cell\n    max_sum = dp[n - 1][n - 1]\n    \n    # The number of cells in the path is 2n - 1 (since it's a square matrix)\n    num_cells = 2 * n - 1\n    \n    # Return the maximum average\n    return max_sum / num_cells\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n### Signature\ndef maxAverageOfPath(cost):\n\n### Test\nassert candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2",
    "timestamp": "2025-10-17T18:48:19.436446",
    "response_time": "5.96",
    "context": "{\"function_name\": \"maxAverageOfPath\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 722,
    "solution": "```python\n# ===START===\ndef filter_data(students, h, w):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\n### Signature\ndef filter_data(students,h,w):\n\n### Test\nassert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}",
    "timestamp": "2025-10-17T18:48:20.627915",
    "response_time": "1.18",
    "context": "{\"function_name\": \"filter_data\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 723,
    "solution": "```python\n===START===\ndef count_same_pair(nums1, nums2):\n    # Count indices where the values in both lists are the same\n    return sum(1 for a, b in zip(nums1, nums2) if a == b)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\n### Signature\ndef count_same_pair(nums1, nums2):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
    "timestamp": "2025-10-17T18:48:22.509325",
    "response_time": "1.88",
    "context": "{\"function_name\": \"count_same_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 724,
    "solution": "```python\n===START===\ndef power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string, iterate over each character, convert to integer, and sum them\n    digit_sum = sum(int(digit) for digit in str(result))\n    \n    return digit_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\n### Signature\ndef power_base_sum(base, power):\n\n### Test\nassert candidate(2,100)==115\nassert candidate(8,10)==37",
    "timestamp": "2025-10-17T18:48:24.216525",
    "response_time": "1.70",
    "context": "{\"function_name\": \"power_base_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 725,
    "solution": "```python\n===START===\nimport re\n\ndef extract_quotation(text1):\n    return re.findall(r'\"(.*?)\"', text1)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks \" \" of the given string.\n\n### Signature\ndef extract_quotation(text1):\n\n### Test\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']",
    "timestamp": "2025-10-17T18:48:25.182197",
    "response_time": "0.96",
    "context": "{\"function_name\": \"extract_quotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 726,
    "solution": "```python\n# ===START===\ndef multiply_elements(test_tup):\n    return tuple(test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1))\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n### Signature\ndef multiply_elements(test_tup):\n\n### Test\nassert candidate((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert candidate((2, 4, 5, 6, 7)) == (8, 20, 30, 42)",
    "timestamp": "2025-10-17T18:48:26.373762",
    "response_time": "1.19",
    "context": "{\"function_name\": \"multiply_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 728,
    "solution": "```python\n===START===\ndef sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n### Signature\ndef sum_list(lst1,lst2):\n\n### Test\nassert candidate([10,20,30],[15,25,35])==[25,45,65]",
    "timestamp": "2025-10-17T18:48:27.350452",
    "response_time": "0.97",
    "context": "{\"function_name\": \"sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 730,
    "solution": "```python\n# ===START===\ndef consecutive_duplicates(nums):\n    if not nums:\n        return []\n    \n    result = [nums[0]]\n    for i in range(1, len(nums)):\n        if nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove consecutive duplicates of a given list.\n\n### Signature\ndef consecutive_duplicates(nums):\n\n### Test\nassert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]",
    "timestamp": "2025-10-17T18:48:28.645847",
    "response_time": "1.29",
    "context": "{\"function_name\": \"consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 731,
    "solution": "```python\n===START===\nimport math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height of the cone\n    slant_height = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\n### Signature\ndef lateralsurface_cone(r,h):\n\n### Test\nassert candidate(5,12)==204.20352248333654",
    "timestamp": "2025-10-17T18:48:30.286422",
    "response_time": "1.63",
    "context": "{\"function_name\": \"lateralsurface_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 732,
    "solution": "```python\n===START===\ndef replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\n### Signature\ndef replace_specialchar(text):\n\n### Test\nassert candidate('Python language, Programming language.')==('Python:language::Programming:language:')",
    "timestamp": "2025-10-17T18:48:31.171471",
    "response_time": "0.88",
    "context": "{\"function_name\": \"replace_specialchar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 733,
    "solution": "```python\n===START===\ndef find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    result = -1  # Default to -1 if x is not found\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\n### Signature\ndef find_first_occurrence(A, x):\n\n### Test\nassert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
    "timestamp": "2025-10-17T18:48:33.026331",
    "response_time": "1.85",
    "context": "{\"function_name\": \"find_first_occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 734,
    "solution": "```python\n===START===\ndef sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            result += product\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\n### Signature\ndef sum_Of_Subarray_Prod(arr):\n\n### Test\nassert candidate([1,2,3]) == 20",
    "timestamp": "2025-10-17T18:48:34.117079",
    "response_time": "1.09",
    "context": "{\"function_name\": \"sum_Of_Subarray_Prod\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 735,
    "solution": "===START===\ndef set_middle_bits(n):\n    # Convert the number to its binary representation\n    binary = bin(n)[2:]  # Remove the '0b' prefix\n    \n    # If the binary representation has less than 3 bits, return the number as is\n    if len(binary) <= 2:\n        return n\n    \n    # Extract the first and last bits\n    first_bit = binary[0]\n    last_bit = binary[-1]\n    \n    # Toggle the middle bits\n    middle_bits = ''.join('1' if bit == '0' else '0' for bit in binary[1:-1])\n    \n    # Reconstruct the binary number\n    toggled_binary = first_bit + middle_bits + last_bit\n    \n    # Convert the binary string back to an integer\n    return int(toggled_binary, 2)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\n### Signature\ndef set_middle_bits(n):\n\n### Test\nassert candidate(9) == 15\nassert candidate(10) == 12",
    "timestamp": "2025-10-17T18:48:36.807588",
    "response_time": "2.68",
    "context": "{\"function_name\": \"toggle_middle_bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 736,
    "solution": "```python\n===START===\nfrom bisect import bisect_left\n\ndef left_insertion(a, x):\n    return bisect_left(a, x)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\n### Signature\ndef left_insertion(a, x):\n\n### Test\nassert candidate([1,2,4,5],6)==4",
    "timestamp": "2025-10-17T18:48:37.739811",
    "response_time": "0.93",
    "context": "{\"function_name\": \"left_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 737,
    "solution": "```python\n===START===\nimport re\n\ndef check_str(string):\n    # Check if the string starts with a vowel using regex\n    return bool(re.match(r'^[aeiouAEIOU]', string))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\n### Signature\ndef check_str(string):\n\n### Test\nassert candidate(\"annie\")",
    "timestamp": "2025-10-17T18:48:38.981527",
    "response_time": "1.24",
    "context": "{\"function_name\": \"check_str\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 738,
    "solution": "===START===\ndef geometric_sum(n):\n    if n == 0:\n        return 0\n    return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\n### Signature\ndef geometric_sum(n):\n\n### Test\nassert candidate(7) == 1.9921875",
    "timestamp": "2025-10-17T18:48:40.999087",
    "response_time": "2.01",
    "context": "{\"function_name\": \"geometric_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 739,
    "solution": "```python\n===START===\nimport math\n\ndef find_Index(n):\n    # Function to calculate the number of digits in a number\n    def num_digits(x):\n        return len(str(x))\n    \n    # Start with the first triangular number\n    index = 1\n    while True:\n        # Calculate the triangular number for the current index\n        triangular_number = (index * (index + 1)) // 2\n        \n        # Check if the number of digits matches n\n        if num_digits(triangular_number) == n:\n            return index\n        \n        # Increment the index\n        index += 1\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\n### Signature\ndef find_Index(n):\n\n### Test\nassert candidate(2) == 4",
    "timestamp": "2025-10-17T18:48:44.580226",
    "response_time": "3.58",
    "context": "{\"function_name\": \"find_Index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 740,
    "solution": "```python\n===START===\ndef tuple_to_dict(test_tup):\n    # Create a dictionary by pairing adjacent elements\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\n### Signature\ndef tuple_to_dict(test_tup):\n\n### Test\nassert candidate((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}",
    "timestamp": "2025-10-17T18:48:46.032680",
    "response_time": "1.45",
    "context": "{\"function_name\": \"tuple_to_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 741,
    "solution": "```python\n===START===\ndef all_Characters_Same(s):\n    # Check if all characters in the string are the same\n    return len(set(s)) == 1\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether all the characters are same or not.\n\n### Signature\ndef all_Characters_Same(s) :\n\n### Test\nassert candidate(\"python\") == False",
    "timestamp": "2025-10-17T18:48:47.331392",
    "response_time": "1.29",
    "context": "{\"function_name\": \"all_Characters_Same\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 742,
    "solution": "===START===\nimport math\n\ndef area_tetrahedron(side):\n    # Calculate the area of a tetrahedron using the formula:\n    # Area = sqrt(3) * side^2\n    return math.sqrt(3) * (side ** 2)\n\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to caluclate the area of a tetrahedron.\n\n### Signature\ndef area_tetrahedron(side):\n\n### Test\nassert candidate(3)==15.588457268119894",
    "timestamp": "2025-10-17T18:48:48.827476",
    "response_time": "1.49",
    "context": "{\"function_name\": \"area_tetrahedron\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 743,
    "solution": "```python\n===START===\ndef rotate_right(lst, m):\n    # Ensure m is within the bounds of the list length\n    m = m % len(lst)\n    # Rotate the list to the right by slicing\n    return lst[-m:] + lst[:-m]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\n### Signature\ndef rotate_right(list, m):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]",
    "timestamp": "2025-10-17T18:48:51.094485",
    "response_time": "2.26",
    "context": "{\"function_name\": \"rotate_right\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 744,
    "solution": "```python\n===START===\ndef check_none(test_tup):\n    return any(item is None for item in test_tup)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given tuple has any none value or not.\n\n### Signature\ndef check_none(test_tup):\n\n### Test\nassert candidate((10, 4, 5, 6, None)) == True",
    "timestamp": "2025-10-17T18:48:53.034669",
    "response_time": "1.94",
    "context": "{\"function_name\": \"check_none\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 745,
    "solution": "```python\n===START===\ndef divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\n### Signature\ndef divisible_by_digits(startnum, endnum):\n\n### Test\nassert candidate(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
    "timestamp": "2025-10-17T18:48:55.484998",
    "response_time": "2.44",
    "context": "{\"function_name\": \"divisible_by_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 746,
    "solution": "```python\n===START===\nimport math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    return (a / 360) * math.pi * r**2\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\n### Signature\ndef sector_area(r,a):\n\n### Test\nassert candidate(4,45)==6.283185307179586",
    "timestamp": "2025-10-17T18:48:57.360459",
    "response_time": "1.87",
    "context": "{\"function_name\": \"sector_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 747,
    "solution": "```python\n===START===\ndef lcs_of_three(X, Y, Z):\n    # Get the lengths of the three strings\n    m, n, o = len(X), len(Y), len(Z)\n    \n    # Create a 3D DP array to store the lengths of LCS\n    dp = [[[0 for _ in range(o + 1)] for __ in range(n + 1)] for ___ in range(m + 1)]\n    \n    # Fill the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    \n    # The length of the LCS of the three strings is stored in dp[m][n][o]\n    return dp[m][n][o]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n### Signature\ndef lcs_of_three(X, Y, Z):\n\n### Test\nassert candidate('AGGT12', '12TXAYB', '12XBA') == 2",
    "timestamp": "2025-10-17T18:49:02.129116",
    "response_time": "4.76",
    "context": "{\"function_name\": \"lcs_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 748,
    "solution": "```python\n===START===\ndef capital_words_spaces(str1):\n    result = []\n    for char in str1:\n        if char.isupper() and result:\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to put spaces between words starting with capital letters in a given string.\n\n### Signature\ndef capital_words_spaces(str1):\n\n### Test\nassert candidate(\"Python\") == \"\"\"Python\"\"\"",
    "timestamp": "2025-10-17T18:49:04.139452",
    "response_time": "2.00",
    "context": "{\"function_name\": \"capital_words_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 749,
    "solution": "```python\n===START===\ndef sort_numeric_strings(nums_str):\n    # Convert strings to integers, sort them, and return the sorted list\n    return sorted(map(int, nums_str))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n### Signature\ndef sort_numeric_strings(nums_str):\n\n### Test\nassert candidate( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
    "timestamp": "2025-10-17T18:49:06.230464",
    "response_time": "2.08",
    "context": "{\"function_name\": \"sort_numeric_strings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 750,
    "solution": "```python\n===START===\ndef add_tuple(test_list, test_tup):\n    # Extend the list with the elements of the tuple\n    test_list.extend(test_tup)\n    return test_list\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to add the given tuple to the given list.\n\n### Signature\ndef add_tuple(test_list, test_tup):\n\n### Test\nassert candidate([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]",
    "timestamp": "2025-10-17T18:49:07.880181",
    "response_time": "1.64",
    "context": "{\"function_name\": \"add_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 751,
    "solution": "```python\n===START===\ndef check_min_heap_helper(arr, i):\n    n = len(arr)\n    \n    # If the current node is a leaf node, return True\n    if i >= n // 2:\n        return True\n    \n    # Check if the current node is smaller than its children\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # Check left child\n    if left < n and arr[i] > arr[left]:\n        return False\n    \n    # Check right child\n    if right < n and arr[i] > arr[right]:\n        return False\n    \n    # Recursively check the left and right subtrees\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef candidate(arr):\n    return check_min_heap_helper(arr, 0)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n### Signature\ndef check_min_heap_helper(arr, i):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6]) == True",
    "timestamp": "2025-10-17T18:49:12.160304",
    "response_time": "4.27",
    "context": "{\"function_name\": \"check_min_heap\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 752,
    "solution": "===START===\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\n### Signature\ndef jacobsthal_num(n):\n\n### Test\nassert candidate(5) == 11\nassert candidate(2) == 1",
    "timestamp": "2025-10-17T18:49:14.771837",
    "response_time": "2.61",
    "context": "{\"function_name\": \"jacobsthal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 753,
    "solution": "```python\n===START===\ndef min_k(test_list, K):\n    # Sort the list of tuples based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Return the first K elements from the sorted list\n    return sorted_list[:K]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n### Signature\ndef min_k(test_list, K):\n\n### Test\nassert candidate([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
    "timestamp": "2025-10-17T18:49:18.191900",
    "response_time": "3.41",
    "context": "{\"function_name\": \"min_k\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 754,
    "solution": "```python\n===START===\ndef extract_index_list(l1, l2, l3):\n    # Find common elements at the same index in all three lists\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\n### Signature\ndef extract_index_list(l1, l2, l3):\n\n### Test\nassert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
    "timestamp": "2025-10-17T18:49:19.662853",
    "response_time": "1.47",
    "context": "{\"function_name\": \"extract_index_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 755,
    "solution": "```python\n===START===\ndef second_smallest(numbers):\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two distinct elements.\")\n    \n    # Remove duplicates and sort the list\n    unique_numbers = sorted(set(numbers))\n    \n    if len(unique_numbers) < 2:\n        raise ValueError(\"List must contain at least two distinct elements.\")\n    \n    # Return the second smallest element\n    return unique_numbers[1]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the second smallest number in a list.\n\n### Signature\ndef second_smallest(numbers):\n\n### Test\nassert candidate([1, 2, -8, -2, 0, -2])==-2\nassert candidate([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
    "timestamp": "2025-10-17T18:49:23.586848",
    "response_time": "3.92",
    "context": "{\"function_name\": \"second_smallest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 756,
    "solution": "===START===\nimport re\n\ndef text_match_zero_one(text):\n    # Check if the string matches the pattern 'a' followed by one or more 'b's\n    pattern = r'a+b+'\n    return bool(re.fullmatch(pattern, text))\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\n### Signature\ndef text_match_zero_one(text):\n\n### Test\nassert candidate(\"ac\")==False\nassert candidate(\"dc\")==False\nassert candidate(\"abbbba\")==True",
    "timestamp": "2025-10-17T18:49:25.467401",
    "response_time": "1.88",
    "context": "{\"function_name\": \"text_match_zero_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 757,
    "solution": "```python\n===START===\ndef count_reverse_pairs(test_list):\n    reverse_set = set()\n    count = 0\n    \n    for word in test_list:\n        reverse_word = word[::-1]\n        if reverse_word in reverse_set:\n            count += 1\n        reverse_set.add(word)\n    \n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\n### Signature\ndef count_reverse_pairs(test_list):\n\n### Test\nassert candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2",
    "timestamp": "2025-10-17T18:49:28.062670",
    "response_time": "2.59",
    "context": "{\"function_name\": \"count_reverse_pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 758,
    "solution": "```python\n===START===\ndef unique_sublists(list1):\n    result = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in result:\n            result[tuple_sublist] += 1\n        else:\n            result[tuple_sublist] = 1\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n### Signature\ndef unique_sublists(list1):\n\n### Test\nassert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
    "timestamp": "2025-10-17T18:49:29.750394",
    "response_time": "1.68",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 759,
    "solution": "```python\n===START===\ndef is_decimal(num):\n    try:\n        # Split the string into the integer and decimal parts\n        parts = num.split('.')\n        # Check if there are exactly two parts and the decimal part has exactly 2 digits\n        if len(parts) == 2 and len(parts[1]) == 2:\n            # Check if both parts are numeric\n            if parts[0].isdigit() and parts[1].isdigit():\n                return True\n        return False\n    except:\n        return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\n### Signature\ndef is_decimal(num):\n\n### Test\nassert candidate('123.11')==True\nassert candidate('e666.86')==False",
    "timestamp": "2025-10-17T18:49:32.837180",
    "response_time": "3.08",
    "context": "{\"function_name\": \"is_decimal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 760,
    "solution": "```python\n===START===\ndef unique_Element(arr):\n    # Check if all elements in the list are the same by converting to a set\n    # A set will only contain unique elements\n    return len(set(arr)) == 1\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\n### Signature\ndef unique_Element(arr):\n\n### Test\nassert candidate([1,1,1]) == True",
    "timestamp": "2025-10-17T18:49:34.874255",
    "response_time": "2.03",
    "context": "{\"function_name\": \"unique_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 762,
    "solution": "```python\n===START===\ndef check_monthnumber_number(monthnum3):\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n### Signature\ndef check_monthnumber_number(monthnum3):\n\n### Test\nassert candidate(6)==True",
    "timestamp": "2025-10-17T18:49:37.242725",
    "response_time": "2.36",
    "context": "{\"function_name\": \"check_monthnumber_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 763,
    "solution": "```python\n===START===\ndef find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize the minimum difference as a large value\n    min_diff = float('inf')\n    \n    # Iterate through the array and find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\n### Signature\ndef find_min_diff(arr,n):\n\n### Test\nassert candidate((1,5,3,19,18,25),6) == 1",
    "timestamp": "2025-10-17T18:49:39.988466",
    "response_time": "2.74",
    "context": "{\"function_name\": \"find_min_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 764,
    "solution": "===START===\ndef number_ctr(str):\n    return sum(1 for char in str if char.isdigit())\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count number of digits in a given string.\n\n### Signature\ndef number_ctr(str):\n\n### Test\nassert candidate('program2bedone') == 1\nassert candidate('3wonders') == 1",
    "timestamp": "2025-10-17T18:49:41.672157",
    "response_time": "1.68",
    "context": "{\"function_name\": \"number_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 765,
    "solution": "```python\n===START===\ndef is_polite(n):\n    def is_power_of_two(x):\n        # A number is a power of two if it has only one bit set in binary representation\n        return (x & (x - 1)) == 0 and x != 0\n\n    count = 0\n    current = 1\n\n    while True:\n        if not is_power_of_two(current):\n            count += 1\n            if count == n:\n                return current\n        current += 1\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\n### Signature\ndef is_polite(n):\n\n### Test\nassert candidate(7) == 11",
    "timestamp": "2025-10-17T18:49:44.952853",
    "response_time": "3.28",
    "context": "{\"function_name\": \"is_polite\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 766,
    "solution": "```python\n===START===\ndef pair_wise(l1):\n    return [(l1[i], l1[i+1]) for i in range(len(l1) - 1)]\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to return a list of all pairs of consecutive items in a given list.\n\n### Signature\ndef pair_wise(l1):\n\n### Test\nassert candidate([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert candidate([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
    "timestamp": "2025-10-17T18:49:46.105276",
    "response_time": "1.15",
    "context": "{\"function_name\": \"pair_wise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 767,
    "solution": "```python\n===START===\nfrom collections import Counter\n\ndef get_pairs_count(arr, sum):\n    count = 0\n    freq = Counter(arr)\n    \n    for num in arr:\n        complement = sum - num\n        count += freq[complement]\n        \n        # If the complement is the same as the current number, we need to decrease the count by 1\n        if complement == num:\n            count -= 1\n    \n    # Since each pair is counted twice, divide the count by 2\n    return count // 2\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\n### Signature\ndef get_pairs_count(arr, sum):\n\n### Test\nassert candidate([1,1,1,1],2) == 6\nassert candidate([1,5,7,-1,5],6) == 3",
    "timestamp": "2025-10-17T18:49:48.681654",
    "response_time": "2.57",
    "context": "{\"function_name\": \"get_pairs_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 769,
    "solution": "```python\n===START===\ndef Diff(li1, li2):\n    return list(set(li1) - set(li2)) + list(set(li2) - set(li1))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to get the difference between two lists.\n\n### Signature\ndef Diff(li1,li2):\n\n### Test\nassert (candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]",
    "timestamp": "2025-10-17T18:49:50.114175",
    "response_time": "1.43",
    "context": "{\"function_name\": \"Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 770,
    "solution": "```python\n===START===\ndef odd_num_sum(n):\n    # Initialize sum\n    total_sum = 0\n    # Generate first n odd numbers and calculate their fourth power\n    for i in range(n):\n        odd_number = 2 * i + 1\n        total_sum += odd_number ** 4\n    return total_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\n### Signature\ndef odd_num_sum(n) :\n\n### Test\nassert candidate(2) == 82",
    "timestamp": "2025-10-17T18:49:51.731384",
    "response_time": "1.61",
    "context": "{\"function_name\": \"odd_num_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 771,
    "solution": "```python\n===START===\ndef check_expression(exp):\n    stack = []\n    # Dictionary to map closing brackets to their corresponding opening brackets\n    matching_brackets = {')': '(', '}': '{', ']': '['}\n    \n    for char in exp:\n        if char in matching_brackets.values():  # If it's an opening bracket\n            stack.append(char)\n        elif char in matching_brackets.keys():  # If it's a closing bracket\n            if not stack or stack[-1] != matching_brackets[char]:\n                return False\n            stack.pop()\n    \n    # If stack is empty, all brackets were balanced\n    return not stack\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\n### Signature\ndef check_expression(exp):\n\n### Test\nassert candidate(\"{()}[{}]\") == True",
    "timestamp": "2025-10-17T18:49:54.261886",
    "response_time": "2.53",
    "context": "{\"function_name\": \"check_expression\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 772,
    "solution": "```python\n===START===\ndef remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    # Filter out words with length K\n    filtered_words = [word for word in words if len(word) != K]\n    # Join the filtered words back into a string\n    return ' '.join(filtered_words)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove all the words with k length in the given string.\n\n### Signature\ndef remove_length(test_str, K):\n\n### Test\nassert candidate('The person is most value tet', 3) == 'person is most value'",
    "timestamp": "2025-10-17T18:49:56.802247",
    "response_time": "2.53",
    "context": "{\"function_name\": \"remove_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 773,
    "solution": "```python\n===START===\ndef occurance_substring(text, pattern):\n    # Find the first occurrence of the pattern in the text\n    start_index = text.find(pattern)\n    \n    # If the pattern is not found, return None\n    if start_index == -1:\n        return None\n    \n    # Calculate the end index of the pattern\n    end_index = start_index + len(pattern)\n    \n    # Return the pattern, start index, and end index\n    return (pattern, start_index, end_index)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n### Signature\ndef occurance_substring(text,pattern):\n\n### Test\nassert candidate('python programming, python language','python')==('python', 0, 6)\nassert candidate('python programming,programming language','programming')==('programming', 7, 18)",
    "timestamp": "2025-10-17T18:49:58.842011",
    "response_time": "2.03",
    "context": "{\"function_name\": \"occurance_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 775,
    "solution": "```python\n===START===\ndef odd_position(nums):\n    # Iterate through the list, checking only odd indices\n    for i in range(1, len(nums), 2):\n        # If the number at the odd index is not odd, return False\n        if nums[i] % 2 == 0:\n            return False\n    # If all odd indices contain odd numbers, return True\n    return True\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\n### Signature\ndef odd_position(nums):\n\n### Test\nassert candidate([2,1,4,3,6,7,6,3]) == True",
    "timestamp": "2025-10-17T18:50:00.653553",
    "response_time": "1.81",
    "context": "{\"function_name\": \"odd_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 776,
    "solution": "```python\n===START===\ndef count_vowels(test_str):\n    vowels = set('aeiou')\n    count = 0\n    \n    for i in range(1, len(test_str) - 1):\n        if test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    \n    return count\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\n### Signature\ndef count_vowels(test_str):\n\n### Test\nassert candidate('bestinstareels') == 7",
    "timestamp": "2025-10-17T18:50:02.127347",
    "response_time": "1.47",
    "context": "{\"function_name\": \"count_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 777,
    "solution": "```python\n===START===\ndef find_sum(arr):\n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Sum elements that appear only once\n    return sum(num for num, count in element_count.items() if count == 1)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of non-repeated elements in a given list.\n\n### Signature\ndef find_sum(arr):\n\n### Test\nassert candidate([1,2,3,1,1,4,5,6]) == 21",
    "timestamp": "2025-10-17T18:50:04.612340",
    "response_time": "2.48",
    "context": "{\"function_name\": \"find_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 778,
    "solution": "```python\n# ===START===\ndef pack_consecutive_duplicates(list1):\n    if not list1:\n        return []\n    \n    packed_list = []\n    current_sublist = [list1[0]]\n    \n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_sublist.append(list1[i])\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [list1[i]]\n    \n    packed_list.append(current_sublist)\n    return packed_list\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\n### Signature\ndef pack_consecutive_duplicates(list1):\n\n### Test\nassert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]",
    "timestamp": "2025-10-17T18:50:06.406659",
    "response_time": "1.79",
    "context": "{\"function_name\": \"pack_consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 779,
    "solution": "```python\n# ===START===\ndef unique_sublists(list1):\n    result = {}\n    for sublist in list1:\n        # Convert the sublist to a tuple (tuples are hashable and can be used as dictionary keys)\n        sublist_tuple = tuple(sublist)\n        # Count occurrences\n        if sublist_tuple in result:\n            result[sublist_tuple] += 1\n        else:\n            result[sublist_tuple] = 1\n    return result\n# ===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\n### Signature\ndef unique_sublists(list1):\n\n### Test\nassert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
    "timestamp": "2025-10-17T18:50:12.379757",
    "response_time": "5.97",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 780,
    "solution": "```python\n===START===\nfrom itertools import product\n\ndef find_combinations(test_list):\n    # Using product to compute all combinations of sums\n    result = [tuple(sum(x) for x in zip(*comb)) for comb in product(*test_list)]\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\n### Signature\ndef find_combinations(test_list):\n\n### Test\nassert candidate([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]",
    "timestamp": "2025-10-17T18:50:14.370643",
    "response_time": "1.98",
    "context": "{\"function_name\": \"find_combinations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 781,
    "solution": "===START===\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\n### Signature\ndef count_divisors(n) :\n\n### Test\nassert candidate(10)",
    "timestamp": "2025-10-17T18:50:15.854618",
    "response_time": "1.48",
    "context": "{\"function_name\": \"count_divisors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 782,
    "solution": "```python\n===START===\ndef odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        # Calculate the contribution of arr[i] to the sum of all odd-length subarrays\n        # Total subarrays including arr[i] = (i + 1) * (n - i)\n        # Odd-length subarrays including arr[i] = ((i + 1) * (n - i) + 1) // 2\n        contribution = ((i + 1) * (n - i) + 1) // 2\n        total_sum += arr[i] * contribution\n    \n    return total_sum\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\n### Signature\ndef odd_length_sum(arr):\n\n### Test\nassert candidate([1,2,4]) == 14",
    "timestamp": "2025-10-17T18:50:19.080202",
    "response_time": "3.22",
    "context": "{\"function_name\": \"odd_length_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 783,
    "solution": "```python\n===START===\ndef rgb_to_hsv(r, g, b):\n    # Normalize the RGB values to the range [0, 1]\n    r_norm = r / 255.0\n    g_norm = g / 255.0\n    b_norm = b / 255.0\n\n    # Find the maximum and minimum values among r_norm, g_norm, b_norm\n    c_max = max(r_norm, g_norm, b_norm)\n    c_min = min(r_norm, g_norm, b_norm)\n    delta = c_max - c_min\n\n    # Calculate Hue (H)\n    if delta == 0:\n        h = 0\n    elif c_max == r_norm:\n        h = (60 * ((g_norm - b_norm) / delta) + 360) % 360\n    elif c_max == g_norm:\n        h = (60 * ((b_norm - r_norm) / delta) + 120) % 360\n    elif c_max == b_norm:\n        h = (60 * ((r_norm - g_norm) / delta) + 240) % 360\n\n    # Calculate Saturation (S)\n    if c_max == 0:\n        s = 0\n    else:\n        s = (delta / c_max) * 100\n\n    # Calculate Value (V)\n    v = c_max * 100\n\n    return (round(h, 2), round(s, 2), round(v, 2))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n### Signature\ndef rgb_to_hsv(r, g, b):\n\n### Test\nassert candidate(255, 255, 255)==(0, 0.0, 100.0)",
    "timestamp": "2025-10-17T18:50:23.777015",
    "response_time": "4.69",
    "context": "{\"function_name\": \"rgb_to_hsv\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 784,
    "solution": "```python\n===START===\ndef mul_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    return None\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the product of first even and odd number of a given list.\n\n### Signature\ndef mul_even_odd(list1):\n\n### Test\nassert candidate([1,3,5,7,4,1,6,8])==4",
    "timestamp": "2025-10-17T18:50:26.743272",
    "response_time": "2.96",
    "context": "{\"function_name\": \"mul_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 785,
    "solution": "```python\n===START===\ndef tuple_str_int(test_str):\n    # Remove the parentheses and split the string by commas\n    elements = test_str.strip(\"()\").split(\", \")\n    # Convert each element to an integer and return as a tuple\n    return tuple(map(int, elements))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert tuple string to integer tuple.\n\n### Signature\ndef tuple_str_int(test_str):\n\n### Test\nassert candidate(\"(7, 8, 9)\") == (7, 8, 9)\nassert candidate(\"(1, 2, 3)\") == (1, 2, 3)",
    "timestamp": "2025-10-17T18:50:29.858412",
    "response_time": "3.11",
    "context": "{\"function_name\": \"tuple_str_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 786,
    "solution": "```python\n===START===\nfrom bisect import bisect_right\n\ndef right_insertion(a, x):\n    return bisect_right(a, x)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\n### Signature\ndef right_insertion(a, x):\n\n### Test\nassert candidate([1,2,4,5],6)==4",
    "timestamp": "2025-10-17T18:50:31.552707",
    "response_time": "1.69",
    "context": "{\"function_name\": \"right_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 787,
    "solution": "```python\n===START===\nimport re\n\ndef text_match_three(text):\n    # Check if the string matches the pattern 'a' followed by exactly three 'b's\n    pattern = r'a{1}b{3}'\n    return bool(re.fullmatch(pattern, text))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by three 'b'.\n\n### Signature\ndef text_match_three(text):\n\n### Test\nassert not candidate(\"ac\")\nassert not candidate(\"dc\")",
    "timestamp": "2025-10-17T18:50:33.329075",
    "response_time": "1.77",
    "context": "{\"function_name\": \"text_match_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 788,
    "solution": "```python\n===START===\ndef new_tuple(test_list, test_str):\n    # Combine the list and string into a tuple\n    return tuple(test_list) + (test_str,)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to create a new tuple from the given string and list.\n\n### Signature\ndef new_tuple(test_list, test_str):\n\n### Test\nassert candidate([\"WEB\", \"is\"], \"best\") == (\"\"\"WEB\"\"\", \"\"\"is\"\"\", \"\"\"best\"\"\")",
    "timestamp": "2025-10-17T18:50:35.012435",
    "response_time": "1.68",
    "context": "{\"function_name\": \"new_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 790,
    "solution": "```python\n===START===\ndef even_position(nums):\n    for i in range(0, len(nums), 2):  # Iterate over even indices\n        if nums[i] % 2 != 0:  # Check if the number at the even index is not even\n            return False\n    return True  # Return True if all even indices contain even numbers\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether every even index contains even numbers of a given list.\n\n### Signature\ndef even_position(nums):\n\n### Test\nassert candidate([3,2,1]) == False",
    "timestamp": "2025-10-17T18:50:37.502291",
    "response_time": "2.48",
    "context": "{\"function_name\": \"even_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 791,
    "solution": "```python\n===START===\ndef remove_nested(test_tup):\n    # Filter out elements that are tuples\n    return tuple(item for item in test_tup if not isinstance(item, tuple))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove tuples from the given tuple.\n\n### Signature\ndef remove_nested(test_tup):\n\n### Test\nassert candidate((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert candidate((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)",
    "timestamp": "2025-10-17T18:50:39.128184",
    "response_time": "1.62",
    "context": "{\"function_name\": \"remove_nested\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 792,
    "solution": "===START===\ndef count_list(input_list):\n    return sum(1 for item in input_list if isinstance(item, list))\n===END===",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of lists in a given number of lists.\n\n### Signature\ndef count_list(input_list):\n\n### Test\nassert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4",
    "timestamp": "2025-10-17T18:50:40.097007",
    "response_time": "0.96",
    "context": "{\"function_name\": \"count_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 793,
    "solution": "```python\n===START===\ndef last(arr, x):\n    # Initialize the result to -1 (indicating not found)\n    result = -1\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element matches x, update the result\n        if arr[i] == x:\n            result = i\n    # Return the last position of x\n    return result\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the last position of an element in a sorted array.\n\n### Signature\ndef last(arr,x):\n\n### Test\nassert candidate([1,2,3],1) == 0",
    "timestamp": "2025-10-17T18:50:42.418025",
    "response_time": "2.31",
    "context": "{\"function_name\": \"last\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 794,
    "solution": "```python\n===START===\nimport re\n\ndef text_starta_endb(text):\n    # Use regex to check if the string matches the pattern\n    return bool(re.fullmatch(r'a.*b', text))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n### Signature\ndef text_starta_endb(text):\n\n### Test\nassert candidate(\"aabbbb\")",
    "timestamp": "2025-10-17T18:50:44.425726",
    "response_time": "2.00",
    "context": "{\"function_name\": \"text_starta_endb\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 796,
    "solution": "```python\n===START===\ndef return_sum(dict):\n    return sum(dict.values())\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite function to find the sum of all items in the given dictionary.\n\n### Signature\ndef return_sum(dict):\n\n### Test\nassert candidate({'a': 100, 'b':200, 'c':300}) == 600",
    "timestamp": "2025-10-17T18:50:45.527630",
    "response_time": "1.09",
    "context": "{\"function_name\": \"return_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 797,
    "solution": "```python\n===START===\ndef sum_odd(l, r):\n    return sum(i for i in range(l, r + 1) if i % 2 != 0)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\n### Signature\ndef sum_odd(n):\n\n### Test\nassert candidate(2,5) == 8",
    "timestamp": "2025-10-17T18:50:46.991117",
    "response_time": "1.46",
    "context": "{\"function_name\": \"sum_in_range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 798,
    "solution": "```python\n===START===\ndef _sum(arr):\n    return sum(arr)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of an array.\n\n### Signature\ndef _sum(arr):\n\n### Test\nassert candidate([1, 2, 3]) == 6",
    "timestamp": "2025-10-17T18:50:47.942234",
    "response_time": "0.94",
    "context": "{\"function_name\": \"_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 799,
    "solution": "```python\n===START===\ndef left_rotate(n, d):\n    # Since the number is 32-bit, we use a mask of 32 bits\n    BITS = 32\n    # Perform the left rotation\n    return ((n << d) | (n >> (BITS - d))) & 0xFFFFFFFF\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n### Signature\ndef left_rotate(n,d):\n\n### Test\nassert candidate(16,2) == 64\nassert candidate(10,2) == 40\nassert candidate(99,3) == 792",
    "timestamp": "2025-10-17T18:50:50.446063",
    "response_time": "2.50",
    "context": "{\"function_name\": \"left_rotate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 800,
    "solution": "```python\n===START===\ndef remove_all_spaces(text):\n    return text.replace(\" \", \"\")\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from a string.\n\n### Signature\ndef remove_all_spaces(text):\n\n### Test\nassert candidate('python  program')==('pythonprogram')\nassert candidate('python   programming    language')==('pythonprogramminglanguage')",
    "timestamp": "2025-10-17T18:50:52.718058",
    "response_time": "2.27",
    "context": "{\"function_name\": \"remove_all_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 801,
    "solution": "```python\n===START===\ndef test_three_equal(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    if count == 3:  # All three numbers are equal\n        return 3\n    elif count == 1:  # Two numbers are equal\n        return 2\n    else:  # No numbers are equal\n        return 0\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of equal numbers from three given integers.\n\n### Signature\ndef test_three_equal(x,y,z):\n\n### Test\nassert candidate(1,1,1) == 3",
    "timestamp": "2025-10-17T18:50:55.553774",
    "response_time": "2.83",
    "context": "{\"function_name\": \"test_three_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 802,
    "solution": "```python\n===START===\ndef count_rotation(arr):\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return i + 1\n    return 0\n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n### Signature\ndef count_rotation(arr):\n\n### Test\nassert candidate([3,2,1]) == 1\nassert candidate([4,5,1,2,3]) == 2",
    "timestamp": "2025-10-17T18:50:57.558162",
    "response_time": "2.00",
    "context": "{\"function_name\": \"count_rotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 803,
    "solution": "```python\n===START===\nimport math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    return sqrt_n * sqrt_n == n\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\n### Signature\ndef is_perfect_square(n) :\n\n### Test\nassert not candidate(10)\nassert candidate(36)\nassert not candidate(14)",
    "timestamp": "2025-10-17T18:50:59.596205",
    "response_time": "2.03",
    "context": "{\"function_name\": \"is_perfect_square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 804,
    "solution": "```python\n===START===\ndef is_product_even(arr):\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the product of numbers in a list is even or not.\n\n### Signature\ndef is_product_even(arr):\n\n### Test\nassert candidate([1,2,3])",
    "timestamp": "2025-10-17T18:51:01.520533",
    "response_time": "1.92",
    "context": "{\"function_name\": \"is_product_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 805,
    "solution": "```python\n===START===\ndef max_sum_list(lists):\n    # Return the list with the maximum sum of elements\n    return max(lists, key=sum)\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\n### Signature\ndef max_sum_list(lists):\n\n### Test\nassert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]",
    "timestamp": "2025-10-17T18:51:03.458686",
    "response_time": "1.93",
    "context": "{\"function_name\": \"max_sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 806,
    "solution": "```python\n===START===\ndef max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find maximum run of uppercase characters in the given string.\n\n### Signature\ndef max_run_uppercase(test_str):\n\n### Test\nassert candidate('GeMKSForGERksISBESt') == 5",
    "timestamp": "2025-10-17T18:51:05.033935",
    "response_time": "1.57",
    "context": "{\"function_name\": \"max_run_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 807,
    "solution": "```python\n===START===\ndef first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:  # Check if the number is odd\n            return num\n    return None  # Return None if no odd number is found\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the first odd number in a given list of numbers.\n\n### Signature\ndef first_odd(nums):\n\n### Test\nassert candidate([1,3,5]) == 1",
    "timestamp": "2025-10-17T18:51:06.210334",
    "response_time": "1.17",
    "context": "{\"function_name\": \"first_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 808,
    "solution": "```python\n===START===\ndef check_K(test_tup, K):\n    return K in test_tup\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given tuples contain the k or not.\n\n### Signature\ndef check_K(test_tup, K):\n\n### Test\nassert candidate((10, 4, 5, 6, 8), 6) == True",
    "timestamp": "2025-10-17T18:51:07.741940",
    "response_time": "1.53",
    "context": "{\"function_name\": \"check_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 809,
    "solution": "```python\n===START===\ndef check_smaller(test_tup1, test_tup2):\n    # Check if all elements in test_tup2 are smaller than their corresponding elements in test_tup1\n    return all(a > b for a, b in zip(test_tup1, test_tup2))\n===END===\n```",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n### Signature\ndef check_smaller(test_tup1, test_tup2):\n\n### Test\nassert candidate((1, 2, 3), (2, 3, 4)) == False",
    "timestamp": "2025-10-17T18:51:09.642051",
    "response_time": "1.89",
    "context": "{\"function_name\": \"check_smaller\"}"
  }
]