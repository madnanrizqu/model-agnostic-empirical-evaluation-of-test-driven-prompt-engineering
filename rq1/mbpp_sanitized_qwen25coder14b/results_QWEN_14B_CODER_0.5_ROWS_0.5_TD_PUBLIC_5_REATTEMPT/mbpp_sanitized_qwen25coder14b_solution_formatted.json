[
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 2,
    "solution": "def similar_elements(test_tup1, test_tup2):\n    return list(set(test_tup1) & set(test_tup2))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:59:26.758627",
    "response_time": "3.22",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 3,
    "solution": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
    "timestamp": "2025-10-17T17:59:32.007973",
    "response_time": "5.25",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 4,
    "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
    "timestamp": "2025-10-17T17:59:33.514825",
    "response_time": "1.50",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 6,
    "solution": "### Signature\ndef differ_At_One_Bit_Pos(x):\n    return x > 0 and (x & (x - 1)) == 0\n\n### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef differ_by_one_bit(x, y):",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
    "timestamp": "2025-10-17T17:59:36.836547",
    "response_time": "3.32",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 7,
    "solution": "import re\n\ndef find_char_long(text):\n    # Use regular expression to find all words with 4 or more characters\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
    "timestamp": "2025-10-17T17:59:39.613905",
    "response_time": "2.78",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 8,
    "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
    "timestamp": "2025-10-17T17:59:41.090442",
    "response_time": "1.47",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 9,
    "solution": "def find_Rotations(s):\n    n = len(s)\n    temp = s + s\n    for i in range(1, n + 1):\n        substring = temp[i:i + n]\n        if substring == s:\n            return i\n    return n",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
    "timestamp": "2025-10-17T17:59:44.245440",
    "response_time": "3.15",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 11,
    "solution": "def remove_Occ(s, ch):\n    # Find the first occurrence and remove it\n    first_occ_index = s.find(ch)\n    if first_occ_index != -1:\n        s = s[:first_occ_index] + s[first_occ_index + 1:]\n    \n    # Find the last occurrence and remove it\n    last_occ_index = s.rfind(ch)\n    if last_occ_index != -1:\n        s = s[:last_occ_index] + s[last_occ_index + 1:]\n    \n    return s",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
    "timestamp": "2025-10-17T17:59:49.646465",
    "response_time": "5.40",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 12,
    "solution": "def sort_matrix(M):\n    # Sort the matrix based on the sum of each row\n    return sorted(M, key=sum)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
    "timestamp": "2025-10-17T17:59:51.507722",
    "response_time": "1.86",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 14,
    "solution": "import math\n\ndef find_Volume(l, b, h):\n    # Calculate the area of the triangular base\n    base_area = 0.5 * l * b\n    # Calculate the volume of the prism\n    volume = base_area * h\n    return volume",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
    "timestamp": "2025-10-17T17:59:54.538616",
    "response_time": "3.03",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 16,
    "solution": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
    "timestamp": "2025-10-17T17:59:56.655933",
    "response_time": "2.11",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 17,
    "solution": "def square_perimeter(a):\n    return 4 * a",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
    "timestamp": "2025-10-17T17:59:57.964626",
    "response_time": "1.31",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 18,
    "solution": "def remove_dirty_chars(string):\n    return list(string)\n\ndef remove_characters(str1, str2):\n    list1 = str_to_list(str1)\n    list2 = str_to_list(str2)\n    result = [char for char in list1 if char not in list2]\n    return ''.join(result)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
    "timestamp": "2025-10-17T18:00:01.560269",
    "response_time": "3.59",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 19,
    "solution": "def test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
    "timestamp": "2025-10-17T18:00:03.866232",
    "response_time": "2.30",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 20,
    "solution": "def is_woodall(x):\n    if x < 1:\n        return False\n    n = 1\n    while (2**n - 1) * n <= x:\n        if (2**n - 1) * n == x:\n            return True\n        n += 1\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
    "timestamp": "2025-10-17T18:00:07.553953",
    "response_time": "3.68",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 56,
    "solution": "def check(num):\n    return int(str(num)[::-1])\n\ndef is_one_less_than_twice_reverse(num):\n    return num == 2 * rev(num) - 1",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
    "timestamp": "2025-10-17T18:00:09.867895",
    "response_time": "2.31",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 57,
    "solution": "from itertools import permutations\n\ndef find_Max_Num(arr):\n    # Generate all possible permutations of the array\n    perm = permutations(arr)\n    \n    # Initialize the maximum number as a very small number\n    max_num = float('-inf')\n    \n    # Iterate through each permutation\n    for p in perm:\n        # Convert the tuple to a list and then to an integer\n        num = int(''.join(map(str, p)))\n        \n        # Update the maximum number if the current number is larger\n        if num > max_num:\n            max_num = num\n    \n    return max_num",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
    "timestamp": "2025-10-17T18:00:15.667820",
    "response_time": "5.80",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 58,
    "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
    "timestamp": "2025-10-17T18:00:17.205477",
    "response_time": "1.53",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 59,
    "solution": "def is_octagonal(n):\n    if n < 1:\n        return False\n    # Calculate the octagonal number formula: O_n = n * (3n - 2)\n    # Rearrange to solve for n: 3n^2 - 2n - O_n = 0\n    # Use the quadratic formula: n = (2 + sqrt(4 + 12 * O_n)) / 6\n    discriminant = 4 + 12 * n\n    if discriminant < 0:\n        return False\n    sqrt_discriminant = discriminant ** 0.5\n    n1 = (2 + sqrt_discriminant) / 6\n    n2 = (2 - sqrt_discriminant) / 6\n    # Check if either n1 or n2 is a positive integer\n    return n1.is_integer() or n2.is_integer()",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
    "timestamp": "2025-10-17T18:00:26.290084",
    "response_time": "9.08",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 61,
    "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
    "timestamp": "2025-10-17T18:00:30.135116",
    "response_time": "3.84",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 62,
    "solution": "def smallest_num(xs):\n    if not xs:\n        raise ValueError(\"The list is empty\")\n    return min(xs)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
    "timestamp": "2025-10-17T18:00:31.969228",
    "response_time": "1.83",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 63,
    "solution": "def max_difference(test_list):\n    if not test_list or len(test_list) < 2:\n        return 0\n    \n    max_diff = 0\n    min_value = test_list[0]\n    \n    for num in test_list[1:]:\n        max_diff = max(max_diff, num - min_value)\n        min_value = min(min_value, num)\n    \n    return max_diff",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
    "timestamp": "2025-10-17T18:00:36.295868",
    "response_time": "4.32",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 64,
    "solution": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
    "timestamp": "2025-10-17T18:00:37.889061",
    "response_time": "1.59",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 65,
    "solution": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
    "timestamp": "2025-10-17T18:00:40.708279",
    "response_time": "2.82",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 66,
    "solution": "def pos_count(lst):\n    return sum(1 for x in lst if x > 0)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
    "timestamp": "2025-10-17T18:00:42.313859",
    "response_time": "1.60",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 67,
    "solution": "import math\n\ndef bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
    "timestamp": "2025-10-17T18:00:47.867351",
    "response_time": "5.55",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 68,
    "solution": "def is_Monotonic(A):\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        if A[i] < A[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
    "timestamp": "2025-10-17T18:00:51.472147",
    "response_time": "3.60",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 69,
    "solution": "def is_sublist(l, s):\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
    "timestamp": "2025-10-17T18:00:55.125710",
    "response_time": "3.65",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 70,
    "solution": "def get_equal(Input):\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    for tup in Input:\n        if len(tup) != first_length:\n            return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
    "timestamp": "2025-10-17T18:00:57.984634",
    "response_time": "2.85",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 71,
    "solution": "def comb_sort(nums):\n    def get_next_gap(gap):\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
    "timestamp": "2025-10-17T18:01:04.387228",
    "response_time": "6.40",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 72,
    "solution": "def dif_Square(n):\n    # A number can be represented as the difference of two squares if and only if it is not of the form 4k+2\n    return n % 4 != 2",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
    "timestamp": "2025-10-17T18:01:07.120402",
    "response_time": "2.73",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 74,
    "solution": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
    "timestamp": "2025-10-17T18:01:13.076940",
    "response_time": "5.95",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 75,
    "solution": "def find_tuples(test_list, K):\n    result = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
    "timestamp": "2025-10-17T18:01:15.353780",
    "response_time": "2.27",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 77,
    "solution": "def is_Diff(n):\n    # Convert the number to a string to easily access each digit\n    n_str = str(n)\n    \n    # Calculate the difference between the sum of digits at even and odd positions\n    even_sum = sum(int(n_str[i]) for i in range(0, len(n_str), 2))\n    odd_sum = sum(int(n_str[i]) for i in range(1, len(n_str), 2))\n    \n    # Check if the difference is divisible by 11\n    return (even_sum - odd_sum) % 11 == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
    "timestamp": "2025-10-17T18:01:21.496694",
    "response_time": "6.14",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 79,
    "solution": "def word_len(s):\n    return len(s) % 2 != 0",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
    "timestamp": "2025-10-17T18:01:22.978548",
    "response_time": "1.48",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 80,
    "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
    "timestamp": "2025-10-17T18:01:24.956922",
    "response_time": "1.97",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 82,
    "solution": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
    "timestamp": "2025-10-17T18:01:26.530207",
    "response_time": "1.57",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 83,
    "solution": "def get_Char(strr):\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr(total % 26)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
    "timestamp": "2025-10-17T18:01:28.668192",
    "response_time": "2.14",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 84,
    "solution": "def sequence(n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Initialize the sequence with the first two known values\n    seq = [0, 1, 1]\n    \n    # Compute the sequence up to the nth number\n    for i in range(3, n + 1):\n        seq.append(seq[seq[i - 1]] + seq[i - seq[i - 1]])\n    \n    return seq[n]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
    "timestamp": "2025-10-17T18:01:33.770884",
    "response_time": "5.10",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 85,
    "solution": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
    "timestamp": "2025-10-17T18:01:35.187907",
    "response_time": "1.41",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 86,
    "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
    "timestamp": "2025-10-17T18:01:36.958503",
    "response_time": "1.77",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 87,
    "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
    "timestamp": "2025-10-17T18:01:39.642062",
    "response_time": "2.68",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 88,
    "solution": "from collections import defaultdict\n\ndef freq_count(list1):\n    frequency = defaultdict(int)\n    for item in list1:\n        frequency[item] += 1\n    return dict(frequency)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):",
    "timestamp": "2025-10-17T18:01:41.913478",
    "response_time": "2.27",
    "context": "{\"function_name\": \"freq_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 89,
    "solution": "def closest_num(N):\n    return N - 1",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):",
    "timestamp": "2025-10-17T18:01:43.190162",
    "response_time": "1.27",
    "context": "{\"function_name\": \"closest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 90,
    "solution": "def len_log(list1):\n    if not list1:\n        return 0\n    return max(len(word) for word in list1)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):",
    "timestamp": "2025-10-17T18:01:45.154001",
    "response_time": "1.96",
    "context": "{\"function_name\": \"len_log\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 91,
    "solution": "def find_substring(str1, sub_str):\n    return sub_str in str1",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):",
    "timestamp": "2025-10-17T18:01:46.664573",
    "response_time": "1.51",
    "context": "{\"function_name\": \"find_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 92,
    "solution": "def is_undulating(n):\n    n_str = str(n)\n    if len(n_str) < 3:\n        return False\n    for i in range(2, len(n_str)):\n        if n_str[i] != n_str[i - 2]:\n            return False\n    return n_str[0] != n_str[1]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):",
    "timestamp": "2025-10-17T18:01:50.455717",
    "response_time": "3.79",
    "context": "{\"function_name\": \"is_undulating\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 93,
    "solution": "def power(a, b):\n    return a ** b",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):",
    "timestamp": "2025-10-17T18:01:51.564721",
    "response_time": "1.11",
    "context": "{\"function_name\": \"power\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 94,
    "solution": "def index_minimum(test_list):\n    if not test_list:\n        return None\n    min_tuple = min(test_list, key=lambda x: x[1])\n    return min_tuple[0]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):",
    "timestamp": "2025-10-17T18:01:54.006214",
    "response_time": "2.44",
    "context": "{\"function_name\": \"index_minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 95,
    "solution": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):",
    "timestamp": "2025-10-17T18:01:57.036618",
    "response_time": "3.03",
    "context": "{\"function_name\": \"Find_Min_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 96,
    "solution": "def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):",
    "timestamp": "2025-10-17T18:02:00.475429",
    "response_time": "3.44",
    "context": "{\"function_name\": \"divisor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 97,
    "solution": "from collections import defaultdict\n\ndef frequency_lists(list1):\n    frequency_dict = defaultdict(int)\n    for sublist in list1:\n        for element in sublist:\n            frequency_dict[element] += 1\n    return dict(frequency_dict)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):",
    "timestamp": "2025-10-17T18:02:03.063377",
    "response_time": "2.59",
    "context": "{\"function_name\": \"frequency_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 98,
    "solution": "from functools import reduce\n\ndef multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = reduce(lambda x, y: x * y, numbers)\n    return product / len(numbers)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):",
    "timestamp": "2025-10-17T18:02:05.493278",
    "response_time": "2.43",
    "context": "{\"function_name\": \"multiply_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 99,
    "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):",
    "timestamp": "2025-10-17T18:02:08.513748",
    "response_time": "3.02",
    "context": "{\"function_name\": \"decimal_to_binary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 100,
    "solution": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):",
    "timestamp": "2025-10-17T18:02:11.504413",
    "response_time": "2.99",
    "context": "{\"function_name\": \"next_smallest_palindrome\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 101,
    "solution": "def kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        raise IndexError(\"k is out of bounds\")\n    return arr[k - 1]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):",
    "timestamp": "2025-10-17T18:02:13.893535",
    "response_time": "2.39",
    "context": "{\"function_name\": \"kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 102,
    "solution": "def snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
    "timestamp": "2025-10-17T18:02:15.606026",
    "response_time": "1.71",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 103,
    "solution": "def eulerian_num(n, m):\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):",
    "timestamp": "2025-10-17T18:02:19.615924",
    "response_time": "4.01",
    "context": "{\"function_name\": \"eulerian_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 104,
    "solution": "def sort_sublists(input_list):\n    return [sorted(sublist) for sublist in input_list]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):",
    "timestamp": "2025-10-17T18:02:21.206677",
    "response_time": "1.59",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 105,
    "solution": "def count(lst):\n    return sum(1 for item in lst if item is True)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):",
    "timestamp": "2025-10-17T18:02:22.722844",
    "response_time": "1.51",
    "context": "{\"function_name\": \"count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 106,
    "solution": "def add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):",
    "timestamp": "2025-10-17T18:02:24.408667",
    "response_time": "1.68",
    "context": "{\"function_name\": \"add_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 108,
    "solution": "def merge_sorted_list(num1, num2, num3):\n    # Combine all three lists\n    combined = num1 + num2 + num3\n    # Sort the combined list\n    combined.sort()\n    return combined",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):",
    "timestamp": "2025-10-17T18:02:27.225575",
    "response_time": "2.81",
    "context": "{\"function_name\": \"merge_sorted_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 109,
    "solution": "def odd_Equivalent(s, n):\n    count = 0\n    length = len(s)\n    \n    for _ in range(n):\n        # Rotate the string to the right by one position\n        s = s[-1] + s[:-1]\n        \n        # Convert the binary string to an integer\n        num = int(s, 2)\n        \n        # Check if the number is odd\n        if num % 2 == 1:\n            count += 1\n    \n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):",
    "timestamp": "2025-10-17T18:02:32.393970",
    "response_time": "5.16",
    "context": "{\"function_name\": \"odd_Equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 111,
    "solution": "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    \n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    \n    return list(common_elements)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):",
    "timestamp": "2025-10-17T18:02:35.842066",
    "response_time": "3.45",
    "context": "{\"function_name\": \"common_in_nested_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 113,
    "solution": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):",
    "timestamp": "2025-10-17T18:02:37.663127",
    "response_time": "1.82",
    "context": "{\"function_name\": \"check_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 115,
    "solution": "def empty_dit(list1):\n    return all(not d for d in list1)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):",
    "timestamp": "2025-10-17T18:02:39.189146",
    "response_time": "1.52",
    "context": "{\"function_name\": \"empty_dit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 116,
    "solution": "def tuple_to_int(nums):\n    return int(''.join(map(str, nums)))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):",
    "timestamp": "2025-10-17T18:02:40.725573",
    "response_time": "1.53",
    "context": "{\"function_name\": \"tuple_to_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 117,
    "solution": "def list_to_float(test_list):\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except (ValueError, TypeError):\n                pass\n    return test_list",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):",
    "timestamp": "2025-10-17T18:02:44.250308",
    "response_time": "3.52",
    "context": "{\"function_name\": \"list_to_float\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 118,
    "solution": "def string_to_list(string):\n    return string.split()",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):",
    "timestamp": "2025-10-17T18:02:45.492069",
    "response_time": "1.24",
    "context": "{\"function_name\": \"string_to_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 119,
    "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Ensure mid is even for comparison\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the unique element is in the right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return arr[left]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):",
    "timestamp": "2025-10-17T18:02:51.135273",
    "response_time": "5.64",
    "context": "{\"function_name\": \"search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 120,
    "solution": "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):",
    "timestamp": "2025-10-17T18:02:54.519573",
    "response_time": "3.38",
    "context": "{\"function_name\": \"max_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 123,
    "solution": "def amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    total_sum = 0\n    for num in range(2, limit + 1):\n        if num in checked:\n            continue\n        div_sum = sum_of_divisors(num)\n        if div_sum != num and sum_of_divisors(div_sum) == num:\n            total_sum += num + div_sum\n            checked.add(num)\n            checked.add(div_sum)\n    return total_sum\n\nchecked = set()",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):",
    "timestamp": "2025-10-17T18:03:00.595190",
    "response_time": "6.07",
    "context": "{\"function_name\": \"amicable_numbers_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 124,
    "solution": "import cmath\n\ndef angle_complex(a, b):\n    return cmath.phase(complex(a, b))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):",
    "timestamp": "2025-10-17T18:03:02.104398",
    "response_time": "1.51",
    "context": "{\"function_name\": \"angle_complex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 125,
    "solution": "def find_length(string):\n    max_diff = 0\n    current_diff = 0\n    min_diff = 0\n\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n\n        max_diff = max(max_diff, current_diff - min_diff)\n        min_diff = min(min_diff, current_diff)\n\n    return max_diff",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):",
    "timestamp": "2025-10-17T18:03:06.589146",
    "response_time": "4.48",
    "context": "{\"function_name\": \"find_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 126,
    "solution": "def sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    common_divisor_sum = 0\n    gcd_value = gcd(a, b)\n    \n    for i in range(1, int(gcd_value**0.5) + 1):\n        if gcd_value % i == 0:\n            common_divisor_sum += i\n            if i != gcd_value // i:\n                common_divisor_sum += gcd_value // i\n    \n    return common_divisor_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):",
    "timestamp": "2025-10-17T18:03:13.350072",
    "response_time": "6.76",
    "context": "{\"function_name\": \"sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 127,
    "solution": "def multiply_int(x, y):\n    return x * y",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):",
    "timestamp": "2025-10-17T18:03:15.907364",
    "response_time": "2.55",
    "context": "{\"function_name\": \"multiply_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 128,
    "solution": "def long_words(n, str):\n    words = str.split()\n    return [word for word in words if len(word) > n]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):",
    "timestamp": "2025-10-17T18:03:17.869026",
    "response_time": "1.96",
    "context": "{\"function_name\": \"long_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 129,
    "solution": "def magic_square_test(my_matrix):\n    import numpy as np\n    \n    # Check if the matrix is square\n    n = len(my_matrix)\n    if any(len(row) != n for row in my_matrix):\n        return False\n    \n    # Convert the matrix to a numpy array for easier manipulation\n    matrix = np.array(my_matrix)\n    \n    # Calculate the sum of the first row to use as the magic sum\n    magic_sum = np.sum(matrix[0, :])\n    \n    # Check the sum of each row\n    for row in matrix:\n        if np.sum(row) != magic_sum:\n            return False\n    \n    # Check the sum of each column\n    for col in range(n):\n        if np.sum(matrix[:, col]) != magic_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if np.sum(matrix.diagonal()) != magic_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if np.sum(np.fliplr(matrix).diagonal()) != magic_sum:\n        return False\n    \n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):",
    "timestamp": "2025-10-17T18:03:28.941774",
    "response_time": "11.07",
    "context": "{\"function_name\": \"magic_square_test\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 130,
    "solution": "from collections import Counter\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    count = Counter(nums)\n    max_freq = max(count.values())\n    for num, freq in count.items():\n        if freq == max_freq:\n            return num",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):",
    "timestamp": "2025-10-17T18:03:31.907319",
    "response_time": "2.96",
    "context": "{\"function_name\": \"max_occurrences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 131,
    "solution": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str_list) - 1\n    \n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n    \n    return ''.join(str_list)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):",
    "timestamp": "2025-10-17T18:03:37.917389",
    "response_time": "6.01",
    "context": "{\"function_name\": \"reverse_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 132,
    "solution": "def tup_string(tup1):\n    return ''.join(map(str, tup1))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):",
    "timestamp": "2025-10-17T18:03:39.429673",
    "response_time": "1.51",
    "context": "{\"function_name\": \"tup_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 133,
    "solution": "def sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):",
    "timestamp": "2025-10-17T18:03:41.187959",
    "response_time": "1.75",
    "context": "{\"function_name\": \"sum_negativenum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 135,
    "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):",
    "timestamp": "2025-10-17T18:03:42.759461",
    "response_time": "1.57",
    "context": "{\"function_name\": \"hexagonal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 137,
    "solution": "def zero_count(nums):\n    if not nums:\n        return 0.0\n    \n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    \n    if non_zero_count == 0:\n        return float('inf')  # Avoid division by zero if there are no non-zero elements\n    \n    return zero_count / non_zero_count",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):",
    "timestamp": "2025-10-17T18:03:47.024149",
    "response_time": "4.26",
    "context": "{\"function_name\": \"zero_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 138,
    "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    return n > 0 and (n & (n - 1)) == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):",
    "timestamp": "2025-10-17T18:03:49.210921",
    "response_time": "2.18",
    "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 139,
    "solution": "import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):",
    "timestamp": "2025-10-17T18:03:50.775569",
    "response_time": "1.56",
    "context": "{\"function_name\": \"circle_circumference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 140,
    "solution": "def extract_singly(test_list):\n    result = set()\n    for sublist in test_list:\n        result.update(sublist)\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):",
    "timestamp": "2025-10-17T18:03:52.874614",
    "response_time": "2.10",
    "context": "{\"function_name\": \"extract_singly\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 141,
    "solution": "def pancake_sort(nums):\n    def flip(sublist, k):\n        start = 0\n        while start < k:\n            sublist[start], sublist[k] = sublist[k], sublist[start]\n            start += 1\n            k -= 1\n\n    n = len(nums)\n    for size in range(n, 1, -1):\n        # Find the index of the maximum element in nums[0:size]\n        max_index = 0\n        for i in range(1, size):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        # If the maximum element is not already at the end of the current sublist\n        if max_index != size - 1:\n            # Flip the maximum element to the front if it's not already there\n            if max_index != 0:\n                flip(nums, max_index)\n            # Flip it to its correct position\n            flip(nums, size - 1)\n\n    return nums",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):",
    "timestamp": "2025-10-17T18:04:03.663018",
    "response_time": "10.78",
    "context": "{\"function_name\": \"pancake_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 142,
    "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):",
    "timestamp": "2025-10-17T18:04:06.829725",
    "response_time": "3.16",
    "context": "{\"function_name\": \"count_samepair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 143,
    "solution": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):",
    "timestamp": "2025-10-17T18:04:09.778966",
    "response_time": "2.95",
    "context": "{\"function_name\": \"find_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 145,
    "solution": "def max_Abs_Diff(arr):\n    if not arr:\n        return 0\n    \n    min_element = arr[0]\n    max_element = arr[0]\n    \n    for num in arr:\n        if num < min_element:\n            min_element = num\n        if num > max_element:\n            max_element = num\n    \n    return max_element - min_element",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):",
    "timestamp": "2025-10-17T18:04:13.975431",
    "response_time": "4.19",
    "context": "{\"function_name\": \"max_Abs_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 160,
    "solution": "from math import gcd\n\ndef find_solution(a, b, n):\n    # Check if gcd of a and b divides n\n    if n % gcd(a, b) != 0:\n        return None\n    \n    # Extended Euclidean Algorithm to find x and y such that ax + by = gcd(a, b)\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return gcd, x, y\n    \n    gcd_ab, x, y = extended_gcd(a, b)\n    \n    # Scale the solution to ax + by = n\n    scale = n // gcd_ab\n    return (x * scale, y * scale)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):",
    "timestamp": "2025-10-17T18:04:22.713108",
    "response_time": "8.73",
    "context": "{\"function_name\": \"find_solution\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 161,
    "solution": "def remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):",
    "timestamp": "2025-10-17T18:04:24.679741",
    "response_time": "1.96",
    "context": "{\"function_name\": \"remove_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 162,
    "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):",
    "timestamp": "2025-10-17T18:04:27.339865",
    "response_time": "2.66",
    "context": "{\"function_name\": \"sum_series\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 163,
    "solution": "import math\n\ndef area_polygon(s, l):\n    # Calculate the area of a regular polygon\n    area = (s * l**2) / (4 * math.tan(math.pi / s))\n    return area",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):",
    "timestamp": "2025-10-17T18:04:29.943614",
    "response_time": "2.60",
    "context": "{\"function_name\": \"area_polygon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 164,
    "solution": "def are_equivalent(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\ndef are_div_sums_equal(a, b):\n    return div_sum(a) == div_sum(b)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):",
    "timestamp": "2025-10-17T18:04:33.521590",
    "response_time": "3.57",
    "context": "{\"function_name\": \"are_equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 165,
    "solution": "def count_char_position(str1):\n    count = 0\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if 'a' <= str1[i] <= 'z' and (ord(str1[i]) - ord('a') + 1) == (i + 1):\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):",
    "timestamp": "2025-10-17T18:04:37.638956",
    "response_time": "4.11",
    "context": "{\"function_name\": \"count_char_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 166,
    "solution": "def find_even_pair(A):\n    even_count = 0\n    odd_count = 0\n    \n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Even XOR Even = Even\n    # Odd XOR Odd = Even\n    even_pairs = (even_count * (even_count - 1)) // 2\n    odd_pairs = (odd_count * (odd_count - 1)) // 2\n    \n    return even_pairs + odd_pairs",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):",
    "timestamp": "2025-10-17T18:04:43.970066",
    "response_time": "6.33",
    "context": "{\"function_name\": \"find_even_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 167,
    "solution": "import math\n\ndef next_power_of_2(n):\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):",
    "timestamp": "2025-10-17T18:04:46.122850",
    "response_time": "2.15",
    "context": "{\"function_name\": \"next_power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 168,
    "solution": "def frequency(a, x):\n    return a.count(x)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):",
    "timestamp": "2025-10-17T18:04:47.376392",
    "response_time": "1.25",
    "context": "{\"function_name\": \"frequency\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 170,
    "solution": "def sum_range_list(list1, m, n):\n    return sum(list1[m:n+1])",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):",
    "timestamp": "2025-10-17T18:04:49.339539",
    "response_time": "1.96",
    "context": "{\"function_name\": \"sum_range_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 171,
    "solution": "def perimeter_pentagon(a):\n    return 5 * a",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):",
    "timestamp": "2025-10-17T18:04:52.161735",
    "response_time": "2.82",
    "context": "{\"function_name\": \"perimeter_pentagon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 172,
    "solution": "def count_occurance(s):\n    return s.count('std')",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):",
    "timestamp": "2025-10-17T18:04:53.570471",
    "response_time": "1.41",
    "context": "{\"function_name\": \"count_occurance\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 222,
    "solution": "def check_type(test_tuple):\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all(isinstance(element, first_type) for element in test_tuple)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):",
    "timestamp": "2025-10-17T18:04:56.222764",
    "response_time": "2.65",
    "context": "{\"function_name\": \"check_type\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 223,
    "solution": "def binary_search(arr, n, x):\n    # Find the first occurrence of x\n    first_occurrence = binary_search_first(arr, 0, n - 1, x)\n    \n    # If x is not present in the array, it cannot be the majority element\n    if first_occurrence == -1:\n        return False\n    \n    # Calculate the index of the last occurrence of x\n    last_occurrence = first_occurrence + n // 2\n    \n    # Check if the element at last_occurrence is x\n    if last_occurrence < n and arr[last_occurrence] == x:\n        return True\n    \n    return False\n\ndef binary_search_first(arr, low, high, x):\n    while low <= high:\n        mid = low + (high - low) // 2\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):",
    "timestamp": "2025-10-17T18:05:06.857350",
    "response_time": "10.63",
    "context": "{\"function_name\": \"binary_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 224,
    "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):",
    "timestamp": "2025-10-17T18:05:09.242222",
    "response_time": "2.38",
    "context": "{\"function_name\": \"count_Set_Bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 226,
    "solution": "def odd_values_string(str):\n    return str[::2]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove the characters which have odd index values of a given string.\n\n### Signature\ndef odd_values_string(str):",
    "timestamp": "2025-10-17T18:05:10.695035",
    "response_time": "1.45",
    "context": "{\"function_name\": \"odd_values_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 227,
    "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find minimum of three numbers.\n\n### Signature\ndef min_of_three(a,b,c):",
    "timestamp": "2025-10-17T18:05:12.316741",
    "response_time": "1.62",
    "context": "{\"function_name\": \"min_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 228,
    "solution": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a mask with bits set in the range [l, r]\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    # Apply the mask to n\n    masked_n = n & mask\n    # Check if all bits in the range are set\n    return masked_n == mask",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether all the bits are unset in the given range or not.\n\n### Signature\ndef all_Bits_Set_In_The_Given_Range(n,l,r):",
    "timestamp": "2025-10-17T18:05:17.689927",
    "response_time": "5.37",
    "context": "{\"function_name\": \"all_Bits_Set_In_The_Given_Range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 229,
    "solution": "def re_arrange_array(arr, n):\n    # Separate negative and positive elements\n    negative_elements = [arr[i] for i in range(n) if arr[i] < 0]\n    positive_elements = [arr[i] for i in range(n) if arr[i] >= 0]\n    \n    # Combine them back with negatives first\n    arr[:n] = negative_elements + positive_elements",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n### Signature\ndef re_arrange_array(arr, n):",
    "timestamp": "2025-10-17T18:05:22.126315",
    "response_time": "4.43",
    "context": "{\"function_name\": \"re_arrange_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 230,
    "solution": "def replace_blank(str1, char):\n    return str1.replace(' ', char)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n### Signature\ndef replace_blank(str1,char):",
    "timestamp": "2025-10-17T18:05:23.663122",
    "response_time": "1.53",
    "context": "{\"function_name\": \"replace_blank\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 232,
    "solution": "from heapq import nlargest\n\ndef larg_nnum(list1, n):\n    return nlargest(n, list1)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n### Signature\ndef larg_nnum(list1,n):",
    "timestamp": "2025-10-17T18:05:25.476868",
    "response_time": "1.81",
    "context": "{\"function_name\": \"larg_nnum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 233,
    "solution": "import math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cylinder.\n\n### Signature\ndef lateralsuface_cylinder(r,h):",
    "timestamp": "2025-10-17T18:05:27.282916",
    "response_time": "1.80",
    "context": "{\"function_name\": \"lateralsuface_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 234,
    "solution": "def volume_cube(l):\n    return l ** 3",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the volume of a cube given its side length.\n\n### Signature\ndef volume_cube(l):",
    "timestamp": "2025-10-17T18:05:28.637835",
    "response_time": "1.35",
    "context": "{\"function_name\": \"volume_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 235,
    "solution": "def even_bit_set_number(n):\n    # Initialize a mask with all even bits set to 1\n    mask = 0\n    bit_position = 0\n    \n    # Create a mask with even bits set to 1\n    while (1 << bit_position) <= n:\n        if bit_position % 2 == 0:\n            mask |= (1 << bit_position)\n        bit_position += 1\n    \n    # Set the even bits of n using the mask\n    result = n | mask\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to set all even bits of a given number.\n\n### Signature\ndef even_bit_set_number(n):",
    "timestamp": "2025-10-17T18:05:35.835588",
    "response_time": "7.19",
    "context": "{\"function_name\": \"even_bit_set_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 237,
    "solution": "from collections import defaultdict\n\ndef check_occurences(test_list):\n    occurence_dict = defaultdict(int)\n    for item in test_list:\n        occurence_dict[item] += 1\n    return dict(occurence_dict)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n### Signature\ndef check_occurences(test_list):",
    "timestamp": "2025-10-17T18:05:38.806223",
    "response_time": "2.97",
    "context": "{\"function_name\": \"check_occurences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 238,
    "solution": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of non-empty substrings of a given string.\n\n### Signature\ndef number_of_substrings(str):",
    "timestamp": "2025-10-17T18:05:40.839706",
    "response_time": "2.03",
    "context": "{\"function_name\": \"number_of_substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 239,
    "solution": "from functools import lru_cache\n\ndef get_total_number_of_sequences(m, n):\n    @lru_cache(None)\n    def count_sequences(current, length):\n        if length == n:\n            return 1\n        total = 0\n        for next_value in range(current * 2, m + 1):\n            total += count_sequences(next_value, length + 1)\n        return total\n\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, 1)\n\n    return total_sequences",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n### Signature\ndef get_total_number_of_sequences(m,n):",
    "timestamp": "2025-10-17T18:05:46.804909",
    "response_time": "5.96",
    "context": "{\"function_name\": \"get_total_number_of_sequences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 240,
    "solution": "def replace_list(list1, list2):\n    if list1:\n        list1[-1:] = list2\n    return list1",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\n### Signature\ndef replace_list(list1,list2):",
    "timestamp": "2025-10-17T18:05:48.877236",
    "response_time": "2.06",
    "context": "{\"function_name\": \"replace_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 242,
    "solution": "def count_charac(str1):\n    return len(str1)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the total number of characters in a string.\n\n### Signature\ndef count_charac(str1):",
    "timestamp": "2025-10-17T18:05:51.158029",
    "response_time": "2.27",
    "context": "{\"function_name\": \"count_charac\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 244,
    "solution": "import math\n\ndef next_Perfect_Square(N):\n    root = math.ceil(math.sqrt(N))\n    return root * root",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the next perfect square greater than a given number.\n\n### Signature\ndef next_Perfect_Square(N):",
    "timestamp": "2025-10-17T18:05:53.246281",
    "response_time": "2.08",
    "context": "{\"function_name\": \"next_Perfect_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 245,
    "solution": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize two arrays to store the maximum sum of increasing and decreasing subsequences\n    inc = [0] * n\n    dec = [0] * n\n\n    # Fill inc[] such that inc[i] stores the maximum sum of increasing subsequence ending with arr[i]\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n\n    # Fill dec[] such that dec[i] stores the maximum sum of decreasing subsequence starting with arr[i]\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n\n    # Find the maximum sum of bitonic subsequence\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n\n    return max_sum_bitonic",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\n### Signature\ndef max_sum(arr):",
    "timestamp": "2025-10-17T18:06:06.827354",
    "response_time": "13.58",
    "context": "{\"function_name\": \"max_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 246,
    "solution": "import math\n\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot compute the square root of a negative number.\")\n    if number == 0:\n        return 0\n    \n    guess = number / 2.0\n    tolerance = 1e-10\n    \n    while True:\n        new_guess = (guess + number / guess) / 2.0\n        if abs(new_guess - guess) < tolerance:\n            return new_guess\n        guess = new_guess",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function for computing square roots using the babylonian method.\n\n### Signature\ndef babylonian_squareroot(number):",
    "timestamp": "2025-10-17T18:06:12.207385",
    "response_time": "5.38",
    "context": "{\"function_name\": \"babylonian_squareroot\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 247,
    "solution": "def lps(str):\n    n = len(str)\n    # Create a table to store results of subproblems\n    L = [[0 for x in range(n)] for y in range(n)]\n \n    # Strings of length 1 are palindrome of length 1\n    for i in range(n):\n        L[i][i] = 1\n \n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process. cl is length of substring\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]);\n \n    # length of the longest palindromic subseq\n    return L[0][n - 1]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n\n### Signature\ndef lps(str):",
    "timestamp": "2025-10-17T18:06:24.043332",
    "response_time": "11.83",
    "context": "{\"function_name\": \"lps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 248,
    "solution": "def harmonic_sum(n):\n    if n <= 0:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n - 1)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in an integer n and calculates the harmonic sum of n-1.\n\n### Signature\ndef harmonic_sum(n):",
    "timestamp": "2025-10-17T18:06:26.320715",
    "response_time": "2.27",
    "context": "{\"function_name\": \"harmonic_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 249,
    "solution": "def intersection_array(array_nums1, array_nums2):\n    return list(set(array_nums1) & set(array_nums2))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the intersection of two arrays.\n\n### Signature\ndef intersection_array(array_nums1,array_nums2):",
    "timestamp": "2025-10-17T18:06:28.176422",
    "response_time": "1.85",
    "context": "{\"function_name\": \"intersection_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 250,
    "solution": "def count_X(tup, x):\n    return tup.count(x)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\n### Signature\ndef count_X(tup, x):",
    "timestamp": "2025-10-17T18:06:29.582404",
    "response_time": "1.40",
    "context": "{\"function_name\": \"count_X\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 251,
    "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\n### Signature\ndef insert_element(list,element):",
    "timestamp": "2025-10-17T18:06:31.794090",
    "response_time": "2.21",
    "context": "{\"function_name\": \"insert_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 252,
    "solution": "import cmath\n\ndef convert(numbers):\n    polar_coordinates = []\n    for number in numbers:\n        polar = cmath.polar(number)\n        polar_coordinates.append(polar)\n    return polar_coordinates",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to convert complex numbers to polar coordinates.\n\n### Signature\ndef convert(numbers):",
    "timestamp": "2025-10-17T18:06:34.104259",
    "response_time": "2.31",
    "context": "{\"function_name\": \"convert\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 253,
    "solution": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function that returns the number of integer elements in a given list.\n\n### Signature\ndef count_integer(list1):",
    "timestamp": "2025-10-17T18:06:36.481001",
    "response_time": "2.36",
    "context": "{\"function_name\": \"count_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 255,
    "solution": "from itertools import product\n\ndef combinations_colors(l, n):\n    return list(product(l, repeat=n))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\n### Signature\ndef combinations_colors(l, n):",
    "timestamp": "2025-10-17T18:06:37.903519",
    "response_time": "1.41",
    "context": "{\"function_name\": \"combinations_colors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 256,
    "solution": "import math\n\ndef count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n### Signature\ndef count_Primes_nums(n):",
    "timestamp": "2025-10-17T18:06:43.011920",
    "response_time": "5.10",
    "context": "{\"function_name\": \"count_Primes_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 257,
    "solution": "def swap_numbers(a, b):\n    return (b, a)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\n### Signature\ndef swap_numbers(a,b):",
    "timestamp": "2025-10-17T18:06:44.346585",
    "response_time": "1.33",
    "context": "{\"function_name\": \"swap_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 259,
    "solution": "def maximize_elements(test_tup1, test_tup2):\n    return tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to maximize the given two tuples.\n\n### Signature\ndef maximize_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:06:46.818963",
    "response_time": "2.47",
    "context": "{\"function_name\": \"maximize_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 260,
    "solution": "import math\n\ndef newman_prime(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    count = 0\n    k = 1\n    while True:\n        newman_num = (2 ** k) + 1\n        if is_prime(newman_num):\n            count += 1\n            if count == n:\n                return newman_num\n        k += 1",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n### Signature\ndef newman_prime(n):",
    "timestamp": "2025-10-17T18:06:55.220309",
    "response_time": "8.40",
    "context": "{\"function_name\": \"newman_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 261,
    "solution": "def division_elements(test_tup1, test_tup2):\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n### Signature\ndef division_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:06:57.524761",
    "response_time": "2.30",
    "context": "{\"function_name\": \"division_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 262,
    "solution": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\n### Signature\ndef split_two_parts(list1, L):",
    "timestamp": "2025-10-17T18:06:59.166515",
    "response_time": "1.64",
    "context": "{\"function_name\": \"split_two_parts\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 264,
    "solution": "def dog_age(h_age):\n    if h_age < 0:\n        return \"Age must be positive\"\n    elif h_age <= 2:\n        d_age = h_age * 10.5\n    else:\n        d_age = 21 + (h_age - 2) * 4\n    return d_age",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate a dog's age in dog's years.\n\n### Signature\ndef dog_age(h_age):",
    "timestamp": "2025-10-17T18:07:03.023579",
    "response_time": "3.85",
    "context": "{\"function_name\": \"dog_age\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 265,
    "solution": "def list_split(S, step):\n    return [S[i:i + step] for i in range(0, len(S), step)]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\n### Signature\ndef list_split(S, step):",
    "timestamp": "2025-10-17T18:07:05.130349",
    "response_time": "2.10",
    "context": "{\"function_name\": \"list_split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 266,
    "solution": "def lateralsurface_cube(l):\n    return 4 * l * l",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cube given its side length.\n\n### Signature\ndef lateralsurface_cube(l):",
    "timestamp": "2025-10-17T18:07:06.594192",
    "response_time": "1.46",
    "context": "{\"function_name\": \"lateralsurface_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 267,
    "solution": "def square_Sum(n):\n    total = 0\n    for i in range(n):\n        odd_number = 2 * i + 1\n        total += odd_number ** 2\n    return total",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n### Signature\ndef square_Sum(n):",
    "timestamp": "2025-10-17T18:07:09.288962",
    "response_time": "2.69",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 268,
    "solution": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n'th star number.\n\n### Signature\ndef find_star_num(n):",
    "timestamp": "2025-10-17T18:07:11.039133",
    "response_time": "1.75",
    "context": "{\"function_name\": \"find_star_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 269,
    "solution": "def ascii_value(k):\n    return ord(k)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the ascii value of a character.\n\n### Signature\ndef ascii_value(k):",
    "timestamp": "2025-10-17T18:07:12.200397",
    "response_time": "1.16",
    "context": "{\"function_name\": \"ascii_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 270,
    "solution": "def sum_even_and_even_index(arr):\n    total = 0\n    for index in range(0, len(arr), 2):\n        if arr[index] % 2 == 0:\n            total += arr[index]\n    return total",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of even numbers at even positions of a list.\n\n### Signature\ndef sum_even_and_even_index(arr):",
    "timestamp": "2025-10-17T18:07:15.226010",
    "response_time": "3.02",
    "context": "{\"function_name\": \"sum_even_and_even_index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 271,
    "solution": "def even_Power_Sum(n):\n    total_sum = 0\n    count = 0\n    number = 2\n    while count < n:\n        total_sum += number ** 5\n        count += 1\n        number += 2\n    return total_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n### Signature\ndef even_Power_Sum(n):",
    "timestamp": "2025-10-17T18:07:18.627330",
    "response_time": "3.39",
    "context": "{\"function_name\": \"even_Power_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 272,
    "solution": "def rear_extract(test_list):\n    return [sub[-1] for sub in test_list]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n### Signature\ndef rear_extract(test_list):",
    "timestamp": "2025-10-17T18:07:20.193403",
    "response_time": "1.56",
    "context": "{\"function_name\": \"rear_extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 273,
    "solution": "def substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n### Signature\ndef substract_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:07:22.599206",
    "response_time": "2.40",
    "context": "{\"function_name\": \"substract_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 274,
    "solution": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    for i in range(0, n + 1, 2):\n        total_sum += comb(n, i)\n    return total_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n### Signature\ndef even_binomial_Coeff_Sum( n):",
    "timestamp": "2025-10-17T18:07:25.536331",
    "response_time": "2.93",
    "context": "{\"function_name\": \"even_binomial_Coeff_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 276,
    "solution": "import math\n\ndef volume_cylinder(r, h):\n    return math.pi * r**2 * h",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n\n### Signature\ndef volume_cylinder(r,h):",
    "timestamp": "2025-10-17T18:07:26.992181",
    "response_time": "1.45",
    "context": "{\"function_name\": \"volume_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 277,
    "solution": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n### Signature\ndef dict_filter(dict,n):",
    "timestamp": "2025-10-17T18:07:28.842455",
    "response_time": "1.84",
    "context": "{\"function_name\": \"dict_filter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 278,
    "solution": "def count_first_elements(test_tup):\n    # Initialize a counter for elements before the tuple element\n    count = 0\n    \n    # Iterate through the tuple\n    for ele in test_tup:\n        # Check if the current element is a tuple\n        if isinstance(ele, tuple):\n            # Return the count of elements before the tuple element\n            return count\n        # Increment the counter for each non-tuple element\n        count += 1\n    \n    # If no tuple element is found, return the total count of elements\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n\n### Signature\ndef count_first_elements(test_tup):",
    "timestamp": "2025-10-17T18:07:34.605529",
    "response_time": "5.76",
    "context": "{\"function_name\": \"count_first_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 279,
    "solution": "def is_num_decagonal(n):\n    if n < 1:\n        return False\n    # Formula to check if a number is a decagonal number\n    # n = 4k^2 - 3k\n    # Rearranging, we get a quadratic equation: 4k^2 - 3k - n = 0\n    # Using the quadratic formula: k = (3 \u00b1 sqrt(9 + 16n)) / 8\n    discriminant = 9 + 16 * n\n    if discriminant < 0:\n        return False\n    sqrt_discriminant = int(discriminant**0.5)\n    if sqrt_discriminant * sqrt_discriminant != discriminant:\n        return False\n    k1 = (3 + sqrt_discriminant) / 8\n    k2 = (3 - sqrt_discriminant) / 8\n    # Check if either k1 or k2 is a positive integer\n    return k1.is_integer() or k2.is_integer()",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth decagonal number.\n\n### Signature\ndef is_num_decagonal(n):",
    "timestamp": "2025-10-17T18:07:45.168218",
    "response_time": "10.56",
    "context": "{\"function_name\": \"is_num_decagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 280,
    "solution": "def sequential_search(dlist, item):\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n### Signature\ndef sequential_search(dlist, item):",
    "timestamp": "2025-10-17T18:07:47.782174",
    "response_time": "2.61",
    "context": "{\"function_name\": \"sequential_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 281,
    "solution": "def all_unique(test_list):\n    return len(test_list) == len(set(test_list))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check if the elements of a given list are unique or not.\n\n### Signature\ndef all_unique(test_list):",
    "timestamp": "2025-10-17T18:07:49.302588",
    "response_time": "1.52",
    "context": "{\"function_name\": \"all_unique\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 282,
    "solution": "def sub_list(nums1, nums2):\n    return [a - b for a, b in zip(nums1, nums2)]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to subtract two lists element-wise.\n\n### Signature\ndef sub_list(nums1,nums2):",
    "timestamp": "2025-10-17T18:07:51.251456",
    "response_time": "1.94",
    "context": "{\"function_name\": \"sub_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 283,
    "solution": "from collections import Counter\n\ndef validate(n):\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Count the frequency of each digit\n    digit_count = Counter(str_n)\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    \n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n### Signature\ndef validate(n):",
    "timestamp": "2025-10-17T18:07:55.948140",
    "response_time": "4.69",
    "context": "{\"function_name\": \"validate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 284,
    "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\n### Signature\ndef check_element(list,element):",
    "timestamp": "2025-10-17T18:07:57.502195",
    "response_time": "1.55",
    "context": "{\"function_name\": \"check_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 285,
    "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n### Signature\ndef text_match_two_three(text):",
    "timestamp": "2025-10-17T18:07:59.329040",
    "response_time": "1.82",
    "context": "{\"function_name\": \"text_match_two_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 286,
    "solution": "def max_sub_array_sum_repeated(a, n, k):\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    if k == 1:\n        return kadane(a)\n\n    max_kadane = kadane(a)\n    max_prefix_sum = max_suffix_sum = float('-inf')\n    total_sum = sum(a)\n\n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n\n    current_suffix_sum = 0\n    for i in range(n-1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n\n    if total_sum > 0:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum + (k-2) * total_sum)\n    else:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n### Signature\ndef max_sub_array_sum_repeated(a, n, k):",
    "timestamp": "2025-10-17T18:08:11.423333",
    "response_time": "12.09",
    "context": "{\"function_name\": \"max_sub_array_sum_repeated\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 287,
    "solution": "def square_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 2\n    return total",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n### Signature\ndef square_Sum(n):",
    "timestamp": "2025-10-17T18:08:14.261515",
    "response_time": "2.83",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 290,
    "solution": "def max_length(list1):\n    if not list1:\n        return None\n    return max(list1, key=len)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the list of maximum length in a list of lists.\n\n### Signature\ndef max_length(list1):",
    "timestamp": "2025-10-17T18:08:16.115403",
    "response_time": "1.85",
    "context": "{\"function_name\": \"max_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 291,
    "solution": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    same = 0\n    diff = k\n    \n    for i in range(2, n + 1):\n        new_same = diff\n        new_diff = (same + diff) * (k - 1)\n        \n        same = new_same\n        diff = new_diff\n    \n    return same + diff",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n### Signature\ndef count_no_of_ways(n, k):",
    "timestamp": "2025-10-17T18:08:21.290746",
    "response_time": "5.17",
    "context": "{\"function_name\": \"count_no_of_ways\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 292,
    "solution": "from math import floor\n\ndef find(n, m):\n    if m == 0:\n        raise ValueError(\"Division by zero is not allowed\")\n    return floor(n / m)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n### Signature\ndef find(n,m):",
    "timestamp": "2025-10-17T18:08:23.434787",
    "response_time": "2.14",
    "context": "{\"function_name\": \"find\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 293,
    "solution": "import math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w**2 + h**2)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the third side of a right angled triangle.\n\n### Signature\ndef otherside_rightangle(w,h):",
    "timestamp": "2025-10-17T18:08:25.015218",
    "response_time": "1.57",
    "context": "{\"function_name\": \"otherside_rightangle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 294,
    "solution": "from typing import List, Union\n\ndef max_val(listval: List[Union[int, float]]) -> Union[int, float]:\n    if not listval:\n        raise ValueError(\"The list is empty\")\n    \n    max_value = listval[0]\n    for value in listval:\n        if value > max_value:\n            max_value = value\n    return max_value",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum value in a given heterogeneous list.\n\n### Signature\ndef max_val(listval):",
    "timestamp": "2025-10-17T18:08:28.979932",
    "response_time": "3.96",
    "context": "{\"function_name\": \"max_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 295,
    "solution": "def sum_div(number):\n    if number < 1:\n        return 0\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to return the sum of all divisors of a number.\n\n### Signature\ndef sum_div(number):",
    "timestamp": "2025-10-17T18:08:32.148023",
    "response_time": "3.16",
    "context": "{\"function_name\": \"sum_div\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 296,
    "solution": "def get_Inv_Count(arr):\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left    # Starting index for left subarray\n        j = mid + 1 # Starting index for right subarray\n        k = left    # Starting index to be sorted\n        inv_count = 0\n\n        # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                # There are mid - i inversions, because all the remaining elements in the left subarray\n                # (arr[i...mid]) are greater than arr[j]\n                temp_arr[k] = arr[j]\n                inv_count += (mid-i + 1)\n                j += 1\n            k += 1\n\n        # Copy the remaining elements of left subarray, if any\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n\n        # Copy the remaining elements of right subarray, if any\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n\n        # Copy the sorted subarray into Original array\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        \n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right)//2\n\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n        return inv_count\n\n    n = len(arr)\n    temp_arr = [0]*n\n    return merge_sort_and_count(arr, temp_arr, 0, n-1)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count inversions in an array.\n\n### Signature\ndef get_Inv_Count(arr):",
    "timestamp": "2025-10-17T18:08:52.849519",
    "response_time": "20.70",
    "context": "{\"function_name\": \"get_Inv_Count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 297,
    "solution": "def flatten_list(list1):\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to flatten a given nested list structure.\n\n### Signature\ndef flatten_list(list1):",
    "timestamp": "2025-10-17T18:08:55.521258",
    "response_time": "2.67",
    "context": "{\"function_name\": \"flatten_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 299,
    "solution": "def max_aggregate(stdata):\n    return max(sum(tup) for tup in stdata)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\n### Signature\ndef max_aggregate(stdata):",
    "timestamp": "2025-10-17T18:08:57.098296",
    "response_time": "1.57",
    "context": "{\"function_name\": \"max_aggregate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 300,
    "solution": "from math import comb\n\ndef count_binary_seq(n):\n    total_count = 0\n    for k in range(n + 1):\n        total_count += comb(n, k) ** 2\n    return total_count",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n### Signature\ndef count_binary_seq(n):",
    "timestamp": "2025-10-17T18:08:59.694752",
    "response_time": "2.59",
    "context": "{\"function_name\": \"count_binary_seq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 301,
    "solution": "def dict_depth(d):\n    if isinstance(d, dict):\n        if d:\n            return 1 + max(dict_depth(v) for v in d.values())\n        return 1\n    return 0",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the depth of a dictionary.\n\n### Signature\ndef dict_depth(d):",
    "timestamp": "2025-10-17T18:09:02.449844",
    "response_time": "2.75",
    "context": "{\"function_name\": \"dict_depth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 304,
    "solution": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    \n    # Apply rotations from the last to the first\n    for i in range(rotations - 1, -1, -1):\n        left = ranges[i][0]\n        right = ranges[i][1]\n        \n        # If the index is within the current range, adjust the index\n        if left <= index <= right:\n            if index == left:\n                index = right\n            else:\n                index -= 1\n    \n    return arr[index]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find element at a given index after number of rotations.\n\n### Signature\ndef find_Element(arr,ranges,rotations,index) :",
    "timestamp": "2025-10-17T18:09:08.125851",
    "response_time": "5.67",
    "context": "{\"function_name\": \"find_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 305,
    "solution": "def start_withp(words):\n    return [word for word in words if word.startswith('p')][:2]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to return two words from a list of words starting with letter 'p'.\n\n### Signature\ndef start_withp(words):",
    "timestamp": "2025-10-17T18:09:09.837461",
    "response_time": "1.71",
    "context": "{\"function_name\": \"start_withp\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 306,
    "solution": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the dp array where dp[i] will store the maximum sum of increasing subsequence ending at index i\n    dp = [0] * n\n    \n    # Base case: the maximum sum of increasing subsequence ending at the first element is the element itself\n    dp[0] = a[0]\n    \n    # Fill the dp array for elements from 1 to index\n    for i in range(1, index + 1):\n        dp[i] = a[i]  # Start with the element itself\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + a[i]:\n                dp[i] = dp[j] + a[i]\n    \n    # Now, consider the element at index k which is after the given index\n    max_sum = dp[index]\n    for i in range(index):\n        if a[i] < a[k] and max_sum < dp[i] + a[k]:\n            max_sum = dp[i] + a[k]\n    \n    return max_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\n### Signature\ndef max_sum_increasing_subseq(a, n, index, k):",
    "timestamp": "2025-10-17T18:09:20.935141",
    "response_time": "11.09",
    "context": "{\"function_name\": \"max_sum_increasing_subseq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 307,
    "solution": "def colon_tuplex(tuplex, m, n):\n    return tuplex[m:n]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to get a colon of a tuple.\n\n### Signature\ndef colon_tuplex(tuplex,m,n):",
    "timestamp": "2025-10-17T18:09:22.633275",
    "response_time": "1.69",
    "context": "{\"function_name\": \"colon_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 308,
    "solution": "from heapq import nlargest\n\ndef large_product(nums1, nums2, N):\n    # Generate all possible products\n    products = [x * y for x in nums1 for y in nums2]\n    # Find the N largest products\n    return nlargest(N, products)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n### Signature\ndef large_product(nums1, nums2, N):",
    "timestamp": "2025-10-17T18:09:26.019397",
    "response_time": "3.38",
    "context": "{\"function_name\": \"large_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 309,
    "solution": "def maximum(a, b):\n    return a if a > b else b",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the maximum of two numbers.\n\n### Signature\ndef maximum(a,b):",
    "timestamp": "2025-10-17T18:09:27.476187",
    "response_time": "1.45",
    "context": "{\"function_name\": \"maximum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 310,
    "solution": "def string_to_tuple(str1):\n    return tuple(str1)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a given string to a tuple of characters.\n\n### Signature\ndef string_to_tuple(str1):",
    "timestamp": "2025-10-17T18:09:28.589075",
    "response_time": "1.11",
    "context": "{\"function_name\": \"string_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 311,
    "solution": "def set_left_most_unset_bit(n):\n    # If n is 0, the leftmost unset bit is the least significant bit (LSB)\n    if n == 0:\n        return 1\n    \n    # Find the position of the leftmost unset bit\n    position = 0\n    while ((1 << position) & n) != 0:\n        position += 1\n    \n    # Set the leftmost unset bit\n    return n | (1 << position)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to set the left most unset bit.\n\n### Signature\ndef set_left_most_unset_bit(n):",
    "timestamp": "2025-10-17T18:09:33.684432",
    "response_time": "5.09",
    "context": "{\"function_name\": \"set_left_most_unset_bit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 312,
    "solution": "import math\n\ndef volume_cone(r, h):\n    return (1/3) * math.pi * r**2 * h",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the volume of a cone.\n\n### Signature\ndef volume_cone(r,h):",
    "timestamp": "2025-10-17T18:09:35.424621",
    "response_time": "1.74",
    "context": "{\"function_name\": \"volume_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 388,
    "solution": "import math\n\ndef highest_Power_of_2(n):\n    return 2 ** math.floor(math.log2(n))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\n### Signature\ndef highest_Power_of_2(n):",
    "timestamp": "2025-10-17T18:09:37.032875",
    "response_time": "1.60",
    "context": "{\"function_name\": \"highest_Power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 389,
    "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n'th lucas number.\n\n### Signature\ndef find_lucas(n):",
    "timestamp": "2025-10-17T18:09:40.997533",
    "response_time": "3.96",
    "context": "{\"function_name\": \"find_lucas\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 390,
    "solution": "def add_string(list_, string):\n    return [f\"{element}{string}\" for element in list_]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to apply a given format string to all of the elements in a list.\n\n### Signature\ndef add_string(list_, string):",
    "timestamp": "2025-10-17T18:09:42.700775",
    "response_time": "1.70",
    "context": "{\"function_name\": \"add_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 391,
    "solution": "def convert_list_dictionary(l1, l2, l3):\n    if not (len(l1) == len(l2) == len(l3)):\n        raise ValueError(\"All lists must have the same length.\")\n    \n    nested_dict = {}\n    for key1, key2, value in zip(l1, l2, l3):\n        if key1 not in nested_dict:\n            nested_dict[key1] = {}\n        nested_dict[key1][key2] = value\n    \n    return nested_dict",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert more than one list to nested dictionary.\n\n### Signature\ndef convert_list_dictionary(l1, l2, l3):",
    "timestamp": "2025-10-17T18:09:47.960512",
    "response_time": "5.25",
    "context": "{\"function_name\": \"convert_list_dictionary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 392,
    "solution": "def get_max_sum (n):\n    # Base case: if n is 0, the maximum sum is 0\n    if n == 0:\n        return 0\n    \n    # Calculate the sum of the function values for n/2, n/3, n/4, and n/5\n    sum_of_parts = get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5)\n    \n    # Return the maximum of the sum of parts and n itself\n    return max(sum_of_parts, n)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n### Signature\ndef get_max_sum (n):",
    "timestamp": "2025-10-17T18:09:54.311042",
    "response_time": "6.34",
    "context": "{\"function_name\": \"get_max_sum \"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 393,
    "solution": "def max_length_list(input_list):\n    if not input_list:\n        return None\n    max_list = max(input_list, key=len)\n    return max_list",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the list with maximum length.\n\n### Signature\ndef max_length_list(input_list):",
    "timestamp": "2025-10-17T18:09:56.440077",
    "response_time": "2.12",
    "context": "{\"function_name\": \"max_length_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 394,
    "solution": "def check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if given tuple contains no duplicates.\n\n### Signature\ndef check_distinct(test_tup):",
    "timestamp": "2025-10-17T18:09:58.102215",
    "response_time": "1.66",
    "context": "{\"function_name\": \"check_distinct\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 395,
    "solution": "def first_non_repeating_character(str1):\n    char_count = {}\n    \n    # Count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the first non-repeated character in a given string.\n\n### Signature\ndef first_non_repeating_character(str1):",
    "timestamp": "2025-10-17T18:10:03.052713",
    "response_time": "4.95",
    "context": "{\"function_name\": \"first_non_repeating_character\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 396,
    "solution": "def check_char(string):\n    if not string:\n        return False\n    return string[0] == string[-1]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given string starts and ends with the same character or not.\n\n### Signature\ndef check_char(string):",
    "timestamp": "2025-10-17T18:10:04.847597",
    "response_time": "1.79",
    "context": "{\"function_name\": \"check_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 397,
    "solution": "def median_numbers(a, b, c):\n    if (a > b and a < c) or (a < b and a > c):\n        return a\n    elif (b > a and b < c) or (b < a and b > c):\n        return b\n    else:\n        return c",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the median of three numbers.\n\n### Signature\ndef median_numbers(a,b,c):",
    "timestamp": "2025-10-17T18:10:08.445544",
    "response_time": "3.59",
    "context": "{\"function_name\": \"median_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 398,
    "solution": "def sum_of_digits(nums):\n    return [sum(int(digit) for digit in str(num)) for num in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to compute the sum of digits of each number of a given list.\n\n### Signature\ndef sum_of_digits(nums):",
    "timestamp": "2025-10-17T18:10:10.318948",
    "response_time": "1.87",
    "context": "{\"function_name\": \"sum_of_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 399,
    "solution": "def bitwise_xor(test_tup1, test_tup2):\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\n### Signature\ndef bitwise_xor(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:10:12.588489",
    "response_time": "2.26",
    "context": "{\"function_name\": \"bitwise_xor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 400,
    "solution": "from collections import Counter\n\ndef extract_freq(test_list):\n    # Convert list of tuples to a Counter object to count occurrences\n    tuple_counts = Counter(test_list)\n    # Return the number of unique tuples\n    return len(tuple_counts)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract the number of unique tuples in the given list.\n\n### Signature\ndef extract_freq(test_list):",
    "timestamp": "2025-10-17T18:10:15.232821",
    "response_time": "2.64",
    "context": "{\"function_name\": \"extract_freq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 401,
    "solution": "def add_nested_tuples(test_tup1, test_tup2):\n    res = tuple(tuple(a + b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n    return res",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n### Signature\ndef add_nested_tuples(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:10:18.485326",
    "response_time": "3.25",
    "context": "{\"function_name\": \"add_nested_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 404,
    "solution": "def minimum(a, b):\n    return a if a < b else b",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the minimum of two numbers.\n\n### Signature\ndef minimum(a,b):",
    "timestamp": "2025-10-17T18:10:19.954371",
    "response_time": "1.46",
    "context": "{\"function_name\": \"minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 405,
    "solution": "def check_tuplex(tuplex, tuple1):\n    return tuple1 in tuplex",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether an element exists within a tuple.\n\n### Signature\ndef check_tuplex(tuplex,tuple1):",
    "timestamp": "2025-10-17T18:10:21.596589",
    "response_time": "1.64",
    "context": "{\"function_name\": \"check_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 406,
    "solution": "def find_Parity(x):\n    return x % 2 != 0",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find whether the parity of a given number is odd.\n\n### Signature\ndef find_Parity(x):",
    "timestamp": "2025-10-17T18:10:23.045256",
    "response_time": "1.44",
    "context": "{\"function_name\": \"find_Parity\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 407,
    "solution": "from typing import List\n\ndef rearrange_bigger(n: int) -> int:\n    # Convert the number to a list of its digits\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Traverse the list from the end to find the first digit that is smaller than the digit next to it\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            # Find the smallest digit on the right side of (i-th digit) which is larger than digits[i]\n            for j in range(length - 1, i, -1):\n                if digits[j] > digits[i]:\n                    # Swap the found digit with the i-th digit\n                    digits[i], digits[j] = digits[j], digits[i]\n                    # Reverse the sequence from (i+1) to end\n                    digits = digits[:i + 1] + digits[i + 1:][::-1]\n                    # Convert the list of digits back to an integer and return\n                    return int(''.join(digits))\n    # If no such digit is found, return -1 as no bigger number can be formed\n    return -1",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\n### Signature\ndef rearrange_bigger(n):",
    "timestamp": "2025-10-17T18:10:34.548770",
    "response_time": "11.50",
    "context": "{\"function_name\": \"rearrange_bigger\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 408,
    "solution": "from heapq import heappush, heappop\n\ndef push(nums1, nums2, k):\n    if not nums1 or not nums2 or k <= 0:\n        return []\n\n    min_heap = []\n    result = []\n\n    # Initialize the heap with the first element of nums2 paired with each element of nums1\n    for i in range(min(k, len(nums1))):\n        heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n\n    # Extract the smallest pairs from the heap\n    while min_heap and len(result) < k:\n        _, i, j = heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))\n\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n### Signature\ndef k_smallest_pairs(nums1, nums2, k):",
    "timestamp": "2025-10-17T18:10:43.701942",
    "response_time": "9.15",
    "context": "{\"function_name\": \"push\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 409,
    "solution": "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    min_product = float('inf')\n    for a, b in list1:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\n### Signature\ndef min_product_tuple(list1):",
    "timestamp": "2025-10-17T18:10:47.072655",
    "response_time": "3.37",
    "context": "{\"function_name\": \"min_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 410,
    "solution": "from typing import List, Union\n\ndef min_val(listval: List[Union[int, float]]) -> Union[int, float]:\n    if not listval:\n        raise ValueError(\"The list is empty\")\n    \n    min_value = listval[0]\n    for value in listval:\n        if value < min_value:\n            min_value = value\n    return min_value",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the minimum value in a given heterogeneous list.\n\n### Signature\ndef min_val(listval):",
    "timestamp": "2025-10-17T18:10:50.978429",
    "response_time": "3.90",
    "context": "{\"function_name\": \"min_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 411,
    "solution": "def snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert the given snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
    "timestamp": "2025-10-17T18:10:52.700876",
    "response_time": "1.72",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 412,
    "solution": "def remove_odd(l):\n    return [x for x in l if x % 2 == 0]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove odd numbers from a given list.\n\n### Signature\ndef remove_odd(l):",
    "timestamp": "2025-10-17T18:10:54.473952",
    "response_time": "1.77",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 413,
    "solution": "def extract_nth_element(list1, n):\n    return [tup[n] for tup in list1 if len(tup) > n]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract the nth element from a given list of tuples.\n\n### Signature\ndef extract_nth_element(list1, n):",
    "timestamp": "2025-10-17T18:10:56.580969",
    "response_time": "2.10",
    "context": "{\"function_name\": \"extract_nth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 414,
    "solution": "def overlapping(list1, list2):\n    return any(item in list2 for item in list1)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\n### Signature\ndef overlapping(list1,list2):",
    "timestamp": "2025-10-17T18:10:58.264128",
    "response_time": "1.67",
    "context": "{\"function_name\": \"overlapping\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 415,
    "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    # Initialize the two largest and two smallest numbers\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        # Update the two largest numbers\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        # Update the two smallest numbers\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    # The maximum product can be either from the two largest or two smallest numbers\n    return max(max1 * max2, min1 * min2)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find a pair with highest product from a given array of integers.\n\n### Signature\ndef max_Product(arr):",
    "timestamp": "2025-10-17T18:11:06.966980",
    "response_time": "8.70",
    "context": "{\"function_name\": \"max_Product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 417,
    "solution": "def group_tuples(Input):\n    if not Input:\n        return []\n    \n    # Extract the first element from each tuple\n    first_elements = [t[0] for t in Input]\n    \n    # Find the most common first element\n    from collections import Counter\n    element_counts = Counter(first_elements)\n    most_common_element = element_counts.most_common(1)[0][0]\n    \n    return most_common_element",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find common first element in given list of tuple.\n\n### Signature\ndef group_tuples(Input):",
    "timestamp": "2025-10-17T18:11:11.649692",
    "response_time": "4.68",
    "context": "{\"function_name\": \"group_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 418,
    "solution": "def Find_Max(lst):\n    if not lst:\n        return None\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the element of a list having maximum length.\n\n### Signature\ndef Find_Max(lst):",
    "timestamp": "2025-10-17T18:11:15.234580",
    "response_time": "3.58",
    "context": "{\"function_name\": \"Find_Max\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 419,
    "solution": "def round_and_sum(list1):\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(list1)\n    print(result)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\n### Signature\ndef round_and_sum(list1):",
    "timestamp": "2025-10-17T18:11:17.954539",
    "response_time": "2.71",
    "context": "{\"function_name\": \"round_and_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 420,
    "solution": "def cube_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 3\n    return total",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the cube sum of first n even natural numbers.\n\n### Signature\ndef cube_Sum(n):",
    "timestamp": "2025-10-17T18:11:20.820916",
    "response_time": "2.86",
    "context": "{\"function_name\": \"cube_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 421,
    "solution": "def concatenate_tuple(test_tup):\n    return ''.join(test_tup)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to concatenate each element of tuple by the delimiter.\n\n### Signature\ndef concatenate_tuple(test_tup):",
    "timestamp": "2025-10-17T18:11:22.193532",
    "response_time": "1.36",
    "context": "{\"function_name\": \"concatenate_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 422,
    "solution": "def find_Average_Of_Cube(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += i ** 3\n    average = total_sum / n\n    return average",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the average of cubes of first n natural numbers.\n\n### Signature\ndef find_Average_Of_Cube(n):",
    "timestamp": "2025-10-17T18:11:25.204303",
    "response_time": "3.00",
    "context": "{\"function_name\": \"find_Average_Of_Cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 424,
    "solution": "def extract_rear(test_tuple):\n    return tuple(sub[-1] for sub in test_tuple)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract only the rear index element of each string in the given tuple.\n\n### Signature\ndef extract_rear(test_tuple):",
    "timestamp": "2025-10-17T18:11:26.809669",
    "response_time": "1.60",
    "context": "{\"function_name\": \"extract_rear\"}"
  }
]