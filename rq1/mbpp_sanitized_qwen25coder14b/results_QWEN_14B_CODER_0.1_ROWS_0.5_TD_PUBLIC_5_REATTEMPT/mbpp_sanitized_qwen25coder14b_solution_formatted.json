[
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 2,
    "solution": "def similar_elements(test_tup1, test_tup2):\n    return list(set(test_tup1) & set(test_tup2))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
    "timestamp": "2025-09-20T12:18:47.090440",
    "response_time": "2.29",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 3,
    "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
    "timestamp": "2025-09-20T12:18:49.648749",
    "response_time": "2.56",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 4,
    "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
    "timestamp": "2025-09-20T12:18:50.448112",
    "response_time": "0.80",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 6,
    "solution": "def differ_At_One_Bit_Pos(x):\n    # A number is a power of two if it has exactly one bit set in its binary representation.\n    # This can be checked using the property: x & (x - 1) == 0 and x != 0\n    return x != 0 and (x & (x - 1)) == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
    "timestamp": "2025-09-20T12:18:52.501162",
    "response_time": "2.05",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 7,
    "solution": "def find_char_long(text):\n    words = text.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
    "timestamp": "2025-09-20T12:18:53.706038",
    "response_time": "1.20",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 8,
    "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
    "timestamp": "2025-09-20T12:18:54.520391",
    "response_time": "0.81",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 9,
    "solution": "def find_Rotations(s):\n    n = len(s)\n    temp = s + s\n    for i in range(1, n + 1):\n        substring = temp[i:i + n]\n        if substring == s:\n            return i\n    return n",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
    "timestamp": "2025-09-20T12:18:56.268286",
    "response_time": "1.75",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 11,
    "solution": "def remove_Occ(s, ch):\n    # Find the first occurrence and remove it\n    first_occ_index = s.find(ch)\n    if first_occ_index != -1:\n        s = s[:first_occ_index] + s[first_occ_index + 1:]\n    \n    # Find the last occurrence and remove it\n    last_occ_index = s.rfind(ch)\n    if last_occ_index != -1:\n        s = s[:last_occ_index] + s[last_occ_index + 1:]\n    \n    return s",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
    "timestamp": "2025-09-20T12:18:59.031008",
    "response_time": "2.76",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 12,
    "solution": "def sort_matrix(M):\n    # Sort the matrix based on the sum of each row\n    return sorted(M, key=sum)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
    "timestamp": "2025-09-20T12:19:00.052885",
    "response_time": "1.02",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 14,
    "solution": "import math\n\ndef find_Volume(l, b, h):\n    # Calculate the area of the triangular base\n    base_area = 0.5 * l * b\n    # Calculate the volume of the prism\n    volume = base_area * h\n    return volume",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
    "timestamp": "2025-09-20T12:19:01.669702",
    "response_time": "1.61",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 16,
    "solution": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
    "timestamp": "2025-09-20T12:19:02.768502",
    "response_time": "1.10",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 17,
    "solution": "def square_perimeter(a):\n    return 4 * a",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
    "timestamp": "2025-09-20T12:19:03.545646",
    "response_time": "0.77",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 18,
    "solution": "def remove_dirty_chars(string):\n    return list(string)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
    "timestamp": "2025-09-20T12:19:04.221500",
    "response_time": "0.67",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 19,
    "solution": "def test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
    "timestamp": "2025-09-20T12:19:05.446665",
    "response_time": "1.22",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 20,
    "solution": "def is_woodall(x):\n    if x < 1:\n        return False\n    n = 1\n    while (2**n - 1) * n <= x:\n        if (2**n - 1) * n == x:\n            return True\n        n += 1\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
    "timestamp": "2025-09-20T12:19:07.329586",
    "response_time": "1.88",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 56,
    "solution": "def check(num):\n    # Convert the number to a string to reverse it\n    num_str = str(num)\n    # Reverse the string and convert it back to an integer\n    reversed_num = int(num_str[::-1])\n    # Check if the original number is one less than twice its reverse\n    return num == 2 * reversed_num - 1",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
    "timestamp": "2025-09-20T12:19:09.374021",
    "response_time": "2.04",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 57,
    "solution": "from itertools import permutations\n\ndef find_Max_Num(arr):\n    # Generate all possible permutations of the array\n    perm = permutations(arr)\n    \n    # Initialize the maximum number as a very small number\n    max_num = float('-inf')\n    \n    # Iterate through each permutation\n    for p in perm:\n        # Convert the tuple to a list and then to an integer\n        num = int(''.join(map(str, p)))\n        \n        # Update the maximum number if the current number is larger\n        if num > max_num:\n            max_num = num\n    \n    return max_num",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
    "timestamp": "2025-09-20T12:19:12.248039",
    "response_time": "2.87",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 58,
    "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
    "timestamp": "2025-09-20T12:19:13.167555",
    "response_time": "0.92",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 59,
    "solution": "def is_octagonal(n):\n    if n < 1:\n        return False\n    # Calculate the octagonal number formula: O_n = n * (3n - 2)\n    # Rearrange to solve for n: 3n^2 - 2n - O_n = 0\n    # Use the quadratic formula: n = (2 + sqrt(4 + 12 * O_n)) / 6\n    discriminant = 4 + 12 * n\n    if discriminant < 0:\n        return False\n    sqrt_discriminant = int(discriminant**0.5)\n    if sqrt_discriminant * sqrt_discriminant != discriminant:\n        return False\n    n_calculated = (2 + sqrt_discriminant) / 6\n    return n_calculated.is_integer()",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
    "timestamp": "2025-09-20T12:19:17.292493",
    "response_time": "4.12",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 61,
    "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
    "timestamp": "2025-09-20T12:19:19.318846",
    "response_time": "2.02",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 62,
    "solution": "def smallest_num(xs):\n    if not xs:\n        raise ValueError(\"The list is empty\")\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
    "timestamp": "2025-09-20T12:19:20.664015",
    "response_time": "1.34",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 63,
    "solution": "def max_difference(test_list):\n    if not test_list or len(test_list) < 2:\n        return 0\n    \n    max_diff = 0\n    min_value = test_list[0]\n    \n    for num in test_list[1:]:\n        max_diff = max(max_diff, num - min_value)\n        min_value = min(min_value, num)\n    \n    return max_diff",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
    "timestamp": "2025-09-20T12:19:22.811141",
    "response_time": "2.14",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 64,
    "solution": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
    "timestamp": "2025-09-20T12:19:23.674883",
    "response_time": "0.86",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 65,
    "solution": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
    "timestamp": "2025-09-20T12:19:25.112583",
    "response_time": "1.43",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 66,
    "solution": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
    "timestamp": "2025-09-20T12:19:26.276053",
    "response_time": "1.16",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 67,
    "solution": "def bell_number(n):\n    # Create a table to store Bell numbers\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # Base case: Bell(0) is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly put the value of Bell(i, 0)\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # Bell number for n is the first element of the nth row\n    return bell[n][0]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
    "timestamp": "2025-09-20T12:19:30.504033",
    "response_time": "4.22",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 68,
    "solution": "def is_Monotonic(A):\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        if A[i] < A[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
    "timestamp": "2025-09-20T12:19:32.341011",
    "response_time": "1.83",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 69,
    "solution": "def is_sublist(l, s):\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
    "timestamp": "2025-09-20T12:19:34.154949",
    "response_time": "1.81",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 70,
    "solution": "def get_equal(Input):\n    if not Input:\n        return True\n    \n    first_length = len(Input[0])\n    for tup in Input:\n        if len(tup) != first_length:\n            return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
    "timestamp": "2025-09-20T12:19:35.608427",
    "response_time": "1.45",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 71,
    "solution": "def comb_sort(nums):\n    def get_next_gap(gap):\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
    "timestamp": "2025-09-20T12:19:38.797314",
    "response_time": "3.19",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 72,
    "solution": "def dif_Square(n):\n    # A number can be represented as the difference of two squares if and only if it is not of the form 4k+2\n    return n % 4 != 2",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
    "timestamp": "2025-09-20T12:19:40.192861",
    "response_time": "1.39",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 74,
    "solution": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
    "timestamp": "2025-09-20T12:19:43.168836",
    "response_time": "2.97",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 75,
    "solution": "def find_tuples(test_list, K):\n    result = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
    "timestamp": "2025-09-20T12:19:44.348283",
    "response_time": "1.18",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 77,
    "solution": "def is_Diff(n):\n    # Convert the number to a string to easily access each digit\n    n_str = str(n)\n    \n    # Calculate the difference between the sum of digits at even and odd positions\n    even_sum = sum(int(n_str[i]) for i in range(0, len(n_str), 2))\n    odd_sum = sum(int(n_str[i]) for i in range(1, len(n_str), 2))\n    \n    # Check if the difference is divisible by 11\n    return (even_sum - odd_sum) % 11 == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
    "timestamp": "2025-09-20T12:19:47.384244",
    "response_time": "3.03",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 79,
    "solution": "def word_len(s):\n    return len(s) % 2 != 0",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
    "timestamp": "2025-09-20T12:19:48.184229",
    "response_time": "0.80",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 80,
    "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
    "timestamp": "2025-09-20T12:19:49.424279",
    "response_time": "1.24",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 82,
    "solution": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
    "timestamp": "2025-09-20T12:19:50.285325",
    "response_time": "0.86",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 83,
    "solution": "def get_Char(strr):\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr(total % 26)",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
    "timestamp": "2025-09-20T12:19:51.419414",
    "response_time": "1.13",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 84,
    "solution": "def sequence(n):\n    if n == 1:\n        return 1\n    \n    # Initialize the sequence with the first two known values\n    seq = [0, 1, 1]\n    \n    # Compute the sequence up to the nth number\n    for i in range(3, n + 1):\n        seq.append(seq[seq[i - 1]] + seq[i - seq[i - 1]])\n    \n    return seq[n]",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
    "timestamp": "2025-09-20T12:19:53.799666",
    "response_time": "2.38",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 85,
    "solution": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
    "timestamp": "2025-09-20T12:19:54.584680",
    "response_time": "0.78",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 86,
    "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
    "timestamp": "2025-09-20T12:19:55.536607",
    "response_time": "0.95",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder14b",
    "dataset_row_id": 87,
    "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict",
    "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
    "timestamp": "2025-09-20T12:19:56.908650",
    "response_time": "1.37",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  }
]