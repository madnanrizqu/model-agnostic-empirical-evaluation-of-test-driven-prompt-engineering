[
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 2,
        "solution": "===START===\n```python\ndef similar_elements(test_tup1, test_tup2):\n    return list(set(test_tup1) & set(test_tup2))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
        "timestamp": "2025-09-20T14:50:16.181535",
        "response_time": "2.76",
        "context": "{\"function_name\": \"similar_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 3,
        "solution": "===START===\n```python\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
        "timestamp": "2025-09-20T14:50:21.154719",
        "response_time": "4.97",
        "context": "{\"function_name\": \"is_not_prime\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 4,
        "solution": "===START===\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
        "timestamp": "2025-09-20T14:50:22.597869",
        "response_time": "1.44",
        "context": "{\"function_name\": \"heap_queue_largest\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 6,
        "solution": "===START===\n```python\ndef is_Power_Of_Two(x):\n    # A number is a power of two if it has exactly one bit set in its binary representation.\n    # This can be checked using the property: x & (x - 1) == 0 and x != 0\n    return x != 0 and (x & (x - 1)) == 0\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
        "timestamp": "2025-09-20T14:50:26.531199",
        "response_time": "3.93",
        "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 7,
        "solution": "===START===\n```python\ndef find_char_long(text):\n    words = text.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
        "timestamp": "2025-09-20T14:50:28.730740",
        "response_time": "2.20",
        "context": "{\"function_name\": \"find_char_long\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 8,
        "solution": "===START===\n```python\ndef square_nums(nums):\n    return [num ** 2 for num in nums]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
        "timestamp": "2025-09-20T14:50:30.136440",
        "response_time": "1.41",
        "context": "{\"function_name\": \"square_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 9,
        "solution": "===START===\n```python\ndef find_Rotations(s):\n    n = len(s)\n    temp = s + s\n    for i in range(1, n + 1):\n        substring = temp[i:i + n]\n        if substring == s:\n            return i\n    return n\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
        "timestamp": "2025-09-20T14:50:33.232684",
        "response_time": "3.09",
        "context": "{\"function_name\": \"find_Rotations\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 11,
        "solution": "===START===\n```python\ndef remove_Occ(s, ch):\n    # Find the first occurrence and remove it\n    first_occ_index = s.find(ch)\n    if first_occ_index != -1:\n        s = s[:first_occ_index] + s[first_occ_index + 1:]\n    \n    # Find the last occurrence and remove it\n    last_occ_index = s.rfind(ch)\n    if last_occ_index != -1:\n        s = s[:last_occ_index] + s[last_occ_index + 1:]\n    \n    return s\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
        "timestamp": "2025-09-20T14:50:38.496873",
        "response_time": "5.26",
        "context": "{\"function_name\": \"remove_Occ\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 12,
        "solution": "===START===\n```python\ndef sort_matrix(M):\n    # Sort the matrix based on the sum of each row\n    return sorted(M, key=sum)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
        "timestamp": "2025-09-20T14:50:40.374467",
        "response_time": "1.87",
        "context": "{\"function_name\": \"sort_matrix\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 14,
        "solution": "===START===\nimport math\n\ndef find_Volume(l, b, h):\n    # Calculate the area of the triangular base\n    base_area = 0.5 * l * b\n    # Calculate the volume of the prism\n    volume = base_area * h\n    return volume\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
        "timestamp": "2025-09-20T14:50:43.376814",
        "response_time": "3.00",
        "context": "{\"function_name\": \"find_Volume\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 16,
        "solution": "===START===\nimport re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
        "timestamp": "2025-09-20T14:50:45.484511",
        "response_time": "2.10",
        "context": "{\"function_name\": \"text_lowercase_underscore\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 17,
        "solution": "===START===\ndef square_perimeter(a):\n    return 4 * a\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
        "timestamp": "2025-09-20T14:50:46.535574",
        "response_time": "1.05",
        "context": "{\"function_name\": \"square_perimeter\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 18,
        "solution": "===START===\n```python\ndef str_to_list(string):\n    return list(string)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
        "timestamp": "2025-09-20T14:50:47.695560",
        "response_time": "1.16",
        "context": "{\"function_name\": \"remove_dirty_chars\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 19,
        "solution": "===START===\n```python\ndef test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
        "timestamp": "2025-09-20T14:50:50.010254",
        "response_time": "2.31",
        "context": "{\"function_name\": \"test_duplicate\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 20,
        "solution": "===START===\n```python\ndef is_woodall(x):\n    if x < 1:\n        return False\n    n = 1\n    while (2**n - 1) * n <= x:\n        if (2**n - 1) * n == x:\n            return True\n        n += 1\n    return False\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
        "timestamp": "2025-09-20T14:50:53.987536",
        "response_time": "3.97",
        "context": "{\"function_name\": \"is_woodall\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 56,
        "solution": "===START===\n```python\ndef rev(num):\n    # Convert the number to a string to reverse it\n    num_str = str(num)\n    # Reverse the string and convert it back to an integer\n    reversed_num = int(num_str[::-1])\n    # Check if the original number is one less than twice its reverse\n    return num == 2 * reversed_num - 1\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
        "timestamp": "2025-09-20T14:50:57.930817",
        "response_time": "3.94",
        "context": "{\"function_name\": \"check\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 57,
        "solution": "===START===\nfrom itertools import permutations\n\ndef find_Max_Num(arr):\n    # Generate all possible permutations of the array\n    perm = permutations(arr)\n    \n    # Initialize the maximum number as a very small number\n    max_num = float('-inf')\n    \n    # Iterate through each permutation\n    for p in perm:\n        # Convert the tuple to a list and then to an integer\n        num = int(''.join(map(str, p)))\n        \n        # Update the maximum number if the current number is larger\n        if num > max_num:\n            max_num = num\n    \n    return max_num\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
        "timestamp": "2025-09-20T14:51:03.578882",
        "response_time": "5.64",
        "context": "{\"function_name\": \"find_Max_Num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 58,
        "solution": "===START===\n```python\ndef opposite_Signs(x, y):\n    return (x ^ y) < 0\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
        "timestamp": "2025-09-20T14:51:05.131907",
        "response_time": "1.55",
        "context": "{\"function_name\": \"opposite_Signs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 59,
        "solution": "===START===\n```python\ndef is_octagonal(n):\n    if n < 1:\n        return False\n    # Calculate the octagonal number formula: O_n = n * (3n - 2)\n    # Rearrange to solve for n: 3n^2 - 2n - O_n = 0\n    # Use the quadratic formula: n = (2 + sqrt(4 + 12 * O_n)) / 6\n    discriminant = 4 + 12 * n\n    if discriminant < 0:\n        return False\n    sqrt_discriminant = int(discriminant**0.5)\n    if sqrt_discriminant * sqrt_discriminant != discriminant:\n        return False\n    n_calculated = (2 + sqrt_discriminant) / 6\n    return n_calculated.is_integer()\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
        "timestamp": "2025-09-20T14:51:13.284500",
        "response_time": "8.15",
        "context": "{\"function_name\": \"is_octagonal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 61,
        "solution": "===START===\n```python\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
        "timestamp": "2025-09-20T14:51:17.022578",
        "response_time": "3.73",
        "context": "{\"function_name\": \"count_Substrings\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 62,
        "solution": "===START===\ndef smallest_num(xs):\n    if not xs:\n        raise ValueError(\"The list is empty\")\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
        "timestamp": "2025-09-20T14:51:19.521934",
        "response_time": "2.50",
        "context": "{\"function_name\": \"smallest_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 63,
        "solution": "===START===\n```python\ndef max_difference(test_list):\n    if not test_list or len(test_list) < 2:\n        return 0\n    \n    max_diff = 0\n    min_value = test_list[0]\n    \n    for num in test_list[1:]:\n        max_diff = max(max_diff, num - min_value)\n        min_value = min(min_value, num)\n    \n    return max_diff\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
        "timestamp": "2025-09-20T14:51:23.622821",
        "response_time": "4.10",
        "context": "{\"function_name\": \"max_difference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 64,
        "solution": "===START===\n```python\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
        "timestamp": "2025-09-20T14:51:25.199403",
        "response_time": "1.57",
        "context": "{\"function_name\": \"subject_marks\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 65,
        "solution": "===START===\n```python\ndef recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
        "timestamp": "2025-09-20T14:51:27.882226",
        "response_time": "2.68",
        "context": "{\"function_name\": \"recursive_list_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 66,
        "solution": "===START===\n```python\ndef pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
        "timestamp": "2025-09-20T14:51:30.050063",
        "response_time": "2.17",
        "context": "{\"function_name\": \"pos_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 67,
        "solution": "```python\n===START===\ndef bell_number(n):\n    # Create a table to store Bell numbers\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # Base case: Bell(0) is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly put the value of Bell(i, 0)\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # Bell number for n is the first element of the nth row\n    return bell[n][0]\n===END===\n```",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
        "timestamp": "2025-09-20T14:51:38.396980",
        "response_time": "8.34",
        "context": "{\"function_name\": \"bell_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 68,
        "solution": "===START===\n```python\ndef is_Monotonic(A):\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        if A[i] < A[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
        "timestamp": "2025-09-20T14:51:41.892412",
        "response_time": "3.49",
        "context": "{\"function_name\": \"is_Monotonic\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 69,
        "solution": "===START===\n```python\ndef is_sublist(l, s):\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
        "timestamp": "2025-09-20T14:51:45.430680",
        "response_time": "3.54",
        "context": "{\"function_name\": \"is_sublist\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 70,
        "solution": "===START===\n```python\ndef find_equal_tuple(Input):\n    if not Input:\n        return True\n    \n    first_length = len(Input[0])\n    for tup in Input:\n        if len(tup) != first_length:\n            return False\n    return True\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
        "timestamp": "2025-09-20T14:51:48.193162",
        "response_time": "2.76",
        "context": "{\"function_name\": \"get_equal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 71,
        "solution": "===START===\n```python\ndef comb_sort(nums):\n    def get_next_gap(gap):\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
        "timestamp": "2025-09-20T14:51:54.416259",
        "response_time": "6.22",
        "context": "{\"function_name\": \"comb_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 72,
        "solution": "===START===\n```python\ndef dif_Square(n):\n    # A number can be represented as the difference of two squares if and only if it is not of the form 4k+2\n    return n % 4 != 2\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
        "timestamp": "2025-09-20T14:51:57.049051",
        "response_time": "2.63",
        "context": "{\"function_name\": \"dif_Square\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 74,
        "solution": "===START===\n```python\ndef is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
        "timestamp": "2025-09-20T14:52:02.871732",
        "response_time": "5.82",
        "context": "{\"function_name\": \"is_samepatterns\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 75,
        "solution": "===START===\n```python\ndef find_tuples(test_list, K):\n    result = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
        "timestamp": "2025-09-20T14:52:05.058350",
        "response_time": "2.19",
        "context": "{\"function_name\": \"find_tuples\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 77,
        "solution": "===START===\n```python\ndef is_Diff(n):\n    # Convert the number to a string to easily access each digit\n    n_str = str(n)\n    \n    # Calculate the difference between the sum of digits at even and odd positions\n    even_sum = sum(int(n_str[i]) for i in range(0, len(n_str), 2))\n    odd_sum = sum(int(n_str[i]) for i in range(1, len(n_str), 2))\n    \n    # Check if the difference is divisible by 11\n    return (even_sum - odd_sum) % 11 == 0\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
        "timestamp": "2025-09-20T14:52:10.988667",
        "response_time": "5.93",
        "context": "{\"function_name\": \"is_Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 79,
        "solution": "===START===\ndef word_len(s):\n    return len(s) % 2 != 0\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
        "timestamp": "2025-09-20T14:52:12.222033",
        "response_time": "1.23",
        "context": "{\"function_name\": \"word_len\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 80,
        "solution": "===START===\n```python\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
        "timestamp": "2025-09-20T14:52:14.106387",
        "response_time": "1.88",
        "context": "{\"function_name\": \"tetrahedral_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 82,
        "solution": "===START===\nimport math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
        "timestamp": "2025-09-20T14:52:15.656825",
        "response_time": "1.55",
        "context": "{\"function_name\": \"volume_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 83,
        "solution": "===START===\n```python\ndef get_Char(strr):\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr(total % 26)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
        "timestamp": "2025-09-20T14:52:17.744761",
        "response_time": "2.09",
        "context": "{\"function_name\": \"get_Char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 84,
        "solution": "===START===\n```python\ndef sequence(n):\n    if n == 1:\n        return 1\n    \n    # Initialize the sequence with the first two known values\n    seq = [0, 1, 1]\n    \n    # Compute the sequence up to the nth number\n    for i in range(3, n + 1):\n        seq.append(seq[seq[i - 1]] + seq[i - seq[i - 1]])\n    \n    return seq[n]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
        "timestamp": "2025-09-20T14:52:22.354534",
        "response_time": "4.61",
        "context": "{\"function_name\": \"sequence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 85,
        "solution": "===START===\nimport math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
        "timestamp": "2025-09-20T14:52:23.745482",
        "response_time": "1.39",
        "context": "{\"function_name\": \"surfacearea_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 86,
        "solution": "===START===\n```python\ndef centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
        "timestamp": "2025-09-20T14:52:25.470030",
        "response_time": "1.72",
        "context": "{\"function_name\": \"centered_hexagonal_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 87,
        "solution": "===START===\n```python\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
        "timestamp": "2025-09-20T14:52:28.048511",
        "response_time": "2.58",
        "context": "{\"function_name\": \"merge_dictionaries_three\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 88,
        "solution": "===START===\n```python\ndef freq_count(list1):\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):",
        "timestamp": "2025-09-20T14:52:30.725625",
        "response_time": "2.68",
        "context": "{\"function_name\": \"freq_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 89,
        "solution": "===START===\n```python\ndef closest_num(N):\n    return N - 1\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):",
        "timestamp": "2025-09-20T14:52:31.918737",
        "response_time": "1.19",
        "context": "{\"function_name\": \"closest_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 90,
        "solution": "===START===\n```python\ndef len_log(list1):\n    if not list1:\n        return 0\n    return max(len(word) for word in list1)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):",
        "timestamp": "2025-09-20T14:52:33.849406",
        "response_time": "1.93",
        "context": "{\"function_name\": \"len_log\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 91,
        "solution": "===START===\n```python\ndef find_substring(str1, sub_str):\n    return sub_str in str1\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):",
        "timestamp": "2025-09-20T14:52:35.325605",
        "response_time": "1.48",
        "context": "{\"function_name\": \"find_substring\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 92,
        "solution": "===START===\n```python\ndef is_undulating(n):\n    n_str = str(n)\n    if len(n_str) < 3:\n        return False\n    for i in range(2, len(n_str)):\n        if n_str[i] != n_str[i - 2]:\n            return False\n    return n_str[0] != n_str[1]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):",
        "timestamp": "2025-09-20T14:52:39.074864",
        "response_time": "3.75",
        "context": "{\"function_name\": \"is_undulating\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 93,
        "solution": "===START===\ndef power(a, b):\n    return a ** b\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):",
        "timestamp": "2025-09-20T14:52:40.059576",
        "response_time": "0.98",
        "context": "{\"function_name\": \"power\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 94,
        "solution": "===START===\n```python\ndef index_minimum(test_list):\n    if not test_list:\n        return None\n    min_tuple = min(test_list, key=lambda x: x[1])\n    return min_tuple[0]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):",
        "timestamp": "2025-09-20T14:52:42.468955",
        "response_time": "2.41",
        "context": "{\"function_name\": \"index_minimum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 95,
        "solution": "===START===\n```python\ndef Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):",
        "timestamp": "2025-09-20T14:52:45.405425",
        "response_time": "2.94",
        "context": "{\"function_name\": \"Find_Min_Length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 96,
        "solution": "===START===\n```python\ndef divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):",
        "timestamp": "2025-09-20T14:52:48.779011",
        "response_time": "3.37",
        "context": "{\"function_name\": \"divisor\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 97,
        "solution": "===START===\n```python\ndef frequency_lists(list1):\n    frequency_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    return frequency_dict\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):",
        "timestamp": "2025-09-20T14:52:51.909533",
        "response_time": "3.13",
        "context": "{\"function_name\": \"frequency_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 98,
        "solution": "===START===\nfrom functools import reduce\n\ndef multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = reduce(lambda x, y: x * y, numbers)\n    return product / len(numbers)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):",
        "timestamp": "2025-09-20T14:52:54.234624",
        "response_time": "2.32",
        "context": "{\"function_name\": \"multiply_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 99,
        "solution": "===START===\ndef decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):",
        "timestamp": "2025-09-20T14:52:56.997868",
        "response_time": "2.76",
        "context": "{\"function_name\": \"decimal_to_binary\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 100,
        "solution": "===START===\n```python\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n\n    return num\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):",
        "timestamp": "2025-09-20T14:52:59.886304",
        "response_time": "2.89",
        "context": "{\"function_name\": \"next_smallest_palindrome\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 101,
        "solution": "===START===\n```python\ndef kth_element(arr, k):\n    return arr[k - 1]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):",
        "timestamp": "2025-09-20T14:53:01.308471",
        "response_time": "1.42",
        "context": "{\"function_name\": \"kth_element\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 102,
        "solution": "===START===\n```python\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
        "timestamp": "2025-09-20T14:53:03.020548",
        "response_time": "1.71",
        "context": "{\"function_name\": \"snake_to_camel\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 103,
        "solution": "===START===\n```python\ndef eulerian_num(n, m):\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):",
        "timestamp": "2025-09-20T14:53:06.989980",
        "response_time": "3.97",
        "context": "{\"function_name\": \"eulerian_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 104,
        "solution": "===START===\n```python\ndef sort_sublists(input_list):\n    return [sorted(sublist) for sublist in input_list]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):",
        "timestamp": "2025-09-20T14:53:08.594592",
        "response_time": "1.60",
        "context": "{\"function_name\": \"sort_sublists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 105,
        "solution": "===START===\n```python\ndef count(lst):\n    return sum(1 for item in lst if item is True)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):",
        "timestamp": "2025-09-20T14:53:10.076346",
        "response_time": "1.48",
        "context": "{\"function_name\": \"count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 106,
        "solution": "===START===\n```python\ndef add_lists(test_list, test_tup):\n    # Convert the tuple to a list, append the given list, and convert back to a tuple\n    result = list(test_tup) + test_list\n    return tuple(result)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):",
        "timestamp": "2025-09-20T14:53:12.891860",
        "response_time": "2.81",
        "context": "{\"function_name\": \"add_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 108,
        "solution": "===START===\n```python\ndef merge_sorted_list(num1, num2, num3):\n    # Combine all three lists\n    combined = num1 + num2 + num3\n    # Sort the combined list\n    combined.sort()\n    return combined\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):",
        "timestamp": "2025-09-20T14:53:15.602967",
        "response_time": "2.71",
        "context": "{\"function_name\": \"merge_sorted_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 109,
        "solution": "===START===\n```python\ndef odd_Equivalent(s, n):\n    count = 0\n    length = len(s)\n    \n    for _ in range(n):\n        # Rotate the string to the right by one position\n        s = s[-1] + s[:-1]\n        \n        # Convert the binary string to an integer\n        num = int(s, 2)\n        \n        # Check if the number is odd\n        if num % 2 == 1:\n            count += 1\n    \n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):",
        "timestamp": "2025-09-20T14:53:20.790940",
        "response_time": "5.19",
        "context": "{\"function_name\": \"odd_Equivalent\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 111,
        "solution": "===START===\n```python\ndef common_in_nested_lists(nestedlist):\n    if not nestedlist:\n        return []\n    \n    # Initialize the set with the first list's elements\n    common_elements = set(nestedlist[0])\n    \n    # Intersect with each subsequent list\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    \n    return list(common_elements)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):",
        "timestamp": "2025-09-20T14:53:24.729116",
        "response_time": "3.94",
        "context": "{\"function_name\": \"common_in_nested_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 113,
        "solution": "===START===\n```python\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):",
        "timestamp": "2025-09-20T14:53:26.450757",
        "response_time": "1.72",
        "context": "{\"function_name\": \"check_integer\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 115,
        "solution": "===START===\n```python\ndef empty_dit(list1):\n    return all(not d for d in list1)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):",
        "timestamp": "2025-09-20T14:53:27.935092",
        "response_time": "1.48",
        "context": "{\"function_name\": \"empty_dit\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 116,
        "solution": "===START===\n```python\ndef tuple_to_int(nums):\n    return int(''.join(map(str, nums)))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):",
        "timestamp": "2025-09-20T14:53:29.342669",
        "response_time": "1.41",
        "context": "{\"function_name\": \"tuple_to_int\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 117,
        "solution": "===START===\n```python\ndef list_to_float(test_list):\n    def convert_to_float(element):\n        try:\n            return float(element)\n        except (ValueError, TypeError):\n            return element\n\n    return [[convert_to_float(item) for item in sublist] for sublist in test_list]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):",
        "timestamp": "2025-09-20T14:53:32.374465",
        "response_time": "3.03",
        "context": "{\"function_name\": \"list_to_float\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 118,
        "solution": "===START===\ndef string_to_list(string):\n    return string.split()\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):",
        "timestamp": "2025-09-20T14:53:33.324411",
        "response_time": "0.95",
        "context": "{\"function_name\": \"string_to_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 119,
        "solution": "===START===\n```python\ndef search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Ensure mid is even for comparison\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the unique element is in the right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return arr[left]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):",
        "timestamp": "2025-09-20T14:53:38.735082",
        "response_time": "5.41",
        "context": "{\"function_name\": \"search\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 120,
        "solution": "===START===\n```python\ndef max_product_tuple(list1):\n    max_product = float('-inf')\n    for tuple1, tuple2 in list1:\n        product1 = abs(tuple1[0] * tuple2[0])\n        product2 = abs(tuple1[1] * tuple2[1])\n        max_product = max(max_product, product1, product2)\n    return max_product\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):",
        "timestamp": "2025-09-20T14:53:42.774216",
        "response_time": "4.04",
        "context": "{\"function_name\": \"max_product_tuple\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 123,
        "solution": "===START===\n```python\ndef amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    total_sum = 0\n    for num in range(2, limit + 1):\n        div_sum = sum_of_divisors(num)\n        if div_sum != num and sum_of_divisors(div_sum) == num:\n            total_sum += num\n\n    return total_sum\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):",
        "timestamp": "2025-09-20T14:53:47.546350",
        "response_time": "4.77",
        "context": "{\"function_name\": \"amicable_numbers_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 124,
        "solution": "===START===\nimport cmath\n\ndef angle_complex(a, b):\n    complex_number = complex(a, b)\n    angle = cmath.phase(complex_number)\n    return angle\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):",
        "timestamp": "2025-09-20T14:53:49.524333",
        "response_time": "1.98",
        "context": "{\"function_name\": \"angle_complex\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 125,
        "solution": "===START===\n```python\ndef find_length(string):\n    max_diff = 0\n    current_diff = 0\n    min_diff = 0\n\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n\n        max_diff = max(max_diff, current_diff - min_diff)\n        min_diff = min(min_diff, current_diff)\n\n    return max_diff\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):",
        "timestamp": "2025-09-20T14:53:53.946748",
        "response_time": "4.42",
        "context": "{\"function_name\": \"find_length\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 126,
        "solution": "===START===\n```python\ndef sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    common_divisor_sum = 0\n    gcd_value = gcd(a, b)\n    \n    for i in range(1, int(gcd_value**0.5) + 1):\n        if gcd_value % i == 0:\n            common_divisor_sum += i\n            if i != gcd_value // i:\n                common_divisor_sum += gcd_value // i\n    \n    return common_divisor_sum\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):",
        "timestamp": "2025-09-20T14:53:59.709499",
        "response_time": "5.76",
        "context": "{\"function_name\": \"sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 127,
        "solution": "===START===\ndef multiply_int(x, y):\n    return x * y\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):",
        "timestamp": "2025-09-20T14:54:00.739013",
        "response_time": "1.03",
        "context": "{\"function_name\": \"multiply_int\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 128,
        "solution": "===START===\n```python\ndef long_words(n, str):\n    words = str.split()\n    return [word for word in words if len(word) > n]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):",
        "timestamp": "2025-09-20T14:54:02.634854",
        "response_time": "1.89",
        "context": "{\"function_name\": \"long_words\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 129,
        "solution": "===START===\n```python\ndef magic_square_test(my_matrix):\n    n = len(my_matrix)\n    if n == 0 or any(len(row) != n for row in my_matrix):\n        return False\n\n    # Calculate the sum of the first row to use as the magic sum\n    magic_sum = sum(my_matrix[0])\n\n    # Check sums of all rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check sums of all columns\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check sum of the main diagonal\n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check sum of the secondary diagonal\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):",
        "timestamp": "2025-09-20T14:54:12.183590",
        "response_time": "9.55",
        "context": "{\"function_name\": \"magic_square_test\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 130,
        "solution": "===START===\nfrom collections import Counter\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    \n    count = Counter(nums)\n    max_freq = max(count.values())\n    max_freq_items = [item for item, freq in count.items() if freq == max_freq]\n    \n    return max_freq_items[0] if max_freq_items else None\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):",
        "timestamp": "2025-09-20T14:54:15.756228",
        "response_time": "3.57",
        "context": "{\"function_name\": \"max_occurrences\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 131,
        "solution": "===START===\n```python\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str_list) - 1\n    \n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n    \n    return ''.join(str_list)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):",
        "timestamp": "2025-09-20T14:54:21.564513",
        "response_time": "5.81",
        "context": "{\"function_name\": \"reverse_vowels\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 132,
        "solution": "===START===\n```python\ndef tup_string(tup1):\n    return ''.join(map(str, tup1))\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):",
        "timestamp": "2025-09-20T14:54:23.251565",
        "response_time": "1.69",
        "context": "{\"function_name\": \"tup_string\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 133,
        "solution": "===START===\n```python\ndef sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):",
        "timestamp": "2025-09-20T14:54:24.873283",
        "response_time": "1.62",
        "context": "{\"function_name\": \"sum_negativenum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 135,
        "solution": "===START===\n```python\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):",
        "timestamp": "2025-09-20T14:54:26.330353",
        "response_time": "1.46",
        "context": "{\"function_name\": \"hexagonal_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 137,
        "solution": "===START===\n```python\ndef zero_count(nums):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0  # Avoid division by zero if there are no non-zero elements\n    \n    return zero_count / non_zero_count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):",
        "timestamp": "2025-09-20T14:54:30.847029",
        "response_time": "4.52",
        "context": "{\"function_name\": \"zero_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 138,
        "solution": "===START===\n```python\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n    return True\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):",
        "timestamp": "2025-09-20T14:54:33.994032",
        "response_time": "3.15",
        "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 139,
        "solution": "===START===\nimport math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):",
        "timestamp": "2025-09-20T14:54:35.450004",
        "response_time": "1.45",
        "context": "{\"function_name\": \"circle_circumference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 140,
        "solution": "===START===\n```python\ndef extract_singly(test_list):\n    result = set()\n    for sublist in test_list:\n        result.update(sublist)\n    return result\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):",
        "timestamp": "2025-09-20T14:54:37.384968",
        "response_time": "1.93",
        "context": "{\"function_name\": \"extract_singly\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 141,
        "solution": "===START===\n```python\ndef pancake_sort(nums):\n    def flip(sublist, k):\n        start = 0\n        while start < k:\n            sublist[start], sublist[k] = sublist[k], sublist[start]\n            start += 1\n            k -= 1\n\n    n = len(nums)\n    for size in range(n, 1, -1):\n        # Find the index of the maximum element in nums[0:size]\n        max_index = 0\n        for i in range(1, size):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        # If the maximum element is not already at the end of the current sublist\n        if max_index != size - 1:\n            # Flip the maximum element to the front if it's not already there\n            if max_index != 0:\n                flip(nums, max_index)\n            # Flip it to its correct position\n            flip(nums, size - 1)\n\n    return nums\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):",
        "timestamp": "2025-09-20T14:54:46.415530",
        "response_time": "9.03",
        "context": "{\"function_name\": \"pancake_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 142,
        "solution": "===START===\n```python\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):",
        "timestamp": "2025-09-20T14:54:49.739921",
        "response_time": "3.32",
        "context": "{\"function_name\": \"count_samepair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 143,
        "solution": "===START===\n```python\ndef find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):",
        "timestamp": "2025-09-20T14:54:51.997348",
        "response_time": "2.26",
        "context": "{\"function_name\": \"find_lists\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 145,
        "solution": "===START===\n```python\ndef max_Abs_Diff(arr):\n    if not arr:\n        return 0\n    \n    min_element = arr[0]\n    max_element = arr[0]\n    \n    for num in arr:\n        if num < min_element:\n            min_element = num\n        if num > max_element:\n            max_element = num\n    \n    return max_element - min_element\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):",
        "timestamp": "2025-09-20T14:54:56.014396",
        "response_time": "4.01",
        "context": "{\"function_name\": \"max_Abs_Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 160,
        "solution": "===START===\nfrom math import gcd\n\ndef find_solution(a, b, n):\n    # Check if gcd of a and b divides n\n    if n % gcd(a, b) != 0:\n        return None\n    \n    # Extended Euclidean Algorithm to find x and y such that ax + by = gcd(a, b)\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return gcd, x, y\n    \n    gcd_ab, x, y = extended_gcd(a, b)\n    \n    # Scale the solution to ax + by = n\n    scale = n // gcd_ab\n    return (x * scale, y * scale)\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):",
        "timestamp": "2025-09-20T14:55:04.279833",
        "response_time": "8.26",
        "context": "{\"function_name\": \"find_solution\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 161,
        "solution": "===START===\n```python\ndef remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):",
        "timestamp": "2025-09-20T14:55:06.034906",
        "response_time": "1.75",
        "context": "{\"function_name\": \"remove_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 162,
        "solution": "===START===\n```python\ndef sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):",
        "timestamp": "2025-09-20T14:55:08.394000",
        "response_time": "2.36",
        "context": "{\"function_name\": \"sum_series\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 163,
        "solution": "===START===\nimport math\n\ndef area_polygon(s, l):\n    # Calculate the area of a regular polygon\n    area = (s * l**2) / (4 * math.tan(math.pi / s))\n    return area\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):",
        "timestamp": "2025-09-20T14:55:10.787028",
        "response_time": "2.39",
        "context": "{\"function_name\": \"area_polygon\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 164,
        "solution": "===START===\n```python\ndef div_sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\ndef are_div_sums_equal(a, b):\n    return div_sum(a) == div_sum(b)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):",
        "timestamp": "2025-09-20T14:55:14.109035",
        "response_time": "3.32",
        "context": "{\"function_name\": \"are_equivalent\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 165,
        "solution": "===START===\n```python\ndef count_char_position(str1):\n    count = 0\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if 'a' <= str1[i] <= 'z' and (ord(str1[i]) - ord('a') + 1) == (i + 1):\n            count += 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):",
        "timestamp": "2025-09-20T14:55:18.026278",
        "response_time": "3.92",
        "context": "{\"function_name\": \"count_char_position\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 166,
        "solution": "===START===\n```python\ndef find_even_pair(A):\n    even_count = 0\n    odd_count = 0\n    \n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Even XOR Even = Even\n    # Odd XOR Odd = Even\n    even_pairs = (even_count * (even_count - 1)) // 2\n    odd_pairs = (odd_count * (odd_count - 1)) // 2\n    \n    return even_pairs + odd_pairs\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):",
        "timestamp": "2025-09-20T14:55:23.516883",
        "response_time": "5.49",
        "context": "{\"function_name\": \"find_even_pair\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 167,
        "solution": "===START===\nimport math\n\ndef next_power_of_2(n):\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):",
        "timestamp": "2025-09-20T14:55:25.453758",
        "response_time": "1.94",
        "context": "{\"function_name\": \"next_power_of_2\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 168,
        "solution": "===START===\n```python\ndef frequency(a, x):\n    return a.count(x)\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):",
        "timestamp": "2025-09-20T14:55:26.632757",
        "response_time": "1.18",
        "context": "{\"function_name\": \"frequency\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 170,
        "solution": "===START===\n```python\ndef sum_range_list(list1, m, n):\n    return sum(list1[m:n+1])\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):",
        "timestamp": "2025-09-20T14:55:28.191222",
        "response_time": "1.56",
        "context": "{\"function_name\": \"sum_range_list\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 171,
        "solution": "===START===\n```python\ndef perimeter_pentagon(a):\n    return 5 * a\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):",
        "timestamp": "2025-09-20T14:55:29.454044",
        "response_time": "1.26",
        "context": "{\"function_name\": \"perimeter_pentagon\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 172,
        "solution": "===START===\n```python\ndef count_occurance(s):\n    return s.count('std')\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):",
        "timestamp": "2025-09-20T14:55:30.722274",
        "response_time": "1.27",
        "context": "{\"function_name\": \"count_occurance\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 222,
        "solution": "===START===\n```python\ndef check_type(test_tuple):\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != first_type:\n            return False\n    return True\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):",
        "timestamp": "2025-09-20T14:55:33.489561",
        "response_time": "2.77",
        "context": "{\"function_name\": \"check_type\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 223,
        "solution": "===START===\n```python\ndef is_majority(arr, n, x):\n    # Find the first occurrence of x in the array\n    left = 0\n    right = n - 1\n    first_occurrence = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            first_occurrence = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If x is not found, it cannot be the majority element\n    if first_occurrence == -1:\n        return False\n    \n    # Calculate the index of the last occurrence of x\n    last_occurrence = first_occurrence + (n // 2)\n    \n    # Check if the last occurrence is within bounds and is x\n    if last_occurrence < n and arr[last_occurrence] == x:\n        return True\n    \n    return False\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):",
        "timestamp": "2025-09-20T14:55:43.023022",
        "response_time": "9.53",
        "context": "{\"function_name\": \"binary_search\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_qwen25coder14b",
        "dataset_row_id": 224,
        "solution": "===START===\n```python\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\n===END===",
        "llm_name": "Qwen/Qwen2.5-Coder-14B-Instruct",
        "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):",
        "timestamp": "2025-09-20T14:55:45.163435",
        "response_time": "2.14",
        "context": "{\"function_name\": \"count_Set_Bits\"}"
    }
]