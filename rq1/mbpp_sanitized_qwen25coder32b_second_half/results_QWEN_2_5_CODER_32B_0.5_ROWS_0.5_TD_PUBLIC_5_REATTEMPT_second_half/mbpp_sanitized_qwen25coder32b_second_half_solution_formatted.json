[
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 425,
    "solution": "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of sublists containing a particular element.\n\n### Signature\ndef count_element_in_list(list1, x):",
    "timestamp": "2025-10-17T17:30:36.030081",
    "response_time": "3.39",
    "context": "{\"function_name\": \"count_element_in_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 426,
    "solution": "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to filter odd numbers.\n\n### Signature\ndef filter_oddnumbers(nums):",
    "timestamp": "2025-10-17T17:30:37.637188",
    "response_time": "1.61",
    "context": "{\"function_name\": \"filter_oddnumbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 427,
    "solution": "from datetime import datetime\n\ndef change_date_format(dt):\n    date_obj = datetime.strptime(dt, '%Y-%m-%d')\n    return date_obj.strftime('%d-%m-%Y')",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n### Signature\ndef change_date_format(dt):",
    "timestamp": "2025-10-17T17:30:39.261576",
    "response_time": "1.62",
    "context": "{\"function_name\": \"change_date_format\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 428,
    "solution": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort the given array by using shell sort.\n\n### Signature\ndef shell_sort(my_list):",
    "timestamp": "2025-10-17T17:30:42.881754",
    "response_time": "3.62",
    "context": "{\"function_name\": \"shell_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 429,
    "solution": "from itertools import zip_longest\n\ndef and_tuples(test_tup1, test_tup2):\n    return tuple(a & b for a, b in zip_longest(test_tup1, test_tup2, fillvalue=0))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\n### Signature\ndef and_tuples(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:30:44.945370",
    "response_time": "2.06",
    "context": "{\"function_name\": \"and_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 430,
    "solution": "import math\n\ndef parabola_directrix(a, b, c):\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' cannot be zero for a parabola.\")\n    # The directrix of a parabola given by y = ax^2 + bx + c is y = k - p\n    # where k is the y-coordinate of the vertex and p = 1/(4a)\n    p = 1 / (4 * a)\n    k = c - (b**2) / (4 * a)\n    directrix = k - p\n    return directrix",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the directrix of a parabola.\n\n### Signature\ndef parabola_directrix(a, b, c):",
    "timestamp": "2025-10-17T17:30:49.864216",
    "response_time": "4.92",
    "context": "{\"function_name\": \"parabola_directrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 431,
    "solution": "from typing import List\n\ndef common_element(list1: List, list2: List) -> bool:\n    set1 = set(list1)\n    for element in list2:\n        if element in set1:\n            return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes two lists and returns true if they have at least one common element.\n\n### Signature\ndef common_element(list1, list2):",
    "timestamp": "2025-10-17T17:30:51.875700",
    "response_time": "2.01",
    "context": "{\"function_name\": \"common_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 432,
    "solution": "from typing import Union\n\ndef median_trapezium(base1: Union[int, float], base2: Union[int, float], height: Union[int, float]) -> float:\n    return 0.5 * (base1 + base2)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the median length of a trapezium.\n\n### Signature\ndef median_trapezium(base1,base2,height):",
    "timestamp": "2025-10-17T17:30:54.042367",
    "response_time": "2.16",
    "context": "{\"function_name\": \"median_trapezium\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 433,
    "solution": "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    for element in arr:\n        if number <= element:\n            return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\n### Signature\ndef check_greater(arr, number):",
    "timestamp": "2025-10-17T17:30:55.789911",
    "response_time": "1.75",
    "context": "{\"function_name\": \"check_greater\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 434,
    "solution": "import re\n\ndef text_match_one(text):\n    patterns = 'ab+'\n    if re.search(patterns, text):\n        return True\n    else:\n        return False",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by one or more b's.\n\n### Signature\ndef text_match_one(text):",
    "timestamp": "2025-10-17T17:30:57.469851",
    "response_time": "1.68",
    "context": "{\"function_name\": \"text_match_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 435,
    "solution": "def last_Digit(n) :\n    return abs(n) % 10",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the last digit of a given number.\n\n### Signature\ndef last_Digit(n) :",
    "timestamp": "2025-10-17T17:30:58.465239",
    "response_time": "0.99",
    "context": "{\"function_name\": \"last_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 436,
    "solution": "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to return the negative numbers in a list.\n\n### Signature\ndef neg_nos(list1):",
    "timestamp": "2025-10-17T17:31:00.004889",
    "response_time": "1.54",
    "context": "{\"function_name\": \"neg_nos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 437,
    "solution": "def remove_odd(str1):\n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove odd characters in a string.\n\n### Signature\ndef remove_odd(str1):",
    "timestamp": "2025-10-17T17:31:01.419919",
    "response_time": "1.41",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 438,
    "solution": "from collections import defaultdict\n\ndef count_bidirectional(test_list):\n    pair_count = defaultdict(int)\n    for a, b in test_list:\n        pair_count[(a, b)] += 1\n        pair_count[(b, a)] += 1\n    bidirectional_pairs = {pair: count for pair, count in pair_count.items() if count > 1}\n    return len(bidirectional_pairs)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to count bidirectional tuple pairs.\n\n### Signature\ndef count_bidirectional(test_list):",
    "timestamp": "2025-10-17T17:31:04.505174",
    "response_time": "3.08",
    "context": "{\"function_name\": \"count_bidirectional\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 439,
    "solution": "def multiple_to_single(L):\n    return int(''.join(map(str, L)))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to join a list of multiple integers into a single integer.\n\n### Signature\ndef multiple_to_single(L):",
    "timestamp": "2025-10-17T17:31:05.555174",
    "response_time": "1.05",
    "context": "{\"function_name\": \"multiple_to_single\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 440,
    "solution": "import re\n\ndef find_adverb_position(text):\n    # Regular expression to find adverbs ending in 'ly'\n    adverb_pattern = r\"\\b\\w+ly\\b\"\n    match = re.search(adverb_pattern, text)\n    if match:\n        adverb = match.group()\n        start_position = match.start()\n        end_position = match.end() - 1\n        return adverb, start_position, end_position\n    else:\n        return None",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the first adverb and their positions in a given sentence.\n\n### Signature\ndef find_adverb_position(text):",
    "timestamp": "2025-10-17T17:31:09.056285",
    "response_time": "3.50",
    "context": "{\"function_name\": \"find_adverb_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 441,
    "solution": "import math\n\ndef surfacearea_cube(l):\n    return 6 * l * l",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cube of a given size.\n\n### Signature\ndef surfacearea_cube(l):",
    "timestamp": "2025-10-17T17:31:10.104884",
    "response_time": "1.05",
    "context": "{\"function_name\": \"surfacearea_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 442,
    "solution": "from typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    if not nums:\n        return 0.0\n    \n    positive_numbers = sum(1 for num in nums if num > 0)\n    return positive_numbers / len(nums)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the ration of positive numbers in an array of integers.\n\n### Signature\ndef positive_count(nums):",
    "timestamp": "2025-10-17T17:31:12.330353",
    "response_time": "2.22",
    "context": "{\"function_name\": \"positive_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 443,
    "solution": "import math\n\ndef largest_neg(list1):\n    largest_negative = -math.inf\n    for num in list1:\n        if num < 0 and num > largest_negative:\n            largest_negative = num\n    return largest_negative if largest_negative != -math.inf else None",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the largest negative number from the given list.\n\n### Signature\ndef largest_neg(list1):",
    "timestamp": "2025-10-17T17:31:14.566522",
    "response_time": "2.23",
    "context": "{\"function_name\": \"largest_neg\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 444,
    "solution": "from typing import List, Tuple\n\ndef trim_tuple(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return [tup[K:] for tup in test_list]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to trim each tuple by k in the given tuple list.\n\n### Signature\ndef trim_tuple(test_list, K):",
    "timestamp": "2025-10-17T17:31:16.375742",
    "response_time": "1.81",
    "context": "{\"function_name\": \"trim_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 445,
    "solution": "from itertools import starmap\nfrom operator import mul\n\ndef index_multiplication(test_tup1, test_tup2):\n    return tuple(starmap(mul, zip(test_tup1, test_tup2)))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n### Signature\ndef index_multiplication(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:31:18.292651",
    "response_time": "1.91",
    "context": "{\"function_name\": \"index_multiplication\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 446,
    "solution": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    # Convert tuple to a list to use Counter\n    tup_list = list(tup)\n    # Count occurrences of each element in the tuple\n    tup_counter = Counter(tup_list)\n    # Create a dictionary to store counts of elements from the list\n    result = {element: tup_counter[element] for element in lst}\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the occurence of all elements of list in a tuple.\n\n### Signature\ndef count_Occurrence(tup, lst):",
    "timestamp": "2025-10-17T17:31:21.550080",
    "response_time": "3.25",
    "context": "{\"function_name\": \"count_Occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 447,
    "solution": "def cube_nums(nums):\n    return [x ** 3 for x in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find cubes of individual elements in a list.\n\n### Signature\ndef cube_nums(nums):",
    "timestamp": "2025-10-17T17:31:22.546328",
    "response_time": "0.99",
    "context": "{\"function_name\": \"cube_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 448,
    "solution": "from typing import List\n\ndef cal_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    \n    perrin = [3, 0, 2]\n    for i in range(3, n):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    \n    return sum(perrin)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the sum of perrin numbers.\n\n### Signature\ndef cal_sum(n):",
    "timestamp": "2025-10-17T17:31:26.826489",
    "response_time": "4.28",
    "context": "{\"function_name\": \"cal_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 450,
    "solution": "from typing import List\n\ndef extract_string(strings: List[str], length: int) -> List[str]:\n    return [s for s in strings if len(s) == length]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract specified size of strings from a given list of string values.\n\n### Signature\ndef extract_string(str, l):",
    "timestamp": "2025-10-17T17:31:28.550131",
    "response_time": "1.72",
    "context": "{\"function_name\": \"extract_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 451,
    "solution": "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from the given string.\n\n### Signature\ndef remove_whitespaces(text1):",
    "timestamp": "2025-10-17T17:31:29.669907",
    "response_time": "1.12",
    "context": "{\"function_name\": \"remove_whitespaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 452,
    "solution": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n### Signature\ndef loss_amount(actual_cost,sale_amount):",
    "timestamp": "2025-10-17T17:31:31.205108",
    "response_time": "1.53",
    "context": "{\"function_name\": \"loss_amount\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 453,
    "solution": "def sumofFactors(n) :\n    import math\n    \n    if n % 2 != 0:\n        return 0\n    \n    res = 1\n    \n    # Check for number of 2s in n\n    while n % 2 == 0:\n        n = n // 2\n        res += 2\n    \n    # n must be odd at this point, thus skip even numbers\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        \n        while n % i == 0:\n            count += 1\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        \n        res *= curr_sum\n    \n    # This condition is to handle the case when n is a prime number\n    # greater than 2\n    if n >= 2:\n        res *= (1 + n)\n    \n    return res",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of even factors of a number.\n\n### Signature\ndef sumofFactors(n) :",
    "timestamp": "2025-10-17T17:31:38.453463",
    "response_time": "7.25",
    "context": "{\"function_name\": \"sumofFactors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 454,
    "solution": "import re\n\ndef text_match_wordz(text):\n    # This function uses regular expression to find words containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a word containing 'z'.\n\n### Signature\ndef text_match_wordz(text):",
    "timestamp": "2025-10-17T17:31:40.503024",
    "response_time": "2.05",
    "context": "{\"function_name\": \"text_match_wordz\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 455,
    "solution": "def check_monthnumb_number(monthnum2):\n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    return monthnum2 in months_with_31_days",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 31 days or not.\n\n### Signature\ndef check_monthnumb_number(monthnum2):",
    "timestamp": "2025-10-17T17:31:42.663989",
    "response_time": "2.16",
    "context": "{\"function_name\": \"check_monthnumb_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 456,
    "solution": "def reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to reverse each string in a given list of string values.\n\n### Signature\ndef reverse_string_list(stringlist):",
    "timestamp": "2025-10-17T17:31:43.769292",
    "response_time": "1.10",
    "context": "{\"function_name\": \"reverse_string_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 457,
    "solution": "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    min_length_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < len(min_length_sublist):\n            min_length_sublist = sublist\n    return min_length_sublist",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sublist having minimum length.\n\n### Signature\ndef Find_Min(lst):",
    "timestamp": "2025-10-17T17:31:46.663618",
    "response_time": "2.89",
    "context": "{\"function_name\": \"Find_Min\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 458,
    "solution": "def rectangle_area(l, b):\n    return l * b",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the area of a rectangle.\n\n### Signature\ndef rectangle_area(l,b):",
    "timestamp": "2025-10-17T17:31:47.480906",
    "response_time": "0.82",
    "context": "{\"function_name\": \"rectangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 459,
    "solution": "import re\n\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]+', '', str1)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove uppercase substrings from a given string.\n\n### Signature\ndef remove_uppercase(str1):",
    "timestamp": "2025-10-17T17:31:48.668297",
    "response_time": "1.18",
    "context": "{\"function_name\": \"remove_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 460,
    "solution": "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to get the first element of each sublist.\n\n### Signature\ndef Extract(lst):",
    "timestamp": "2025-10-17T17:31:50.200626",
    "response_time": "1.53",
    "context": "{\"function_name\": \"Extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 461,
    "solution": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the upper case characters in a given string.\n\n### Signature\ndef upper_ctr(str):",
    "timestamp": "2025-10-17T17:31:51.793242",
    "response_time": "1.59",
    "context": "{\"function_name\": \"upper_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 462,
    "solution": "from itertools import combinations\n\ndef combinations_list(list1):\n    all_combinations = []\n    for r in range(len(list1) + 1):\n        combinations_r = combinations(list1, r)\n        all_combinations.extend(combinations_r)\n    return all_combinations",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find all possible combinations of the elements of a given list.\n\n### Signature\ndef combinations_list(list1):",
    "timestamp": "2025-10-17T17:31:53.913467",
    "response_time": "2.12",
    "context": "{\"function_name\": \"combinations_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 463,
    "solution": "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        \n        result = max(result, max_product)\n    \n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum product subarray of the given array.\n\n### Signature\ndef max_subarray_product(arr):",
    "timestamp": "2025-10-17T17:31:58.019369",
    "response_time": "4.10",
    "context": "{\"function_name\": \"max_subarray_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 464,
    "solution": "from typing import Dict, Any\n\ndef check_value(d: Dict[Any, Any], n: Any) -> bool:\n    return all(value == n for value in d.values())",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if all values are same in a dictionary.\n\n### Signature\ndef check_value(dict, n):",
    "timestamp": "2025-10-17T17:31:59.610390",
    "response_time": "1.59",
    "context": "{\"function_name\": \"check_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 465,
    "solution": "from collections.abc import Iterable\n\ndef drop_empty(dict1):\n    def is_empty(value):\n        if isinstance(value, bool):\n            return False\n        if value is None:\n            return True\n        if isinstance(value, Iterable) and not value:\n            return True\n        return False\n\n    return {k: v for k, v in dict1.items() if not is_empty(v)}",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to drop empty items from a given dictionary.\n\n### Signature\ndef drop_empty(dict1):",
    "timestamp": "2025-10-17T17:32:02.631467",
    "response_time": "3.02",
    "context": "{\"function_name\": \"drop_empty\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 468,
    "solution": "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    dp = arr[:]\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    \n    return max(dp)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n### Signature\ndef max_product(arr):",
    "timestamp": "2025-10-17T17:32:05.783216",
    "response_time": "3.15",
    "context": "{\"function_name\": \"max_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 470,
    "solution": "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n### Signature\ndef add_pairwise(test_tup):",
    "timestamp": "2025-10-17T17:32:07.947451",
    "response_time": "2.16",
    "context": "{\"function_name\": \"add_pairwise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 471,
    "solution": "from functools import reduce\n\ndef find_remainder(arr, n):\n    product = reduce(lambda x, y: x * y, arr)\n    return product % n",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the product of the array multiplication modulo n.\n\n### Signature\ndef find_remainder(arr, n):",
    "timestamp": "2025-10-17T17:32:09.524403",
    "response_time": "1.57",
    "context": "{\"function_name\": \"find_remainder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 472,
    "solution": "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        return False\n    sorted_list = sorted(l)\n    return all(b - a == 1 for a, b in zip(sorted_list, sorted_list[1:]))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\n### Signature\ndef check_Consecutive(l):",
    "timestamp": "2025-10-17T17:32:11.783210",
    "response_time": "2.26",
    "context": "{\"function_name\": \"check_Consecutive\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 473,
    "solution": "from collections import Counter\n\ndef tuple_intersection(test_list1, test_list2):\n    # Convert each tuple in the lists to a sorted tuple to ensure order doesn't matter\n    sorted_tuples1 = [tuple(sorted(tup)) for tup in test_list1]\n    sorted_tuples2 = [tuple(sorted(tup)) for tup in test_list2]\n    \n    # Count occurrences of each tuple in both lists\n    count1 = Counter(sorted_tuples1)\n    count2 = Counter(sorted_tuples2)\n    \n    # Find the intersection of the two counters\n    intersection = count1 & count2\n    \n    # Convert the intersection counter back to a list of tuples\n    result = list(intersection.elements())\n    \n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n### Signature\ndef tuple_intersection(test_list1, test_list2):",
    "timestamp": "2025-10-17T17:32:17.027568",
    "response_time": "5.24",
    "context": "{\"function_name\": \"tuple_intersection\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 474,
    "solution": "def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to replace characters in a string.\n\n### Signature\ndef replace_char(str1,ch,newch):",
    "timestamp": "2025-10-17T17:32:18.142556",
    "response_time": "1.11",
    "context": "{\"function_name\": \"replace_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 475,
    "solution": "from collections import Counter\n\ndef sort_counter(dict1):\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a dictionary by value.\n\n### Signature\ndef sort_counter(dict1):",
    "timestamp": "2025-10-17T17:32:19.420110",
    "response_time": "1.27",
    "context": "{\"function_name\": \"sort_counter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 476,
    "solution": "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError(\"The list should not be empty\")\n    return max(nums) + min(nums)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\n### Signature\ndef big_sum(nums):",
    "timestamp": "2025-10-17T17:32:21.071498",
    "response_time": "1.65",
    "context": "{\"function_name\": \"big_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 477,
    "solution": "import string\n\ndef is_lower(string):\n    return string.lower()",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to convert the given string to lower case.\n\n### Signature\ndef is_lower(string):",
    "timestamp": "2025-10-17T17:32:21.964368",
    "response_time": "0.89",
    "context": "{\"function_name\": \"is_lower\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 478,
    "solution": "import re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]+', '', str1)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove lowercase substrings from a given string.\n\n### Signature\ndef remove_lowercase(str1):",
    "timestamp": "2025-10-17T17:32:23.109523",
    "response_time": "1.14",
    "context": "{\"function_name\": \"remove_lowercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 479,
    "solution": "import math\n\ndef first_Digit(n) :\n    n = abs(n)  # Ensure n is positive\n    while n >= 10:\n        n = n // 10\n    return n",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the first digit of a given number.\n\n### Signature\ndef first_Digit(n) :",
    "timestamp": "2025-10-17T17:32:25.001736",
    "response_time": "1.89",
    "context": "{\"function_name\": \"first_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 554,
    "solution": "from typing import List\n\ndef Split(lst: List[int]) -> List[int]:\n    return [num for num in lst if num % 2 != 0]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and only returns the odd ones.\n\n### Signature\ndef Split(list):",
    "timestamp": "2025-10-17T17:32:26.487213",
    "response_time": "1.48",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 555,
    "solution": "from typing import Union\n\ndef difference(n: int) -> Union[int, None]:\n    if n < 1:\n        return None\n    \n    sum_of_cubes = sum(i**3 for i in range(1, n + 1))\n    sum_of_numbers = sum(i for i in range(1, n + 1))\n    \n    return sum_of_cubes - sum_of_numbers",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n### Signature\ndef difference(n) :",
    "timestamp": "2025-10-17T17:32:29.555787",
    "response_time": "3.07",
    "context": "{\"function_name\": \"difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 556,
    "solution": "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = 0\n    even_count = 0\n    \n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # XOR of an odd number and an even number is odd\n    return odd_count * even_count",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose xor value is odd.\n\n### Signature\ndef find_Odd_Pair(A,N) :",
    "timestamp": "2025-10-17T17:32:32.965610",
    "response_time": "3.41",
    "context": "{\"function_name\": \"find_Odd_Pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 557,
    "solution": "def toggle_string(string):\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to toggle the case of all characters in a string.\n\n### Signature\ndef toggle_string(string):",
    "timestamp": "2025-10-17T17:32:34.364243",
    "response_time": "1.39",
    "context": "{\"function_name\": \"toggle_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 558,
    "solution": "from itertools import zip_longest\n\ndef digit_distance_nums(n1, n2):\n    # Convert numbers to strings to iterate over each digit\n    str_n1, str_n2 = str(n1), str(n2)\n    \n    # Use zip_longest to handle numbers of different lengths\n    # Fill shorter number with '0' on the left\n    digit_pairs = zip_longest(reversed(str_n1), reversed(str_n2), fillvalue='0')\n    \n    # Calculate the sum of absolute differences of corresponding digits\n    return sum(abs(int(d1) - int(d2)) for d1, d2 in digit_pairs)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of the per-digit difference between two integers.\n\n### Signature\ndef digit_distance_nums(n1, n2):",
    "timestamp": "2025-10-17T17:32:39.082216",
    "response_time": "4.71",
    "context": "{\"function_name\": \"digit_distance_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 559,
    "solution": "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if size == 0:\n        return 0\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n\n### Signature\ndef max_sub_array_sum(a, size):",
    "timestamp": "2025-10-17T17:32:42.907761",
    "response_time": "3.82",
    "context": "{\"function_name\": \"max_sub_array_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 560,
    "solution": "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple, test_tup2: Tuple) -> Tuple:\n    # Combine both tuples and convert to a set to find unique elements\n    combined_set = set(test_tup1) | set(test_tup2)\n    # Sort the unique elements and convert back to a tuple\n    sorted_union = tuple(sorted(combined_set))\n    return sorted_union",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n\n### Signature\ndef union_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:32:46.185510",
    "response_time": "3.27",
    "context": "{\"function_name\": \"union_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 562,
    "solution": "from typing import List\n\ndef Find_Max_Length(lst: List[List]) -> int:\n    if not lst:\n        return 0\n    return max(len(sublist) for sublist in lst)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest sublists.\n\n### Signature\ndef Find_Max_Length(lst):",
    "timestamp": "2025-10-17T17:32:47.864274",
    "response_time": "1.68",
    "context": "{\"function_name\": \"Find_Max_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 563,
    "solution": "import re\n\ndef extract_values(text):\n    return re.findall(r'\"(.*?)\"', text)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks from a string.\n\n### Signature\ndef extract_values(text):",
    "timestamp": "2025-10-17T17:32:49.040041",
    "response_time": "1.17",
    "context": "{\"function_name\": \"extract_values\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 564,
    "solution": "from itertools import combinations\n\ndef count_Pairs(arr, n):\n    count = 0\n    for pair in combinations(arr, 2):\n        if pair[0] != pair[1]:\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n### Signature\ndef count_Pairs(arr,n):",
    "timestamp": "2025-10-17T17:32:51.128995",
    "response_time": "2.09",
    "context": "{\"function_name\": \"count_Pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 565,
    "solution": "def split(word):\n    return list(word)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to split a string into characters.\n\n### Signature\ndef split(word):",
    "timestamp": "2025-10-17T17:32:51.904623",
    "response_time": "0.77",
    "context": "{\"function_name\": \"split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 566,
    "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to get the sum of the digits of a non-negative integer.\n\n### Signature\ndef sum_digits(n):",
    "timestamp": "2025-10-17T17:32:53.009324",
    "response_time": "1.10",
    "context": "{\"function_name\": \"sum_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 567,
    "solution": "from typing import List\n\ndef issort_list(list1: List) -> bool:\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether a specified list is sorted or not.\n\n### Signature\ndef issort_list(list1):",
    "timestamp": "2025-10-17T17:32:54.836026",
    "response_time": "1.82",
    "context": "{\"function_name\": \"issort_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 568,
    "solution": "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to create a list of N empty dictionaries.\n\n### Signature\ndef empty_list(length):",
    "timestamp": "2025-10-17T17:32:56.072368",
    "response_time": "1.23",
    "context": "{\"function_name\": \"empty_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 569,
    "solution": "from typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list1]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(list1):",
    "timestamp": "2025-10-17T17:32:57.624536",
    "response_time": "1.55",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 572,
    "solution": "from typing import List\n\ndef two_unique_nums(nums: List[List[int]]) -> List[List[int]]:\n    return [list(set(lst)) for lst in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to remove duplicate numbers from a given number of lists.\n\n### Signature\ndef two_unique_nums(nums):",
    "timestamp": "2025-10-17T17:32:58.943186",
    "response_time": "1.32",
    "context": "{\"function_name\": \"two_unique_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 573,
    "solution": "from functools import reduce\nfrom operator import mul\n\ndef unique_product(list_data):\n    unique_numbers = set(list_data)\n    return reduce(mul, unique_numbers, 1)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to calculate the product of the unique numbers in a given list.\n\n### Signature\ndef unique_product(list_data):",
    "timestamp": "2025-10-17T17:33:00.510590",
    "response_time": "1.56",
    "context": "{\"function_name\": \"unique_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 574,
    "solution": "import math\n\ndef surfacearea_cylinder(r, h):\n    return 2 * math.pi * r * (r + h)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cylinder.\n\n### Signature\ndef surfacearea_cylinder(r,h):",
    "timestamp": "2025-10-17T17:33:01.804586",
    "response_time": "1.29",
    "context": "{\"function_name\": \"surfacearea_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 576,
    "solution": "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    n = len(A)\n    m = len(B)\n    \n    if n == 0:\n        return True\n    if m == 0:\n        return False\n    \n    for i in range(m - n + 1):\n        j = 0\n        while (j < n):\n            if (A[j] != B[i + j]):\n                break\n            j += 1\n        if j == n:\n            return True\n    \n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether a list is sublist of another or not.\n\n### Signature\ndef is_Sub_Array(A,B):",
    "timestamp": "2025-10-17T17:33:06.030200",
    "response_time": "4.22",
    "context": "{\"function_name\": \"is_Sub_Array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 577,
    "solution": "import math\n\ndef last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial = (factorial * i) % 10\n    return factorial",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the last digit in factorial of a given number.\n\n### Signature\ndef last_Digit_Factorial(n):",
    "timestamp": "2025-10-17T17:33:08.608026",
    "response_time": "2.57",
    "context": "{\"function_name\": \"last_Digit_Factorial\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 578,
    "solution": "from itertools import zip_longest\n\ndef interleave_lists(list1, list2, list3):\n    interleaved = []\n    for items in zip_longest(list1, list2, list3):\n        interleaved.extend(items)\n    return interleaved",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to interleave 3 lists of the same length into a single flat list.\n\n### Signature\ndef interleave_lists(list1,list2,list3):",
    "timestamp": "2025-10-17T17:33:10.695956",
    "response_time": "2.08",
    "context": "{\"function_name\": \"interleave_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 579,
    "solution": "from typing import Tuple, Set\n\ndef find_dissimilar(test_tup1: Tuple, test_tup2: Tuple) -> Set:\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return dissimilar_elements",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the dissimilar elements in the given two tuples.\n\n### Signature\ndef find_dissimilar(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:33:13.316098",
    "response_time": "2.62",
    "context": "{\"function_name\": \"find_dissimilar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 580,
    "solution": "from collections.abc import Iterable\n\ndef extract_even(test_tuple, even_fnc):\n    def process_element(element):\n        if isinstance(element, Iterable) and not isinstance(element, (str, bytes)):\n            return tuple(process_element(sub_elem) for sub_elem in element if even_fnc(sub_elem))\n        else:\n            return element if even_fnc(element) else None\n\n    result = process_element(test_tuple)\n    def clean_none_elements(data):\n        if isinstance(data, tuple):\n            return tuple(clean_none_elements(item) for item in data if item is not None)\n        return data\n\n    return clean_none_elements(result)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove uneven elements in the nested mixed tuple.\n\n### Signature\ndef even_ele(test_tuple, even_fnc):",
    "timestamp": "2025-10-17T17:33:17.824144",
    "response_time": "4.50",
    "context": "{\"function_name\": \"extract_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 581,
    "solution": "import math\n\ndef surface_Area(b, s):\n    base_area = b ** 2\n    lateral_surface_area = 2 * b * s\n    total_surface_area = base_area + lateral_surface_area\n    return total_surface_area",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\n### Signature\ndef surface_Area(b,s):",
    "timestamp": "2025-10-17T17:33:19.910163",
    "response_time": "2.08",
    "context": "{\"function_name\": \"surface_Area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 582,
    "solution": "def my_dict(dict1):\n    return len(dict1) == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if a dictionary is empty\n\n### Signature\ndef my_dict(dict1):",
    "timestamp": "2025-10-17T17:33:20.792999",
    "response_time": "0.88",
    "context": "{\"function_name\": \"my_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 583,
    "solution": "from math import factorial\n\ndef catalan_number(num):\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function which returns nth catalan number.\n\n### Signature\ndef catalan_number(num):",
    "timestamp": "2025-10-17T17:33:22.243046",
    "response_time": "1.45",
    "context": "{\"function_name\": \"catalan_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 584,
    "solution": "import re\n\ndef find_adverbs(text):\n    # Regular expression to find words ending with 'ly'\n    pattern = r\"\\b\\w+ly\\b\"\n    matches = list(re.finditer(pattern, text))\n    \n    if matches:\n        first_adverb = matches[0].group()\n        start_position = matches[0].start()\n        end_position = matches[0].end() - 1\n        return first_adverb, start_position, end_position\n    else:\n        return None",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n\n### Signature\ndef find_adverbs(text):",
    "timestamp": "2025-10-17T17:33:25.881813",
    "response_time": "3.64",
    "context": "{\"function_name\": \"find_adverbs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 585,
    "solution": "from typing import List, Dict\n\ndef expensive_items(items: List[Dict[str, float]], n: int) -> List[Dict[str, float]]:\n    # Sort items by price in descending order and return the top n items\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the n most expensive items in a given dataset.\n\n### Signature\ndef expensive_items(items,n):",
    "timestamp": "2025-10-17T17:33:28.472085",
    "response_time": "2.59",
    "context": "{\"function_name\": \"expensive_items\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 586,
    "solution": "from typing import List\n\ndef split_Arr(l: List, n: int) -> List:\n    if n <= 0:\n        return l\n    n = n % len(l)  # Handle cases where n is greater than the length of the list\n    return l[n:] + l[:n]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n\n### Signature\ndef split_Arr(l, n):",
    "timestamp": "2025-10-17T17:33:30.891697",
    "response_time": "2.42",
    "context": "{\"function_name\": \"split_Arr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 587,
    "solution": "def list_tuple(listx):\n    return tuple(listx)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert a list to a tuple.\n\n### Signature\ndef list_tuple(listx):",
    "timestamp": "2025-10-17T17:33:31.808289",
    "response_time": "0.91",
    "context": "{\"function_name\": \"list_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 588,
    "solution": "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the difference between largest and smallest value in a given list.\n\n### Signature\ndef big_diff(nums):",
    "timestamp": "2025-10-17T17:33:33.828076",
    "response_time": "2.02",
    "context": "{\"function_name\": \"big_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 589,
    "solution": "import math\n\ndef perfect_squares(a, b):\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [i**2 for i in range(start, end + 1)]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find perfect squares between two given numbers.\n\n### Signature\ndef perfect_squares(a, b):",
    "timestamp": "2025-10-17T17:33:35.734270",
    "response_time": "1.90",
    "context": "{\"function_name\": \"perfect_squares\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 590,
    "solution": "import math\n\ndef polar_rect(x, y):\n    r = x\n    theta = y\n    rect_x = r * math.cos(theta)\n    rect_y = r * math.sin(theta)\n    return (rect_x, rect_y)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert polar coordinates to rectangular coordinates.\n\n### Signature\ndef polar_rect(x,y):",
    "timestamp": "2025-10-17T17:33:37.739141",
    "response_time": "2.00",
    "context": "{\"function_name\": \"polar_rect\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 591,
    "solution": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last elements in a list.\n\n### Signature\ndef swap_List(newList):",
    "timestamp": "2025-10-17T17:33:39.542146",
    "response_time": "1.79",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 592,
    "solution": "from math import comb\n\ndef sum_Of_product(n, k):\n    return comb(n, k)\n\ndef sum_of_product_of_consecutive_binomial_coeffs(n):\n    total_sum = 0\n    for k in range(n):\n        total_sum += binomial_Coeff(n, k) * binomial_Coeff(n, k + 1)\n    return total_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\n### Signature\ndef binomial_Coeff(n,k):",
    "timestamp": "2025-10-17T17:33:42.353392",
    "response_time": "2.81",
    "context": "{\"function_name\": \"sum_Of_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 593,
    "solution": "import re\n\ndef removezero_ip(ip):\n    def remove_leading_zeroes(part):\n        return str(int(part))\n    \n    parts = ip.split('.')\n    cleaned_parts = [remove_leading_zeroes(part) for part in parts]\n    return '.'.join(cleaned_parts)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove leading zeroes from an ip address.\n\n### Signature\ndef removezero_ip(ip):",
    "timestamp": "2025-10-17T17:33:44.595878",
    "response_time": "2.24",
    "context": "{\"function_name\": \"removezero_ip\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 594,
    "solution": "from typing import List, Optional\n\ndef diff_even_odd(list1: List[int]) -> Optional[int]:\n    first_even = None\n    first_odd = None\n    \n    for number in list1:\n        if first_even is None and number % 2 == 0:\n            first_even = number\n        if first_odd is None and number % 2 != 0:\n            first_odd = number\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return None",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the difference of the first even and first odd number of a given list.\n\n### Signature\ndef diff_even_odd(list1):",
    "timestamp": "2025-10-17T17:33:49.182536",
    "response_time": "4.58",
    "context": "{\"function_name\": \"diff_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 595,
    "solution": "from typing import List\n\ndef min_Swaps(str1: str, str2: str) -> int:\n    if len(str1) != len(str2):\n        return -1\n    \n    mismatches_01 = 0\n    mismatches_10 = 0\n    \n    for bit1, bit2 in zip(str1, str2):\n        if bit1 != bit2:\n            if bit1 == '0':\n                mismatches_01 += 1\n            else:\n                mismatches_10 += 1\n    \n    # To make the strings equal, we need to swap pairs of mismatches\n    # One swap can fix two mismatches of type 01 and 10\n    swaps = mismatches_01 // 2 + mismatches_10 // 2\n    \n    # If there is one 01 and one 10 mismatch left, we need one more swap\n    if mismatches_01 % 2 != 0 and mismatches_10 % 2 != 0:\n        swaps += 2\n    elif mismatches_01 % 2 != 0 or mismatches_10 % 2 != 0:\n        return -1\n    \n    return swaps",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n### Signature\ndef min_Swaps(str1,str2) :",
    "timestamp": "2025-10-17T17:33:57.922463",
    "response_time": "8.74",
    "context": "{\"function_name\": \"min_Swaps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 596,
    "solution": "import sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the size in bytes of the given tuple.\n\n### Signature\ndef tuple_size(tuple_list):",
    "timestamp": "2025-10-17T17:33:58.959585",
    "response_time": "1.03",
    "context": "{\"function_name\": \"tuple_size\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 597,
    "solution": "from bisect import bisect_right\n\ndef find_kth(arr1, arr2, k):\n    if not arr1:\n        return arr2[k - 1]\n    if not arr2:\n        return arr1[k - 1]\n    \n    len1, len2 = len(arr1), len(arr2)\n    \n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    \n    low, high = 0, min(k, len1)\n    \n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n        \n        maxLeft1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        minRight1 = float('inf') if partition1 == len1 else arr1[partition1]\n        \n        maxLeft2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        minRight2 = float('inf') if partition2 == len2 else arr2[partition2]\n        \n        if maxLeft1 <= minRight2 and maxLeft2 <= minRight1:\n            return max(maxLeft1, maxLeft2)\n        elif maxLeft1 > minRight2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n    \n    raise ValueError(\"k is out of bounds for the combined array length\")",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find kth element from the given two sorted arrays.\n\n### Signature\ndef find_kth(arr1, arr2, k):",
    "timestamp": "2025-10-17T17:34:09.143622",
    "response_time": "10.18",
    "context": "{\"function_name\": \"find_kth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 598,
    "solution": "import math\n\ndef armstrong_number(number):\n    # Convert the number to a string to easily iterate over digits\n    digits = str(number)\n    # Calculate the number of digits\n    num_digits = len(digits)\n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in digits)\n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == number",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given number is armstrong or not.\n\n### Signature\ndef armstrong_number(number):",
    "timestamp": "2025-10-17T17:34:12.972037",
    "response_time": "3.82",
    "context": "{\"function_name\": \"armstrong_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 599,
    "solution": "def sum_average(number):\n    if number < 1:\n        return 0, 0\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    return total_sum, average",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find sum and average of first n natural numbers.\n\n### Signature\ndef sum_average(number):",
    "timestamp": "2025-10-17T17:34:15.058521",
    "response_time": "2.08",
    "context": "{\"function_name\": \"sum_average\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 600,
    "solution": "def is_Even(n) :\n    return n % 2 == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given number is even or not.\n\n### Signature\ndef is_Even(n) :",
    "timestamp": "2025-10-17T17:34:16.110099",
    "response_time": "1.05",
    "context": "{\"function_name\": \"is_Even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 602,
    "solution": "def first_repeated_char(str1):\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the first repeated character in a given string.\n\n### Signature\ndef first_repeated_char(str1):",
    "timestamp": "2025-10-17T17:34:17.725210",
    "response_time": "1.61",
    "context": "{\"function_name\": \"first_repeated_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 603,
    "solution": "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    \n    ludics = list(range(1, n + 1))\n    index = 1\n    \n    while index < len(ludics):\n        first_ludic = ludics[index]\n        remove_index = index + first_ludic\n        while remove_index < len(ludics):\n            ludics.pop(remove_index)\n            remove_index += first_ludic - 1\n        index += 1\n    \n    return ludics",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\n### Signature\ndef get_ludic(n):",
    "timestamp": "2025-10-17T17:34:21.959234",
    "response_time": "4.23",
    "context": "{\"function_name\": \"get_ludic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 604,
    "solution": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to reverse words seperated by spaces in a given string.\n\n### Signature\ndef reverse_words(s):",
    "timestamp": "2025-10-17T17:34:23.029257",
    "response_time": "1.07",
    "context": "{\"function_name\": \"reverse_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 605,
    "solution": "import math\n\ndef prime_num(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given integer is a prime number.\n\n### Signature\ndef prime_num(num):",
    "timestamp": "2025-10-17T17:34:26.644282",
    "response_time": "3.61",
    "context": "{\"function_name\": \"prime_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 606,
    "solution": "import math\n\ndef radian_degree(degree):\n    return math.radians(degree)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert degrees to radians.\n\n### Signature\ndef radian_degree(degree):",
    "timestamp": "2025-10-17T17:34:27.658823",
    "response_time": "1.01",
    "context": "{\"function_name\": \"radian_degree\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 607,
    "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\n### Signature\ndef find_literals(text, pattern):",
    "timestamp": "2025-10-17T17:34:29.538618",
    "response_time": "1.88",
    "context": "{\"function_name\": \"find_literals\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 608,
    "solution": "from math import factorial\n\ndef bell_Number(n):\n    def stirling_second_kind(n, k):\n        if k == 0 and n == 0:\n            return 1\n        if n == 0 or k > n:\n            return 0\n        return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n    bell = 0\n    for k in range(n + 1):\n        bell += stirling_second_kind(n, k)\n    return bell",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find nth bell number.\n\n### Signature\ndef bell_Number(n):",
    "timestamp": "2025-10-17T17:34:33.540684",
    "response_time": "4.00",
    "context": "{\"function_name\": \"bell_Number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 610,
    "solution": "from typing import List, Any\n\ndef remove_kth_element(list1: List[Any], L: int) -> List[Any]:\n    if L < 0 or L >= len(list1):\n        raise IndexError(\"Index out of range\")\n    return list1[:L] + list1[L+1:]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\n### Signature\ndef remove_kth_element(list1, L):",
    "timestamp": "2025-10-17T17:34:35.971323",
    "response_time": "2.43",
    "context": "{\"function_name\": \"remove_kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 611,
    "solution": "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max(row[N] for row in test_list)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\n### Signature\ndef max_of_nth(test_list, N):",
    "timestamp": "2025-10-17T17:34:37.611927",
    "response_time": "1.64",
    "context": "{\"function_name\": \"max_of_nth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 612,
    "solution": "from typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n### Signature\ndef merge(lst):",
    "timestamp": "2025-10-17T17:34:39.859276",
    "response_time": "2.24",
    "context": "{\"function_name\": \"merge\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 614,
    "solution": "from itertools import accumulate\n\ndef cummulative_sum(test_list):\n    # Flatten the list of tuples and calculate the cumulative sum\n    flattened_list = [item for sublist in test_list for item in sublist]\n    cumulative_sums = list(accumulate(flattened_list))\n    return cumulative_sums",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n### Signature\ndef cummulative_sum(test_list):",
    "timestamp": "2025-10-17T17:34:42.303962",
    "response_time": "2.44",
    "context": "{\"function_name\": \"cummulative_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 615,
    "solution": "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\n### Signature\ndef average_tuple(nums):",
    "timestamp": "2025-10-17T17:34:44.054066",
    "response_time": "1.75",
    "context": "{\"function_name\": \"average_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 616,
    "solution": "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\n### Signature\ndef tuple_modulo(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:34:46.136093",
    "response_time": "2.08",
    "context": "{\"function_name\": \"tuple_modulo\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 617,
    "solution": "from math import ceil\n\ndef min_Jumps(steps, d):\n    # Calculate the minimum number of jumps required\n    # We need to cover a distance of d units on the x-axis\n    # Each jump can be of length steps[0] or steps[1]\n    # We need to find the minimum number of such jumps to cover exactly d units\n    \n    # Sort the steps to consider the larger step first\n    steps.sort(reverse=True)\n    \n    # Calculate the number of jumps needed if we use the larger step as much as possible\n    jumps = d // steps[0]\n    remainder = d % steps[0]\n    \n    # If there is no remainder, we have found the answer\n    if remainder == 0:\n        return jumps\n    \n    # If there is a remainder, we need to use the smaller step to cover it\n    # Calculate the number of jumps needed with the smaller step\n    if remainder % steps[1] == 0:\n        return jumps + (remainder // steps[1])\n    else:\n        # If the remainder cannot be exactly covered by the smaller step, we need to adjust\n        # We need to try using one less of the larger step and see if we can cover the distance with the smaller step\n        for i in range(jumps, -1, -1):\n            new_remainder = d - (i * steps[0])\n            if new_remainder % steps[1] == 0:\n                return i + (new_remainder // steps[1])\n    \n    # If no combination works, return -1 (though logically, this should not happen with positive steps and d)\n    return -1",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n### Signature\ndef min_Jumps(steps, d):",
    "timestamp": "2025-10-17T17:34:57.564940",
    "response_time": "11.43",
    "context": "{\"function_name\": \"min_Jumps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 618,
    "solution": "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [x / y for x, y in zip(nums1, nums2) if y != 0]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to divide two lists element wise.\n\n### Signature\ndef div_list(nums1,nums2):",
    "timestamp": "2025-10-17T17:34:59.484717",
    "response_time": "1.91",
    "context": "{\"function_name\": \"div_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 619,
    "solution": "import re\n\ndef move_num(test_str):\n    letters = re.findall(r'[a-zA-Z]', test_str)\n    numbers = re.findall(r'\\d', test_str)\n    return ''.join(letters) + ''.join(numbers)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to move all the numbers to the end of the given string.\n\n### Signature\ndef move_num(test_str):",
    "timestamp": "2025-10-17T17:35:01.410483",
    "response_time": "1.92",
    "context": "{\"function_name\": \"move_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 620,
    "solution": "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n### Signature\ndef largest_subset(a):",
    "timestamp": "2025-10-17T17:35:05.121186",
    "response_time": "3.71",
    "context": "{\"function_name\": \"largest_subset\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 622,
    "solution": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    # Merge the two sorted arrays\n    merged = []\n    i = j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    \n    # If there are remaining elements in arr1\n    while i < n:\n        merged.append(arr1[i])\n        i += 1\n    \n    # If there are remaining elements in arr2\n    while j < n:\n        merged.append(arr2[j])\n        j += 1\n    \n    # Since the arrays are of the same size, the median will be the average of the two middle elements\n    median = (merged[n - 1] + merged[n]) / 2\n    return median",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the median of two sorted lists of same size.\n\n### Signature\ndef get_median(arr1, arr2, n):",
    "timestamp": "2025-10-17T17:35:12.077040",
    "response_time": "6.95",
    "context": "{\"function_name\": \"get_median\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 623,
    "solution": "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to compute the n-th power of each number in a list.\n\n### Signature\ndef nth_nums(nums,n):",
    "timestamp": "2025-10-17T17:35:13.552623",
    "response_time": "1.47",
    "context": "{\"function_name\": \"nth_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 624,
    "solution": "def is_upper(string):\n    return string.upper()",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to convert a given string to uppercase.\n\n### Signature\ndef is_upper(string):",
    "timestamp": "2025-10-17T17:35:14.309213",
    "response_time": "0.75",
    "context": "{\"function_name\": \"is_upper\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 625,
    "solution": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last element in a given list.\n\n### Signature\ndef swap_List(newList):",
    "timestamp": "2025-10-17T17:35:16.096043",
    "response_time": "1.78",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 626,
    "solution": "import math\n\ndef triangle_area(r) :\n    # The largest triangle that can be inscribed in a semicircle is a right-angled triangle\n    # with the hypotenuse as the diameter of the semicircle.\n    # The area of such a triangle is (1/2) * base * height, where base and height are both equal to the radius.\n    return (1/2) * r * (2 * r)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n### Signature\ndef triangle_area(r) :",
    "timestamp": "2025-10-17T17:35:19.676448",
    "response_time": "3.58",
    "context": "{\"function_name\": \"triangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 627,
    "solution": "from typing import List\n\ndef find_First_Missing(array: List[int], start: int = 0, end: int = None) -> int:\n    if end is None:\n        end = len(array) - 1\n\n    if start > end:\n        return start\n\n    mid = (start + end) // 2\n\n    if array[mid] == mid:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        return find_First_Missing(array, start, mid - 1)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\n### Signature\ndef find_First_Missing(array,start=0,end=None):",
    "timestamp": "2025-10-17T17:35:23.485101",
    "response_time": "3.81",
    "context": "{\"function_name\": \"find_First_Missing\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 628,
    "solution": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to replace all spaces in the given string with '%20'.\n\n### Signature\ndef replace_spaces(string):",
    "timestamp": "2025-10-17T17:35:24.422670",
    "response_time": "0.93",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 629,
    "solution": "from typing import List\n\ndef Split(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if num % 2 == 0]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find even numbers from a list of numbers.\n\n### Signature\ndef Split(list):",
    "timestamp": "2025-10-17T17:35:25.956752",
    "response_time": "1.53",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 630,
    "solution": "from typing import List, Tuple\n\ndef get_coordinates(ele: Tuple[int, int], sub: List[Tuple[int, int]] = []) -> List[Tuple[int, int]]:\n    x, y = ele\n    adjacent_coords = [\n        (x - 1, y), (x + 1, y),  # left, right\n        (x, y - 1), (x, y + 1),  # down, up\n        (x - 1, y - 1), (x + 1, y + 1),  # bottom-left, top-right\n        (x - 1, y + 1), (x + 1, y - 1)  # top-left, bottom-right\n    ]\n    return adjacent_coords + sub",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n### Signature\ndef adjac(ele, sub = []):",
    "timestamp": "2025-10-17T17:35:31.648754",
    "response_time": "5.69",
    "context": "{\"function_name\": \"get_coordinates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 631,
    "solution": "import string\n\ndef replace_spaces(text):\n    result = []\n    for char in text:\n        if char == ' ':\n            result.append('_')\n        elif char == '_':\n            result.append(' ')\n        else:\n            result.append(char)\n    return ''.join(result)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\n### Signature\ndef replace_spaces(text):",
    "timestamp": "2025-10-17T17:35:33.891258",
    "response_time": "2.24",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 632,
    "solution": "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] != 0:\n            num_list[non_zero_index], num_list[i] = num_list[i], num_list[non_zero_index]\n            non_zero_index += 1\n    return num_list",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to move all zeroes to the end of the given list.\n\n### Signature\ndef move_zero(num_list):",
    "timestamp": "2025-10-17T17:35:36.966653",
    "response_time": "3.07",
    "context": "{\"function_name\": \"move_zero\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 633,
    "solution": "from itertools import combinations\n\ndef pair_xor_Sum(arr, n):\n    return sum(x ^ y for x, y in combinations(arr, 2))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\n### Signature\ndef pair_xor_Sum(arr,n) :",
    "timestamp": "2025-10-17T17:35:38.438151",
    "response_time": "1.47",
    "context": "{\"function_name\": \"pair_xor_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 635,
    "solution": "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(iterable)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        heapify(iterable, i, 0)\n\n    return iterable",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort the given list.\n\n### Signature\ndef heap_sort(iterable):",
    "timestamp": "2025-10-17T17:35:45.674925",
    "response_time": "7.22",
    "context": "{\"function_name\": \"heap_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 637,
    "solution": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given amount has no profit and no loss\n\n### Signature\ndef noprofit_noloss(actual_cost,sale_amount):",
    "timestamp": "2025-10-17T17:35:46.876714",
    "response_time": "1.20",
    "context": "{\"function_name\": \"noprofit_noloss\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 638,
    "solution": "import math\n\ndef wind_chill(v, t):\n    if v < 5 or t > 10:\n        return t\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    return math.ceil(wind_chill_index)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n### Signature\ndef wind_chill(v,t):",
    "timestamp": "2025-10-17T17:35:50.545995",
    "response_time": "3.66",
    "context": "{\"function_name\": \"wind_chill\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 639,
    "solution": "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum(len(name) for name in sample_names if name[0].isupper())",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n### Signature\ndef sample_nam(sample_names):",
    "timestamp": "2025-10-17T17:35:52.239880",
    "response_time": "1.69",
    "context": "{\"function_name\": \"sample_nam\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 640,
    "solution": "import re\n\ndef remove_parenthesis(items):\n    return re.sub(r'\\([^)]*\\)', '', items)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n\n### Signature\ndef remove_parenthesis(items):",
    "timestamp": "2025-10-17T17:35:53.498022",
    "response_time": "1.25",
    "context": "{\"function_name\": \"remove_parenthesis\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 641,
    "solution": "def is_nonagonal(n):\n    if n < 1:\n        return None\n    # Formula to find the nth nonagonal number: (7n^2 - 5n) / 2\n    return (7 * n * n - 5 * n) // 2",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth nonagonal number.\n\n### Signature\ndef is_nonagonal(n):",
    "timestamp": "2025-10-17T17:35:55.959265",
    "response_time": "2.46",
    "context": "{\"function_name\": \"is_nonagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 643,
    "solution": "import re\n\ndef text_match_wordz_middle(text):\n    # Regular expression to find 'z' not at the start or end of a word\n    pattern = r'\\Bz\\B'\n    return bool(re.search(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\n### Signature\ndef text_match_wordz_middle(text):",
    "timestamp": "2025-10-17T17:35:57.976998",
    "response_time": "2.01",
    "context": "{\"function_name\": \"text_match_wordz_middle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 644,
    "solution": "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k <= 0:\n        return input\n    k = min(k, len(input))\n    return input[:k][::-1] + input[k:]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to reverse an array upto a given position.\n\n### Signature\ndef reverse_Array_Upto_K(input, k):",
    "timestamp": "2025-10-17T17:36:00.173500",
    "response_time": "2.19",
    "context": "{\"function_name\": \"reverse_Array_Upto_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 720,
    "solution": "from typing import Tuple, Dict, Any\n\ndef add_dict_to_tuple(test_tup: Tuple[Any, ...], test_dict: Dict[Any, Any]) -> Tuple[Any, ...]:\n    return test_tup + (test_dict,)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\n### Signature\ndef add_dict_to_tuple(test_tup, test_dict):",
    "timestamp": "2025-10-17T17:36:02.224950",
    "response_time": "2.05",
    "context": "{\"function_name\": \"add_dict_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 721,
    "solution": "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    if N == 0:\n        return 0.0\n    \n    # Initialize the dp table\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    \n    # Fill the first row\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    # Fill the first column\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    # Fill the rest of the dp table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # The maximum cost from top-left to bottom-right\n    max_cost = dp[N-1][N-1]\n    # The number of cells in the path\n    num_cells = 2 * N - 1\n    \n    # Calculate the maximum average\n    max_average = max_cost / num_cells\n    return max_average",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n### Signature\ndef maxAverageOfPath(cost):",
    "timestamp": "2025-10-17T17:36:11.767585",
    "response_time": "9.54",
    "context": "{\"function_name\": \"maxAverageOfPath\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 722,
    "solution": "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\n### Signature\ndef filter_data(students,h,w):",
    "timestamp": "2025-10-17T17:36:14.365616",
    "response_time": "2.59",
    "context": "{\"function_name\": \"filter_data\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 723,
    "solution": "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\n### Signature\ndef count_same_pair(nums1, nums2):",
    "timestamp": "2025-10-17T17:36:16.847115",
    "response_time": "2.48",
    "context": "{\"function_name\": \"count_same_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 724,
    "solution": "import math\n\ndef power_base_sum(base, power):\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n    return digit_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\n### Signature\ndef power_base_sum(base, power):",
    "timestamp": "2025-10-17T17:36:18.479207",
    "response_time": "1.63",
    "context": "{\"function_name\": \"power_base_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 725,
    "solution": "import re\n\ndef extract_quotation(text1):\n    return re.findall(r'\"(.*?)\"', text1)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks \" \" of the given string.\n\n### Signature\ndef extract_quotation(text1):",
    "timestamp": "2025-10-17T17:36:19.862284",
    "response_time": "1.38",
    "context": "{\"function_name\": \"extract_quotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 726,
    "solution": "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple(test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n### Signature\ndef multiply_elements(test_tup):",
    "timestamp": "2025-10-17T17:36:21.855424",
    "response_time": "1.99",
    "context": "{\"function_name\": \"multiply_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 728,
    "solution": "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n### Signature\ndef sum_list(lst1,lst2):",
    "timestamp": "2025-10-17T17:36:23.107217",
    "response_time": "1.25",
    "context": "{\"function_name\": \"sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 730,
    "solution": "from typing import List\n\ndef consecutive_duplicates(nums: List) -> List:\n    if not nums:\n        return []\n    \n    result = [nums[0]]\n    for i in range(1, len(nums)):\n        if nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    \n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove consecutive duplicates of a given list.\n\n### Signature\ndef consecutive_duplicates(nums):",
    "timestamp": "2025-10-17T17:36:25.718724",
    "response_time": "2.61",
    "context": "{\"function_name\": \"consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 731,
    "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\n### Signature\ndef lateralsurface_cone(r,h):",
    "timestamp": "2025-10-17T17:36:27.800184",
    "response_time": "2.08",
    "context": "{\"function_name\": \"lateralsurface_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 732,
    "solution": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[ ,.]', ':', text)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\n### Signature\ndef replace_specialchar(text):",
    "timestamp": "2025-10-17T17:36:28.970770",
    "response_time": "1.16",
    "context": "{\"function_name\": \"replace_specialchar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 733,
    "solution": "import bisect\n\ndef find_first_occurrence(A, x):\n    index = bisect.bisect_left(A, x)\n    if index < len(A) and A[index] == x:\n        return index\n    return -1",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\n### Signature\ndef find_first_occurrence(A, x):",
    "timestamp": "2025-10-17T17:36:30.956957",
    "response_time": "1.98",
    "context": "{\"function_name\": \"find_first_occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 734,
    "solution": "from itertools import combinations\n\ndef sum_Of_Subarray_Prod(arr):\n    total_sum = 0\n    n = len(arr)\n    for r in range(1, n + 1):\n        for combo in combinations(arr, r):\n            product = 1\n            for num in combo:\n                product *= num\n            total_sum += product\n    return total_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\n### Signature\ndef sum_Of_Subarray_Prod(arr):",
    "timestamp": "2025-10-17T17:36:33.926986",
    "response_time": "2.97",
    "context": "{\"function_name\": \"sum_Of_Subarray_Prod\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 735,
    "solution": "import math\n\ndef toggle_middle_bits(n):\n    if n < 3:\n        return n  # No middle bits to toggle if n is less than 3\n    \n    # Find the number of bits in n\n    num_bits = int(math.log2(n)) + 1\n    \n    # Create a mask to toggle all bits except the first and last\n    mask = (1 << (num_bits - 2)) - 1  # This creates a mask of middle bits set to 1\n    mask <<= 1  # Shift left to exclude the last bit\n    \n    # Toggle the middle bits\n    n ^= mask\n    \n    return n",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\n### Signature\ndef set_middle_bits(n):",
    "timestamp": "2025-10-17T17:36:38.466879",
    "response_time": "4.54",
    "context": "{\"function_name\": \"toggle_middle_bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 736,
    "solution": "import bisect\n\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\n### Signature\ndef left_insertion(a, x):",
    "timestamp": "2025-10-17T17:36:39.715563",
    "response_time": "1.24",
    "context": "{\"function_name\": \"left_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 737,
    "solution": "import re\n\ndef check_str(string):\n    return bool(re.match(r'^[aeiouAEIOU]', string))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\n### Signature\ndef check_str(string):",
    "timestamp": "2025-10-17T17:36:40.860836",
    "response_time": "1.14",
    "context": "{\"function_name\": \"check_str\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 738,
    "solution": "def geometric_sum(n):\n    if n < 0:\n        return 0\n    else:\n        return 1 / (pow(2, n)) + geometric_sum(n - 1)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\n### Signature\ndef geometric_sum(n):",
    "timestamp": "2025-10-17T17:36:42.591305",
    "response_time": "1.73",
    "context": "{\"function_name\": \"geometric_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 739,
    "solution": "import math\n\ndef find_Index(n):\n    # The formula to find the nth triangular number is T_n = n * (n + 1) / 2\n    # We need to find the smallest n such that T_n has at least n digits\n    # This means T_n >= 10^(n-1)\n    # So, n * (n + 1) / 2 >= 10^(n-1)\n    # We can solve this inequality to find the smallest n\n\n    # Start with a reasonable guess\n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) >= n:\n            return index\n        index += 1",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\n### Signature\ndef find_Index(n):",
    "timestamp": "2025-10-17T17:36:48.368199",
    "response_time": "5.77",
    "context": "{\"function_name\": \"find_Index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 740,
    "solution": "from itertools import islice\n\ndef tuple_to_dict(test_tup):\n    res = dict(zip(islice(test_tup, 0, None, 2), islice(test_tup, 1, None, 2)))\n    return res",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\n### Signature\ndef tuple_to_dict(test_tup):",
    "timestamp": "2025-10-17T17:36:50.404136",
    "response_time": "2.03",
    "context": "{\"function_name\": \"tuple_to_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 741,
    "solution": "def all_Characters_Same(s) :\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether all the characters are same or not.\n\n### Signature\ndef all_Characters_Same(s) :",
    "timestamp": "2025-10-17T17:36:52.319003",
    "response_time": "1.91",
    "context": "{\"function_name\": \"all_Characters_Same\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 742,
    "solution": "import math\n\ndef area_tetrahedron(side):\n    return math.sqrt(3) * (side ** 2)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to caluclate the area of a tetrahedron.\n\n### Signature\ndef area_tetrahedron(side):",
    "timestamp": "2025-10-17T17:36:53.580225",
    "response_time": "1.26",
    "context": "{\"function_name\": \"area_tetrahedron\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 743,
    "solution": "from typing import List\n\ndef rotate_right(lst: List, m: int) -> List:\n    n = len(lst)\n    m = m % n  # In case m is greater than n\n    return lst[-m:] + lst[:-m]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\n### Signature\ndef rotate_right(list, m):",
    "timestamp": "2025-10-17T17:36:55.591140",
    "response_time": "2.01",
    "context": "{\"function_name\": \"rotate_right\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 744,
    "solution": "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any(item is None for item in test_tup)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given tuple has any none value or not.\n\n### Signature\ndef check_none(test_tup):",
    "timestamp": "2025-10-17T17:36:57.144507",
    "response_time": "1.55",
    "context": "{\"function_name\": \"check_none\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 745,
    "solution": "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in str_num):\n            result.append(num)\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\n### Signature\ndef divisible_by_digits(startnum, endnum):",
    "timestamp": "2025-10-17T17:37:00.202577",
    "response_time": "3.05",
    "context": "{\"function_name\": \"divisible_by_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 746,
    "solution": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    return (a / 360) * math.pi * r ** 2",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\n### Signature\ndef sector_area(r,a):",
    "timestamp": "2025-10-17T17:37:02.024009",
    "response_time": "1.82",
    "context": "{\"function_name\": \"sector_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 747,
    "solution": "from typing import List\n\ndef lcs_of_three(X: str, Y: str, Z: str) -> int:\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Create a 3D array to store lengths of longest common subsequence.\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    \n    # Build the L table in bottom-up fashion\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n    \n    # L[m][n][o] contains the length of LCS for X[0..n-1], Y[0..m-1] and Z[0..o-1]\n    return L[m][n][o]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n### Signature\ndef lcs_of_three(X, Y, Z):",
    "timestamp": "2025-10-17T17:37:11.964857",
    "response_time": "9.94",
    "context": "{\"function_name\": \"lcs_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 748,
    "solution": "import re\n\ndef capital_words_spaces(str1):\n    return re.sub(r'(?<!^)(?=[A-Z])', ' ', str1)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to put spaces between words starting with capital letters in a given string.\n\n### Signature\ndef capital_words_spaces(str1):",
    "timestamp": "2025-10-17T17:37:13.383693",
    "response_time": "1.41",
    "context": "{\"function_name\": \"capital_words_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 749,
    "solution": "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[str]:\n    return sorted(nums_str, key=int)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n### Signature\ndef sort_numeric_strings(nums_str):",
    "timestamp": "2025-10-17T17:37:14.731676",
    "response_time": "1.34",
    "context": "{\"function_name\": \"sort_numeric_strings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 750,
    "solution": "from typing import List, Tuple\n\ndef add_tuple(test_list: List, test_tup: Tuple) -> List:\n    test_list.append(test_tup)\n    return test_list",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to add the given tuple to the given list.\n\n### Signature\ndef add_tuple(test_list, test_tup):",
    "timestamp": "2025-10-17T17:37:16.297681",
    "response_time": "1.56",
    "context": "{\"function_name\": \"add_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 751,
    "solution": "from typing import List\n\ndef check_min_heap(arr: List[int], i: int) -> bool:\n    if i >= (len(arr) - 2) // 2:\n        return True\n    if (arr[i] <= arr[2 * i + 1] and\n        arr[i] <= arr[2 * i + 2] and\n        check_min_heap_helper(arr, 2 * i + 1) and\n        check_min_heap_helper(arr, 2 * i + 2)):\n        return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n### Signature\ndef check_min_heap_helper(arr, i):",
    "timestamp": "2025-10-17T17:37:20.572482",
    "response_time": "4.27",
    "context": "{\"function_name\": \"check_min_heap\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 752,
    "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\n### Signature\ndef jacobsthal_num(n):",
    "timestamp": "2025-10-17T17:37:23.402762",
    "response_time": "2.82",
    "context": "{\"function_name\": \"jacobsthal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 753,
    "solution": "from heapq import nsmallest\n\ndef min_k(test_list, K):\n    return nsmallest(K, test_list)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n### Signature\ndef min_k(test_list, K):",
    "timestamp": "2025-10-17T17:37:24.591026",
    "response_time": "1.18",
    "context": "{\"function_name\": \"min_k\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 754,
    "solution": "from typing import List\n\ndef extract_index_list(l1: List, l2: List, l3: List) -> List:\n    common_elements = []\n    min_length = min(len(l1), len(l2), len(l3))\n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\n### Signature\ndef extract_index_list(l1, l2, l3):",
    "timestamp": "2025-10-17T17:37:27.592971",
    "response_time": "3.00",
    "context": "{\"function_name\": \"extract_index_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 755,
    "solution": "import sys\n\ndef second_smallest(numbers):\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements.\")\n    \n    first, second = sys.maxsize, sys.maxsize\n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    \n    if second == sys.maxsize:\n        raise ValueError(\"List must contain at least two distinct elements.\")\n    \n    return second",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the second smallest number in a list.\n\n### Signature\ndef second_smallest(numbers):",
    "timestamp": "2025-10-17T17:37:31.246376",
    "response_time": "3.65",
    "context": "{\"function_name\": \"second_smallest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 756,
    "solution": "import re\n\ndef text_match_zero_one(text):\n    patterns = 'ab+'\n    if re.search(patterns, text):\n        return True\n    else:\n        return False",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\n### Signature\ndef text_match_zero_one(text):",
    "timestamp": "2025-10-17T17:37:32.866454",
    "response_time": "1.61",
    "context": "{\"function_name\": \"text_match_zero_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 757,
    "solution": "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    count = 0\n    seen = set()\n    for word in test_list:\n        reverse_word = word[::-1]\n        if reverse_word in seen:\n            count += 1\n        seen.add(word)\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\n### Signature\ndef count_reverse_pairs(test_list):",
    "timestamp": "2025-10-17T17:37:35.356717",
    "response_time": "2.49",
    "context": "{\"function_name\": \"count_reverse_pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 758,
    "solution": "from collections import defaultdict\n\ndef unique_sublists(list1):\n    occurrences = defaultdict(int)\n    for sublist in list1:\n        occurrences[tuple(sublist)] += 1\n    return dict(occurrences)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n### Signature\ndef unique_sublists(list1):",
    "timestamp": "2025-10-17T17:37:37.216063",
    "response_time": "1.85",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 759,
    "solution": "import re\n\ndef is_decimal(num):\n    # Regular expression to match a decimal number with precision of 2\n    decimal_pattern = re.compile(r\"\"\"^[+-]?(\\d+(\\.\\d{1,2})?|\\.\\d{1,2})$\"\"\")\n    return bool(decimal_pattern.match(num))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\n### Signature\ndef is_decimal(num):",
    "timestamp": "2025-10-17T17:37:39.546604",
    "response_time": "2.32",
    "context": "{\"function_name\": \"is_decimal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 760,
    "solution": "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\n### Signature\ndef unique_Element(arr):",
    "timestamp": "2025-10-17T17:37:40.852860",
    "response_time": "1.30",
    "context": "{\"function_name\": \"unique_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 762,
    "solution": "def check_monthnumber_number(monthnum3):\n    # April, June, September, and November have 30 days\n    months_with_30_days = {4, 6, 9, 11}\n    return monthnum3 in months_with_30_days",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n### Signature\ndef check_monthnumber_number(monthnum3):",
    "timestamp": "2025-10-17T17:37:43.142859",
    "response_time": "2.28",
    "context": "{\"function_name\": \"check_monthnumber_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 763,
    "solution": "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    if n < 2:\n        return float('inf')  # Not enough elements to form a pair\n    \n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\n### Signature\ndef find_min_diff(arr,n):",
    "timestamp": "2025-10-17T17:37:46.605651",
    "response_time": "3.46",
    "context": "{\"function_name\": \"find_min_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 764,
    "solution": "import re\n\ndef number_ctr(s):\n    return len(re.findall(r'\\d', s))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count number of digits in a given string.\n\n### Signature\ndef number_ctr(str):",
    "timestamp": "2025-10-17T17:37:47.574350",
    "response_time": "0.96",
    "context": "{\"function_name\": \"number_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 765,
    "solution": "import math\n\ndef is_polite(n):\n    # A number is polite if it is not of the form 2^k\n    # Check if n is a power of 2\n    return (n & (n - 1)) != 0\n\ndef nth_polite_number(n):\n    count = 0\n    i = 1\n    while True:\n        if is_polite(i):\n            count += 1\n            if count == n:\n                return i\n        i += 1\n\n# The function to find the nth polite number\ndef is_polite(n):\n    return nth_polite_number(n)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\n### Signature\ndef is_polite(n):",
    "timestamp": "2025-10-17T17:37:52.303719",
    "response_time": "4.72",
    "context": "{\"function_name\": \"is_polite\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 766,
    "solution": "from typing import List, Tuple, Any\n\ndef pair_wise(l1: List[Any]) -> List[Tuple[Any, Any]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to return a list of all pairs of consecutive items in a given list.\n\n### Signature\ndef pair_wise(l1):",
    "timestamp": "2025-10-17T17:37:54.419033",
    "response_time": "2.11",
    "context": "{\"function_name\": \"pair_wise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 767,
    "solution": "from typing import List\n\ndef get_pairs_count(arr: List[int], sum: int) -> int:\n    count = 0\n    seen = {}\n    for num in arr:\n        target = sum - num\n        if target in seen:\n            count += seen[target]\n        if num in seen:\n            seen[num] += 1\n        else:\n            seen[num] = 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\n### Signature\ndef get_pairs_count(arr, sum):",
    "timestamp": "2025-10-17T17:37:57.602358",
    "response_time": "3.18",
    "context": "{\"function_name\": \"get_pairs_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 769,
    "solution": "from typing import List\n\ndef Diff(li1: List, li2: List) -> List:\n    return list(set(li1) - set(li2))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to get the difference between two lists.\n\n### Signature\ndef Diff(li1,li2):",
    "timestamp": "2025-10-17T17:37:59.128086",
    "response_time": "1.52",
    "context": "{\"function_name\": \"Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 770,
    "solution": "import math\n\ndef odd_num_sum(n):\n    total_sum = 0\n    for i in range(n):\n        odd_number = 2 * i + 1\n        total_sum += math.pow(odd_number, 4)\n    return int(total_sum)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\n### Signature\ndef odd_num_sum(n) :",
    "timestamp": "2025-10-17T17:38:01.282025",
    "response_time": "2.15",
    "context": "{\"function_name\": \"odd_num_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 771,
    "solution": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    for char in exp:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if stack and stack[-1] == bracket_map[char]:\n                stack.pop()\n            else:\n                return False\n        else:\n            continue\n    \n    return not stack",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\n### Signature\ndef check_expression(exp):",
    "timestamp": "2025-10-17T17:38:04.597661",
    "response_time": "3.31",
    "context": "{\"function_name\": \"check_expression\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 772,
    "solution": "from typing import List\n\ndef remove_length(test_str: str, K: int) -> str:\n    words: List[str] = test_str.split()\n    filtered_words: List[str] = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove all the words with k length in the given string.\n\n### Signature\ndef remove_length(test_str, K):",
    "timestamp": "2025-10-17T17:38:06.945256",
    "response_time": "2.34",
    "context": "{\"function_name\": \"remove_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 773,
    "solution": "import re\n\ndef occurance_substring(text, pattern):\n    matches = list(re.finditer(pattern, text))\n    if not matches:\n        return None\n    return [(match.start(), match.end()) for match in matches]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n### Signature\ndef occurance_substring(text,pattern):",
    "timestamp": "2025-10-17T17:38:08.745608",
    "response_time": "1.79",
    "context": "{\"function_name\": \"occurance_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 775,
    "solution": "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for index in range(1, len(nums), 2):\n        if nums[index] % 2 == 0:\n            return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\n### Signature\ndef odd_position(nums):",
    "timestamp": "2025-10-17T17:38:10.795995",
    "response_time": "2.04",
    "context": "{\"function_name\": \"odd_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 776,
    "solution": "import string\n\ndef count_vowels(test_str):\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] not in vowels and (test_str[i - 1] in vowels or test_str[i + 1] in vowels):\n            count += 1\n    if len(test_str) > 1:\n        if test_str[0] not in vowels and test_str[1] in vowels:\n            count += 1\n        if test_str[-1] not in vowels and test_str[-2] in vowels:\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\n### Signature\ndef count_vowels(test_str):",
    "timestamp": "2025-10-17T17:38:15.701416",
    "response_time": "4.90",
    "context": "{\"function_name\": \"count_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 777,
    "solution": "from collections import Counter\n\ndef find_sum(arr):\n    element_counts = Counter(arr)\n    non_repeated_sum = sum(element for element, count in element_counts.items() if count == 1)\n    return non_repeated_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of non-repeated elements in a given list.\n\n### Signature\ndef find_sum(arr):",
    "timestamp": "2025-10-17T17:38:17.644359",
    "response_time": "1.94",
    "context": "{\"function_name\": \"find_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 778,
    "solution": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for _, group in groupby(list1)]",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\n### Signature\ndef pack_consecutive_duplicates(list1):",
    "timestamp": "2025-10-17T17:38:18.956035",
    "response_time": "1.31",
    "context": "{\"function_name\": \"pack_consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 779,
    "solution": "from collections import defaultdict\n\ndef unique_sublists(list1):\n    sublist_count = defaultdict(int)\n    for sublist in list1:\n        if isinstance(sublist, list):\n            sublist_count[tuple(sublist)] += 1\n    return dict(sublist_count)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\n### Signature\ndef unique_sublists(list1):",
    "timestamp": "2025-10-17T17:38:21.118067",
    "response_time": "2.16",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 780,
    "solution": "from itertools import combinations\n\ndef find_combinations(test_list):\n    res = []\n    for i in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            res.append((comb, sum(map(sum, comb))))\n    return res",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\n### Signature\ndef find_combinations(test_list):",
    "timestamp": "2025-10-17T17:38:23.319265",
    "response_time": "2.19",
    "context": "{\"function_name\": \"find_combinations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 781,
    "solution": "def count_divisors(n) :\n    import math\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count % 2 == 0",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\n### Signature\ndef count_divisors(n) :",
    "timestamp": "2025-10-17T17:38:26.312024",
    "response_time": "2.99",
    "context": "{\"function_name\": \"count_divisors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 782,
    "solution": "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    \n    for i in range(n):\n        # Calculate the number of subarrays in which arr[i] is present\n        count = ((i + 1) * (n - i) + 1) // 2\n        \n        # If count is odd, add arr[i] to the total sum\n        if count % 2 == 1:\n            total_sum += arr[i]\n    \n    return total_sum",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\n### Signature\ndef odd_length_sum(arr):",
    "timestamp": "2025-10-17T17:38:30.343883",
    "response_time": "4.02",
    "context": "{\"function_name\": \"odd_length_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 783,
    "solution": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n### Signature\ndef rgb_to_hsv(r, g, b):",
    "timestamp": "2025-10-17T17:38:38.199131",
    "response_time": "7.85",
    "context": "{\"function_name\": \"rgb_to_hsv\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 784,
    "solution": "from typing import List, Optional\n\ndef mul_even_odd(list1: List[int]) -> Optional[int]:\n    first_even = None\n    first_odd = None\n    \n    for number in list1:\n        if first_even is None and number % 2 == 0:\n            first_even = number\n        if first_odd is None and number % 2 != 0:\n            first_odd = number\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        return None",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find the product of first even and odd number of a given list.\n\n### Signature\ndef mul_even_odd(list1):",
    "timestamp": "2025-10-17T17:38:42.793400",
    "response_time": "4.59",
    "context": "{\"function_name\": \"mul_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 785,
    "solution": "import ast\n\ndef tuple_str_int(test_str):\n    # Convert string representation of tuple to actual tuple\n    test_tuple = ast.literal_eval(test_str)\n    # Convert each element in the tuple to an integer\n    int_tuple = tuple(int(item) for item in test_tuple)\n    return int_tuple",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to convert tuple string to integer tuple.\n\n### Signature\ndef tuple_str_int(test_str):",
    "timestamp": "2025-10-17T17:38:45.169320",
    "response_time": "2.37",
    "context": "{\"function_name\": \"tuple_str_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 786,
    "solution": "from bisect import bisect_right\n\ndef right_insertion(a, x):\n    return bisect_right(a, x)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\n### Signature\ndef right_insertion(a, x):",
    "timestamp": "2025-10-17T17:38:46.346773",
    "response_time": "1.17",
    "context": "{\"function_name\": \"right_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 787,
    "solution": "import re\n\ndef text_match_three(text):\n    patterns = 'ab{3}'\n    if re.search(patterns, text):\n        return True\n    else:\n        return False",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by three 'b'.\n\n### Signature\ndef text_match_three(text):",
    "timestamp": "2025-10-17T17:38:47.886196",
    "response_time": "1.53",
    "context": "{\"function_name\": \"text_match_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 788,
    "solution": "from typing import List, Tuple\n\ndef new_tuple(test_list: List, test_str: str) -> Tuple:\n    return tuple(test_list + [test_str])",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to create a new tuple from the given string and list.\n\n### Signature\ndef new_tuple(test_list, test_str):",
    "timestamp": "2025-10-17T17:38:49.356663",
    "response_time": "1.46",
    "context": "{\"function_name\": \"new_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 790,
    "solution": "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for index in range(0, len(nums), 2):\n        if nums[index] % 2 != 0:\n            return False\n    return True",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to check whether every even index contains even numbers of a given list.\n\n### Signature\ndef even_position(nums):",
    "timestamp": "2025-10-17T17:38:51.376593",
    "response_time": "2.01",
    "context": "{\"function_name\": \"even_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 791,
    "solution": "from typing import Tuple, Any\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple(item for item in test_tup if not isinstance(item, tuple))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove tuples from the given tuple.\n\n### Signature\ndef remove_nested(test_tup):",
    "timestamp": "2025-10-17T17:38:52.934440",
    "response_time": "1.55",
    "context": "{\"function_name\": \"remove_nested\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 792,
    "solution": "from collections.abc import Iterable\n\ndef count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of lists in a given number of lists.\n\n### Signature\ndef count_list(input_list):",
    "timestamp": "2025-10-17T17:38:54.677056",
    "response_time": "1.74",
    "context": "{\"function_name\": \"count_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 793,
    "solution": "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the last position of an element in a sorted array.\n\n### Signature\ndef last(arr,x):",
    "timestamp": "2025-10-17T17:38:58.461581",
    "response_time": "3.78",
    "context": "{\"function_name\": \"last\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 794,
    "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n### Signature\ndef text_starta_endb(text):",
    "timestamp": "2025-10-17T17:38:59.800274",
    "response_time": "1.33",
    "context": "{\"function_name\": \"text_starta_endb\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 796,
    "solution": "def return_sum(d):\n    return sum(d.values())",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite function to find the sum of all items in the given dictionary.\n\n### Signature\ndef return_sum(dict):",
    "timestamp": "2025-10-17T17:39:00.554709",
    "response_time": "0.75",
    "context": "{\"function_name\": \"return_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 797,
    "solution": "from typing import Tuple\n\ndef sum_in_range(n: Tuple[int, int]) -> int:\n    l, r = n\n    # Calculate the sum of odd numbers in the range [l, r]\n    sum_of_odds = 0\n    for number in range(l, r + 1):\n        if number % 2 != 0:\n            sum_of_odds += number\n    return sum_of_odds",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\n### Signature\ndef sum_odd(n):",
    "timestamp": "2025-10-17T17:39:03.837509",
    "response_time": "3.28",
    "context": "{\"function_name\": \"sum_in_range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 798,
    "solution": "def _sum(arr):\n    return sum(arr)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the sum of an array.\n\n### Signature\ndef _sum(arr):",
    "timestamp": "2025-10-17T17:39:04.586300",
    "response_time": "0.74",
    "context": "{\"function_name\": \"_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 799,
    "solution": "def left_rotate(n, d):\n    # Ensure d is within the range of 0 to 31\n    d = d % 32\n    # Perform left rotation\n    return (n << d) | (n >> (32 - d))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n### Signature\ndef left_rotate(n,d):",
    "timestamp": "2025-10-17T17:39:06.697320",
    "response_time": "2.10",
    "context": "{\"function_name\": \"left_rotate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 800,
    "solution": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from a string.\n\n### Signature\ndef remove_all_spaces(text):",
    "timestamp": "2025-10-17T17:39:07.740559",
    "response_time": "1.04",
    "context": "{\"function_name\": \"remove_all_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 801,
    "solution": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    if count == 3:\n        return 3\n    elif count > 0:\n        return 2\n    else:\n        return 0",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of equal numbers from three given integers.\n\n### Signature\ndef test_three_equal(x,y,z):",
    "timestamp": "2025-10-17T17:39:10.693300",
    "response_time": "2.95",
    "context": "{\"function_name\": \"test_three_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 802,
    "solution": "from typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            return i\n    return 0",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n### Signature\ndef count_rotation(arr):",
    "timestamp": "2025-10-17T17:39:12.758356",
    "response_time": "2.06",
    "context": "{\"function_name\": \"count_rotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 803,
    "solution": "import math\n\ndef is_perfect_square(n) :\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\n### Signature\ndef is_perfect_square(n) :",
    "timestamp": "2025-10-17T17:39:14.368805",
    "response_time": "1.61",
    "context": "{\"function_name\": \"is_perfect_square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 804,
    "solution": "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check whether the product of numbers in a list is even or not.\n\n### Signature\ndef is_product_even(arr):",
    "timestamp": "2025-10-17T17:39:15.983229",
    "response_time": "1.61",
    "context": "{\"function_name\": \"is_product_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 805,
    "solution": "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    if not lists:\n        return []\n    return max(lists, key=sum)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\n### Signature\ndef max_sum_list(lists):",
    "timestamp": "2025-10-17T17:39:17.527789",
    "response_time": "1.54",
    "context": "{\"function_name\": \"max_sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 806,
    "solution": "import re\n\ndef max_run_uppercase(test_str):\n    # Find all sequences of uppercase letters\n    uppercase_runs = re.findall(r'[A-Z]+', test_str)\n    # Return the length of the longest sequence found, or 0 if no sequences are found\n    return max((len(run) for run in uppercase_runs), default=0)",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to find maximum run of uppercase characters in the given string.\n\n### Signature\ndef max_run_uppercase(test_str):",
    "timestamp": "2025-10-17T17:39:20.111667",
    "response_time": "2.58",
    "context": "{\"function_name\": \"max_run_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 807,
    "solution": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a python function to find the first odd number in a given list of numbers.\n\n### Signature\ndef first_odd(nums):",
    "timestamp": "2025-10-17T17:39:21.506286",
    "response_time": "1.39",
    "context": "{\"function_name\": \"first_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 808,
    "solution": "from typing import Tuple, Any\n\ndef check_K(test_tup: Tuple[Any, ...], K: Any) -> bool:\n    return K in test_tup",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if the given tuples contain the k or not.\n\n### Signature\ndef check_K(test_tup, K):",
    "timestamp": "2025-10-17T17:39:22.957210",
    "response_time": "1.45",
    "context": "{\"function_name\": \"check_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_second_half",
    "dataset_row_id": 809,
    "solution": "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> bool:\n    return all(x > y for x, y in zip(test_tup1, test_tup2))",
    "llm_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "prompt": "### Prompt\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n### Signature\ndef check_smaller(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T17:39:24.983349",
    "response_time": "2.02",
    "context": "{\"function_name\": \"check_smaller\"}"
  }
]