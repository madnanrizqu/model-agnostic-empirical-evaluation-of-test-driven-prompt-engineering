{
  "anthropic/claude-3.5-haiku": [
    {
      "task_id": 140,
      "prompt": "### Prompt\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n### Signature\ndef fix_spaces(text):\n\n### Test\nassert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"",
      "llm_name": "anthropic/claude-3.5-haiku",
      "error": "Test execution timed out after 30 seconds - possible infinite loop",
      "solution": "def fix_spaces(text):\n    # Track consecutive spaces\n    result = []\n    space_count = 0\n    \n    for char in text:\n        if char == ' ':\n            space_count += 1\n            # If more than 2 consecutive spaces, use '-'\n            if space_count > 2:\n                result.append('-')\n            # If 1-2 consecutive spaces, use '_'\n            elif space_count <= 2:\n                result.append('_')\n        else:\n            # Reset space count and append non-space character\n            space_count = 0\n            result.append(char)\n    \n    # Handle trailing spaces\n    while result and result[-1] == '_':\n        result[-1] = '_'\n    \n    return ''.join(result)",
      "test_content": "from llm_output import fix_spaces\n\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n\ncheck(fix_spaces)",
      "context": null,
      "attempt_num": 1
    }
  ]
}