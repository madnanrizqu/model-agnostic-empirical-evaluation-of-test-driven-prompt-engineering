[
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 82,
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n\n### Signature\ndef prime_length(string):\n\n### Test\nassert candidate('Hello') == True\nassert candidate('abcdcba') == True\nassert candidate('kittens') == True\nassert candidate('orange') == False\nassert candidate('wow') == True\nassert candidate('world') == True\nassert candidate('MadaM') == True\nassert candidate('Wow') == True",
    "timestamp": "2025-10-17T14:56:44.480983",
    "response_time": "3.11"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 83,
    "solution": "def starts_one_ends(n):\n    # If n is 1, only 1 is the valid number\n    if n == 1:\n        return 1\n    \n    # Count numbers starting with 1\n    start_with_1 = 9 * (10 ** (n - 2))\n    \n    # Count numbers ending with 1\n    end_with_1 = 9 * (10 ** (n - 2))\n    \n    # Subtract numbers that both start and end with 1 to avoid double counting\n    both_start_end_1 = 9 * (10 ** (n - 3)) if n > 2 else 0\n    \n    # Total count of numbers starting or ending with 1\n    return start_with_1 + end_with_1 - both_start_end_1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n\n### Signature\ndef starts_one_ends(n):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(1) == 1\nassert candidate(2) == 18",
    "timestamp": "2025-10-17T14:56:53.985580",
    "response_time": "9.50"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 84,
    "solution": "def solve(N):\n    # Convert the number to binary string\n    binary = bin(N)[2:]  # [2:] removes the '0b' prefix\n    \n    # Sum the digits in the binary string\n    total_sum = sum(int(digit) for digit in binary)\n    \n    # Convert the sum back to a string to match test requirements\n    return str(total_sum)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a positive integer N, return the total sum of its digits in binary.\n\n### Signature\ndef solve(N):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(1000) == \"1\", \"Error\"\nassert candidate(150) == \"110\", \"Error\"",
    "timestamp": "2025-10-17T14:57:00.205245",
    "response_time": "6.22"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 85,
    "solution": "def add(lst):\n    # Sum even elements at odd indices (index 1, 3, 5, etc.)\n    return sum(num for i, num in enumerate(lst) if i % 2 == 1 and num % 2 == 0)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n### Signature\ndef add(lst):\n\n### Test\nassert candidate([4, 88]) == 88\nassert candidate([4, 5, 6, 7, 2, 122]) == 122",
    "timestamp": "2025-10-17T14:57:05.899335",
    "response_time": "5.69"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 86,
    "solution": "def anti_shuffle(s):\n    # If the string contains spaces, split and process each word\n    if ' ' in s:\n        words = s.split()\n        sorted_words = [''.join(sorted(word)) for word in words]\n        return ' '.join(sorted_words)\n    \n    # If no spaces, simply sort the characters of the string\n    return ''.join(sorted(s))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n### Signature\ndef anti_shuffle(s):\n\n### Test\nassert candidate('Hi') == 'Hi'\nassert candidate('hello') == 'ehllo'\nassert candidate('number') == 'bemnru'\nassert candidate('abcd') == 'abcd'",
    "timestamp": "2025-10-17T14:57:08.442768",
    "response_time": "2.54"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 87,
    "solution": "def get_row(lst, x):\n    # Find coordinates of x in the list\n    coordinates = []\n    \n    # Iterate through rows and columns\n    for row_idx, row in enumerate(lst):\n        for col_idx, val in enumerate(row):\n            if val == x:\n                coordinates.append((row_idx, col_idx))\n    \n    # Sort coordinates first by rows in ascending order\n    # Then within each row, sort columns in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n### Signature\ndef get_row(lst, x):\n\n### Test\nassert candidate([ [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]\nassert candidate([ [1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6]\nassert candidate([ [1,2,3,4,5,6], [1,2,3,4,5,6], [1,1,3,4,5,6], [1,2,1,4,5,6], [1,2,3,1,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]",
    "timestamp": "2025-10-17T14:57:14.977560",
    "response_time": "6.53"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 88,
    "solution": "def sort_array(array):\n    # If array is empty or has only one element, return it as is\n    if len(array) <= 1:\n        return array.copy()\n    \n    # Calculate the sum of first and last index values\n    sum_first_last = array[0] + array[-1]\n    \n    # Create a copy of the array to avoid modifying the original\n    sorted_array = array.copy()\n    \n    # Sort the array based on the sum of first and last index values\n    if sum_first_last % 2 == 0:\n        # If sum is even, sort in descending order\n        sorted_array.sort(reverse=True)\n    else:\n        # If sum is odd, sort in ascending order\n        sorted_array.sort()\n    \n    return sorted_array",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n### Signature\ndef sort_array(array):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([]) == [], \"Error\"\nassert candidate([5]) == [5], \"Error\"\nassert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"",
    "timestamp": "2025-10-17T14:57:21.390461",
    "response_time": "6.41"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 89,
    "solution": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            # Determine base (lowercase or uppercase)\n            base = 'a' if char.islower() else 'A'\n            \n            # Shift the character by 4 places\n            shifted_char = chr((ord(char) - ord(base) + 4) % 26 + ord(base))\n            result += shifted_char\n        else:\n            result += char\n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\n### Signature\ndef encrypt(s):\n\n### Test\nassert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\" ",
    "timestamp": "2025-10-17T14:57:28.135068",
    "response_time": "6.74"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 90,
    "solution": "def next_smallest(lst):\n    # If list is empty or has less than 2 unique elements, return None\n    if len(set(lst)) < 2:\n        return None\n    \n    # Remove duplicates and sort the list\n    unique_sorted = sorted(set(lst))\n    \n    # Return the second element (2nd smallest)\n    return unique_sorted[1]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n### Signature\ndef next_smallest(lst):\n\n### Test\nassert candidate([1, 2, 3, 4, 5]) == 2\nassert candidate([5, 1, 4, 3, 2]) == 2\nassert candidate([]) == None\nassert candidate([1, 1]) == None",
    "timestamp": "2025-10-17T14:57:30.654300",
    "response_time": "2.52"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 91,
    "solution": "import re\n\ndef is_bored(S):\n    # Split the string into sentences using '.', '?', or '!' as delimiters\n    sentences = re.split(r'[.?!]', S)\n    \n    # Count sentences that start with 'I ' (note the space to ensure it's a full word)\n    boredom_count = sum(1 for sentence in sentences if sentence.strip().startswith('I '))\n    \n    return boredom_count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n### Signature\ndef is_bored(S):\n\n### Test\nassert candidate(\"Hello world\") == 0, \"Test 1\"\nassert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\nassert candidate(\"I love It !\") == 1, \"Test 3\"",
    "timestamp": "2025-10-17T14:57:33.399237",
    "response_time": "2.74"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 92,
    "solution": "def any_int(x, y, z):\n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    \n    # Check if one number equals the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n### Signature\ndef any_int(x, y, z):\n\n### Test\nassert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\nassert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\nassert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\nassert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"",
    "timestamp": "2025-10-17T14:57:35.927622",
    "response_time": "2.53"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 93,
    "solution": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    vowel_map = {\n        'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n        'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n    }\n    \n    encoded = []\n    for char in message:\n        # Swap case\n        swapped_char = char.swapcase()\n        \n        # Replace vowels\n        if swapped_char in vowels:\n            swapped_char = vowel_map[swapped_char]\n        \n        encoded.append(swapped_char)\n    \n    return ''.join(encoded)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n### Signature\ndef encode(message):\n\n### Test\nassert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"",
    "timestamp": "2025-10-17T14:57:39.318750",
    "response_time": "3.39"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 94,
    "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime number in the list and return sum of its digits.\"\"\"\n    # Filter out prime numbers from the list\n    primes = [num for num in lst if is_prime(num)]\n    \n    # If no primes found, return 0\n    if not primes:\n        return 0\n    \n    # Find the largest prime\n    largest_prime = max(primes)\n    \n    # Calculate sum of digits\n    return sum(int(digit) for digit in str(largest_prime))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n### Signature\ndef skjkasdkd(lst):\n\n### Test\nassert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"  # Check some edge cases that are easy to work out by hand.\nassert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"  # Check some edge cases that are easy to work out by hand.\nassert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"  # Check some edge cases that are easy to work out by hand.\nassert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"  # Check some edge cases that are easy to work out by hand.",
    "timestamp": "2025-10-17T14:57:45.837381",
    "response_time": "6.52"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 95,
    "solution": "def check_dict_case(dict):\n    # Check if dictionary is empty\n    if not dict:\n        return False\n    \n    # Check if all keys are strings\n    if not all(isinstance(key, str) for key in dict.keys()):\n        return False\n    \n    # Check if all keys are lowercase\n    if all(key.islower() for key in dict.keys()):\n        return True\n    \n    # Check if all keys are uppercase \n    if all(key.isupper() for key in dict.keys()):\n        return True\n    \n    # If neither all lowercase nor all uppercase\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\n### Signature\ndef check_dict_case(dict):\n\n### Test\nassert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\nassert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\nassert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))",
    "timestamp": "2025-10-17T14:57:48.692195",
    "response_time": "2.85"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 96,
    "solution": "def count_up_to(n):\n    # Handle edge cases for 0 and 1\n    if n <= 1:\n        return []\n    \n    # Initialize list to store prime numbers\n    primes = []\n    \n    # Check each number from 2 to n-1\n    for num in range(2, n):\n        # Assume number is prime until proven otherwise\n        is_prime = True\n        \n        # Check for divisibility up to square root of num\n        for divisor in range(2, int(num**0.5) + 1):\n            if num % divisor == 0:\n                is_prime = False\n                break\n        \n        # If prime, add to list\n        if is_prime:\n            primes.append(num)\n    \n    return primes",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n\n### Signature\ndef count_up_to(n):\n\n### Test\nassert candidate(5) == [2,3]\nassert candidate(6) == [2,3,5]\nassert candidate(7) == [2,3,5]\nassert candidate(10) == [2,3,5,7]\nassert candidate(0) == []",
    "timestamp": "2025-10-17T14:57:52.084441",
    "response_time": "3.39"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 97,
    "solution": "def multiply(a, b):\n    # Get the unit digit of each number by using modulo 10\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    \n    # Return the product of the unit digits\n    return unit_a * unit_b",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n\n### Signature\ndef multiply(a, b):\n\n### Test\nassert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))\nassert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))\nassert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\nassert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))",
    "timestamp": "2025-10-17T14:57:57.891978",
    "response_time": "5.81"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 98,
    "solution": "def count_upper(s):\n    # Define uppercase vowels\n    upper_vowels = set('AEIOU')\n    \n    # Count uppercase vowels at even indices\n    return sum(1 for i in range(0, len(s), 2) if s[i] in upper_vowels)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a string s, count the number of uppercase vowels in even indices.\n\n### Signature\ndef count_upper(s):\n\n### Test\nassert candidate('aBCdEf')  == 1\nassert candidate('abcdefg') == 0\nassert candidate('dBBE') == 0\nassert candidate('B')  == 0",
    "timestamp": "2025-10-17T14:58:04.162273",
    "response_time": "6.27"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 99,
    "solution": "import math\n\ndef closest_integer(value):\n    # Convert the string to a float first\n    num = float(value)\n    \n    # Round to the nearest integer\n    # math.round handles the equidistant case by rounding to the nearest even integer\n    return round(num)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n\n### Signature\ndef closest_integer(value):\n\n### Test\nassert candidate(\"10\") == 10, \"Test 1\"\nassert candidate(\"14.5\") == 15, \"Test 2\"",
    "timestamp": "2025-10-17T14:58:09.263427",
    "response_time": "5.10"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 100,
    "solution": "def make_a_pile(n):\n    pile = [n]\n    current = n\n    \n    for _ in range(n - 1):\n        if current % 2 == 0:\n            current += 2  # next even number\n        else:\n            current += 2  # next odd number\n        pile.append(current)\n    \n    return pile",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n### Signature\ndef make_a_pile(n):\n\n### Test\nassert candidate(3) == [3, 5, 7], \"Test 3\"\nassert candidate(4) == [4,6,8,10], \"Test 4\"\nassert candidate(5) == [5, 7, 9, 11, 13]",
    "timestamp": "2025-10-17T14:58:15.776052",
    "response_time": "6.51"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 101,
    "solution": "def words_string(s):\n    # Replace commas with spaces first to handle comma-separated inputs\n    s = s.replace(',', ' ')\n    \n    # Split the string by whitespace and remove any empty strings\n    return [word for word in s.split() if word]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n### Signature\ndef words_string(s):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]",
    "timestamp": "2025-10-17T14:58:22.953263",
    "response_time": "7.18"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 102,
    "solution": "def choose_num(x, y):\n    # If x is greater than y, return -1 as there's no valid range\n    if x > y:\n        return -1\n    \n    # If y is even, return y as it's the largest even number in the range\n    if y % 2 == 0:\n        return y\n    \n    # If y is odd, return y-1 (the largest even number less than y)\n    if y > x:\n        return y - 1\n    \n    # If no even number exists in the range, return -1\n    return -1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n### Signature\ndef choose_num(x, y):\n\n### Test\nassert candidate(12, 15) == 14\nassert candidate(13, 12) == -1\nassert candidate(33, 12354) == 12354\nassert candidate(5234, 5233) == -1",
    "timestamp": "2025-10-17T14:58:29.110808",
    "response_time": "6.16"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 103,
    "solution": "def rounded_avg(n, m):\n    # Check if n is greater than m\n    if n > m:\n        return -1\n    \n    # Calculate the sum of integers from n to m\n    total_sum = sum(range(n, m + 1))\n    \n    # Calculate the number of integers\n    count = m - n + 1\n    \n    # Calculate the average and round to nearest integer\n    avg = round(total_sum / count)\n    \n    # Convert to binary string with '0b' prefix\n    return bin(avg)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n\n### Signature\ndef rounded_avg(n, m):\n\n### Test\nassert candidate(1, 5) == \"0b11\"\nassert candidate(7, 13) == \"0b1010\"\nassert candidate(964,977) == \"0b1111001010\"\nassert candidate(996,997) == \"0b1111100100\"\nassert candidate(560,851) == \"0b1011000010\"\nassert candidate(185,546) == \"0b101101110\"",
    "timestamp": "2025-10-17T14:58:32.053544",
    "response_time": "2.94"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 104,
    "solution": "def unique_digits(x):\n    def has_no_even_digit(num):\n        # Convert number to string to check each digit\n        return all(int(digit) % 2 == 1 for digit in str(num))\n    \n    # Filter numbers with no even digits and sort the result\n    return sorted(num for num in x if has_no_even_digit(num))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n### Signature\ndef unique_digits(x):\n\n### Test\nassert candidate([15, 33, 1422, 1]) == [1, 15, 33]\nassert candidate([152, 323, 1422, 10]) == []",
    "timestamp": "2025-10-17T14:58:38.733329",
    "response_time": "6.68"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 105,
    "solution": "def by_length(arr):\n    # Filter numbers between 1 and 9\n    valid_nums = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the valid numbers\n    valid_nums.sort()\n    \n    # Reverse the sorted array\n    valid_nums.reverse()\n    \n    # Map numbers to their word representations\n    num_to_word = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", \n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Convert numbers to words\n    return [num_to_word[num] for num in valid_nums]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n### Signature\ndef by_length(arr):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\nassert candidate([]) == [], \"Error\"",
    "timestamp": "2025-10-17T14:58:44.815506",
    "response_time": "6.08"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 106,
    "solution": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # even index\n            # Calculate factorial for even indices\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:  # odd index\n            # Calculate sum of numbers from 1 to i for odd indices\n            sum_of_numbers = sum(range(1, i + 1))\n            result.append(sum_of_numbers)\n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n     Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n\n### Signature\ndef f(n):\n\n### Test\nassert candidate(5) == [1, 2, 6, 24, 15]\nassert candidate(7) == [1, 2, 6, 24, 15, 720, 28]",
    "timestamp": "2025-10-17T14:58:50.964954",
    "response_time": "6.15"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 107,
    "solution": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n### Signature\ndef even_odd_palindrome(n):\n\n### Test\nassert candidate(123) == (8, 13)\nassert candidate(12) == (4, 6)\nassert candidate(3) == (1, 2)\nassert candidate(63) == (6, 8)",
    "timestamp": "2025-10-17T14:58:56.907326",
    "response_time": "5.94"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 108,
    "solution": "def count_nums(arr):\n    def digit_sum(num):\n        # Convert number to string, handling negative numbers\n        num_str = str(abs(num))\n        \n        # If original number was negative, make first digit negative\n        if num < 0:\n            return -int(num_str[0]) + sum(int(digit) for digit in num_str[1:])\n        \n        # For positive or zero numbers, sum all digits\n        return sum(int(digit) for digit in num_str)\n    \n    # Count numbers where digit sum is > 0\n    return sum(1 for num in arr if digit_sum(num) > 0)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\n### Signature\ndef count_nums(arr):\n\n### Test\nassert candidate([]) == 0\nassert candidate([-1, -2, 0]) == 0\nassert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\nassert candidate([1, 6, 9, -6, 0, 1, 5]) == 5",
    "timestamp": "2025-10-17T14:59:00.812433",
    "response_time": "3.90"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 109,
    "solution": "def move_one_ball(arr):\n    # If array is empty or has only one element, it's always sortable\n    if len(arr) <= 1:\n        return True\n    \n    # Find the index where the array is \"broken\" (where it would not be sorted)\n    rotations = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[(i+1) % len(arr)]:\n            rotations += 1\n        \n        # If more than one rotation point exists, it cannot be sorted\n        if rotations > 1:\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n### Signature\ndef move_one_ball(arr):\n\n### Test\nassert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([3, 5, 10, 1, 2])==True",
    "timestamp": "2025-10-17T14:59:09.496938",
    "response_time": "8.68"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 110,
    "solution": "def exchange(lst1, lst2):\n    # Count odd numbers in lst1\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count even numbers in lst2\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # If the number of even numbers in lst2 is at least the number of odd numbers in lst1,\n    # then it's possible to exchange elements to make lst1 all even\n    return \"YES\" if even_count_lst2 >= odd_count_lst1 else \"NO\"",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n\n### Signature\ndef exchange(lst1, lst2):\n\n### Test\nassert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\nassert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\nassert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"",
    "timestamp": "2025-10-17T14:59:17.827637",
    "response_time": "8.33"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 111,
    "solution": "def histogram(test):\n    # Split the input string into a list of letters\n    letters = test.split()\n    \n    # Create a dictionary to count letter occurrences\n    letter_counts = {}\n    \n    # Count occurrences of each letter\n    for letter in letters:\n        letter_counts[letter] = letter_counts.get(letter, 0) + 1\n    \n    # Find the maximum count\n    max_count = max(letter_counts.values()) if letter_counts else 0\n    \n    # Return dictionary of letters with max count\n    return {letter: count for letter, count in letter_counts.items() if count == max_count}",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n### Signature\ndef histogram(test):\n\n### Test\nassert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\nassert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\nassert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"",
    "timestamp": "2025-10-17T14:59:24.070240",
    "response_time": "6.24"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 112,
    "solution": "def reverse_delete(s, c):\n    # Remove characters from s that are in c\n    result = ''.join(char for char in s if char not in c)\n    \n    # Check if the resulting string is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\n### Signature\ndef reverse_delete(s,c):\n\n### Test\nassert candidate(\"abcde\",\"ae\") == ('bcd',False)\nassert candidate(\"abcdef\", \"b\") == ('acdef',False)\nassert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\nassert candidate(\"dwik\",\"w\") == ('dik',False)",
    "timestamp": "2025-10-17T14:59:30.938655",
    "response_time": "6.87"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 113,
    "solution": "def odd_count(lst):\n    def count_odd_digits(s):\n        return sum(1 for digit in s if int(digit) % 2 != 0)\n    \n    result = []\n    for i, s in enumerate(lst):\n        odd_count = count_odd_digits(s)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n### Signature\ndef odd_count(lst):\n\n### Test\nassert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\nassert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"",
    "timestamp": "2025-10-17T14:59:33.703465",
    "response_time": "2.76"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 114,
    "solution": "def minSubArraySum(nums):\n    # Initialize current_sum and min_sum with the first element\n    current_sum = nums[0]\n    min_sum = nums[0]\n    \n    # Iterate through the array starting from the second element\n    for num in nums[1:]:\n        # At each step, choose the minimum between the current number \n        # and the current_sum + current number\n        current_sum = min(num, current_sum + num)\n        \n        # Update min_sum if current_sum is smaller\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n\n### Signature\ndef minSubArraySum(nums):\n\n### Test\nassert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([-1, -2, -3]) == -6\nassert candidate([-1, -2, -3, 2, -10]) == -14\nassert candidate([-9999999999999999]) == -9999999999999999\nassert candidate([0, 10, 20, 1000000]) == 0\nassert candidate([-1, -2, -3, 10, -5]) == -6",
    "timestamp": "2025-10-17T14:59:41.202986",
    "response_time": "7.50"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 115,
    "solution": "def max_fill(grid, capacity):\n    # Count total water units in each well\n    total_water = sum(sum(row) for row in grid)\n    \n    # Calculate number of bucket lowerings needed\n    # Divide total water by bucket capacity and round up\n    return (total_water + capacity - 1) // capacity",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n### Signature\ndef max_fill(grid, capacity):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\nassert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"",
    "timestamp": "2025-10-17T14:59:48.814741",
    "response_time": "7.61"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 116,
    "solution": "def sort_array(arr):\n    def count_ones(num):\n        # Convert absolute value to binary and count 1s\n        return bin(abs(num)).count('1')\n    \n    # Sort using a custom key that considers:\n    # 1. Number of ones in binary representation\n    # 2. Decimal value (for numbers with same number of ones)\n    return sorted(arr, key=lambda x: (count_ones(x), x))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n### Signature\ndef sort_array(arr):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\nassert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\nassert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\nassert candidate([]) == []",
    "timestamp": "2025-10-17T14:59:56.965709",
    "response_time": "8.15"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 117,
    "solution": "def select_words(s, n):\n    # Define vowels to help identify consonants\n    vowels = set('aeiouAEIOU')\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Function to count consonants in a word\n    def count_consonants(word):\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    # Return words with exactly n consonants\n    return [word for word in words if count_consonants(word) == n]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\n### Signature\ndef select_words(s, n):\n\n### Test\nassert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))\nassert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))\nassert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))",
    "timestamp": "2025-10-17T15:00:03.195925",
    "response_time": "6.23"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 118,
    "solution": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    \n    # Iterate from right to left\n    for i in range(len(word) - 1, 1, -1):\n        # Check if current character is a consonant\n        if (word[i] not in vowels and \n            word[i-1] in vowels and \n            word[i-2] not in vowels):\n            return word[i-1]\n    \n    return \"\"",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n### Signature\ndef get_closest_vowel(word):\n\n### Test\nassert candidate(\"yogurt\") == \"u\"\nassert candidate(\"full\") == \"u\"\nassert candidate(\"easy\") == \"\"\nassert candidate(\"eAsy\") == \"\"\nassert candidate(\"ali\") == \"\"\nassert candidate(\"bad\") == \"a\"\nassert candidate(\"most\") == \"o\"",
    "timestamp": "2025-10-17T15:00:10.271470",
    "response_time": "7.07"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 119,
    "solution": "def is_balanced(s):\n    \"\"\"Check if a string of parentheses is balanced.\"\"\"\n    count = 0\n    for char in s:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n\ndef match_parens(lst):\n    \"\"\"\n    Check if concatenating the two strings in either order results in a balanced string.\n    \n    Args:\n        lst (list): A list of two strings containing only '(' and ')' characters\n    \n    Returns:\n        str: 'Yes' if a balanced string can be formed, 'No' otherwise\n    \"\"\"\n    # Try concatenating in both orders\n    order1 = lst[0] + lst[1]\n    order2 = lst[1] + lst[0]\n    \n    # Check if either order results in a balanced string\n    if is_balanced(order1) or is_balanced(order2):\n        return 'Yes'\n    \n    return 'No'",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n### Signature\ndef match_parens(lst):\n\n### Test\nassert candidate(['()(', ')']) == 'Yes'\nassert candidate([')', ')']) == 'No'\nassert candidate(['(()(())', '())())']) == 'No'\nassert candidate([')())', '(()()(']) == 'Yes'\nassert candidate(['(())))', '(()())((']) == 'Yes'\nassert candidate(['()', '())']) == 'No'",
    "timestamp": "2025-10-17T15:00:19.061685",
    "response_time": "8.79"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 120,
    "solution": "def maximum(arr, k):\n    # Sort the array in ascending order\n    sorted_arr = sorted(arr)\n    \n    # Return the last k elements (which are the k maximum numbers)\n    return sorted_arr[-k:]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n### Signature\ndef maximum(arr, k):\n\n### Test\nassert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nassert candidate([4, -4, 4], 2) == [4, 4]\nassert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\nassert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\nassert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]",
    "timestamp": "2025-10-17T15:00:25.305127",
    "response_time": "6.24"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 121,
    "solution": "def solution(lst):\n    # Use list comprehension to:\n    # 1. Filter elements at even indices (index % 2 == 0)\n    # 2. Keep only odd elements\n    # 3. Sum the resulting list\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n### Signature\ndef solution(lst):\n\n### Test\nassert candidate([5, 8, 7, 1])    == 12\nassert candidate([3, 3, 3, 3, 3]) == 9\nassert candidate([30, 13, 24, 321]) == 0",
    "timestamp": "2025-10-17T15:00:32.055011",
    "response_time": "6.75"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 122,
    "solution": "def add_elements(arr, k):\n    # Slice the first k elements of the array\n    first_k_elements = arr[:k]\n    \n    # Sum elements that have at most two digits (between -99 and 99)\n    total_sum = sum(num for num in first_k_elements if -99 <= num <= 99)\n    \n    return total_sum",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n### Signature\ndef add_elements(arr, k):\n\n### Test\nassert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\nassert candidate([111,121,3,4000,5,6], 2) == 0",
    "timestamp": "2025-10-17T15:00:37.728445",
    "response_time": "5.67"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 123,
    "solution": "def get_odd_collatz(n):\n    # Initialize the list of odd numbers\n    odd_numbers = []\n    \n    # Current number starts with input n\n    current = n\n    \n    # Continue until we reach 1\n    while current != 1:\n        # If current number is odd, add to list\n        if current % 2 != 0:\n            odd_numbers.append(current)\n        \n        # Apply Collatz sequence rules\n        if current % 2 == 0:\n            current = current // 2\n        else:\n            current = 3 * current + 1\n    \n    # Always add 1 at the end (1 is always the final number in Collatz sequence)\n    odd_numbers.append(1)\n    \n    # Return sorted list of odd numbers\n    return sorted(set(odd_numbers))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n### Signature\ndef get_odd_collatz(n):\n\n### Test\nassert candidate(14) == [1, 5, 7, 11, 13, 17]\nassert candidate(5) == [1, 5]",
    "timestamp": "2025-10-17T15:00:45.504571",
    "response_time": "7.78"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 124,
    "solution": "import re\n\ndef valid_date(date):\n    # Check if date string is empty\n    if not date:\n        return False\n    \n    # Check date format using regex\n    pattern = r'^\\d{2}-\\d{2}-\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    \n    # Split the date into month, day, year\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    # Check month range\n    if month < 1 or month > 12:\n        return False\n    \n    # Days per month\n    days_in_month = {\n        1: 31,  # January\n        2: 29,  # February\n        3: 31,  # March\n        4: 30,  # April\n        5: 31,  # May\n        6: 30,  # June\n        7: 31,  # July\n        8: 31,  # August\n        9: 30,  # September\n        10: 31, # October\n        11: 30, # November\n        12: 31  # December\n    }\n    \n    # Check day range for the specific month\n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n### Signature\ndef valid_date(date):\n\n### Test\nassert candidate('03-11-2000') == True \nassert candidate('15-01-2012') == False \nassert candidate('04-0-2040') == False \nassert candidate('06-04-2020') == True \nassert candidate('01-01-2007') == True \nassert candidate('03-32-2011') == False \nassert candidate('') == False \nassert candidate('04-31-3000') == False ",
    "timestamp": "2025-10-17T15:00:53.794087",
    "response_time": "8.29"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 125,
    "solution": "def split_words(txt):\n    # First try splitting on whitespace\n    if ' ' in txt:\n        return txt.split()\n    \n    # If no whitespace, try splitting on comma\n    if ',' in txt:\n        return txt.split(',')\n    \n    # If no whitespace or comma, count odd-order lowercase letters\n    return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n\n### Signature\ndef split_words(txt):\n\n### Test\nassert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\nassert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\nassert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\nassert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]",
    "timestamp": "2025-10-17T15:01:00.115997",
    "response_time": "6.32"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 126,
    "solution": "def is_sorted(lst):\n    # Check if list has more than 1 duplicate of any number\n    for num in lst:\n        if lst.count(num) > 2:\n            return False\n    \n    # Check if list is in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n### Signature\ndef is_sorted(lst):\n\n### Test\nassert candidate([5]) == True\nassert candidate([1, 2, 3, 4, 5]) == True\nassert candidate([1, 3, 2, 4, 5]) == False\nassert candidate([1, 2, 3, 4, 5, 6]) == True\nassert candidate([1, 2, 3, 4, 5, 6, 7]) == True\nassert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"",
    "timestamp": "2025-10-17T15:01:03.755219",
    "response_time": "3.64"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 127,
    "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"\n    Determine if the length of the intersection between two intervals is a prime number.\n    \n    Args:\n        interval1 (tuple): First interval as (start, end)\n        interval2 (tuple): Second interval as (start, end)\n    \n    Returns:\n        str: \"YES\" if intersection length is prime, \"NO\" otherwise\n    \"\"\"\n    # Find the maximum of start points and minimum of end points\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # Check if intervals intersect\n    if start > end:\n        return \"NO\"\n    \n    # Calculate intersection length\n    length = end - start + 1\n    \n    # Check if length is prime\n    return \"YES\" if is_prime(length) else \"NO\"",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n### Signature\ndef intersection(interval1, interval2):\n\n### Test\nassert candidate((1, 2), (2, 3)) == \"NO\"\nassert candidate((-1, 1), (0, 4)) == \"NO\"\nassert candidate((-3, -1), (-5, 5)) == \"YES\"\nassert candidate((-2, 2), (-4, 0)) == \"YES\"  # Check some edge cases that are easy to work out by hand.",
    "timestamp": "2025-10-17T15:01:12.288407",
    "response_time": "8.53"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 128,
    "solution": "def prod_signs(arr):\n    # Handle empty array case\n    if not arr:\n        return None\n    \n    # Calculate product of signs\n    sign_product = 1\n    for num in arr:\n        if num == 0:\n            return 0\n        elif num < 0:\n            sign_product *= -1\n    \n    # Calculate sum of magnitudes \n    magnitude_sum = sum(abs(num) for num in arr)\n    \n    # Return sum of magnitudes multiplied by sign product\n    return magnitude_sum * sign_product",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n### Signature\ndef prod_signs(arr):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([1, 2, 2, -4]) == -9\nassert candidate([0, 1]) == 0\nassert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\nassert candidate([]) == None",
    "timestamp": "2025-10-17T15:01:15.014196",
    "response_time": "2.72"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 129,
    "solution": "import heapq\n\ndef minPath(grid, k):\n    N = len(grid)\n    \n    # Find the position of 1 in the grid\n    start_pos = None\n    for r in range(N):\n        for c in range(N):\n            if grid[r][c] == 1:\n                start_pos = (r, c)\n                break\n        if start_pos:\n            break\n    \n    # Directions: right, down, left, up\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    # Priority queue for Dijkstra's algorithm\n    pq = [(0, start_pos[0], start_pos[1], [1])]\n    visited = set()\n    \n    while pq:\n        dist, r, c, path = heapq.heappop(pq)\n        \n        # If path length reaches k, return the path\n        if len(path) == k:\n            return path\n        \n        # Avoid revisiting the same state\n        state = (r, c, len(path))\n        if state in visited:\n            continue\n        visited.add(state)\n        \n        # Try all four directions\n        for dr, dc in directions:\n            new_r, new_c = r + dr, c + dc\n            \n            # Check grid boundaries\n            if 0 <= new_r < N and 0 <= new_c < N:\n                new_path = path + [grid[new_r][new_c]]\n                heapq.heappush(pq, (dist + 1, new_r, new_c, new_path))\n    \n    return []  # No path found",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n### Signature\ndef minPath(grid, k):\n\n### Test\nassert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\nassert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\nassert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\nassert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\nassert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]",
    "timestamp": "2025-10-17T15:01:25.371501",
    "response_time": "10.36"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 130,
    "solution": "def tri(n):\n    # Initialize the sequence with the first two known values\n    sequence = [1, 3]\n    \n    # If n is 0 or 1, return the corresponding initial values\n    if n == 0:\n        return [1]\n    if n == 1:\n        return sequence\n    \n    # Generate the sequence up to n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            # Even case: 1 + n/2\n            next_val = 1 + i / 2\n        else:\n            # Odd case: tri(n-1) + tri(n-2) + tri(n+1)\n            # Note: we'll use the next value in the sequence for tri(n+1)\n            next_val = sequence[i-1] + sequence[i-2] + (1 + (i+1) / 2)\n        \n        sequence.append(next_val)\n    \n    return sequence",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n\n### Signature\ndef tri(n):\n\n### Test\nassert candidate(3) == [1, 3, 2.0, 8.0]\nassert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\nassert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\nassert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\nassert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]",
    "timestamp": "2025-10-17T15:01:30.951049",
    "response_time": "5.58"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 131,
    "solution": "def digits(n):\n    # Convert number to string to iterate through digits\n    num_str = str(n)\n    \n    # Filter out odd digits\n    odd_digits = [int(digit) for digit in num_str if int(digit) % 2 != 0]\n    \n    # If no odd digits, return 0\n    if not odd_digits:\n        return 0\n    \n    # Calculate product of odd digits\n    product = 1\n    for digit in odd_digits:\n        product *= digit\n    \n    return product",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n\n### Signature\ndef digits(n):\n\n### Test\nassert candidate(5) == 5\nassert candidate(54) == 5\nassert candidate(120) ==1",
    "timestamp": "2025-10-17T15:01:37.453234",
    "response_time": "6.50"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 132,
    "solution": "def is_nested(string):\n    # Check if the input is a valid string of square brackets\n    if not all(char in '[]' for char in string):\n        return False\n    \n    # Track the depth of nested brackets\n    max_depth = 0\n    current_depth = 0\n    \n    for char in string:\n        if char == '[':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        else:  # char == ']'\n            current_depth -= 1\n    \n    # Return True if max depth is at least 2 (indicating nesting)\n    return max_depth >= 2",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n### Signature\ndef is_nested(string):\n\n### Test\nassert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate('[]]]]]]][[[[[]') == False\nassert candidate('[][]') == False\nassert candidate(('[]')) == False\nassert candidate('[[[[]]]]') == True\nassert candidate('[]]]]]]]]]]') == False\nassert candidate('[][][[]]') == True",
    "timestamp": "2025-10-17T15:01:47.110476",
    "response_time": "9.66"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 133,
    "solution": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n### Signature\ndef sum_squares(lst):\n\n### Test\nassert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\" \nassert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"",
    "timestamp": "2025-10-17T15:01:54.945850",
    "response_time": "7.83"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 134,
    "solution": "def check_if_last_char_is_a_letter(txt):\n    # Remove trailing whitespace\n    txt = txt.rstrip()\n    \n    # If the string is empty after stripping, return False\n    if not txt:\n        return False\n    \n    # Check if the last character is an alphabetical character\n    if not txt[-1].isalpha():\n        return False\n    \n    # Check if the last character is part of a word\n    # If the string has only one character or the character before is a space, return True\n    if len(txt) == 1 or txt[-2].isspace():\n        return True\n    \n    # If the last character is part of a word, return False\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n### Signature\ndef check_if_last_char_is_a_letter(txt):\n\n### Test\nassert candidate(\"apple\") == False\nassert candidate(\"apple pi e\") == True\nassert candidate(\"eeeee\") == False\nassert candidate(\"A\") == True\nassert candidate(\"Pumpkin pie \") == False",
    "timestamp": "2025-10-17T15:02:01.479793",
    "response_time": "6.53"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 135,
    "solution": "def can_arrange(arr):\n    # If array has less than 2 elements, no arrangement possible\n    if len(arr) < 2:\n        return -1\n    \n    # Iterate from right to left to find the largest index\n    for i in range(len(arr)-1, 0, -1):\n        # Check if current element is not greater than or equal to previous element\n        if arr[i] < arr[i-1]:\n            return i\n    \n    # If no such element found, return -1\n    return -1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n### Signature\ndef can_arrange(arr):\n\n### Test\nassert candidate([1,2,4,3,5])==3\nassert candidate([1,2,4,5])==-1",
    "timestamp": "2025-10-17T15:02:08.463843",
    "response_time": "6.98"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 136,
    "solution": "def largest_smallest_integers(lst):\n    # Filter out negative and positive integers\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    # Find largest negative and smallest positive\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n### Signature\ndef largest_smallest_integers(lst):\n\n### Test\nassert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\nassert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\nassert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\nassert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\nassert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\nassert candidate([]) == (None, None)",
    "timestamp": "2025-10-17T15:02:14.290108",
    "response_time": "5.83"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 137,
    "solution": "def compare_one(a, b):\n    # Convert inputs to float, handling both . and , as decimal separators\n    def parse_number(x):\n        if isinstance(x, (int, float)):\n            return float(x)\n        elif isinstance(x, str):\n            # Replace comma with dot if needed\n            x = x.replace(',', '.')\n            return float(x)\n        \n    # Parse both inputs to floats for comparison\n    try:\n        a_float = parse_number(a)\n        b_float = parse_number(b)\n        \n        # Compare float values\n        if a_float > b_float:\n            return a\n        elif b_float > a_float:\n            return b\n        else:\n            return None\n    \n    except (ValueError, TypeError):\n        # If parsing fails, return None\n        return None",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n### Signature\ndef compare_one(a, b):\n\n### Test\nassert candidate(1, 2) == 2\nassert candidate(1, 2.5) == 2.5\nassert candidate(2, 3) == 3\nassert candidate(5, 6) == 6",
    "timestamp": "2025-10-17T15:02:18.778257",
    "response_time": "4.49"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 138,
    "solution": "def is_equal_to_sum_even(n):\n    # If n is less than 8 or odd, it cannot be sum of 4 even numbers\n    if n < 8 or n % 2 != 0:\n        return False\n    \n    # Try all combinations of 4 even numbers\n    for a in range(2, n//4 + 1, 2):\n        for b in range(2, n//4 + 1, 2):\n            for c in range(2, n//4 + 1, 2):\n                d = n - (a + b + c)\n                \n                # Check if d is even and positive\n                if d > 0 and d % 2 == 0:\n                    return True\n    \n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n\n### Signature\ndef is_equal_to_sum_even(n):\n\n### Test\nassert candidate(4) == False\nassert candidate(6) == False\nassert candidate(8) == True\nassert candidate(10) == True",
    "timestamp": "2025-10-17T15:02:27.411869",
    "response_time": "8.63"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 139,
    "solution": "def special_factorial(n):\n    # Base case for n = 1\n    if n == 1:\n        return 1\n    \n    # Initialize result as 1\n    result = 1\n    \n    # Multiply factorial of each number from 1 to n\n    for i in range(1, n + 1):\n        # Calculate factorial of current number\n        current_factorial = 1\n        for j in range(1, i + 1):\n            current_factorial *= j\n        \n        # Multiply result by current factorial\n        result *= current_factorial\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n### Signature\ndef special_factorial(n):\n\n### Test\nassert candidate(4) == 288, \"Test 4\"\nassert candidate(5) == 34560, \"Test 5\"",
    "timestamp": "2025-10-17T15:02:34.088895",
    "response_time": "6.68"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 140,
    "solution": "def fix_spaces(text):\n    # Track consecutive spaces\n    result = []\n    space_count = 0\n    \n    for char in text:\n        if char == ' ':\n            space_count += 1\n            # If more than 2 consecutive spaces, use '-'\n            if space_count > 2:\n                result.append('-')\n            # If 1-2 consecutive spaces, use '_'\n            elif space_count <= 2:\n                result.append('_')\n        else:\n            # Reset space count and append non-space character\n            space_count = 0\n            result.append(char)\n    \n    # Handle trailing spaces\n    while result and result[-1] == '_':\n        result[-1] = '_'\n    \n    return ''.join(result)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n### Signature\ndef fix_spaces(text):\n\n### Test\nassert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"",
    "timestamp": "2025-10-17T15:02:42.395598",
    "response_time": "8.31"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 141,
    "solution": "import re\n\ndef file_name_check(file_name):\n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if the name starts with a letter from the Latin alphabet\n    if not name or not re.match(r'^[a-zA-Z]', name):\n        return 'No'\n    \n    # Count the number of digits in the name\n    digit_count = sum(char.isdigit() for char in name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\n### Signature\ndef file_name_check(file_name):\n\n### Test\nassert candidate(\"example.txt\") == 'Yes'\nassert candidate(\"1example.dll\") == 'No'\nassert candidate('s1sdf3.asd') == 'No'\nassert candidate('K.dll') == 'Yes'\nassert candidate('MY16FILE3.exe') == 'Yes'\nassert candidate('His12FILE94.exe') == 'No'\nassert candidate('_Y.txt') == 'No'\nassert candidate('?aREYA.exe') == 'No'\nassert candidate('/this_is_valid.dll') == 'No'\nassert candidate('this_is_valid.wow') == 'No'\nassert candidate('this_is_valid.txt') == 'Yes'\nassert candidate('this_is_valid.txtexe') == 'No'\nassert candidate('#this2_i4s_5valid.ten') == 'No'",
    "timestamp": "2025-10-17T15:02:48.937560",
    "response_time": "6.54"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 142,
    "solution": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            # Square entries at indices divisible by 3\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            # Cube entries at indices divisible by 4 but not by 3\n            result += lst[i] ** 3\n        else:\n            # Keep original value for other indices\n            result += lst[i]\n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n### Signature\ndef sum_squares(lst):\n\n### Test\nassert candidate([1,2,3]) == 6\nassert candidate([1,4,9]) == 14\nassert candidate([]) == 0\nassert candidate([1,1,1,1,1,1,1,1,1]) == 9\nassert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3",
    "timestamp": "2025-10-17T15:02:52.332906",
    "response_time": "3.39"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 143,
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Filter words with prime lengths\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    \n    # Join the filtered words back into a sentence\n    return \" \".join(prime_length_words)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n### Signature\ndef words_in_sentence(sentence):\n\n### Test\nassert candidate(\"This is a test\") == \"is\"\nassert candidate(\"lets go for swimming\") == \"go for\"\nassert candidate(\"there is no place available here\") == \"there is no place\"",
    "timestamp": "2025-10-17T15:02:59.837114",
    "response_time": "7.50"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 144,
    "solution": "def simplify(x, n):\n    # Parse the fractions\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Multiply the fractions\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    \n    # Check if the result is a whole number\n    return result_num % result_den == 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n### Signature\ndef simplify(x, n):\n\n### Test\nassert candidate(\"1/5\", \"5/1\") == True, 'test1'\nassert candidate(\"1/6\", \"2/1\") == False, 'test2'\nassert candidate(\"5/1\", \"3/1\") == True, 'test3'\nassert candidate(\"7/10\", \"10/2\") == False, 'test4'\nassert candidate(\"2/10\", \"50/10\") == True, 'test5'\nassert candidate(\"7/2\", \"4/2\") == True, 'test6'",
    "timestamp": "2025-10-17T15:03:06.444401",
    "response_time": "6.61"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 145,
    "solution": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n### Signature\ndef order_by_points(nums):\n\n### Test\nassert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\nassert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\nassert candidate([]) == []",
    "timestamp": "2025-10-17T15:03:15.176826",
    "response_time": "8.73"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 146,
    "solution": "def specialFilter(nums):\n    def is_odd_first_last_digit(num):\n        # Convert to absolute value to handle negative numbers\n        num = abs(num)\n        \n        # Convert to string to easily get first and last digits\n        num_str = str(num)\n        \n        # Check if first and last digits are odd\n        first_digit = int(num_str[0])\n        last_digit = int(num_str[-1])\n        \n        return (first_digit % 2 == 1) and (last_digit % 2 == 1)\n    \n    # Count numbers greater than 10 with odd first and last digits\n    return sum(1 for num in nums if num > 10 and is_odd_first_last_digit(num))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n\n### Signature\ndef specialFilter(nums):\n\n### Test\nassert candidate([5, -2, 1, -5]) == 0\nassert candidate([15, -73, 14, -15]) == 1\nassert candidate([33, -2, -3, 45, 21, 109]) == 2",
    "timestamp": "2025-10-17T15:03:18.776662",
    "response_time": "3.60"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 147,
    "solution": "def get_max_triples(n):\n    # Create the array a based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the number of triples that satisfy the conditions\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n### Signature\ndef get_max_triples(n):\n\n### Test\nassert candidate(5) == 1\nassert candidate(6) == 4",
    "timestamp": "2025-10-17T15:03:25.047142",
    "response_time": "6.27"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 148,
    "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planets are valid\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find indices of the input planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Swap indices if planet1 is further from the sun than planet2\n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    # Return planets between the two input planets\n    return tuple(planets[index1 + 1:index2])",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\n### Signature\ndef bf(planet1, planet2):\n\n### Test\nassert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))\nassert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))\nassert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))",
    "timestamp": "2025-10-17T15:03:29.183198",
    "response_time": "4.13"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 149,
    "solution": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list first by length, then alphabetically\n    return sorted(even_length_words, key=lambda x: (len(x), x))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\n### Signature\ndef sorted_list_sum(lst):\n\n### Test\nassert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\nassert candidate([\"d\", \"b\", \"c\", \"a\"]) == []",
    "timestamp": "2025-10-17T15:03:34.934373",
    "response_time": "5.75"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 150,
    "solution": "def is_prime(n):\n    # Handle edge cases\n    if n < 2:\n        return False\n    \n    # Check for divisibility up to square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n\ndef x_or_y(n, x, y):\n    # Return x if n is prime, otherwise return y\n    return x if is_prime(n) else y",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n### Signature\ndef x_or_y(n, x, y):\n\n### Test\nassert candidate(7, 34, 12) == 34\nassert candidate(15, 8, 5) == 5\nassert candidate(3, 33, 5212) == 33\nassert candidate(1259, 3, 52) == 3\nassert candidate(7919, -1, 12) == -1",
    "timestamp": "2025-10-17T15:03:41.103442",
    "response_time": "6.17"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 151,
    "solution": "def double_the_difference(lst):\n    # Sum the squares of odd integers in the list\n    return sum(num**2 for num in lst if isinstance(num, int) and num > 0 and num % 2 != 0)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n### Signature\ndef double_the_difference(lst):\n\n### Test\nassert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\nassert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"",
    "timestamp": "2025-10-17T15:03:43.387444",
    "response_time": "2.28"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 152,
    "solution": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n### Signature\ndef compare(game,guess):\n\n### Test\nassert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"",
    "timestamp": "2025-10-17T15:03:50.058137",
    "response_time": "6.67"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 153,
    "solution": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(ext):\n        # Count uppercase and lowercase letters\n        uppercase_count = sum(1 for char in ext if char.isupper())\n        lowercase_count = sum(1 for char in ext if char.islower())\n        \n        # Calculate strength as uppercase count minus lowercase count\n        return uppercase_count - lowercase_count\n    \n    # Find the strongest extension\n    # If multiple extensions have the same strength, choose the first one\n    strongest_ext = max(extensions, key=lambda ext: (calculate_strength(ext), extensions.index(ext)))\n    \n    # Return the result in the specified format\n    return f\"{class_name}.{strongest_ext}\"",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\n### Signature\ndef Strongest_Extension(class_name, extensions):\n\n### Test\nassert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\nassert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\nassert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\nassert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'",
    "timestamp": "2025-10-17T15:03:59.128975",
    "response_time": "9.07"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 154,
    "solution": "def cycpattern_check(a, b):\n    # If b is longer than a, it can't be a substring\n    if len(b) > len(a):\n        return False\n    \n    # Double the first word to simulate all possible rotations\n    doubled_a = a + a\n    \n    # Check if b is a substring of the doubled word\n    return b in doubled_a",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n### Signature\ndef cycpattern_check(a , b):\n\n### Test\nassert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\nassert  candidate(\"yello\",\"ell\") == True , \"test #1\"\nassert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"",
    "timestamp": "2025-10-17T15:04:07.258525",
    "response_time": "8.13"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 155,
    "solution": "def even_odd_count(num):\n    # Convert number to absolute value and then to string to handle negative numbers\n    num_str = str(abs(num))\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate through each digit in the number\n    for digit in num_str:\n        # Convert digit back to integer for checking evenness\n        digit_int = int(digit)\n        \n        # Increment even or odd counter based on digit\n        if digit_int % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Return tuple with even and odd digit counts\n    return (even_count, odd_count)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n### Signature\ndef even_odd_count(num):\n\n### Test\nassert candidate(7) == (0, 1)\nassert candidate(-78) == (1, 1)\nassert candidate(3452) == (2, 2)\nassert candidate(346211) == (3, 3)",
    "timestamp": "2025-10-17T15:04:11.322321",
    "response_time": "4.06"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 156,
    "solution": "def int_to_mini_roman(number):\n    # Roman numeral symbols and their corresponding values\n    roman_map = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    \n    # Validate input range\n    if not 1 <= number <= 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n    \n    # Build roman numeral string\n    result = ''\n    for value, symbol in roman_map:\n        while number >= value:\n            result += symbol\n            number -= value\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n### Signature\ndef int_to_mini_roman(number):\n\n### Test\nassert candidate(19) == 'xix'\nassert candidate(152) == 'clii'\nassert candidate(251) == 'ccli'\nassert candidate(426) == 'cdxxvi'\nassert candidate(500) == 'd'\nassert candidate(1) == 'i'\nassert candidate(4) == 'iv'",
    "timestamp": "2025-10-17T15:04:15.107754",
    "response_time": "3.78"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 157,
    "solution": "import math\n\ndef right_angle_triangle(a, b, c):\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n    \n    # Check if the Pythagorean theorem holds true\n    # Use math.isclose to handle floating point imprecision\n    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2, rel_tol=1e-9)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n\n### Signature\ndef right_angle_triangle(a, b, c):\n\n### Test\nassert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(1, 2, 3) == False\nassert candidate(10, 6, 8) == True\nassert candidate(2, 2, 2) == False\nassert candidate(7, 24, 25) == True",
    "timestamp": "2025-10-17T15:04:17.763353",
    "response_time": "2.65"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 158,
    "solution": "def find_max(words):\n    # If list is empty, return None\n    if not words:\n        return None\n    \n    # Function to count unique characters in a word\n    def count_unique_chars(word):\n        return len(set(word))\n    \n    # Find the maximum unique characters\n    max_unique = max(count_unique_chars(word) for word in words)\n    \n    # Filter words with max unique characters\n    max_unique_words = [word for word in words if count_unique_chars(word) == max_unique]\n    \n    # Return the lexicographically first word among max unique character words\n    return min(max_unique_words)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n### Signature\ndef find_max(words):\n\n### Test\nassert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\nassert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\nassert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\nassert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\nassert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'",
    "timestamp": "2025-10-17T15:04:21.457522",
    "response_time": "3.69"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 159,
    "solution": "def eat(number, need, remaining):\n    \"\"\"\n    Calculate total carrots eaten and remaining carrots after meals\n    \n    Args:\n        number (int): Number of carrots already eaten\n        need (int): Number of carrots needed to complete meals\n        remaining (int): Number of carrots currently available\n    \n    Returns:\n        list: [total carrots eaten, carrots left after eating]\n    \"\"\"\n    # If remaining carrots are enough to satisfy hunger\n    if remaining >= need:\n        return [number + need, remaining - need]\n    \n    # If remaining carrots are not enough, eat all remaining\n    return [number + remaining, 0]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n### Signature\ndef eat(number, need, remaining):\n\n### Test\nassert True, \"This prints if this assert fails 1 (good for debugging!)\"\nassert candidate(5, 6, 10) == [11, 4], \"Error\"\nassert candidate(4, 8, 9) == [12, 1], \"Error\"\nassert candidate(1, 10, 10) == [11, 0], \"Error\"",
    "timestamp": "2025-10-17T15:04:27.390544",
    "response_time": "5.93"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 160,
    "solution": "def do_algebra(operator, operand):\n    # Start with the first operand\n    result = operand[0]\n    \n    # Iterate through operators and remaining operands\n    for i in range(len(operator)):\n        # Apply the current operator to the current result and next operand\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n### Signature\ndef do_algebra(operator, operand):\n\n### Test\nassert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\nassert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9",
    "timestamp": "2025-10-17T15:04:31.257140",
    "response_time": "3.87"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 161,
    "solution": "def solve(s):\n    # Check if the string contains no letters\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    # If string contains letters, swap case of letters\n    result = []\n    for char in s:\n        if char.isalpha():\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n    \n    return ''.join(result)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n\n### Signature\ndef solve(s):\n\n### Test\nassert candidate(\"AsDf\") == \"aSdF\"\nassert candidate(\"1234\") == \"4321\"\nassert candidate(\"ab\") == \"AB\"\nassert candidate(\"#a@C\") == \"#A@c\"",
    "timestamp": "2025-10-17T15:04:36.682140",
    "response_time": "5.42"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 162,
    "solution": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    \n    # Convert the input text to bytes and generate MD5 hash\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    \n    return md5_hash",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n### Signature\ndef string_to_md5(text):\n\n### Test\nassert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nassert candidate('') == None",
    "timestamp": "2025-10-17T15:04:38.984256",
    "response_time": "2.30"
  },
  {
    "dataset_name": "human_eval_claude35haiku_second_half_td",
    "dataset_row_id": 163,
    "solution": "def generate_integers(a, b):\n    # Ensure a is the smaller number\n    start = min(a, b)\n    end = max(a, b)\n    \n    # Generate list of even digits between start and end (inclusive)\n    return [num for num in range(start, end + 1) if num % 2 == 0]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n### Signature\ndef generate_integers(a, b):\n\n### Test\nassert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\nassert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"",
    "timestamp": "2025-10-17T15:04:41.238677",
    "response_time": "2.25"
  }
]