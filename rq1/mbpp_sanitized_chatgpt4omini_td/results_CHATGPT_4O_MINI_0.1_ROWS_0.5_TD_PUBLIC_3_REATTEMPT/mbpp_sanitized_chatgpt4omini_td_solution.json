[
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 2,
        "solution": "===START===\nfrom typing import Tuple, Set\n\ndef similar_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Set[int]:\n    return set(test_tup1) & set(test_tup2)\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):\n\n### Test\nassert set(candidate((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))",
        "timestamp": "2025-08-13T11:17:52.252997",
        "response_time": "3.42",
        "context": "{\"function_name\": \"similar_elements\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 3,
        "solution": "===START===\ndef is_not_prime(n: int) -> bool:\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):\n\n### Test\nassert candidate(2) == False\nassert candidate(10) == True",
        "timestamp": "2025-08-13T11:17:54.163954",
        "response_time": "1.91",
        "context": "{\"function_name\": \"is_not_prime\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 4,
        "solution": "===START===\nfrom typing import List\nimport heapq\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    return heapq.nlargest(n, nums)\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):\n\n### Test\nassert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]",
        "timestamp": "2025-08-13T11:17:56.083157",
        "response_time": "1.92",
        "context": "{\"function_name\": \"heap_queue_largest\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 6,
        "solution": "===START===\nfrom typing import Tuple\n\ndef is_Power_Of_Two(x: int, y: int) -> bool:\n    return bin(x ^ y).count('1') == 1\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):\n\n### Test\nassert candidate(13,9) == True\nassert candidate(15,8) == False\nassert candidate(2,4) == False",
        "timestamp": "2025-08-13T11:17:57.358900",
        "response_time": "1.27",
        "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 7,
        "solution": "===START===\nfrom typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    words = text.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):\n\n### Test\nassert set(candidate('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])",
        "timestamp": "2025-08-13T11:17:59.228609",
        "response_time": "1.87",
        "context": "{\"function_name\": \"find_char_long\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 8,
        "solution": "===START===\nfrom typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
        "timestamp": "2025-08-13T11:18:00.918697",
        "response_time": "1.68",
        "context": "{\"function_name\": \"square_nums\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 9,
        "solution": "===START===\nfrom typing import List\n\ndef find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):\n\n### Test\nassert candidate(\"aaaa\") == 1",
        "timestamp": "2025-08-13T11:18:02.807452",
        "response_time": "1.89",
        "context": "{\"function_name\": \"find_Rotations\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 11,
        "solution": "===START===\ndef remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index == -1 or first_index == last_index:\n        return s.replace(ch, \"\", 1)\n    \n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):\n\n### Test\nassert candidate(\"hello\",\"l\") == \"heo\"",
        "timestamp": "2025-08-13T11:18:04.822317",
        "response_time": "2.01",
        "context": "{\"function_name\": \"remove_Occ\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 12,
        "solution": "===START===\nfrom typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    return sorted(M, key=sum)\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):\n\n### Test\nassert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
        "timestamp": "2025-08-13T11:18:06.083401",
        "response_time": "1.26",
        "context": "{\"function_name\": \"sort_matrix\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 14,
        "solution": "===START===\nfrom typing import Any\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return (l * b * h) / 2\n\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :\n\n### Test\nassert candidate(10,8,6) == 240",
        "timestamp": "2025-08-13T11:18:07.485174",
        "response_time": "1.40",
        "context": "{\"function_name\": \"find_Volume\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 16,
        "solution": "===START===\nimport re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch(r'[a-z]+(_[a-z]+)*', text))\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):\n\n### Test\nassert candidate(\"aab_cbbbc\")==(True)",
        "timestamp": "2025-08-13T11:18:08.732672",
        "response_time": "1.25",
        "context": "{\"function_name\": \"text_lowercase_underscore\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 17,
        "solution": "===START===\ndef square_perimeter(a: int) -> int:\n    return 4 * a\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):\n\n### Test\nassert candidate(10)==40",
        "timestamp": "2025-08-13T11:18:10.090122",
        "response_time": "1.35",
        "context": "{\"function_name\": \"square_perimeter\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 18,
        "solution": "===START===\ndef str_to_list(string: str) -> str:\n    return ''.join(char for char in string if char not in string)\n\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):\n\n### Test\nassert candidate(\"probasscurve\", \"pros\") == \"\"\"bacuve\"\"\"",
        "timestamp": "2025-08-13T11:18:11.583480",
        "response_time": "1.49",
        "context": "{\"function_name\": \"remove_dirty_chars\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 19,
        "solution": "===START===\nfrom typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):\n\n### Test\nassert candidate(([1,2,3,4,5]))==False",
        "timestamp": "2025-08-13T11:18:12.782846",
        "response_time": "1.20",
        "context": "{\"function_name\": \"test_duplicate\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 20,
        "solution": "===START===\nfrom typing import Union\n\ndef is_woodall(x: Union[int, float]) -> bool:\n    if x < 1:\n        return False\n    n = 1\n    while True:\n        woodall_number = (2 ** n) - n\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):\n\n### Test\nassert candidate(383) == True",
        "timestamp": "2025-08-13T11:18:14.864640",
        "response_time": "2.08",
        "context": "{\"function_name\": \"is_woodall\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 56,
        "solution": "===START===\ndef rev(num: int) -> bool:\n    reversed_num = int(str(num)[::-1])\n    return num == 2 * reversed_num - 1\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):\n\n### Test\nassert candidate(70) == False",
        "timestamp": "2025-08-13T11:18:16.308557",
        "response_time": "1.44",
        "context": "{\"function_name\": \"check\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 57,
        "solution": "===START===\nfrom typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    # Convert the list of integers to a list of strings\n    arr_str = list(map(str, arr))\n    # Sort the list of strings in descending order based on their concatenation\n    arr_str.sort(key=lambda x: x*10, reverse=True)\n    # Join the sorted strings and convert back to an integer\n    return int(''.join(arr_str))\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :\n\n### Test\nassert candidate([1,2,3]) == 321",
        "timestamp": "2025-08-13T11:18:18.890547",
        "response_time": "2.58",
        "context": "{\"function_name\": \"find_Max_Num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 58,
        "solution": "===START===\ndef opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):\n\n### Test\nassert candidate(1,-2) == True\nassert candidate(3,2) == False",
        "timestamp": "2025-08-13T11:18:20.122105",
        "response_time": "1.23",
        "context": "{\"function_name\": \"opposite_Signs\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 59,
        "solution": "===START===\ndef is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)\n\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):\n\n### Test\nassert candidate(5) == 65",
        "timestamp": "2025-08-13T11:18:21.577651",
        "response_time": "1.45",
        "context": "{\"function_name\": \"is_octagonal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 61,
        "solution": "===START===\nfrom typing import List\n\ndef count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == (j - i + 1):\n                count += 1\n                \n    return count\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):\n\n### Test\nassert candidate('112112') == 6",
        "timestamp": "2025-08-13T11:18:23.984431",
        "response_time": "2.41",
        "context": "{\"function_name\": \"count_Substrings\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 62,
        "solution": "===START===\nfrom typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    if not xs:\n        raise ValueError(\"The list cannot be empty\")\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):\n\n### Test\nassert candidate([10, 20, 1, 45, 99]) == 1",
        "timestamp": "2025-08-13T11:18:26.696882",
        "response_time": "2.71",
        "context": "{\"function_name\": \"smallest_num\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 63,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):\n\n### Test\nassert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
        "timestamp": "2025-08-13T11:18:28.365849",
        "response_time": "1.67",
        "context": "{\"function_name\": \"max_difference\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 64,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):\n\n### Test\nassert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
        "timestamp": "2025-08-13T11:18:30.404643",
        "response_time": "2.04",
        "context": "{\"function_name\": \"subject_marks\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 65,
        "solution": "===START===\nfrom typing import List, Union\n\ndef recursive_list_sum(data_list: Union[List, int]) -> int:\n    if isinstance(data_list, int):\n        return data_list\n    total = 0\n    for item in data_list:\n        total += recursive_list_sum(item)\n    return total\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):\n\n### Test\nassert candidate(([1, 2, [3,4],[5,6]]))==21",
        "timestamp": "2025-08-13T11:18:32.556733",
        "response_time": "2.15",
        "context": "{\"function_name\": \"recursive_list_sum\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 66,
        "solution": "===START===\nfrom typing import List\n\ndef pos_count(lst: List[int]) -> int:\n    return sum(1 for x in lst if x > 0)\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):\n\n### Test\nassert candidate([1,-2,3,-4]) == 2",
        "timestamp": "2025-08-13T11:18:34.046612",
        "response_time": "1.49",
        "context": "{\"function_name\": \"pos_count\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 67,
        "solution": "===START===\nfrom math import factorial\n\ndef bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]\n\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):\n\n### Test\nassert candidate(2)==2",
        "timestamp": "2025-08-13T11:18:36.819406",
        "response_time": "2.77",
        "context": "{\"function_name\": \"bell_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 68,
        "solution": "===START===\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n            \n    return increasing or decreasing\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):\n\n### Test\nassert candidate([6, 5, 4, 4]) == True",
        "timestamp": "2025-08-13T11:18:38.895324",
        "response_time": "2.06",
        "context": "{\"function_name\": \"is_Monotonic\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 69,
        "solution": "===START===\nfrom typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    len_s = len(s)\n    len_l = len(l)\n    \n    if len_s == 0:\n        return True\n    if len_l < len_s:\n        return False\n    \n    for i in range(len_l - len_s + 1):\n        if l[i:i + len_s] == s:\n            return True\n            \n    return False\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):\n\n### Test\nassert candidate([2,4,3,5,7],[3,7])==False",
        "timestamp": "2025-08-13T11:18:41.042917",
        "response_time": "2.14",
        "context": "{\"function_name\": \"is_sublist\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 70,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef find_equal_tuple(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all(len(t) == length for t in Input)\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):\n\n### Test\nassert candidate([(11, 22, 33), (44, 55, 66)]) == True",
        "timestamp": "2025-08-13T11:18:42.438053",
        "response_time": "1.39",
        "context": "{\"function_name\": \"get_equal\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 71,
        "solution": "===START===\nfrom typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        \n        sorted = True\n        \n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):\n\n### Test\nassert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
        "timestamp": "2025-08-13T11:18:45.772836",
        "response_time": "3.33",
        "context": "{\"function_name\": \"comb_sort\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 72,
        "solution": "===START===\ndef dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):\n\n### Test\nassert candidate(5) == True",
        "timestamp": "2025-08-13T11:18:48.252214",
        "response_time": "2.48",
        "context": "{\"function_name\": \"dif_Square\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 74,
        "solution": "===START===\nfrom typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n            \n    return True\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):\n\n### Test\nassert candidate([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
        "timestamp": "2025-08-13T11:18:51.096046",
        "response_time": "2.84",
        "context": "{\"function_name\": \"is_samepatterns\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 75,
        "solution": "===START===\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int]], K: int) -> List[Tuple[int]]:\n    return [tup for tup in test_list if all(x % K == 0 for x in tup)]\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):\n\n### Test\nassert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
        "timestamp": "2025-08-13T11:18:53.208021",
        "response_time": "2.11",
        "context": "{\"function_name\": \"find_tuples\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 77,
        "solution": "===START===\ndef is_Diff(n: int) -> bool:\n    return n % 11 == 0\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):\n\n### Test\nassert candidate (12345) == False",
        "timestamp": "2025-08-13T11:18:54.318823",
        "response_time": "1.11",
        "context": "{\"function_name\": \"is_Diff\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 79,
        "solution": "===START===\ndef word_len(s: str) -> bool:\n    return len(s) % 2 != 0\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):\n\n### Test\nassert candidate(\"Hadoop\") == False",
        "timestamp": "2025-08-13T11:18:56.019904",
        "response_time": "1.70",
        "context": "{\"function_name\": \"word_len\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 80,
        "solution": "===START===\nfrom typing import Union\n\ndef tetrahedral_number(n: Union[int, float]) -> int:\n    return (n * (n + 1) * (n + 2)) // 6\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):\n\n### Test\nassert candidate(5) == 35",
        "timestamp": "2025-08-13T11:18:57.639283",
        "response_time": "1.62",
        "context": "{\"function_name\": \"tetrahedral_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 82,
        "solution": "===START===\nimport math\n\ndef volume_sphere(r: float) -> float:\n    return (4/3) * math.pi * (r ** 3)\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 4188.790204786391, rel_tol=0.001)",
        "timestamp": "2025-08-13T11:18:58.949623",
        "response_time": "1.31",
        "context": "{\"function_name\": \"volume_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 83,
        "solution": "===START===\ndef get_Char(strr: str) -> str:\n    total_ascii = sum(ord(char) for char in strr)\n    index = total_ascii % 26\n    return chr(index + ord('a'))\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):\n\n### Test\nassert candidate(\"abc\") == \"f\"",
        "timestamp": "2025-08-13T11:19:00.300751",
        "response_time": "1.35",
        "context": "{\"function_name\": \"get_Char\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 84,
        "solution": "===START===\nfrom typing import List\n\ndef sequence(n: int) -> int:\n    if n < 1:\n        return 0\n    if n <= 3:\n        return n\n    seq: List[int] = [0] * (n + 1)\n    seq[1], seq[2], seq[3] = 1, 1, 2\n    for i in range(4, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):\n\n### Test\nassert candidate(10) == 6",
        "timestamp": "2025-08-13T11:19:02.781548",
        "response_time": "2.48",
        "context": "{\"function_name\": \"sequence\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 85,
        "solution": "===START===\nimport math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 1256.6370614359173, rel_tol=0.001)",
        "timestamp": "2025-08-13T11:19:03.886565",
        "response_time": "1.10",
        "context": "{\"function_name\": \"surfacearea_sphere\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 86,
        "solution": "===START===\nfrom typing import Union\n\ndef centered_hexagonal_number(n: int) -> Union[int, str]:\n    if n < 1:\n        return \"Input must be a positive integer.\"\n    return (3 * n * (n - 1)) + 1\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):\n\n### Test\nassert candidate(10) == 271",
        "timestamp": "2025-08-13T11:19:05.729506",
        "response_time": "1.84",
        "context": "{\"function_name\": \"centered_hexagonal_number\"}"
    },
    {
        "dataset_name": "mbpp_sanitized_chatgpt4omini_td",
        "dataset_row_id": 87,
        "solution": "===START===\nfrom typing import Dict\n\ndef merge_dictionaries_three(dict1: Dict, dict2: Dict, dict3: Dict) -> Dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n===END===",
        "llm_name": "openai/gpt-4o-mini-2024-07-18",
        "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\n### Test\nassert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={\"\"\"B\"\"\": \"\"\"Black\"\"\", \"\"\"R\"\"\": \"\"\"Red\"\"\", \"\"\"P\"\"\": \"\"\"Pink\"\"\", \"\"\"G\"\"\": \"\"\"Green\"\"\", \"\"\"W\"\"\": \"\"\"White\"\"\", \"\"\"O\"\"\": \"\"\"Orange\"\"\"}",
        "timestamp": "2025-08-13T11:19:07.419098",
        "response_time": "1.69",
        "context": "{\"function_name\": \"merge_dictionaries_three\"}"
    }
]