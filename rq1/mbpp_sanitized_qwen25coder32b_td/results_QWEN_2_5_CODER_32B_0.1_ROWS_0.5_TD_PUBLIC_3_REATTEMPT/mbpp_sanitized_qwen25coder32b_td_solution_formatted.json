[
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 2,
    "solution": "from typing import Tuple, Set\n\ndef similar_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Set[int]:\n    return set(test_tup1).intersection(set(test_tup2))",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):\n\n### Test\nassert set(candidate((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))",
    "timestamp": "2025-08-13T11:06:40.872428",
    "response_time": "2.64",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 3,
    "solution": "from typing import List\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):\n\n### Test\nassert candidate(2) == False\nassert candidate(10) == True",
    "timestamp": "2025-08-13T11:06:45.016920",
    "response_time": "4.14",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 4,
    "solution": "from typing import List\nimport heapq\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    return heapq.nlargest(n, nums)[::-1]",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):\n\n### Test\nassert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]",
    "timestamp": "2025-08-13T11:06:47.474496",
    "response_time": "2.46",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 6,
    "solution": "from typing import Tuple\n\ndef is_Power_Of_Two (x: int, y: int) -> bool:\n    # XOR the two numbers to find differing bits\n    xor_result = x ^ y\n    # Check if xor_result is a power of two\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0\n\ndef candidate(x: int, y: int) -> str:\n    return str(is_Power_Of_Two(x, y))",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):\n\n### Test\nassert candidate(13,9) == True\nassert candidate(15,8) == False\nassert candidate(2,4) == False",
    "timestamp": "2025-08-13T11:06:50.555639",
    "response_time": "3.08",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 7,
    "solution": "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    words = text.split()\n    return [word for word in words if len(word) >= 4]",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):\n\n### Test\nassert set(candidate('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])",
    "timestamp": "2025-08-13T11:06:53.111411",
    "response_time": "2.55",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 8,
    "solution": "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
    "timestamp": "2025-08-13T11:06:56.999513",
    "response_time": "3.89",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 9,
    "solution": "from typing import List\n\ndef find_Rotations(str: str) -> str:\n    n = len(str)\n    for i in range(1, n + 1):\n        rotated = str[i:] + str[:i]\n        if rotated == str:\n            return str(i)\n    return str(n)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):\n\n### Test\nassert candidate(\"aaaa\") == 1",
    "timestamp": "2025-08-13T11:07:00.476675",
    "response_time": "3.48",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 11,
    "solution": "from typing import List\n\ndef remove_Occ(s: str, ch: str) -> str:\n    first_occurrence_index = s.find(ch)\n    if first_occurrence_index == -1:\n        return s\n    \n    last_occurrence_index = s.rfind(ch)\n    if last_occurrence_index == -1 or first_occurrence_index == last_occurrence_index:\n        return s[:first_occurrence_index] + s[first_occurrence_index + 1:]\n    \n    return s[:first_occurrence_index] + s[first_occurrence_index + 1:last_occurrence_index] + s[last_occurrence_index + 1:]",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):\n\n### Test\nassert candidate(\"hello\",\"l\") == \"heo\"",
    "timestamp": "2025-08-13T11:07:04.521392",
    "response_time": "4.04",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 12,
    "solution": "from typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    return sorted(M, key=lambda row: sum(row))",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):\n\n### Test\nassert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
    "timestamp": "2025-08-13T11:07:05.956206",
    "response_time": "1.43",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 14,
    "solution": "from typing import Union\n\ndef find_Volume(l: Union[int, float], b: Union[int, float], h: Union[int, float]) -> str:\n    volume = (l * b * h) / 2\n    return str(volume)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :\n\n### Test\nassert candidate(10,8,6) == 240",
    "timestamp": "2025-08-13T11:07:07.782168",
    "response_time": "1.82",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 16,
    "solution": "from typing import List\n\ndef text_lowercase_underscore(text):\n    import re\n    pattern = re.compile(r'^[a-z]+(_[a-z]+)*$')\n    return bool(pattern.match(text))",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):\n\n### Test\nassert candidate(\"aab_cbbbc\")==(True)",
    "timestamp": "2025-08-13T11:07:09.907010",
    "response_time": "2.12",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 17,
    "solution": "from typing import Union\n\ndef square_perimeter(a: Union[int, float]) -> str:\n    perimeter = 4 * a\n    return str(perimeter)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):\n\n### Test\nassert candidate(10)==40",
    "timestamp": "2025-08-13T11:07:12.201179",
    "response_time": "2.29",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 18,
    "solution": "from typing import List\n\ndef remove_dirty_chars(string: str) -> List[str]:\n    return list(string)\n\ndef remove_characters(first_string: str, second_string: str) -> str:\n    first_list = str_to_list(first_string)\n    second_list = str_to_list(second_string)\n    result = [char for char in first_list if char not in second_list]\n    return ''.join(result)\n\ndef candidate(first_string: str, second_string: str) -> str:\n    return remove_characters(first_string, second_string)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):\n\n### Test\nassert candidate(\"probasscurve\", \"pros\") == \"\"\"bacuve\"\"\"",
    "timestamp": "2025-08-13T11:07:15.128690",
    "response_time": "2.92",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 19,
    "solution": "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):\n\n### Test\nassert candidate(([1,2,3,4,5]))==False",
    "timestamp": "2025-08-13T11:07:16.807664",
    "response_time": "1.68",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 20,
    "solution": "from typing import Union\n\ndef is_woodall(x: int) -> bool:\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        if woodall_number > x:\n            return False\n        n += 1",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):\n\n### Test\nassert candidate(383) == True",
    "timestamp": "2025-08-13T11:07:19.653225",
    "response_time": "2.84",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 56,
    "solution": "from typing import *\n\ndef check(num):\n    reversed_num = int(str(num)[::-1])\n    return num == 2 * reversed_num - 1",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):\n\n### Test\nassert candidate(70) == False",
    "timestamp": "2025-08-13T11:07:21.645871",
    "response_time": "1.99",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 57,
    "solution": "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> str:\n    # Convert each integer in the list to a string\n    str_arr = list(map(str, arr))\n    # Sort the array in descending order based on the string comparison\n    str_arr.sort(reverse=True)\n    # Join the sorted array into a single string\n    max_num_str = ''.join(str_arr)\n    return max_num_str",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :\n\n### Test\nassert candidate([1,2,3]) == 321",
    "timestamp": "2025-08-13T11:07:24.684790",
    "response_time": "3.04",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 58,
    "solution": "from typing import Tuple\n\ndef opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) < 0",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):\n\n### Test\nassert candidate(1,-2) == True\nassert candidate(3,2) == False",
    "timestamp": "2025-08-13T11:07:25.716268",
    "response_time": "1.03",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 59,
    "solution": "from typing import Union\n\ndef is_octagonal(n: int) -> Union[int, str]:\n    if n <= 0:\n        return \"Input must be a positive integer\"\n    return n * (3 * n - 2)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):\n\n### Test\nassert candidate(5) == 65",
    "timestamp": "2025-08-13T11:07:27.764801",
    "response_time": "2.05",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 61,
    "solution": "from typing import List\n\ndef count_Substrings(s: str) -> str:\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == (j - i + 1):\n                count += 1\n                \n    return str(count)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):\n\n### Test\nassert candidate('112112') == 6",
    "timestamp": "2025-08-13T11:07:30.522356",
    "response_time": "2.76",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 62,
    "solution": "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    if not xs:\n        raise ValueError(\"The list is empty\")\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):\n\n### Test\nassert candidate([10, 20, 1, 45, 99]) == 1",
    "timestamp": "2025-08-13T11:07:32.605034",
    "response_time": "2.08",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 63,
    "solution": "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> str:\n    max_diff = 0\n    for pair in test_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return str(max_diff)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):\n\n### Test\nassert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
    "timestamp": "2025-08-13T11:07:34.655844",
    "response_time": "2.05",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 64,
    "solution": "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):\n\n### Test\nassert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
    "timestamp": "2025-08-13T11:07:36.744849",
    "response_time": "2.09",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 65,
    "solution": "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):\n\n### Test\nassert candidate(([1, 2, [3,4],[5,6]]))==21",
    "timestamp": "2025-08-13T11:07:41.983367",
    "response_time": "5.24",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 66,
    "solution": "from typing import List\n\ndef pos_count(lst: List[int]) -> str:\n    count = 0\n    for number in lst:\n        if number > 0:\n            count += 1\n    return str(count)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):\n\n### Test\nassert candidate([1,-2,3,-4]) == 2",
    "timestamp": "2025-08-13T11:07:43.331821",
    "response_time": "1.35",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 67,
    "solution": "from typing import List\n\ndef bell_number(n: int) -> int:\n    # Create a table to store results of subproblems\n    bell: List[List[int]] = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # Base case: Bell(0) is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly put the value of Bell(i, 0)\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # Bell(n) is the first value of row n\n    return bell[n][0]",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):\n\n### Test\nassert candidate(2)==2",
    "timestamp": "2025-08-13T11:07:47.570563",
    "response_time": "4.24",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 68,
    "solution": "from typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):\n\n### Test\nassert candidate([6, 5, 4, 4]) == True",
    "timestamp": "2025-08-13T11:07:49.984796",
    "response_time": "2.41",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 69,
    "solution": "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):\n\n### Test\nassert candidate([2,4,3,5,7],[3,7])==False",
    "timestamp": "2025-08-13T11:07:53.298395",
    "response_time": "3.31",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 70,
    "solution": "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> str:\n    if not Input:\n        return \"True\"\n    first_length = len(Input[0])\n    for t in Input:\n        if len(t) != first_length:\n            return \"False\"\n    return \"True\"",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):\n\n### Test\nassert candidate([(11, 22, 33), (44, 55, 66)]) == True",
    "timestamp": "2025-08-13T11:07:55.732039",
    "response_time": "2.43",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 71,
    "solution": "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):\n\n### Test\nassert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
    "timestamp": "2025-08-13T11:07:58.651372",
    "response_time": "2.92",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 72,
    "solution": "from typing import Union\n\ndef dif_Square(n: int) -> bool:\n    # A number can be expressed as the difference of two squares if and only if it is not equivalent to 2 modulo 4\n    return n % 4 != 2",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):\n\n### Test\nassert candidate(5) == True",
    "timestamp": "2025-08-13T11:08:00.026772",
    "response_time": "1.37",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 74,
    "solution": "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):\n\n### Test\nassert candidate([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
    "timestamp": "2025-08-13T11:08:03.033334",
    "response_time": "3.01",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 75,
    "solution": "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all(element % K == 0 for element in tup)]",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):\n\n### Test\nassert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
    "timestamp": "2025-08-13T11:08:04.956328",
    "response_time": "1.92",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 77,
    "solution": "from typing import Union\n\ndef is_Diff(n: Union[int, str]) -> bool:\n    # Convert the number to a string to easily iterate over digits\n    str_n = str(n)\n    \n    # Calculate the alternating sum of the digits\n    odd_sum = sum(int(str_n[i]) for i in range(0, len(str_n), 2))\n    even_sum = sum(int(str_n[i]) for i in range(1, len(str_n), 2))\n    \n    # Check if the difference is divisible by 11\n    return (odd_sum - even_sum) % 11 == 0",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):\n\n### Test\nassert candidate (12345) == False",
    "timestamp": "2025-08-13T11:08:07.995121",
    "response_time": "3.04",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 79,
    "solution": "from typing import List\n\ndef word_len(s):\n    return len(s) % 2 != 0",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):\n\n### Test\nassert candidate(\"Hadoop\") == False",
    "timestamp": "2025-08-13T11:08:09.043350",
    "response_time": "1.05",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 80,
    "solution": "from typing import Union\n\ndef tetrahedral_number(n: int) -> Union[int, str]:\n    if n < 0:\n        return \"Invalid input\"\n    return (n * (n + 1) * (n + 2)) // 6",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):\n\n### Test\nassert candidate(5) == 35",
    "timestamp": "2025-08-13T11:08:14.424048",
    "response_time": "5.38",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 82,
    "solution": "from math import pi\n\ndef volume_sphere(r):\n    return (4/3) * pi * r**3",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 4188.790204786391, rel_tol=0.001)",
    "timestamp": "2025-08-13T11:08:15.421982",
    "response_time": "1.00",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 83,
    "solution": "from typing import List\n\ndef get_Char(strr: str) -> str:\n    ascii_sum = sum(ord(char) for char in strr)\n    result_ascii = (ascii_sum % 26) + ord('a')\n    return chr(result_ascii)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):\n\n### Test\nassert candidate(\"abc\") == \"f\"",
    "timestamp": "2025-08-13T11:08:17.633971",
    "response_time": "2.21",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 84,
    "solution": "from typing import List\n\ndef sequence(n: int) -> int:\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    \n    seq: List[int] = [0] * (n + 1)\n    seq[1], seq[2] = 1, 1\n    \n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    \n    return str(seq[n])",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):\n\n### Test\nassert candidate(10) == 6",
    "timestamp": "2025-08-13T11:08:22.369988",
    "response_time": "4.73",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 85,
    "solution": "from math import pi\n\ndef surfacearea_sphere(r):\n    return 4 * pi * r ** 2",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):\n\n### Test\nassert math.isclose(candidate(10), 1256.6370614359173, rel_tol=0.001)",
    "timestamp": "2025-08-13T11:08:23.507885",
    "response_time": "1.13",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 86,
    "solution": "from typing import Union\n\ndef centered_hexagonal_number(n: int) -> Union[int, str]:\n    # Formula to calculate the nth centered hexagonal number\n    result = 3 * n * (n - 1) + 1\n    return str(result)",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):\n\n### Test\nassert candidate(10) == 271",
    "timestamp": "2025-08-13T11:08:24.823720",
    "response_time": "1.31",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_qwen25coder32b_td",
    "dataset_row_id": 87,
    "solution": "from typing import Dict, Any\n\ndef merge_dictionaries_three(dict1: Dict[str, Any], dict2: Dict[str, Any], dict3: Dict[str, Any]) -> Dict[str, Any]:\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict",
    "llm_name": "qwen/qwen-2.5-coder-32b-instruct",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\n### Test\nassert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={\"\"\"B\"\"\": \"\"\"Black\"\"\", \"\"\"R\"\"\": \"\"\"Red\"\"\", \"\"\"P\"\"\": \"\"\"Pink\"\"\", \"\"\"G\"\"\": \"\"\"Green\"\"\", \"\"\"W\"\"\": \"\"\"White\"\"\", \"\"\"O\"\"\": \"\"\"Orange\"\"\"}",
    "timestamp": "2025-08-13T11:08:27.314693",
    "response_time": "2.49",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  }
]