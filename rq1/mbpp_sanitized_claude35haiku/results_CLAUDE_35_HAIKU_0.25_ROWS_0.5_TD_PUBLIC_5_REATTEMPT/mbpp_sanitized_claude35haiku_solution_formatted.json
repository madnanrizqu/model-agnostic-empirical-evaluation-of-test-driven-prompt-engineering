[
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 2,
    "solution": "from typing import List, Any\n\ndef similar_elements(test_tup1: List[Any], test_tup2: List[Any]) -> str:\n    # Convert lists to sets for efficient intersection\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find common elements\n    common_elements = list(set1.intersection(set2))\n    \n    # Convert result to string representation\n    return str(common_elements)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
    "timestamp": "2025-08-15T08:52:16.423089",
    "response_time": "14.42",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 3,
    "solution": "from typing import Union\n\ndef is_not_prime(n: Union[int, float]) -> bool:\n    \"\"\"\n    Identify if a given number is not a prime number.\n    \n    Args:\n        n (int or float): The number to check for primality\n    \n    Returns:\n        bool: True if the number is not prime, False if it is prime\n    \"\"\"\n    # Handle edge cases\n    if not isinstance(n, (int, float)) or n <= 1:\n        return True\n    \n    # Convert to integer to handle float inputs\n    n = int(n)\n    \n    # Check for divisibility from 2 to square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    \n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
    "timestamp": "2025-08-15T08:52:20.524433",
    "response_time": "4.10",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 4,
    "solution": "from typing import List\nimport heapq\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    # If n is larger than the list length, return the entire sorted list in descending order\n    if n >= len(nums):\n        return sorted(nums, reverse=True)\n    \n    # Use heapq to find the n largest elements\n    # Create a min heap of size n\n    heap = nums[:n]\n    heapq.heapify(heap)\n    \n    # For remaining elements, if an element is larger than the smallest in heap, \n    # replace the smallest element\n    for num in nums[n:]:\n        if num > heap[0]:\n            heapq.heapreplace(heap, num)\n    \n    # Return the heap sorted in descending order\n    return sorted(heap, reverse=True)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
    "timestamp": "2025-08-15T08:52:25.333955",
    "response_time": "4.81",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 6,
    "solution": "from typing import Union\n\ndef differ_At_One_Bit_Pos(x: Union[int, float]) -> bool:\n    \"\"\"\n    Check if two numbers differ at only one bit position.\n    \n    Args:\n        x (int): The input number to check\n    \n    Returns:\n        bool: True if the number differs at only one bit position, False otherwise\n    \"\"\"\n    # If x is 0, it cannot be a power of 2\n    if x == 0:\n        return False\n    \n    # Check if x is a power of 2 by using bitwise AND operation\n    # A number that is a power of 2 will have only one bit set\n    # Subtracting 1 from a power of 2 will give a number with all lower bits set\n    # So x & (x-1) will be 0 for a power of 2\n    return x & (x - 1) == 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
    "timestamp": "2025-08-15T08:52:29.453790",
    "response_time": "4.12",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 7,
    "solution": "from typing import List\nimport re\n\ndef find_char_long(text: str) -> List[str]:\n    # Use regex to find all words that are at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
    "timestamp": "2025-08-15T08:52:32.731954",
    "response_time": "3.28",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 8,
    "solution": "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n    Find squares of individual elements in a list.\n    \n    Args:\n        nums (List[int]): Input list of numbers\n    \n    Returns:\n        List[int]: List of squared numbers\n    \"\"\"\n    return [num * num for num in nums]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
    "timestamp": "2025-08-15T08:52:34.826349",
    "response_time": "2.09",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 9,
    "solution": "from typing import Union\n\ndef find_Rotations(str: str) -> Union[int, str]:\n    # If string is empty or has only one character, no rotations possible\n    if not str or len(str) <= 1:\n        return 0\n    \n    # Concatenate the string with itself \n    double_str = str + str\n    \n    # Try all possible rotations\n    for rotations in range(1, len(str)):\n        # Check if rotated substring exists in double string\n        rotated_str = str[rotations:] + str[:rotations]\n        if rotated_str in double_str[len(str):]:\n            return rotations\n    \n    # If no rotation makes the string same\n    return 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
    "timestamp": "2025-08-15T08:52:39.166195",
    "response_time": "4.34",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 11,
    "solution": "from typing import Optional\n\ndef remove_Occ(s: str, ch: str) -> str:\n    # If string is empty or character not found, return original string\n    if not s or ch not in s:\n        return s\n    \n    # Find first occurrence\n    first_index = s.find(ch)\n    \n    # Find last occurrence \n    last_index = s.rfind(ch)\n    \n    # If first and last index are same, remove that single occurrence\n    if first_index == last_index:\n        return s[:first_index] + s[first_index+1:]\n    \n    # Remove first and last occurrence\n    return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
    "timestamp": "2025-08-15T08:52:42.746188",
    "response_time": "3.58",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 12,
    "solution": "from typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    # If matrix is empty, return empty matrix\n    if not M:\n        return []\n    \n    # Create a list of tuples with (row sum, original row)\n    row_sums = [(sum(row), row) for row in M]\n    \n    # Sort the list of tuples based on row sums\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Extract and return the sorted rows\n    return [row for _, row in row_sums]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
    "timestamp": "2025-08-15T08:52:46.186414",
    "response_time": "3.44",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 14,
    "solution": "from typing import Union\n\ndef find_Volume(l: Union[int, float], b: Union[int, float], h: Union[int, float]) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n        l (float/int): Length of the base triangle's base\n        b (float/int): Width/breadth of the base triangle\n        h (float/int): Height of the prism\n    \n    Returns:\n        float: Volume of the triangular prism\n    \"\"\"\n    # Calculate area of base triangle using 1/2 * base * height\n    base_area = 0.5 * l * b\n    \n    # Calculate volume by multiplying base area with height of prism\n    volume = base_area * h\n    \n    return volume",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
    "timestamp": "2025-08-15T08:52:50.057093",
    "response_time": "3.87",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 16,
    "solution": "import re\nfrom typing import Any\n\ndef text_lowercase_underscore(text: str) -> bool:\n    \"\"\"\n    Check if the input string contains only lowercase letters joined with underscores.\n    \n    Args:\n        text (str): Input string to check\n    \n    Returns:\n        bool: True if string matches lowercase letters with underscores, False otherwise\n    \"\"\"\n    # Use regex pattern to match strings with only lowercase letters and underscores\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    \n    return bool(re.match(pattern, text))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
    "timestamp": "2025-08-15T08:52:53.299252",
    "response_time": "3.24",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 17,
    "solution": "from typing import Union\n\ndef square_perimeter(a: Union[int, float]) -> Union[int, float]:\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n    \n    Args:\n        a (int or float): Length of a side of the square\n    \n    Returns:\n        int or float: Perimeter of the square (4 * side length)\n    \"\"\"\n    return 4 * a",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
    "timestamp": "2025-08-15T08:52:55.638371",
    "response_time": "2.34",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 18,
    "solution": "from typing import List\n\ndef remove_dirty_chars(string: str) -> str:\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \n    Args:\n        string (str): Input string containing two strings separated by a comma\n    \n    Returns:\n        str: First string with characters from the second string removed\n    \"\"\"\n    # Split the input string into two strings\n    first_str, second_str = string.split(',')\n    \n    # Convert second string to a set for efficient lookup\n    chars_to_remove = set(second_str)\n    \n    # Create a new string by filtering out characters present in chars_to_remove\n    result = ''.join(char for char in first_str if char not in chars_to_remove)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
    "timestamp": "2025-08-15T08:53:00.053472",
    "response_time": "4.41",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 19,
    "solution": "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    \"\"\"\n    Check if the given array contains any duplicate elements.\n    \n    Args:\n        arraynums (List[int]): Input array of integers\n    \n    Returns:\n        bool: True if duplicates exist, False otherwise\n    \"\"\"\n    # Use a set to track unique elements \n    # If set length is less than array length, duplicates exist\n    return len(set(arraynums)) < len(arraynums)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
    "timestamp": "2025-08-15T08:53:03.275962",
    "response_time": "3.22",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 20,
    "solution": "from typing import Union\n\ndef is_woodall(x: Union[int, float]) -> bool:\n    \"\"\"\n    Check if a given number is a Woodall number.\n    \n    A Woodall number is defined as a number of the form n * 2^n - 1, \n    where n is a positive integer.\n    \n    Args:\n        x (int or float): The number to check\n    \n    Returns:\n        bool: True if the number is a Woodall number, False otherwise\n    \"\"\"\n    # Check if x is a positive integer\n    if not isinstance(x, int) or x <= 0:\n        return False\n    \n    # Check Woodall number condition\n    for n in range(1, x + 1):\n        woodall_num = n * (2 ** n) - 1\n        if woodall_num == x:\n            return True\n        # Optimization: break if woodall number exceeds x\n        if woodall_num > x:\n            break\n    \n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
    "timestamp": "2025-08-15T08:53:08.743193",
    "response_time": "5.47",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 56,
    "solution": "from typing import Union\n\ndef check(num: int) -> bool:\n    # Convert number to string to easily reverse it\n    num_str = str(num)\n    \n    # Reverse the number string\n    reversed_num_str = num_str[::-1]\n    \n    # Convert reversed string back to integer\n    reversed_num = int(reversed_num_str)\n    \n    # Check if the number is one less than twice its reverse\n    return num == (2 * reversed_num - 1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
    "timestamp": "2025-08-15T08:53:12.234547",
    "response_time": "3.49",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 57,
    "solution": "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> str:\n    # Convert integers to strings for easier sorting\n    str_arr = [str(num) for num in arr]\n    \n    # Custom sorting function to arrange digits to form largest number\n    # Sort in descending order based on concatenated string comparison\n    str_arr.sort(key=lambda x: x*len(max(str_arr, key=len)), reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    # Handle case of all zeros to return '0' instead of multiple zeros\n    return ''.join(str_arr) if str_arr[0] != '0' else '0'",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
    "timestamp": "2025-08-15T08:53:16.189988",
    "response_time": "3.95",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 58,
    "solution": "from typing import Union\n\ndef opposite_Signs(x: int, y: int) -> bool:\n    \"\"\"\n    Check whether two given integers have opposite signs.\n    \n    Args:\n        x (int): First integer\n        y (int): Second integer\n    \n    Returns:\n        bool: True if x and y have opposite signs, False otherwise\n    \"\"\"\n    # XOR the sign bits to check if signs are different\n    return x * y < 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
    "timestamp": "2025-08-15T08:53:19.519700",
    "response_time": "3.33",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 59,
    "solution": "from typing import Union\n\ndef is_octagonal(n: int) -> Union[int, bool]:\n    \"\"\"\n    Calculate the nth octagonal number or check if a number is octagonal.\n    \n    An octagonal number is a figurate number that extends the concept of triangular and square numbers to the octagon.\n    The nth octagonal number is calculated by the formula: n * (3n - 2)\n    \n    Args:\n        n (int): If positive, calculates the nth octagonal number.\n                 If checking for octagonal property, pass the number to check.\n    \n    Returns:\n        Union[int, bool]: \n        - If n > 0, returns the nth octagonal number \n        - If n <= 0, returns False\n    \"\"\"\n    if n <= 0:\n        return False\n    \n    return n * (3 * n - 2)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
    "timestamp": "2025-08-15T08:53:24.029778",
    "response_time": "4.51",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 61,
    "solution": "from typing import List\n\ndef count_Substrings(s: str) -> int:\n    \"\"\"\n    Count the number of substrings where the sum of digits equals the substring length.\n    \n    Args:\n        s (str): Input string containing digits\n    \n    Returns:\n        int: Number of valid substrings\n    \"\"\"\n    count = 0\n    n = len(s)\n    \n    # Iterate through all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            # Extract current substring\n            substring = s[i:j+1]\n            \n            # Calculate sum of digits in substring\n            digit_sum = sum(int(digit) for digit in substring)\n            \n            # Check if sum of digits equals substring length\n            if digit_sum == len(substring):\n                count += 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
    "timestamp": "2025-08-15T08:53:28.082286",
    "response_time": "4.05",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 62,
    "solution": "from typing import List, Union\n\ndef smallest_num(xs: List[Union[int, float]]) -> Union[int, float]:\n    \"\"\"\n    Find the smallest number in a given list.\n    \n    Args:\n        xs (List[Union[int, float]]): A list of numbers\n    \n    Returns:\n        Union[int, float]: The smallest number in the list\n    \"\"\"\n    if not xs:\n        return None\n    \n    smallest = xs[0]\n    for num in xs[1:]:\n        if num < smallest:\n            smallest = num\n    \n    return smallest",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
    "timestamp": "2025-08-15T08:53:30.674068",
    "response_time": "2.59",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 63,
    "solution": "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n    \n    Args:\n        test_list (List[Tuple[int, int]]): List of tuples containing pairs of integers\n    \n    Returns:\n        int: Maximum difference between pairs\n    \"\"\"\n    # If list is empty, return 0\n    if not test_list:\n        return 0\n    \n    # Initialize max difference to minimum possible value\n    max_diff = float('-inf')\n    \n    # Compare each pair with every other pair\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate absolute difference between pairs\n            current_diff = abs(test_list[i][0] - test_list[j][1])\n            \n            # Update max difference if current difference is larger\n            max_diff = max(max_diff, current_diff)\n    \n    return max_diff",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
    "timestamp": "2025-08-15T08:53:34.660862",
    "response_time": "3.98",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 64,
    "solution": "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    \"\"\"\n    Sort a list of tuples based on the second value (marks) in ascending order.\n    \n    Args:\n        subjectmarks: A list of tuples where each tuple contains (subject, marks)\n    \n    Returns:\n        A new list of tuples sorted by marks in ascending order\n    \"\"\"\n    return sorted(subjectmarks, key=lambda x: x[1])",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
    "timestamp": "2025-08-15T08:53:37.359202",
    "response_time": "2.70",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 65,
    "solution": "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    \"\"\"\n    Recursively flatten a nested list and sum all of its elements.\n    \n    Args:\n        data_list (List[Union[int, List]]): A potentially nested list of integers\n    \n    Returns:\n        int: Sum of all elements in the flattened list\n    \"\"\"\n    total = 0\n    \n    for item in data_list:\n        # If the item is a list, recursively sum its elements\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        # If the item is an integer, add it to the total\n        elif isinstance(item, int):\n            total += item\n    \n    return total",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
    "timestamp": "2025-08-15T08:53:40.394701",
    "response_time": "3.03",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 66,
    "solution": "from typing import List\n\ndef pos_count(list: List[int]) -> int:\n    \"\"\"\n    Count the number of positive numbers in the given list.\n    \n    Args:\n        list (List[int]): Input list of integers\n    \n    Returns:\n        int: Number of positive integers in the list\n    \"\"\"\n    return sum(1 for num in list if num > 0)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
    "timestamp": "2025-08-15T08:53:43.280931",
    "response_time": "2.88",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 67,
    "solution": "from typing import List\n\ndef bell_number(n: int) -> int:\n    \"\"\"\n    Calculate the Bell number for a given set size n.\n    Bell number represents the number of ways to partition a set of n elements.\n    \n    Args:\n        n (int): The number of elements in the set\n    \n    Returns:\n        int: The Bell number for the given set size\n    \"\"\"\n    # Create a 2D array to store Bell triangle values\n    bell_triangle: List[List[int]] = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # First value in Bell triangle is always 1\n    bell_triangle[0][0] = 1\n    \n    # Compute Bell triangle\n    for i in range(1, n+1):\n        # First number in each row is the last number of previous row\n        bell_triangle[i][0] = bell_triangle[i-1][i-1]\n        \n        # Compute other values in the row\n        for j in range(1, i+1):\n            bell_triangle[i][j] = bell_triangle[i-1][j-1] + bell_triangle[i][j-1]\n    \n    # The Bell number is the first number in the last row\n    return bell_triangle[n][0]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
    "timestamp": "2025-08-15T08:53:48.864327",
    "response_time": "5.58",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 68,
    "solution": "from typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    # If array has 0 or 1 element, it is monotonic by definition\n    if len(A) <= 1:\n        return True\n    \n    # Track if array is potentially increasing or decreasing\n    is_increasing = is_decreasing = True\n    \n    # Iterate through the array and check monotonicity\n    for i in range(1, len(A)):\n        # Check if array is not increasing\n        if A[i] < A[i-1]:\n            is_increasing = False\n        \n        # Check if array is not decreasing\n        if A[i] > A[i-1]:\n            is_decreasing = False\n    \n    # Return true if array is either increasing or decreasing\n    return is_increasing or is_decreasing",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
    "timestamp": "2025-08-15T08:53:53.186247",
    "response_time": "4.32",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 69,
    "solution": "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    # If the sublist is empty, it's always considered a sublist\n    if not s:\n        return True\n    \n    # If the sublist is longer than the main list, it can't be a sublist\n    if len(s) > len(l):\n        return False\n    \n    # Iterate through the main list to find potential starting points\n    for i in range(len(l) - len(s) + 1):\n        # Check if the sublist matches the current slice of the main list\n        if l[i:i+len(s)] == s:\n            return True\n    \n    # If no match is found, return False\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
    "timestamp": "2025-08-15T08:53:58.318644",
    "response_time": "5.13",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 70,
    "solution": "from typing import List, Tuple, Any\n\ndef get_equal(Input: List[Tuple[Any, ...]]) -> str:\n    \"\"\"\n    Check if all tuples in the input list have equal length\n    \n    Args:\n        Input (List[Tuple[Any, ...]]): List of tuples to check\n    \n    Returns:\n        str: 'Yes' if all tuples have equal length, 'No' otherwise\n    \"\"\"\n    # If input is empty or contains only one tuple, return 'Yes'\n    if len(Input) <= 1:\n        return 'Yes'\n    \n    # Get the length of the first tuple\n    first_tuple_length = len(Input[0])\n    \n    # Check if all tuples have the same length as the first tuple\n    for tuple_item in Input[1:]:\n        if len(tuple_item) != first_tuple_length:\n            return 'No'\n    \n    return 'Yes'",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
    "timestamp": "2025-08-15T08:54:02.180407",
    "response_time": "3.86",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 71,
    "solution": "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n    Implement comb sort algorithm to sort a list of numbers.\n    \n    Args:\n        nums (List[int]): Input list of numbers to be sorted\n    \n    Returns:\n        List[int]: Sorted list of numbers\n    \"\"\"\n    # If list is empty or has only one element, return as is\n    if len(nums) <= 1:\n        return nums\n    \n    # Initialize gap and shrink factor\n    gap = len(nums)\n    shrink = 1.3  # Standard shrink factor for comb sort\n    sorted_flag = False\n    \n    while not sorted_flag:\n        # Update gap\n        gap = max(int(gap / shrink), 1)\n        \n        # Assume list is sorted until proven otherwise\n        sorted_flag = True\n        \n        # Compare elements with current gap\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                # Swap elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                # List is not sorted yet\n                sorted_flag = False\n        \n        # If gap is 1 and no swaps occurred, list is sorted\n        if gap == 1 and sorted_flag:\n            break\n    \n    return nums",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
    "timestamp": "2025-08-15T08:54:07.925470",
    "response_time": "5.74",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 72,
    "solution": "from typing import Union\n\ndef dif_Square(n: int) -> Union[bool, str]:\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares.\n    \n    Args:\n        n (int): The number to check\n    \n    Returns:\n        bool: True if the number can be represented as difference of two squares, False otherwise\n    \"\"\"\n    # Check for numbers less than 0\n    if n < 0:\n        return False\n    \n    # Try all possible combinations of squares\n    for i in range(int(n**0.5) + 1):\n        for j in range(int(n**0.5) + 1):\n            # Check if the difference of squares equals the input number\n            if i*i - j*j == n:\n                return True\n    \n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
    "timestamp": "2025-08-15T08:54:11.857186",
    "response_time": "3.93",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 74,
    "solution": "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    # Check if lengths are different\n    if len(colors) != len(patterns):\n        return False\n    \n    # Create mappings to track color to pattern and pattern to color\n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    # Iterate through colors and patterns simultaneously \n    for color, pattern in zip(colors, patterns):\n        # If color already mapped to a pattern\n        if color in color_to_pattern:\n            # Check if current mapping matches previous mapping\n            if color_to_pattern[color] != pattern:\n                return False\n        \n        # If pattern already mapped to a color  \n        if pattern in pattern_to_color:\n            # Check if current mapping matches previous mapping\n            if pattern_to_color[pattern] != color:\n                return False\n        \n        # Create mappings\n        color_to_pattern[color] = pattern\n        pattern_to_color[pattern] = color\n    \n    # If all checks pass, return True\n    return True",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
    "timestamp": "2025-08-15T08:54:17.300153",
    "response_time": "5.44",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 75,
    "solution": "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    \"\"\"\n    Find tuples where all elements are divisible by K.\n    \n    Args:\n        test_list: List of tuples to check\n        K: Divisor to check against\n    \n    Returns:\n        List of tuples where all elements are divisible by K\n    \"\"\"\n    # Use list comprehension to filter tuples \n    # where all elements are divisible by K\n    return [tup for tup in test_list if all(elem % K == 0 for elem in tup)]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
    "timestamp": "2025-08-15T08:54:20.379483",
    "response_time": "3.07",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 77,
    "solution": "from typing import Union\n\ndef is_Diff(n: Union[int, str]) -> bool:\n    \"\"\"\n    Check if a given number is divisible by 11.\n    \n    Args:\n        n (int or str): The number to check for divisibility by 11\n    \n    Returns:\n        bool: True if the number is divisible by 11, False otherwise\n    \"\"\"\n    # Convert input to integer if it's a string\n    try:\n        num = int(n)\n    except ValueError:\n        return False\n    \n    # Check divisibility by 11\n    return num % 11 == 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
    "timestamp": "2025-08-15T08:54:23.276562",
    "response_time": "2.90",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 79,
    "solution": "from typing import Union\n\ndef word_len(s: str) -> Union[bool, str]:\n    \"\"\"\n    Check whether the length of the given word is odd or not.\n    \n    Args:\n        s (str): Input word to check length\n    \n    Returns:\n        bool: True if length is odd, False if length is even\n    \"\"\"\n    return len(s) % 2 != 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
    "timestamp": "2025-08-15T08:54:26.160338",
    "response_time": "2.88",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 80,
    "solution": "from typing import Union\n\ndef tetrahedral_number(n: Union[int, float]) -> int:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    A tetrahedral number is the sum of the first n triangular numbers.\n    It represents the number of objects needed to form a tetrahedral stack.\n    \n    Formula: T(n) = n * (n + 1) * (n + 2) / 6\n    \n    Args:\n        n (int or float): The position of the tetrahedral number to calculate\n    \n    Returns:\n        int: The nth tetrahedral number\n    \"\"\"\n    return int(n * (n + 1) * (n + 2) // 6)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
    "timestamp": "2025-08-15T08:54:29.264337",
    "response_time": "3.10",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 82,
    "solution": "from math import pi\n\ndef volume_sphere(r):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n    \n    Args:\n        r (float): Radius of the sphere\n    \n    Returns:\n        float: Volume of the sphere\n    \"\"\"\n    return (4/3) * pi * (r ** 3)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
    "timestamp": "2025-08-15T08:54:31.686390",
    "response_time": "2.42",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 83,
    "solution": "from typing import Union\n\ndef get_Char(strr: str) -> str:\n    # Calculate the sum of ASCII values of all characters\n    ascii_sum = sum(ord(char) for char in strr)\n    \n    # Take modulo 26 to get a value between 0-25\n    mod_value = ascii_sum % 26\n    \n    # Convert the modulo value to corresponding uppercase letter\n    # A starts at ASCII 65, so add the modulo value to get the character\n    result_char = chr(65 + mod_value)\n    \n    return result_char",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
    "timestamp": "2025-08-15T08:54:35.409683",
    "response_time": "3.72",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 84,
    "solution": "from typing import List\n\ndef sequence(n: int) -> int:\n    \"\"\"\n    Find the nth number in the Newman-Conway sequence.\n    \n    The Newman-Conway sequence is defined as:\n    P(1) = 1\n    P(2) = 1\n    P(n) = P(P(n-1)) + P(n-P(n-1)) for n > 2\n    \n    Args:\n        n (int): The position in the sequence to find\n    \n    Returns:\n        int: The nth number in the Newman-Conway sequence\n    \"\"\"\n    # Handle base cases\n    if n <= 0:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    \n    # Initialize the sequence with first two elements\n    seq = [0, 1, 1]\n    \n    # Build the sequence up to nth term\n    for i in range(3, n + 1):\n        # Calculate next term using the Newman-Conway sequence rule\n        next_term = seq[seq[i-1]] + seq[i - seq[i-1]]\n        seq.append(next_term)\n    \n    return seq[n]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
    "timestamp": "2025-08-15T08:54:39.908978",
    "response_time": "4.50",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 85,
    "solution": "from math import pi\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n    \n    Args:\n        r (float): Radius of the sphere\n    \n    Returns:\n        float: Surface area of the sphere\n    \"\"\"\n    return 4 * pi * r**2",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
    "timestamp": "2025-08-15T08:54:41.985160",
    "response_time": "2.07",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 86,
    "solution": "from typing import Union\n\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n    \n    A centered hexagonal number is a figurate number that represents a hexagon \n    with a dot in the center and all other dots surrounding the center in a hexagonal lattice.\n    \n    The formula for the nth centered hexagonal number is: 1 + 6 * (n * (n - 1) / 2)\n    \n    Args:\n        n (int): The position of the centered hexagonal number to calculate (n >= 1)\n    \n    Returns:\n        int: The nth centered hexagonal number\n    \"\"\"\n    if n < 1:\n        return 0\n    \n    return 1 + 6 * (n * (n - 1) // 2)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
    "timestamp": "2025-08-15T08:54:45.865159",
    "response_time": "3.88",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 87,
    "solution": "from typing import Dict, Any\n\ndef merge_dictionaries_three(dict1: Dict[Any, Any], dict2: Dict[Any, Any], dict3: Dict[Any, Any]) -> Dict[Any, Any]:\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \n    Args:\n        dict1 (dict): First input dictionary\n        dict2 (dict): Second input dictionary\n        dict3 (dict): Third input dictionary\n    \n    Returns:\n        dict: A merged dictionary containing all key-value pairs from the input dictionaries\n    \"\"\"\n    # Create a new dictionary and update it with key-value pairs from each input dictionary\n    # Later dictionaries will overwrite keys from earlier dictionaries if there are duplicates\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    \n    return merged_dict",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
    "timestamp": "2025-08-15T08:54:49.843736",
    "response_time": "3.97",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 88,
    "solution": "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    \"\"\"\n    Returns a dictionary with the frequency of each element in the input list.\n    \n    Args:\n        list1: Input list of elements\n    \n    Returns:\n        Dictionary with elements as keys and their frequencies as values\n    \"\"\"\n    frequency = {}\n    \n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    return frequency",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):",
    "timestamp": "2025-08-15T08:54:53.410876",
    "response_time": "3.56",
    "context": "{\"function_name\": \"freq_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 89,
    "solution": "from typing import Optional\n\ndef closest_num(N: int) -> Optional[int]:\n    \"\"\"\n    Find the closest smaller number than the given number N.\n    \n    Args:\n        N (int): The input number to find the closest smaller number for\n    \n    Returns:\n        Optional[int]: The closest smaller number, or None if no such number exists\n    \"\"\"\n    # If N is 0 or negative, return None as there's no smaller number\n    if N <= 0:\n        return None\n    \n    # Subtract 1 to get the closest smaller number\n    return N - 1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):",
    "timestamp": "2025-08-15T08:54:56.288810",
    "response_time": "2.88",
    "context": "{\"function_name\": \"closest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 90,
    "solution": "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    \"\"\"\n    Find the length of the longest word in the given list of words.\n    \n    Args:\n        list1 (List[str]): A list of words\n    \n    Returns:\n        int: Length of the longest word. Returns 0 if list is empty.\n    \"\"\"\n    # If list is empty, return 0\n    if not list1:\n        return 0\n    \n    # Use max() with key as len to find the length of the longest word\n    return len(max(list1, key=len))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):",
    "timestamp": "2025-08-15T08:54:59.174604",
    "response_time": "2.87",
    "context": "{\"function_name\": \"len_log\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 91,
    "solution": "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    \"\"\"\n    Check if a substring is present in any of the strings in the given list.\n    \n    Args:\n        str1 (List[str]): List of strings to search through\n        sub_str (str): Substring to find\n    \n    Returns:\n        bool: True if substring is found in any string, False otherwise\n    \"\"\"\n    # Iterate through each string in the list\n    for string in str1:\n        # Check if substring is present in current string\n        if sub_str in string:\n            return True\n    \n    # Return False if substring not found in any string\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):",
    "timestamp": "2025-08-15T08:55:02.342407",
    "response_time": "3.17",
    "context": "{\"function_name\": \"find_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 92,
    "solution": "from typing import Union\n\ndef is_undulating(n: Union[int, str]) -> bool:\n    \"\"\"\n    Check whether the given number is undulating or not.\n    \n    An undulating number is a number where digits alternate between increasing and decreasing.\n    \n    Args:\n        n (int or str): The number to check for undulating property\n    \n    Returns:\n        bool: True if the number is undulating, False otherwise\n    \"\"\"\n    # Convert number to string for easier digit manipulation\n    num_str = str(n)\n    \n    # Undulating numbers must have at least 3 digits\n    if len(num_str) < 3:\n        return False\n    \n    # Check if digits alternate between increasing and decreasing\n    increasing = num_str[0] < num_str[1]\n    \n    for i in range(1, len(num_str) - 1):\n        # If current digit is increasing\n        if increasing:\n            # Check if next digit is decreasing\n            if num_str[i] >= num_str[i+1]:\n                return False\n        # If current digit is decreasing\n        else:\n            # Check if next digit is increasing\n            if num_str[i] <= num_str[i+1]:\n                return False\n        \n        # Toggle the increasing/decreasing flag\n        increasing = not increasing\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):",
    "timestamp": "2025-08-15T08:55:07.782855",
    "response_time": "5.44",
    "context": "{\"function_name\": \"is_undulating\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 93,
    "solution": "from typing import Union\n\ndef power(a: Union[int, float], b: Union[int, float]) -> Union[int, float]:\n    \"\"\"\n    Calculate the value of 'a' raised to the power of 'b'\n    \n    Args:\n        a (int or float): Base number\n        b (int or float): Exponent\n    \n    Returns:\n        int or float: Result of a raised to the power of b\n    \"\"\"\n    return a ** b",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):",
    "timestamp": "2025-08-15T08:55:10.118573",
    "response_time": "2.33",
    "context": "{\"function_name\": \"power\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 94,
    "solution": "from typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[int, int]]) -> int:\n    # Check if the list is empty\n    if not test_list:\n        return None\n    \n    # Find the tuple with the smallest second value\n    min_tuple = min(test_list, key=lambda x: x[1])\n    \n    # Return the first value of that tuple\n    return min_tuple[0]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):",
    "timestamp": "2025-08-15T08:55:12.193252",
    "response_time": "2.07",
    "context": "{\"function_name\": \"index_minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 95,
    "solution": "from typing import List\n\ndef Find_Min_Length(lst: List[List]) -> int:\n    \"\"\"\n    Find the length of the smallest list in a list of lists.\n    \n    Args:\n        lst (List[List]): A list containing multiple lists\n    \n    Returns:\n        int: Length of the smallest list. Returns 0 if input list is empty.\n    \"\"\"\n    # If the input list is empty, return 0\n    if not lst:\n        return 0\n    \n    # Use min() with a key function to find the length of the smallest list\n    return min(len(sublist) for sublist in lst)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):",
    "timestamp": "2025-08-15T08:55:15.200944",
    "response_time": "3.01",
    "context": "{\"function_name\": \"Find_Min_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 96,
    "solution": "from typing import int\n\ndef divisor(n: int) -> int:\n    \"\"\"\n    Find the number of divisors for a given integer.\n    \n    Args:\n        n (int): The input integer to count divisors for\n    \n    Returns:\n        int: Total number of divisors of the input number\n    \"\"\"\n    # Handle special cases for 0 and negative numbers\n    if n <= 0:\n        return 0\n    \n    # Count divisors by checking from 1 to n\n    divisor_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_count += 1\n    \n    return divisor_count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):",
    "timestamp": "2025-08-15T08:55:19.065044",
    "response_time": "3.86",
    "context": "{\"function_name\": \"divisor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 97,
    "solution": "from typing import List, Dict, Any\n\ndef frequency_lists(list1: List[List[Any]]) -> Dict[Any, int]:\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # Create frequency dictionary\n    frequency_dict = {}\n    for item in flattened_list:\n        frequency_dict[item] = frequency_dict.get(item, 0) + 1\n    \n    return frequency_dict",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):",
    "timestamp": "2025-08-15T08:55:21.827228",
    "response_time": "2.76",
    "context": "{\"function_name\": \"frequency_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 98,
    "solution": "from typing import List\n\ndef multiply_num(numbers: List[float]) -> float:\n    # Check if the list is empty to avoid division by zero\n    if not numbers:\n        return 0\n    \n    # Multiply all numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    # Divide the product by the length of the list\n    result = product / len(numbers)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):",
    "timestamp": "2025-08-15T08:55:24.136003",
    "response_time": "2.31",
    "context": "{\"function_name\": \"multiply_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 99,
    "solution": "from typing import Union\n\ndef decimal_to_binary(n: Union[int, float]) -> str:\n    # Handle zero as a special case\n    if n == 0:\n        return \"0\"\n    \n    # Handle negative numbers by converting to positive \n    # and tracking the sign\n    is_negative = n < 0\n    n = abs(int(n))\n    \n    # Convert decimal to binary\n    binary = []\n    while n > 0:\n        binary.insert(0, str(n % 2))\n        n //= 2\n    \n    # Convert list to string and return\n    return ''.join(binary)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):",
    "timestamp": "2025-08-15T08:55:28.339724",
    "response_time": "4.20",
    "context": "{\"function_name\": \"decimal_to_binary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 100,
    "solution": "from typing import Union\n\ndef next_smallest_palindrome(num: int) -> int:\n    # Convert number to string for easier manipulation\n    num_str = str(num)\n    n = len(num_str)\n    \n    # If number is single digit, return next number\n    if n == 1:\n        return num + 1 if num < 9 else 11\n    \n    # Handle cases where number is already a palindrome\n    is_all_9s = all(digit == '9' for digit in num_str)\n    if is_all_9s:\n        return int('1' + '0' * (n - 1) + '1')\n    \n    # Split number into left and right halves\n    mid = n // 2\n    left_half = num_str[:mid]\n    \n    # Create palindrome by mirroring left half\n    if n % 2 == 0:\n        # Even length palindrome\n        candidate = left_half + left_half[::-1]\n    else:\n        # Odd length palindrome, keep middle digit\n        candidate = left_half + num_str[mid] + left_half[::-1]\n    \n    # If candidate is smaller than original number, increment\n    if int(candidate) <= num:\n        # Increment left half\n        left_increment = str(int(left_half) + 1)\n        \n        if n % 2 == 0:\n            candidate = left_increment + left_increment[::-1]\n        else:\n            candidate = left_increment + num_str[mid] + left_increment[::-1]\n    \n    return int(candidate)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):",
    "timestamp": "2025-08-15T08:55:35.186499",
    "response_time": "6.84",
    "context": "{\"function_name\": \"next_smallest_palindrome\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 101,
    "solution": "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    # Check if k is valid\n    if k < 1 or k > len(arr):\n        return -1  # Return -1 for invalid index\n    \n    # Return the kth element using 1-based indexing\n    return arr[k-1]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):",
    "timestamp": "2025-08-15T08:55:39.806379",
    "response_time": "4.61",
    "context": "{\"function_name\": \"kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 102,
    "solution": "from typing import List\n\ndef snake_to_camel(word: str) -> str:\n    # If the input is empty, return empty string\n    if not word:\n        return \"\"\n    \n    # Split the snake_case string into words\n    words: List[str] = word.split('_')\n    \n    # Capitalize all words except the first one\n    camel_words: List[str] = [words[0]] + [w.capitalize() for w in words[1:]]\n    \n    # Join the words together\n    return ''.join(camel_words)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
    "timestamp": "2025-08-15T08:55:43.291212",
    "response_time": "3.48",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 103,
    "solution": "from typing import List\n\ndef eulerian_num(n: int, m: int) -> int:\n    \"\"\"\n    Calculate the Eulerian number a(n, m)\n    \n    Eulerian numbers count the number of permutations of the set {1, ..., n} \n    with exactly m ascents (where an ascent is a position where the next element is larger)\n    \n    Args:\n        n (int): Total number of elements \n        m (int): Number of ascents\n    \n    Returns:\n        int: The Eulerian number a(n, m)\n    \"\"\"\n    # Create a 2D array to store Eulerian numbers \n    # Initialize with 0s\n    dp: List[List[int]] = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base case: 0 permutations with 0 elements\n    dp[0][0] = 1\n    \n    # Fill the dynamic programming table\n    for i in range(1, n + 1):\n        for j in range(min(m, i) + 1):\n            # Two ways to create permutations:\n            # 1. Place the new element at the end \n            # 2. Insert the new element before the last element\n            if j == 0:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i-1][j-1] + (i - j) * dp[i-1][j]\n    \n    return dp[n][m]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):",
    "timestamp": "2025-08-15T08:55:53.089004",
    "response_time": "9.80",
    "context": "{\"function_name\": \"eulerian_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 104,
    "solution": "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n    Sort each sublist of strings in the given list of lists.\n    \n    Args:\n        input_list (List[List[str]]): A list of lists containing strings\n    \n    Returns:\n        List[List[str]]: A new list with each sublist sorted\n    \"\"\"\n    # Create a new list to store sorted sublists\n    sorted_list = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in input_list:\n        # Sort the current sublist and append to the result list\n        sorted_list.append(sorted(sublist))\n    \n    return sorted_list",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):",
    "timestamp": "2025-08-15T08:55:56.202615",
    "response_time": "3.11",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 105,
    "solution": "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    \"\"\"\n    Count the number of True boolean values in the given list.\n    \n    Args:\n        lst (List[bool]): A list of boolean values\n    \n    Returns:\n        int: Number of True values in the list\n    \"\"\"\n    return sum(1 for item in lst if item is True)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):",
    "timestamp": "2025-08-15T08:55:58.211379",
    "response_time": "2.01",
    "context": "{\"function_name\": \"count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 106,
    "solution": "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    \"\"\"\n    Append the given list to the given tuple.\n    \n    Args:\n        test_list (List[Any]): The list to be appended\n        test_tup (Tuple[Any, ...]): The original tuple\n    \n    Returns:\n        Tuple[Any, ...]: A new tuple with the list elements appended\n    \"\"\"\n    return test_tup + tuple(test_list)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):",
    "timestamp": "2025-08-15T08:56:02.070123",
    "response_time": "3.86",
    "context": "{\"function_name\": \"add_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 108,
    "solution": "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    # Merge the three sorted lists\n    merged = []\n    i, j, k = 0, 0, 0\n    \n    # Continue until we've gone through all elements in all lists\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        # Find the minimum of the current elements\n        min_val = min(num1[i], num2[j], num3[k])\n        \n        # Add the minimum to merged list and increment its index\n        if min_val == num1[i]:\n            merged.append(num1[i])\n            i += 1\n        elif min_val == num2[j]:\n            merged.append(num2[j])\n            j += 1\n        else:\n            merged.append(num3[k])\n            k += 1\n    \n    # Handle remaining elements in num1\n    while i < len(num1):\n        merged.append(num1[i])\n        i += 1\n    \n    # Handle remaining elements in num2\n    while j < len(num2):\n        merged.append(num2[j])\n        j += 1\n    \n    # Handle remaining elements in num3\n    while k < len(num3):\n        merged.append(num3[k])\n        k += 1\n    \n    return merged",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):",
    "timestamp": "2025-08-15T08:56:07.108557",
    "response_time": "5.03",
    "context": "{\"function_name\": \"merge_sorted_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 109,
    "solution": "from typing import List\n\ndef odd_Equivalent(s: str, n: int) -> int:\n    \"\"\"\n    Find the number of numbers with an odd value when rotating a binary string \n    the given number of times.\n    \n    Args:\n    s (str): The binary string to rotate\n    n (int): Number of rotations to perform\n    \n    Returns:\n    int: Count of numbers with odd value after rotations\n    \"\"\"\n    # Track count of odd numbers \n    odd_count = 0\n    \n    # Perform n rotations \n    for i in range(n):\n        # Rotate the string by moving first character to end\n        s = s[1:] + s[0]\n        \n        # Convert rotated binary string to integer \n        num = int(s, 2)\n        \n        # Check if number is odd\n        if num % 2 == 1:\n            odd_count += 1\n    \n    return odd_count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):",
    "timestamp": "2025-08-15T08:56:11.467926",
    "response_time": "4.36",
    "context": "{\"function_name\": \"odd_Equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 111,
    "solution": "from typing import List, Any\n\ndef common_in_nested_lists(nestedlist: List[List[Any]]) -> str:\n    # If the nested list is empty, return empty string\n    if not nestedlist:\n        return \"\"\n    \n    # Convert first list to set for efficient comparison\n    common_elements = set(nestedlist[0])\n    \n    # Iterate through remaining lists and find intersection\n    for lst in nestedlist[1:]:\n        common_elements = common_elements.intersection(set(lst))\n    \n    # Convert common elements to sorted list and then to string\n    result = sorted(list(common_elements))\n    \n    # Convert result to string representation\n    return str(result)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):",
    "timestamp": "2025-08-15T08:56:15.360743",
    "response_time": "3.89",
    "context": "{\"function_name\": \"common_in_nested_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 113,
    "solution": "from typing import Union\n\ndef check_integer(text: str) -> bool:\n    \"\"\"\n    Check if the given text represents a valid integer.\n    \n    Args:\n        text (str): The string to check\n    \n    Returns:\n        bool: True if the string represents an integer, False otherwise\n    \"\"\"\n    # Handle empty string\n    if not text:\n        return False\n    \n    # Check for optional sign at the beginning\n    start_index = 0\n    if text[0] in ['+', '-']:\n        start_index = 1\n    \n    # Check if remaining characters are all digits\n    return text[start_index:].isdigit()",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):",
    "timestamp": "2025-08-15T08:56:19.400803",
    "response_time": "4.04",
    "context": "{\"function_name\": \"check_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 115,
    "solution": "from typing import List, Dict, Any\n\ndef empty_dit(list1: List[Dict[Any, Any]]) -> bool:\n    \"\"\"\n    Check whether all dictionaries in the given list are empty.\n    \n    Args:\n        list1 (List[Dict]): A list of dictionaries to check\n    \n    Returns:\n        bool: True if all dictionaries are empty, False otherwise\n    \"\"\"\n    # If the list is empty, return True\n    if not list1:\n        return True\n    \n    # Check if all dictionaries in the list are empty\n    return all(len(d) == 0 for d in list1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):",
    "timestamp": "2025-08-15T08:56:22.385455",
    "response_time": "2.98",
    "context": "{\"function_name\": \"empty_dit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 116,
    "solution": "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \n    Args:\n        nums (Tuple[int, ...]): A tuple of positive integers\n    \n    Returns:\n        int: A single integer formed by concatenating the input integers\n    \"\"\"\n    # Convert each integer to string and join them together\n    return int(''.join(str(num) for num in nums))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):",
    "timestamp": "2025-08-15T08:56:25.432929",
    "response_time": "3.04",
    "context": "{\"function_name\": \"tuple_to_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 117,
    "solution": "from typing import List, Union\n\ndef list_to_float(test_list: List[List[Union[str, int, float]]]) -> List[List[Union[float, str]]]:\n    \"\"\"\n    Convert all possible elements in a list of lists to floats.\n    \n    Args:\n        test_list (List[List[Union[str, int, float]]]): Input list of lists with mixed types\n    \n    Returns:\n        List[List[Union[float, str]]]: List of lists with convertible elements converted to floats\n    \"\"\"\n    result = []\n    for sublist in test_list:\n        converted_sublist = []\n        for item in sublist:\n            try:\n                # Attempt to convert to float\n                converted_item = float(item)\n                converted_sublist.append(converted_item)\n            except (ValueError, TypeError):\n                # If conversion fails, keep the original item\n                converted_sublist.append(item)\n        result.append(converted_sublist)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):",
    "timestamp": "2025-08-15T08:56:29.823998",
    "response_time": "4.39",
    "context": "{\"function_name\": \"list_to_float\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 118,
    "solution": "def string_to_list(string):\n    return string.split()",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):",
    "timestamp": "2025-08-15T08:56:31.953808",
    "response_time": "2.13",
    "context": "{\"function_name\": \"string_to_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 119,
    "solution": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n    \n    Args:\n        arr (List[int]): A sorted array where all elements appear twice except one\n    \n    Returns:\n        int: The element that appears only once\n    \"\"\"\n    # If array has only one element, return that element\n    if len(arr) == 1:\n        return arr[0]\n    \n    # Check first and last elements as edge cases\n    if arr[0] != arr[1]:\n        return arr[0]\n    \n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    \n    # Binary search to find the unique element\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if mid is the unique element\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # If elements at mid and mid+1 are different, unique element is on left side\n        if arr[mid] != arr[mid + 1]:\n            right = mid\n        # Otherwise, unique element is on right side\n        else:\n            left = mid + 2\n    \n    return arr[left]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):",
    "timestamp": "2025-08-15T08:56:37.919969",
    "response_time": "5.96",
    "context": "{\"function_name\": \"search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 120,
    "solution": "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples.\n    \n    Args:\n        list1: A list of tuples containing integer pairs\n    \n    Returns:\n        The maximum absolute product between numbers in the tuples\n    \"\"\"\n    # If list is empty, return 0\n    if not list1:\n        return 0\n    \n    # Initialize max product to the absolute product of first tuple\n    max_prod = abs(list1[0][0] * list1[0][1])\n    \n    # Iterate through all tuples and find max absolute product\n    for a, b in list1:\n        current_prod = abs(a * b)\n        max_prod = max(max_prod, current_prod)\n    \n    return max_prod",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):",
    "timestamp": "2025-08-15T08:56:42.461161",
    "response_time": "4.54",
    "context": "{\"function_name\": \"max_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 123,
    "solution": "from typing import List\n\ndef amicable_numbers_sum(n: int) -> int:\n    \"\"\"Calculate the sum of proper divisors of a number.\"\"\"\n    divisors_sum = 1  # 1 is always a proper divisor\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            # Add the corresponding divisor if not a perfect square\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n    Sum all amicable numbers from 1 to the given limit.\n    \n    An amicable number is a number where the sum of its proper divisors \n    of number A leads to number B, and vice versa.\n    \"\"\"\n    amicable_sum = 0\n    \n    # Track numbers already counted to avoid duplicates\n    counted = set()\n    \n    for a in range(2, limit + 1):\n        # Skip if already counted\n        if a in counted:\n            continue\n        \n        # Find sum of proper divisors of a\n        b = get_proper_divisors_sum(a)\n        \n        # Check if b is within limit and forms an amicable pair\n        if b > a and b <= limit and get_proper_divisors_sum(b) == a:\n            amicable_sum += a + b\n            counted.add(a)\n            counted.add(b)\n    \n    return amicable_sum",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):",
    "timestamp": "2025-08-15T08:56:48.640482",
    "response_time": "6.18",
    "context": "{\"function_name\": \"amicable_numbers_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 124,
    "solution": "from math import atan2\n\ndef angle_complex(a, b):\n    \"\"\"\n    Calculate the angle (argument) of a complex number represented by real and imaginary parts.\n    \n    Args:\n        a (float): Real part of the complex number\n        b (float): Imaginary part of the complex number\n    \n    Returns:\n        float: Angle of the complex number in radians\n    \"\"\"\n    return atan2(b, a)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):",
    "timestamp": "2025-08-15T08:56:50.863514",
    "response_time": "2.22",
    "context": "{\"function_name\": \"angle_complex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 125,
    "solution": "from typing import List\n\ndef find_length(string: str) -> int:\n    \"\"\"\n    Find the maximum difference between the number of 0s and 1s in any sub-string of the given binary string.\n    \n    Args:\n        string (str): Input binary string containing only '0' and '1'\n    \n    Returns:\n        int: Maximum difference between number of 0s and 1s in any sub-string\n    \"\"\"\n    # If string is empty, return 0\n    if not string:\n        return 0\n    \n    # Kadane's algorithm variant for max difference\n    max_diff = 0\n    current_diff = 0\n    \n    # Replace 0 with -1 to calculate difference\n    for char in string:\n        # If 0, count as -1, if 1, count as +1\n        val = -1 if char == '0' else 1\n        \n        # Update current difference and max difference\n        current_diff = max(val, current_diff + val)\n        max_diff = max(max_diff, current_diff)\n    \n    return max_diff",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):",
    "timestamp": "2025-08-15T08:56:55.455654",
    "response_time": "4.59",
    "context": "{\"function_name\": \"find_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 126,
    "solution": "from typing import List\n\ndef sum(a: int, b: int) -> int:\n    # Find the minimum of the two numbers to limit divisor search\n    min_num = min(a, b)\n    \n    # List to store common divisors\n    common_divisors: List[int] = []\n    \n    # Find common divisors\n    for i in range(1, min_num + 1):\n        # Check if i is a divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    \n    # Return sum of common divisors\n    return sum(common_divisors)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):",
    "timestamp": "2025-08-15T08:56:58.614669",
    "response_time": "3.16",
    "context": "{\"function_name\": \"sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 127,
    "solution": "from typing import Union\n\ndef multiply_int(x: Union[int, float], y: Union[int, float]) -> int:\n    \"\"\"\n    Multiply two integers and return the result.\n    \n    Args:\n        x (int or float): First number to multiply\n        y (int or float): Second number to multiply\n    \n    Returns:\n        int: Product of x and y\n    \"\"\"\n    return int(x * y)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):",
    "timestamp": "2025-08-15T08:57:01.073991",
    "response_time": "2.46",
    "context": "{\"function_name\": \"multiply_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 128,
    "solution": "from typing import List\n\ndef long_words(n: int, str: List[str]) -> List[str]:\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n    \n    Args:\n        n (int): Minimum length of words to filter\n        str (List[str]): List of words to check\n    \n    Returns:\n        List[str]: List of words longer than n characters\n    \"\"\"\n    return [word for word in str if len(word) > n]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):",
    "timestamp": "2025-08-15T08:57:03.954534",
    "response_time": "2.88",
    "context": "{\"function_name\": \"long_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 129,
    "solution": "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> str:\n    # Check if matrix is square\n    if not my_matrix or len(my_matrix) != len(my_matrix[0]):\n        return \"Not a magic square\"\n    \n    n = len(my_matrix)\n    \n    # Calculate expected magic sum (sum of first row)\n    magic_sum = sum(my_matrix[0])\n    \n    # Check row sums\n    for row in my_matrix:\n        if len(row) != n or sum(row) != magic_sum:\n            return \"Not a magic square\"\n    \n    # Check column sums\n    for col in range(n):\n        col_sum = sum(my_matrix[row][col] for row in range(n))\n        if col_sum != magic_sum:\n            return \"Not a magic square\"\n    \n    # Check main diagonal sum\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    if diag1_sum != magic_sum:\n        return \"Not a magic square\"\n    \n    # Check secondary diagonal sum\n    diag2_sum = sum(my_matrix[i][n-1-i] for i in range(n))\n    if diag2_sum != magic_sum:\n        return \"Not a magic square\"\n    \n    # Check if all numbers from 1 to n^2 are used exactly once\n    flat_matrix = [num for row in my_matrix for num in row]\n    if set(flat_matrix) != set(range(1, n*n + 1)):\n        return \"Not a magic square\"\n    \n    return \"Magic square\"",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):",
    "timestamp": "2025-08-15T08:57:09.736982",
    "response_time": "5.78",
    "context": "{\"function_name\": \"magic_square_test\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 130,
    "solution": "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    # If the list is empty, return None\n    if not nums:\n        return None\n    \n    # Use Counter to count frequencies of each number\n    freq_counter = Counter(nums)\n    \n    # Find the item with maximum frequency\n    # If multiple items have same max frequency, return the first one\n    max_freq_item = max(freq_counter, key=freq_counter.get)\n    \n    return max_freq_item",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):",
    "timestamp": "2025-08-15T08:57:13.103693",
    "response_time": "3.35",
    "context": "{\"function_name\": \"max_occurrences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 131,
    "solution": "from typing import List\n\ndef reverse_vowels(str1: str) -> str:\n    # Define vowels (lowercase and uppercase)\n    vowels: List[str] = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    # Convert string to list for easier manipulation\n    chars = list(str1)\n    \n    # Two-pointer approach to swap vowels\n    left, right = 0, len(chars) - 1\n    \n    while left < right:\n        # Find vowel from left\n        while left < right and chars[left] not in vowels:\n            left += 1\n        \n        # Find vowel from right\n        while left < right and chars[right] not in vowels:\n            right -= 1\n        \n        # Swap vowels\n        if left < right:\n            chars[left], chars[right] = chars[right], chars[left]\n            left += 1\n            right -= 1\n    \n    # Convert back to string and return\n    return ''.join(chars)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):",
    "timestamp": "2025-08-15T08:57:18.023437",
    "response_time": "4.92",
    "context": "{\"function_name\": \"reverse_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 132,
    "solution": "from typing import Tuple, Any\n\ndef tup_string(tup1: Tuple[Any, ...]) -> str:\n    \"\"\"\n    Convert a tuple to a string representation.\n    \n    Args:\n        tup1 (tuple): Input tuple to be converted to a string\n    \n    Returns:\n        str: String representation of the input tuple\n    \"\"\"\n    return str(tup1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):",
    "timestamp": "2025-08-15T08:57:21.036224",
    "response_time": "3.01",
    "context": "{\"function_name\": \"tup_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 133,
    "solution": "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in the given list.\n    \n    Args:\n        nums (List[int]): A list of integers\n    \n    Returns:\n        int: Sum of all negative numbers in the list\n    \"\"\"\n    return sum(num for num in nums if num < 0)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):",
    "timestamp": "2025-08-15T08:57:23.182145",
    "response_time": "2.14",
    "context": "{\"function_name\": \"sum_negativenum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 135,
    "solution": "from typing import Union\n\ndef hexagonal_num(n: int) -> int:\n    \"\"\"\n    Calculate the nth hexagonal number.\n    \n    A hexagonal number is a figurate number that extends the concept of triangular and square numbers to the hexagonal grid.\n    The nth hexagonal number is calculated by the formula: n * (2n - 1)\n    \n    Args:\n        n (int): The position of the hexagonal number to calculate (1-based index)\n    \n    Returns:\n        int: The nth hexagonal number\n    \"\"\"\n    return n * (2 * n - 1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):",
    "timestamp": "2025-08-15T08:57:26.758886",
    "response_time": "3.57",
    "context": "{\"function_name\": \"hexagonal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 137,
    "solution": "from typing import List\n\ndef zero_count(nums: List[int]) -> str:\n    # Check if the list is empty to avoid division by zero\n    if not nums:\n        return \"0/0\"\n    \n    # Count zeroes and non-zeroes\n    zero_count = sum(1 for num in nums if num == 0)\n    non_zero_count = len(nums) - zero_count\n    \n    # Return the ratio as a string in the format \"zeroes/non_zeroes\"\n    return f\"{zero_count}/{non_zero_count}\"",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):",
    "timestamp": "2025-08-15T08:57:29.865940",
    "response_time": "3.10",
    "context": "{\"function_name\": \"zero_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 138,
    "solution": "from typing import Union\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2.\n    \n    Args:\n        n (int): The number to check\n    \n    Returns:\n        bool: True if the number can be represented as sum of non-zero powers of 2, False otherwise\n    \"\"\"\n    # If n is 0, return False as we need non-zero powers\n    if n <= 0:\n        return False\n    \n    # Use bitwise operations to check if number can be represented as sum of powers of 2\n    # If a number can be represented as sum of powers of 2, its binary representation \n    # will have only 1s (no consecutive 1s)\n    return bin(n).count('1') == n.bit_count()",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):",
    "timestamp": "2025-08-15T08:57:34.050683",
    "response_time": "4.18",
    "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 139,
    "solution": "from typing import Union\n\ndef circle_circumference(r: Union[int, float]) -> float:\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n    \n    Args:\n        r (int or float): Radius of the circle\n    \n    Returns:\n        float: Circumference of the circle (2 * pi * radius)\n    \"\"\"\n    return 2 * 3.14159 * r",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):",
    "timestamp": "2025-08-15T08:57:36.568953",
    "response_time": "2.51",
    "context": "{\"function_name\": \"circle_circumference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 140,
    "solution": "from typing import List, Union\n\ndef extract_singly(test_list: List[Union[List[int], int]]) -> set:\n    \"\"\"\n    Flatten a list of lists or mixed list into a single set of unique numbers.\n    \n    Args:\n        test_list (List[Union[List[int], int]]): Input list that may contain nested lists or integers\n    \n    Returns:\n        set: A set of unique numbers extracted from the input list\n    \"\"\"\n    # Use a set comprehension to flatten the list and remove duplicates\n    return {\n        num for sublist in test_list \n        for num in (sublist if isinstance(sublist, list) else [sublist])\n    }",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):",
    "timestamp": "2025-08-15T08:57:40.657382",
    "response_time": "4.08",
    "context": "{\"function_name\": \"extract_singly\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 141,
    "solution": "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n    Perform pancake sort on the input list.\n    \n    Args:\n        nums (List[int]): The input list to be sorted\n    \n    Returns:\n        List[int]: The sorted list in ascending order\n    \"\"\"\n    def flip(arr: List[int], k: int) -> None:\n        \"\"\"\n        Reverse the first k elements of the list in-place\n        \n        Args:\n            arr (List[int]): The list to be partially reversed\n            k (int): Number of elements to reverse from the start\n        \"\"\"\n        left = 0\n        right = k\n        while left < right:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n    \n    # Create a copy to avoid modifying the original list\n    arr = nums.copy()\n    \n    # Iterate through the list from end to start\n    for size in range(len(arr), 1, -1):\n        # Find the index of the maximum element in the unsorted portion\n        max_idx = arr.index(max(arr[:size]))\n        \n        # If max element is not at the end, flip it to the start\n        if max_idx != size - 1:\n            # If max element is not at the start, flip to bring it to start\n            if max_idx != 0:\n                flip(arr, max_idx)\n            \n            # Flip to move max element to its correct position\n            flip(arr, size - 1)\n    \n    return arr",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):",
    "timestamp": "2025-08-15T08:57:46.997122",
    "response_time": "6.34",
    "context": "{\"function_name\": \"pancake_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 142,
    "solution": "from typing import List\n\ndef count_samepair(list1: List, list2: List, list3: List) -> int:\n    # Find the minimum length among the three lists to avoid index out of range\n    min_length = min(len(list1), len(list2), len(list3))\n    \n    # Count items that are identical in the same position\n    count = sum(1 for i in range(min_length) \n                if list1[i] == list2[i] == list3[i])\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):",
    "timestamp": "2025-08-15T08:57:49.691070",
    "response_time": "2.69",
    "context": "{\"function_name\": \"count_samepair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 143,
    "solution": "from typing import Tuple, Any\n\ndef find_lists(Input: Tuple[Any, ...]) -> int:\n    \"\"\"\n    Find the number of lists present in the given tuple.\n    \n    Args:\n        Input (tuple): A tuple that may contain lists\n    \n    Returns:\n        int: Number of lists in the input tuple\n    \"\"\"\n    # Count the number of lists in the input tuple\n    return sum(1 for item in Input if isinstance(item, list))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):",
    "timestamp": "2025-08-15T08:57:52.735541",
    "response_time": "3.04",
    "context": "{\"function_name\": \"find_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 145,
    "solution": "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum absolute difference between any two elements in the given array.\n    \n    Args:\n        arr (List[int]): Input array of integers\n    \n    Returns:\n        int: Maximum absolute difference between any two elements\n    \"\"\"\n    # If array is empty or has only one element, return 0\n    if len(arr) < 2:\n        return 0\n    \n    # Find the minimum and maximum elements in the array\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Return the absolute difference between max and min\n    return abs(max_val - min_val)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):",
    "timestamp": "2025-08-15T08:57:55.927122",
    "response_time": "3.19",
    "context": "{\"function_name\": \"max_Abs_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 160,
    "solution": "from typing import Optional, Tuple\nfrom math import gcd\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    # Check if a solution is possible using Bezout's identity\n    # A solution exists only if n is divisible by the GCD of a and b\n    g = gcd(abs(a), abs(b))\n    \n    # If n is not divisible by the GCD, no solution exists\n    if n % g != 0:\n        return None\n    \n    # Reduce the problem by dividing a, b, and n by their GCD\n    a //= g\n    b //= g\n    n //= g\n    \n    # Use extended Euclidean algorithm to find a particular solution\n    def extended_gcd(a: int, b: int) -> Tuple[int, int, int]:\n        if a == 0:\n            return b, 0, 1\n        \n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        \n        return gcd, x, y\n    \n    # Find initial solution\n    _, x0, y0 = extended_gcd(abs(a), abs(b))\n    \n    # Scale the solution to match n\n    x = x0 * n\n    y = y0 * n\n    \n    # Adjust signs based on original a and b\n    if a < 0:\n        x = -x\n    if b < 0:\n        y = -y\n    \n    return (x, y)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):",
    "timestamp": "2025-08-15T08:58:02.827780",
    "response_time": "6.90",
    "context": "{\"function_name\": \"find_solution\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 161,
    "solution": "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Remove all elements from list1 that are present in list2.\n    \n    Args:\n        list1 (List[int]): The original list to remove elements from\n        list2 (List[int]): The list containing elements to be removed\n    \n    Returns:\n        List[int]: A new list with elements from list1 that are not in list2\n    \"\"\"\n    # Convert list2 to a set for efficient lookup\n    set2 = set(list2)\n    \n    # Use list comprehension to create a new list with elements not in set2\n    return [item for item in list1 if item not in set2]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):",
    "timestamp": "2025-08-15T08:58:06.400019",
    "response_time": "3.57",
    "context": "{\"function_name\": \"remove_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 162,
    "solution": "from typing import Union\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of series (n - 2*i) from i=0 to n // 2\n    \n    Args:\n        n (int): The starting number for the series\n    \n    Returns:\n        int: The sum of the series\n    \"\"\"\n    # If n is less than 0, return 0\n    if n <= 0:\n        return 0\n    \n    # Initialize sum\n    total = 0\n    \n    # Iterate from 0 to n // 2\n    for i in range(n // 2 + 1):\n        # Calculate current term: n - 2*i\n        current_term = n - 2 * i\n        \n        # Stop if current term becomes non-positive\n        if current_term <= 0:\n            break\n        \n        # Add current term to total\n        total += current_term\n    \n    return total",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):",
    "timestamp": "2025-08-15T08:58:10.700496",
    "response_time": "4.30",
    "context": "{\"function_name\": \"sum_series\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 163,
    "solution": "from math import tan, pi\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon\n    \n    Args:\n    s (int): Number of sides in the polygon\n    l (float): Length of each side\n    \n    Returns:\n    float: Area of the polygon\n    \"\"\"\n    # Formula for area of a regular polygon: \n    # A = (s * l^2) / (4 * tan(\u03c0/s))\n    area = (s * l * l) / (4 * tan(pi / s))\n    return str(round(area, 2))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):",
    "timestamp": "2025-08-15T08:58:13.383049",
    "response_time": "2.68",
    "context": "{\"function_name\": \"area_polygon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 164,
    "solution": "from typing import List\n\ndef are_equivalent(n: int) -> List[int]:\n    \"\"\"\n    Calculate the sum of divisors for a given integer.\n    \n    Args:\n        n (int): The input integer\n    \n    Returns:\n        int: Sum of all divisors of the input number\n    \"\"\"\n    # Handle edge case for 0 or negative numbers\n    if n <= 0:\n        return 0\n    \n    # Find and sum all divisors\n    divisor_sum = sum(i for i in range(1, n + 1) if n % i == 0)\n    \n    return divisor_sum\n\ndef are_divisor_sums_equal(num1: int, num2: int) -> bool:\n    \"\"\"\n    Determine if the sum of divisors for two integers are the same.\n    \n    Args:\n        num1 (int): First integer\n        num2 (int): Second integer\n    \n    Returns:\n        bool: True if sum of divisors are equal, False otherwise\n    \"\"\"\n    return div_sum(num1) == div_sum(num2)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):",
    "timestamp": "2025-08-15T08:58:18.678222",
    "response_time": "5.29",
    "context": "{\"function_name\": \"are_equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 165,
    "solution": "from typing import List\n\ndef count_char_position(str1: str) -> int:\n    # Convert input string to lowercase for case-insensitive comparison\n    str1 = str1.lower()\n    \n    # Define the lowercase English alphabet\n    alphabet: List[str] = list('abcdefghijklmnopqrstuvwxyz')\n    \n    # Counter for characters in correct position\n    count: int = 0\n    \n    # Iterate through the string, checking each character's position\n    for i in range(min(len(str1), 26)):\n        # Check if character at index i matches the alphabet character at the same index\n        if str1[i] == alphabet[i]:\n            count += 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):",
    "timestamp": "2025-08-15T08:58:22.168903",
    "response_time": "3.48",
    "context": "{\"function_name\": \"count_char_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 166,
    "solution": "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    \"\"\"\n    Count the number of pairs of integers in the list that xor to an even number.\n    \n    Args:\n        A (List[int]): Input list of integers\n    \n    Returns:\n        int: Number of pairs that xor to an even number\n    \"\"\"\n    # Initialize pair count\n    pair_count = 0\n    \n    # Check all possible pairs \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            # XOR the pair and check if result is even\n            if (A[i] ^ A[j]) % 2 == 0:\n                pair_count += 1\n    \n    return pair_count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):",
    "timestamp": "2025-08-15T08:58:26.562464",
    "response_time": "4.39",
    "context": "{\"function_name\": \"find_even_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 167,
    "solution": "from typing import Union\n\ndef next_power_of_2(n: Union[int, float]) -> int:\n    # Handle edge cases\n    if n <= 0:\n        return 1\n    \n    # If n is already a power of 2, return n\n    if (n & (n - 1)) == 0:\n        return n\n    \n    # Find the next power of 2\n    power = 1\n    while power < n:\n        power *= 2\n    \n    return power",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):",
    "timestamp": "2025-08-15T08:58:30.018197",
    "response_time": "3.45",
    "context": "{\"function_name\": \"next_power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 168,
    "solution": "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    \"\"\"\n    Count the number of occurrences of a number x in the given list a.\n    \n    Args:\n        a (List[int]): The input list of integers\n        x (int): The number to count occurrences of\n    \n    Returns:\n        int: The number of times x appears in the list\n    \"\"\"\n    return a.count(x)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):",
    "timestamp": "2025-08-15T08:58:32.352033",
    "response_time": "2.33",
    "context": "{\"function_name\": \"frequency\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 170,
    "solution": "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    \"\"\"\n    Calculate the sum of numbers in a list within the specified range of indices.\n    \n    Args:\n    list1 (List[int]): Input list of integers\n    m (int): Starting index (inclusive)\n    n (int): Ending index (inclusive)\n    \n    Returns:\n    int: Sum of numbers within the specified index range\n    \"\"\"\n    # Validate input indices\n    if m < 0 or n >= len(list1) or m > n:\n        return 0\n    \n    # Calculate sum of numbers within the specified range\n    return sum(list1[m:n+1])",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):",
    "timestamp": "2025-08-15T08:58:36.011456",
    "response_time": "3.66",
    "context": "{\"function_name\": \"sum_range_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 171,
    "solution": "from typing import Union\n\ndef perimeter_pentagon(a: Union[int, float]) -> float:\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of one side.\n    \n    Args:\n        a (int or float): Length of one side of the regular pentagon\n    \n    Returns:\n        float: Total perimeter of the pentagon\n    \"\"\"\n    return 5 * a",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):",
    "timestamp": "2025-08-15T08:58:38.919315",
    "response_time": "2.90",
    "context": "{\"function_name\": \"perimeter_pentagon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 172,
    "solution": "from typing import Optional\n\ndef count_occurance(s: str) -> int:\n    \"\"\"\n    Count the number of occurrences of the substring 'std' in the given string.\n    \n    Args:\n        s (str): Input string to search for 'std' occurrences\n    \n    Returns:\n        int: Number of times 'std' appears in the string\n    \"\"\"\n    # Use string method count() to find number of 'std' occurrences \n    return s.count('std')",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):",
    "timestamp": "2025-08-15T08:58:42.447480",
    "response_time": "3.52",
    "context": "{\"function_name\": \"count_occurance\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 222,
    "solution": "from typing import Tuple, Any\n\ndef check_type(test_tuple: Tuple[Any, ...]) -> bool:\n    \"\"\"\n    Check if all elements in the given tuple have the same data type.\n    \n    Args:\n        test_tuple (tuple): Input tuple to check for type consistency\n    \n    Returns:\n        bool: True if all elements have the same type, False otherwise\n    \"\"\"\n    # If tuple is empty or has only one element, return True\n    if len(test_tuple) <= 1:\n        return True\n    \n    # Get the type of the first element\n    first_type = type(test_tuple[0])\n    \n    # Check if all other elements match the first element's type\n    return all(isinstance(item, first_type) for item in test_tuple[1:])",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):",
    "timestamp": "2025-08-15T08:58:45.669523",
    "response_time": "3.22",
    "context": "{\"function_name\": \"check_type\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 223,
    "solution": "from typing import List\n\ndef binary_search(arr: List[int], n: int, x: int) -> bool:\n    # Find the first occurrence of x using binary search\n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            # Check if this is the first occurrence of x\n            if (mid == 0 or arr[mid-1] < x):\n                # Count occurrences from this point\n                count = 0\n                while mid < n and arr[mid] == x:\n                    count += 1\n                    mid += 1\n                \n                # Check if count is more than n/2\n                return count > n // 2\n            \n            # If not first occurrence, search left\n            right = mid - 1\n        \n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # x not found in array\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):",
    "timestamp": "2025-08-15T08:58:50.242967",
    "response_time": "4.57",
    "context": "{\"function_name\": \"binary_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 224,
    "solution": "from typing import Union\n\ndef count_Set_Bits(n: Union[int, float]) -> int:\n    \"\"\"\n    Count the number of set bits (1's) in the binary representation of a given number.\n    \n    Args:\n        n (int or float): The number to count set bits for\n    \n    Returns:\n        int: Number of set bits in the binary representation of the input number\n    \"\"\"\n    # Convert to integer if float is provided\n    n = int(n)\n    \n    # Initialize bit count\n    bit_count = 0\n    \n    # Iterate through bits while number is non-zero\n    while n:\n        # Check least significant bit and increment count if it's 1\n        bit_count += n & 1\n        \n        # Right shift the number by 1 bit\n        n >>= 1\n    \n    return bit_count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):",
    "timestamp": "2025-08-15T08:58:55.021195",
    "response_time": "4.77",
    "context": "{\"function_name\": \"count_Set_Bits\"}"
  }
]