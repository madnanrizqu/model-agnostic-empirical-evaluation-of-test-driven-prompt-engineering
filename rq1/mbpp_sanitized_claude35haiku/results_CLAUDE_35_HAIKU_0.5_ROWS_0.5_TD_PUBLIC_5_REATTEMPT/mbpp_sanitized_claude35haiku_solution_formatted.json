[
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 2,
    "solution": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Find the shared elements between two lists.\n    \n    Args:\n        test_tup1 (list): First input list\n        test_tup2 (list): Second input list\n    \n    Returns:\n        list: A list of elements common to both input lists\n    \"\"\"\n    # Use set intersection to find common elements\n    return list(set(test_tup1) & set(test_tup2))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:48:01.693764",
    "response_time": "3.73",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 3,
    "solution": "def is_not_prime(n):\n    # Check for numbers less than 2 (not prime)\n    if n < 2:\n        return True\n    \n    # Check for divisibility from 2 to square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    \n    # If no divisors found, it's a prime number\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
    "timestamp": "2025-10-17T18:48:04.253337",
    "response_time": "2.56",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 4,
    "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    # If n is larger than the list length, return the entire sorted list in descending order\n    if n >= len(nums):\n        return sorted(nums, reverse=True)\n    \n    # Use heapq to find the n largest elements\n    # heapq by default creates a min heap, so we'll use negative values to simulate max heap\n    largest = heapq.nlargest(n, nums)\n    \n    # Return the largest elements in descending order\n    return largest",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
    "timestamp": "2025-10-17T18:48:07.502013",
    "response_time": "3.25",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 6,
    "solution": "def differ_At_One_Bit_Pos(x):\n    # XOR the two numbers to get the bit differences\n    xor_result = x\n    \n    # Count the number of set bits in the XOR result\n    # If exactly one bit is set, it means they differ at only one bit position\n    bit_count = 0\n    while xor_result:\n        bit_count += xor_result & 1\n        xor_result >>= 1\n    \n    # Return True if exactly one bit is set, False otherwise\n    return bit_count == 1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
    "timestamp": "2025-10-17T18:48:13.270464",
    "response_time": "5.77",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 7,
    "solution": "import re\n\ndef find_char_long(text):\n    # Use regex to find all words that are at least 4 characters long\n    return re.findall(r'\\b\\w{4,}\\b', text)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
    "timestamp": "2025-10-17T18:48:15.401885",
    "response_time": "2.13",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 8,
    "solution": "def square_nums(nums):\n    \"\"\"\n    Returns a list of squares of individual elements in the input list.\n    \n    Args:\n        nums (list): A list of numbers\n    \n    Returns:\n        list: A list containing the squares of each number in the input list\n    \"\"\"\n    return [num ** 2 for num in nums]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
    "timestamp": "2025-10-17T18:48:17.598310",
    "response_time": "2.19",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 9,
    "solution": "def find_Rotations(str):\n    # If string is empty or has only one character, no rotations possible\n    if len(str) <= 1:\n        return -1\n    \n    # Concatenate the string with itself\n    double_str = str + str\n    \n    # Check for minimum rotations\n    for i in range(1, len(str)):\n        # Check if substring of length str length exists in double_str\n        if double_str[i:i+len(str)] == str:\n            return i\n    \n    # If no rotation makes the string same\n    return -1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
    "timestamp": "2025-10-17T18:48:24.271797",
    "response_time": "6.67",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 11,
    "solution": "def remove_Occ(s, ch):\n    # Find the first occurrence of the character\n    first_index = s.find(ch)\n    \n    # Find the last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    # If the character is not found, return the original string\n    if first_index == -1:\n        return s\n    \n    # If first and last index are the same, remove that single occurrence\n    if first_index == last_index:\n        return s[:first_index] + s[first_index+1:]\n    \n    # Remove first and last occurrence\n    return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
    "timestamp": "2025-10-17T18:48:28.038800",
    "response_time": "3.77",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 12,
    "solution": "def sort_matrix(M):\n    \"\"\"\n    Sort a matrix in ascending order based on the sum of each row.\n    \n    Args:\n        M (list of lists): Input matrix to be sorted\n    \n    Returns:\n        list of lists: Matrix sorted by row sums in ascending order\n    \"\"\"\n    # Sort the matrix based on the sum of each row\n    return sorted(M, key=lambda row: sum(row))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
    "timestamp": "2025-10-17T18:48:30.582399",
    "response_time": "2.54",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 14,
    "solution": "def find_Volume(l,b,h):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n    l (float): Length of the base triangle's base\n    b (float): Width/breadth of the base triangle\n    h (float): Height of the prism\n    \n    Returns:\n    float: Volume of the triangular prism\n    \"\"\"\n    # Calculate the area of the triangular base\n    base_area = 0.5 * l * b\n    \n    # Calculate the volume by multiplying base area with height\n    volume = base_area * h\n    \n    return volume",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
    "timestamp": "2025-10-17T18:48:33.957045",
    "response_time": "3.37",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 16,
    "solution": "import re\n\ndef text_lowercase_underscore(text):\n    # Regular expression pattern to match lowercase letters joined by underscores\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    \n    # Check if the entire string matches the pattern\n    return bool(re.match(pattern, text))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
    "timestamp": "2025-10-17T18:48:38.510765",
    "response_time": "4.55",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 17,
    "solution": "def square_perimeter(a):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n    \n    Args:\n        a (float or int): Length of one side of the square\n    \n    Returns:\n        float or int: Perimeter of the square (4 * side length)\n    \"\"\"\n    return 4 * a",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
    "timestamp": "2025-10-17T18:48:40.472273",
    "response_time": "1.96",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 18,
    "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Remove characters from the first string that are present in the second string.\n    \n    Args:\n        string1 (str): The original string to remove characters from\n        string2 (str): The string containing characters to be removed\n    \n    Returns:\n        str: A new string with characters from string2 removed from string1\n    \"\"\"\n    # Convert the result to a list of characters that are not in string2\n    result = ''.join(char for char in string1 if char not in string2)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
    "timestamp": "2025-10-17T18:48:43.816785",
    "response_time": "3.34",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 19,
    "solution": "def test_duplicate(arraynums):\n    # Create a set to track unique elements\n    seen = set()\n    \n    # Iterate through each number in the array\n    for num in arraynums:\n        # If the number is already in the set, it's a duplicate\n        if num in seen:\n            return True\n        \n        # Add the number to the set\n        seen.add(num)\n    \n    # No duplicates found\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
    "timestamp": "2025-10-17T18:48:47.730353",
    "response_time": "3.91",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 20,
    "solution": "def is_woodall(x):\n    \"\"\"\n    Check if a given number is a Woodall number.\n    \n    A Woodall number is a number of the form n * 2^n - 1, where n is a positive integer.\n    \n    Args:\n        x (int): The number to check\n    \n    Returns:\n        bool: True if x is a Woodall number, False otherwise\n    \"\"\"\n    # Check if x is less than 1 (invalid input)\n    if x < 1:\n        return False\n    \n    # Check Woodall number formula: n * 2^n - 1\n    n = 1\n    while True:\n        woodall_num = n * (2 ** n) - 1\n        \n        # If we found the Woodall number\n        if woodall_num == x:\n            return True\n        \n        # If we've exceeded the input number, it's not a Woodall number\n        if woodall_num > x:\n            return False\n        \n        n += 1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
    "timestamp": "2025-10-17T18:48:52.650005",
    "response_time": "4.92",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 56,
    "solution": "def check(num):\n    # Convert number to string to easily reverse it\n    num_str = str(num)\n    \n    # Reverse the string and convert back to integer\n    reversed_num = int(num_str[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    return num == (2 * reversed_num) - 1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
    "timestamp": "2025-10-17T18:48:55.455424",
    "response_time": "2.80",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 57,
    "solution": "def find_Max_Num(arr):\n    # Convert all digits to strings for sorting\n    str_arr = [str(num) for num in arr]\n    \n    # Custom sorting to arrange digits to form largest number\n    # Sort in descending order based on concatenated string comparison\n    str_arr.sort(key=lambda x: x*len(max(str_arr, key=len)), reverse=True)\n    \n    # Join the sorted digits and convert back to integer\n    return int(''.join(str_arr))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
    "timestamp": "2025-10-17T18:48:58.917394",
    "response_time": "3.46",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 58,
    "solution": "def opposite_Signs(x, y):\n    \"\"\"\n    Check whether two given integers have opposite signs.\n    \n    Args:\n        x (int): First integer\n        y (int): Second integer\n    \n    Returns:\n        bool: True if x and y have opposite signs, False otherwise\n    \"\"\"\n    # XOR the sign bits to determine if signs are opposite\n    return (x < 0) != (y < 0)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
    "timestamp": "2025-10-17T18:49:01.279580",
    "response_time": "2.36",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 59,
    "solution": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    An octagonal number is a figurate number that extends the concept of triangular and square numbers to the octagon.\n    The formula for the nth octagonal number is: n * (3n - 2)\n    \n    Args:\n        n (int): The position of the octagonal number to calculate\n    \n    Returns:\n        int: The nth octagonal number\n    \"\"\"\n    return n * (3 * n - 2)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
    "timestamp": "2025-10-17T18:49:07.017131",
    "response_time": "5.74",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 61,
    "solution": "def count_Substrings(s):\n    \"\"\"\n    Count the number of substrings where the sum of digits equals the substring's length.\n    \n    Args:\n        s (str): Input string containing digits\n    \n    Returns:\n        int: Number of valid substrings\n    \"\"\"\n    count = 0\n    n = len(s)\n    \n    # Iterate through all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            \n            # Calculate sum of digits in substring\n            digit_sum = sum(int(digit) for digit in substring)\n            \n            # Check if sum of digits equals substring length\n            if digit_sum == len(substring):\n                count += 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
    "timestamp": "2025-10-17T18:49:10.850715",
    "response_time": "3.83",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 62,
    "solution": "def smallest_num(xs):\n    \"\"\"\n    Find and return the smallest number in a given list.\n    \n    Args:\n        xs (list): A list of numbers\n    \n    Returns:\n        The smallest number in the list. \n        Returns None if the list is empty.\n    \"\"\"\n    if not xs:\n        return None\n    \n    smallest = xs[0]\n    for num in xs[1:]:\n        if num < smallest:\n            smallest = num\n    \n    return smallest",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
    "timestamp": "2025-10-17T18:49:13.206396",
    "response_time": "2.35",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 63,
    "solution": "def max_difference(test_list):\n    # If the list is empty or has less than 2 elements, return 0\n    if len(test_list) < 2:\n        return 0\n    \n    # Initialize max difference to the smallest possible value\n    max_diff = float('-inf')\n    \n    # Compare each pair of elements in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the absolute difference between current pair\n            current_diff = abs(test_list[i] - test_list[j])\n            \n            # Update max difference if current difference is larger\n            max_diff = max(max_diff, current_diff)\n    \n    return max_diff",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
    "timestamp": "2025-10-17T18:49:16.612225",
    "response_time": "3.40",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 64,
    "solution": "def subject_marks(subjectmarks):\n    \"\"\"\n    Sort a list of tuples based on the second value (marks) of each tuple.\n    \n    Args:\n        subjectmarks (list): A list of tuples where each tuple contains \n                              (subject, marks)\n    \n    Returns:\n        list: A new list of tuples sorted by marks in ascending order\n    \"\"\"\n    return sorted(subjectmarks, key=lambda x: x[1])",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
    "timestamp": "2025-10-17T18:49:19.408894",
    "response_time": "2.79",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 65,
    "solution": "def recursive_list_sum(data_list):\n    \"\"\"\n    Recursively flatten a nested list and sum all of its elements.\n    \n    Args:\n        data_list (list): A potentially nested list of numbers\n    \n    Returns:\n        int/float: Sum of all numeric elements in the flattened list\n    \"\"\"\n    total = 0\n    \n    for item in data_list:\n        if isinstance(item, list):\n            # If item is a list, recursively sum its elements\n            total += recursive_list_sum(item)\n        elif isinstance(item, (int, float)):\n            # If item is a number, add it to the total\n            total += item\n    \n    return total",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
    "timestamp": "2025-10-17T18:49:22.489033",
    "response_time": "3.08",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 66,
    "solution": "def pos_count(list):\n    \"\"\"\n    Count the number of positive numbers in the given list.\n    \n    Args:\n        list (list): A list of numbers\n    \n    Returns:\n        int: Number of positive numbers in the list\n    \"\"\"\n    return sum(1 for num in list if num > 0)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
    "timestamp": "2025-10-17T18:49:24.769479",
    "response_time": "2.28",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 67,
    "solution": "def bell_number(n):\n    \"\"\"\n    Calculate the Bell number for a given set size n.\n    Bell number represents the number of ways to partition a set of n elements.\n    \n    Args:\n        n (int): Size of the set\n    \n    Returns:\n        int: Number of ways to partition the set\n    \"\"\"\n    # Create a 2D array to store Bell triangle values\n    bell_triangle = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # First value is always 1\n    bell_triangle[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # First value of each row is the last value of previous row\n        bell_triangle[i][0] = bell_triangle[i-1][i-1]\n        \n        # Calculate other values in the row\n        for j in range(1, i+1):\n            bell_triangle[i][j] = bell_triangle[i-1][j-1] + bell_triangle[i][j-1]\n    \n    # The Bell number is the last value of the first column\n    return bell_triangle[n][0]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
    "timestamp": "2025-10-17T18:49:33.693835",
    "response_time": "8.92",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 68,
    "solution": "def is_Monotonic(A):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n    \n    A monotonic array is an array that is either monotonically increasing or monotonically decreasing.\n    \n    Args:\n    A (list): Input list of numbers\n    \n    Returns:\n    bool: True if the array is monotonic, False otherwise\n    \"\"\"\n    # If array has 0 or 1 element, it is always monotonic\n    if len(A) <= 1:\n        return True\n    \n    # Check if array is monotonically increasing\n    increasing = all(A[i] <= A[i+1] for i in range(len(A)-1))\n    \n    # Check if array is monotonically decreasing\n    decreasing = all(A[i] >= A[i+1] for i in range(len(A)-1))\n    \n    # Return True if array is either increasing or decreasing\n    return increasing or decreasing",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
    "timestamp": "2025-10-17T18:49:38.716996",
    "response_time": "5.02",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 69,
    "solution": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist.\n    \n    Args:\n    l (list): The main list to search in\n    s (list): The sublist to search for\n    \n    Returns:\n    bool: True if the sublist is found in the main list, False otherwise\n    \"\"\"\n    # If sublist is empty, return True\n    if not s:\n        return True\n    \n    # If sublist is longer than main list, return False\n    if len(s) > len(l):\n        return False\n    \n    # Iterate through the main list\n    for i in range(len(l) - len(s) + 1):\n        # Check if the current slice matches the sublist\n        if l[i:i+len(s)] == s:\n            return True\n    \n    # If no match found, return False\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
    "timestamp": "2025-10-17T18:49:42.509605",
    "response_time": "3.79",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 70,
    "solution": "def get_equal(Input):\n    # Check if Input is empty or contains only one tuple\n    if len(Input) <= 1:\n        return True\n    \n    # Get the length of the first tuple\n    first_length = len(Input[0])\n    \n    # Compare the length of each subsequent tuple with the first tuple's length\n    for tuple_item in Input[1:]:\n        if len(tuple_item) != first_length:\n            return False\n    \n    # If all tuples have the same length, return True\n    return True",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
    "timestamp": "2025-10-17T18:49:45.346082",
    "response_time": "2.83",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 71,
    "solution": "def comb_sort(nums):\n    \"\"\"\n    Implement comb sort algorithm to sort a list of elements in ascending order.\n    \n    Args:\n        nums (list): List of comparable elements to be sorted\n    \n    Returns:\n        list: Sorted list in ascending order\n    \"\"\"\n    # If list is empty or has only one element, return it as is\n    if len(nums) <= 1:\n        return nums\n    \n    # Initialize gap as length of list\n    gap = len(nums)\n    \n    # Set shrink factor\n    shrink = 1.3\n    \n    # Flag to track if any swaps occurred\n    swapped = True\n    \n    while gap > 1 or swapped:\n        # Reduce gap\n        gap = max(1, int(gap / shrink))\n        \n        # Reset swap flag\n        swapped = False\n        \n        # Compare elements with current gap\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                # Swap elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    \n    return nums",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
    "timestamp": "2025-10-17T18:49:50.792954",
    "response_time": "5.44",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 72,
    "solution": "def dif_Square(n):\n    # Check for all possible combinations of squares that can form the difference\n    for i in range(int(n**0.5) + 1):\n        for j in range(i + 1, int(n**0.5) + 2):\n            # Check if the difference of squares equals the given number\n            if j*j - i*i == n:\n                return True\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
    "timestamp": "2025-10-17T18:49:57.384488",
    "response_time": "6.59",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 74,
    "solution": "def is_samepatterns(colors, patterns):\n    # If lengths are different, patterns can't match\n    if len(colors) != len(patterns):\n        return False\n    \n    # Create mappings to track color to pattern and pattern to color\n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    # Iterate through colors and patterns simultaneously \n    for color, pattern in zip(colors, patterns):\n        # Check if color already mapped to a pattern\n        if color in color_to_pattern:\n            # If mapped pattern doesn't match current pattern, return False\n            if color_to_pattern[color] != pattern:\n                return False\n        # Check if pattern already mapped to a color\n        elif pattern in pattern_to_color:\n            # If mapped color doesn't match current color, return False\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            # Create new mappings\n            color_to_pattern[color] = pattern\n            pattern_to_color[pattern] = color\n    \n    # If all checks pass, patterns match\n    return True",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
    "timestamp": "2025-10-17T18:50:02.066494",
    "response_time": "4.68",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 75,
    "solution": "def find_tuples(test_list, K):\n    \"\"\"\n    Find tuples where all elements are divisible by K.\n    \n    Args:\n        test_list (list): List of tuples to check\n        K (int): Divisor to check against\n    \n    Returns:\n        list: List of tuples where all elements are divisible by K\n    \"\"\"\n    # Use list comprehension to filter tuples \n    # where all elements are divisible by K\n    return [tup for tup in test_list if all(x % K == 0 for x in tup)]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
    "timestamp": "2025-10-17T18:50:05.517877",
    "response_time": "3.45",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 77,
    "solution": "def is_Diff(n):\n    \"\"\"\n    Check if a given number is divisible by 11.\n    \n    Args:\n        n (int): The number to check for divisibility by 11\n    \n    Returns:\n        bool: True if the number is divisible by 11, False otherwise\n    \"\"\"\n    return n % 11 == 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
    "timestamp": "2025-10-17T18:50:09.282389",
    "response_time": "3.76",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 79,
    "solution": "def word_len(s):\n    \"\"\"\n    Check whether the length of the given word is odd or not.\n    \n    Args:\n        s (str): The input word to check\n    \n    Returns:\n        bool: True if the length of the word is odd, False otherwise\n    \"\"\"\n    return len(s) % 2 != 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
    "timestamp": "2025-10-17T18:50:14.410970",
    "response_time": "5.13",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 80,
    "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    A tetrahedral number is the sum of the first n triangular numbers.\n    It represents the number of objects needed to form a tetrahedral pyramid.\n    \n    Args:\n        n (int): The position of the tetrahedral number to calculate\n    \n    Returns:\n        int: The nth tetrahedral number\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
    "timestamp": "2025-10-17T18:50:17.169474",
    "response_time": "2.76",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 82,
    "solution": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n    \n    Args:\n        r (float): Radius of the sphere\n    \n    Returns:\n        float: Volume of the sphere\n    \"\"\"\n    return (4/3) * math.pi * (r ** 3)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
    "timestamp": "2025-10-17T18:50:19.043548",
    "response_time": "1.87",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 83,
    "solution": "def get_Char(strr):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in strr)\n    \n    # Take modulo 26 to get a value between 0-25\n    result_index = ascii_sum % 26\n    \n    # Convert the index to corresponding uppercase letter\n    return chr(result_index + 65)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
    "timestamp": "2025-10-17T18:50:21.871067",
    "response_time": "2.82",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 84,
    "solution": "def sequence(n):\n    # Handle base cases\n    if n <= 0:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    \n    # Initialize the sequence list with first two elements\n    seq = [0, 1, 1]\n    \n    # Generate subsequent numbers in the sequence\n    for i in range(3, n + 1):\n        # Newman-Conway sequence rule: \n        # P(n) = P(P(n-1)) + P(n-2)\n        next_num = seq[seq[i-1]] + seq[i-2]\n        seq.append(next_num)\n    \n    # Return the nth number in the sequence\n    return seq[n]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
    "timestamp": "2025-10-17T18:50:25.293586",
    "response_time": "3.42",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 85,
    "solution": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n    \n    Args:\n        r (float): Radius of the sphere\n    \n    Returns:\n        float: Surface area of the sphere\n    \"\"\"\n    return 4 * math.pi * r**2",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
    "timestamp": "2025-10-17T18:50:27.456582",
    "response_time": "2.16",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 86,
    "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n    \n    A centered hexagonal number is a figurate number that represents a hexagon \n    with a dot in the center and all other dots surrounding the center in a hexagonal pattern.\n    \n    The formula for the nth centered hexagonal number is: 1 + 6 * (n * (n - 1) / 2)\n    \n    Args:\n        n (int): The position of the centered hexagonal number (n >= 1)\n    \n    Returns:\n        int: The nth centered hexagonal number\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 1 + 6 * (n * (n - 1) // 2)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
    "timestamp": "2025-10-17T18:50:31.984957",
    "response_time": "4.53",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 87,
    "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \n    Args:\n        dict1 (dict): First dictionary to merge\n        dict2 (dict): Second dictionary to merge\n        dict3 (dict): Third dictionary to merge\n    \n    Returns:\n        dict: A new dictionary containing all key-value pairs from the input dictionaries\n    \"\"\"\n    # Create a new dictionary and update it with key-value pairs from each input dictionary\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    \n    return merged_dict",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
    "timestamp": "2025-10-17T18:50:35.262022",
    "response_time": "3.27",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 88,
    "solution": "def freq_count(list1):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in the input list.\n    \n    Args:\n        list1 (list): Input list of elements\n    \n    Returns:\n        dict: Dictionary with elements as keys and their frequencies as values\n    \"\"\"\n    # Create an empty dictionary to store frequencies\n    freq_dict = {}\n    \n    # Iterate through each element in the list\n    for item in list1:\n        # If item already exists in dictionary, increment its count\n        # If not, initialize its count to 1\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    \n    return freq_dict",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):",
    "timestamp": "2025-10-17T18:50:38.363932",
    "response_time": "3.10",
    "context": "{\"function_name\": \"freq_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 89,
    "solution": "def closest_num(N):\n    \"\"\"\n    Find the closest smaller number than the given number N.\n    \n    Args:\n        N (int): The input number\n    \n    Returns:\n        int: The closest smaller number\n    \"\"\"\n    # If N is 0 or 1, return 0 as there's no smaller positive number\n    if N <= 1:\n        return 0\n    \n    # Start checking from N-1 and go down\n    for num in range(N-1, 0, -1):\n        return num",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):",
    "timestamp": "2025-10-17T18:50:41.347069",
    "response_time": "2.98",
    "context": "{\"function_name\": \"closest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 90,
    "solution": "def len_log(list1):\n    \"\"\"\n    Find the length of the longest word in a given list of words.\n    \n    Args:\n        list1 (list): A list of strings/words\n    \n    Returns:\n        int: Length of the longest word in the list\n    \"\"\"\n    # If the list is empty, return 0\n    if not list1:\n        return 0\n    \n    # Use max() with key parameter to find the length of the longest word\n    return max(len(word) for word in list1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):",
    "timestamp": "2025-10-17T18:50:43.940269",
    "response_time": "2.59",
    "context": "{\"function_name\": \"len_log\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 91,
    "solution": "def find_substring(str1, sub_str):\n    \"\"\"\n    Check if a substring is present in any string within a list of strings.\n    \n    Args:\n        str1 (list): A list of strings to search through\n        sub_str (str): The substring to search for\n    \n    Returns:\n        bool: True if substring is found in any string, False otherwise\n    \"\"\"\n    # Iterate through each string in the list\n    for string in str1:\n        # Check if substring is present in current string\n        if sub_str in string:\n            return True\n    \n    # Return False if substring is not found in any string\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):",
    "timestamp": "2025-10-17T18:50:46.913573",
    "response_time": "2.97",
    "context": "{\"function_name\": \"find_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 92,
    "solution": "def is_undulating(n):\n    # Convert number to string for easy digit comparison\n    num_str = str(n)\n    \n    # Check if number has less than 3 digits\n    if len(num_str) < 3:\n        return False\n    \n    # Track alternating up/down pattern\n    is_increasing = int(num_str[0]) < int(num_str[1])\n    \n    # Check each consecutive digit pair\n    for i in range(1, len(num_str) - 1):\n        # If current digit is increasing\n        if int(num_str[i]) < int(num_str[i+1]):\n            # Should be opposite of previous pattern\n            if is_increasing:\n                return False\n            is_increasing = True\n        \n        # If current digit is decreasing\n        elif int(num_str[i]) > int(num_str[i+1]):\n            # Should be opposite of previous pattern\n            if not is_increasing:\n                return False\n            is_increasing = False\n        \n        # If digits are equal, not an undulating number\n        else:\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):",
    "timestamp": "2025-10-17T18:50:51.522830",
    "response_time": "4.61",
    "context": "{\"function_name\": \"is_undulating\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 93,
    "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' raised to the power of 'b'.\n    \n    Args:\n        a (int or float): Base number\n        b (int): Exponent\n    \n    Returns:\n        int or float: Result of a raised to the power of b\n    \"\"\"\n    return a ** b",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):",
    "timestamp": "2025-10-17T18:50:53.614271",
    "response_time": "2.09",
    "context": "{\"function_name\": \"power\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 94,
    "solution": "def index_minimum(test_list):\n    \"\"\"\n    Returns the first value of the tuple with the smallest second value.\n    \n    Args:\n        test_list (list): A list of tuples where each tuple contains two values\n    \n    Returns:\n        The first value of the tuple with the smallest second value\n    \"\"\"\n    if not test_list:\n        return None\n    \n    # Find the tuple with the minimum second value\n    min_tuple = min(test_list, key=lambda x: x[1])\n    \n    # Return the first value of that tuple\n    return min_tuple[0]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):",
    "timestamp": "2025-10-17T18:50:56.484871",
    "response_time": "2.87",
    "context": "{\"function_name\": \"index_minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 95,
    "solution": "def Find_Min_Length(lst):\n    # Check if the input list is empty\n    if not lst:\n        return 0\n    \n    # Use min() with a key function to find the length of the smallest list\n    return min(len(sublist) for sublist in lst)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):",
    "timestamp": "2025-10-17T18:50:58.893049",
    "response_time": "2.41",
    "context": "{\"function_name\": \"Find_Min_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 96,
    "solution": "def divisor(n):\n    # Handle special cases for 0 and negative numbers\n    if n <= 0:\n        return 0\n    \n    # Count the number of divisors\n    count = 0\n    \n    # Check divisors from 1 to the number itself\n    for i in range(1, n + 1):\n        # If i divides n without remainder, it's a divisor\n        if n % i == 0:\n            count += 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):",
    "timestamp": "2025-10-17T18:51:01.885556",
    "response_time": "2.99",
    "context": "{\"function_name\": \"divisor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 97,
    "solution": "from collections import Counter\n\ndef frequency_lists(list1):\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # Use Counter to count frequency of each element\n    frequency_dict = dict(Counter(flattened_list))\n    \n    return frequency_dict",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):",
    "timestamp": "2025-10-17T18:51:03.798702",
    "response_time": "1.91",
    "context": "{\"function_name\": \"frequency_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 98,
    "solution": "def multiply_num(numbers):\n    # Check if the list is empty to avoid division by zero\n    if not numbers:\n        return 0\n    \n    # Calculate the product of all numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    # Divide the product by the length of the list\n    return product / len(numbers)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):",
    "timestamp": "2025-10-17T18:51:05.768731",
    "response_time": "1.97",
    "context": "{\"function_name\": \"multiply_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 99,
    "solution": "def decimal_to_binary(n):\n    # Handle special case of 0\n    if n == 0:\n        return \"0\"\n    \n    # List to store binary digits\n    binary = []\n    \n    # Convert decimal to binary\n    while n > 0:\n        # Get remainder when divided by 2 (0 or 1)\n        remainder = n % 2\n        # Prepend remainder to binary list\n        binary.insert(0, str(remainder))\n        # Integer divide by 2\n        n //= 2\n    \n    # Join binary digits and return as string\n    return ''.join(binary)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):",
    "timestamp": "2025-10-17T18:51:09.020078",
    "response_time": "3.25",
    "context": "{\"function_name\": \"decimal_to_binary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 100,
    "solution": "def next_smallest_palindrome(num):\n    # Convert number to string for easier manipulation\n    num_str = str(num)\n    n = len(num_str)\n    \n    # If number is single digit, return next number\n    if n == 1:\n        return num + 1 if num < 9 else 11\n    \n    # Handle cases where number is already a palindrome\n    is_all_9s = all(digit == '9' for digit in num_str)\n    if is_all_9s:\n        return int('1' + '0' * (n - 1) + '1')\n    \n    # Split number into left and right halves\n    left_half = num_str[:(n+1)//2]\n    \n    # Create palindrome by mirroring left half\n    if n % 2 == 0:\n        # Even length palindrome\n        palindrome = left_half + left_half[::-1]\n    else:\n        # Odd length palindrome\n        palindrome = left_half + left_half[:-1][::-1]\n    \n    # If palindrome is smaller, increment left half\n    if int(palindrome) <= num:\n        # Increment left half\n        left_half = str(int(left_half) + 1)\n        \n        # Recreate palindrome with new left half\n        if n % 2 == 0:\n            palindrome = left_half + left_half[::-1]\n        else:\n            palindrome = left_half + left_half[:-1][::-1]\n    \n    return int(palindrome)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):",
    "timestamp": "2025-10-17T18:51:15.327078",
    "response_time": "6.30",
    "context": "{\"function_name\": \"next_smallest_palindrome\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 101,
    "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n    \n    Args:\n    arr (list): Input array of elements\n    k (int): 1-based index of the element to find\n    \n    Returns:\n    The kth element in the array\n    \n    Raises:\n    IndexError: If k is less than 1 or greater than the array length\n    \"\"\"\n    # Check if k is valid \n    if k < 1 or k > len(arr):\n        raise IndexError(\"k is out of range\")\n    \n    # Return the kth element using 1-based indexing \n    # Subtract 1 to convert to 0-based indexing for list access\n    return arr[k-1]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):",
    "timestamp": "2025-10-17T18:51:19.037114",
    "response_time": "3.71",
    "context": "{\"function_name\": \"kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 102,
    "solution": "def snake_to_camel(word):\n    # Split the snake_case string into words\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word except the first one\n    camel_case_words = [words[0]] + [w.capitalize() for w in words[1:]]\n    \n    # Join the words together\n    return ''.join(camel_case_words)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
    "timestamp": "2025-10-17T18:51:21.407142",
    "response_time": "2.37",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 103,
    "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m)\n    \n    Eulerian number represents the number of permutations of the set {1, ..., n} \n    with exactly m ascents (number of positions where the next element is greater than the previous)\n    \n    Args:\n        n (int): Total number of elements \n        m (int): Number of ascents\n    \n    Returns:\n        int: Eulerian number a(n, m)\n    \"\"\"\n    # Base cases\n    if m < 0 or m >= n:\n        return 0\n    \n    if n == 0 and m == 0:\n        return 1\n    \n    # Use dynamic programming to calculate Eulerian numbers\n    # Create a 2D table to store intermediate results\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Initialize base case\n    dp[0][0] = 1\n    \n    # Fill the dynamic programming table\n    for i in range(1, n + 1):\n        for j in range(min(m + 1, i)):\n            # Recurrence relation for Eulerian numbers\n            # a(n, m) = (m + 1) * a(n-1, m) + (n - m) * a(n-1, m-1)\n            dp[i][j] = (j + 1) * dp[i-1][j] + (i - j) * dp[i-1][j-1]\n    \n    return dp[n][m]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):",
    "timestamp": "2025-10-17T18:51:27.860308",
    "response_time": "6.45",
    "context": "{\"function_name\": \"eulerian_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 104,
    "solution": "def sort_sublists(input_list):\n    \"\"\"\n    Sort each sublist of strings in the given list of lists.\n    \n    Args:\n        input_list (list): A list of lists containing strings\n    \n    Returns:\n        list: A new list with each sublist sorted alphabetically\n    \"\"\"\n    return [sorted(sublist) for sublist in input_list]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):",
    "timestamp": "2025-10-17T18:51:29.889205",
    "response_time": "2.03",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 105,
    "solution": "def count(lst):\n    \"\"\"\n    Count the number of True boolean values in the given list.\n    \n    Args:\n        lst (list): A list containing boolean values\n    \n    Returns:\n        int: Number of True values in the list\n    \"\"\"\n    return sum(1 for item in lst if item is True)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):",
    "timestamp": "2025-10-17T18:51:31.843699",
    "response_time": "1.95",
    "context": "{\"function_name\": \"count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 106,
    "solution": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Append the given list to the given tuples.\n    \n    Args:\n        test_list (list): The list to be appended\n        test_tup (tuple): The tuple to append the list to\n    \n    Returns:\n        tuple: A new tuple with the list appended\n    \"\"\"\n    # Convert the tuple to a list to allow modification\n    result_list = list(test_tup)\n    \n    # Extend the list with the elements from test_list\n    result_list.extend(test_list)\n    \n    # Convert back to tuple and return\n    return tuple(result_list)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):",
    "timestamp": "2025-10-17T18:51:34.932567",
    "response_time": "3.09",
    "context": "{\"function_name\": \"add_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 108,
    "solution": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \n    Args:\n        num1 (list): First sorted input list\n        num2 (list): Second sorted input list\n        num3 (list): Third sorted input list\n    \n    Returns:\n        list: A single sorted list containing all elements from input lists\n    \"\"\"\n    # Combine all three lists\n    merged = num1 + num2 + num3\n    \n    # Sort the combined list\n    merged.sort()\n    \n    return merged",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):",
    "timestamp": "2025-10-17T18:51:37.598940",
    "response_time": "2.66",
    "context": "{\"function_name\": \"merge_sorted_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 109,
    "solution": "def odd_Equivalent(s, n):\n    \"\"\"\n    Find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \n    Args:\n    s (str): A binary string\n    n (int): Number of rotations\n    \n    Returns:\n    int: Count of numbers with odd value after rotations\n    \"\"\"\n    # Track count of odd numbers after rotations\n    odd_count = 0\n    \n    # Perform n rotations\n    for i in range(n + 1):\n        # Rotate the string\n        rotated = s[i:] + s[:i]\n        \n        # Convert rotated binary string to integer\n        num = int(rotated, 2)\n        \n        # Check if number is odd\n        if num % 2 != 0:\n            odd_count += 1\n    \n    return odd_count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):",
    "timestamp": "2025-10-17T18:51:41.656712",
    "response_time": "4.05",
    "context": "{\"function_name\": \"odd_Equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 111,
    "solution": "def common_in_nested_lists(nestedlist):\n    # If the nested list is empty, return an empty list\n    if not nestedlist:\n        return []\n    \n    # Convert the first sublist to a set\n    common_elements = set(nestedlist[0])\n    \n    # Iterate through the remaining sublists\n    for sublist in nestedlist[1:]:\n        # Intersect the current set of common elements with the current sublist\n        common_elements = common_elements.intersection(set(sublist))\n    \n    # Convert back to a list and return\n    return list(common_elements)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):",
    "timestamp": "2025-10-17T18:51:44.500575",
    "response_time": "2.84",
    "context": "{\"function_name\": \"common_in_nested_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 113,
    "solution": "def check_integer(text):\n    \"\"\"\n    Check if the given text represents a valid integer.\n    \n    Args:\n        text (str): The string to be checked\n    \n    Returns:\n        bool: True if the string represents an integer, False otherwise\n    \"\"\"\n    # Remove leading and trailing whitespace\n    text = text.strip()\n    \n    # Check if the string is empty\n    if not text:\n        return False\n    \n    # Handle optional sign at the beginning\n    if text[0] in ['+', '-']:\n        text = text[1:]\n    \n    # Check if the remaining characters are all digits\n    return text.isdigit()",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):",
    "timestamp": "2025-10-17T18:51:47.619838",
    "response_time": "3.12",
    "context": "{\"function_name\": \"check_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 115,
    "solution": "def empty_dit(list1):\n    \"\"\"\n    Check whether all dictionaries in a list are empty or not.\n    \n    Args:\n        list1 (list): A list of dictionaries\n    \n    Returns:\n        bool: True if all dictionaries are empty, False otherwise\n    \"\"\"\n    # Check if the list is empty\n    if not list1:\n        return False\n    \n    # Use all() with a generator expression to check if each dictionary is empty\n    return all(len(dict_item) == 0 for dict_item in list1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):",
    "timestamp": "2025-10-17T18:51:50.286519",
    "response_time": "2.66",
    "context": "{\"function_name\": \"empty_dit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 116,
    "solution": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \n    Args:\n        nums (tuple): A tuple of positive integers\n    \n    Returns:\n        int: A single integer formed by concatenating the input integers\n    \"\"\"\n    # Convert each integer to string\n    str_nums = [str(num) for num in nums]\n    \n    # Join the string representations and convert back to integer\n    return int(''.join(str_nums))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):",
    "timestamp": "2025-10-17T18:51:52.825438",
    "response_time": "2.54",
    "context": "{\"function_name\": \"tuple_to_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 117,
    "solution": "def list_to_float(test_list):\n    \"\"\"\n    Convert all possible elements in a list of lists to floats.\n    \n    Args:\n        test_list (list): A list of lists containing mixed data types\n    \n    Returns:\n        list: A new list with convertible elements converted to floats\n    \"\"\"\n    # Create a new list to store the converted result\n    converted_list = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in test_list:\n        # Create a new sublist to store converted elements\n        converted_sublist = []\n        \n        # Iterate through each element in the sublist\n        for item in sublist:\n            try:\n                # Attempt to convert the item to float\n                converted_item = float(item)\n                converted_sublist.append(converted_item)\n            except (ValueError, TypeError):\n                # If conversion fails, keep the original item\n                converted_sublist.append(item)\n        \n        # Add the converted sublist to the result\n        converted_list.append(converted_sublist)\n    \n    return converted_list",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):",
    "timestamp": "2025-10-17T18:51:57.006503",
    "response_time": "4.18",
    "context": "{\"function_name\": \"list_to_float\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 118,
    "solution": "def string_to_list(string):\n    return string.split()",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):",
    "timestamp": "2025-10-17T18:51:58.641302",
    "response_time": "1.63",
    "context": "{\"function_name\": \"string_to_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 119,
    "solution": "def search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n    \n    Args:\n        arr (list): A sorted array where all elements appear twice except one unique element\n    \n    Returns:\n        int: The element that appears only once\n    \"\"\"\n    # If array has only one element, return that element\n    if len(arr) == 1:\n        return arr[0]\n    \n    # Check first and last elements as edge cases\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    \n    # Binary search to find unique element\n    left, right = 1, len(arr) - 2\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if mid element is unique\n        if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]:\n            return arr[mid]\n        \n        # If mid is even index, check if unique element is on left side\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid+1]:\n                left = mid + 2\n            else:\n                right = mid - 2\n        \n        # If mid is odd index, check if unique element is on left side\n        else:\n            if arr[mid] == arr[mid-1]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    \n    # If no unique element found\n    return None",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):",
    "timestamp": "2025-10-17T18:52:04.542923",
    "response_time": "5.90",
    "context": "{\"function_name\": \"search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 120,
    "solution": "def max_product_tuple(list1):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \n    Args:\n        list1 (list): A list of tuples containing numeric values\n    \n    Returns:\n        float: The maximum absolute product between numbers in tuple pairs\n    \"\"\"\n    # Handle empty list case\n    if not list1:\n        return 0\n    \n    # Initialize max product to the absolute product of first tuple\n    max_prod = abs(list1[0][0] * list1[0][1])\n    \n    # Iterate through the list and calculate absolute product for each tuple\n    for a, b in list1:\n        current_prod = abs(a * b)\n        max_prod = max(max_prod, current_prod)\n    \n    return max_prod",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):",
    "timestamp": "2025-10-17T18:52:08.316118",
    "response_time": "3.77",
    "context": "{\"function_name\": \"max_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 123,
    "solution": "def amicable_numbers_sum(n):\n    \"\"\"Calculate the sum of proper divisors of a number.\"\"\"\n    return sum(i for i in range(1, n) if n % i == 0)\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Calculate the sum of all amicable numbers up to the given limit.\n    \n    An amicable number is a number that can be paired with another number \n    such that the sum of the proper divisors of each number equals the other number.\n    \n    Args:\n        limit (int): The upper bound for finding amicable numbers\n    \n    Returns:\n        int: Sum of all amicable numbers up to the limit\n    \"\"\"\n    amicable_sum = 0\n    \n    for a in range(2, limit):\n        # Calculate sum of divisors for a\n        b = sum_of_divisors(a)\n        \n        # Check if b is within limit and not equal to a\n        if b > a and b < limit:\n            # Check if a is the sum of divisors of b\n            if sum_of_divisors(b) == a:\n                amicable_sum += a + b\n    \n    return amicable_sum",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):",
    "timestamp": "2025-10-17T18:52:13.997341",
    "response_time": "5.68",
    "context": "{\"function_name\": \"amicable_numbers_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 124,
    "solution": "import math\n\ndef angle_complex(a, b):\n    \"\"\"\n    Calculate the angle (argument) of a complex number represented by real and imaginary parts.\n    \n    Args:\n        a (float): Real part of the complex number\n        b (float): Imaginary part of the complex number\n    \n    Returns:\n        float: Angle of the complex number in radians\n    \"\"\"\n    # Use math.atan2 to calculate the angle, which handles all quadrant cases\n    return math.atan2(b, a)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):",
    "timestamp": "2025-10-17T18:52:16.963872",
    "response_time": "2.96",
    "context": "{\"function_name\": \"angle_complex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 125,
    "solution": "def find_length(string):\n    \"\"\"\n    Find the maximum difference between the number of 0s and 1s in any sub-string of the given binary string.\n    \n    Args:\n        string (str): A binary string containing only '0' and '1' characters\n    \n    Returns:\n        int: Maximum difference between number of 0s and 1s in any sub-string\n    \"\"\"\n    max_diff = 0\n    n = len(string)\n    \n    # Try all possible sub-strings\n    for i in range(n):\n        for j in range(i, n):\n            # Count 0s and 1s in current sub-string\n            zeros = string[i:j+1].count('0')\n            ones = string[i:j+1].count('1')\n            \n            # Update max difference\n            max_diff = max(max_diff, abs(zeros - ones))\n    \n    return max_diff",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):",
    "timestamp": "2025-10-17T18:52:20.642979",
    "response_time": "3.68",
    "context": "{\"function_name\": \"find_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 126,
    "solution": "def sum(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum(a, b):\n    # Find the GCD of the two numbers\n    common_gcd = gcd(a, b)\n    \n    # Find the sum of common divisors\n    divisor_sum = 0\n    for i in range(1, common_gcd + 1):\n        if common_gcd % i == 0:\n            divisor_sum += i\n    \n    return divisor_sum",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):",
    "timestamp": "2025-10-17T18:52:23.253663",
    "response_time": "2.61",
    "context": "{\"function_name\": \"sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 127,
    "solution": "def multiply_int(x, y):\n    \"\"\"\n    Multiplies two integers and returns the result.\n    \n    Args:\n        x (int): First integer to multiply\n        y (int): Second integer to multiply\n    \n    Returns:\n        int: Product of x and y\n    \"\"\"\n    return x * y",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):",
    "timestamp": "2025-10-17T18:52:25.201057",
    "response_time": "1.94",
    "context": "{\"function_name\": \"multiply_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 128,
    "solution": "def long_words(n, str):\n    \"\"\"\n    Find words longer than n characters from a given list of words.\n    \n    Args:\n        n (int): Minimum length of words to return\n        str (list): List of words to check\n    \n    Returns:\n        list: Words from input list that are longer than n characters\n    \"\"\"\n    return [word for word in str if len(word) > n]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):",
    "timestamp": "2025-10-17T18:52:27.491396",
    "response_time": "2.29",
    "context": "{\"function_name\": \"long_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 129,
    "solution": "def magic_square_test(my_matrix):\n    # Check if matrix is square\n    if not my_matrix or len(my_matrix) == 0:\n        return False\n    \n    n = len(my_matrix)\n    for row in my_matrix:\n        if len(row) != n:\n            return False\n    \n    # Calculate expected magic sum\n    magic_sum = n * (n**2 + 1) // 2\n    \n    # Check row sums\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check column sums\n    for col in range(n):\n        column_sum = sum(my_matrix[row][col] for row in range(n))\n        if column_sum != magic_sum:\n            return False\n    \n    # Check main diagonal sum\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    if diag1_sum != magic_sum:\n        return False\n    \n    # Check secondary diagonal sum\n    diag2_sum = sum(my_matrix[i][n-1-i] for i in range(n))\n    if diag2_sum != magic_sum:\n        return False\n    \n    # Check if all numbers from 1 to n^2 are used exactly once\n    flat_matrix = [num for row in my_matrix for num in row]\n    if set(flat_matrix) != set(range(1, n**2 + 1)):\n        return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):",
    "timestamp": "2025-10-17T18:52:33.082575",
    "response_time": "5.59",
    "context": "{\"function_name\": \"magic_square_test\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 130,
    "solution": "from collections import Counter\n\ndef max_occurrences(nums):\n    # If the list is empty, return None\n    if not nums:\n        return None\n    \n    # Use Counter to count occurrences of each item\n    freq_counter = Counter(nums)\n    \n    # Find the item with maximum frequency\n    max_freq_item = max(freq_counter, key=freq_counter.get)\n    \n    return max_freq_item",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):",
    "timestamp": "2025-10-17T18:52:35.559184",
    "response_time": "2.47",
    "context": "{\"function_name\": \"max_occurrences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 131,
    "solution": "def reverse_vowels(str1):\n    # Define vowels (lowercase and uppercase)\n    vowels = set('aeiouAEIOU')\n    \n    # Convert string to list for easier manipulation\n    chars = list(str1)\n    \n    # Use two-pointer approach to swap vowels\n    left, right = 0, len(chars) - 1\n    \n    while left < right:\n        # Move left pointer to first vowel\n        while left < right and chars[left] not in vowels:\n            left += 1\n        \n        # Move right pointer to first vowel from right\n        while left < right and chars[right] not in vowels:\n            right -= 1\n        \n        # Swap vowels\n        if left < right:\n            chars[left], chars[right] = chars[right], chars[left]\n            left += 1\n            right -= 1\n    \n    # Convert back to string and return\n    return ''.join(chars)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):",
    "timestamp": "2025-10-17T18:52:39.486886",
    "response_time": "3.92",
    "context": "{\"function_name\": \"reverse_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 132,
    "solution": "def tup_string(tup1):\n    \"\"\"\n    Convert a tuple to a string representation.\n    \n    Args:\n        tup1 (tuple): The input tuple to be converted to a string\n    \n    Returns:\n        str: A string representation of the input tuple\n    \"\"\"\n    return str(tup1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):",
    "timestamp": "2025-10-17T18:52:41.596393",
    "response_time": "2.11",
    "context": "{\"function_name\": \"tup_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 133,
    "solution": "def sum_negativenum(nums):\n    \"\"\"\n    Calculate the sum of negative numbers in a given list.\n    \n    Args:\n        nums (list): A list of numbers\n    \n    Returns:\n        int: Sum of all negative numbers in the list\n    \"\"\"\n    return sum(num for num in nums if num < 0)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):",
    "timestamp": "2025-10-17T18:52:43.895319",
    "response_time": "2.29",
    "context": "{\"function_name\": \"sum_negativenum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 135,
    "solution": "def hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n    \n    A hexagonal number is a figurate number that extends the concept of triangular and square numbers \n    to the hexagonal pattern. The nth hexagonal number is calculated by the formula: n * (2n - 1)\n    \n    Args:\n        n (int): The position of the hexagonal number to calculate (n >= 1)\n    \n    Returns:\n        int: The nth hexagonal number\n    \"\"\"\n    return n * (2 * n - 1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):",
    "timestamp": "2025-10-17T18:52:47.214294",
    "response_time": "3.32",
    "context": "{\"function_name\": \"hexagonal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 137,
    "solution": "def zero_count(nums):\n    \"\"\"\n    Calculate the ratio of zeroes to non-zeroes in an array of integers.\n    \n    Args:\n        nums (list): An array of integers\n    \n    Returns:\n        float: Ratio of zeroes to non-zeroes. Returns 0 if no non-zero elements exist.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    zero_count = sum(1 for num in nums if num == 0)\n    non_zero_count = sum(1 for num in nums if num != 0)\n    \n    # Avoid division by zero\n    if non_zero_count == 0:\n        return 0\n    \n    return zero_count / non_zero_count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):",
    "timestamp": "2025-10-17T18:52:50.180876",
    "response_time": "2.96",
    "context": "{\"function_name\": \"zero_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 138,
    "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    # If n is 0, it cannot be represented as sum of powers of 2\n    if n <= 0:\n        return False\n    \n    # Convert number to binary representation\n    binary = bin(n)[2:]\n    \n    # Check if binary representation contains only 1s\n    return all(bit == '1' for bit in binary)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):",
    "timestamp": "2025-10-17T18:52:55.339632",
    "response_time": "5.15",
    "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 139,
    "solution": "import math\n\ndef circle_circumference(r):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n    \n    Args:\n        r (float): Radius of the circle\n    \n    Returns:\n        float: Circumference of the circle\n    \"\"\"\n    return 2 * math.pi * r",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):",
    "timestamp": "2025-10-17T18:52:57.338234",
    "response_time": "1.99",
    "context": "{\"function_name\": \"circle_circumference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 140,
    "solution": "def extract_singly(test_list):\n    \"\"\"\n    Flatten a list of lists into a single set of unique numbers.\n    \n    Args:\n        test_list (list): A list containing nested lists of numbers\n    \n    Returns:\n        set: A set of unique numbers from all nested lists\n    \"\"\"\n    # Use a set comprehension to flatten the list of lists and remove duplicates\n    return {num for sublist in test_list for num in sublist}",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):",
    "timestamp": "2025-10-17T18:52:59.873273",
    "response_time": "2.53",
    "context": "{\"function_name\": \"extract_singly\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 141,
    "solution": "def pancake_sort(nums):\n    \"\"\"\n    Perform pancake sort on the input list.\n    \n    Args:\n        nums (list): List of comparable elements to be sorted\n    \n    Returns:\n        list: Sorted list in ascending order\n    \"\"\"\n    def flip(arr, k):\n        \"\"\"\n        Reverse the first k elements of the list\n        \"\"\"\n        left = 0\n        while left < k:\n            arr[left], arr[k] = arr[k], arr[left]\n            left += 1\n            k -= 1\n        return arr\n\n    n = len(nums)\n    for curr_size in range(n, 1, -1):\n        # Find index of maximum element in unsorted portion\n        max_idx = nums.index(max(nums[:curr_size]))\n        \n        # If max is not already at the end, flip it to the beginning\n        # and then flip it to its correct position\n        if max_idx != curr_size - 1:\n            # If max is not at the start, flip to bring to start\n            if max_idx != 0:\n                nums = flip(nums, max_idx)\n            \n            # Flip to put max at its correct position\n            nums = flip(nums, curr_size - 1)\n    \n    return nums",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):",
    "timestamp": "2025-10-17T18:53:05.774999",
    "response_time": "5.90",
    "context": "{\"function_name\": \"pancake_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 142,
    "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count the number of items that are identical in the same position across three lists.\n    \n    Args:\n        list1 (list): First input list\n        list2 (list): Second input list\n        list3 (list): Third input list\n    \n    Returns:\n        int: Number of items that are identical in the same position\n    \"\"\"\n    # Find the minimum length among the three lists to avoid index out of range\n    min_length = min(len(list1), len(list2), len(list3))\n    \n    # Count identical items in the same position\n    count = sum(1 for i in range(min_length) \n                if list1[i] == list2[i] == list3[i])\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):",
    "timestamp": "2025-10-17T18:53:09.074943",
    "response_time": "3.30",
    "context": "{\"function_name\": \"count_samepair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 143,
    "solution": "def find_lists(Input):\n    \"\"\"\n    Function to count the number of lists present in the given tuple.\n    \n    Args:\n        Input (tuple): A tuple that may contain lists\n    \n    Returns:\n        int: Number of lists in the input tuple\n    \"\"\"\n    # Use sum with a generator expression to count lists\n    return sum(1 for item in Input if isinstance(item, list))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):",
    "timestamp": "2025-10-17T18:53:11.523743",
    "response_time": "2.44",
    "context": "{\"function_name\": \"find_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 145,
    "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum absolute difference between any two elements in the given array.\n    \n    Args:\n        arr (list): Input list of numbers\n    \n    Returns:\n        int/float: Maximum absolute difference between any two elements\n    \"\"\"\n    # If array is empty or has only one element, return 0\n    if len(arr) < 2:\n        return 0\n    \n    # Find the minimum and maximum elements in the array\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Return the absolute difference between max and min\n    return abs(max_val - min_val)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):",
    "timestamp": "2025-10-17T18:53:14.522493",
    "response_time": "2.99",
    "context": "{\"function_name\": \"max_Abs_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 160,
    "solution": "def find_solution(a, b, n):\n    # Use extended Euclidean algorithm to find GCD and coefficients\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        \n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        \n        return gcd, x, y\n    \n    # Find GCD of a and b\n    gcd, x, y = extended_gcd(a, b)\n    \n    # Check if solution exists\n    if n % gcd != 0:\n        return None\n    \n    # Scale x and y to satisfy the equation\n    x *= n // gcd\n    y *= n // gcd\n    \n    return (x, y)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):",
    "timestamp": "2025-10-17T18:53:18.237247",
    "response_time": "3.71",
    "context": "{\"function_name\": \"find_solution\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 161,
    "solution": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from list1 that are present in list2.\n    \n    Args:\n        list1 (list): The original list to remove elements from\n        list2 (list): The list containing elements to be removed\n    \n    Returns:\n        list: A new list with elements from list1 that are not in list2\n    \"\"\"\n    return [item for item in list1 if item not in list2]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):",
    "timestamp": "2025-10-17T18:53:20.874464",
    "response_time": "2.63",
    "context": "{\"function_name\": \"remove_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 162,
    "solution": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of series (n - 2*i) from i=0 to n // 2\n    \n    Args:\n        n (int): The starting number for the series\n    \n    Returns:\n        int: The sum of the series\n    \"\"\"\n    # If n is less than 0, return 0\n    if n < 0:\n        return 0\n    \n    # Initialize sum\n    total = 0\n    \n    # Iterate from 0 to n // 2\n    for i in range(n // 2 + 1):\n        # Calculate current term and add to total\n        current_term = n - 2 * i\n        \n        # Stop if current term becomes non-positive\n        if current_term <= 0:\n            break\n        \n        total += current_term\n    \n    return total",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):",
    "timestamp": "2025-10-17T18:53:24.826232",
    "response_time": "3.95",
    "context": "{\"function_name\": \"sum_series\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 163,
    "solution": "import math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon.\n    \n    Args:\n    s (int): Number of sides in the polygon\n    l (float): Length of each side\n    \n    Returns:\n    float: Area of the regular polygon\n    \"\"\"\n    # Calculate the area using the formula: \n    # Area = (s * l^2) / (4 * tan(\u03c0/s))\n    area = (s * l**2) / (4 * math.tan(math.pi / s))\n    return area",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):",
    "timestamp": "2025-10-17T18:53:27.453789",
    "response_time": "2.62",
    "context": "{\"function_name\": \"area_polygon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 164,
    "solution": "def are_equivalent(n, m):\n    \"\"\"\n    Determine if the sum of divisors for two integers are the same.\n    \n    Args:\n        n (int): First integer\n        m (int): Second integer\n    \n    Returns:\n        bool: True if sum of divisors are equal, False otherwise\n    \"\"\"\n    # Function to calculate sum of divisors\n    def divisor_sum(num):\n        # Handle negative numbers by taking absolute value\n        num = abs(num)\n        \n        # Special case for 0\n        if num == 0:\n            return 0\n        \n        # Find sum of all divisors\n        return sum(i for i in range(1, num + 1) if num % i == 0)\n    \n    # Compare sum of divisors for both numbers\n    return divisor_sum(n) == divisor_sum(m)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):",
    "timestamp": "2025-10-17T18:53:31.807710",
    "response_time": "4.35",
    "context": "{\"function_name\": \"are_equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 165,
    "solution": "def count_char_position(str1):\n    # Convert the input string to lowercase for case-insensitive comparison\n    str1 = str1.lower()\n    \n    # Define the lowercase English alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Initialize a counter for matching characters\n    count = 0\n    \n    # Iterate through the string, comparing each character with its position in the alphabet\n    for i in range(min(len(str1), len(alphabet))):\n        if str1[i] == alphabet[i]:\n            count += 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):",
    "timestamp": "2025-10-17T18:53:34.785786",
    "response_time": "2.97",
    "context": "{\"function_name\": \"count_char_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 166,
    "solution": "def find_even_pair(A):\n    \"\"\"\n    Count the number of pairs of integers in list A that xor to an even number.\n    \n    Args:\n        A (list): A list of integers\n    \n    Returns:\n        int: Number of pairs that xor to an even number\n    \"\"\"\n    count = 0\n    n = len(A)\n    \n    # Check all possible pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            # XOR the pair and check if result is even\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):",
    "timestamp": "2025-10-17T18:53:38.225909",
    "response_time": "3.44",
    "context": "{\"function_name\": \"find_even_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 167,
    "solution": "import math\n\ndef next_power_of_2(n):\n    # If n is already a power of 2, return n\n    if n > 0 and (n & (n - 1)) == 0:\n        return n\n    \n    # Find the smallest power of 2 greater than n\n    return 2 ** math.ceil(math.log2(n))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):",
    "timestamp": "2025-10-17T18:53:40.170519",
    "response_time": "1.94",
    "context": "{\"function_name\": \"next_power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 168,
    "solution": "def frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number x in the list a.\n    \n    Args:\n        a (list): The input list to search\n        x: The number to count occurrences of\n    \n    Returns:\n        int: The number of times x appears in the list\n    \"\"\"\n    return a.count(x)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):",
    "timestamp": "2025-10-17T18:53:42.726971",
    "response_time": "2.55",
    "context": "{\"function_name\": \"frequency\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 170,
    "solution": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Calculate the sum of numbers in a list within the specified range of indices.\n    \n    Args:\n    list1 (list): The input list of numbers\n    m (int): The starting index (inclusive)\n    n (int): The ending index (inclusive)\n    \n    Returns:\n    int/float: Sum of numbers within the specified index range\n    \"\"\"\n    # Validate input indices\n    if m < 0 or n >= len(list1) or m > n:\n        return 0\n    \n    # Return sum of numbers within the specified range\n    return sum(list1[m:n+1])",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):",
    "timestamp": "2025-10-17T18:53:45.948589",
    "response_time": "3.22",
    "context": "{\"function_name\": \"sum_range_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 171,
    "solution": "def perimeter_pentagon(a):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of one side.\n    \n    Args:\n        a (float): Length of one side of the regular pentagon\n    \n    Returns:\n        float: Total perimeter of the pentagon\n    \"\"\"\n    return 5 * a",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):",
    "timestamp": "2025-10-17T18:53:48.579736",
    "response_time": "2.63",
    "context": "{\"function_name\": \"perimeter_pentagon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 172,
    "solution": "def count_occurance(s):\n    \"\"\"\n    Count the number of occurrences of the substring 'std' in the given string.\n    \n    Args:\n        s (str): The input string to search for 'std' occurrences\n    \n    Returns:\n        int: Number of times 'std' appears in the string\n    \"\"\"\n    return s.count('std')",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):",
    "timestamp": "2025-10-17T18:53:50.864846",
    "response_time": "2.28",
    "context": "{\"function_name\": \"count_occurance\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 222,
    "solution": "def check_type(test_tuple):\n    # If tuple is empty, return False\n    if not test_tuple:\n        return False\n    \n    # Get the type of the first element\n    first_type = type(test_tuple[0])\n    \n    # Check if all elements have the same type as the first element\n    return all(isinstance(item, first_type) for item in test_tuple)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):",
    "timestamp": "2025-10-17T18:53:53.282839",
    "response_time": "2.41",
    "context": "{\"function_name\": \"check_type\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 223,
    "solution": "def binary_search(arr, n, x):\n    \"\"\"\n    Determine if x is the majority element in the sorted array arr\n    \n    Args:\n    arr (list): A sorted array of integers\n    n (int): Length of the array\n    x (int): Element to check for majority\n    \n    Returns:\n    bool: True if x is the majority element, False otherwise\n    \"\"\"\n    # Find the first occurrence of x using binary search\n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            # Check if x appears more than n/2 times\n            # Check the index at mid + n/2 to see if it's still x\n            majority_index = mid + n // 2\n            \n            # Ensure the index is within array bounds and the element is x\n            if majority_index < n and arr[majority_index] == x:\n                return True\n            \n            # If not found on right side, search left side\n            if mid > 0 and arr[mid - 1] == x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):",
    "timestamp": "2025-10-17T18:53:58.711032",
    "response_time": "5.42",
    "context": "{\"function_name\": \"binary_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 224,
    "solution": "def count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits (1's) in the binary representation of a given number.\n    \n    Args:\n        n (int): The input number to count set bits\n    \n    Returns:\n        int: Number of set bits in the binary representation of n\n    \"\"\"\n    # Initialize bit count\n    count = 0\n    \n    # Continue until number becomes 0\n    while n:\n        # Check if least significant bit is 1\n        count += n & 1\n        \n        # Right shift the number by 1 bit\n        n >>= 1\n    \n    return count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):",
    "timestamp": "2025-10-17T18:54:01.860049",
    "response_time": "3.15",
    "context": "{\"function_name\": \"count_Set_Bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 226,
    "solution": "def odd_values_string(str):\n    \"\"\"\n    Remove characters at odd index values from the given string.\n    \n    Args:\n        str (string): Input string to process\n    \n    Returns:\n        string: String with characters at odd indices removed\n    \"\"\"\n    return str[::2]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to remove the characters which have odd index values of a given string.\n\n### Signature\ndef odd_values_string(str):",
    "timestamp": "2025-10-17T18:54:03.946719",
    "response_time": "2.08",
    "context": "{\"function_name\": \"odd_values_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 227,
    "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Find the minimum value among three given numbers.\n    \n    Args:\n        a (int/float): First number\n        b (int/float): Second number\n        c (int/float): Third number\n    \n    Returns:\n        int/float: The minimum value among the three input numbers\n    \"\"\"\n    return min(a, b, c)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find minimum of three numbers.\n\n### Signature\ndef min_of_three(a,b,c):",
    "timestamp": "2025-10-17T18:54:06.470496",
    "response_time": "2.52",
    "context": "{\"function_name\": \"min_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 228,
    "solution": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a mask with 1s in the range [l, r]\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    \n    # Check if any bits are set in the given range\n    return (n & mask) == 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether all the bits are unset in the given range or not.\n\n### Signature\ndef all_Bits_Set_In_The_Given_Range(n,l,r):",
    "timestamp": "2025-10-17T18:54:13.817511",
    "response_time": "7.34",
    "context": "{\"function_name\": \"all_Bits_Set_In_The_Given_Range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 229,
    "solution": "def re_arrange_array(arr, n):\n    # Create a new list to store the result\n    result = []\n    \n    # First, collect all negative elements from the first n elements\n    negatives = [x for x in arr[:n] if x < 0]\n    \n    # Then, collect all non-negative elements from the first n elements\n    non_negatives = [x for x in arr[:n] if x >= 0]\n    \n    # Combine negatives and non-negatives while preserving original order\n    result.extend(negatives)\n    result.extend(non_negatives)\n    \n    # Add remaining elements from the original array (if any)\n    result.extend(arr[n:])\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n### Signature\ndef re_arrange_array(arr, n):",
    "timestamp": "2025-10-17T18:54:17.092581",
    "response_time": "3.27",
    "context": "{\"function_name\": \"re_arrange_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 230,
    "solution": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in the input string with the specified character.\n    \n    Args:\n        str1 (str): The input string to modify\n        char (str): The character to replace blank spaces with\n    \n    Returns:\n        str: A new string with blank spaces replaced by the specified character\n    \"\"\"\n    return str1.replace(' ', char)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n### Signature\ndef replace_blank(str1,char):",
    "timestamp": "2025-10-17T18:54:19.123006",
    "response_time": "2.02",
    "context": "{\"function_name\": \"replace_blank\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 232,
    "solution": "def larg_nnum(list1, n):\n    # Sort the list in descending order and slice the first n elements\n    return sorted(list1, reverse=True)[:n]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n### Signature\ndef larg_nnum(list1,n):",
    "timestamp": "2025-10-17T18:54:23.972147",
    "response_time": "4.85",
    "context": "{\"function_name\": \"larg_nnum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 233,
    "solution": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n    \n    Args:\n    r (float): Radius of the cylinder\n    h (float): Height of the cylinder\n    \n    Returns:\n    float: Lateral surface area of the cylinder\n    \"\"\"\n    return 2 * math.pi * r * h",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cylinder.\n\n### Signature\ndef lateralsuface_cylinder(r,h):",
    "timestamp": "2025-10-17T18:54:25.989339",
    "response_time": "2.01",
    "context": "{\"function_name\": \"lateralsuface_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 234,
    "solution": "def volume_cube(l):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n    \n    Args:\n        l (float or int): Length of one side of the cube\n    \n    Returns:\n        float or int: Volume of the cube (side length cubed)\n    \"\"\"\n    return l ** 3",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the volume of a cube given its side length.\n\n### Signature\ndef volume_cube(l):",
    "timestamp": "2025-10-17T18:54:28.340419",
    "response_time": "2.35",
    "context": "{\"function_name\": \"volume_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 235,
    "solution": "def even_bit_set_number(n):\n    # Create a mask with all even bits set to 1\n    mask = 0\n    for i in range(0, 32, 2):  # Iterate through even bit positions\n        mask |= (1 << i)\n    \n    # Bitwise OR the number with the mask to set even bits\n    return n | mask",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to set all even bits of a given number.\n\n### Signature\ndef even_bit_set_number(n):",
    "timestamp": "2025-10-17T18:54:33.175519",
    "response_time": "4.83",
    "context": "{\"function_name\": \"even_bit_set_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 237,
    "solution": "from typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple]) -> Dict[Tuple, int]:\n    \"\"\"\n    Count the occurrences of each unique tuple in the input list.\n    \n    Args:\n        test_list (List[Tuple]): A list of tuples to count occurrences of\n    \n    Returns:\n        Dict[Tuple, int]: A dictionary mapping each unique tuple to its frequency\n    \"\"\"\n    # Use a dictionary to track the count of each tuple\n    occurrence_dict = {}\n    \n    # Iterate through each tuple in the list\n    for item in test_list:\n        # Increment the count for the tuple, defaulting to 0 if not seen before\n        occurrence_dict[item] = occurrence_dict.get(item, 0) + 1\n    \n    return occurrence_dict",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n### Signature\ndef check_occurences(test_list):",
    "timestamp": "2025-10-17T18:54:36.741495",
    "response_time": "3.56",
    "context": "{\"function_name\": \"check_occurences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 238,
    "solution": "def number_of_substrings(str):\n    # Total number of non-empty substrings will be n*(n+1)/2\n    # where n is the length of the string\n    n = len(str)\n    return n * (n + 1) // 2",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of non-empty substrings of a given string.\n\n### Signature\ndef number_of_substrings(str):",
    "timestamp": "2025-10-17T18:54:42.248656",
    "response_time": "5.50",
    "context": "{\"function_name\": \"number_of_substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 239,
    "solution": "def get_total_number_of_sequences(m, n):\n    # Create a 2D DP table to store the number of sequences\n    # dp[i][j] represents the number of sequences of length i ending with j\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Initialize base case: for length 1, each number from 1 to m is a valid sequence\n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    # Build the DP table\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            # For each current number j, find valid previous numbers\n            for k in range(1, j // 2 + 1):\n                dp[i][j] += dp[i-1][k]\n    \n    # Sum up the total number of sequences of length n\n    return sum(dp[n])",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n### Signature\ndef get_total_number_of_sequences(m,n):",
    "timestamp": "2025-10-17T18:54:51.270331",
    "response_time": "9.02",
    "context": "{\"function_name\": \"get_total_number_of_sequences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 240,
    "solution": "def replace_list(list1, list2):\n    # Check if the first list is empty\n    if not list1:\n        return list2\n    \n    # Create a copy of the first list to avoid modifying the original\n    result = list1.copy()\n    \n    # Remove the last element of the result list\n    result.pop()\n    \n    # Extend the result list with all elements from the second list\n    result.extend(list2)\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\n### Signature\ndef replace_list(list1,list2):",
    "timestamp": "2025-10-17T18:54:53.728845",
    "response_time": "2.45",
    "context": "{\"function_name\": \"replace_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 242,
    "solution": "def count_charac(str1):\n    \"\"\"\n    Count the total number of characters in a given string.\n    \n    Args:\n        str1 (str): The input string to count characters from\n    \n    Returns:\n        int: Total number of characters in the string\n    \"\"\"\n    return len(str1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the total number of characters in a string.\n\n### Signature\ndef count_charac(str1):",
    "timestamp": "2025-10-17T18:54:56.711203",
    "response_time": "2.98",
    "context": "{\"function_name\": \"count_charac\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 244,
    "solution": "import math\n\ndef next_Perfect_Square(N):\n    # Find the square root of the input number\n    root = math.floor(math.sqrt(N))\n    \n    # If the input is already a perfect square, increment the root\n    if root * root == N:\n        root += 1\n    \n    # Return the next perfect square\n    return root * root",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the next perfect square greater than a given number.\n\n### Signature\ndef next_Perfect_Square(N):",
    "timestamp": "2025-10-17T18:54:58.843563",
    "response_time": "2.13",
    "context": "{\"function_name\": \"next_Perfect_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 245,
    "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    # If array is empty, return 0\n    if n == 0:\n        return 0\n    \n    # Initialize arrays to track increasing and decreasing subsequence sums\n    increasing_sum = arr.copy()\n    decreasing_sum = arr.copy()\n    \n    # Calculate increasing subsequence sums from left to right\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increasing_sum[i] = max(increasing_sum[i], increasing_sum[j] + arr[i])\n    \n    # Calculate decreasing subsequence sums from right to left\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                decreasing_sum[i] = max(decreasing_sum[i], decreasing_sum[j] + arr[i])\n    \n    # Find the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        # Subtract arr[i] to avoid counting it twice\n        max_bitonic_sum = max(max_bitonic_sum, increasing_sum[i] + decreasing_sum[i] - arr[i])\n    \n    return max_bitonic_sum",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\n### Signature\ndef max_sum(arr):",
    "timestamp": "2025-10-17T18:55:04.237141",
    "response_time": "5.39",
    "context": "{\"function_name\": \"max_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 246,
    "solution": "import math\n\ndef babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a given number using the Babylonian method.\n    \n    Args:\n        number (float): The number to find the square root of.\n    \n    Returns:\n        float: The square root of the input number.\n    \n    Raises:\n        ValueError: If the input number is negative.\n    \"\"\"\n    # Check for negative input\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number\")\n    \n    # Handle special cases\n    if number == 0:\n        return 0\n    \n    # Initial guess is half the number\n    guess = number / 2\n    \n    # Set a small threshold for precision\n    epsilon = 1e-7\n    \n    # Iterate using Babylonian method\n    while True:\n        # Compute next approximation\n        next_guess = 0.5 * (guess + number / guess)\n        \n        # Check if we're close enough\n        if abs(next_guess - guess) < epsilon:\n            return next_guess\n        \n        # Update guess\n        guess = next_guess",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function for computing square roots using the babylonian method.\n\n### Signature\ndef babylonian_squareroot(number):",
    "timestamp": "2025-10-17T18:55:08.889651",
    "response_time": "4.65",
    "context": "{\"function_name\": \"babylonian_squareroot\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 247,
    "solution": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store lengths of palindromic subsequences\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the table diagonally upwards\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            \n            # If characters match and length is 2\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            \n            # If characters match\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            \n            # If characters don't match\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    # Return the length of longest palindromic subsequence\n    return dp[0][n-1]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n\n### Signature\ndef lps(str):",
    "timestamp": "2025-10-17T18:55:16.948982",
    "response_time": "8.05",
    "context": "{\"function_name\": \"lps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 248,
    "solution": "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \n    The harmonic sum is defined as the sum of reciprocals of the first n-1 positive integers.\n    \n    Args:\n        n (int): The upper limit of the harmonic sum calculation\n    \n    Returns:\n        float: The harmonic sum of n-1\n    \"\"\"\n    # If n is less than or equal to 1, return 0\n    if n <= 1:\n        return 0.0\n    \n    # Calculate harmonic sum from 1 to n-1\n    harmonic_total = sum(1/i for i in range(1, n))\n    \n    return harmonic_total",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in an integer n and calculates the harmonic sum of n-1.\n\n### Signature\ndef harmonic_sum(n):",
    "timestamp": "2025-10-17T18:55:20.166697",
    "response_time": "3.21",
    "context": "{\"function_name\": \"harmonic_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 249,
    "solution": "def intersection_array(array_nums1, array_nums2):\n    # Convert arrays to sets for efficient lookup and unique elements\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Use set intersection to find common elements\n    return list(set1.intersection(set2))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the intersection of two arrays.\n\n### Signature\ndef intersection_array(array_nums1,array_nums2):",
    "timestamp": "2025-10-17T18:55:24.535185",
    "response_time": "4.36",
    "context": "{\"function_name\": \"intersection_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 250,
    "solution": "def count_X(tup, x):\n    \"\"\"\n    Counts the number of occurrences of element x in the given tuple.\n    \n    Args:\n        tup (tuple): The input tuple to search through\n        x: The element to count occurrences of\n    \n    Returns:\n        int: Number of times x appears in the tuple\n    \"\"\"\n    return tup.count(x)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\n### Signature\ndef count_X(tup, x):",
    "timestamp": "2025-10-17T18:55:29.626122",
    "response_time": "5.09",
    "context": "{\"function_name\": \"count_X\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 251,
    "solution": "def insert_element(lst, element):\n    \"\"\"\n    Inserts the given element before each element in the input list.\n    \n    Args:\n        lst (list): The input list to modify\n        element: The element to insert before each existing element\n    \n    Returns:\n        list: A new list with the element inserted before each original element\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\n### Signature\ndef insert_element(list,element):",
    "timestamp": "2025-10-17T18:55:32.414220",
    "response_time": "2.78",
    "context": "{\"function_name\": \"insert_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 252,
    "solution": "import cmath\nimport math\n\ndef convert(numbers):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n    \n    Args:\n        numbers (list): A list of complex numbers\n    \n    Returns:\n        list: A list of tuples containing (r, theta) polar coordinates\n    \"\"\"\n    polar_coords = []\n    \n    for num in numbers:\n        # Calculate magnitude (r) using cmath.polar()\n        r, theta = cmath.polar(num)\n        \n        # Convert theta from radians to degrees (optional)\n        theta_degrees = math.degrees(theta)\n        \n        polar_coords.append((r, theta_degrees))\n    \n    return polar_coords",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to convert complex numbers to polar coordinates.\n\n### Signature\ndef convert(numbers):",
    "timestamp": "2025-10-17T18:55:36.028319",
    "response_time": "3.61",
    "context": "{\"function_name\": \"convert\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 253,
    "solution": "def count_integer(list1):\n    \"\"\"\n    Returns the number of integer elements in the given list.\n    \n    Args:\n        list1 (list): Input list to count integer elements\n    \n    Returns:\n        int: Number of integer elements in the list\n    \"\"\"\n    return sum(1 for item in list1 if isinstance(item, int))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that returns the number of integer elements in a given list.\n\n### Signature\ndef count_integer(list1):",
    "timestamp": "2025-10-17T18:55:37.998791",
    "response_time": "1.97",
    "context": "{\"function_name\": \"count_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 255,
    "solution": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    \"\"\"\n    Generate all combinations with repetition of elements from the input list.\n    \n    Args:\n    l (list): Input list of elements\n    n (int): Length of each combination\n    \n    Returns:\n    list: A list of tuples, where each tuple is a combination with repetition\n    \"\"\"\n    return list(combinations_with_replacement(l, n))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\n### Signature\ndef combinations_colors(l, n):",
    "timestamp": "2025-10-17T18:55:40.767331",
    "response_time": "2.76",
    "context": "{\"function_name\": \"combinations_colors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 256,
    "solution": "def count_Primes_nums(n):\n    # If n is less than 2, there are no prime numbers\n    if n < 2:\n        return 0\n    \n    # Create a boolean array \"is_prime[0..n]\" and initialize \n    # all entries it as true. A value in is_prime[i] will \n    # finally be false if i is Not a prime, else true.\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    # Use Sieve of Eratosthenes algorithm to mark non-primes\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            # Mark multiples of i as non-prime\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    # Count the number of primes\n    return sum(is_prime)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n### Signature\ndef count_Primes_nums(n):",
    "timestamp": "2025-10-17T18:55:45.195578",
    "response_time": "4.42",
    "context": "{\"function_name\": \"count_Primes_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 257,
    "solution": "def swap_numbers(a, b):\n    return (b, a)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\n### Signature\ndef swap_numbers(a,b):",
    "timestamp": "2025-10-17T18:55:46.835025",
    "response_time": "1.63",
    "context": "{\"function_name\": \"swap_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 259,
    "solution": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Maximize the elements of two tuples by taking the maximum value at each index.\n    \n    Args:\n        test_tup1 (tuple): First input tuple\n        test_tup2 (tuple): Second input tuple\n    \n    Returns:\n        tuple: A new tuple with maximum values from corresponding indices\n    \"\"\"\n    # Check if tuples have same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    # Use zip to pair corresponding elements and max to get maximum value\n    return tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to maximize the given two tuples.\n\n### Signature\ndef maximize_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:55:50.421267",
    "response_time": "3.58",
    "context": "{\"function_name\": \"maximize_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 260,
    "solution": "def newman_prime(n):\n    \"\"\"\n    Find the nth Newman-Shanks-Williams prime number.\n    \n    The Newman-Shanks-Williams sequence is defined by the recurrence:\n    NSW(0) = 2\n    NSW(1) = 1\n    NSW(k) = NSW(k-1)^2 - NSW(k-2) for k >= 2\n    \n    Args:\n        n (int): The index of the Newman-Shanks-Williams prime to find (0-based)\n    \n    Returns:\n        int: The nth Newman-Shanks-Williams prime number\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    \n    # Initialize the first two terms of the sequence\n    a, b = 2, 1\n    \n    # Generate NSW sequence and track primes\n    primes_found = 2  # We've already found 2 and 1\n    \n    while True:\n        # Generate next term in the sequence\n        c = b**2 - a\n        \n        # Check if the new term is prime\n        if is_prime(c):\n            primes_found += 1\n            \n            # If we've found the nth prime, return it\n            if primes_found - 1 == n:\n                return c\n        \n        # Update sequence\n        a, b = b, c\n\ndef is_prime(num):\n    \"\"\"\n    Check if a number is prime.\n    \n    Args:\n        num (int): Number to check for primality\n    \n    Returns:\n        bool: True if the number is prime, False otherwise\n    \"\"\"\n    if num < 2:\n        return False\n    \n    # Check for divisibility up to square root of num\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n### Signature\ndef newman_prime(n):",
    "timestamp": "2025-10-17T18:55:57.550800",
    "response_time": "7.12",
    "context": "{\"function_name\": \"newman_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 261,
    "solution": "def division_elements(test_tup1, test_tup2):\n    # Check if tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    # Perform element-wise division\n    result = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n### Signature\ndef division_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:56:04.780551",
    "response_time": "7.22",
    "context": "{\"function_name\": \"division_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 262,
    "solution": "def split_two_parts(list1, L):\n    \"\"\"\n    Splits the input list into two parts based on the given length L.\n    \n    Args:\n    list1 (list): The input list to be split\n    L (int): The length of the first part of the list\n    \n    Returns:\n    tuple: A tuple containing two lists - first part with length L and the remaining part\n    \"\"\"\n    # Check if L is greater than the length of the list\n    if L > len(list1):\n        return list1, []\n    \n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\n### Signature\ndef split_two_parts(list1, L):",
    "timestamp": "2025-10-17T18:56:08.114367",
    "response_time": "3.33",
    "context": "{\"function_name\": \"split_two_parts\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 264,
    "solution": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog years.\n    \n    For the first two human years, each human year equals 10.5 dog years.\n    After that, each human year equals 4 dog years.\n    \n    Args:\n        h_age (int or float): Human age of the dog\n    \n    Returns:\n        float: Dog's age in dog years\n    \"\"\"\n    if h_age <= 0:\n        return 0\n    \n    if h_age <= 2:\n        return h_age * 10.5\n    \n    # First two years count as 10.5 dog years each\n    dog_years = 2 * 10.5\n    \n    # Remaining years count as 4 dog years each\n    dog_years += (h_age - 2) * 4\n    \n    return dog_years",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate a dog's age in dog's years.\n\n### Signature\ndef dog_age(h_age):",
    "timestamp": "2025-10-17T18:56:12.571741",
    "response_time": "4.45",
    "context": "{\"function_name\": \"dog_age\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 265,
    "solution": "def list_split(S, step):\n    \"\"\"\n    Splits a list into sublists of length 'step'\n    \n    Args:\n        S (list): Input list to be split\n        step (int): Number of elements in each sublist\n    \n    Returns:\n        list: A list of sublists, each containing 'step' elements\n    \"\"\"\n    # If step is 0 or negative, return an empty list\n    if step <= 0:\n        return []\n    \n    # Use list comprehension to create sublists\n    return [S[i:i+step] for i in range(0, len(S), step)]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\n### Signature\ndef list_split(S, step):",
    "timestamp": "2025-10-17T18:56:15.499328",
    "response_time": "2.92",
    "context": "{\"function_name\": \"list_split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 266,
    "solution": "def lateralsurface_cube(l):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \n    Lateral surface area is the sum of the areas of the 4 vertical faces of the cube,\n    excluding the top and bottom faces.\n    \n    Args:\n        l (float): Length of one side of the cube\n    \n    Returns:\n        float: Lateral surface area of the cube\n    \"\"\"\n    # Lateral surface area = 4 * (side length * side height)\n    # For a cube, side height is the same as side length\n    return 4 * (l * l)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cube given its side length.\n\n### Signature\ndef lateralsurface_cube(l):",
    "timestamp": "2025-10-17T18:56:18.863916",
    "response_time": "3.36",
    "context": "{\"function_name\": \"lateralsurface_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 267,
    "solution": "def square_Sum(n):\n    \"\"\"\n    Calculate the sum of squares of the first n odd natural numbers.\n    \n    Args:\n        n (int): Number of odd natural numbers to consider\n    \n    Returns:\n        int: Sum of squares of the first n odd natural numbers\n    \"\"\"\n    # Initialize sum to 0\n    total = 0\n    \n    # Iterate through first n odd numbers\n    for i in range(1, 2*n, 2):\n        # Add square of current odd number to total\n        total += i**2\n    \n    return total",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n### Signature\ndef square_Sum(n):",
    "timestamp": "2025-10-17T18:56:21.483581",
    "response_time": "2.62",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 268,
    "solution": "def find_star_num(n):\n    \"\"\"\n    Calculate the n'th star number.\n    \n    Star numbers are figurate numbers that form a star-like pattern.\n    The formula for the n'th star number is: n * (6 * n - 5)\n    \n    Args:\n        n (int): The position of the star number to calculate\n    \n    Returns:\n        int: The n'th star number\n    \"\"\"\n    return n * (6 * n - 5)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the n'th star number.\n\n### Signature\ndef find_star_num(n):",
    "timestamp": "2025-10-17T18:56:24.139767",
    "response_time": "2.65",
    "context": "{\"function_name\": \"find_star_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 269,
    "solution": "def ascii_value(k):\n    \"\"\"\n    Returns the ASCII value of a given character.\n    \n    Args:\n        k (str): A single character\n    \n    Returns:\n        int: The ASCII value of the input character\n    \"\"\"\n    return ord(k)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the ascii value of a character.\n\n### Signature\ndef ascii_value(k):",
    "timestamp": "2025-10-17T18:56:25.811904",
    "response_time": "1.67",
    "context": "{\"function_name\": \"ascii_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 270,
    "solution": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Calculate the sum of even numbers located at even indices in the given list.\n    \n    Args:\n        arr (list): Input list of integers\n    \n    Returns:\n        int: Sum of even numbers at even indices\n    \"\"\"\n    return sum(num for index, num in enumerate(arr) if index % 2 == 0 and num % 2 == 0)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sum of even numbers at even positions of a list.\n\n### Signature\ndef sum_even_and_even_index(arr):",
    "timestamp": "2025-10-17T18:56:28.375151",
    "response_time": "2.56",
    "context": "{\"function_name\": \"sum_even_and_even_index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 271,
    "solution": "def even_Power_Sum(n):\n    \"\"\"\n    Calculate the sum of the first n even natural numbers raised to the fifth power.\n    \n    Args:\n        n (int): Number of even natural numbers to consider\n    \n    Returns:\n        int: Sum of the first n even natural numbers raised to the fifth power\n    \"\"\"\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate through first n even natural numbers\n    for i in range(1, n + 1):\n        # Calculate the even number by multiplying current iteration by 2\n        even_num = 2 * i\n        \n        # Raise the even number to the 5th power and add to total sum\n        total_sum += even_num ** 5\n    \n    return total_sum",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n### Signature\ndef even_Power_Sum(n):",
    "timestamp": "2025-10-17T18:56:31.830315",
    "response_time": "3.45",
    "context": "{\"function_name\": \"even_Power_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 272,
    "solution": "def rear_extract(test_list):\n    \"\"\"\n    Extract the last element from each tuple in the input list.\n    \n    Args:\n        test_list (list): A list of tuples\n    \n    Returns:\n        list: A list containing the last element of each tuple\n    \"\"\"\n    return [tup[-1] for tup in test_list]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n### Signature\ndef rear_extract(test_list):",
    "timestamp": "2025-10-17T18:56:34.048151",
    "response_time": "2.21",
    "context": "{\"function_name\": \"rear_extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 273,
    "solution": "def substract_elements(test_tup1, test_tup2):\n    # Check if tuples are of equal length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of equal length\")\n    \n    # Use tuple comprehension to subtract corresponding elements\n    result = tuple(a - b for a, b in zip(test_tup1, test_tup2))\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n### Signature\ndef substract_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:56:36.420245",
    "response_time": "2.37",
    "context": "{\"function_name\": \"substract_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 274,
    "solution": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculate the sum of binomial coefficients at even indices for a given positive integer n.\n    \n    Args:\n    n (int): A positive integer \n    \n    Returns:\n    int: Sum of binomial coefficients at even indices\n    \"\"\"\n    # Initialize sum \n    total_sum = 0\n    \n    # Iterate through even indices from 0 to n\n    for k in range(0, n+1, 2):\n        # Calculate binomial coefficient using math.comb\n        coeff = math.comb(n, k)\n        \n        # Add coefficient to total sum\n        total_sum += coeff\n    \n    return total_sum",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n### Signature\ndef even_binomial_Coeff_Sum( n):",
    "timestamp": "2025-10-17T18:56:39.720914",
    "response_time": "3.29",
    "context": "{\"function_name\": \"even_binomial_Coeff_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 276,
    "solution": "import math\n\ndef volume_cylinder(r, h):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n    \n    Args:\n        r (float): Radius of the cylinder\n        h (float): Height of the cylinder\n    \n    Returns:\n        float: Volume of the cylinder\n    \"\"\"\n    return math.pi * r**2 * h",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n\n### Signature\ndef volume_cylinder(r,h):",
    "timestamp": "2025-10-17T18:56:42.006168",
    "response_time": "2.28",
    "context": "{\"function_name\": \"volume_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 277,
    "solution": "def dict_filter(dict, n):\n    \"\"\"\n    Filters a dictionary to only include entries with values greater than or equal to n.\n    \n    Args:\n        dict (dict): Input dictionary to be filtered\n        n (int): Threshold value for filtering\n    \n    Returns:\n        dict: A new dictionary containing only entries with values >= n\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n### Signature\ndef dict_filter(dict,n):",
    "timestamp": "2025-10-17T18:56:44.227573",
    "response_time": "2.22",
    "context": "{\"function_name\": \"dict_filter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 278,
    "solution": "def count_first_elements(test_tup):\n    \"\"\"\n    Find the number of elements that occur before the first tuple element.\n    \n    Args:\n        test_tup (tuple): Input tuple to analyze\n    \n    Returns:\n        int: Number of elements before the first tuple element\n    \"\"\"\n    # If tuple is empty, return 0\n    if not test_tup:\n        return 0\n    \n    # Return the index of the first element, which is 0\n    return 0",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n\n### Signature\ndef count_first_elements(test_tup):",
    "timestamp": "2025-10-17T18:56:46.874904",
    "response_time": "2.64",
    "context": "{\"function_name\": \"count_first_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 279,
    "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Calculate the nth decagonal number.\n    \n    Args:\n        n (int): The position of the decagonal number to calculate.\n    \n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    return n * (8 * n - 6) // 2",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth decagonal number.\n\n### Signature\ndef is_num_decagonal(n):",
    "timestamp": "2025-10-17T18:56:53.033443",
    "response_time": "6.15",
    "context": "{\"function_name\": \"is_num_decagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 280,
    "solution": "def sequential_search(dlist, item):\n    \"\"\"\n    Performs a sequential search on the given list to find the specified item.\n    \n    Args:\n        dlist (list): The list to search through\n        item: The element to search for\n    \n    Returns:\n        tuple: A tuple containing:\n            - A boolean indicating whether the item was found (True/False)\n            - The index of the item if found, or -1 if not found\n    \"\"\"\n    for index, element in enumerate(dlist):\n        if element == item:\n            return True, index\n    \n    return False, -1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n### Signature\ndef sequential_search(dlist, item):",
    "timestamp": "2025-10-17T18:56:55.875176",
    "response_time": "2.84",
    "context": "{\"function_name\": \"sequential_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 281,
    "solution": "def all_unique(test_list):\n    \"\"\"\n    Check if all elements in the given list are unique.\n    \n    Args:\n        test_list (list): Input list to check for unique elements\n    \n    Returns:\n        bool: True if all elements are unique, False otherwise\n    \"\"\"\n    # Convert list to set and compare lengths\n    # If length of set is same as original list, all elements are unique\n    return len(set(test_list)) == len(test_list)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check if the elements of a given list are unique or not.\n\n### Signature\ndef all_unique(test_list):",
    "timestamp": "2025-10-17T18:56:58.351600",
    "response_time": "2.47",
    "context": "{\"function_name\": \"all_unique\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 282,
    "solution": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \n    Args:\n        nums1 (list): First input list of numbers\n        nums2 (list): Second input list of numbers\n    \n    Returns:\n        list: A new list with elements subtracted element-wise\n    \"\"\"\n    # Check if lists have the same length\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    \n    # Subtract elements element-wise using list comprehension\n    return [a - b for a, b in zip(nums1, nums2)]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to subtract two lists element-wise.\n\n### Signature\ndef sub_list(nums1,nums2):",
    "timestamp": "2025-10-17T18:57:01.338469",
    "response_time": "2.98",
    "context": "{\"function_name\": \"sub_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 283,
    "solution": "def validate(n):\n    # Convert integer to string for easy digit manipulation\n    num_str = str(n)\n    \n    # Count frequency of each digit\n    digit_freq = {}\n    for digit in num_str:\n        digit_freq[digit] = digit_freq.get(digit, 0) + 1\n    \n    # Check if frequency of each digit is less than or equal to the digit itself\n    for digit, freq in digit_freq.items():\n        if freq > int(digit):\n            return False\n    \n    return True",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n### Signature\ndef validate(n):",
    "timestamp": "2025-10-17T18:57:03.948777",
    "response_time": "2.60",
    "context": "{\"function_name\": \"validate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 284,
    "solution": "def check_element(list_input, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n    \n    Args:\n        list_input (list): The input list to check\n        element: The element to compare against all list items\n    \n    Returns:\n        bool: True if all items are equal to the element, False otherwise\n    \"\"\"\n    # Use all() with a generator expression to check if every item matches the element\n    return all(item == element for item in list_input)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\n### Signature\ndef check_element(list,element):",
    "timestamp": "2025-10-17T18:57:06.860797",
    "response_time": "2.91",
    "context": "{\"function_name\": \"check_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 285,
    "solution": "import re\n\ndef text_match_two_three(text):\n    # Use regex pattern to match 'a' followed by 2 or 3 'b' characters\n    pattern = r'ab{2,3}'\n    \n    # Search for the pattern in the text\n    if re.search(pattern, text):\n        return True\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n### Signature\ndef text_match_two_three(text):",
    "timestamp": "2025-10-17T18:57:09.256938",
    "response_time": "2.39",
    "context": "{\"function_name\": \"text_match_two_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 286,
    "solution": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Find the largest sum of a contiguous subarray in an array repeated k times\n    \n    Args:\n    a: Input array \n    n: Length of input array\n    k: Number of times array is repeated\n    \n    Returns:\n    Maximum subarray sum in the repeated array\n    \"\"\"\n    # If k is 1, use standard Kadane's algorithm\n    if k == 1:\n        max_sum = float('-inf')\n        current_sum = 0\n        for num in a:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n    \n    # Calculate total array sum\n    total_sum = sum(a)\n    \n    # If total sum is negative, we'll use Kadane's on 2 repetitions\n    if total_sum <= 0:\n        # Duplicate the array twice to handle circular cases\n        extended_arr = a + a\n        max_sum = float('-inf')\n        current_sum = 0\n        for num in extended_arr:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n    \n    # If total sum is positive, we can optimize for k repetitions\n    # Kadane's on 2 repetitions + mathematical calculation\n    extended_arr = a + a\n    max_sum_two_reps = float('-inf')\n    current_sum = 0\n    for num in extended_arr:\n        current_sum = max(num, current_sum + num)\n        max_sum_two_reps = max(max_sum_two_reps, current_sum)\n    \n    # If k > 2, we can add complete repetitions\n    if k > 2:\n        max_sum_two_reps += total_sum * (k - 2)\n    \n    return max_sum_two_reps",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n### Signature\ndef max_sub_array_sum_repeated(a, n, k):",
    "timestamp": "2025-10-17T18:57:16.783971",
    "response_time": "7.52",
    "context": "{\"function_name\": \"max_sub_array_sum_repeated\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 287,
    "solution": "def square_Sum(n):\n    \"\"\"\n    Calculate the sum of squares of first n even natural numbers.\n    \n    Args:\n        n (int): Number of even natural numbers to consider\n    \n    Returns:\n        int: Sum of squares of first n even natural numbers\n    \"\"\"\n    # Initialize sum to 0\n    total = 0\n    \n    # Iterate through first n even numbers\n    for i in range(1, n+1):\n        # Calculate even number by multiplying index by 2\n        even_num = 2 * i\n        \n        # Add square of even number to total\n        total += even_num ** 2\n    \n    return total",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n### Signature\ndef square_Sum(n):",
    "timestamp": "2025-10-17T18:57:19.660409",
    "response_time": "2.87",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 290,
    "solution": "def max_length(list1):\n    \"\"\"\n    Find the list with maximum length from a list of lists.\n    \n    Args:\n        list1 (list): A list containing multiple lists\n    \n    Returns:\n        list: The list with the maximum length. \n        If multiple lists have the same maximum length, returns the first one encountered.\n    \"\"\"\n    if not list1:\n        return None\n    \n    return max(list1, key=len)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the list of maximum length in a list of lists.\n\n### Signature\ndef max_length(list1):",
    "timestamp": "2025-10-17T18:57:22.184410",
    "response_time": "2.52",
    "context": "{\"function_name\": \"max_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 291,
    "solution": "def count_no_of_ways(n, k):\n    # Handle base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    # Initialize variables for dynamic programming\n    # same represents ways where last two posts have same color\n    # diff represents ways where last two posts have different colors\n    same = k\n    diff = k * (k - 1)\n    \n    # Iterate through remaining posts\n    for _ in range(3, n + 1):\n        # Store previous same and diff values\n        prev_same = same\n        prev_diff = diff\n        \n        # Calculate new same and diff values\n        # For same color: multiply previous diff by 1 (only one color can be repeated)\n        same = prev_diff\n        \n        # For different colors: multiply previous total ways by (k-1)\n        diff = (prev_same + prev_diff) * (k - 1)\n    \n    # Total ways is sum of same and different color ways\n    return same + diff",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n### Signature\ndef count_no_of_ways(n, k):",
    "timestamp": "2025-10-17T18:57:29.740926",
    "response_time": "7.55",
    "context": "{\"function_name\": \"count_no_of_ways\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 292,
    "solution": "def find(n, m):\n    \"\"\"\n    Find the quotient of two numbers, rounded down to the nearest integer.\n    \n    Args:\n        n (int): Dividend \n        m (int): Divisor\n    \n    Returns:\n        int: Quotient of n divided by m, rounded down\n    \"\"\"\n    return n // m",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n### Signature\ndef find(n,m):",
    "timestamp": "2025-10-17T18:57:32.075040",
    "response_time": "2.33",
    "context": "{\"function_name\": \"find\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 293,
    "solution": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Calculate the length of the third side of a right-angled triangle\n    given the lengths of two sides using the Pythagorean theorem.\n    \n    Args:\n    w (float): Length of one side of the right-angled triangle\n    h (float): Length of another side of the right-angled triangle\n    \n    Returns:\n    float: Length of the third side (hypotenuse)\n    \"\"\"\n    # Use Pythagorean theorem: a\u00b2 + b\u00b2 = c\u00b2\n    # Where c is the hypotenuse (the side we're calculating)\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the third side of a right angled triangle.\n\n### Signature\ndef otherside_rightangle(w,h):",
    "timestamp": "2025-10-17T18:57:35.498107",
    "response_time": "3.42",
    "context": "{\"function_name\": \"otherside_rightangle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 294,
    "solution": "def max_val(listval):\n    \"\"\"\n    Find the maximum value in a heterogeneous list containing different types of elements.\n    \n    Args:\n        listval (list): A list containing mixed types of elements\n    \n    Returns:\n        The maximum value in the list, or None if no comparable elements exist\n    \"\"\"\n    # Filter out only comparable elements\n    comparable_elements = []\n    \n    for item in listval:\n        try:\n            # Try to compare the item with other elements\n            comparable_elements.append(item)\n        except TypeError:\n            # Skip elements that cannot be compared\n            continue\n    \n    # Return the maximum value if comparable elements exist\n    return max(comparable_elements) if comparable_elements else None",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum value in a given heterogeneous list.\n\n### Signature\ndef max_val(listval):",
    "timestamp": "2025-10-17T18:57:39.181799",
    "response_time": "3.68",
    "context": "{\"function_name\": \"max_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 295,
    "solution": "def sum_div(number):\n    # Handle edge case for 0 or negative numbers\n    if number <= 0:\n        return 0\n    \n    # Initialize sum of divisors\n    divisor_sum = 0\n    \n    # Iterate through potential divisors from 1 to the number itself\n    for i in range(1, number + 1):\n        # Check if i is a divisor of the number\n        if number % i == 0:\n            # Add the divisor to the sum\n            divisor_sum += i\n    \n    return divisor_sum",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to return the sum of all divisors of a number.\n\n### Signature\ndef sum_div(number):",
    "timestamp": "2025-10-17T18:57:42.004254",
    "response_time": "2.82",
    "context": "{\"function_name\": \"sum_div\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 296,
    "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Count the number of inversions in an array.\n    An inversion occurs when a larger element appears before a smaller element in the array.\n    \n    Args:\n        arr (list): Input list of integers\n    \n    Returns:\n        int: Total number of inversions in the array\n    \"\"\"\n    # Brute force approach with O(n^2) time complexity\n    inv_count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count inversions in an array.\n\n### Signature\ndef get_Inv_Count(arr):",
    "timestamp": "2025-10-17T18:57:45.098420",
    "response_time": "3.09",
    "context": "{\"function_name\": \"get_Inv_Count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 297,
    "solution": "def flatten_list(list1):\n    \"\"\"\n    Flatten a nested list structure into a single-level list.\n    \n    Args:\n        list1 (list): A potentially nested list structure\n    \n    Returns:\n        list: A flattened list with all nested elements extracted\n    \"\"\"\n    # Result list to store flattened elements\n    flattened = []\n    \n    # Recursive helper function to handle nested lists\n    def recursive_flatten(item):\n        # If the item is a list, recursively flatten its contents\n        if isinstance(item, list):\n            for sub_item in item:\n                recursive_flatten(sub_item)\n        # If the item is not a list, append it to the flattened list\n        else:\n            flattened.append(item)\n    \n    # Call recursive helper function on the input list\n    recursive_flatten(list1)\n    \n    return flattened",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to flatten a given nested list structure.\n\n### Signature\ndef flatten_list(list1):",
    "timestamp": "2025-10-17T18:57:48.846576",
    "response_time": "3.74",
    "context": "{\"function_name\": \"flatten_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 299,
    "solution": "def max_aggregate(stdata):\n    \"\"\"\n    Calculate the maximum aggregate from a list of tuples.\n    \n    Args:\n        stdata (list): A list of tuples containing numeric values\n    \n    Returns:\n        float: The maximum aggregate value\n    \"\"\"\n    if not stdata:\n        return 0\n    \n    # Calculate the sum of each tuple and find the maximum\n    return max(sum(tuple_item) for tuple_item in stdata)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\n### Signature\ndef max_aggregate(stdata):",
    "timestamp": "2025-10-17T18:57:51.433931",
    "response_time": "2.58",
    "context": "{\"function_name\": \"max_aggregate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 300,
    "solution": "def count_binary_seq(n):\n    # Total number of bits is 2n\n    # We need to track sequences where sum of first n bits equals sum of last n bits\n    \n    # Initialize DP table\n    # dp[i][diff] represents number of valid sequences of length i with current difference\n    dp = [[0] * (2*n + 1) for _ in range(2*n + 1)]\n    \n    # Base case: empty sequence\n    dp[0][n] = 1\n    \n    # Fill DP table\n    for i in range(1, 2*n + 1):\n        for diff in range(2*n + 1):\n            # Add 0 bit\n            if diff > 0:\n                dp[i][diff] += dp[i-1][diff-1]\n            \n            # Add 1 bit\n            if diff < 2*n:\n                dp[i][diff] += dp[i-1][diff+1]\n    \n    # Return count of sequences where first n bits sum equals last n bits sum\n    return dp[2*n][n]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n### Signature\ndef count_binary_seq(n):",
    "timestamp": "2025-10-17T18:58:00.546043",
    "response_time": "9.11",
    "context": "{\"function_name\": \"count_binary_seq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 301,
    "solution": "def dict_depth(d):\n    \"\"\"\n    Calculate the maximum depth of a nested dictionary.\n    \n    Args:\n        d (dict): Input dictionary to calculate depth\n    \n    Returns:\n        int: Maximum depth of the dictionary\n    \"\"\"\n    # Base case: if input is not a dictionary, return 0\n    if not isinstance(d, dict):\n        return 0\n    \n    # If dictionary is empty, return 1 (dictionary itself is 1 level deep)\n    if not d:\n        return 1\n    \n    # Find the maximum depth by recursively checking nested dictionaries\n    max_depth = 1\n    for value in d.values():\n        # Recursively calculate depth of nested dictionaries\n        if isinstance(value, dict):\n            max_depth = max(max_depth, 1 + dict_depth(value))\n        elif isinstance(value, (list, tuple)):\n            # Check for dictionaries within lists or tuples\n            nested_depth = 1\n            for item in value:\n                if isinstance(item, dict):\n                    nested_depth = max(nested_depth, 1 + dict_depth(item))\n            max_depth = max(max_depth, nested_depth)\n    \n    return max_depth",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the depth of a dictionary.\n\n### Signature\ndef dict_depth(d):",
    "timestamp": "2025-10-17T18:58:05.755819",
    "response_time": "5.20",
    "context": "{\"function_name\": \"dict_depth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 304,
    "solution": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find element at a given index after performing multiple rotations\n    \n    Args:\n    arr (list): Original array \n    ranges (list): List of rotation ranges\n    rotations (int): Number of rotations to perform\n    index (int): Target index to find element at\n    \n    Returns:\n    int: Element at the specified index after rotations\n    \"\"\"\n    # Create a copy of the original array to perform rotations\n    modified_arr = arr.copy()\n    \n    # Perform rotations\n    for i in range(rotations):\n        # Get current rotation range\n        start, end = ranges[i % len(ranges)]\n        \n        # Extract the subarray to rotate\n        subarray = modified_arr[start:end+1]\n        \n        # Rotate the subarray by one position\n        subarray = [subarray[-1]] + subarray[:-1]\n        \n        # Replace the original subarray with rotated subarray\n        modified_arr[start:end+1] = subarray\n    \n    # Return element at the specified index\n    return modified_arr[index]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find element at a given index after number of rotations.\n\n### Signature\ndef find_Element(arr,ranges,rotations,index) :",
    "timestamp": "2025-10-17T18:58:10.661631",
    "response_time": "4.90",
    "context": "{\"function_name\": \"find_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 305,
    "solution": "def start_withp(words):\n    # Filter words that start with 'p' or 'P'\n    p_words = [word for word in words if word.lower().startswith('p')]\n    \n    # Return first two words starting with 'p', or fewer if less than 2 exist\n    return p_words[:2]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to return two words from a list of words starting with letter 'p'.\n\n### Signature\ndef start_withp(words):",
    "timestamp": "2025-10-17T18:58:12.899682",
    "response_time": "2.23",
    "context": "{\"function_name\": \"start_withp\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 306,
    "solution": "def max_sum_increasing_subseq(a, n, index, k):\n    # Check if k is valid\n    if k >= n or index >= n or k <= index:\n        return -1\n    \n    # Initialize DP table\n    dp = [0] * n\n    \n    # Initialize first values\n    for i in range(index + 1):\n        dp[i] = a[i]\n    \n    # Compute maximum sum of increasing subsequence\n    for i in range(index + 1, k + 1):\n        for j in range(index + 1, i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    \n    # Return maximum sum including kth element\n    return dp[k]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\n### Signature\ndef max_sum_increasing_subseq(a, n, index, k):",
    "timestamp": "2025-10-17T18:58:21.519657",
    "response_time": "8.61",
    "context": "{\"function_name\": \"max_sum_increasing_subseq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 307,
    "solution": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Returns a slice of a tuple from index m to n (exclusive)\n    \n    Args:\n        tuplex (tuple): The input tuple\n        m (int): Starting index of slice (inclusive)\n        n (int): Ending index of slice (exclusive)\n    \n    Returns:\n        tuple: A slice of the original tuple from index m to n\n    \"\"\"\n    return tuplex[m:n]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to get a colon of a tuple.\n\n### Signature\ndef colon_tuplex(tuplex,m,n):",
    "timestamp": "2025-10-17T18:58:23.936921",
    "response_time": "2.41",
    "context": "{\"function_name\": \"colon_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 308,
    "solution": "from heapq import nlargest\n\ndef large_product(nums1, nums2, N):\n    \"\"\"\n    Find the N largest products by selecting one factor from each input list.\n    \n    Args:\n        nums1 (list): First list of numbers\n        nums2 (list): Second list of numbers\n        N (int): Number of largest products to return\n    \n    Returns:\n        list: N largest products in descending order\n    \"\"\"\n    # Generate all possible products by combining elements from both lists\n    products = [a * b for a in nums1 for b in nums2]\n    \n    # Return the N largest products using heapq.nlargest\n    return nlargest(N, products)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n### Signature\ndef large_product(nums1, nums2, N):",
    "timestamp": "2025-10-17T18:58:27.744682",
    "response_time": "3.80",
    "context": "{\"function_name\": \"large_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 309,
    "solution": "def maximum(a, b):\n    \"\"\"\n    Find the maximum of two numbers.\n    \n    Args:\n        a: First number to compare\n        b: Second number to compare\n    \n    Returns:\n        The larger of the two input numbers\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the maximum of two numbers.\n\n### Signature\ndef maximum(a,b):",
    "timestamp": "2025-10-17T18:58:29.673193",
    "response_time": "1.92",
    "context": "{\"function_name\": \"maximum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 310,
    "solution": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \n    Args:\n        str1 (str): The input string to be converted\n    \n    Returns:\n        tuple: A tuple containing individual characters from the input string\n    \"\"\"\n    return tuple(str1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a given string to a tuple of characters.\n\n### Signature\ndef string_to_tuple(str1):",
    "timestamp": "2025-10-17T18:58:31.552003",
    "response_time": "1.87",
    "context": "{\"function_name\": \"string_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 311,
    "solution": "def set_left_most_unset_bit(n):\n    # If all bits are already set, return the number as is\n    if n == -1 or (n & (n + 1) == 0):\n        return n\n    \n    # Find the position of the leftmost unset bit\n    mask = 1\n    while n & mask:\n        mask <<= 1\n    \n    # Set the leftmost unset bit\n    return n | mask",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to set the left most unset bit.\n\n### Signature\ndef set_left_most_unset_bit(n):",
    "timestamp": "2025-10-17T18:58:33.919653",
    "response_time": "2.36",
    "context": "{\"function_name\": \"set_left_most_unset_bit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 312,
    "solution": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone given its radius and height.\n    \n    Args:\n        r (float): Radius of the base of the cone\n        h (float): Height of the cone\n    \n    Returns:\n        float: Volume of the cone\n    \"\"\"\n    return (1/3) * math.pi * r**2 * h",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the volume of a cone.\n\n### Signature\ndef volume_cone(r,h):",
    "timestamp": "2025-10-17T18:58:36.030049",
    "response_time": "2.10",
    "context": "{\"function_name\": \"volume_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 388,
    "solution": "def highest_Power_of_2(n):\n    # If n is less than 1, return 0\n    if n < 1:\n        return 0\n    \n    # Start with power 0\n    power = 0\n    \n    # Keep doubling the power until it exceeds n\n    while (1 << power) <= n:\n        power += 1\n    \n    # Return the previous power\n    return 1 << (power - 1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\n### Signature\ndef highest_Power_of_2(n):",
    "timestamp": "2025-10-17T18:58:38.509266",
    "response_time": "2.47",
    "context": "{\"function_name\": \"highest_Power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 389,
    "solution": "def find_lucas(n):\n    \"\"\"\n    Calculate the n'th Lucas number.\n    \n    Lucas numbers are similar to Fibonacci numbers, but start with 2 and 1 instead of 0 and 1.\n    \n    Args:\n        n (int): The position of the Lucas number to calculate (0-based index)\n    \n    Returns:\n        int: The n'th Lucas number\n    \"\"\"\n    # Base cases for first two Lucas numbers\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    \n    # Initialize first two Lucas numbers\n    a, b = 2, 1\n    \n    # Iterate to calculate subsequent Lucas numbers\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    \n    return b",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the n'th lucas number.\n\n### Signature\ndef find_lucas(n):",
    "timestamp": "2025-10-17T18:58:43.669875",
    "response_time": "5.15",
    "context": "{\"function_name\": \"find_lucas\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 390,
    "solution": "def add_string(list_, string):\n    \"\"\"\n    Apply a given format string to all elements in a list.\n    \n    Args:\n        list_: A list of elements to be formatted\n        string: A format string to apply to each element\n    \n    Returns:\n        A new list with each element formatted using the given string\n    \"\"\"\n    return [string.format(item) for item in list_]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to apply a given format string to all of the elements in a list.\n\n### Signature\ndef add_string(list_, string):",
    "timestamp": "2025-10-17T18:58:45.819898",
    "response_time": "2.14",
    "context": "{\"function_name\": \"add_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 391,
    "solution": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Convert multiple lists into a nested dictionary.\n    \n    Args:\n        l1 (list): First list of keys\n        l2 (list): Second list of values\n        l3 (list): Third list of nested values\n    \n    Returns:\n        dict: Nested dictionary created from input lists\n    \"\"\"\n    # Create the nested dictionary\n    result = {}\n    \n    # Iterate through the lists simultaneously\n    for i in range(min(len(l1), len(l2), len(l3))):\n        # Create nested dictionary structure\n        result[l1[i]] = {l2[i]: l3[i]}\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert more than one list to nested dictionary.\n\n### Signature\ndef convert_list_dictionary(l1, l2, l3):",
    "timestamp": "2025-10-17T18:58:49.044838",
    "response_time": "3.22",
    "context": "{\"function_name\": \"convert_list_dictionary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 392,
    "solution": "import math\n\ndef get_max_sum (n):\n    # Create a memoization dictionary to store computed results\n    memo = {}\n    \n    def recursive_max_sum(x):\n        # Base case: if result already computed, return memoized value\n        if x in memo:\n            return memo[x]\n        \n        # Base case: if x is less than 1, return x\n        if x < 1:\n            return x\n        \n        # Calculate max of recursive division and current number\n        max_sum = max(\n            recursive_max_sum(math.floor(x/2)) + \n            recursive_max_sum(math.floor(x/3)) + \n            recursive_max_sum(math.floor(x/4)) + \n            recursive_max_sum(math.floor(x/5)), \n            x\n        )\n        \n        # Memoize and return the result\n        memo[x] = max_sum\n        return max_sum\n    \n    # Call the recursive helper function\n    return recursive_max_sum(n)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n### Signature\ndef get_max_sum (n):",
    "timestamp": "2025-10-17T18:58:55.988780",
    "response_time": "6.94",
    "context": "{\"function_name\": \"get_max_sum \"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 393,
    "solution": "def max_length_list(input_list):\n    \"\"\"\n    Find the list with maximum length from a list of lists.\n    \n    Args:\n        input_list (list): A list containing multiple lists\n    \n    Returns:\n        list: The list with the maximum length. \n              If multiple lists have the same maximum length, returns the first one.\n              Returns None if input_list is empty.\n    \"\"\"\n    if not input_list:\n        return None\n    \n    return max(input_list, key=len)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the list with maximum length.\n\n### Signature\ndef max_length_list(input_list):",
    "timestamp": "2025-10-17T18:58:58.651384",
    "response_time": "2.66",
    "context": "{\"function_name\": \"max_length_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 394,
    "solution": "def check_distinct(test_tup):\n    \"\"\"\n    Check if the given tuple contains no duplicates.\n    \n    Args:\n        test_tup (tuple): Input tuple to check for distinct elements\n    \n    Returns:\n        bool: True if all elements are unique, False otherwise\n    \"\"\"\n    # Convert tuple to set and compare lengths\n    # If lengths are same, it means no duplicates exist\n    return len(set(test_tup)) == len(test_tup)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if given tuple contains no duplicates.\n\n### Signature\ndef check_distinct(test_tup):",
    "timestamp": "2025-10-17T18:59:01.404287",
    "response_time": "2.75",
    "context": "{\"function_name\": \"check_distinct\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 395,
    "solution": "def first_non_repeating_character(str1):\n    # Create a dictionary to store character frequencies\n    char_count = {}\n    \n    # First pass: Count the frequency of each character\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Second pass: Find the first character with frequency 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the first non-repeated character in a given string.\n\n### Signature\ndef first_non_repeating_character(str1):",
    "timestamp": "2025-10-17T18:59:04.245288",
    "response_time": "2.83",
    "context": "{\"function_name\": \"first_non_repeating_character\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 396,
    "solution": "def check_char(string):\n    # Check if the string is empty\n    if not string:\n        return False\n    \n    # Compare the first and last characters\n    return string[0] == string[-1]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether the given string starts and ends with the same character or not.\n\n### Signature\ndef check_char(string):",
    "timestamp": "2025-10-17T18:59:06.046755",
    "response_time": "1.80",
    "context": "{\"function_name\": \"check_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 397,
    "solution": "def median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n    \n    Args:\n        a (int/float): First number\n        b (int/float): Second number\n        c (int/float): Third number\n    \n    Returns:\n        int/float: The median value among the three numbers\n    \"\"\"\n    # Sort the three numbers and return the middle value\n    numbers = sorted([a, b, c])\n    return numbers[1]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the median of three numbers.\n\n### Signature\ndef median_numbers(a,b,c):",
    "timestamp": "2025-10-17T18:59:08.501050",
    "response_time": "2.45",
    "context": "{\"function_name\": \"median_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 398,
    "solution": "def sum_of_digits(nums):\n    \"\"\"\n    Compute the sum of digits for each number in the given list.\n    \n    Args:\n        nums (list): A list of integers\n    \n    Returns:\n        list: A list containing the sum of digits for each number in the input list\n    \"\"\"\n    # Create a list to store the sum of digits for each number\n    digit_sums = []\n    \n    # Iterate through each number in the input list\n    for num in nums:\n        # Convert the number to its absolute value to handle negative numbers\n        num = abs(num)\n        \n        # Initialize sum of digits for current number\n        current_sum = 0\n        \n        # Extract and sum each digit\n        while num > 0:\n            current_sum += num % 10  # Get the last digit\n            num //= 10  # Remove the last digit\n        \n        # Add the sum of digits to the result list\n        digit_sums.append(current_sum)\n    \n    return digit_sums",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to compute the sum of digits of each number of a given list.\n\n### Signature\ndef sum_of_digits(nums):",
    "timestamp": "2025-10-17T18:59:12.455321",
    "response_time": "3.95",
    "context": "{\"function_name\": \"sum_of_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 399,
    "solution": "def bitwise_xor(test_tup1, test_tup2):\n    # Check if tuples are of equal length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of equal length\")\n    \n    # Perform bitwise XOR on corresponding elements\n    result = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\n### Signature\ndef bitwise_xor(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:59:14.854321",
    "response_time": "2.39",
    "context": "{\"function_name\": \"bitwise_xor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 400,
    "solution": "def extract_freq(test_list):\n    \"\"\"\n    Extract the number of unique tuples in the given list.\n    \n    Args:\n        test_list (list): A list of tuples\n    \n    Returns:\n        int: Number of unique tuples in the list\n    \"\"\"\n    # Convert the list to a set to get unique tuples\n    unique_tuples = set(test_list)\n    \n    # Return the count of unique tuples\n    return len(unique_tuples)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to extract the number of unique tuples in the given list.\n\n### Signature\ndef extract_freq(test_list):",
    "timestamp": "2025-10-17T18:59:17.576601",
    "response_time": "2.71",
    "context": "{\"function_name\": \"extract_freq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 401,
    "solution": "def add_nested_tuples(test_tup1, test_tup2):\n    # Check if the tuples have the same length and structure\n    if len(test_tup1) != len(test_tup2):\n        return None\n    \n    # Create a result list to store the added tuples\n    result = []\n    \n    # Iterate through the nested tuples\n    for i in range(len(test_tup1)):\n        # Check if the inner tuples have the same length\n        if len(test_tup1[i]) != len(test_tup2[i]):\n            return None\n        \n        # Create a tuple of index-wise additions for the current nested tuple\n        added_tuple = tuple(x + y for x, y in zip(test_tup1[i], test_tup2[i]))\n        result.append(added_tuple)\n    \n    # Convert the result list to a tuple and return\n    return tuple(result)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n### Signature\ndef add_nested_tuples(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:59:21.779566",
    "response_time": "4.20",
    "context": "{\"function_name\": \"add_nested_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 404,
    "solution": "def minimum(a, b):\n    \"\"\"\n    Find the minimum of two numbers.\n    \n    Args:\n        a: First number to compare\n        b: Second number to compare\n    \n    Returns:\n        The smaller of the two input numbers\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the minimum of two numbers.\n\n### Signature\ndef minimum(a,b):",
    "timestamp": "2025-10-17T18:59:23.897008",
    "response_time": "2.10",
    "context": "{\"function_name\": \"minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 405,
    "solution": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Check whether an element exists within a tuple.\n    \n    Args:\n        tuplex (tuple): The tuple to search in\n        tuple1 (tuple): The tuple containing elements to search for\n    \n    Returns:\n        bool: True if any element from tuple1 exists in tuplex, False otherwise\n    \"\"\"\n    # Check if any element from tuple1 is present in tuplex\n    return any(item in tuplex for item in tuple1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether an element exists within a tuple.\n\n### Signature\ndef check_tuplex(tuplex,tuple1):",
    "timestamp": "2025-10-17T18:59:26.384472",
    "response_time": "2.48",
    "context": "{\"function_name\": \"check_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 406,
    "solution": "def find_Parity(x):\n    \"\"\"\n    Determine whether the parity of a given number is odd.\n    \n    Args:\n        x (int): The input number to check for parity\n    \n    Returns:\n        bool: True if the number has odd parity, False otherwise\n    \"\"\"\n    # A number has odd parity if its bitwise AND with 1 is 1 (i.e., it's an odd number)\n    return x % 2 == 1",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find whether the parity of a given number is odd.\n\n### Signature\ndef find_Parity(x):",
    "timestamp": "2025-10-17T18:59:29.207640",
    "response_time": "2.82",
    "context": "{\"function_name\": \"find_Parity\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 407,
    "solution": "def rearrange_bigger(n):\n    # Convert number to list of digits\n    digits = list(str(n))\n    \n    # Find the first pair of adjacent digits from right to left \n    # where left digit is smaller than right digit\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    \n    # If no such pair found, no bigger number possible\n    if i < 0:\n        return -1\n    \n    # Find the smallest digit on right side of (i) \n    # that is greater than digits[i]\n    j = len(digits) - 1\n    while j > i and digits[j] <= digits[i]:\n        j -= 1\n    \n    # Swap the two digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the sublist to the right of index i to get smallest possible number\n    digits[i+1:] = digits[i+1:][::-1]\n    \n    # Convert back to number\n    return int(''.join(digits))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\n### Signature\ndef rearrange_bigger(n):",
    "timestamp": "2025-10-17T18:59:34.078541",
    "response_time": "4.86",
    "context": "{\"function_name\": \"rearrange_bigger\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 408,
    "solution": "import heapq\n\ndef push(nums1, nums2, k):\n    # If either input array is empty, return empty list\n    if not nums1 or not nums2:\n        return []\n    \n    # Create a min heap to store pairs\n    heap = []\n    result = []\n    \n    # Initially add pairs starting from the first elements of both arrays\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    \n    # Extract k smallest pairs\n    while k > 0 and heap:\n        _, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        \n        # If there are more elements in nums2, add next pair\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j+1], i, j+1))\n        \n        k -= 1\n    \n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n### Signature\ndef k_smallest_pairs(nums1, nums2, k):",
    "timestamp": "2025-10-17T18:59:38.501603",
    "response_time": "4.42",
    "context": "{\"function_name\": \"push\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 409,
    "solution": "def min_product_tuple(list1):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n    \n    Args:\n        list1 (list): A list of tuples containing numeric values\n    \n    Returns:\n        int or float: The minimum product of tuple pairs\n    \"\"\"\n    # Check if the list is empty\n    if not list1:\n        return None\n    \n    # Calculate products of each tuple and find the minimum\n    min_prod = float('inf')\n    for a, b in list1:\n        current_prod = a * b\n        min_prod = min(min_prod, current_prod)\n    \n    return min_prod",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\n### Signature\ndef min_product_tuple(list1):",
    "timestamp": "2025-10-17T18:59:41.642690",
    "response_time": "3.14",
    "context": "{\"function_name\": \"min_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 410,
    "solution": "def min_val(listval):\n    # Filter out non-numeric values\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    \n    # If no numeric values exist, return None\n    if not numeric_values:\n        return None\n    \n    # Return the minimum value\n    return min(numeric_values)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the minimum value in a given heterogeneous list.\n\n### Signature\ndef min_val(listval):",
    "timestamp": "2025-10-17T18:59:43.721735",
    "response_time": "2.07",
    "context": "{\"function_name\": \"min_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 411,
    "solution": "def snake_to_camel(word):\n    # Split the snake_case string into words\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word except the first one\n    camel_case_words = [words[0]] + [w.capitalize() for w in words[1:]]\n    \n    # Join the words together\n    return ''.join(camel_case_words)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert the given snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
    "timestamp": "2025-10-17T18:59:46.507251",
    "response_time": "2.78",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 412,
    "solution": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \n    Args:\n        l (list): Input list of numbers\n    \n    Returns:\n        list: A new list containing only even numbers from the input list\n    \"\"\"\n    return [num for num in l if num % 2 == 0]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to remove odd numbers from a given list.\n\n### Signature\ndef remove_odd(l):",
    "timestamp": "2025-10-17T18:59:48.719466",
    "response_time": "2.21",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 413,
    "solution": "def extract_nth_element(list1, n):\n    \"\"\"\n    Extract the nth element from a given list of tuples.\n    \n    Args:\n        list1 (list): A list of tuples\n        n (int): The index of the element to extract from each tuple\n    \n    Returns:\n        list: A list containing the nth element from each tuple\n    \"\"\"\n    return [tup[n] for tup in list1]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to extract the nth element from a given list of tuples.\n\n### Signature\ndef extract_nth_element(list1, n):",
    "timestamp": "2025-10-17T18:59:51.082492",
    "response_time": "2.36",
    "context": "{\"function_name\": \"extract_nth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 414,
    "solution": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value from list1 exists in list2.\n    \n    Args:\n        list1 (list): First input sequence\n        list2 (list): Second input sequence\n    \n    Returns:\n        bool: True if any value from list1 is in list2, False otherwise\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\n### Signature\ndef overlapping(list1,list2):",
    "timestamp": "2025-10-17T18:59:53.422825",
    "response_time": "2.33",
    "context": "{\"function_name\": \"overlapping\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 415,
    "solution": "def max_Product(arr):\n    # If array has less than 2 elements, return None\n    if len(arr) < 2:\n        return None\n    \n    # Initialize max product and pair\n    max_prod = float('-inf')\n    max_pair = None\n    \n    # Compare all possible pairs\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate current pair's product\n            current_prod = arr[i] * arr[j]\n            \n            # Update max product and pair if current product is higher\n            if current_prod > max_prod:\n                max_prod = current_prod\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find a pair with highest product from a given array of integers.\n\n### Signature\ndef max_Product(arr):",
    "timestamp": "2025-10-17T18:59:56.931867",
    "response_time": "3.50",
    "context": "{\"function_name\": \"max_Product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 417,
    "solution": "def group_tuples(Input):\n    # If input list is empty, return None\n    if not Input:\n        return None\n    \n    # Get the first element of the first tuple\n    first_element = Input[0][0]\n    \n    # Check if this first element is common to all tuples\n    for tuple_item in Input[1:]:\n        if tuple_item[0] != first_element:\n            return None\n    \n    # If we've made it through the loop, return the common first element\n    return first_element",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find common first element in given list of tuple.\n\n### Signature\ndef group_tuples(Input):",
    "timestamp": "2025-10-17T18:59:59.617330",
    "response_time": "2.68",
    "context": "{\"function_name\": \"group_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 418,
    "solution": "def Find_Max(lst):\n    \"\"\"\n    Find the element with maximum length in the given list.\n    \n    Args:\n        lst (list): Input list of elements\n    \n    Returns:\n        The element with the maximum length. If multiple elements have the same \n        maximum length, returns the first such element.\n    \"\"\"\n    if not lst:\n        return None\n    \n    return max(lst, key=len)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the element of a list having maximum length.\n\n### Signature\ndef Find_Max(lst):",
    "timestamp": "2025-10-17T19:00:01.748286",
    "response_time": "2.12",
    "context": "{\"function_name\": \"Find_Max\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 419,
    "solution": "import math\n\ndef round_and_sum(list1):\n    # Round each number in the list\n    rounded_list = [round(num) for num in list1]\n    \n    # Calculate the sum of rounded numbers\n    total_sum = sum(rounded_list)\n    \n    # Multiply the sum by the length of the list\n    result = total_sum * len(list1)\n    \n    # Print the result\n    print(result)\n    \n    # Return the result (optional, depending on requirements)\n    return result",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\n### Signature\ndef round_and_sum(list1):",
    "timestamp": "2025-10-17T19:00:04.160851",
    "response_time": "2.41",
    "context": "{\"function_name\": \"round_and_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 420,
    "solution": "def cube_Sum(n):\n    \"\"\"\n    Calculate the sum of cubes of first n even natural numbers.\n    \n    Args:\n        n (int): Number of even natural numbers to consider\n    \n    Returns:\n        int: Sum of cubes of first n even natural numbers\n    \"\"\"\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate through first n even numbers\n    for i in range(1, n + 1):\n        # Calculate even number by multiplying index by 2\n        even_num = 2 * i\n        \n        # Add cube of even number to total sum\n        total_sum += even_num ** 3\n    \n    return total_sum",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the cube sum of first n even natural numbers.\n\n### Signature\ndef cube_Sum(n):",
    "timestamp": "2025-10-17T19:00:07.224960",
    "response_time": "3.05",
    "context": "{\"function_name\": \"cube_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 421,
    "solution": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Concatenate each element of a tuple by a delimiter.\n    \n    Args:\n        test_tup (tuple): Input tuple of strings\n    \n    Returns:\n        str: Concatenated string with elements joined by delimiter\n    \"\"\"\n    # Check if tuple is empty\n    if not test_tup:\n        return \"\"\n    \n    # Convert tuple elements to strings and join with delimiter\n    return ''.join(map(str, test_tup))",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to concatenate each element of tuple by the delimiter.\n\n### Signature\ndef concatenate_tuple(test_tup):",
    "timestamp": "2025-10-17T19:00:09.829364",
    "response_time": "2.60",
    "context": "{\"function_name\": \"concatenate_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 422,
    "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Calculate the average of cubes of first n natural numbers\n    \n    Args:\n        n (int): Number of natural numbers to consider\n    \n    Returns:\n        float: Average of cubes of first n natural numbers\n    \"\"\"\n    # Check for invalid input\n    if n <= 0:\n        return 0\n    \n    # Calculate sum of cubes\n    cube_sum = sum(i**3 for i in range(1, n+1))\n    \n    # Calculate average\n    average = cube_sum / n\n    \n    return average",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the average of cubes of first n natural numbers.\n\n### Signature\ndef find_Average_Of_Cube(n):",
    "timestamp": "2025-10-17T19:00:12.550037",
    "response_time": "2.71",
    "context": "{\"function_name\": \"find_Average_Of_Cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 424,
    "solution": "def extract_rear(test_tuple):\n    \"\"\"\n    Extract the last character from each string in the given tuple.\n    \n    Args:\n        test_tuple (tuple): A tuple of strings\n    \n    Returns:\n        tuple: A tuple containing the last character of each string\n    \"\"\"\n    return tuple(string[-1] for string in test_tuple)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to extract only the rear index element of each string in the given tuple.\n\n### Signature\ndef extract_rear(test_tuple):",
    "timestamp": "2025-10-17T19:00:14.720399",
    "response_time": "2.16",
    "context": "{\"function_name\": \"extract_rear\"}"
  }
]