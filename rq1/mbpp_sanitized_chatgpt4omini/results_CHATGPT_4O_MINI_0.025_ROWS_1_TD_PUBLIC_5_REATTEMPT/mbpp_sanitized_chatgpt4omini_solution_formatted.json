[
  {
    "dataset_name": "mbpp_sanitized_chatgpt4omini",
    "dataset_row_id": 2,
    "solution": "from typing import List\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> str:\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return str(sorted(shared_elements))",
    "llm_name": "openai/gpt-4o-mini-2024-07-18",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
    "timestamp": "2025-08-10T15:32:04.756549",
    "response_time": "2.75",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4omini",
    "dataset_row_id": 3,
    "solution": "from typing import Union\n\ndef is_not_prime(n: Union[int, float]) -> bool:\n    if isinstance(n, float) or n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False",
    "llm_name": "openai/gpt-4o-mini-2024-07-18",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
    "timestamp": "2025-08-10T15:32:07.133646",
    "response_time": "2.38",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4omini",
    "dataset_row_id": 4,
    "solution": "from typing import List\nimport heapq\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    return sorted(heapq.nlargest(n, nums), reverse=True)",
    "llm_name": "openai/gpt-4o-mini-2024-07-18",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
    "timestamp": "2025-08-10T15:32:08.537676",
    "response_time": "1.40",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4omini",
    "dataset_row_id": 6,
    "solution": "def differ_At_One_Bit_Pos(x: int) -> str:\n    if x <= 0:\n        return \"No\"\n    return \"Yes\" if (x & (x - 1)) == 0 else \"No\"",
    "llm_name": "openai/gpt-4o-mini-2024-07-18",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
    "timestamp": "2025-08-10T15:32:10.038441",
    "response_time": "1.50",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4omini",
    "dataset_row_id": 7,
    "solution": "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    words = text.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words",
    "llm_name": "openai/gpt-4o-mini-2024-07-18",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
    "timestamp": "2025-08-10T15:32:11.451381",
    "response_time": "1.41",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4omini",
    "dataset_row_id": 8,
    "solution": "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]",
    "llm_name": "openai/gpt-4o-mini-2024-07-18",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
    "timestamp": "2025-08-10T15:32:13.429820",
    "response_time": "1.98",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4omini",
    "dataset_row_id": 9,
    "solution": "from typing import List\n\ndef find_Rotations(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    \n    # Create a concatenated string\n    doubled_s = s + s\n    \n    # Check for the first occurrence of the original string in the doubled string\n    for i in range(1, n):\n        if doubled_s[i:i+n] == s:\n            return i\n    \n    return n  # If no rotation found, return n (full length)",
    "llm_name": "openai/gpt-4o-mini-2024-07-18",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
    "timestamp": "2025-08-10T15:32:16.610208",
    "response_time": "3.18",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4omini",
    "dataset_row_id": 11,
    "solution": "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index == -1 or last_index == -1 or first_index == last_index:\n        return s.replace(ch, '', 1)  # Remove only one occurrence if they are the same\n    \n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]",
    "llm_name": "openai/gpt-4o-mini-2024-07-18",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
    "timestamp": "2025-08-10T15:32:19.195371",
    "response_time": "2.58",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4omini",
    "dataset_row_id": 12,
    "solution": "from typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    return sorted(M, key=sum)",
    "llm_name": "openai/gpt-4o-mini-2024-07-18",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
    "timestamp": "2025-08-10T15:32:20.478246",
    "response_time": "1.28",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4omini",
    "dataset_row_id": 14,
    "solution": "from typing import Union\n\ndef find_Volume(l: Union[int, float], b: Union[int, float], h: Union[int, float]) -> str:\n    volume = (1/2) * l * b * h\n    return str(volume)",
    "llm_name": "openai/gpt-4o-mini-2024-07-18",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
    "timestamp": "2025-08-10T15:32:22.241463",
    "response_time": "1.76",
    "context": "{\"function_name\": \"find_Volume\"}"
  }
]