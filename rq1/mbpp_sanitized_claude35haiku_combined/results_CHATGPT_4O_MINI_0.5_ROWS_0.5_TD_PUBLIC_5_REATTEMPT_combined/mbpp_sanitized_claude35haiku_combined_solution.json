[
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 2,
    "solution": "===START===\ndef similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Find the shared elements between two lists.\n    \n    Args:\n        test_tup1 (list): First input list\n        test_tup2 (list): Second input list\n    \n    Returns:\n        list: A list of elements common to both input lists\n    \"\"\"\n    # Use set intersection to find common elements\n    return list(set(test_tup1) & set(test_tup2))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:48:01.693764",
    "response_time": "3.73",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 3,
    "solution": "===START===\ndef is_not_prime(n):\n    # Check for numbers less than 2 (not prime)\n    if n < 2:\n        return True\n    \n    # Check for divisibility from 2 to square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    \n    # If no divisors found, it's a prime number\n    return False\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
    "timestamp": "2025-10-17T18:48:04.253337",
    "response_time": "2.56",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 4,
    "solution": "===START===\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    # If n is larger than the list length, return the entire sorted list in descending order\n    if n >= len(nums):\n        return sorted(nums, reverse=True)\n    \n    # Use heapq to find the n largest elements\n    # heapq by default creates a min heap, so we'll use negative values to simulate max heap\n    largest = heapq.nlargest(n, nums)\n    \n    # Return the largest elements in descending order\n    return largest\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
    "timestamp": "2025-10-17T18:48:07.502013",
    "response_time": "3.25",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 6,
    "solution": "I'll solve this problem by implementing the function to check if two numbers differ at only one bit position.\n\n===START===\ndef is_Power_Of_Two(x):\n    # XOR the two numbers to get the bit differences\n    xor_result = x\n    \n    # Count the number of set bits in the XOR result\n    # If exactly one bit is set, it means they differ at only one bit position\n    bit_count = 0\n    while xor_result:\n        bit_count += xor_result & 1\n        xor_result >>= 1\n    \n    # Return True if exactly one bit is set, False otherwise\n    return bit_count == 1\n===END===\n\nThe solution works as follows:\n1. XOR the two numbers to get a result where set bits represent different bit positions\n2. Count the number of set bits in the XOR result\n3. If exactly one bit is set, return True (numbers differ at only one bit position)\n4. Otherwise, return False\n\nFor example:\n- is_Power_Of_Two(2) would return True (binary: 10)\n- is_Power_Of_Two(4) would return True (binary: 100)\n- is_Power_Of_Two(7) would return False (binary: 111)\n\nThe function efficiently checks bit differences using bitwise operations.",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
    "timestamp": "2025-10-17T18:48:13.270464",
    "response_time": "5.77",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 7,
    "solution": "===START===\nimport re\n\ndef find_char_long(text):\n    # Use regex to find all words that are at least 4 characters long\n    return re.findall(r'\\b\\w{4,}\\b', text)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
    "timestamp": "2025-10-17T18:48:15.401885",
    "response_time": "2.13",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 8,
    "solution": "===START===\ndef square_nums(nums):\n    \"\"\"\n    Returns a list of squares of individual elements in the input list.\n    \n    Args:\n        nums (list): A list of numbers\n    \n    Returns:\n        list: A list containing the squares of each number in the input list\n    \"\"\"\n    return [num ** 2 for num in nums]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
    "timestamp": "2025-10-17T18:48:17.598310",
    "response_time": "2.19",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 9,
    "solution": "===START===\ndef find_Rotations(str):\n    # If string is empty or has only one character, no rotations possible\n    if len(str) <= 1:\n        return -1\n    \n    # Concatenate the string with itself\n    double_str = str + str\n    \n    # Check for minimum rotations\n    for i in range(1, len(str)):\n        # Check if substring of length str length exists in double_str\n        if double_str[i:i+len(str)] == str:\n            return i\n    \n    # If no rotation makes the string same\n    return -1\n===END===\n\nThe function works as follows:\n1. First, it checks if the string is empty or has only one character. In such cases, no rotations are possible, so it returns -1.\n2. It creates a double string by concatenating the original string with itself.\n3. It then iterates through possible rotations from 1 to length of string.\n4. For each rotation, it checks if the substring of length equal to original string exists in the double string.\n5. If a rotation is found that creates the same string, it returns the number of rotations.\n6. If no rotation makes the string same, it returns -1.\n\nExample:\n- find_Rotations(\"abc\") would return 1 (rotation \"bca\")\n- find_Rotations(\"abcde\") would return 1 (rotation \"bcdea\")\n- find_Rotations(\"aaa\") would return 1\n- find_Rotations(\"abcd\") would return -1 if no rotation creates the same string",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
    "timestamp": "2025-10-17T18:48:24.271797",
    "response_time": "6.67",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 11,
    "solution": "===START===\ndef remove_Occ(s, ch):\n    # Find the first occurrence of the character\n    first_index = s.find(ch)\n    \n    # Find the last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    # If the character is not found, return the original string\n    if first_index == -1:\n        return s\n    \n    # If first and last index are the same, remove that single occurrence\n    if first_index == last_index:\n        return s[:first_index] + s[first_index+1:]\n    \n    # Remove first and last occurrence\n    return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
    "timestamp": "2025-10-17T18:48:28.038800",
    "response_time": "3.77",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 12,
    "solution": "===START===\ndef sort_matrix(M):\n    \"\"\"\n    Sort a matrix in ascending order based on the sum of each row.\n    \n    Args:\n        M (list of lists): Input matrix to be sorted\n    \n    Returns:\n        list of lists: Matrix sorted by row sums in ascending order\n    \"\"\"\n    # Sort the matrix based on the sum of each row\n    return sorted(M, key=lambda row: sum(row))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
    "timestamp": "2025-10-17T18:48:30.582399",
    "response_time": "2.54",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 14,
    "solution": "===START===\ndef find_Volume(l,b,h):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n    l (float): Length of the base triangle's base\n    b (float): Width/breadth of the base triangle\n    h (float): Height of the prism\n    \n    Returns:\n    float: Volume of the triangular prism\n    \"\"\"\n    # Calculate the area of the triangular base\n    base_area = 0.5 * l * b\n    \n    # Calculate the volume by multiplying base area with height\n    volume = base_area * h\n    \n    return volume\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
    "timestamp": "2025-10-17T18:48:33.957045",
    "response_time": "3.37",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 16,
    "solution": "===START===\nimport re\n\ndef text_lowercase_underscore(text):\n    # Regular expression pattern to match lowercase letters joined by underscores\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    \n    # Check if the entire string matches the pattern\n    return bool(re.match(pattern, text))\n===END===\n\nThe solution uses a regular expression to validate the input string:\n- `^` ensures the pattern starts at the beginning of the string\n- `[a-z]+` matches one or more lowercase letters\n- `(_[a-z]+)*` allows zero or more sequences of an underscore followed by lowercase letters\n- `$` ensures the pattern goes to the end of the string\n\nExamples:\n- `text_lowercase_underscore(\"hello\")` returns `True`\n- `text_lowercase_underscore(\"hello_world\")` returns `True`\n- `text_lowercase_underscore(\"hello_world_test\")` returns `True`\n- `text_lowercase_underscore(\"Hello_world\")` returns `False`\n- `text_lowercase_underscore(\"hello_World\")` returns `False`\n- `text_lowercase_underscore(\"hello_123\")` returns `False`",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
    "timestamp": "2025-10-17T18:48:38.510765",
    "response_time": "4.55",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 17,
    "solution": "===START===\ndef square_perimeter(a):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n    \n    Args:\n        a (float or int): Length of one side of the square\n    \n    Returns:\n        float or int: Perimeter of the square (4 * side length)\n    \"\"\"\n    return 4 * a\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
    "timestamp": "2025-10-17T18:48:40.472273",
    "response_time": "1.96",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 18,
    "solution": "===START===\ndef str_to_list(string1, string2):\n    \"\"\"\n    Remove characters from the first string that are present in the second string.\n    \n    Args:\n        string1 (str): The original string to remove characters from\n        string2 (str): The string containing characters to be removed\n    \n    Returns:\n        str: A new string with characters from string2 removed from string1\n    \"\"\"\n    # Convert the result to a list of characters that are not in string2\n    result = ''.join(char for char in string1 if char not in string2)\n    \n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
    "timestamp": "2025-10-17T18:48:43.816785",
    "response_time": "3.34",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 19,
    "solution": "===START===\ndef test_duplicate(arraynums):\n    # Create a set to track unique elements\n    seen = set()\n    \n    # Iterate through each number in the array\n    for num in arraynums:\n        # If the number is already in the set, it's a duplicate\n        if num in seen:\n            return True\n        \n        # Add the number to the set\n        seen.add(num)\n    \n    # No duplicates found\n    return False\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
    "timestamp": "2025-10-17T18:48:47.730353",
    "response_time": "3.91",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 20,
    "solution": "===START===\ndef is_woodall(x):\n    \"\"\"\n    Check if a given number is a Woodall number.\n    \n    A Woodall number is a number of the form n * 2^n - 1, where n is a positive integer.\n    \n    Args:\n        x (int): The number to check\n    \n    Returns:\n        bool: True if x is a Woodall number, False otherwise\n    \"\"\"\n    # Check if x is less than 1 (invalid input)\n    if x < 1:\n        return False\n    \n    # Check Woodall number formula: n * 2^n - 1\n    n = 1\n    while True:\n        woodall_num = n * (2 ** n) - 1\n        \n        # If we found the Woodall number\n        if woodall_num == x:\n            return True\n        \n        # If we've exceeded the input number, it's not a Woodall number\n        if woodall_num > x:\n            return False\n        \n        n += 1\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
    "timestamp": "2025-10-17T18:48:52.650005",
    "response_time": "4.92",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 56,
    "solution": "===START===\ndef rev(num):\n    # Convert number to string to easily reverse it\n    num_str = str(num)\n    \n    # Reverse the string and convert back to integer\n    reversed_num = int(num_str[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    return num == (2 * reversed_num) - 1\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
    "timestamp": "2025-10-17T18:48:55.455424",
    "response_time": "2.80",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 57,
    "solution": "===START===\ndef find_Max_Num(arr):\n    # Convert all digits to strings for sorting\n    str_arr = [str(num) for num in arr]\n    \n    # Custom sorting to arrange digits to form largest number\n    # Sort in descending order based on concatenated string comparison\n    str_arr.sort(key=lambda x: x*len(max(str_arr, key=len)), reverse=True)\n    \n    # Join the sorted digits and convert back to integer\n    return int(''.join(str_arr))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
    "timestamp": "2025-10-17T18:48:58.917394",
    "response_time": "3.46",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 58,
    "solution": "===START===\ndef opposite_Signs(x, y):\n    \"\"\"\n    Check whether two given integers have opposite signs.\n    \n    Args:\n        x (int): First integer\n        y (int): Second integer\n    \n    Returns:\n        bool: True if x and y have opposite signs, False otherwise\n    \"\"\"\n    # XOR the sign bits to determine if signs are opposite\n    return (x < 0) != (y < 0)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
    "timestamp": "2025-10-17T18:49:01.279580",
    "response_time": "2.36",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 59,
    "solution": "I'll solve this by implementing the function to find the nth octagonal number.\n\n===START===\ndef is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    An octagonal number is a figurate number that extends the concept of triangular and square numbers to the octagon.\n    The formula for the nth octagonal number is: n * (3n - 2)\n    \n    Args:\n        n (int): The position of the octagonal number to calculate\n    \n    Returns:\n        int: The nth octagonal number\n    \"\"\"\n    return n * (3 * n - 2)\n===END===\n\nThe solution uses the standard formula for generating octagonal numbers: n * (3n - 2). \n\nHere's a brief explanation:\n- The function takes an integer n as input\n- It calculates the nth octagonal number using the formula n * (3n - 2)\n- For example:\n  - 1st octagonal number (n=1): 1 * (3*1 - 2) = 1\n  - 2nd octagonal number (n=2): 2 * (3*2 - 2) = 2 * 4 = 8\n  - 3rd octagonal number (n=3): 3 * (3*3 - 2) = 3 * 7 = 21\n  - And so on...\n\nThe function directly returns the calculated octagonal number.",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
    "timestamp": "2025-10-17T18:49:07.017131",
    "response_time": "5.74",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 61,
    "solution": "===START===\ndef count_Substrings(s):\n    \"\"\"\n    Count the number of substrings where the sum of digits equals the substring's length.\n    \n    Args:\n        s (str): Input string containing digits\n    \n    Returns:\n        int: Number of valid substrings\n    \"\"\"\n    count = 0\n    n = len(s)\n    \n    # Iterate through all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            \n            # Calculate sum of digits in substring\n            digit_sum = sum(int(digit) for digit in substring)\n            \n            # Check if sum of digits equals substring length\n            if digit_sum == len(substring):\n                count += 1\n    \n    return count\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
    "timestamp": "2025-10-17T18:49:10.850715",
    "response_time": "3.83",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 62,
    "solution": "===START===\ndef smallest_num(xs):\n    \"\"\"\n    Find and return the smallest number in a given list.\n    \n    Args:\n        xs (list): A list of numbers\n    \n    Returns:\n        The smallest number in the list. \n        Returns None if the list is empty.\n    \"\"\"\n    if not xs:\n        return None\n    \n    smallest = xs[0]\n    for num in xs[1:]:\n        if num < smallest:\n            smallest = num\n    \n    return smallest\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
    "timestamp": "2025-10-17T18:49:13.206396",
    "response_time": "2.35",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 63,
    "solution": "===START===\ndef max_difference(test_list):\n    # If the list is empty or has less than 2 elements, return 0\n    if len(test_list) < 2:\n        return 0\n    \n    # Initialize max difference to the smallest possible value\n    max_diff = float('-inf')\n    \n    # Compare each pair of elements in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the absolute difference between current pair\n            current_diff = abs(test_list[i] - test_list[j])\n            \n            # Update max difference if current difference is larger\n            max_diff = max(max_diff, current_diff)\n    \n    return max_diff\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
    "timestamp": "2025-10-17T18:49:16.612225",
    "response_time": "3.40",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 64,
    "solution": "===START===\ndef subject_marks(subjectmarks):\n    \"\"\"\n    Sort a list of tuples based on the second value (marks) of each tuple.\n    \n    Args:\n        subjectmarks (list): A list of tuples where each tuple contains \n                              (subject, marks)\n    \n    Returns:\n        list: A new list of tuples sorted by marks in ascending order\n    \"\"\"\n    return sorted(subjectmarks, key=lambda x: x[1])\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
    "timestamp": "2025-10-17T18:49:19.408894",
    "response_time": "2.79",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 65,
    "solution": "===START===\ndef recursive_list_sum(data_list):\n    \"\"\"\n    Recursively flatten a nested list and sum all of its elements.\n    \n    Args:\n        data_list (list): A potentially nested list of numbers\n    \n    Returns:\n        int/float: Sum of all numeric elements in the flattened list\n    \"\"\"\n    total = 0\n    \n    for item in data_list:\n        if isinstance(item, list):\n            # If item is a list, recursively sum its elements\n            total += recursive_list_sum(item)\n        elif isinstance(item, (int, float)):\n            # If item is a number, add it to the total\n            total += item\n    \n    return total\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
    "timestamp": "2025-10-17T18:49:22.489033",
    "response_time": "3.08",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 66,
    "solution": "===START===\ndef pos_count(list):\n    \"\"\"\n    Count the number of positive numbers in the given list.\n    \n    Args:\n        list (list): A list of numbers\n    \n    Returns:\n        int: Number of positive numbers in the list\n    \"\"\"\n    return sum(1 for num in list if num > 0)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
    "timestamp": "2025-10-17T18:49:24.769479",
    "response_time": "2.28",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 67,
    "solution": "I'll solve this by implementing the Bell number calculation using a dynamic programming approach.\n\n===START===\ndef bell_number(n):\n    \"\"\"\n    Calculate the Bell number for a given set size n.\n    Bell number represents the number of ways to partition a set of n elements.\n    \n    Args:\n        n (int): Size of the set\n    \n    Returns:\n        int: Number of ways to partition the set\n    \"\"\"\n    # Create a 2D array to store Bell triangle values\n    bell_triangle = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # First value is always 1\n    bell_triangle[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # First value of each row is the last value of previous row\n        bell_triangle[i][0] = bell_triangle[i-1][i-1]\n        \n        # Calculate other values in the row\n        for j in range(1, i+1):\n            bell_triangle[i][j] = bell_triangle[i-1][j-1] + bell_triangle[i][j-1]\n    \n    # The Bell number is the last value of the first column\n    return bell_triangle[n][0]\n===END===\n\nThe solution uses the Bell triangle method to calculate Bell numbers efficiently:\n\n1. We create a 2D array `bell_triangle` to store intermediate values.\n2. The first value is always 1.\n3. We fill the triangle using the recurrence relation:\n   - First value of each row is the last value of the previous row\n   - Other values are calculated by summing the value above and to the left\n4. The Bell number is the first value of the last row\n\nTime complexity is O(n\u00b2), and space complexity is also O(n\u00b2).\n\nExample:\n- bell_number(0) returns 1\n- bell_number(1) returns 1\n- bell_number(2) returns 2\n- bell_number(3) returns 5\n- bell_number(4) returns 15\n\nThe function calculates the total number of ways to partition a set of n elements into non-empty subsets.",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
    "timestamp": "2025-10-17T18:49:33.693835",
    "response_time": "8.92",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 68,
    "solution": "===START===\ndef is_Monotonic(A):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n    \n    A monotonic array is an array that is either monotonically increasing or monotonically decreasing.\n    \n    Args:\n    A (list): Input list of numbers\n    \n    Returns:\n    bool: True if the array is monotonic, False otherwise\n    \"\"\"\n    # If array has 0 or 1 element, it is always monotonic\n    if len(A) <= 1:\n        return True\n    \n    # Check if array is monotonically increasing\n    increasing = all(A[i] <= A[i+1] for i in range(len(A)-1))\n    \n    # Check if array is monotonically decreasing\n    decreasing = all(A[i] >= A[i+1] for i in range(len(A)-1))\n    \n    # Return True if array is either increasing or decreasing\n    return increasing or decreasing\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
    "timestamp": "2025-10-17T18:49:38.716996",
    "response_time": "5.02",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 69,
    "solution": "===START===\ndef is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist.\n    \n    Args:\n    l (list): The main list to search in\n    s (list): The sublist to search for\n    \n    Returns:\n    bool: True if the sublist is found in the main list, False otherwise\n    \"\"\"\n    # If sublist is empty, return True\n    if not s:\n        return True\n    \n    # If sublist is longer than main list, return False\n    if len(s) > len(l):\n        return False\n    \n    # Iterate through the main list\n    for i in range(len(l) - len(s) + 1):\n        # Check if the current slice matches the sublist\n        if l[i:i+len(s)] == s:\n            return True\n    \n    # If no match found, return False\n    return False\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
    "timestamp": "2025-10-17T18:49:42.509605",
    "response_time": "3.79",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 70,
    "solution": "===START===\ndef find_equal_tuple(Input):\n    # Check if Input is empty or contains only one tuple\n    if len(Input) <= 1:\n        return True\n    \n    # Get the length of the first tuple\n    first_length = len(Input[0])\n    \n    # Compare the length of each subsequent tuple with the first tuple's length\n    for tuple_item in Input[1:]:\n        if len(tuple_item) != first_length:\n            return False\n    \n    # If all tuples have the same length, return True\n    return True\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
    "timestamp": "2025-10-17T18:49:45.346082",
    "response_time": "2.83",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 71,
    "solution": "===START===\ndef comb_sort(nums):\n    \"\"\"\n    Implement comb sort algorithm to sort a list of elements in ascending order.\n    \n    Args:\n        nums (list): List of comparable elements to be sorted\n    \n    Returns:\n        list: Sorted list in ascending order\n    \"\"\"\n    # If list is empty or has only one element, return it as is\n    if len(nums) <= 1:\n        return nums\n    \n    # Initialize gap as length of list\n    gap = len(nums)\n    \n    # Set shrink factor\n    shrink = 1.3\n    \n    # Flag to track if any swaps occurred\n    swapped = True\n    \n    while gap > 1 or swapped:\n        # Reduce gap\n        gap = max(1, int(gap / shrink))\n        \n        # Reset swap flag\n        swapped = False\n        \n        # Compare elements with current gap\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                # Swap elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    \n    return nums\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
    "timestamp": "2025-10-17T18:49:50.792954",
    "response_time": "5.44",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 72,
    "solution": "===START===\ndef dif_Square(n):\n    # Check for all possible combinations of squares that can form the difference\n    for i in range(int(n**0.5) + 1):\n        for j in range(i + 1, int(n**0.5) + 2):\n            # Check if the difference of squares equals the given number\n            if j*j - i*i == n:\n                return True\n    return False\n===END===\n\nThe function `dif_Square` works as follows:\n1. It takes a number `n` as input\n2. Uses nested loops to iterate through possible square numbers\n3. Checks if the difference between two squares (j\u00b2-i\u00b2) equals the input number\n4. Returns `True` if such a difference is found\n5. Returns `False` if no such combination exists\n\nKey points:\n- The outer loop starts from 0 and goes up to square root of n\n- The inner loop starts from i+1 to ensure j > i\n- Uses the algebraic identity a\u00b2 - b\u00b2 = (a+b)(a-b)\n- Time complexity is O(n^(1/2))\n- Handles both positive and non-negative input numbers\n\nExample:\n- dif_Square(5) returns True (3\u00b2 - 2\u00b2 = 9 - 4 = 5)\n- dif_Square(7) returns False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
    "timestamp": "2025-10-17T18:49:57.384488",
    "response_time": "6.59",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 74,
    "solution": "===START===\ndef is_samepatterns(colors, patterns):\n    # If lengths are different, patterns can't match\n    if len(colors) != len(patterns):\n        return False\n    \n    # Create mappings to track color to pattern and pattern to color\n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    # Iterate through colors and patterns simultaneously \n    for color, pattern in zip(colors, patterns):\n        # Check if color already mapped to a pattern\n        if color in color_to_pattern:\n            # If mapped pattern doesn't match current pattern, return False\n            if color_to_pattern[color] != pattern:\n                return False\n        # Check if pattern already mapped to a color\n        elif pattern in pattern_to_color:\n            # If mapped color doesn't match current color, return False\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            # Create new mappings\n            color_to_pattern[color] = pattern\n            pattern_to_color[pattern] = color\n    \n    # If all checks pass, patterns match\n    return True\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
    "timestamp": "2025-10-17T18:50:02.066494",
    "response_time": "4.68",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 75,
    "solution": "===START===\ndef find_tuples(test_list, K):\n    \"\"\"\n    Find tuples where all elements are divisible by K.\n    \n    Args:\n        test_list (list): List of tuples to check\n        K (int): Divisor to check against\n    \n    Returns:\n        list: List of tuples where all elements are divisible by K\n    \"\"\"\n    # Use list comprehension to filter tuples \n    # where all elements are divisible by K\n    return [tup for tup in test_list if all(x % K == 0 for x in tup)]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
    "timestamp": "2025-10-17T18:50:05.517877",
    "response_time": "3.45",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 77,
    "solution": "===START===\ndef is_Diff(n):\n    \"\"\"\n    Check if a given number is divisible by 11.\n    \n    Args:\n        n (int): The number to check for divisibility by 11\n    \n    Returns:\n        bool: True if the number is divisible by 11, False otherwise\n    \"\"\"\n    return n % 11 == 0\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
    "timestamp": "2025-10-17T18:50:09.282389",
    "response_time": "3.76",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 79,
    "solution": "===START===\ndef word_len(s):\n    \"\"\"\n    Check whether the length of the given word is odd or not.\n    \n    Args:\n        s (str): The input word to check\n    \n    Returns:\n        bool: True if the length of the word is odd, False otherwise\n    \"\"\"\n    return len(s) % 2 != 0\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
    "timestamp": "2025-10-17T18:50:14.410970",
    "response_time": "5.13",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 80,
    "solution": "===START===\ndef tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    A tetrahedral number is the sum of the first n triangular numbers.\n    It represents the number of objects needed to form a tetrahedral pyramid.\n    \n    Args:\n        n (int): The position of the tetrahedral number to calculate\n    \n    Returns:\n        int: The nth tetrahedral number\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
    "timestamp": "2025-10-17T18:50:17.169474",
    "response_time": "2.76",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 82,
    "solution": "===START===\nimport math\n\ndef volume_sphere(r):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n    \n    Args:\n        r (float): Radius of the sphere\n    \n    Returns:\n        float: Volume of the sphere\n    \"\"\"\n    return (4/3) * math.pi * (r ** 3)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
    "timestamp": "2025-10-17T18:50:19.043548",
    "response_time": "1.87",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 83,
    "solution": "===START===\ndef get_Char(strr):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in strr)\n    \n    # Take modulo 26 to get a value between 0-25\n    result_index = ascii_sum % 26\n    \n    # Convert the index to corresponding uppercase letter\n    return chr(result_index + 65)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
    "timestamp": "2025-10-17T18:50:21.871067",
    "response_time": "2.82",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 84,
    "solution": "===START===\ndef sequence(n):\n    # Handle base cases\n    if n <= 0:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    \n    # Initialize the sequence list with first two elements\n    seq = [0, 1, 1]\n    \n    # Generate subsequent numbers in the sequence\n    for i in range(3, n + 1):\n        # Newman-Conway sequence rule: \n        # P(n) = P(P(n-1)) + P(n-2)\n        next_num = seq[seq[i-1]] + seq[i-2]\n        seq.append(next_num)\n    \n    # Return the nth number in the sequence\n    return seq[n]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
    "timestamp": "2025-10-17T18:50:25.293586",
    "response_time": "3.42",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 85,
    "solution": "===START===\nimport math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n    \n    Args:\n        r (float): Radius of the sphere\n    \n    Returns:\n        float: Surface area of the sphere\n    \"\"\"\n    return 4 * math.pi * r**2\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
    "timestamp": "2025-10-17T18:50:27.456582",
    "response_time": "2.16",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 86,
    "solution": "===START===\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n    \n    A centered hexagonal number is a figurate number that represents a hexagon \n    with a dot in the center and all other dots surrounding the center in a hexagonal pattern.\n    \n    The formula for the nth centered hexagonal number is: 1 + 6 * (n * (n - 1) / 2)\n    \n    Args:\n        n (int): The position of the centered hexagonal number (n >= 1)\n    \n    Returns:\n        int: The nth centered hexagonal number\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 1 + 6 * (n * (n - 1) // 2)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
    "timestamp": "2025-10-17T18:50:31.984957",
    "response_time": "4.53",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 87,
    "solution": "===START===\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \n    Args:\n        dict1 (dict): First dictionary to merge\n        dict2 (dict): Second dictionary to merge\n        dict3 (dict): Third dictionary to merge\n    \n    Returns:\n        dict: A new dictionary containing all key-value pairs from the input dictionaries\n    \"\"\"\n    # Create a new dictionary and update it with key-value pairs from each input dictionary\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    \n    return merged_dict\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
    "timestamp": "2025-10-17T18:50:35.262022",
    "response_time": "3.27",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 88,
    "solution": "===START===\ndef freq_count(list1):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in the input list.\n    \n    Args:\n        list1 (list): Input list of elements\n    \n    Returns:\n        dict: Dictionary with elements as keys and their frequencies as values\n    \"\"\"\n    # Create an empty dictionary to store frequencies\n    freq_dict = {}\n    \n    # Iterate through each element in the list\n    for item in list1:\n        # If item already exists in dictionary, increment its count\n        # If not, initialize its count to 1\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    \n    return freq_dict\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):",
    "timestamp": "2025-10-17T18:50:38.363932",
    "response_time": "3.10",
    "context": "{\"function_name\": \"freq_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 89,
    "solution": "===START===\ndef closest_num(N):\n    \"\"\"\n    Find the closest smaller number than the given number N.\n    \n    Args:\n        N (int): The input number\n    \n    Returns:\n        int: The closest smaller number\n    \"\"\"\n    # If N is 0 or 1, return 0 as there's no smaller positive number\n    if N <= 1:\n        return 0\n    \n    # Start checking from N-1 and go down\n    for num in range(N-1, 0, -1):\n        return num\n\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):",
    "timestamp": "2025-10-17T18:50:41.347069",
    "response_time": "2.98",
    "context": "{\"function_name\": \"closest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 90,
    "solution": "===START===\ndef len_log(list1):\n    \"\"\"\n    Find the length of the longest word in a given list of words.\n    \n    Args:\n        list1 (list): A list of strings/words\n    \n    Returns:\n        int: Length of the longest word in the list\n    \"\"\"\n    # If the list is empty, return 0\n    if not list1:\n        return 0\n    \n    # Use max() with key parameter to find the length of the longest word\n    return max(len(word) for word in list1)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):",
    "timestamp": "2025-10-17T18:50:43.940269",
    "response_time": "2.59",
    "context": "{\"function_name\": \"len_log\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 91,
    "solution": "===START===\ndef find_substring(str1, sub_str):\n    \"\"\"\n    Check if a substring is present in any string within a list of strings.\n    \n    Args:\n        str1 (list): A list of strings to search through\n        sub_str (str): The substring to search for\n    \n    Returns:\n        bool: True if substring is found in any string, False otherwise\n    \"\"\"\n    # Iterate through each string in the list\n    for string in str1:\n        # Check if substring is present in current string\n        if sub_str in string:\n            return True\n    \n    # Return False if substring is not found in any string\n    return False\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):",
    "timestamp": "2025-10-17T18:50:46.913573",
    "response_time": "2.97",
    "context": "{\"function_name\": \"find_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 92,
    "solution": "===START===\ndef is_undulating(n):\n    # Convert number to string for easy digit comparison\n    num_str = str(n)\n    \n    # Check if number has less than 3 digits\n    if len(num_str) < 3:\n        return False\n    \n    # Track alternating up/down pattern\n    is_increasing = int(num_str[0]) < int(num_str[1])\n    \n    # Check each consecutive digit pair\n    for i in range(1, len(num_str) - 1):\n        # If current digit is increasing\n        if int(num_str[i]) < int(num_str[i+1]):\n            # Should be opposite of previous pattern\n            if is_increasing:\n                return False\n            is_increasing = True\n        \n        # If current digit is decreasing\n        elif int(num_str[i]) > int(num_str[i+1]):\n            # Should be opposite of previous pattern\n            if not is_increasing:\n                return False\n            is_increasing = False\n        \n        # If digits are equal, not an undulating number\n        else:\n            return False\n    \n    return True\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):",
    "timestamp": "2025-10-17T18:50:51.522830",
    "response_time": "4.61",
    "context": "{\"function_name\": \"is_undulating\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 93,
    "solution": "===START===\ndef power(a, b):\n    \"\"\"\n    Calculate the value of 'a' raised to the power of 'b'.\n    \n    Args:\n        a (int or float): Base number\n        b (int): Exponent\n    \n    Returns:\n        int or float: Result of a raised to the power of b\n    \"\"\"\n    return a ** b\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):",
    "timestamp": "2025-10-17T18:50:53.614271",
    "response_time": "2.09",
    "context": "{\"function_name\": \"power\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 94,
    "solution": "===START===\ndef index_minimum(test_list):\n    \"\"\"\n    Returns the first value of the tuple with the smallest second value.\n    \n    Args:\n        test_list (list): A list of tuples where each tuple contains two values\n    \n    Returns:\n        The first value of the tuple with the smallest second value\n    \"\"\"\n    if not test_list:\n        return None\n    \n    # Find the tuple with the minimum second value\n    min_tuple = min(test_list, key=lambda x: x[1])\n    \n    # Return the first value of that tuple\n    return min_tuple[0]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):",
    "timestamp": "2025-10-17T18:50:56.484871",
    "response_time": "2.87",
    "context": "{\"function_name\": \"index_minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 95,
    "solution": "===START===\ndef Find_Min_Length(lst):\n    # Check if the input list is empty\n    if not lst:\n        return 0\n    \n    # Use min() with a key function to find the length of the smallest list\n    return min(len(sublist) for sublist in lst)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):",
    "timestamp": "2025-10-17T18:50:58.893049",
    "response_time": "2.41",
    "context": "{\"function_name\": \"Find_Min_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 96,
    "solution": "===START===\ndef divisor(n):\n    # Handle special cases for 0 and negative numbers\n    if n <= 0:\n        return 0\n    \n    # Count the number of divisors\n    count = 0\n    \n    # Check divisors from 1 to the number itself\n    for i in range(1, n + 1):\n        # If i divides n without remainder, it's a divisor\n        if n % i == 0:\n            count += 1\n    \n    return count\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):",
    "timestamp": "2025-10-17T18:51:01.885556",
    "response_time": "2.99",
    "context": "{\"function_name\": \"divisor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 97,
    "solution": "===START===\nfrom collections import Counter\n\ndef frequency_lists(list1):\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # Use Counter to count frequency of each element\n    frequency_dict = dict(Counter(flattened_list))\n    \n    return frequency_dict\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):",
    "timestamp": "2025-10-17T18:51:03.798702",
    "response_time": "1.91",
    "context": "{\"function_name\": \"frequency_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 98,
    "solution": "===START===\ndef multiply_num(numbers):\n    # Check if the list is empty to avoid division by zero\n    if not numbers:\n        return 0\n    \n    # Calculate the product of all numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    # Divide the product by the length of the list\n    return product / len(numbers)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):",
    "timestamp": "2025-10-17T18:51:05.768731",
    "response_time": "1.97",
    "context": "{\"function_name\": \"multiply_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 99,
    "solution": "===START===\ndef decimal_to_binary(n):\n    # Handle special case of 0\n    if n == 0:\n        return \"0\"\n    \n    # List to store binary digits\n    binary = []\n    \n    # Convert decimal to binary\n    while n > 0:\n        # Get remainder when divided by 2 (0 or 1)\n        remainder = n % 2\n        # Prepend remainder to binary list\n        binary.insert(0, str(remainder))\n        # Integer divide by 2\n        n //= 2\n    \n    # Join binary digits and return as string\n    return ''.join(binary)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):",
    "timestamp": "2025-10-17T18:51:09.020078",
    "response_time": "3.25",
    "context": "{\"function_name\": \"decimal_to_binary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 100,
    "solution": "===START===\ndef next_smallest_palindrome(num):\n    # Convert number to string for easier manipulation\n    num_str = str(num)\n    n = len(num_str)\n    \n    # If number is single digit, return next number\n    if n == 1:\n        return num + 1 if num < 9 else 11\n    \n    # Handle cases where number is already a palindrome\n    is_all_9s = all(digit == '9' for digit in num_str)\n    if is_all_9s:\n        return int('1' + '0' * (n - 1) + '1')\n    \n    # Split number into left and right halves\n    left_half = num_str[:(n+1)//2]\n    \n    # Create palindrome by mirroring left half\n    if n % 2 == 0:\n        # Even length palindrome\n        palindrome = left_half + left_half[::-1]\n    else:\n        # Odd length palindrome\n        palindrome = left_half + left_half[:-1][::-1]\n    \n    # If palindrome is smaller, increment left half\n    if int(palindrome) <= num:\n        # Increment left half\n        left_half = str(int(left_half) + 1)\n        \n        # Recreate palindrome with new left half\n        if n % 2 == 0:\n            palindrome = left_half + left_half[::-1]\n        else:\n            palindrome = left_half + left_half[:-1][::-1]\n    \n    return int(palindrome)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):",
    "timestamp": "2025-10-17T18:51:15.327078",
    "response_time": "6.30",
    "context": "{\"function_name\": \"next_smallest_palindrome\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 101,
    "solution": "===START===\ndef kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n    \n    Args:\n    arr (list): Input array of elements\n    k (int): 1-based index of the element to find\n    \n    Returns:\n    The kth element in the array\n    \n    Raises:\n    IndexError: If k is less than 1 or greater than the array length\n    \"\"\"\n    # Check if k is valid \n    if k < 1 or k > len(arr):\n        raise IndexError(\"k is out of range\")\n    \n    # Return the kth element using 1-based indexing \n    # Subtract 1 to convert to 0-based indexing for list access\n    return arr[k-1]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):",
    "timestamp": "2025-10-17T18:51:19.037114",
    "response_time": "3.71",
    "context": "{\"function_name\": \"kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 102,
    "solution": "===START===\ndef snake_to_camel(word):\n    # Split the snake_case string into words\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word except the first one\n    camel_case_words = [words[0]] + [w.capitalize() for w in words[1:]]\n    \n    # Join the words together\n    return ''.join(camel_case_words)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
    "timestamp": "2025-10-17T18:51:21.407142",
    "response_time": "2.37",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 103,
    "solution": "===START===\ndef eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m)\n    \n    Eulerian number represents the number of permutations of the set {1, ..., n} \n    with exactly m ascents (number of positions where the next element is greater than the previous)\n    \n    Args:\n        n (int): Total number of elements \n        m (int): Number of ascents\n    \n    Returns:\n        int: Eulerian number a(n, m)\n    \"\"\"\n    # Base cases\n    if m < 0 or m >= n:\n        return 0\n    \n    if n == 0 and m == 0:\n        return 1\n    \n    # Use dynamic programming to calculate Eulerian numbers\n    # Create a 2D table to store intermediate results\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Initialize base case\n    dp[0][0] = 1\n    \n    # Fill the dynamic programming table\n    for i in range(1, n + 1):\n        for j in range(min(m + 1, i)):\n            # Recurrence relation for Eulerian numbers\n            # a(n, m) = (m + 1) * a(n-1, m) + (n - m) * a(n-1, m-1)\n            dp[i][j] = (j + 1) * dp[i-1][j] + (i - j) * dp[i-1][j-1]\n    \n    return dp[n][m]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):",
    "timestamp": "2025-10-17T18:51:27.860308",
    "response_time": "6.45",
    "context": "{\"function_name\": \"eulerian_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 104,
    "solution": "===START===\ndef sort_sublists(input_list):\n    \"\"\"\n    Sort each sublist of strings in the given list of lists.\n    \n    Args:\n        input_list (list): A list of lists containing strings\n    \n    Returns:\n        list: A new list with each sublist sorted alphabetically\n    \"\"\"\n    return [sorted(sublist) for sublist in input_list]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):",
    "timestamp": "2025-10-17T18:51:29.889205",
    "response_time": "2.03",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 105,
    "solution": "===START===\ndef count(lst):\n    \"\"\"\n    Count the number of True boolean values in the given list.\n    \n    Args:\n        lst (list): A list containing boolean values\n    \n    Returns:\n        int: Number of True values in the list\n    \"\"\"\n    return sum(1 for item in lst if item is True)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):",
    "timestamp": "2025-10-17T18:51:31.843699",
    "response_time": "1.95",
    "context": "{\"function_name\": \"count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 106,
    "solution": "===START===\ndef add_lists(test_list, test_tup):\n    \"\"\"\n    Append the given list to the given tuples.\n    \n    Args:\n        test_list (list): The list to be appended\n        test_tup (tuple): The tuple to append the list to\n    \n    Returns:\n        tuple: A new tuple with the list appended\n    \"\"\"\n    # Convert the tuple to a list to allow modification\n    result_list = list(test_tup)\n    \n    # Extend the list with the elements from test_list\n    result_list.extend(test_list)\n    \n    # Convert back to tuple and return\n    return tuple(result_list)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):",
    "timestamp": "2025-10-17T18:51:34.932567",
    "response_time": "3.09",
    "context": "{\"function_name\": \"add_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 108,
    "solution": "===START===\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \n    Args:\n        num1 (list): First sorted input list\n        num2 (list): Second sorted input list\n        num3 (list): Third sorted input list\n    \n    Returns:\n        list: A single sorted list containing all elements from input lists\n    \"\"\"\n    # Combine all three lists\n    merged = num1 + num2 + num3\n    \n    # Sort the combined list\n    merged.sort()\n    \n    return merged\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):",
    "timestamp": "2025-10-17T18:51:37.598940",
    "response_time": "2.66",
    "context": "{\"function_name\": \"merge_sorted_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 109,
    "solution": "===START===\ndef odd_Equivalent(s, n):\n    \"\"\"\n    Find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \n    Args:\n    s (str): A binary string\n    n (int): Number of rotations\n    \n    Returns:\n    int: Count of numbers with odd value after rotations\n    \"\"\"\n    # Track count of odd numbers after rotations\n    odd_count = 0\n    \n    # Perform n rotations\n    for i in range(n + 1):\n        # Rotate the string\n        rotated = s[i:] + s[:i]\n        \n        # Convert rotated binary string to integer\n        num = int(rotated, 2)\n        \n        # Check if number is odd\n        if num % 2 != 0:\n            odd_count += 1\n    \n    return odd_count\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):",
    "timestamp": "2025-10-17T18:51:41.656712",
    "response_time": "4.05",
    "context": "{\"function_name\": \"odd_Equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 111,
    "solution": "===START===\ndef common_in_nested_lists(nestedlist):\n    # If the nested list is empty, return an empty list\n    if not nestedlist:\n        return []\n    \n    # Convert the first sublist to a set\n    common_elements = set(nestedlist[0])\n    \n    # Iterate through the remaining sublists\n    for sublist in nestedlist[1:]:\n        # Intersect the current set of common elements with the current sublist\n        common_elements = common_elements.intersection(set(sublist))\n    \n    # Convert back to a list and return\n    return list(common_elements)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):",
    "timestamp": "2025-10-17T18:51:44.500575",
    "response_time": "2.84",
    "context": "{\"function_name\": \"common_in_nested_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 113,
    "solution": "===START===\ndef check_integer(text):\n    \"\"\"\n    Check if the given text represents a valid integer.\n    \n    Args:\n        text (str): The string to be checked\n    \n    Returns:\n        bool: True if the string represents an integer, False otherwise\n    \"\"\"\n    # Remove leading and trailing whitespace\n    text = text.strip()\n    \n    # Check if the string is empty\n    if not text:\n        return False\n    \n    # Handle optional sign at the beginning\n    if text[0] in ['+', '-']:\n        text = text[1:]\n    \n    # Check if the remaining characters are all digits\n    return text.isdigit()\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):",
    "timestamp": "2025-10-17T18:51:47.619838",
    "response_time": "3.12",
    "context": "{\"function_name\": \"check_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 115,
    "solution": "===START===\ndef empty_dit(list1):\n    \"\"\"\n    Check whether all dictionaries in a list are empty or not.\n    \n    Args:\n        list1 (list): A list of dictionaries\n    \n    Returns:\n        bool: True if all dictionaries are empty, False otherwise\n    \"\"\"\n    # Check if the list is empty\n    if not list1:\n        return False\n    \n    # Use all() with a generator expression to check if each dictionary is empty\n    return all(len(dict_item) == 0 for dict_item in list1)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):",
    "timestamp": "2025-10-17T18:51:50.286519",
    "response_time": "2.66",
    "context": "{\"function_name\": \"empty_dit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 116,
    "solution": "===START===\ndef tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \n    Args:\n        nums (tuple): A tuple of positive integers\n    \n    Returns:\n        int: A single integer formed by concatenating the input integers\n    \"\"\"\n    # Convert each integer to string\n    str_nums = [str(num) for num in nums]\n    \n    # Join the string representations and convert back to integer\n    return int(''.join(str_nums))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):",
    "timestamp": "2025-10-17T18:51:52.825438",
    "response_time": "2.54",
    "context": "{\"function_name\": \"tuple_to_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 117,
    "solution": "===START===\ndef list_to_float(test_list):\n    \"\"\"\n    Convert all possible elements in a list of lists to floats.\n    \n    Args:\n        test_list (list): A list of lists containing mixed data types\n    \n    Returns:\n        list: A new list with convertible elements converted to floats\n    \"\"\"\n    # Create a new list to store the converted result\n    converted_list = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in test_list:\n        # Create a new sublist to store converted elements\n        converted_sublist = []\n        \n        # Iterate through each element in the sublist\n        for item in sublist:\n            try:\n                # Attempt to convert the item to float\n                converted_item = float(item)\n                converted_sublist.append(converted_item)\n            except (ValueError, TypeError):\n                # If conversion fails, keep the original item\n                converted_sublist.append(item)\n        \n        # Add the converted sublist to the result\n        converted_list.append(converted_sublist)\n    \n    return converted_list\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):",
    "timestamp": "2025-10-17T18:51:57.006503",
    "response_time": "4.18",
    "context": "{\"function_name\": \"list_to_float\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 118,
    "solution": "===START===\ndef string_to_list(string):\n    return string.split()\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):",
    "timestamp": "2025-10-17T18:51:58.641302",
    "response_time": "1.63",
    "context": "{\"function_name\": \"string_to_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 119,
    "solution": "===START===\ndef search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n    \n    Args:\n        arr (list): A sorted array where all elements appear twice except one unique element\n    \n    Returns:\n        int: The element that appears only once\n    \"\"\"\n    # If array has only one element, return that element\n    if len(arr) == 1:\n        return arr[0]\n    \n    # Check first and last elements as edge cases\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    \n    # Binary search to find unique element\n    left, right = 1, len(arr) - 2\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if mid element is unique\n        if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]:\n            return arr[mid]\n        \n        # If mid is even index, check if unique element is on left side\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid+1]:\n                left = mid + 2\n            else:\n                right = mid - 2\n        \n        # If mid is odd index, check if unique element is on left side\n        else:\n            if arr[mid] == arr[mid-1]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    \n    # If no unique element found\n    return None\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):",
    "timestamp": "2025-10-17T18:52:04.542923",
    "response_time": "5.90",
    "context": "{\"function_name\": \"search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 120,
    "solution": "===START===\ndef max_product_tuple(list1):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \n    Args:\n        list1 (list): A list of tuples containing numeric values\n    \n    Returns:\n        float: The maximum absolute product between numbers in tuple pairs\n    \"\"\"\n    # Handle empty list case\n    if not list1:\n        return 0\n    \n    # Initialize max product to the absolute product of first tuple\n    max_prod = abs(list1[0][0] * list1[0][1])\n    \n    # Iterate through the list and calculate absolute product for each tuple\n    for a, b in list1:\n        current_prod = abs(a * b)\n        max_prod = max(max_prod, current_prod)\n    \n    return max_prod\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):",
    "timestamp": "2025-10-17T18:52:08.316118",
    "response_time": "3.77",
    "context": "{\"function_name\": \"max_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 123,
    "solution": "===START===\ndef sum_of_divisors(n):\n    \"\"\"Calculate the sum of proper divisors of a number.\"\"\"\n    return sum(i for i in range(1, n) if n % i == 0)\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Calculate the sum of all amicable numbers up to the given limit.\n    \n    An amicable number is a number that can be paired with another number \n    such that the sum of the proper divisors of each number equals the other number.\n    \n    Args:\n        limit (int): The upper bound for finding amicable numbers\n    \n    Returns:\n        int: Sum of all amicable numbers up to the limit\n    \"\"\"\n    amicable_sum = 0\n    \n    for a in range(2, limit):\n        # Calculate sum of divisors for a\n        b = sum_of_divisors(a)\n        \n        # Check if b is within limit and not equal to a\n        if b > a and b < limit:\n            # Check if a is the sum of divisors of b\n            if sum_of_divisors(b) == a:\n                amicable_sum += a + b\n    \n    return amicable_sum\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):",
    "timestamp": "2025-10-17T18:52:13.997341",
    "response_time": "5.68",
    "context": "{\"function_name\": \"amicable_numbers_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 124,
    "solution": "===START===\nimport math\n\ndef angle_complex(a, b):\n    \"\"\"\n    Calculate the angle (argument) of a complex number represented by real and imaginary parts.\n    \n    Args:\n        a (float): Real part of the complex number\n        b (float): Imaginary part of the complex number\n    \n    Returns:\n        float: Angle of the complex number in radians\n    \"\"\"\n    # Use math.atan2 to calculate the angle, which handles all quadrant cases\n    return math.atan2(b, a)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):",
    "timestamp": "2025-10-17T18:52:16.963872",
    "response_time": "2.96",
    "context": "{\"function_name\": \"angle_complex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 125,
    "solution": "===START===\ndef find_length(string):\n    \"\"\"\n    Find the maximum difference between the number of 0s and 1s in any sub-string of the given binary string.\n    \n    Args:\n        string (str): A binary string containing only '0' and '1' characters\n    \n    Returns:\n        int: Maximum difference between number of 0s and 1s in any sub-string\n    \"\"\"\n    max_diff = 0\n    n = len(string)\n    \n    # Try all possible sub-strings\n    for i in range(n):\n        for j in range(i, n):\n            # Count 0s and 1s in current sub-string\n            zeros = string[i:j+1].count('0')\n            ones = string[i:j+1].count('1')\n            \n            # Update max difference\n            max_diff = max(max_diff, abs(zeros - ones))\n    \n    return max_diff\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):",
    "timestamp": "2025-10-17T18:52:20.642979",
    "response_time": "3.68",
    "context": "{\"function_name\": \"find_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 126,
    "solution": "===START===\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum(a, b):\n    # Find the GCD of the two numbers\n    common_gcd = gcd(a, b)\n    \n    # Find the sum of common divisors\n    divisor_sum = 0\n    for i in range(1, common_gcd + 1):\n        if common_gcd % i == 0:\n            divisor_sum += i\n    \n    return divisor_sum\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):",
    "timestamp": "2025-10-17T18:52:23.253663",
    "response_time": "2.61",
    "context": "{\"function_name\": \"sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 127,
    "solution": "===START===\ndef multiply_int(x, y):\n    \"\"\"\n    Multiplies two integers and returns the result.\n    \n    Args:\n        x (int): First integer to multiply\n        y (int): Second integer to multiply\n    \n    Returns:\n        int: Product of x and y\n    \"\"\"\n    return x * y\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):",
    "timestamp": "2025-10-17T18:52:25.201057",
    "response_time": "1.94",
    "context": "{\"function_name\": \"multiply_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 128,
    "solution": "===START===\ndef long_words(n, str):\n    \"\"\"\n    Find words longer than n characters from a given list of words.\n    \n    Args:\n        n (int): Minimum length of words to return\n        str (list): List of words to check\n    \n    Returns:\n        list: Words from input list that are longer than n characters\n    \"\"\"\n    return [word for word in str if len(word) > n]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):",
    "timestamp": "2025-10-17T18:52:27.491396",
    "response_time": "2.29",
    "context": "{\"function_name\": \"long_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 129,
    "solution": "===START===\ndef magic_square_test(my_matrix):\n    # Check if matrix is square\n    if not my_matrix or len(my_matrix) == 0:\n        return False\n    \n    n = len(my_matrix)\n    for row in my_matrix:\n        if len(row) != n:\n            return False\n    \n    # Calculate expected magic sum\n    magic_sum = n * (n**2 + 1) // 2\n    \n    # Check row sums\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check column sums\n    for col in range(n):\n        column_sum = sum(my_matrix[row][col] for row in range(n))\n        if column_sum != magic_sum:\n            return False\n    \n    # Check main diagonal sum\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    if diag1_sum != magic_sum:\n        return False\n    \n    # Check secondary diagonal sum\n    diag2_sum = sum(my_matrix[i][n-1-i] for i in range(n))\n    if diag2_sum != magic_sum:\n        return False\n    \n    # Check if all numbers from 1 to n^2 are used exactly once\n    flat_matrix = [num for row in my_matrix for num in row]\n    if set(flat_matrix) != set(range(1, n**2 + 1)):\n        return False\n    \n    return True\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):",
    "timestamp": "2025-10-17T18:52:33.082575",
    "response_time": "5.59",
    "context": "{\"function_name\": \"magic_square_test\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 130,
    "solution": "===START===\nfrom collections import Counter\n\ndef max_occurrences(nums):\n    # If the list is empty, return None\n    if not nums:\n        return None\n    \n    # Use Counter to count occurrences of each item\n    freq_counter = Counter(nums)\n    \n    # Find the item with maximum frequency\n    max_freq_item = max(freq_counter, key=freq_counter.get)\n    \n    return max_freq_item\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):",
    "timestamp": "2025-10-17T18:52:35.559184",
    "response_time": "2.47",
    "context": "{\"function_name\": \"max_occurrences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 131,
    "solution": "===START===\ndef reverse_vowels(str1):\n    # Define vowels (lowercase and uppercase)\n    vowels = set('aeiouAEIOU')\n    \n    # Convert string to list for easier manipulation\n    chars = list(str1)\n    \n    # Use two-pointer approach to swap vowels\n    left, right = 0, len(chars) - 1\n    \n    while left < right:\n        # Move left pointer to first vowel\n        while left < right and chars[left] not in vowels:\n            left += 1\n        \n        # Move right pointer to first vowel from right\n        while left < right and chars[right] not in vowels:\n            right -= 1\n        \n        # Swap vowels\n        if left < right:\n            chars[left], chars[right] = chars[right], chars[left]\n            left += 1\n            right -= 1\n    \n    # Convert back to string and return\n    return ''.join(chars)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):",
    "timestamp": "2025-10-17T18:52:39.486886",
    "response_time": "3.92",
    "context": "{\"function_name\": \"reverse_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 132,
    "solution": "===START===\ndef tup_string(tup1):\n    \"\"\"\n    Convert a tuple to a string representation.\n    \n    Args:\n        tup1 (tuple): The input tuple to be converted to a string\n    \n    Returns:\n        str: A string representation of the input tuple\n    \"\"\"\n    return str(tup1)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):",
    "timestamp": "2025-10-17T18:52:41.596393",
    "response_time": "2.11",
    "context": "{\"function_name\": \"tup_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 133,
    "solution": "===START===\ndef sum_negativenum(nums):\n    \"\"\"\n    Calculate the sum of negative numbers in a given list.\n    \n    Args:\n        nums (list): A list of numbers\n    \n    Returns:\n        int: Sum of all negative numbers in the list\n    \"\"\"\n    return sum(num for num in nums if num < 0)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):",
    "timestamp": "2025-10-17T18:52:43.895319",
    "response_time": "2.29",
    "context": "{\"function_name\": \"sum_negativenum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 135,
    "solution": "===START===\ndef hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n    \n    A hexagonal number is a figurate number that extends the concept of triangular and square numbers \n    to the hexagonal pattern. The nth hexagonal number is calculated by the formula: n * (2n - 1)\n    \n    Args:\n        n (int): The position of the hexagonal number to calculate (n >= 1)\n    \n    Returns:\n        int: The nth hexagonal number\n    \"\"\"\n    return n * (2 * n - 1)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):",
    "timestamp": "2025-10-17T18:52:47.214294",
    "response_time": "3.32",
    "context": "{\"function_name\": \"hexagonal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 137,
    "solution": "===START===\ndef zero_count(nums):\n    \"\"\"\n    Calculate the ratio of zeroes to non-zeroes in an array of integers.\n    \n    Args:\n        nums (list): An array of integers\n    \n    Returns:\n        float: Ratio of zeroes to non-zeroes. Returns 0 if no non-zero elements exist.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    zero_count = sum(1 for num in nums if num == 0)\n    non_zero_count = sum(1 for num in nums if num != 0)\n    \n    # Avoid division by zero\n    if non_zero_count == 0:\n        return 0\n    \n    return zero_count / non_zero_count\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):",
    "timestamp": "2025-10-17T18:52:50.180876",
    "response_time": "2.96",
    "context": "{\"function_name\": \"zero_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 138,
    "solution": "===START===\ndef is_Sum_Of_Powers_Of_Two(n):\n    # If n is 0, it cannot be represented as sum of powers of 2\n    if n <= 0:\n        return False\n    \n    # Convert number to binary representation\n    binary = bin(n)[2:]\n    \n    # Check if binary representation contains only 1s\n    return all(bit == '1' for bit in binary)\n===END===\n\nThe solution works as follows:\n1. First, we check if the input number is less than or equal to 0. If so, return False.\n2. Convert the number to its binary representation using bin() function and remove the '0b' prefix\n3. Check if all bits in the binary representation are '1'\n   - If all bits are '1', it means the number can be represented as sum of non-zero powers of 2\n   - For example:\n     - 7 = 2^0 + 2^1 + 2^2 (binary 111)\n     - 15 = 2^0 + 2^1 + 2^2 + 2^3 (binary 1111)\n4. Return True if all bits are '1', False otherwise\n\nExample:\n- is_Sum_Of_Powers_Of_Two(7) returns True\n- is_Sum_Of_Powers_Of_Two(10) returns False",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):",
    "timestamp": "2025-10-17T18:52:55.339632",
    "response_time": "5.15",
    "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 139,
    "solution": "===START===\nimport math\n\ndef circle_circumference(r):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n    \n    Args:\n        r (float): Radius of the circle\n    \n    Returns:\n        float: Circumference of the circle\n    \"\"\"\n    return 2 * math.pi * r\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):",
    "timestamp": "2025-10-17T18:52:57.338234",
    "response_time": "1.99",
    "context": "{\"function_name\": \"circle_circumference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 140,
    "solution": "===START===\ndef extract_singly(test_list):\n    \"\"\"\n    Flatten a list of lists into a single set of unique numbers.\n    \n    Args:\n        test_list (list): A list containing nested lists of numbers\n    \n    Returns:\n        set: A set of unique numbers from all nested lists\n    \"\"\"\n    # Use a set comprehension to flatten the list of lists and remove duplicates\n    return {num for sublist in test_list for num in sublist}\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):",
    "timestamp": "2025-10-17T18:52:59.873273",
    "response_time": "2.53",
    "context": "{\"function_name\": \"extract_singly\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 141,
    "solution": "===START===\ndef pancake_sort(nums):\n    \"\"\"\n    Perform pancake sort on the input list.\n    \n    Args:\n        nums (list): List of comparable elements to be sorted\n    \n    Returns:\n        list: Sorted list in ascending order\n    \"\"\"\n    def flip(arr, k):\n        \"\"\"\n        Reverse the first k elements of the list\n        \"\"\"\n        left = 0\n        while left < k:\n            arr[left], arr[k] = arr[k], arr[left]\n            left += 1\n            k -= 1\n        return arr\n\n    n = len(nums)\n    for curr_size in range(n, 1, -1):\n        # Find index of maximum element in unsorted portion\n        max_idx = nums.index(max(nums[:curr_size]))\n        \n        # If max is not already at the end, flip it to the beginning\n        # and then flip it to its correct position\n        if max_idx != curr_size - 1:\n            # If max is not at the start, flip to bring to start\n            if max_idx != 0:\n                nums = flip(nums, max_idx)\n            \n            # Flip to put max at its correct position\n            nums = flip(nums, curr_size - 1)\n    \n    return nums\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):",
    "timestamp": "2025-10-17T18:53:05.774999",
    "response_time": "5.90",
    "context": "{\"function_name\": \"pancake_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 142,
    "solution": "===START===\ndef count_samepair(list1, list2, list3):\n    \"\"\"\n    Count the number of items that are identical in the same position across three lists.\n    \n    Args:\n        list1 (list): First input list\n        list2 (list): Second input list\n        list3 (list): Third input list\n    \n    Returns:\n        int: Number of items that are identical in the same position\n    \"\"\"\n    # Find the minimum length among the three lists to avoid index out of range\n    min_length = min(len(list1), len(list2), len(list3))\n    \n    # Count identical items in the same position\n    count = sum(1 for i in range(min_length) \n                if list1[i] == list2[i] == list3[i])\n    \n    return count\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):",
    "timestamp": "2025-10-17T18:53:09.074943",
    "response_time": "3.30",
    "context": "{\"function_name\": \"count_samepair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 143,
    "solution": "===START===\ndef find_lists(Input):\n    \"\"\"\n    Function to count the number of lists present in the given tuple.\n    \n    Args:\n        Input (tuple): A tuple that may contain lists\n    \n    Returns:\n        int: Number of lists in the input tuple\n    \"\"\"\n    # Use sum with a generator expression to count lists\n    return sum(1 for item in Input if isinstance(item, list))\n\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):",
    "timestamp": "2025-10-17T18:53:11.523743",
    "response_time": "2.44",
    "context": "{\"function_name\": \"find_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 145,
    "solution": "===START===\ndef max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum absolute difference between any two elements in the given array.\n    \n    Args:\n        arr (list): Input list of numbers\n    \n    Returns:\n        int/float: Maximum absolute difference between any two elements\n    \"\"\"\n    # If array is empty or has only one element, return 0\n    if len(arr) < 2:\n        return 0\n    \n    # Find the minimum and maximum elements in the array\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Return the absolute difference between max and min\n    return abs(max_val - min_val)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):",
    "timestamp": "2025-10-17T18:53:14.522493",
    "response_time": "2.99",
    "context": "{\"function_name\": \"max_Abs_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 160,
    "solution": "===START===\ndef find_solution(a, b, n):\n    # Use extended Euclidean algorithm to find GCD and coefficients\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        \n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        \n        return gcd, x, y\n    \n    # Find GCD of a and b\n    gcd, x, y = extended_gcd(a, b)\n    \n    # Check if solution exists\n    if n % gcd != 0:\n        return None\n    \n    # Scale x and y to satisfy the equation\n    x *= n // gcd\n    y *= n // gcd\n    \n    return (x, y)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):",
    "timestamp": "2025-10-17T18:53:18.237247",
    "response_time": "3.71",
    "context": "{\"function_name\": \"find_solution\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 161,
    "solution": "===START===\ndef remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from list1 that are present in list2.\n    \n    Args:\n        list1 (list): The original list to remove elements from\n        list2 (list): The list containing elements to be removed\n    \n    Returns:\n        list: A new list with elements from list1 that are not in list2\n    \"\"\"\n    return [item for item in list1 if item not in list2]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):",
    "timestamp": "2025-10-17T18:53:20.874464",
    "response_time": "2.63",
    "context": "{\"function_name\": \"remove_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 162,
    "solution": "===START===\ndef sum_series(n):\n    \"\"\"\n    Calculate the sum of series (n - 2*i) from i=0 to n // 2\n    \n    Args:\n        n (int): The starting number for the series\n    \n    Returns:\n        int: The sum of the series\n    \"\"\"\n    # If n is less than 0, return 0\n    if n < 0:\n        return 0\n    \n    # Initialize sum\n    total = 0\n    \n    # Iterate from 0 to n // 2\n    for i in range(n // 2 + 1):\n        # Calculate current term and add to total\n        current_term = n - 2 * i\n        \n        # Stop if current term becomes non-positive\n        if current_term <= 0:\n            break\n        \n        total += current_term\n    \n    return total\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):",
    "timestamp": "2025-10-17T18:53:24.826232",
    "response_time": "3.95",
    "context": "{\"function_name\": \"sum_series\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 163,
    "solution": "===START===\nimport math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon.\n    \n    Args:\n    s (int): Number of sides in the polygon\n    l (float): Length of each side\n    \n    Returns:\n    float: Area of the regular polygon\n    \"\"\"\n    # Calculate the area using the formula: \n    # Area = (s * l^2) / (4 * tan(\u03c0/s))\n    area = (s * l**2) / (4 * math.tan(math.pi / s))\n    return area\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):",
    "timestamp": "2025-10-17T18:53:27.453789",
    "response_time": "2.62",
    "context": "{\"function_name\": \"area_polygon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 164,
    "solution": "I'll solve this by implementing the function to calculate the sum of divisors and then compare them.\n\n===START===\ndef div_sum(n, m):\n    \"\"\"\n    Determine if the sum of divisors for two integers are the same.\n    \n    Args:\n        n (int): First integer\n        m (int): Second integer\n    \n    Returns:\n        bool: True if sum of divisors are equal, False otherwise\n    \"\"\"\n    # Function to calculate sum of divisors\n    def divisor_sum(num):\n        # Handle negative numbers by taking absolute value\n        num = abs(num)\n        \n        # Special case for 0\n        if num == 0:\n            return 0\n        \n        # Find sum of all divisors\n        return sum(i for i in range(1, num + 1) if num % i == 0)\n    \n    # Compare sum of divisors for both numbers\n    return divisor_sum(n) == divisor_sum(m)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):",
    "timestamp": "2025-10-17T18:53:31.807710",
    "response_time": "4.35",
    "context": "{\"function_name\": \"are_equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 165,
    "solution": "===START===\ndef count_char_position(str1):\n    # Convert the input string to lowercase for case-insensitive comparison\n    str1 = str1.lower()\n    \n    # Define the lowercase English alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Initialize a counter for matching characters\n    count = 0\n    \n    # Iterate through the string, comparing each character with its position in the alphabet\n    for i in range(min(len(str1), len(alphabet))):\n        if str1[i] == alphabet[i]:\n            count += 1\n    \n    return count\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):",
    "timestamp": "2025-10-17T18:53:34.785786",
    "response_time": "2.97",
    "context": "{\"function_name\": \"count_char_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 166,
    "solution": "===START===\ndef find_even_pair(A):\n    \"\"\"\n    Count the number of pairs of integers in list A that xor to an even number.\n    \n    Args:\n        A (list): A list of integers\n    \n    Returns:\n        int: Number of pairs that xor to an even number\n    \"\"\"\n    count = 0\n    n = len(A)\n    \n    # Check all possible pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            # XOR the pair and check if result is even\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    \n    return count\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):",
    "timestamp": "2025-10-17T18:53:38.225909",
    "response_time": "3.44",
    "context": "{\"function_name\": \"find_even_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 167,
    "solution": "===START===\nimport math\n\ndef next_power_of_2(n):\n    # If n is already a power of 2, return n\n    if n > 0 and (n & (n - 1)) == 0:\n        return n\n    \n    # Find the smallest power of 2 greater than n\n    return 2 ** math.ceil(math.log2(n))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):",
    "timestamp": "2025-10-17T18:53:40.170519",
    "response_time": "1.94",
    "context": "{\"function_name\": \"next_power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 168,
    "solution": "===START===\ndef frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number x in the list a.\n    \n    Args:\n        a (list): The input list to search\n        x: The number to count occurrences of\n    \n    Returns:\n        int: The number of times x appears in the list\n    \"\"\"\n    return a.count(x)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):",
    "timestamp": "2025-10-17T18:53:42.726971",
    "response_time": "2.55",
    "context": "{\"function_name\": \"frequency\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 170,
    "solution": "===START===\ndef sum_range_list(list1, m, n):\n    \"\"\"\n    Calculate the sum of numbers in a list within the specified range of indices.\n    \n    Args:\n    list1 (list): The input list of numbers\n    m (int): The starting index (inclusive)\n    n (int): The ending index (inclusive)\n    \n    Returns:\n    int/float: Sum of numbers within the specified index range\n    \"\"\"\n    # Validate input indices\n    if m < 0 or n >= len(list1) or m > n:\n        return 0\n    \n    # Return sum of numbers within the specified range\n    return sum(list1[m:n+1])\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):",
    "timestamp": "2025-10-17T18:53:45.948589",
    "response_time": "3.22",
    "context": "{\"function_name\": \"sum_range_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 171,
    "solution": "===START===\ndef perimeter_pentagon(a):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of one side.\n    \n    Args:\n        a (float): Length of one side of the regular pentagon\n    \n    Returns:\n        float: Total perimeter of the pentagon\n    \"\"\"\n    return 5 * a\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):",
    "timestamp": "2025-10-17T18:53:48.579736",
    "response_time": "2.63",
    "context": "{\"function_name\": \"perimeter_pentagon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 172,
    "solution": "===START===\ndef count_occurance(s):\n    \"\"\"\n    Count the number of occurrences of the substring 'std' in the given string.\n    \n    Args:\n        s (str): The input string to search for 'std' occurrences\n    \n    Returns:\n        int: Number of times 'std' appears in the string\n    \"\"\"\n    return s.count('std')\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):",
    "timestamp": "2025-10-17T18:53:50.864846",
    "response_time": "2.28",
    "context": "{\"function_name\": \"count_occurance\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 222,
    "solution": "===START===\ndef check_type(test_tuple):\n    # If tuple is empty, return False\n    if not test_tuple:\n        return False\n    \n    # Get the type of the first element\n    first_type = type(test_tuple[0])\n    \n    # Check if all elements have the same type as the first element\n    return all(isinstance(item, first_type) for item in test_tuple)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):",
    "timestamp": "2025-10-17T18:53:53.282839",
    "response_time": "2.41",
    "context": "{\"function_name\": \"check_type\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 223,
    "solution": "===START===\ndef is_majority(arr, n, x):\n    \"\"\"\n    Determine if x is the majority element in the sorted array arr\n    \n    Args:\n    arr (list): A sorted array of integers\n    n (int): Length of the array\n    x (int): Element to check for majority\n    \n    Returns:\n    bool: True if x is the majority element, False otherwise\n    \"\"\"\n    # Find the first occurrence of x using binary search\n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            # Check if x appears more than n/2 times\n            # Check the index at mid + n/2 to see if it's still x\n            majority_index = mid + n // 2\n            \n            # Ensure the index is within array bounds and the element is x\n            if majority_index < n and arr[majority_index] == x:\n                return True\n            \n            # If not found on right side, search left side\n            if mid > 0 and arr[mid - 1] == x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):",
    "timestamp": "2025-10-17T18:53:58.711032",
    "response_time": "5.42",
    "context": "{\"function_name\": \"binary_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 224,
    "solution": "===START===\ndef count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits (1's) in the binary representation of a given number.\n    \n    Args:\n        n (int): The input number to count set bits\n    \n    Returns:\n        int: Number of set bits in the binary representation of n\n    \"\"\"\n    # Initialize bit count\n    count = 0\n    \n    # Continue until number becomes 0\n    while n:\n        # Check if least significant bit is 1\n        count += n & 1\n        \n        # Right shift the number by 1 bit\n        n >>= 1\n    \n    return count\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):",
    "timestamp": "2025-10-17T18:54:01.860049",
    "response_time": "3.15",
    "context": "{\"function_name\": \"count_Set_Bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 226,
    "solution": "===START===\ndef odd_values_string(str):\n    \"\"\"\n    Remove characters at odd index values from the given string.\n    \n    Args:\n        str (string): Input string to process\n    \n    Returns:\n        string: String with characters at odd indices removed\n    \"\"\"\n    return str[::2]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to remove the characters which have odd index values of a given string.\n\n### Signature\ndef odd_values_string(str):",
    "timestamp": "2025-10-17T18:54:03.946719",
    "response_time": "2.08",
    "context": "{\"function_name\": \"odd_values_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 227,
    "solution": "===START===\ndef min_of_three(a, b, c):\n    \"\"\"\n    Find the minimum value among three given numbers.\n    \n    Args:\n        a (int/float): First number\n        b (int/float): Second number\n        c (int/float): Third number\n    \n    Returns:\n        int/float: The minimum value among the three input numbers\n    \"\"\"\n    return min(a, b, c)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find minimum of three numbers.\n\n### Signature\ndef min_of_three(a,b,c):",
    "timestamp": "2025-10-17T18:54:06.470496",
    "response_time": "2.52",
    "context": "{\"function_name\": \"min_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 228,
    "solution": "I'll solve this problem by implementing a function to check if all bits are unset in a given range for a number.\n\n===START===\ndef all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a mask with 1s in the range [l, r]\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    \n    # Check if any bits are set in the given range\n    return (n & mask) == 0\n===END===\n\nLet me explain the solution:\n\n1. The function takes three parameters:\n   - `n`: The number to check\n   - `l`: The left (start) position of the range\n   - `r`: The right (end) position of the range\n\n2. Create a mask with 1s in the specified range:\n   - `(1 << (r - l + 1)) - 1` creates a binary number with `r - l + 1` consecutive 1s\n   - `<< (l - 1)` shifts these 1s to the correct position in the range\n\n3. Use bitwise AND (`&`) to check if any bits are set in the range\n   - If the result is 0, it means all bits in the range are unset\n   - Return `True` if all bits are unset, `False` otherwise\n\nExample:\n- `all_Bits_Set_In_The_Given_Range(10, 2, 3)` would return `False`\n  - 10 in binary is 1010\n  - Range 2-3 contains 01, which is not all unset\n- `all_Bits_Set_In_The_Given_Range(8, 1, 2)` would return `True`\n  - 8 in binary is 1000\n  - Range 1-2 contains 00, which is all unset",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether all the bits are unset in the given range or not.\n\n### Signature\ndef all_Bits_Set_In_The_Given_Range(n,l,r):",
    "timestamp": "2025-10-17T18:54:13.817511",
    "response_time": "7.34",
    "context": "{\"function_name\": \"all_Bits_Set_In_The_Given_Range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 229,
    "solution": "===START===\ndef re_arrange_array(arr, n):\n    # Create a new list to store the result\n    result = []\n    \n    # First, collect all negative elements from the first n elements\n    negatives = [x for x in arr[:n] if x < 0]\n    \n    # Then, collect all non-negative elements from the first n elements\n    non_negatives = [x for x in arr[:n] if x >= 0]\n    \n    # Combine negatives and non-negatives while preserving original order\n    result.extend(negatives)\n    result.extend(non_negatives)\n    \n    # Add remaining elements from the original array (if any)\n    result.extend(arr[n:])\n    \n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n### Signature\ndef re_arrange_array(arr, n):",
    "timestamp": "2025-10-17T18:54:17.092581",
    "response_time": "3.27",
    "context": "{\"function_name\": \"re_arrange_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 230,
    "solution": "===START===\ndef replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in the input string with the specified character.\n    \n    Args:\n        str1 (str): The input string to modify\n        char (str): The character to replace blank spaces with\n    \n    Returns:\n        str: A new string with blank spaces replaced by the specified character\n    \"\"\"\n    return str1.replace(' ', char)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n### Signature\ndef replace_blank(str1,char):",
    "timestamp": "2025-10-17T18:54:19.123006",
    "response_time": "2.02",
    "context": "{\"function_name\": \"replace_blank\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 232,
    "solution": "===START===\ndef larg_nnum(list1, n):\n    # Sort the list in descending order and slice the first n elements\n    return sorted(list1, reverse=True)[:n]\n===END===\n\nThe solution works as follows:\n1. `sorted(list1, reverse=True)` sorts the input list in descending order (largest to smallest)\n2. `[:n]` slices the first n elements from the sorted list\n3. Returns the list of n largest numbers\n\nKey points:\n- Works with lists of numbers\n- If n is larger than the list length, it returns the entire sorted list\n- Handles empty lists\n- Simple and concise one-line solution using Python's built-in sorting\n\nExample usage:\n```python\nprint(larg_nnum([5,2,8,1,9], 3))  # Would return [9,8,5]\nprint(larg_nnum([1,2,3], 2))      # Would return [3,2]\n```",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n### Signature\ndef larg_nnum(list1,n):",
    "timestamp": "2025-10-17T18:54:23.972147",
    "response_time": "4.85",
    "context": "{\"function_name\": \"larg_nnum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 233,
    "solution": "===START===\nimport math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n    \n    Args:\n    r (float): Radius of the cylinder\n    h (float): Height of the cylinder\n    \n    Returns:\n    float: Lateral surface area of the cylinder\n    \"\"\"\n    return 2 * math.pi * r * h\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cylinder.\n\n### Signature\ndef lateralsuface_cylinder(r,h):",
    "timestamp": "2025-10-17T18:54:25.989339",
    "response_time": "2.01",
    "context": "{\"function_name\": \"lateralsuface_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 234,
    "solution": "===START===\ndef volume_cube(l):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n    \n    Args:\n        l (float or int): Length of one side of the cube\n    \n    Returns:\n        float or int: Volume of the cube (side length cubed)\n    \"\"\"\n    return l ** 3\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the volume of a cube given its side length.\n\n### Signature\ndef volume_cube(l):",
    "timestamp": "2025-10-17T18:54:28.340419",
    "response_time": "2.35",
    "context": "{\"function_name\": \"volume_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 235,
    "solution": "===START===\ndef even_bit_set_number(n):\n    # Create a mask with all even bits set to 1\n    mask = 0\n    for i in range(0, 32, 2):  # Iterate through even bit positions\n        mask |= (1 << i)\n    \n    # Bitwise OR the number with the mask to set even bits\n    return n | mask\n\n===END===\n\nThe function works as follows:\n1. Create a mask with all even bit positions (0, 2, 4, ...) set to 1\n2. Use bitwise OR operation to set the even bits of the input number\n3. Return the resulting number with even bits set\n\nFor example:\n- If n = 5 (binary 101), the result would be 7 (binary 111)\n- If n = 10 (binary 1010), the result would be 15 (binary 1111)\n\nThe function handles 32-bit integers by iterating through even bit positions from 0 to 30.",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to set all even bits of a given number.\n\n### Signature\ndef even_bit_set_number(n):",
    "timestamp": "2025-10-17T18:54:33.175519",
    "response_time": "4.83",
    "context": "{\"function_name\": \"even_bit_set_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 237,
    "solution": "===START===\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple]) -> Dict[Tuple, int]:\n    \"\"\"\n    Count the occurrences of each unique tuple in the input list.\n    \n    Args:\n        test_list (List[Tuple]): A list of tuples to count occurrences of\n    \n    Returns:\n        Dict[Tuple, int]: A dictionary mapping each unique tuple to its frequency\n    \"\"\"\n    # Use a dictionary to track the count of each tuple\n    occurrence_dict = {}\n    \n    # Iterate through each tuple in the list\n    for item in test_list:\n        # Increment the count for the tuple, defaulting to 0 if not seen before\n        occurrence_dict[item] = occurrence_dict.get(item, 0) + 1\n    \n    return occurrence_dict\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n### Signature\ndef check_occurences(test_list):",
    "timestamp": "2025-10-17T18:54:36.741495",
    "response_time": "3.56",
    "context": "{\"function_name\": \"check_occurences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 238,
    "solution": "===START===\ndef number_of_substrings(str):\n    # Total number of non-empty substrings will be n*(n+1)/2\n    # where n is the length of the string\n    n = len(str)\n    return n * (n + 1) // 2\n===END===\n\nThe solution works as follows:\n1. The function takes a string as input\n2. Calculates the length of the string (n)\n3. Uses the mathematical formula n*(n+1)/2 to calculate the total number of non-empty substrings\n4. Integer division (//) is used to ensure an integer result\n5. This formula works because:\n   - For a string of length n, each character can be a substring\n   - Substrings of length 2 start from different positions\n   - And so on up to the full string length\n   - This creates a triangular number pattern that can be calculated by n*(n+1)/2\n\nExamples:\n- For \"abc\", n = 3\n- Substrings: a, b, c, ab, bc, abc (6 total)\n- 3 * (3+1) / 2 = 3 * 4 / 2 = 6",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of non-empty substrings of a given string.\n\n### Signature\ndef number_of_substrings(str):",
    "timestamp": "2025-10-17T18:54:42.248656",
    "response_time": "5.50",
    "context": "{\"function_name\": \"number_of_substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 239,
    "solution": "===START===\ndef get_total_number_of_sequences(m, n):\n    # Create a 2D DP table to store the number of sequences\n    # dp[i][j] represents the number of sequences of length i ending with j\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Initialize base case: for length 1, each number from 1 to m is a valid sequence\n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    # Build the DP table\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            # For each current number j, find valid previous numbers\n            for k in range(1, j // 2 + 1):\n                dp[i][j] += dp[i-1][k]\n    \n    # Sum up the total number of sequences of length n\n    return sum(dp[n])\n\n===END===\n\nThe solution uses dynamic programming to solve the problem efficiently:\n\n1. We create a 2D DP table where `dp[i][j]` represents the number of sequences of length `i` ending with the number `j`.\n\n2. Base case: For sequences of length 1, each number from 1 to m is a valid sequence, so we initialize `dp[1][j] = 1` for all j from 1 to m.\n\n3. For each subsequent length `i` and each possible ending number `j`:\n   - We look for valid previous numbers `k` that satisfy the condition:\n     * `k` is less than or equal to `j/2`\n     * This ensures the current number `j` is at least twice the previous number\n\n4. We accumulate the number of sequences by adding the count of sequences ending with previous valid numbers.\n\n5. Finally, we sum up the total number of sequences of length `n` across all possible ending numbers.\n\nTime complexity is O(n * m^2)\nSpace complexity is O(n * m)\n\nThe function handles the constraints by:\n- Ensuring each element is a positive integer\n- Checking that each element is >= 2 * previous element\n- Ensuring no element exceeds m\n- Generating sequences of exactly length n",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n### Signature\ndef get_total_number_of_sequences(m,n):",
    "timestamp": "2025-10-17T18:54:51.270331",
    "response_time": "9.02",
    "context": "{\"function_name\": \"get_total_number_of_sequences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 240,
    "solution": "===START===\ndef replace_list(list1, list2):\n    # Check if the first list is empty\n    if not list1:\n        return list2\n    \n    # Create a copy of the first list to avoid modifying the original\n    result = list1.copy()\n    \n    # Remove the last element of the result list\n    result.pop()\n    \n    # Extend the result list with all elements from the second list\n    result.extend(list2)\n    \n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\n### Signature\ndef replace_list(list1,list2):",
    "timestamp": "2025-10-17T18:54:53.728845",
    "response_time": "2.45",
    "context": "{\"function_name\": \"replace_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 242,
    "solution": "===START===\ndef count_charac(str1):\n    \"\"\"\n    Count the total number of characters in a given string.\n    \n    Args:\n        str1 (str): The input string to count characters from\n    \n    Returns:\n        int: Total number of characters in the string\n    \"\"\"\n    return len(str1)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the total number of characters in a string.\n\n### Signature\ndef count_charac(str1):",
    "timestamp": "2025-10-17T18:54:56.711203",
    "response_time": "2.98",
    "context": "{\"function_name\": \"count_charac\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 244,
    "solution": "===START===\nimport math\n\ndef next_Perfect_Square(N):\n    # Find the square root of the input number\n    root = math.floor(math.sqrt(N))\n    \n    # If the input is already a perfect square, increment the root\n    if root * root == N:\n        root += 1\n    \n    # Return the next perfect square\n    return root * root\n\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the next perfect square greater than a given number.\n\n### Signature\ndef next_Perfect_Square(N):",
    "timestamp": "2025-10-17T18:54:58.843563",
    "response_time": "2.13",
    "context": "{\"function_name\": \"next_Perfect_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 245,
    "solution": "===START===\ndef max_sum(arr):\n    n = len(arr)\n    \n    # If array is empty, return 0\n    if n == 0:\n        return 0\n    \n    # Initialize arrays to track increasing and decreasing subsequence sums\n    increasing_sum = arr.copy()\n    decreasing_sum = arr.copy()\n    \n    # Calculate increasing subsequence sums from left to right\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increasing_sum[i] = max(increasing_sum[i], increasing_sum[j] + arr[i])\n    \n    # Calculate decreasing subsequence sums from right to left\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                decreasing_sum[i] = max(decreasing_sum[i], decreasing_sum[j] + arr[i])\n    \n    # Find the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        # Subtract arr[i] to avoid counting it twice\n        max_bitonic_sum = max(max_bitonic_sum, increasing_sum[i] + decreasing_sum[i] - arr[i])\n    \n    return max_bitonic_sum\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\n### Signature\ndef max_sum(arr):",
    "timestamp": "2025-10-17T18:55:04.237141",
    "response_time": "5.39",
    "context": "{\"function_name\": \"max_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 246,
    "solution": "===START===\nimport math\n\ndef babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a given number using the Babylonian method.\n    \n    Args:\n        number (float): The number to find the square root of.\n    \n    Returns:\n        float: The square root of the input number.\n    \n    Raises:\n        ValueError: If the input number is negative.\n    \"\"\"\n    # Check for negative input\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number\")\n    \n    # Handle special cases\n    if number == 0:\n        return 0\n    \n    # Initial guess is half the number\n    guess = number / 2\n    \n    # Set a small threshold for precision\n    epsilon = 1e-7\n    \n    # Iterate using Babylonian method\n    while True:\n        # Compute next approximation\n        next_guess = 0.5 * (guess + number / guess)\n        \n        # Check if we're close enough\n        if abs(next_guess - guess) < epsilon:\n            return next_guess\n        \n        # Update guess\n        guess = next_guess\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function for computing square roots using the babylonian method.\n\n### Signature\ndef babylonian_squareroot(number):",
    "timestamp": "2025-10-17T18:55:08.889651",
    "response_time": "4.65",
    "context": "{\"function_name\": \"babylonian_squareroot\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 247,
    "solution": "===START===\ndef lps(str):\n    n = len(str)\n    # Create a 2D table to store lengths of palindromic subsequences\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the table diagonally upwards\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            \n            # If characters match and length is 2\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            \n            # If characters match\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            \n            # If characters don't match\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    # Return the length of longest palindromic subsequence\n    return dp[0][n-1]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n\n### Signature\ndef lps(str):",
    "timestamp": "2025-10-17T18:55:16.948982",
    "response_time": "8.05",
    "context": "{\"function_name\": \"lps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 248,
    "solution": "===START===\ndef harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \n    The harmonic sum is defined as the sum of reciprocals of the first n-1 positive integers.\n    \n    Args:\n        n (int): The upper limit of the harmonic sum calculation\n    \n    Returns:\n        float: The harmonic sum of n-1\n    \"\"\"\n    # If n is less than or equal to 1, return 0\n    if n <= 1:\n        return 0.0\n    \n    # Calculate harmonic sum from 1 to n-1\n    harmonic_total = sum(1/i for i in range(1, n))\n    \n    return harmonic_total\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in an integer n and calculates the harmonic sum of n-1.\n\n### Signature\ndef harmonic_sum(n):",
    "timestamp": "2025-10-17T18:55:20.166697",
    "response_time": "3.21",
    "context": "{\"function_name\": \"harmonic_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 249,
    "solution": "===START===\ndef intersection_array(array_nums1, array_nums2):\n    # Convert arrays to sets for efficient lookup and unique elements\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Use set intersection to find common elements\n    return list(set1.intersection(set2))\n===END===\n\nThe solution uses the following approach:\n1. Convert both input arrays to sets to remove duplicates\n2. Use the built-in set.intersection() method to find common elements\n3. Convert the result back to a list to match the function signature\n4. Time complexity is O(m+n), where m and n are lengths of input arrays\n5. Space complexity is O(m+n) to store the sets\n\nKey benefits:\n- Handles duplicate elements in input arrays\n- Returns unique common elements\n- Efficient set-based lookup\n- Simple and concise implementation",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the intersection of two arrays.\n\n### Signature\ndef intersection_array(array_nums1,array_nums2):",
    "timestamp": "2025-10-17T18:55:24.535185",
    "response_time": "4.36",
    "context": "{\"function_name\": \"intersection_array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 250,
    "solution": "===START===\ndef count_X(tup, x):\n    \"\"\"\n    Counts the number of occurrences of element x in the given tuple.\n    \n    Args:\n        tup (tuple): The input tuple to search through\n        x: The element to count occurrences of\n    \n    Returns:\n        int: Number of times x appears in the tuple\n    \"\"\"\n    return tup.count(x)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\n### Signature\ndef count_X(tup, x):",
    "timestamp": "2025-10-17T18:55:29.626122",
    "response_time": "5.09",
    "context": "{\"function_name\": \"count_X\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 251,
    "solution": "===START===\ndef insert_element(lst, element):\n    \"\"\"\n    Inserts the given element before each element in the input list.\n    \n    Args:\n        lst (list): The input list to modify\n        element: The element to insert before each existing element\n    \n    Returns:\n        list: A new list with the element inserted before each original element\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\n### Signature\ndef insert_element(list,element):",
    "timestamp": "2025-10-17T18:55:32.414220",
    "response_time": "2.78",
    "context": "{\"function_name\": \"insert_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 252,
    "solution": "===START===\nimport cmath\nimport math\n\ndef convert(numbers):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n    \n    Args:\n        numbers (list): A list of complex numbers\n    \n    Returns:\n        list: A list of tuples containing (r, theta) polar coordinates\n    \"\"\"\n    polar_coords = []\n    \n    for num in numbers:\n        # Calculate magnitude (r) using cmath.polar()\n        r, theta = cmath.polar(num)\n        \n        # Convert theta from radians to degrees (optional)\n        theta_degrees = math.degrees(theta)\n        \n        polar_coords.append((r, theta_degrees))\n    \n    return polar_coords\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to convert complex numbers to polar coordinates.\n\n### Signature\ndef convert(numbers):",
    "timestamp": "2025-10-17T18:55:36.028319",
    "response_time": "3.61",
    "context": "{\"function_name\": \"convert\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 253,
    "solution": "===START===\ndef count_integer(list1):\n    \"\"\"\n    Returns the number of integer elements in the given list.\n    \n    Args:\n        list1 (list): Input list to count integer elements\n    \n    Returns:\n        int: Number of integer elements in the list\n    \"\"\"\n    return sum(1 for item in list1 if isinstance(item, int))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that returns the number of integer elements in a given list.\n\n### Signature\ndef count_integer(list1):",
    "timestamp": "2025-10-17T18:55:37.998791",
    "response_time": "1.97",
    "context": "{\"function_name\": \"count_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 255,
    "solution": "===START===\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    \"\"\"\n    Generate all combinations with repetition of elements from the input list.\n    \n    Args:\n    l (list): Input list of elements\n    n (int): Length of each combination\n    \n    Returns:\n    list: A list of tuples, where each tuple is a combination with repetition\n    \"\"\"\n    return list(combinations_with_replacement(l, n))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\n### Signature\ndef combinations_colors(l, n):",
    "timestamp": "2025-10-17T18:55:40.767331",
    "response_time": "2.76",
    "context": "{\"function_name\": \"combinations_colors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 256,
    "solution": "===START===\ndef count_Primes_nums(n):\n    # If n is less than 2, there are no prime numbers\n    if n < 2:\n        return 0\n    \n    # Create a boolean array \"is_prime[0..n]\" and initialize \n    # all entries it as true. A value in is_prime[i] will \n    # finally be false if i is Not a prime, else true.\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    # Use Sieve of Eratosthenes algorithm to mark non-primes\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            # Mark multiples of i as non-prime\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    # Count the number of primes\n    return sum(is_prime)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n### Signature\ndef count_Primes_nums(n):",
    "timestamp": "2025-10-17T18:55:45.195578",
    "response_time": "4.42",
    "context": "{\"function_name\": \"count_Primes_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 257,
    "solution": "===START===\ndef swap_numbers(a, b):\n    return (b, a)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\n### Signature\ndef swap_numbers(a,b):",
    "timestamp": "2025-10-17T18:55:46.835025",
    "response_time": "1.63",
    "context": "{\"function_name\": \"swap_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 259,
    "solution": "===START===\ndef maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Maximize the elements of two tuples by taking the maximum value at each index.\n    \n    Args:\n        test_tup1 (tuple): First input tuple\n        test_tup2 (tuple): Second input tuple\n    \n    Returns:\n        tuple: A new tuple with maximum values from corresponding indices\n    \"\"\"\n    # Check if tuples have same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    # Use zip to pair corresponding elements and max to get maximum value\n    return tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to maximize the given two tuples.\n\n### Signature\ndef maximize_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:55:50.421267",
    "response_time": "3.58",
    "context": "{\"function_name\": \"maximize_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 260,
    "solution": "===START===\ndef newman_prime(n):\n    \"\"\"\n    Find the nth Newman-Shanks-Williams prime number.\n    \n    The Newman-Shanks-Williams sequence is defined by the recurrence:\n    NSW(0) = 2\n    NSW(1) = 1\n    NSW(k) = NSW(k-1)^2 - NSW(k-2) for k >= 2\n    \n    Args:\n        n (int): The index of the Newman-Shanks-Williams prime to find (0-based)\n    \n    Returns:\n        int: The nth Newman-Shanks-Williams prime number\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    \n    # Initialize the first two terms of the sequence\n    a, b = 2, 1\n    \n    # Generate NSW sequence and track primes\n    primes_found = 2  # We've already found 2 and 1\n    \n    while True:\n        # Generate next term in the sequence\n        c = b**2 - a\n        \n        # Check if the new term is prime\n        if is_prime(c):\n            primes_found += 1\n            \n            # If we've found the nth prime, return it\n            if primes_found - 1 == n:\n                return c\n        \n        # Update sequence\n        a, b = b, c\n\ndef is_prime(num):\n    \"\"\"\n    Check if a number is prime.\n    \n    Args:\n        num (int): Number to check for primality\n    \n    Returns:\n        bool: True if the number is prime, False otherwise\n    \"\"\"\n    if num < 2:\n        return False\n    \n    # Check for divisibility up to square root of num\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    return True\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n### Signature\ndef newman_prime(n):",
    "timestamp": "2025-10-17T18:55:57.550800",
    "response_time": "7.12",
    "context": "{\"function_name\": \"newman_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 261,
    "solution": "===START===\ndef division_elements(test_tup1, test_tup2):\n    # Check if tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    # Perform element-wise division\n    result = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n    \n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n### Signature\ndef division_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:56:04.780551",
    "response_time": "7.22",
    "context": "{\"function_name\": \"division_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 262,
    "solution": "===START===\ndef split_two_parts(list1, L):\n    \"\"\"\n    Splits the input list into two parts based on the given length L.\n    \n    Args:\n    list1 (list): The input list to be split\n    L (int): The length of the first part of the list\n    \n    Returns:\n    tuple: A tuple containing two lists - first part with length L and the remaining part\n    \"\"\"\n    # Check if L is greater than the length of the list\n    if L > len(list1):\n        return list1, []\n    \n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\n### Signature\ndef split_two_parts(list1, L):",
    "timestamp": "2025-10-17T18:56:08.114367",
    "response_time": "3.33",
    "context": "{\"function_name\": \"split_two_parts\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 264,
    "solution": "===START===\ndef dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog years.\n    \n    For the first two human years, each human year equals 10.5 dog years.\n    After that, each human year equals 4 dog years.\n    \n    Args:\n        h_age (int or float): Human age of the dog\n    \n    Returns:\n        float: Dog's age in dog years\n    \"\"\"\n    if h_age <= 0:\n        return 0\n    \n    if h_age <= 2:\n        return h_age * 10.5\n    \n    # First two years count as 10.5 dog years each\n    dog_years = 2 * 10.5\n    \n    # Remaining years count as 4 dog years each\n    dog_years += (h_age - 2) * 4\n    \n    return dog_years\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate a dog's age in dog's years.\n\n### Signature\ndef dog_age(h_age):",
    "timestamp": "2025-10-17T18:56:12.571741",
    "response_time": "4.45",
    "context": "{\"function_name\": \"dog_age\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 265,
    "solution": "===START===\ndef list_split(S, step):\n    \"\"\"\n    Splits a list into sublists of length 'step'\n    \n    Args:\n        S (list): Input list to be split\n        step (int): Number of elements in each sublist\n    \n    Returns:\n        list: A list of sublists, each containing 'step' elements\n    \"\"\"\n    # If step is 0 or negative, return an empty list\n    if step <= 0:\n        return []\n    \n    # Use list comprehension to create sublists\n    return [S[i:i+step] for i in range(0, len(S), step)]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\n### Signature\ndef list_split(S, step):",
    "timestamp": "2025-10-17T18:56:15.499328",
    "response_time": "2.92",
    "context": "{\"function_name\": \"list_split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 266,
    "solution": "===START===\ndef lateralsurface_cube(l):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \n    Lateral surface area is the sum of the areas of the 4 vertical faces of the cube,\n    excluding the top and bottom faces.\n    \n    Args:\n        l (float): Length of one side of the cube\n    \n    Returns:\n        float: Lateral surface area of the cube\n    \"\"\"\n    # Lateral surface area = 4 * (side length * side height)\n    # For a cube, side height is the same as side length\n    return 4 * (l * l)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cube given its side length.\n\n### Signature\ndef lateralsurface_cube(l):",
    "timestamp": "2025-10-17T18:56:18.863916",
    "response_time": "3.36",
    "context": "{\"function_name\": \"lateralsurface_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 267,
    "solution": "===START===\ndef square_Sum(n):\n    \"\"\"\n    Calculate the sum of squares of the first n odd natural numbers.\n    \n    Args:\n        n (int): Number of odd natural numbers to consider\n    \n    Returns:\n        int: Sum of squares of the first n odd natural numbers\n    \"\"\"\n    # Initialize sum to 0\n    total = 0\n    \n    # Iterate through first n odd numbers\n    for i in range(1, 2*n, 2):\n        # Add square of current odd number to total\n        total += i**2\n    \n    return total\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n### Signature\ndef square_Sum(n):",
    "timestamp": "2025-10-17T18:56:21.483581",
    "response_time": "2.62",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 268,
    "solution": "===START===\ndef find_star_num(n):\n    \"\"\"\n    Calculate the n'th star number.\n    \n    Star numbers are figurate numbers that form a star-like pattern.\n    The formula for the n'th star number is: n * (6 * n - 5)\n    \n    Args:\n        n (int): The position of the star number to calculate\n    \n    Returns:\n        int: The n'th star number\n    \"\"\"\n    return n * (6 * n - 5)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the n'th star number.\n\n### Signature\ndef find_star_num(n):",
    "timestamp": "2025-10-17T18:56:24.139767",
    "response_time": "2.65",
    "context": "{\"function_name\": \"find_star_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 269,
    "solution": "===START===\ndef ascii_value(k):\n    \"\"\"\n    Returns the ASCII value of a given character.\n    \n    Args:\n        k (str): A single character\n    \n    Returns:\n        int: The ASCII value of the input character\n    \"\"\"\n    return ord(k)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the ascii value of a character.\n\n### Signature\ndef ascii_value(k):",
    "timestamp": "2025-10-17T18:56:25.811904",
    "response_time": "1.67",
    "context": "{\"function_name\": \"ascii_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 270,
    "solution": "===START===\ndef sum_even_and_even_index(arr):\n    \"\"\"\n    Calculate the sum of even numbers located at even indices in the given list.\n    \n    Args:\n        arr (list): Input list of integers\n    \n    Returns:\n        int: Sum of even numbers at even indices\n    \"\"\"\n    return sum(num for index, num in enumerate(arr) if index % 2 == 0 and num % 2 == 0)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sum of even numbers at even positions of a list.\n\n### Signature\ndef sum_even_and_even_index(arr):",
    "timestamp": "2025-10-17T18:56:28.375151",
    "response_time": "2.56",
    "context": "{\"function_name\": \"sum_even_and_even_index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 271,
    "solution": "===START===\ndef even_Power_Sum(n):\n    \"\"\"\n    Calculate the sum of the first n even natural numbers raised to the fifth power.\n    \n    Args:\n        n (int): Number of even natural numbers to consider\n    \n    Returns:\n        int: Sum of the first n even natural numbers raised to the fifth power\n    \"\"\"\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate through first n even natural numbers\n    for i in range(1, n + 1):\n        # Calculate the even number by multiplying current iteration by 2\n        even_num = 2 * i\n        \n        # Raise the even number to the 5th power and add to total sum\n        total_sum += even_num ** 5\n    \n    return total_sum\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n### Signature\ndef even_Power_Sum(n):",
    "timestamp": "2025-10-17T18:56:31.830315",
    "response_time": "3.45",
    "context": "{\"function_name\": \"even_Power_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 272,
    "solution": "===START===\ndef rear_extract(test_list):\n    \"\"\"\n    Extract the last element from each tuple in the input list.\n    \n    Args:\n        test_list (list): A list of tuples\n    \n    Returns:\n        list: A list containing the last element of each tuple\n    \"\"\"\n    return [tup[-1] for tup in test_list]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n### Signature\ndef rear_extract(test_list):",
    "timestamp": "2025-10-17T18:56:34.048151",
    "response_time": "2.21",
    "context": "{\"function_name\": \"rear_extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 273,
    "solution": "===START===\ndef substract_elements(test_tup1, test_tup2):\n    # Check if tuples are of equal length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of equal length\")\n    \n    # Use tuple comprehension to subtract corresponding elements\n    result = tuple(a - b for a, b in zip(test_tup1, test_tup2))\n    \n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n### Signature\ndef substract_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:56:36.420245",
    "response_time": "2.37",
    "context": "{\"function_name\": \"substract_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 274,
    "solution": "===START===\nimport math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculate the sum of binomial coefficients at even indices for a given positive integer n.\n    \n    Args:\n    n (int): A positive integer \n    \n    Returns:\n    int: Sum of binomial coefficients at even indices\n    \"\"\"\n    # Initialize sum \n    total_sum = 0\n    \n    # Iterate through even indices from 0 to n\n    for k in range(0, n+1, 2):\n        # Calculate binomial coefficient using math.comb\n        coeff = math.comb(n, k)\n        \n        # Add coefficient to total sum\n        total_sum += coeff\n    \n    return total_sum\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n### Signature\ndef even_binomial_Coeff_Sum( n):",
    "timestamp": "2025-10-17T18:56:39.720914",
    "response_time": "3.29",
    "context": "{\"function_name\": \"even_binomial_Coeff_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 276,
    "solution": "===START===\nimport math\n\ndef volume_cylinder(r, h):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n    \n    Args:\n        r (float): Radius of the cylinder\n        h (float): Height of the cylinder\n    \n    Returns:\n        float: Volume of the cylinder\n    \"\"\"\n    return math.pi * r**2 * h\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n\n### Signature\ndef volume_cylinder(r,h):",
    "timestamp": "2025-10-17T18:56:42.006168",
    "response_time": "2.28",
    "context": "{\"function_name\": \"volume_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 277,
    "solution": "===START===\ndef dict_filter(dict, n):\n    \"\"\"\n    Filters a dictionary to only include entries with values greater than or equal to n.\n    \n    Args:\n        dict (dict): Input dictionary to be filtered\n        n (int): Threshold value for filtering\n    \n    Returns:\n        dict: A new dictionary containing only entries with values >= n\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n### Signature\ndef dict_filter(dict,n):",
    "timestamp": "2025-10-17T18:56:44.227573",
    "response_time": "2.22",
    "context": "{\"function_name\": \"dict_filter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 278,
    "solution": "===START===\ndef count_first_elements(test_tup):\n    \"\"\"\n    Find the number of elements that occur before the first tuple element.\n    \n    Args:\n        test_tup (tuple): Input tuple to analyze\n    \n    Returns:\n        int: Number of elements before the first tuple element\n    \"\"\"\n    # If tuple is empty, return 0\n    if not test_tup:\n        return 0\n    \n    # Return the index of the first element, which is 0\n    return 0\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n\n### Signature\ndef count_first_elements(test_tup):",
    "timestamp": "2025-10-17T18:56:46.874904",
    "response_time": "2.64",
    "context": "{\"function_name\": \"count_first_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 279,
    "solution": "I'll solve this by implementing a function to find the nth decagonal number. A decagonal number is a figurate number that extends the concept of triangular and square numbers to the decagon (10-sided polygon).\n\nThe formula for the nth decagonal number is: n * (8n - 6) / 2\n\n===START===\ndef is_num_decagonal(n):\n    \"\"\"\n    Calculate the nth decagonal number.\n    \n    Args:\n        n (int): The position of the decagonal number to calculate.\n    \n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    return n * (8 * n - 6) // 2\n===END===\n\nThe function `is_num_decagonal(n)` takes an integer `n` as input and returns the nth decagonal number. \n\nHere's how the formula works:\n1. Multiply n by (8n - 6)\n2. Divide the result by 2\n3. Use integer division (//) to ensure an integer result\n\nFor example:\n- 1st decagonal number: 1 * (8 * 1 - 6) / 2 = 1\n- 2nd decagonal number: 2 * (8 * 2 - 6) / 2 = 20\n- 3rd decagonal number: 3 * (8 * 3 - 6) / 2 = 45\n\nThe function will generate the sequence of decagonal numbers for any given positive integer n.",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth decagonal number.\n\n### Signature\ndef is_num_decagonal(n):",
    "timestamp": "2025-10-17T18:56:53.033443",
    "response_time": "6.15",
    "context": "{\"function_name\": \"is_num_decagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 280,
    "solution": "===START===\ndef sequential_search(dlist, item):\n    \"\"\"\n    Performs a sequential search on the given list to find the specified item.\n    \n    Args:\n        dlist (list): The list to search through\n        item: The element to search for\n    \n    Returns:\n        tuple: A tuple containing:\n            - A boolean indicating whether the item was found (True/False)\n            - The index of the item if found, or -1 if not found\n    \"\"\"\n    for index, element in enumerate(dlist):\n        if element == item:\n            return True, index\n    \n    return False, -1\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n### Signature\ndef sequential_search(dlist, item):",
    "timestamp": "2025-10-17T18:56:55.875176",
    "response_time": "2.84",
    "context": "{\"function_name\": \"sequential_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 281,
    "solution": "===START===\ndef all_unique(test_list):\n    \"\"\"\n    Check if all elements in the given list are unique.\n    \n    Args:\n        test_list (list): Input list to check for unique elements\n    \n    Returns:\n        bool: True if all elements are unique, False otherwise\n    \"\"\"\n    # Convert list to set and compare lengths\n    # If length of set is same as original list, all elements are unique\n    return len(set(test_list)) == len(test_list)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check if the elements of a given list are unique or not.\n\n### Signature\ndef all_unique(test_list):",
    "timestamp": "2025-10-17T18:56:58.351600",
    "response_time": "2.47",
    "context": "{\"function_name\": \"all_unique\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 282,
    "solution": "===START===\ndef sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \n    Args:\n        nums1 (list): First input list of numbers\n        nums2 (list): Second input list of numbers\n    \n    Returns:\n        list: A new list with elements subtracted element-wise\n    \"\"\"\n    # Check if lists have the same length\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    \n    # Subtract elements element-wise using list comprehension\n    return [a - b for a, b in zip(nums1, nums2)]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to subtract two lists element-wise.\n\n### Signature\ndef sub_list(nums1,nums2):",
    "timestamp": "2025-10-17T18:57:01.338469",
    "response_time": "2.98",
    "context": "{\"function_name\": \"sub_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 283,
    "solution": "===START===\ndef validate(n):\n    # Convert integer to string for easy digit manipulation\n    num_str = str(n)\n    \n    # Count frequency of each digit\n    digit_freq = {}\n    for digit in num_str:\n        digit_freq[digit] = digit_freq.get(digit, 0) + 1\n    \n    # Check if frequency of each digit is less than or equal to the digit itself\n    for digit, freq in digit_freq.items():\n        if freq > int(digit):\n            return False\n    \n    return True\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n### Signature\ndef validate(n):",
    "timestamp": "2025-10-17T18:57:03.948777",
    "response_time": "2.60",
    "context": "{\"function_name\": \"validate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 284,
    "solution": "===START===\ndef check_element(list_input, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n    \n    Args:\n        list_input (list): The input list to check\n        element: The element to compare against all list items\n    \n    Returns:\n        bool: True if all items are equal to the element, False otherwise\n    \"\"\"\n    # Use all() with a generator expression to check if every item matches the element\n    return all(item == element for item in list_input)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\n### Signature\ndef check_element(list,element):",
    "timestamp": "2025-10-17T18:57:06.860797",
    "response_time": "2.91",
    "context": "{\"function_name\": \"check_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 285,
    "solution": "===START===\nimport re\n\ndef text_match_two_three(text):\n    # Use regex pattern to match 'a' followed by 2 or 3 'b' characters\n    pattern = r'ab{2,3}'\n    \n    # Search for the pattern in the text\n    if re.search(pattern, text):\n        return True\n    return False\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n### Signature\ndef text_match_two_three(text):",
    "timestamp": "2025-10-17T18:57:09.256938",
    "response_time": "2.39",
    "context": "{\"function_name\": \"text_match_two_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 286,
    "solution": "===START===\ndef max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Find the largest sum of a contiguous subarray in an array repeated k times\n    \n    Args:\n    a: Input array \n    n: Length of input array\n    k: Number of times array is repeated\n    \n    Returns:\n    Maximum subarray sum in the repeated array\n    \"\"\"\n    # If k is 1, use standard Kadane's algorithm\n    if k == 1:\n        max_sum = float('-inf')\n        current_sum = 0\n        for num in a:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n    \n    # Calculate total array sum\n    total_sum = sum(a)\n    \n    # If total sum is negative, we'll use Kadane's on 2 repetitions\n    if total_sum <= 0:\n        # Duplicate the array twice to handle circular cases\n        extended_arr = a + a\n        max_sum = float('-inf')\n        current_sum = 0\n        for num in extended_arr:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n    \n    # If total sum is positive, we can optimize for k repetitions\n    # Kadane's on 2 repetitions + mathematical calculation\n    extended_arr = a + a\n    max_sum_two_reps = float('-inf')\n    current_sum = 0\n    for num in extended_arr:\n        current_sum = max(num, current_sum + num)\n        max_sum_two_reps = max(max_sum_two_reps, current_sum)\n    \n    # If k > 2, we can add complete repetitions\n    if k > 2:\n        max_sum_two_reps += total_sum * (k - 2)\n    \n    return max_sum_two_reps\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n### Signature\ndef max_sub_array_sum_repeated(a, n, k):",
    "timestamp": "2025-10-17T18:57:16.783971",
    "response_time": "7.52",
    "context": "{\"function_name\": \"max_sub_array_sum_repeated\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 287,
    "solution": "===START===\ndef square_Sum(n):\n    \"\"\"\n    Calculate the sum of squares of first n even natural numbers.\n    \n    Args:\n        n (int): Number of even natural numbers to consider\n    \n    Returns:\n        int: Sum of squares of first n even natural numbers\n    \"\"\"\n    # Initialize sum to 0\n    total = 0\n    \n    # Iterate through first n even numbers\n    for i in range(1, n+1):\n        # Calculate even number by multiplying index by 2\n        even_num = 2 * i\n        \n        # Add square of even number to total\n        total += even_num ** 2\n    \n    return total\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n### Signature\ndef square_Sum(n):",
    "timestamp": "2025-10-17T18:57:19.660409",
    "response_time": "2.87",
    "context": "{\"function_name\": \"square_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 290,
    "solution": "===START===\ndef max_length(list1):\n    \"\"\"\n    Find the list with maximum length from a list of lists.\n    \n    Args:\n        list1 (list): A list containing multiple lists\n    \n    Returns:\n        list: The list with the maximum length. \n        If multiple lists have the same maximum length, returns the first one encountered.\n    \"\"\"\n    if not list1:\n        return None\n    \n    return max(list1, key=len)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the list of maximum length in a list of lists.\n\n### Signature\ndef max_length(list1):",
    "timestamp": "2025-10-17T18:57:22.184410",
    "response_time": "2.52",
    "context": "{\"function_name\": \"max_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 291,
    "solution": "===START===\ndef count_no_of_ways(n, k):\n    # Handle base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    # Initialize variables for dynamic programming\n    # same represents ways where last two posts have same color\n    # diff represents ways where last two posts have different colors\n    same = k\n    diff = k * (k - 1)\n    \n    # Iterate through remaining posts\n    for _ in range(3, n + 1):\n        # Store previous same and diff values\n        prev_same = same\n        prev_diff = diff\n        \n        # Calculate new same and diff values\n        # For same color: multiply previous diff by 1 (only one color can be repeated)\n        same = prev_diff\n        \n        # For different colors: multiply previous total ways by (k-1)\n        diff = (prev_same + prev_diff) * (k - 1)\n    \n    # Total ways is sum of same and different color ways\n    return same + diff\n\n===END===\n\n# The solution uses dynamic programming to solve the fence painting problem\n# Key points:\n# 1. Base cases handled for 0 and 1 posts\n# 2. Track ways with same and different color adjacent posts\n# 3. For each new post, calculate ways of painting:\n#    - Same color: only possible from previous different color ways\n#    - Different color: can come from both previous same and different color ways\n# 4. Multiply by (k-1) to ensure no more than 2 adjacent posts have same color\n# 5. Time complexity: O(n)\n# 6. Space complexity: O(1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n### Signature\ndef count_no_of_ways(n, k):",
    "timestamp": "2025-10-17T18:57:29.740926",
    "response_time": "7.55",
    "context": "{\"function_name\": \"count_no_of_ways\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 292,
    "solution": "===START===\ndef find(n, m):\n    \"\"\"\n    Find the quotient of two numbers, rounded down to the nearest integer.\n    \n    Args:\n        n (int): Dividend \n        m (int): Divisor\n    \n    Returns:\n        int: Quotient of n divided by m, rounded down\n    \"\"\"\n    return n // m\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n### Signature\ndef find(n,m):",
    "timestamp": "2025-10-17T18:57:32.075040",
    "response_time": "2.33",
    "context": "{\"function_name\": \"find\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 293,
    "solution": "===START===\nimport math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Calculate the length of the third side of a right-angled triangle\n    given the lengths of two sides using the Pythagorean theorem.\n    \n    Args:\n    w (float): Length of one side of the right-angled triangle\n    h (float): Length of another side of the right-angled triangle\n    \n    Returns:\n    float: Length of the third side (hypotenuse)\n    \"\"\"\n    # Use Pythagorean theorem: a\u00b2 + b\u00b2 = c\u00b2\n    # Where c is the hypotenuse (the side we're calculating)\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the third side of a right angled triangle.\n\n### Signature\ndef otherside_rightangle(w,h):",
    "timestamp": "2025-10-17T18:57:35.498107",
    "response_time": "3.42",
    "context": "{\"function_name\": \"otherside_rightangle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 294,
    "solution": "===START===\ndef max_val(listval):\n    \"\"\"\n    Find the maximum value in a heterogeneous list containing different types of elements.\n    \n    Args:\n        listval (list): A list containing mixed types of elements\n    \n    Returns:\n        The maximum value in the list, or None if no comparable elements exist\n    \"\"\"\n    # Filter out only comparable elements\n    comparable_elements = []\n    \n    for item in listval:\n        try:\n            # Try to compare the item with other elements\n            comparable_elements.append(item)\n        except TypeError:\n            # Skip elements that cannot be compared\n            continue\n    \n    # Return the maximum value if comparable elements exist\n    return max(comparable_elements) if comparable_elements else None\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum value in a given heterogeneous list.\n\n### Signature\ndef max_val(listval):",
    "timestamp": "2025-10-17T18:57:39.181799",
    "response_time": "3.68",
    "context": "{\"function_name\": \"max_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 295,
    "solution": "===START===\ndef sum_div(number):\n    # Handle edge case for 0 or negative numbers\n    if number <= 0:\n        return 0\n    \n    # Initialize sum of divisors\n    divisor_sum = 0\n    \n    # Iterate through potential divisors from 1 to the number itself\n    for i in range(1, number + 1):\n        # Check if i is a divisor of the number\n        if number % i == 0:\n            # Add the divisor to the sum\n            divisor_sum += i\n    \n    return divisor_sum\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to return the sum of all divisors of a number.\n\n### Signature\ndef sum_div(number):",
    "timestamp": "2025-10-17T18:57:42.004254",
    "response_time": "2.82",
    "context": "{\"function_name\": \"sum_div\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 296,
    "solution": "===START===\ndef get_Inv_Count(arr):\n    \"\"\"\n    Count the number of inversions in an array.\n    An inversion occurs when a larger element appears before a smaller element in the array.\n    \n    Args:\n        arr (list): Input list of integers\n    \n    Returns:\n        int: Total number of inversions in the array\n    \"\"\"\n    # Brute force approach with O(n^2) time complexity\n    inv_count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count inversions in an array.\n\n### Signature\ndef get_Inv_Count(arr):",
    "timestamp": "2025-10-17T18:57:45.098420",
    "response_time": "3.09",
    "context": "{\"function_name\": \"get_Inv_Count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 297,
    "solution": "===START===\ndef flatten_list(list1):\n    \"\"\"\n    Flatten a nested list structure into a single-level list.\n    \n    Args:\n        list1 (list): A potentially nested list structure\n    \n    Returns:\n        list: A flattened list with all nested elements extracted\n    \"\"\"\n    # Result list to store flattened elements\n    flattened = []\n    \n    # Recursive helper function to handle nested lists\n    def recursive_flatten(item):\n        # If the item is a list, recursively flatten its contents\n        if isinstance(item, list):\n            for sub_item in item:\n                recursive_flatten(sub_item)\n        # If the item is not a list, append it to the flattened list\n        else:\n            flattened.append(item)\n    \n    # Call recursive helper function on the input list\n    recursive_flatten(list1)\n    \n    return flattened\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to flatten a given nested list structure.\n\n### Signature\ndef flatten_list(list1):",
    "timestamp": "2025-10-17T18:57:48.846576",
    "response_time": "3.74",
    "context": "{\"function_name\": \"flatten_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 299,
    "solution": "===START===\ndef max_aggregate(stdata):\n    \"\"\"\n    Calculate the maximum aggregate from a list of tuples.\n    \n    Args:\n        stdata (list): A list of tuples containing numeric values\n    \n    Returns:\n        float: The maximum aggregate value\n    \"\"\"\n    if not stdata:\n        return 0\n    \n    # Calculate the sum of each tuple and find the maximum\n    return max(sum(tuple_item) for tuple_item in stdata)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\n### Signature\ndef max_aggregate(stdata):",
    "timestamp": "2025-10-17T18:57:51.433931",
    "response_time": "2.58",
    "context": "{\"function_name\": \"max_aggregate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 300,
    "solution": "I'll solve this problem with a dynamic programming approach. Here's an implementation:\n\n===START===\ndef count_binary_seq(n):\n    # Total number of bits is 2n\n    # We need to track sequences where sum of first n bits equals sum of last n bits\n    \n    # Initialize DP table\n    # dp[i][diff] represents number of valid sequences of length i with current difference\n    dp = [[0] * (2*n + 1) for _ in range(2*n + 1)]\n    \n    # Base case: empty sequence\n    dp[0][n] = 1\n    \n    # Fill DP table\n    for i in range(1, 2*n + 1):\n        for diff in range(2*n + 1):\n            # Add 0 bit\n            if diff > 0:\n                dp[i][diff] += dp[i-1][diff-1]\n            \n            # Add 1 bit\n            if diff < 2*n:\n                dp[i][diff] += dp[i-1][diff+1]\n    \n    # Return count of sequences where first n bits sum equals last n bits sum\n    return dp[2*n][n]\n===END===\n\nThe solution uses dynamic programming to solve the problem efficiently. Here's how it works:\n\n1. We create a 2D DP table where:\n   - First dimension represents the current sequence length\n   - Second dimension represents the difference between the sum of first and last bits\n\n2. Base case starts with an empty sequence at index 0, with difference at the middle (n)\n\n3. For each sequence length and difference:\n   - We can add a 0 bit (which doesn't change the sum difference)\n   - We can add a 1 bit (which changes the sum difference)\n\n4. We track all possible sequences and their sum differences\n\n5. Final result is the number of sequences at length 2n with difference 0 (equal first and last n bit sums)\n\nTime Complexity: O(n\u00b2)\nSpace Complexity: O(n\u00b2)\n\nThe function returns the count of binary sequences of length 2n where the sum of first n bits equals the sum of last n bits.",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n### Signature\ndef count_binary_seq(n):",
    "timestamp": "2025-10-17T18:58:00.546043",
    "response_time": "9.11",
    "context": "{\"function_name\": \"count_binary_seq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 301,
    "solution": "===START===\ndef dict_depth(d):\n    \"\"\"\n    Calculate the maximum depth of a nested dictionary.\n    \n    Args:\n        d (dict): Input dictionary to calculate depth\n    \n    Returns:\n        int: Maximum depth of the dictionary\n    \"\"\"\n    # Base case: if input is not a dictionary, return 0\n    if not isinstance(d, dict):\n        return 0\n    \n    # If dictionary is empty, return 1 (dictionary itself is 1 level deep)\n    if not d:\n        return 1\n    \n    # Find the maximum depth by recursively checking nested dictionaries\n    max_depth = 1\n    for value in d.values():\n        # Recursively calculate depth of nested dictionaries\n        if isinstance(value, dict):\n            max_depth = max(max_depth, 1 + dict_depth(value))\n        elif isinstance(value, (list, tuple)):\n            # Check for dictionaries within lists or tuples\n            nested_depth = 1\n            for item in value:\n                if isinstance(item, dict):\n                    nested_depth = max(nested_depth, 1 + dict_depth(item))\n            max_depth = max(max_depth, nested_depth)\n    \n    return max_depth\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the depth of a dictionary.\n\n### Signature\ndef dict_depth(d):",
    "timestamp": "2025-10-17T18:58:05.755819",
    "response_time": "5.20",
    "context": "{\"function_name\": \"dict_depth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 304,
    "solution": "===START===\ndef find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find element at a given index after performing multiple rotations\n    \n    Args:\n    arr (list): Original array \n    ranges (list): List of rotation ranges\n    rotations (int): Number of rotations to perform\n    index (int): Target index to find element at\n    \n    Returns:\n    int: Element at the specified index after rotations\n    \"\"\"\n    # Create a copy of the original array to perform rotations\n    modified_arr = arr.copy()\n    \n    # Perform rotations\n    for i in range(rotations):\n        # Get current rotation range\n        start, end = ranges[i % len(ranges)]\n        \n        # Extract the subarray to rotate\n        subarray = modified_arr[start:end+1]\n        \n        # Rotate the subarray by one position\n        subarray = [subarray[-1]] + subarray[:-1]\n        \n        # Replace the original subarray with rotated subarray\n        modified_arr[start:end+1] = subarray\n    \n    # Return element at the specified index\n    return modified_arr[index]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find element at a given index after number of rotations.\n\n### Signature\ndef find_Element(arr,ranges,rotations,index) :",
    "timestamp": "2025-10-17T18:58:10.661631",
    "response_time": "4.90",
    "context": "{\"function_name\": \"find_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 305,
    "solution": "===START===\ndef start_withp(words):\n    # Filter words that start with 'p' or 'P'\n    p_words = [word for word in words if word.lower().startswith('p')]\n    \n    # Return first two words starting with 'p', or fewer if less than 2 exist\n    return p_words[:2]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to return two words from a list of words starting with letter 'p'.\n\n### Signature\ndef start_withp(words):",
    "timestamp": "2025-10-17T18:58:12.899682",
    "response_time": "2.23",
    "context": "{\"function_name\": \"start_withp\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 306,
    "solution": "I'll solve this problem using dynamic programming. Here's an implementation that finds the maximum sum of an increasing subsequence from the prefix until the ith index and includes the kth element.\n\n===START===\ndef max_sum_increasing_subseq(a, n, index, k):\n    # Check if k is valid\n    if k >= n or index >= n or k <= index:\n        return -1\n    \n    # Initialize DP table\n    dp = [0] * n\n    \n    # Initialize first values\n    for i in range(index + 1):\n        dp[i] = a[i]\n    \n    # Compute maximum sum of increasing subsequence\n    for i in range(index + 1, k + 1):\n        for j in range(index + 1, i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    \n    # Return maximum sum including kth element\n    return dp[k]\n===END===\n\nThis solution uses dynamic programming to solve the problem efficiently. Here's how it works:\n\n1. First, it checks if the input parameters are valid. If k is out of bounds, or index is invalid, it returns -1.\n\n2. It initializes a DP table `dp` where `dp[i]` represents the maximum sum of an increasing subsequence ending at index `i`.\n\n3. Initially, it sets the first `index + 1` elements of `dp` to their corresponding values in the input array.\n\n4. Then, it iterates from `index + 1` to `k`, computing the maximum sum of increasing subsequences.\n\n5. For each index `i`, it looks at previous indices `j` from `index + 1` to `i`:\n   - If `a[i]` is greater than `a[j]`, it means we can extend the subsequence\n   - It updates `dp[i]` with the maximum of its current value and `dp[j] + a[i]`\n\n6. Finally, it returns `dp[k]`, which represents the maximum sum of an increasing subsequence from the prefix until the ith index and including the kth element.\n\nTime Complexity: O(n\u00b2)\nSpace Complexity: O(n)\n\nThe function handles various scenarios and ensures that the subsequence is strictly increasing while maximizing the sum.",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\n### Signature\ndef max_sum_increasing_subseq(a, n, index, k):",
    "timestamp": "2025-10-17T18:58:21.519657",
    "response_time": "8.61",
    "context": "{\"function_name\": \"max_sum_increasing_subseq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 307,
    "solution": "===START===\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Returns a slice of a tuple from index m to n (exclusive)\n    \n    Args:\n        tuplex (tuple): The input tuple\n        m (int): Starting index of slice (inclusive)\n        n (int): Ending index of slice (exclusive)\n    \n    Returns:\n        tuple: A slice of the original tuple from index m to n\n    \"\"\"\n    return tuplex[m:n]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to get a colon of a tuple.\n\n### Signature\ndef colon_tuplex(tuplex,m,n):",
    "timestamp": "2025-10-17T18:58:23.936921",
    "response_time": "2.41",
    "context": "{\"function_name\": \"colon_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 308,
    "solution": "===START===\nfrom heapq import nlargest\n\ndef large_product(nums1, nums2, N):\n    \"\"\"\n    Find the N largest products by selecting one factor from each input list.\n    \n    Args:\n        nums1 (list): First list of numbers\n        nums2 (list): Second list of numbers\n        N (int): Number of largest products to return\n    \n    Returns:\n        list: N largest products in descending order\n    \"\"\"\n    # Generate all possible products by combining elements from both lists\n    products = [a * b for a in nums1 for b in nums2]\n    \n    # Return the N largest products using heapq.nlargest\n    return nlargest(N, products)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n### Signature\ndef large_product(nums1, nums2, N):",
    "timestamp": "2025-10-17T18:58:27.744682",
    "response_time": "3.80",
    "context": "{\"function_name\": \"large_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 309,
    "solution": "===START===\ndef maximum(a, b):\n    \"\"\"\n    Find the maximum of two numbers.\n    \n    Args:\n        a: First number to compare\n        b: Second number to compare\n    \n    Returns:\n        The larger of the two input numbers\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the maximum of two numbers.\n\n### Signature\ndef maximum(a,b):",
    "timestamp": "2025-10-17T18:58:29.673193",
    "response_time": "1.92",
    "context": "{\"function_name\": \"maximum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 310,
    "solution": "===START===\ndef string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \n    Args:\n        str1 (str): The input string to be converted\n    \n    Returns:\n        tuple: A tuple containing individual characters from the input string\n    \"\"\"\n    return tuple(str1)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a given string to a tuple of characters.\n\n### Signature\ndef string_to_tuple(str1):",
    "timestamp": "2025-10-17T18:58:31.552003",
    "response_time": "1.87",
    "context": "{\"function_name\": \"string_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 311,
    "solution": "===START===\ndef set_left_most_unset_bit(n):\n    # If all bits are already set, return the number as is\n    if n == -1 or (n & (n + 1) == 0):\n        return n\n    \n    # Find the position of the leftmost unset bit\n    mask = 1\n    while n & mask:\n        mask <<= 1\n    \n    # Set the leftmost unset bit\n    return n | mask\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to set the left most unset bit.\n\n### Signature\ndef set_left_most_unset_bit(n):",
    "timestamp": "2025-10-17T18:58:33.919653",
    "response_time": "2.36",
    "context": "{\"function_name\": \"set_left_most_unset_bit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 312,
    "solution": "===START===\nimport math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone given its radius and height.\n    \n    Args:\n        r (float): Radius of the base of the cone\n        h (float): Height of the cone\n    \n    Returns:\n        float: Volume of the cone\n    \"\"\"\n    return (1/3) * math.pi * r**2 * h\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the volume of a cone.\n\n### Signature\ndef volume_cone(r,h):",
    "timestamp": "2025-10-17T18:58:36.030049",
    "response_time": "2.10",
    "context": "{\"function_name\": \"volume_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 388,
    "solution": "===START===\ndef highest_Power_of_2(n):\n    # If n is less than 1, return 0\n    if n < 1:\n        return 0\n    \n    # Start with power 0\n    power = 0\n    \n    # Keep doubling the power until it exceeds n\n    while (1 << power) <= n:\n        power += 1\n    \n    # Return the previous power\n    return 1 << (power - 1)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\n### Signature\ndef highest_Power_of_2(n):",
    "timestamp": "2025-10-17T18:58:38.509266",
    "response_time": "2.47",
    "context": "{\"function_name\": \"highest_Power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 389,
    "solution": "===START===\ndef find_lucas(n):\n    \"\"\"\n    Calculate the n'th Lucas number.\n    \n    Lucas numbers are similar to Fibonacci numbers, but start with 2 and 1 instead of 0 and 1.\n    \n    Args:\n        n (int): The position of the Lucas number to calculate (0-based index)\n    \n    Returns:\n        int: The n'th Lucas number\n    \"\"\"\n    # Base cases for first two Lucas numbers\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    \n    # Initialize first two Lucas numbers\n    a, b = 2, 1\n    \n    # Iterate to calculate subsequent Lucas numbers\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    \n    return b\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the n'th lucas number.\n\n### Signature\ndef find_lucas(n):",
    "timestamp": "2025-10-17T18:58:43.669875",
    "response_time": "5.15",
    "context": "{\"function_name\": \"find_lucas\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 390,
    "solution": "===START===\ndef add_string(list_, string):\n    \"\"\"\n    Apply a given format string to all elements in a list.\n    \n    Args:\n        list_: A list of elements to be formatted\n        string: A format string to apply to each element\n    \n    Returns:\n        A new list with each element formatted using the given string\n    \"\"\"\n    return [string.format(item) for item in list_]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to apply a given format string to all of the elements in a list.\n\n### Signature\ndef add_string(list_, string):",
    "timestamp": "2025-10-17T18:58:45.819898",
    "response_time": "2.14",
    "context": "{\"function_name\": \"add_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 391,
    "solution": "===START===\ndef convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Convert multiple lists into a nested dictionary.\n    \n    Args:\n        l1 (list): First list of keys\n        l2 (list): Second list of values\n        l3 (list): Third list of nested values\n    \n    Returns:\n        dict: Nested dictionary created from input lists\n    \"\"\"\n    # Create the nested dictionary\n    result = {}\n    \n    # Iterate through the lists simultaneously\n    for i in range(min(len(l1), len(l2), len(l3))):\n        # Create nested dictionary structure\n        result[l1[i]] = {l2[i]: l3[i]}\n    \n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert more than one list to nested dictionary.\n\n### Signature\ndef convert_list_dictionary(l1, l2, l3):",
    "timestamp": "2025-10-17T18:58:49.044838",
    "response_time": "3.22",
    "context": "{\"function_name\": \"convert_list_dictionary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 392,
    "solution": "I'll solve this problem using dynamic programming with memoization to efficiently calculate the maximum sum.\n\n===START===\nimport math\n\ndef get_max_sum(n):\n    # Create a memoization dictionary to store computed results\n    memo = {}\n    \n    def recursive_max_sum(x):\n        # Base case: if result already computed, return memoized value\n        if x in memo:\n            return memo[x]\n        \n        # Base case: if x is less than 1, return x\n        if x < 1:\n            return x\n        \n        # Calculate max of recursive division and current number\n        max_sum = max(\n            recursive_max_sum(math.floor(x/2)) + \n            recursive_max_sum(math.floor(x/3)) + \n            recursive_max_sum(math.floor(x/4)) + \n            recursive_max_sum(math.floor(x/5)), \n            x\n        )\n        \n        # Memoize and return the result\n        memo[x] = max_sum\n        return max_sum\n    \n    # Call the recursive helper function\n    return recursive_max_sum(n)\n===END===\n\nThe solution uses the following key strategies:\n1. Memoization to cache and avoid redundant computations\n2. Recursive helper function to compute max sum\n3. Uses math.floor() to handle integer division\n4. Handles base cases for small numbers\n5. Follows the equation f(n) = max((f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n\nThe time complexity is O(n) due to memoization, and space complexity is O(n) for storing memoized results.",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n### Signature\ndef get_max_sum (n):",
    "timestamp": "2025-10-17T18:58:55.988780",
    "response_time": "6.94",
    "context": "{\"function_name\": \"get_max_sum \"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 393,
    "solution": "===START===\ndef max_length_list(input_list):\n    \"\"\"\n    Find the list with maximum length from a list of lists.\n    \n    Args:\n        input_list (list): A list containing multiple lists\n    \n    Returns:\n        list: The list with the maximum length. \n              If multiple lists have the same maximum length, returns the first one.\n              Returns None if input_list is empty.\n    \"\"\"\n    if not input_list:\n        return None\n    \n    return max(input_list, key=len)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the list with maximum length.\n\n### Signature\ndef max_length_list(input_list):",
    "timestamp": "2025-10-17T18:58:58.651384",
    "response_time": "2.66",
    "context": "{\"function_name\": \"max_length_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 394,
    "solution": "===START===\ndef check_distinct(test_tup):\n    \"\"\"\n    Check if the given tuple contains no duplicates.\n    \n    Args:\n        test_tup (tuple): Input tuple to check for distinct elements\n    \n    Returns:\n        bool: True if all elements are unique, False otherwise\n    \"\"\"\n    # Convert tuple to set and compare lengths\n    # If lengths are same, it means no duplicates exist\n    return len(set(test_tup)) == len(test_tup)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if given tuple contains no duplicates.\n\n### Signature\ndef check_distinct(test_tup):",
    "timestamp": "2025-10-17T18:59:01.404287",
    "response_time": "2.75",
    "context": "{\"function_name\": \"check_distinct\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 395,
    "solution": "===START===\ndef first_non_repeating_character(str1):\n    # Create a dictionary to store character frequencies\n    char_count = {}\n    \n    # First pass: Count the frequency of each character\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Second pass: Find the first character with frequency 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the first non-repeated character in a given string.\n\n### Signature\ndef first_non_repeating_character(str1):",
    "timestamp": "2025-10-17T18:59:04.245288",
    "response_time": "2.83",
    "context": "{\"function_name\": \"first_non_repeating_character\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 396,
    "solution": "===START===\ndef check_char(string):\n    # Check if the string is empty\n    if not string:\n        return False\n    \n    # Compare the first and last characters\n    return string[0] == string[-1]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether the given string starts and ends with the same character or not.\n\n### Signature\ndef check_char(string):",
    "timestamp": "2025-10-17T18:59:06.046755",
    "response_time": "1.80",
    "context": "{\"function_name\": \"check_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 397,
    "solution": "===START===\ndef median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n    \n    Args:\n        a (int/float): First number\n        b (int/float): Second number\n        c (int/float): Third number\n    \n    Returns:\n        int/float: The median value among the three numbers\n    \"\"\"\n    # Sort the three numbers and return the middle value\n    numbers = sorted([a, b, c])\n    return numbers[1]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the median of three numbers.\n\n### Signature\ndef median_numbers(a,b,c):",
    "timestamp": "2025-10-17T18:59:08.501050",
    "response_time": "2.45",
    "context": "{\"function_name\": \"median_numbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 398,
    "solution": "===START===\ndef sum_of_digits(nums):\n    \"\"\"\n    Compute the sum of digits for each number in the given list.\n    \n    Args:\n        nums (list): A list of integers\n    \n    Returns:\n        list: A list containing the sum of digits for each number in the input list\n    \"\"\"\n    # Create a list to store the sum of digits for each number\n    digit_sums = []\n    \n    # Iterate through each number in the input list\n    for num in nums:\n        # Convert the number to its absolute value to handle negative numbers\n        num = abs(num)\n        \n        # Initialize sum of digits for current number\n        current_sum = 0\n        \n        # Extract and sum each digit\n        while num > 0:\n            current_sum += num % 10  # Get the last digit\n            num //= 10  # Remove the last digit\n        \n        # Add the sum of digits to the result list\n        digit_sums.append(current_sum)\n    \n    return digit_sums\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to compute the sum of digits of each number of a given list.\n\n### Signature\ndef sum_of_digits(nums):",
    "timestamp": "2025-10-17T18:59:12.455321",
    "response_time": "3.95",
    "context": "{\"function_name\": \"sum_of_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 399,
    "solution": "===START===\ndef bitwise_xor(test_tup1, test_tup2):\n    # Check if tuples are of equal length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of equal length\")\n    \n    # Perform bitwise XOR on corresponding elements\n    result = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    \n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\n### Signature\ndef bitwise_xor(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:59:14.854321",
    "response_time": "2.39",
    "context": "{\"function_name\": \"bitwise_xor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 400,
    "solution": "===START===\ndef extract_freq(test_list):\n    \"\"\"\n    Extract the number of unique tuples in the given list.\n    \n    Args:\n        test_list (list): A list of tuples\n    \n    Returns:\n        int: Number of unique tuples in the list\n    \"\"\"\n    # Convert the list to a set to get unique tuples\n    unique_tuples = set(test_list)\n    \n    # Return the count of unique tuples\n    return len(unique_tuples)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to extract the number of unique tuples in the given list.\n\n### Signature\ndef extract_freq(test_list):",
    "timestamp": "2025-10-17T18:59:17.576601",
    "response_time": "2.71",
    "context": "{\"function_name\": \"extract_freq\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 401,
    "solution": "===START===\ndef add_nested_tuples(test_tup1, test_tup2):\n    # Check if the tuples have the same length and structure\n    if len(test_tup1) != len(test_tup2):\n        return None\n    \n    # Create a result list to store the added tuples\n    result = []\n    \n    # Iterate through the nested tuples\n    for i in range(len(test_tup1)):\n        # Check if the inner tuples have the same length\n        if len(test_tup1[i]) != len(test_tup2[i]):\n            return None\n        \n        # Create a tuple of index-wise additions for the current nested tuple\n        added_tuple = tuple(x + y for x, y in zip(test_tup1[i], test_tup2[i]))\n        result.append(added_tuple)\n    \n    # Convert the result list to a tuple and return\n    return tuple(result)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n### Signature\ndef add_nested_tuples(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:59:21.779566",
    "response_time": "4.20",
    "context": "{\"function_name\": \"add_nested_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 404,
    "solution": "===START===\ndef minimum(a, b):\n    \"\"\"\n    Find the minimum of two numbers.\n    \n    Args:\n        a: First number to compare\n        b: Second number to compare\n    \n    Returns:\n        The smaller of the two input numbers\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the minimum of two numbers.\n\n### Signature\ndef minimum(a,b):",
    "timestamp": "2025-10-17T18:59:23.897008",
    "response_time": "2.10",
    "context": "{\"function_name\": \"minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 405,
    "solution": "===START===\ndef check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Check whether an element exists within a tuple.\n    \n    Args:\n        tuplex (tuple): The tuple to search in\n        tuple1 (tuple): The tuple containing elements to search for\n    \n    Returns:\n        bool: True if any element from tuple1 exists in tuplex, False otherwise\n    \"\"\"\n    # Check if any element from tuple1 is present in tuplex\n    return any(item in tuplex for item in tuple1)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether an element exists within a tuple.\n\n### Signature\ndef check_tuplex(tuplex,tuple1):",
    "timestamp": "2025-10-17T18:59:26.384472",
    "response_time": "2.48",
    "context": "{\"function_name\": \"check_tuplex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 406,
    "solution": "===START===\ndef find_Parity(x):\n    \"\"\"\n    Determine whether the parity of a given number is odd.\n    \n    Args:\n        x (int): The input number to check for parity\n    \n    Returns:\n        bool: True if the number has odd parity, False otherwise\n    \"\"\"\n    # A number has odd parity if its bitwise AND with 1 is 1 (i.e., it's an odd number)\n    return x % 2 == 1\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find whether the parity of a given number is odd.\n\n### Signature\ndef find_Parity(x):",
    "timestamp": "2025-10-17T18:59:29.207640",
    "response_time": "2.82",
    "context": "{\"function_name\": \"find_Parity\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 407,
    "solution": "===START===\ndef rearrange_bigger(n):\n    # Convert number to list of digits\n    digits = list(str(n))\n    \n    # Find the first pair of adjacent digits from right to left \n    # where left digit is smaller than right digit\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    \n    # If no such pair found, no bigger number possible\n    if i < 0:\n        return -1\n    \n    # Find the smallest digit on right side of (i) \n    # that is greater than digits[i]\n    j = len(digits) - 1\n    while j > i and digits[j] <= digits[i]:\n        j -= 1\n    \n    # Swap the two digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the sublist to the right of index i to get smallest possible number\n    digits[i+1:] = digits[i+1:][::-1]\n    \n    # Convert back to number\n    return int(''.join(digits))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\n### Signature\ndef rearrange_bigger(n):",
    "timestamp": "2025-10-17T18:59:34.078541",
    "response_time": "4.86",
    "context": "{\"function_name\": \"rearrange_bigger\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 408,
    "solution": "===START===\nimport heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    # If either input array is empty, return empty list\n    if not nums1 or not nums2:\n        return []\n    \n    # Create a min heap to store pairs\n    heap = []\n    result = []\n    \n    # Initially add pairs starting from the first elements of both arrays\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    \n    # Extract k smallest pairs\n    while k > 0 and heap:\n        _, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        \n        # If there are more elements in nums2, add next pair\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j+1], i, j+1))\n        \n        k -= 1\n    \n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n### Signature\ndef k_smallest_pairs(nums1, nums2, k):",
    "timestamp": "2025-10-17T18:59:38.501603",
    "response_time": "4.42",
    "context": "{\"function_name\": \"push\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 409,
    "solution": "===START===\ndef min_product_tuple(list1):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n    \n    Args:\n        list1 (list): A list of tuples containing numeric values\n    \n    Returns:\n        int or float: The minimum product of tuple pairs\n    \"\"\"\n    # Check if the list is empty\n    if not list1:\n        return None\n    \n    # Calculate products of each tuple and find the minimum\n    min_prod = float('inf')\n    for a, b in list1:\n        current_prod = a * b\n        min_prod = min(min_prod, current_prod)\n    \n    return min_prod\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\n### Signature\ndef min_product_tuple(list1):",
    "timestamp": "2025-10-17T18:59:41.642690",
    "response_time": "3.14",
    "context": "{\"function_name\": \"min_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 410,
    "solution": "===START===\ndef min_val(listval):\n    # Filter out non-numeric values\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    \n    # If no numeric values exist, return None\n    if not numeric_values:\n        return None\n    \n    # Return the minimum value\n    return min(numeric_values)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the minimum value in a given heterogeneous list.\n\n### Signature\ndef min_val(listval):",
    "timestamp": "2025-10-17T18:59:43.721735",
    "response_time": "2.07",
    "context": "{\"function_name\": \"min_val\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 411,
    "solution": "===START===\ndef snake_to_camel(word):\n    # Split the snake_case string into words\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word except the first one\n    camel_case_words = [words[0]] + [w.capitalize() for w in words[1:]]\n    \n    # Join the words together\n    return ''.join(camel_case_words)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert the given snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
    "timestamp": "2025-10-17T18:59:46.507251",
    "response_time": "2.78",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 412,
    "solution": "===START===\ndef remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \n    Args:\n        l (list): Input list of numbers\n    \n    Returns:\n        list: A new list containing only even numbers from the input list\n    \"\"\"\n    return [num for num in l if num % 2 == 0]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to remove odd numbers from a given list.\n\n### Signature\ndef remove_odd(l):",
    "timestamp": "2025-10-17T18:59:48.719466",
    "response_time": "2.21",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 413,
    "solution": "===START===\ndef extract_nth_element(list1, n):\n    \"\"\"\n    Extract the nth element from a given list of tuples.\n    \n    Args:\n        list1 (list): A list of tuples\n        n (int): The index of the element to extract from each tuple\n    \n    Returns:\n        list: A list containing the nth element from each tuple\n    \"\"\"\n    return [tup[n] for tup in list1]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to extract the nth element from a given list of tuples.\n\n### Signature\ndef extract_nth_element(list1, n):",
    "timestamp": "2025-10-17T18:59:51.082492",
    "response_time": "2.36",
    "context": "{\"function_name\": \"extract_nth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 414,
    "solution": "===START===\ndef overlapping(list1, list2):\n    \"\"\"\n    Check whether any value from list1 exists in list2.\n    \n    Args:\n        list1 (list): First input sequence\n        list2 (list): Second input sequence\n    \n    Returns:\n        bool: True if any value from list1 is in list2, False otherwise\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\n### Signature\ndef overlapping(list1,list2):",
    "timestamp": "2025-10-17T18:59:53.422825",
    "response_time": "2.33",
    "context": "{\"function_name\": \"overlapping\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 415,
    "solution": "===START===\ndef max_Product(arr):\n    # If array has less than 2 elements, return None\n    if len(arr) < 2:\n        return None\n    \n    # Initialize max product and pair\n    max_prod = float('-inf')\n    max_pair = None\n    \n    # Compare all possible pairs\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate current pair's product\n            current_prod = arr[i] * arr[j]\n            \n            # Update max product and pair if current product is higher\n            if current_prod > max_prod:\n                max_prod = current_prod\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find a pair with highest product from a given array of integers.\n\n### Signature\ndef max_Product(arr):",
    "timestamp": "2025-10-17T18:59:56.931867",
    "response_time": "3.50",
    "context": "{\"function_name\": \"max_Product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 417,
    "solution": "===START===\ndef group_tuples(Input):\n    # If input list is empty, return None\n    if not Input:\n        return None\n    \n    # Get the first element of the first tuple\n    first_element = Input[0][0]\n    \n    # Check if this first element is common to all tuples\n    for tuple_item in Input[1:]:\n        if tuple_item[0] != first_element:\n            return None\n    \n    # If we've made it through the loop, return the common first element\n    return first_element\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find common first element in given list of tuple.\n\n### Signature\ndef group_tuples(Input):",
    "timestamp": "2025-10-17T18:59:59.617330",
    "response_time": "2.68",
    "context": "{\"function_name\": \"group_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 418,
    "solution": "===START===\ndef Find_Max(lst):\n    \"\"\"\n    Find the element with maximum length in the given list.\n    \n    Args:\n        lst (list): Input list of elements\n    \n    Returns:\n        The element with the maximum length. If multiple elements have the same \n        maximum length, returns the first such element.\n    \"\"\"\n    if not lst:\n        return None\n    \n    return max(lst, key=len)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the element of a list having maximum length.\n\n### Signature\ndef Find_Max(lst):",
    "timestamp": "2025-10-17T19:00:01.748286",
    "response_time": "2.12",
    "context": "{\"function_name\": \"Find_Max\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 419,
    "solution": "===START===\nimport math\n\ndef round_and_sum(list1):\n    # Round each number in the list\n    rounded_list = [round(num) for num in list1]\n    \n    # Calculate the sum of rounded numbers\n    total_sum = sum(rounded_list)\n    \n    # Multiply the sum by the length of the list\n    result = total_sum * len(list1)\n    \n    # Print the result\n    print(result)\n    \n    # Return the result (optional, depending on requirements)\n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\n### Signature\ndef round_and_sum(list1):",
    "timestamp": "2025-10-17T19:00:04.160851",
    "response_time": "2.41",
    "context": "{\"function_name\": \"round_and_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 420,
    "solution": "===START===\ndef cube_Sum(n):\n    \"\"\"\n    Calculate the sum of cubes of first n even natural numbers.\n    \n    Args:\n        n (int): Number of even natural numbers to consider\n    \n    Returns:\n        int: Sum of cubes of first n even natural numbers\n    \"\"\"\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate through first n even numbers\n    for i in range(1, n + 1):\n        # Calculate even number by multiplying index by 2\n        even_num = 2 * i\n        \n        # Add cube of even number to total sum\n        total_sum += even_num ** 3\n    \n    return total_sum\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the cube sum of first n even natural numbers.\n\n### Signature\ndef cube_Sum(n):",
    "timestamp": "2025-10-17T19:00:07.224960",
    "response_time": "3.05",
    "context": "{\"function_name\": \"cube_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 421,
    "solution": "===START===\ndef concatenate_tuple(test_tup):\n    \"\"\"\n    Concatenate each element of a tuple by a delimiter.\n    \n    Args:\n        test_tup (tuple): Input tuple of strings\n    \n    Returns:\n        str: Concatenated string with elements joined by delimiter\n    \"\"\"\n    # Check if tuple is empty\n    if not test_tup:\n        return \"\"\n    \n    # Convert tuple elements to strings and join with delimiter\n    return ''.join(map(str, test_tup))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to concatenate each element of tuple by the delimiter.\n\n### Signature\ndef concatenate_tuple(test_tup):",
    "timestamp": "2025-10-17T19:00:09.829364",
    "response_time": "2.60",
    "context": "{\"function_name\": \"concatenate_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 422,
    "solution": "===START===\ndef find_Average_Of_Cube(n):\n    \"\"\"\n    Calculate the average of cubes of first n natural numbers\n    \n    Args:\n        n (int): Number of natural numbers to consider\n    \n    Returns:\n        float: Average of cubes of first n natural numbers\n    \"\"\"\n    # Check for invalid input\n    if n <= 0:\n        return 0\n    \n    # Calculate sum of cubes\n    cube_sum = sum(i**3 for i in range(1, n+1))\n    \n    # Calculate average\n    average = cube_sum / n\n    \n    return average\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the average of cubes of first n natural numbers.\n\n### Signature\ndef find_Average_Of_Cube(n):",
    "timestamp": "2025-10-17T19:00:12.550037",
    "response_time": "2.71",
    "context": "{\"function_name\": \"find_Average_Of_Cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku",
    "dataset_row_id": 424,
    "solution": "===START===\ndef extract_rear(test_tuple):\n    \"\"\"\n    Extract the last character from each string in the given tuple.\n    \n    Args:\n        test_tuple (tuple): A tuple of strings\n    \n    Returns:\n        tuple: A tuple containing the last character of each string\n    \"\"\"\n    return tuple(string[-1] for string in test_tuple)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to extract only the rear index element of each string in the given tuple.\n\n### Signature\ndef extract_rear(test_tuple):",
    "timestamp": "2025-10-17T19:00:14.720399",
    "response_time": "2.16",
    "context": "{\"function_name\": \"extract_rear\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 425,
    "solution": "===START===\ndef count_element_in_list(list1, x):\n    \"\"\"\n    Count the number of sublists in list1 that contain the element x.\n    \n    Args:\n        list1 (list): A list of sublists to search through\n        x: The element to search for in the sublists\n    \n    Returns:\n        int: Number of sublists containing the element x\n    \"\"\"\n    return sum(1 for sublist in list1 if x in sublist)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the number of sublists containing a particular element.\n\n### Signature\ndef count_element_in_list(list1, x):",
    "timestamp": "2025-10-17T18:48:06.009851",
    "response_time": "3.98",
    "context": "{\"function_name\": \"count_element_in_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 426,
    "solution": "===START===\ndef filter_oddnumbers(nums):\n    \"\"\"\n    Filter and return only odd numbers from the input list.\n    \n    Args:\n        nums (list): A list of numbers\n    \n    Returns:\n        list: A list containing only the odd numbers from the input list\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to filter odd numbers.\n\n### Signature\ndef filter_oddnumbers(nums):",
    "timestamp": "2025-10-17T18:48:08.159501",
    "response_time": "2.15",
    "context": "{\"function_name\": \"filter_oddnumbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 427,
    "solution": "===START===\ndef change_date_format(dt):\n    # Split the input date string into year, month, and day\n    year, month, day = dt.split('-')\n    \n    # Rearrange the components into dd-mm-yyyy format\n    return f\"{day}-{month}-{year}\"\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n### Signature\ndef change_date_format(dt):",
    "timestamp": "2025-10-17T18:48:10.632050",
    "response_time": "2.47",
    "context": "{\"function_name\": \"change_date_format\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 428,
    "solution": "===START===\ndef shell_sort(my_list):\n    # Get the length of the list\n    n = len(my_list)\n    \n    # Start with a large gap and reduce it in each iteration\n    gap = n // 2\n    \n    # Continue until gap becomes 0\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size\n        # The first gap elements are already in gapped order\n        # Save time by not using inner loop for first gap elements\n        for i in range(gap, n):\n            # Add my_list[i] to the elements that have been gap sorted\n            # Save my_list[i] in temp and make a hole at position i\n            temp = my_list[i]\n            \n            # Shift earlier gap-sorted elements up until the correct location for my_list[i] is found\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            \n            # Put temp (the original my_list[i]) in its correct location\n            my_list[j] = temp\n        \n        # Reduce gap\n        gap //= 2\n    \n    return my_list\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort the given array by using shell sort.\n\n### Signature\ndef shell_sort(my_list):",
    "timestamp": "2025-10-17T18:48:18.851561",
    "response_time": "8.22",
    "context": "{\"function_name\": \"shell_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 429,
    "solution": "===START===\ndef and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Extracts the elementwise AND of two tuples.\n    \n    Args:\n        test_tup1 (tuple): First input tuple\n        test_tup2 (tuple): Second input tuple\n    \n    Returns:\n        tuple: A tuple containing elementwise AND of corresponding elements\n    \"\"\"\n    # Check if tuples are of equal length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of equal length\")\n    \n    # Use tuple comprehension to perform elementwise AND\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\n### Signature\ndef and_tuples(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:48:21.834774",
    "response_time": "2.98",
    "context": "{\"function_name\": \"and_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 430,
    "solution": "===START===\nimport math\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola given its standard form equation ax^2 + bx + c = y\n    \n    Args:\n    a (float): Coefficient of x^2 term\n    b (float): Coefficient of x term\n    c (float): Constant term\n    \n    Returns:\n    float: The y-coordinate of the directrix\n    \"\"\"\n    # Check if the parabola opens upward or downward\n    if a == 0:\n        raise ValueError(\"Not a valid parabolic equation. 'a' cannot be zero.\")\n    \n    # Calculate the vertex y-coordinate\n    vertex_y = -((b**2) / (4*a)) + c\n    \n    # Calculate the focal length (distance from vertex to focus)\n    focal_length = 1 / (4*abs(a))\n    \n    # Determine directrix based on parabola orientation\n    if a > 0:\n        # Parabola opens upward\n        directrix_y = vertex_y - focal_length\n    else:\n        # Parabola opens downward\n        directrix_y = vertex_y + focal_length\n    \n    return directrix_y\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the directrix of a parabola.\n\n### Signature\ndef parabola_directrix(a, b, c):",
    "timestamp": "2025-10-17T18:48:26.698559",
    "response_time": "4.86",
    "context": "{\"function_name\": \"parabola_directrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 431,
    "solution": "===START===\ndef common_element(list1, list2):\n    \"\"\"\n    Check if two lists have at least one common element.\n    \n    Args:\n        list1 (list): First input list\n        list2 (list): Second input list\n    \n    Returns:\n        bool: True if lists have a common element, False otherwise\n    \"\"\"\n    # Convert lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Use set intersection to check for common elements\n    return len(set1.intersection(set2)) > 0\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes two lists and returns true if they have at least one common element.\n\n### Signature\ndef common_element(list1, list2):",
    "timestamp": "2025-10-17T18:48:29.492827",
    "response_time": "2.79",
    "context": "{\"function_name\": \"common_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 432,
    "solution": "===START===\ndef median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium.\n    \n    The median of a trapezium is the line segment that connects the midpoints \n    of the non-parallel sides of the trapezium.\n    \n    Args:\n    base1 (float): Length of the first parallel base\n    base2 (float): Length of the second parallel base\n    height (float): Height of the trapezium\n    \n    Returns:\n    float: Length of the median of the trapezium\n    \"\"\"\n    # Calculate the median length using the formula: (base1 + base2) / 2\n    median_length = (base1 + base2) / 2\n    \n    return median_length\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the median length of a trapezium.\n\n### Signature\ndef median_trapezium(base1,base2,height):",
    "timestamp": "2025-10-17T18:48:34.003013",
    "response_time": "4.51",
    "context": "{\"function_name\": \"median_trapezium\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 433,
    "solution": "===START===\ndef check_greater(arr, number):\n    \"\"\"\n    Check whether the entered number is greater than all elements of the given array.\n    \n    Args:\n        arr (list): Input array of numbers\n        number (int/float): Number to compare with array elements\n    \n    Returns:\n        bool: True if number is greater than all array elements, False otherwise\n    \"\"\"\n    # Check if array is empty\n    if not arr:\n        return False\n    \n    # Use all() to check if number is greater than every element in the array\n    return all(number > element for element in arr)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\n### Signature\ndef check_greater(arr, number):",
    "timestamp": "2025-10-17T18:48:36.942682",
    "response_time": "2.94",
    "context": "{\"function_name\": \"check_greater\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 434,
    "solution": "===START===\nimport re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    return False\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by one or more b's.\n\n### Signature\ndef text_match_one(text):",
    "timestamp": "2025-10-17T18:48:38.290672",
    "response_time": "1.34",
    "context": "{\"function_name\": \"text_match_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 435,
    "solution": "===START===\ndef last_Digit(n):\n    \"\"\"\n    Find the last digit of a given number.\n    \n    Args:\n        n (int): The input number\n    \n    Returns:\n        int: The last digit of the input number\n    \"\"\"\n    # Use modulo 10 to get the last digit\n    return abs(n) % 10\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the last digit of a given number.\n\n### Signature\ndef last_Digit(n) :",
    "timestamp": "2025-10-17T18:48:40.345943",
    "response_time": "2.05",
    "context": "{\"function_name\": \"last_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 436,
    "solution": "===START===\ndef neg_nos(list1):\n    \"\"\"\n    Returns a list of negative numbers from the input list.\n    \n    Args:\n        list1 (list): Input list of numbers\n    \n    Returns:\n        list: List containing only the negative numbers from the input list\n    \"\"\"\n    return [num for num in list1 if num < 0]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to return the negative numbers in a list.\n\n### Signature\ndef neg_nos(list1):",
    "timestamp": "2025-10-17T18:48:42.264636",
    "response_time": "1.91",
    "context": "{\"function_name\": \"neg_nos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 437,
    "solution": "===START===\ndef remove_odd(str1):\n    \"\"\"\n    Remove odd characters from the input string, keeping only characters at even indices.\n    \n    Args:\n        str1 (str): Input string to process\n    \n    Returns:\n        str: String with only characters at even indices (0, 2, 4, ...)\n    \"\"\"\n    return str1[::2]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove odd characters in a string.\n\n### Signature\ndef remove_odd(str1):",
    "timestamp": "2025-10-17T18:48:44.574688",
    "response_time": "2.31",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 438,
    "solution": "===START===\ndef count_bidirectional(test_list):\n    \"\"\"\n    Count the number of bidirectional tuple pairs in the given list.\n    \n    A bidirectional pair is a pair of tuples where (a,b) and (b,a) both exist in the list.\n    \n    Args:\n        test_list (list): A list of tuples\n    \n    Returns:\n        int: Number of unique bidirectional tuple pairs\n    \"\"\"\n    # Create a set to track unique bidirectional pairs\n    bidirectional_pairs = set()\n    \n    # Create a set of all tuples for efficient lookup\n    tuple_set = set(test_list)\n    \n    # Iterate through the list to find bidirectional pairs\n    for tup in test_list:\n        # Check if the reversed tuple exists in the set\n        reversed_tup = tup[::-1]\n        \n        if reversed_tup in tuple_set and tup != reversed_tup:\n            # Sort the pair to avoid counting duplicates\n            pair = tuple(sorted([tup, reversed_tup]))\n            bidirectional_pairs.add(pair)\n    \n    # Return the count of unique bidirectional pairs\n    return len(bidirectional_pairs)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count bidirectional tuple pairs.\n\n### Signature\ndef count_bidirectional(test_list):",
    "timestamp": "2025-10-17T18:48:49.207798",
    "response_time": "4.63",
    "context": "{\"function_name\": \"count_bidirectional\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 439,
    "solution": "===START===\ndef multiple_to_single(L):\n    \"\"\"\n    Joins a list of multiple integers into a single integer.\n    \n    Args:\n        L (list): A list of integers\n    \n    Returns:\n        int: A single integer formed by concatenating the input integers\n    \"\"\"\n    # Convert each integer to string, join them, and convert back to integer\n    return int(''.join(map(str, L)))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to join a list of multiple integers into a single integer.\n\n### Signature\ndef multiple_to_single(L):",
    "timestamp": "2025-10-17T18:48:51.469510",
    "response_time": "2.26",
    "context": "{\"function_name\": \"multiple_to_single\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 440,
    "solution": "===START===\nimport re\n\ndef find_adverb_position(text):\n    # Regular expression to match adverbs (words ending in 'ly')\n    adverb_pattern = r'\\b\\w+ly\\b'\n    \n    # Find all adverbs in the text\n    matches = list(re.finditer(adverb_pattern, text))\n    \n    # If no adverbs found, return None\n    if not matches:\n        return None\n    \n    # Get the first adverb match\n    first_adverb_match = matches[0]\n    \n    # Return a tuple with the adverb and its start position\n    return (first_adverb_match.group(), first_adverb_match.start())\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the first adverb and their positions in a given sentence.\n\n### Signature\ndef find_adverb_position(text):",
    "timestamp": "2025-10-17T18:48:54.419276",
    "response_time": "2.95",
    "context": "{\"function_name\": \"find_adverb_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 441,
    "solution": "===START===\ndef surfacearea_cube(l):\n    \"\"\"\n    Calculate the surface area of a cube given its side length.\n    \n    Args:\n        l (float or int): Length of one side of the cube\n    \n    Returns:\n        float: Total surface area of the cube\n    \"\"\"\n    return 6 * (l ** 2)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cube of a given size.\n\n### Signature\ndef surfacearea_cube(l):",
    "timestamp": "2025-10-17T18:48:56.267923",
    "response_time": "1.85",
    "context": "{\"function_name\": \"surfacearea_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 442,
    "solution": "===START===\ndef positive_count(nums):\n    # If the array is empty, return 0 to avoid division by zero\n    if not nums:\n        return 0.0\n    \n    # Count the number of positive numbers in the array\n    positive_nums = sum(1 for num in nums if num > 0)\n    \n    # Calculate and return the ratio of positive numbers\n    return positive_nums / len(nums)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the ration of positive numbers in an array of integers.\n\n### Signature\ndef positive_count(nums):",
    "timestamp": "2025-10-17T18:48:58.469178",
    "response_time": "2.20",
    "context": "{\"function_name\": \"positive_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 443,
    "solution": "===START===\ndef largest_neg(list1):\n    # Filter out negative numbers from the list\n    negative_nums = [num for num in list1 if num < 0]\n    \n    # If no negative numbers exist, return None\n    if not negative_nums:\n        return None\n    \n    # Return the largest negative number\n    return max(negative_nums)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the largest negative number from the given list.\n\n### Signature\ndef largest_neg(list1):",
    "timestamp": "2025-10-17T18:49:00.449569",
    "response_time": "1.98",
    "context": "{\"function_name\": \"largest_neg\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 444,
    "solution": "===START===\ndef trim_tuple(test_list, K):\n    \"\"\"\n    Trims each tuple in the given list by removing K elements from the end.\n    \n    Args:\n    test_list (list): List of tuples to be trimmed\n    K (int): Number of elements to remove from the end of each tuple\n    \n    Returns:\n    list: List of trimmed tuples\n    \"\"\"\n    # Check if K is greater than or equal to the length of any tuple\n    return [tup[:-K] if K > 0 else tup for tup in test_list]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to trim each tuple by k in the given tuple list.\n\n### Signature\ndef trim_tuple(test_list, K):",
    "timestamp": "2025-10-17T18:49:03.102990",
    "response_time": "2.65",
    "context": "{\"function_name\": \"trim_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 445,
    "solution": "===START===\ndef index_multiplication(test_tup1, test_tup2):\n    # Check if tuples have same length\n    if len(test_tup1) != len(test_tup2):\n        return None\n    \n    # Perform index-wise multiplication using tuple comprehension\n    result = tuple(a * b for a, b in zip(test_tup1, test_tup2))\n    \n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n### Signature\ndef index_multiplication(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:49:06.006184",
    "response_time": "2.90",
    "context": "{\"function_name\": \"index_multiplication\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 446,
    "solution": "===START===\ndef count_Occurrence(tup, lst):\n    # Create a dictionary to store the count of occurrences\n    occurrence_dict = {}\n    \n    # Iterate through each element in the list\n    for item in lst:\n        # Count the number of times the item appears in the tuple\n        count = tup.count(item)\n        \n        # Store the count in the dictionary\n        occurrence_dict[item] = count\n    \n    # Return the dictionary with occurrence counts\n    return occurrence_dict\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the occurence of all elements of list in a tuple.\n\n### Signature\ndef count_Occurrence(tup, lst):",
    "timestamp": "2025-10-17T18:49:08.525798",
    "response_time": "2.52",
    "context": "{\"function_name\": \"count_Occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 447,
    "solution": "===START===\ndef cube_nums(nums):\n    \"\"\"\n    Find cubes of individual elements in a list.\n    \n    Args:\n        nums (list): A list of numbers\n    \n    Returns:\n        list: A new list with each number cubed\n    \"\"\"\n    return [num ** 3 for num in nums]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find cubes of individual elements in a list.\n\n### Signature\ndef cube_nums(nums):",
    "timestamp": "2025-10-17T18:49:10.221173",
    "response_time": "1.69",
    "context": "{\"function_name\": \"cube_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 448,
    "solution": "===START===\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers up to the nth term.\n    \n    Perrin numbers are defined by the recurrence relation:\n    P(0) = 3\n    P(1) = 0\n    P(2) = 2\n    P(n) = P(n-2) + P(n-3) for n > 2\n    \n    Args:\n        n (int): The number of Perrin numbers to sum\n    \n    Returns:\n        int: The sum of the first n Perrin numbers\n    \"\"\"\n    # Handle edge cases\n    if n <= 0:\n        return 0\n    \n    # Initialize first three Perrin numbers\n    perrin = [3, 0, 2]\n    \n    # If n is less than 3, return sum of existing numbers\n    if n <= 3:\n        return sum(perrin[:n])\n    \n    # Generate Perrin numbers up to nth term\n    for _ in range(3, n):\n        next_num = perrin[-2] + perrin[-3]\n        perrin.append(next_num)\n    \n    # Return sum of generated Perrin numbers\n    return sum(perrin)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the sum of perrin numbers.\n\n### Signature\ndef cal_sum(n):",
    "timestamp": "2025-10-17T18:49:15.262537",
    "response_time": "5.04",
    "context": "{\"function_name\": \"cal_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 450,
    "solution": "===START===\ndef extract_string(str, l):\n    \"\"\"\n    Extract strings of specified length from a given list of strings.\n    \n    Args:\n    str (list): List of input strings\n    l (int): Length of strings to extract\n    \n    Returns:\n    list: List of strings with exactly the specified length\n    \"\"\"\n    return [s for s in str if len(s) == l]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to extract specified size of strings from a given list of string values.\n\n### Signature\ndef extract_string(str, l):",
    "timestamp": "2025-10-17T18:49:17.601041",
    "response_time": "2.34",
    "context": "{\"function_name\": \"extract_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 451,
    "solution": "===START===\ndef remove_whitespaces(text1):\n    \"\"\"\n    Remove all whitespaces from the given string.\n    \n    Args:\n        text1 (str): Input string that may contain whitespaces\n    \n    Returns:\n        str: String with all whitespaces removed\n    \"\"\"\n    return text1.replace(\" \", \"\")\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from the given string.\n\n### Signature\ndef remove_whitespaces(text1):",
    "timestamp": "2025-10-17T18:49:19.476934",
    "response_time": "1.87",
    "context": "{\"function_name\": \"remove_whitespaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 452,
    "solution": "===START===\ndef loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the loss amount on a sale if there is a loss.\n    \n    Args:\n        actual_cost (float): The original cost of the item\n        sale_amount (float): The amount the item was sold for\n    \n    Returns:\n        float: The loss amount if sale_amount is less than actual_cost, otherwise 0\n    \"\"\"\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    return 0\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n### Signature\ndef loss_amount(actual_cost,sale_amount):",
    "timestamp": "2025-10-17T18:49:21.894334",
    "response_time": "2.42",
    "context": "{\"function_name\": \"loss_amount\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 453,
    "solution": "===START===\ndef sumofFactors(n):\n    \"\"\"\n    Calculate the sum of even factors of a given number.\n    \n    Args:\n        n (int): The input number to find even factors for\n    \n    Returns:\n        int: Sum of all even factors of the input number\n    \"\"\"\n    # Initialize sum of even factors\n    even_factor_sum = 0\n    \n    # Iterate through potential factors from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is a factor of n and is even\n        if n % i == 0 and i % 2 == 0:\n            even_factor_sum += i\n    \n    return even_factor_sum\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sum of even factors of a number.\n\n### Signature\ndef sumofFactors(n) :",
    "timestamp": "2025-10-17T18:49:24.954082",
    "response_time": "3.06",
    "context": "{\"function_name\": \"sumofFactors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 454,
    "solution": "===START===\nimport re\n\ndef text_match_wordz(text):\n    # Use regex to find a word containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    \n    # Search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # Return True if a match is found, False otherwise\n    return bool(match)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that matches a word containing 'z'.\n\n### Signature\ndef text_match_wordz(text):",
    "timestamp": "2025-10-17T18:49:27.178033",
    "response_time": "2.22",
    "context": "{\"function_name\": \"text_match_wordz\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 455,
    "solution": "===START===\ndef check_monthnumb_number(monthnum2):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the given month number is in the list of months with 31 days\n    return monthnum2 in months_with_31_days\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 31 days or not.\n\n### Signature\ndef check_monthnumb_number(monthnum2):",
    "timestamp": "2025-10-17T18:49:29.161820",
    "response_time": "1.98",
    "context": "{\"function_name\": \"check_monthnumb_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 456,
    "solution": "===START===\ndef reverse_string_list(stringlist):\n    \"\"\"\n    Reverses each string in the given list of strings.\n    \n    Args:\n        stringlist (list): A list of strings to be reversed\n    \n    Returns:\n        list: A new list with each string reversed\n    \"\"\"\n    return [s[::-1] for s in stringlist]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to reverse each string in a given list of string values.\n\n### Signature\ndef reverse_string_list(stringlist):",
    "timestamp": "2025-10-17T18:49:30.997745",
    "response_time": "1.83",
    "context": "{\"function_name\": \"reverse_string_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 457,
    "solution": "===START===\ndef Find_Min(lst):\n    \"\"\"\n    Find the sublist with the minimum length from a list of lists.\n    \n    Args:\n        lst (list): A list containing sublists\n    \n    Returns:\n        list: The sublist with the minimum length. \n              If multiple sublists have the same minimum length, returns the first one.\n    \"\"\"\n    # Check if the input list is empty\n    if not lst:\n        return []\n    \n    # Find the sublist with minimum length using min() with key parameter\n    return min(lst, key=len)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sublist having minimum length.\n\n### Signature\ndef Find_Min(lst):",
    "timestamp": "2025-10-17T18:49:34.394351",
    "response_time": "3.39",
    "context": "{\"function_name\": \"Find_Min\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 458,
    "solution": "===START===\ndef rectangle_area(l, b):\n    \"\"\"\n    Calculate the area of a rectangle given its length and breadth.\n    \n    Args:\n        l (float or int): Length of the rectangle\n        b (float or int): Breadth of the rectangle\n    \n    Returns:\n        float or int: Area of the rectangle\n    \"\"\"\n    return l * b\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the area of a rectangle.\n\n### Signature\ndef rectangle_area(l,b):",
    "timestamp": "2025-10-17T18:49:36.554437",
    "response_time": "2.16",
    "context": "{\"function_name\": \"rectangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 459,
    "solution": "===START===\ndef remove_uppercase(str1):\n    # Create a result string to store characters that are not uppercase\n    result = ''\n    \n    # Iterate through each character in the input string\n    for char in str1:\n        # If the character is not uppercase, add it to the result\n        if not char.isupper():\n            result += char\n    \n    # Return the string with uppercase characters removed\n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove uppercase substrings from a given string.\n\n### Signature\ndef remove_uppercase(str1):",
    "timestamp": "2025-10-17T18:49:38.717629",
    "response_time": "2.16",
    "context": "{\"function_name\": \"remove_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 460,
    "solution": "===START===\ndef Extract(lst):\n    \"\"\"\n    Returns a list containing the first element of each sublist in the input list.\n    \n    Args:\n        lst (list): A list of sublists\n    \n    Returns:\n        list: A list of first elements from each sublist\n    \"\"\"\n    return [sublist[0] for sublist in lst]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to get the first element of each sublist.\n\n### Signature\ndef Extract(lst):",
    "timestamp": "2025-10-17T18:49:40.781988",
    "response_time": "2.06",
    "context": "{\"function_name\": \"Extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 461,
    "solution": "===START===\ndef upper_ctr(str):\n    \"\"\"\n    Count the number of uppercase characters in the given string.\n    \n    Args:\n        str (str): Input string to count uppercase characters\n    \n    Returns:\n        int: Number of uppercase characters in the string\n    \"\"\"\n    return sum(1 for char in str if char.isupper())\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the upper case characters in a given string.\n\n### Signature\ndef upper_ctr(str):",
    "timestamp": "2025-10-17T18:49:42.749252",
    "response_time": "1.97",
    "context": "{\"function_name\": \"upper_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 462,
    "solution": "===START===\nfrom itertools import combinations\n\ndef combinations_list(list1):\n    # Create a list to store all possible combinations\n    all_combinations = []\n    \n    # Generate combinations of all possible lengths from 1 to the length of the list\n    for r in range(1, len(list1) + 1):\n        # Use itertools.combinations to generate combinations of length r\n        current_combinations = list(combinations(list1, r))\n        \n        # Extend the all_combinations list with current combinations\n        all_combinations.extend(current_combinations)\n    \n    return all_combinations\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find all possible combinations of the elements of a given list.\n\n### Signature\ndef combinations_list(list1):",
    "timestamp": "2025-10-17T18:49:45.539847",
    "response_time": "2.79",
    "context": "{\"function_name\": \"combinations_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 463,
    "solution": "===START===\ndef max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    result = max_so_far\n    \n    for i in range(1, len(arr)):\n        curr = arr[i]\n        temp_max = max(curr, max_so_far * curr, min_so_far * curr)\n        min_so_far = min(curr, max_so_far * curr, min_so_far * curr)\n        \n        max_so_far = temp_max\n        \n        result = max(result, max_so_far)\n    \n    return result\n===END===\n\nThe solution uses Kadane's algorithm with a slight modification to handle both positive and negative numbers. Here's how it works:\n\n1. If the array is empty, return 0.\n2. Initialize max_so_far and min_so_far with the first element.\n3. Initialize result with max_so_far.\n4. Iterate through the array starting from the second element:\n   - Calculate the maximum product ending at current element\n   - Calculate the minimum product ending at current element\n   - Update max_so_far and min_so_far\n   - Update result with the maximum product seen so far\n5. Return the maximum product subarray\n\nThe key idea is to keep track of both the maximum and minimum products because a negative number can turn a small product into a large product when multiplied.\n\nTime complexity: O(n)\nSpace complexity: O(1)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum product subarray of the given array.\n\n### Signature\ndef max_subarray_product(arr):",
    "timestamp": "2025-10-17T18:49:51.295129",
    "response_time": "5.75",
    "context": "{\"function_name\": \"max_subarray_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 464,
    "solution": "===START===\ndef check_value(dict, n):\n    \"\"\"\n    Check if all values in the dictionary are the same.\n    \n    Args:\n        dict (dict): Input dictionary to check\n        n (int): Placeholder parameter (not used in this implementation)\n    \n    Returns:\n        bool: True if all values are the same, False otherwise\n    \"\"\"\n    # If dictionary is empty, return False\n    if not dict:\n        return False\n    \n    # Get the first value to compare against\n    first_value = list(dict.values())[0]\n    \n    # Check if all values are equal to the first value\n    return all(value == first_value for value in dict.values())\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if all values are same in a dictionary.\n\n### Signature\ndef check_value(dict, n):",
    "timestamp": "2025-10-17T18:49:54.579945",
    "response_time": "3.28",
    "context": "{\"function_name\": \"check_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 465,
    "solution": "===START===\ndef drop_empty(dict1):\n    \"\"\"\n    Drop empty items from a given dictionary.\n    \n    Empty items are considered to be:\n    - None values\n    - Empty strings ('')\n    - Empty lists ([])\n    - Empty dictionaries ({})\n    - Empty tuples (())\n    \n    Args:\n        dict1 (dict): Input dictionary to remove empty items from\n    \n    Returns:\n        dict: A new dictionary with empty items removed\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v != '' and v != [] and v != {} and v != ()}\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to drop empty items from a given dictionary.\n\n### Signature\ndef drop_empty(dict1):",
    "timestamp": "2025-10-17T18:49:57.479867",
    "response_time": "2.90",
    "context": "{\"function_name\": \"drop_empty\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 468,
    "solution": "===START===\ndef max_product(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    # dp will store the maximum product of increasing subsequence ending at each index\n    dp = [0] * n\n    \n    # Initialize first element \n    dp[0] = arr[0]\n    \n    # Track the maximum product overall\n    max_prod = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, n):\n        # Initialize current element as potential max product\n        dp[i] = arr[i]\n        \n        # Check previous elements for increasing subsequence\n        for j in range(i):\n            # If current element is greater than previous element\n            if arr[i] > arr[j]:\n                # Update max product by multiplying with previous subsequence max\n                dp[i] = max(dp[i], dp[j] * arr[i])\n        \n        # Update overall max product\n        max_prod = max(max_prod, dp[i])\n    \n    return max_prod\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n### Signature\ndef max_product(arr):",
    "timestamp": "2025-10-17T18:50:02.090619",
    "response_time": "4.61",
    "context": "{\"function_name\": \"max_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 470,
    "solution": "===START===\ndef add_pairwise(test_tup):\n    \"\"\"\n    Find the pairwise addition of neighboring elements in the given tuple.\n    \n    Args:\n        test_tup (tuple): Input tuple of numbers\n    \n    Returns:\n        tuple: A new tuple with pairwise additions of neighboring elements\n    \"\"\"\n    # If tuple has less than 2 elements, return an empty tuple\n    if len(test_tup) < 2:\n        return ()\n    \n    # Use list comprehension to add neighboring elements\n    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n### Signature\ndef add_pairwise(test_tup):",
    "timestamp": "2025-10-17T18:50:05.420360",
    "response_time": "3.33",
    "context": "{\"function_name\": \"add_pairwise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 471,
    "solution": "===START===\ndef find_remainder(arr, n):\n    \"\"\"\n    Calculate the product of array elements modulo n\n    \n    Args:\n        arr (list): List of integers to multiply\n        n (int): Modulo value\n    \n    Returns:\n        int: Product of array elements modulo n\n    \"\"\"\n    # Initialize product as 1\n    product = 1\n    \n    # Multiply each element and take modulo n\n    for num in arr:\n        product = (product * num) % n\n    \n    return product\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the product of the array multiplication modulo n.\n\n### Signature\ndef find_remainder(arr, n):",
    "timestamp": "2025-10-17T18:50:07.893315",
    "response_time": "2.47",
    "context": "{\"function_name\": \"find_remainder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 472,
    "solution": "===START===\ndef check_Consecutive(l):\n    # If list is empty or has only one element, return False\n    if len(l) <= 1:\n        return False\n    \n    # Sort the list first\n    sorted_list = sorted(l)\n    \n    # Check if each consecutive pair of numbers differs by 1\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i] - sorted_list[i-1] != 1:\n            return False\n    \n    return True\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\n### Signature\ndef check_Consecutive(l):",
    "timestamp": "2025-10-17T18:50:10.506852",
    "response_time": "2.61",
    "context": "{\"function_name\": \"check_Consecutive\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 473,
    "solution": "===START===\ndef tuple_intersection(test_list1, test_list2):\n    # Convert tuples to sets to ignore order\n    set1 = set(tuple(sorted(t)) for t in test_list1)\n    set2 = set(tuple(sorted(t)) for t in test_list2)\n    \n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    \n    # Convert back to list of tuples\n    return list(intersection)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n### Signature\ndef tuple_intersection(test_list1, test_list2):",
    "timestamp": "2025-10-17T18:50:13.177774",
    "response_time": "2.67",
    "context": "{\"function_name\": \"tuple_intersection\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 474,
    "solution": "===START===\ndef replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a specific character in a string with a new character.\n    \n    Args:\n        str1 (str): The original input string\n        ch (str): The character to be replaced\n        newch (str): The new character to replace with\n    \n    Returns:\n        str: A new string with all occurrences of 'ch' replaced by 'newch'\n    \"\"\"\n    return str1.replace(ch, newch)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to replace characters in a string.\n\n### Signature\ndef replace_char(str1,ch,newch):",
    "timestamp": "2025-10-17T18:50:15.735634",
    "response_time": "2.55",
    "context": "{\"function_name\": \"replace_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 475,
    "solution": "===START===\ndef sort_counter(dict1):\n    \"\"\"\n    Sort a dictionary by its values in ascending order.\n    \n    Args:\n        dict1 (dict): Input dictionary to be sorted\n    \n    Returns:\n        dict: A new dictionary sorted by values in ascending order\n    \"\"\"\n    # Sort the dictionary items based on values and convert back to dictionary\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    \n    return sorted_dict\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a dictionary by value.\n\n### Signature\ndef sort_counter(dict1):",
    "timestamp": "2025-10-17T18:50:18.472995",
    "response_time": "2.73",
    "context": "{\"function_name\": \"sort_counter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 476,
    "solution": "===START===\ndef big_sum(nums):\n    # Check if the array is empty\n    if not nums:\n        return 0\n    \n    # Find the smallest and largest values in the array\n    smallest = min(nums)\n    largest = max(nums)\n    \n    # Return their sum\n    return smallest + largest\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\n### Signature\ndef big_sum(nums):",
    "timestamp": "2025-10-17T18:50:20.253411",
    "response_time": "1.78",
    "context": "{\"function_name\": \"big_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 477,
    "solution": "===START===\ndef is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n    \n    Args:\n        string (str): The input string to be converted to lower case\n    \n    Returns:\n        str: The input string converted to lower case\n    \"\"\"\n    return string.lower()\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to convert the given string to lower case.\n\n### Signature\ndef is_lower(string):",
    "timestamp": "2025-10-17T18:50:22.248008",
    "response_time": "1.99",
    "context": "{\"function_name\": \"is_lower\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 478,
    "solution": "===START===\ndef remove_lowercase(str1):\n    # Create a new string to store the result\n    result = ''\n    \n    # Iterate through each character in the input string\n    for char in str1:\n        # Only add the character if it is uppercase\n        if char.isupper():\n            result += char\n    \n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove lowercase substrings from a given string.\n\n### Signature\ndef remove_lowercase(str1):",
    "timestamp": "2025-10-17T18:50:24.023619",
    "response_time": "1.77",
    "context": "{\"function_name\": \"remove_lowercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 479,
    "solution": "===START===\ndef first_Digit(n):\n    # Convert the number to absolute value to handle negative numbers\n    n = abs(n)\n    \n    # If number is 0, return 0\n    if n == 0:\n        return 0\n    \n    # Keep dividing by 10 until we get the first digit\n    while n >= 10:\n        n //= 10\n    \n    return n\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the first digit of a given number.\n\n### Signature\ndef first_Digit(n) :",
    "timestamp": "2025-10-17T18:50:26.743267",
    "response_time": "2.72",
    "context": "{\"function_name\": \"first_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 554,
    "solution": "===START===\ndef Split(list):\n    return [num for num in list if num % 2 != 0]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and only returns the odd ones.\n\n### Signature\ndef Split(list):",
    "timestamp": "2025-10-17T18:50:28.181770",
    "response_time": "1.44",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 555,
    "solution": "===START===\ndef difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of first n natural numbers\n    and the sum of first n natural numbers.\n    \n    Args:\n        n (int): Number of natural numbers to consider\n    \n    Returns:\n        int: Difference between sum of cubes and sum of numbers\n    \"\"\"\n    # Calculate sum of first n natural numbers\n    sum_numbers = sum(range(1, n + 1))\n    \n    # Calculate sum of cubes of first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n + 1))\n    \n    # Return the difference\n    return sum_cubes - sum_numbers\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n### Signature\ndef difference(n) :",
    "timestamp": "2025-10-17T18:50:31.231981",
    "response_time": "3.05",
    "context": "{\"function_name\": \"difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 556,
    "solution": "===START===\ndef find_Odd_Pair(A, N):\n    \"\"\"\n    Count the number of pairs in the array whose XOR value is odd\n    \n    Args:\n    A (list): Input array of integers\n    N (int): Length of the array\n    \n    Returns:\n    int: Number of pairs with odd XOR value\n    \"\"\"\n    # Initialize pair count\n    odd_xor_pairs = 0\n    \n    # Iterate through all possible pairs\n    for i in range(N):\n        for j in range(i+1, N):\n            # Check if XOR of pair is odd\n            if (A[i] ^ A[j]) % 2 == 1:\n                odd_xor_pairs += 1\n    \n    return odd_xor_pairs\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose xor value is odd.\n\n### Signature\ndef find_Odd_Pair(A,N) :",
    "timestamp": "2025-10-17T18:50:34.378489",
    "response_time": "3.14",
    "context": "{\"function_name\": \"find_Odd_Pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 557,
    "solution": "===START===\ndef toggle_string(string):\n    \"\"\"\n    Toggle the case of all characters in the input string.\n    Lowercase characters become uppercase and vice versa.\n    \n    Args:\n        string (str): The input string to toggle case\n    \n    Returns:\n        str: A new string with the case of each character toggled\n    \"\"\"\n    return string.swapcase()\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to toggle the case of all characters in a string.\n\n### Signature\ndef toggle_string(string):",
    "timestamp": "2025-10-17T18:50:36.563655",
    "response_time": "2.18",
    "context": "{\"function_name\": \"toggle_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 558,
    "solution": "===START===\ndef digit_distance_nums(n1, n2):\n    # Convert numbers to strings to easily iterate through digits\n    str1 = str(abs(n1))\n    str2 = str(abs(n2))\n    \n    # Pad the shorter number with leading zeros to match length\n    max_length = max(len(str1), len(str2))\n    str1 = str1.zfill(max_length)\n    str2 = str2.zfill(max_length)\n    \n    # Calculate the sum of absolute differences between corresponding digits\n    total_distance = 0\n    for d1, d2 in zip(str1, str2):\n        total_distance += abs(int(d1) - int(d2))\n    \n    return total_distance\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sum of the per-digit difference between two integers.\n\n### Signature\ndef digit_distance_nums(n1, n2):",
    "timestamp": "2025-10-17T18:50:40.050434",
    "response_time": "3.48",
    "context": "{\"function_name\": \"digit_distance_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 559,
    "solution": "===START===\ndef max_sub_array_sum(a, size):\n    \"\"\"\n    Find the sum of the largest contiguous sublist in the given list using Kadane's algorithm.\n    \n    Args:\n    a (list): Input list of integers\n    size (int): Size of the input list\n    \n    Returns:\n    int: Maximum sum of a contiguous sublist\n    \"\"\"\n    # Initialize max_so_far and max_ending_here with the first element\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, size):\n        # Choose the maximum between current element and \n        # sum of current element and previous max_ending_here\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        \n        # Update max_so_far if max_ending_here is larger\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n\n### Signature\ndef max_sub_array_sum(a, size):",
    "timestamp": "2025-10-17T18:50:44.429786",
    "response_time": "4.38",
    "context": "{\"function_name\": \"max_sub_array_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 560,
    "solution": "===START===\ndef union_elements(test_tup1, test_tup2):\n    # Convert tuples to sets to remove duplicates and perform union\n    union_set = set(test_tup1).union(set(test_tup2))\n    \n    # Convert back to sorted list\n    return sorted(list(union_set))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n\n### Signature\ndef union_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:50:46.389583",
    "response_time": "1.96",
    "context": "{\"function_name\": \"union_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 562,
    "solution": "===START===\ndef Find_Max_Length(lst):\n    \"\"\"\n    Find the length of the longest sublist in the given list.\n    \n    Args:\n        lst (list): A list that may contain sublists\n    \n    Returns:\n        int: Length of the longest sublist, or 0 if the input list is empty\n    \"\"\"\n    # If the list is empty, return 0\n    if not lst:\n        return 0\n    \n    # Use max() with a key function to find the length of the longest sublist\n    return max(len(sublist) if isinstance(sublist, list) else 0 for sublist in lst)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest sublists.\n\n### Signature\ndef Find_Max_Length(lst):",
    "timestamp": "2025-10-17T18:50:50.086185",
    "response_time": "3.69",
    "context": "{\"function_name\": \"Find_Max_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 563,
    "solution": "===START===\nimport re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a given string.\n    \n    Args:\n        text (str): Input string to extract quoted values from\n    \n    Returns:\n        list: A list of strings found between quotation marks\n    \"\"\"\n    # Use regex to find all matches between single or double quotes\n    pattern = r'[\\'\"]([^\\'\"]*)[\\'\"]'\n    matches = re.findall(pattern, text)\n    \n    return matches\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks from a string.\n\n### Signature\ndef extract_values(text):",
    "timestamp": "2025-10-17T18:50:52.797742",
    "response_time": "2.71",
    "context": "{\"function_name\": \"extract_values\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 564,
    "solution": "===START===\ndef count_Pairs(arr, n):\n    \"\"\"\n    Count the number of unordered pairs of elements in the list where both elements are unequal.\n    \n    Args:\n    arr (list): List of integers\n    n (int): Length of the list\n    \n    Returns:\n    int: Number of unordered pairs with unequal elements\n    \"\"\"\n    # Initialize pair count\n    pair_count = 0\n    \n    # Iterate through all possible pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if elements are unequal\n            if arr[i] != arr[j]:\n                pair_count += 1\n    \n    return pair_count\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n### Signature\ndef count_Pairs(arr,n):",
    "timestamp": "2025-10-17T18:50:55.892124",
    "response_time": "3.09",
    "context": "{\"function_name\": \"count_Pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 565,
    "solution": "===START===\ndef split(word):\n    return list(word)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to split a string into characters.\n\n### Signature\ndef split(word):",
    "timestamp": "2025-10-17T18:50:57.280859",
    "response_time": "1.39",
    "context": "{\"function_name\": \"split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 566,
    "solution": "===START===\ndef sum_digits(n):\n    # Convert the number to a string to easily iterate through its digits\n    digit_sum = 0\n    \n    # Iterate through each digit and add to the sum\n    for digit in str(n):\n        digit_sum += int(digit)\n    \n    return digit_sum\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to get the sum of the digits of a non-negative integer.\n\n### Signature\ndef sum_digits(n):",
    "timestamp": "2025-10-17T18:50:59.572388",
    "response_time": "2.29",
    "context": "{\"function_name\": \"sum_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 567,
    "solution": "===START===\ndef issort_list(list1):\n    \"\"\"\n    Check whether a specified list is sorted in ascending order.\n    \n    Args:\n        list1 (list): Input list to check for sorting\n    \n    Returns:\n        bool: True if list is sorted in ascending order, False otherwise\n    \"\"\"\n    # If list is empty or has only one element, it is considered sorted\n    if len(list1) <= 1:\n        return True\n    \n    # Compare each element with the next to check if sorted\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether a specified list is sorted or not.\n\n### Signature\ndef issort_list(list1):",
    "timestamp": "2025-10-17T18:51:02.434981",
    "response_time": "2.86",
    "context": "{\"function_name\": \"issort_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 568,
    "solution": "===START===\ndef empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \n    Args:\n        length (int): Number of empty dictionaries to create in the list\n    \n    Returns:\n        list: A list containing 'length' number of empty dictionaries\n    \"\"\"\n    return [{} for _ in range(length)]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to create a list of N empty dictionaries.\n\n### Signature\ndef empty_list(length):",
    "timestamp": "2025-10-17T18:51:04.365605",
    "response_time": "1.93",
    "context": "{\"function_name\": \"empty_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 569,
    "solution": "===START===\ndef sort_sublists(list1):\n    \"\"\"\n    Sort each sublist of strings in the given list of lists.\n    \n    Args:\n        list1 (list): A list of lists containing strings\n    \n    Returns:\n        list: A new list with each sublist sorted alphabetically\n    \"\"\"\n    return [sorted(sublist) for sublist in list1]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(list1):",
    "timestamp": "2025-10-17T18:51:06.487078",
    "response_time": "2.12",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 572,
    "solution": "===START===\ndef two_unique_nums(nums):\n    # Use a set to remove duplicates while preserving order\n    unique_nums = []\n    seen = set()\n    \n    for num in nums:\n        # Only add number if it hasn't been seen before\n        if num not in seen:\n            unique_nums.append(num)\n            seen.add(num)\n    \n    return unique_nums\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to remove duplicate numbers from a given number of lists.\n\n### Signature\ndef two_unique_nums(nums):",
    "timestamp": "2025-10-17T18:51:08.672936",
    "response_time": "2.18",
    "context": "{\"function_name\": \"two_unique_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 573,
    "solution": "===START===\ndef unique_product(list_data):\n    # Use set() to get unique numbers from the list\n    unique_numbers = set(list_data)\n    \n    # Initialize product as 1\n    product = 1\n    \n    # Multiply each unique number to calculate the product\n    for num in unique_numbers:\n        product *= num\n    \n    return product\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to calculate the product of the unique numbers in a given list.\n\n### Signature\ndef unique_product(list_data):",
    "timestamp": "2025-10-17T18:51:10.762249",
    "response_time": "2.09",
    "context": "{\"function_name\": \"unique_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 574,
    "solution": "===START===\nimport math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n    \n    Args:\n    r (float): Radius of the cylinder\n    h (float): Height of the cylinder\n    \n    Returns:\n    float: Total surface area of the cylinder\n    \"\"\"\n    # Surface area of a cylinder = 2\u03c0r\u00b2 + 2\u03c0rh\n    # Where r is radius and h is height\n    top_bottom_area = 2 * math.pi * r**2  # Area of top and bottom circular faces\n    side_area = 2 * math.pi * r * h       # Area of curved side surface\n    \n    total_surface_area = top_bottom_area + side_area\n    \n    return total_surface_area\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cylinder.\n\n### Signature\ndef surfacearea_cylinder(r,h):",
    "timestamp": "2025-10-17T18:51:14.551199",
    "response_time": "3.79",
    "context": "{\"function_name\": \"surfacearea_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 576,
    "solution": "===START===\ndef is_Sub_Array(A, B):\n    \"\"\"\n    Check whether list A is a sublist of list B\n    \n    Args:\n    A (list): The potential sublist to search for\n    B (list): The main list to search in\n    \n    Returns:\n    bool: True if A is a sublist of B, False otherwise\n    \"\"\"\n    # If A is empty, it's technically a sublist of any list\n    if not A:\n        return True\n    \n    # If A is longer than B, it can't be a sublist\n    if len(A) > len(B):\n        return False\n    \n    # Iterate through possible starting positions in B\n    for i in range(len(B) - len(A) + 1):\n        # Check if the sublist starting at this position matches A\n        if B[i:i+len(A)] == A:\n            return True\n    \n    # If no match is found, return False\n    return False\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether a list is sublist of another or not.\n\n### Signature\ndef is_Sub_Array(A,B):",
    "timestamp": "2025-10-17T18:51:18.457726",
    "response_time": "3.90",
    "context": "{\"function_name\": \"is_Sub_Array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 577,
    "solution": "===START===\ndef last_Digit_Factorial(n):\n    # Handle base cases\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize result as 1\n    result = 1\n    \n    # Calculate factorial and keep only the last digit\n    for i in range(2, n + 1):\n        result = (result * i) % 10\n    \n    return result\n===END===\n\nThe solution works as follows:\n1. For 0 and 1, the factorial is 1, so return 1\n2. Start with result as 1\n3. Iterate from 2 to n \n4. Multiply result by current number and take modulo 10 to keep only last digit\n5. This prevents integer overflow and directly gives the last digit of factorial\n6. Return the final last digit\n\nTime complexity is O(n)\nSpace complexity is O(1)\n\nKey points:\n- Uses modulo 10 to extract last digit in each multiplication\n- Handles base cases of 0 and 1 \n- Efficiently calculates last digit without computing full factorial\n\nExample:\n- last_Digit_Factorial(5) = 0 (because 5! = 120, last digit is 0)\n- last_Digit_Factorial(4) = 4 (because 4! = 24, last digit is 4)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the last digit in factorial of a given number.\n\n### Signature\ndef last_Digit_Factorial(n):",
    "timestamp": "2025-10-17T18:51:24.498843",
    "response_time": "6.04",
    "context": "{\"function_name\": \"last_Digit_Factorial\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 578,
    "solution": "===START===\ndef interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave three lists of equal length into a single flat list.\n    \n    Args:\n        list1 (list): First input list\n        list2 (list): Second input list\n        list3 (list): Third input list\n    \n    Returns:\n        list: A single list with elements interleaved from input lists\n    \"\"\"\n    # Check if lists are of equal length\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"All input lists must be of equal length\")\n    \n    # Use list comprehension to interleave lists\n    return [item for tuple_items in zip(list1, list2, list3) for item in tuple_items]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to interleave 3 lists of the same length into a single flat list.\n\n### Signature\ndef interleave_lists(list1,list2,list3):",
    "timestamp": "2025-10-17T18:51:27.811119",
    "response_time": "3.31",
    "context": "{\"function_name\": \"interleave_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 579,
    "solution": "===START===\ndef find_dissimilar(test_tup1, test_tup2):\n    # Convert tuples to sets for efficient comparison\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find elements that are in either set but not in both\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    # Convert back to tuple and return\n    return tuple(dissimilar_elements)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the dissimilar elements in the given two tuples.\n\n### Signature\ndef find_dissimilar(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:51:30.251322",
    "response_time": "2.44",
    "context": "{\"function_name\": \"find_dissimilar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 580,
    "solution": "===START===\ndef even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements from a nested mixed tuple based on the provided even function.\n    \n    Args:\n        test_tuple (tuple): Input nested mixed tuple\n        even_fnc (callable): Function to check if an element is even\n    \n    Returns:\n        tuple: Tuple with only even elements\n    \"\"\"\n    def filter_tuple(item):\n        # If item is a tuple, recursively filter its elements\n        if isinstance(item, tuple):\n            filtered = tuple(filter_tuple(sub_item) for sub_item in item)\n            return filtered if filtered else None\n        \n        # If item is not a tuple, apply the even function\n        return item if even_fnc(item) else None\n    \n    # Filter the tuple, removing None values\n    result = tuple(item for item in filter_tuple(test_tuple) if item is not None)\n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove uneven elements in the nested mixed tuple.\n\n### Signature\ndef even_ele(test_tuple, even_fnc):",
    "timestamp": "2025-10-17T18:51:34.313515",
    "response_time": "4.06",
    "context": "{\"function_name\": \"extract_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 581,
    "solution": "===START===\nimport math\n\ndef surface_Area(b, s):\n    \"\"\"\n    Calculate the surface area of a square pyramid\n    \n    Args:\n    b (float): Length of the base edge \n    s (float): Slant height of the pyramid\n    \n    Returns:\n    float: Total surface area of the square pyramid\n    \"\"\"\n    # Calculate base area (square base)\n    base_area = b * b\n    \n    # Calculate triangular face area (4 identical triangular faces)\n    # Area of a triangle = 0.5 * base * height (slant height)\n    triangular_face_area = 0.5 * b * s\n    \n    # Total surface area = base area + (4 * triangular face area)\n    total_surface_area = base_area + (4 * triangular_face_area)\n    \n    return total_surface_area\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\n### Signature\ndef surface_Area(b,s):",
    "timestamp": "2025-10-17T18:51:38.623858",
    "response_time": "4.31",
    "context": "{\"function_name\": \"surface_Area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 582,
    "solution": "===START===\ndef my_dict(dict1):\n    \"\"\"\n    Check if a dictionary is empty.\n    \n    Args:\n        dict1 (dict): The dictionary to check\n    \n    Returns:\n        bool: True if the dictionary is empty, False otherwise\n    \"\"\"\n    return len(dict1) == 0\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if a dictionary is empty\n\n### Signature\ndef my_dict(dict1):",
    "timestamp": "2025-10-17T18:51:40.430752",
    "response_time": "1.80",
    "context": "{\"function_name\": \"my_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 583,
    "solution": "===START===\ndef catalan_number(num):\n    \"\"\"\n    Calculate the nth Catalan number using dynamic programming.\n    \n    Args:\n        num (int): The index of the Catalan number to calculate (0-based)\n    \n    Returns:\n        int: The nth Catalan number\n    \"\"\"\n    # Handle base cases\n    if num <= 1:\n        return 1\n    \n    # Create a dynamic programming array to store Catalan numbers\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    # Calculate Catalan numbers using dynamic programming\n    for i in range(2, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[num]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function which returns nth catalan number.\n\n### Signature\ndef catalan_number(num):",
    "timestamp": "2025-10-17T18:51:43.854174",
    "response_time": "3.42",
    "context": "{\"function_name\": \"catalan_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 584,
    "solution": "===START===\nimport re\n\ndef find_adverbs(text):\n    # Regular expression to find adverbs ending with 'ly'\n    adverb_pattern = r'\\b\\w+ly\\b'\n    \n    # Find all matches of adverbs\n    matches = list(re.finditer(adverb_pattern, text))\n    \n    # If no adverbs found, return None\n    if not matches:\n        return None\n    \n    # Get the first match\n    first_match = matches[0]\n    \n    # Return a tuple with the adverb and its start and end positions\n    return (first_match.group(), first_match.start(), first_match.end())\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n\n### Signature\ndef find_adverbs(text):",
    "timestamp": "2025-10-17T18:51:47.152949",
    "response_time": "3.29",
    "context": "{\"function_name\": \"find_adverbs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 585,
    "solution": "===START===\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items from a given dataset.\n    \n    Args:\n        items (list): A list of items, where each item is expected to have a price attribute\n        n (int): Number of most expensive items to return\n    \n    Returns:\n        list: A list of the n most expensive items sorted in descending order by price\n    \"\"\"\n    # Sort the items in descending order by price and return the top n items\n    return sorted(items, key=lambda x: x.price, reverse=True)[:n]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the n most expensive items in a given dataset.\n\n### Signature\ndef expensive_items(items,n):",
    "timestamp": "2025-10-17T18:51:49.971702",
    "response_time": "2.81",
    "context": "{\"function_name\": \"expensive_items\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 586,
    "solution": "===START===\ndef split_Arr(l, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n    \n    Args:\n    l (list): The input list to be split\n    n (int): The index at which to split the list\n    \n    Returns:\n    list: A new list with elements rearranged\n    \"\"\"\n    # Handle edge cases\n    if not l or n <= 0 or n >= len(l):\n        return l\n    \n    # Split the list and rearrange\n    return l[n:] + l[:n]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n\n### Signature\ndef split_Arr(l, n):",
    "timestamp": "2025-10-17T18:51:52.864712",
    "response_time": "2.89",
    "context": "{\"function_name\": \"split_Arr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 587,
    "solution": "===START===\ndef list_tuple(listx):\n    \"\"\"\n    Convert a given list to a tuple.\n    \n    Args:\n        listx (list): The input list to be converted\n    \n    Returns:\n        tuple: A tuple containing the same elements as the input list\n    \"\"\"\n    return tuple(listx)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert a list to a tuple.\n\n### Signature\ndef list_tuple(listx):",
    "timestamp": "2025-10-17T18:51:54.668780",
    "response_time": "1.80",
    "context": "{\"function_name\": \"list_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 588,
    "solution": "===START===\ndef big_diff(nums):\n    if not nums:\n        return 0\n    return max(nums) - min(nums)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the difference between largest and smallest value in a given list.\n\n### Signature\ndef big_diff(nums):",
    "timestamp": "2025-10-17T18:51:56.915409",
    "response_time": "2.24",
    "context": "{\"function_name\": \"big_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 589,
    "solution": "===START===\nimport math\n\ndef perfect_squares(a, b):\n    # Find the perfect squares between a and b (inclusive)\n    # A perfect square is a number that is the product of an integer with itself\n    \n    # Find the smallest perfect square greater than or equal to a\n    start = math.ceil(math.sqrt(a))\n    \n    # Find the largest perfect square less than or equal to b\n    end = math.floor(math.sqrt(b))\n    \n    # Generate the list of perfect squares\n    return [x*x for x in range(start, end + 1)]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find perfect squares between two given numbers.\n\n### Signature\ndef perfect_squares(a, b):",
    "timestamp": "2025-10-17T18:51:59.739328",
    "response_time": "2.82",
    "context": "{\"function_name\": \"perfect_squares\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 590,
    "solution": "===START===\nimport math\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y)\n    \n    Args:\n    r (float): Radial distance from the origin\n    theta (float): Angle in radians\n    \n    Returns:\n    tuple: Rectangular coordinates (x, y)\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert polar coordinates to rectangular coordinates.\n\n### Signature\ndef polar_rect(x,y):",
    "timestamp": "2025-10-17T18:52:02.387940",
    "response_time": "2.64",
    "context": "{\"function_name\": \"polar_rect\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 591,
    "solution": "===START===\ndef swap_List(newList):\n    # Check if the list has at least 2 elements\n    if len(newList) < 2:\n        return newList\n    \n    # Swap first and last elements using tuple unpacking\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last elements in a list.\n\n### Signature\ndef swap_List(newList):",
    "timestamp": "2025-10-17T18:52:04.393761",
    "response_time": "2.00",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 592,
    "solution": "I'll solve this problem by implementing the function to calculate the sum of products of consecutive binomial coefficients.\n\n===START===\nimport math\n\ndef binomial_Coeff(n, k):\n    \"\"\"\n    Calculate the sum of products of consecutive binomial coefficients\n    \n    Args:\n    n (int): Total number of elements\n    k (int): Number of elements to choose\n    \n    Returns:\n    int: Sum of products of consecutive binomial coefficients\n    \"\"\"\n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate through possible consecutive coefficients\n    for i in range(k):\n        # Calculate consecutive binomial coefficients\n        coeff1 = math.comb(n, i)\n        coeff2 = math.comb(n, i+1)\n        \n        # Add the product of consecutive coefficients to total sum\n        total_sum += coeff1 * coeff2\n    \n    return total_sum\n===END===\n\nThe solution uses the following approach:\n1. Import the `math` module to use the `math.comb()` function for calculating binomial coefficients\n2. Create a function that takes `n` and `k` as input parameters\n3. Initialize a variable `total_sum` to store the sum of products\n4. Iterate from 0 to `k-1`\n5. Calculate consecutive binomial coefficients using `math.comb()`\n6. Multiply consecutive coefficients and add to `total_sum`\n7. Return the final sum\n\nThe `math.comb(n, k)` function calculates the binomial coefficient (n choose k), which represents the number of ways to choose `k` items from `n` items without repetition and without order.\n\nThe time complexity is O(k), and the space complexity is O(1).",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\n### Signature\ndef binomial_Coeff(n,k):",
    "timestamp": "2025-10-17T18:52:11.318781",
    "response_time": "6.92",
    "context": "{\"function_name\": \"sum_Of_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 593,
    "solution": "===START===\ndef removezero_ip(ip):\n    # Split the IP address into octets\n    octets = ip.split('.')\n    \n    # Remove leading zeros from each octet\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    \n    # Rejoin the cleaned octets into an IP address\n    return '.'.join(cleaned_octets)\n===END===\n\nThe function works as follows:\n1. Split the input IP address string into octets using '.' as a separator\n2. Convert each octet to an integer (which automatically removes leading zeros) and then back to a string\n3. Join the cleaned octets back together with '.' to recreate the IP address\n4. This handles cases like '001.002.003.004' and converts it to '1.2.3.4'\n\nThe int() conversion removes leading zeros, and str() converts it back to a string representation without those zeros. The function works for both IPv4 addresses with leading zeros in any or all octets.",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove leading zeroes from an ip address.\n\n### Signature\ndef removezero_ip(ip):",
    "timestamp": "2025-10-17T18:52:16.140558",
    "response_time": "4.82",
    "context": "{\"function_name\": \"removezero_ip\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 594,
    "solution": "===START===\ndef diff_even_odd(list1):\n    # Initialize variables to store first even and first odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find first even and first odd numbers\n    for num in list1:\n        # Find first even number if not already found\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        \n        # Find first odd number if not already found\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # If both first even and first odd are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if first_even is None or first_odd is None:\n        return None\n    \n    # Return the difference between first even and first odd number\n    return first_even - first_odd\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the difference of the first even and first odd number of a given list.\n\n### Signature\ndef diff_even_odd(list1):",
    "timestamp": "2025-10-17T18:52:20.049749",
    "response_time": "3.91",
    "context": "{\"function_name\": \"diff_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 595,
    "solution": "===START===\ndef min_Swaps(str1, str2):\n    # Check if lengths are different\n    if len(str1) != len(str2):\n        return -1\n    \n    # Check if number of 1s and 0s are same\n    if str1.count('1') != str2.count('1'):\n        return -1\n    \n    # Count mismatched positions\n    mismatches = [i for i in range(len(str1)) if str1[i] != str2[i]]\n    \n    # Minimum swaps is half the number of mismatches\n    return len(mismatches) // 2\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n### Signature\ndef min_Swaps(str1,str2) :",
    "timestamp": "2025-10-17T18:52:22.910700",
    "response_time": "2.86",
    "context": "{\"function_name\": \"min_Swaps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 596,
    "solution": "===START===\nimport sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Calculate the total size in bytes of the given tuple.\n    \n    Args:\n        tuple_list (tuple): The input tuple to calculate size for\n    \n    Returns:\n        int: Total size of the tuple in bytes\n    \"\"\"\n    return sys.getsizeof(tuple_list)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the size in bytes of the given tuple.\n\n### Signature\ndef tuple_size(tuple_list):",
    "timestamp": "2025-10-17T18:52:25.057681",
    "response_time": "2.14",
    "context": "{\"function_name\": \"tuple_size\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 597,
    "solution": "===START===\ndef find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from two sorted arrays.\n    \n    Args:\n    arr1 (list): First sorted array\n    arr2 (list): Second sorted array \n    k (int): Position of the element to find (1-based indexing)\n    \n    Returns:\n    int: The kth element in the merged sorted array\n    \"\"\"\n    # Ensure arr1 is the smaller array for efficiency\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    m, n = len(arr1), len(arr2)\n    \n    # Binary search on the smaller array\n    left, right = max(0, k - n), min(k, m)\n    \n    while left <= right:\n        # Partition points\n        partition_x = (left + right) // 2\n        partition_y = k - partition_x\n        \n        # Find max and min elements around partitions\n        max_left_x = float('-inf') if partition_x == 0 else arr1[partition_x - 1]\n        min_right_x = float('inf') if partition_x == m else arr1[partition_x]\n        \n        max_left_y = float('-inf') if partition_y == 0 else arr2[partition_y - 1]\n        min_right_y = float('inf') if partition_y == n else arr2[partition_y]\n        \n        # Check if partition is correct\n        if max_left_x <= min_right_y and max_left_y <= min_right_x:\n            # Return kth element\n            return max(max_left_x, max_left_y)\n        \n        # Adjust binary search\n        elif max_left_x > min_right_y:\n            right = partition_x - 1\n        else:\n            left = partition_x + 1\n    \n    # Should never reach here if inputs are valid\n    raise ValueError(\"Invalid input arrays\")\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find kth element from the given two sorted arrays.\n\n### Signature\ndef find_kth(arr1, arr2, k):",
    "timestamp": "2025-10-17T18:52:33.800631",
    "response_time": "8.74",
    "context": "{\"function_name\": \"find_kth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 598,
    "solution": "===START===\ndef armstrong_number(number):\n    # Convert number to string to easily iterate through digits\n    num_str = str(number)\n    \n    # Calculate the number of digits\n    num_digits = len(num_str)\n    \n    # Calculate the sum of each digit raised to the power of total number of digits\n    armstrong_sum = sum(int(digit) ** num_digits for digit in num_str)\n    \n    # Check if the sum equals the original number\n    return armstrong_sum == number\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether the given number is armstrong or not.\n\n### Signature\ndef armstrong_number(number):",
    "timestamp": "2025-10-17T18:52:36.267648",
    "response_time": "2.46",
    "context": "{\"function_name\": \"armstrong_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 599,
    "solution": "===START===\ndef sum_average(number):\n    \"\"\"\n    Calculate the sum and average of first n natural numbers.\n    \n    Args:\n        number (int): The number of natural numbers to calculate sum and average for\n    \n    Returns:\n        tuple: A tuple containing (sum of numbers, average of numbers)\n    \"\"\"\n    # Calculate sum of first n natural numbers\n    total_sum = sum(range(1, number + 1))\n    \n    # Calculate average by dividing sum by number of elements\n    average = total_sum / number if number > 0 else 0\n    \n    return (total_sum, average)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find sum and average of first n natural numbers.\n\n### Signature\ndef sum_average(number):",
    "timestamp": "2025-10-17T18:52:39.297837",
    "response_time": "3.03",
    "context": "{\"function_name\": \"sum_average\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 600,
    "solution": "===START===\ndef is_Even(n):\n    \"\"\"\n    Check whether the given number is even or not.\n    \n    Args:\n        n (int): The number to check for evenness\n    \n    Returns:\n        bool: True if the number is even, False otherwise\n    \"\"\"\n    return n % 2 == 0\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the given number is even or not.\n\n### Signature\ndef is_Even(n) :",
    "timestamp": "2025-10-17T18:52:41.097441",
    "response_time": "1.80",
    "context": "{\"function_name\": \"is_Even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 602,
    "solution": "===START===\ndef first_repeated_char(str1):\n    # Create a set to track characters seen\n    seen_chars = set()\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If character is already in set, it's the first repeated character\n        if char in seen_chars:\n            return char\n        \n        # Add character to set of seen characters\n        seen_chars.add(char)\n    \n    # If no repeated character is found, return None\n    return None\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the first repeated character in a given string.\n\n### Signature\ndef first_repeated_char(str1):",
    "timestamp": "2025-10-17T18:52:43.521484",
    "response_time": "2.42",
    "context": "{\"function_name\": \"first_repeated_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 603,
    "solution": "===START===\ndef get_ludic(n):\n    \"\"\"\n    Returns a list of lucid numbers less than or equal to n.\n    \n    Lucid numbers are generated through a sieve-like process:\n    1. Start with a list of numbers from 1 to n\n    2. Always keep 1 in the list\n    3. Remove every nth number where n is the next remaining number in the list\n    \n    Args:\n        n (int): The upper limit to generate lucid numbers\n    \n    Returns:\n        list: A list of lucid numbers less than or equal to n\n    \"\"\"\n    if n < 1:\n        return []\n    \n    # Initialize the list with numbers from 1 to n\n    ludic = list(range(1, n + 1))\n    \n    i = 1  # Start from index 1 (second element)\n    while i < len(ludic):\n        current = ludic[i]\n        \n        # Remove every current-th number after the current number\n        j = i + current\n        while j < len(ludic):\n            ludic.pop(j)\n            # Adjust j to account for the removed element\n            j = j - 1 + current\n        \n        i += 1\n    \n    return ludic\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\n### Signature\ndef get_ludic(n):",
    "timestamp": "2025-10-17T18:52:49.066320",
    "response_time": "5.54",
    "context": "{\"function_name\": \"get_ludic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 604,
    "solution": "===START===\ndef reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    \n    # Reverse the list of words\n    reversed_words = words[::-1]\n    \n    # Join the reversed words back into a string\n    return ' '.join(reversed_words)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to reverse words seperated by spaces in a given string.\n\n### Signature\ndef reverse_words(s):",
    "timestamp": "2025-10-17T18:52:50.860145",
    "response_time": "1.79",
    "context": "{\"function_name\": \"reverse_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 605,
    "solution": "===START===\ndef prime_num(num):\n    # Handle edge cases\n    if num <= 1:\n        return False\n    \n    # Check for divisibility from 2 to square root of num\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    return True\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if the given integer is a prime number.\n\n### Signature\ndef prime_num(num):",
    "timestamp": "2025-10-17T18:52:52.979885",
    "response_time": "2.12",
    "context": "{\"function_name\": \"prime_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 606,
    "solution": "===START===\nimport math\n\ndef radian_degree(degree):\n    \"\"\"\n    Convert degrees to radians.\n    \n    Args:\n        degree (float): Angle in degrees\n    \n    Returns:\n        float: Angle converted to radians\n    \"\"\"\n    return degree * (math.pi / 180)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert degrees to radians.\n\n### Signature\ndef radian_degree(degree):",
    "timestamp": "2025-10-17T18:52:54.911025",
    "response_time": "1.93",
    "context": "{\"function_name\": \"radian_degree\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 607,
    "solution": "===START===\nimport re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Search for a regex pattern in the given text and return the matched substring along with its start and end indices.\n    \n    Args:\n        text (str): The input text to search in\n        pattern (str): The regex pattern to search for\n    \n    Returns:\n        tuple: A tuple containing (matched_substring, start_index, end_index)\n               Returns (None, -1, -1) if no match is found\n    \"\"\"\n    # Search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # If a match is found, return the matched substring and its indices\n    if match:\n        return (match.group(), match.start(), match.end())\n    \n    # If no match is found, return default values\n    return (None, -1, -1)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\n### Signature\ndef find_literals(text, pattern):",
    "timestamp": "2025-10-17T18:52:58.324587",
    "response_time": "3.41",
    "context": "{\"function_name\": \"find_literals\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 608,
    "solution": "===START===\ndef bell_Number(n):\n    # Create a 2D array to store Bell triangle values\n    bell_triangle = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # First value is always 1\n    bell_triangle[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # First number in each row is the last number of previous row\n        bell_triangle[i][0] = bell_triangle[i-1][i-1]\n        \n        # Calculate other values in the row\n        for j in range(1, i+1):\n            bell_triangle[i][j] = bell_triangle[i-1][j-1] + bell_triangle[i][j-1]\n    \n    # The first value in the nth row is the nth Bell number\n    return bell_triangle[n][0]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find nth bell number.\n\n### Signature\ndef bell_Number(n):",
    "timestamp": "2025-10-17T18:53:02.441086",
    "response_time": "4.11",
    "context": "{\"function_name\": \"bell_Number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 610,
    "solution": "===START===\ndef remove_kth_element(list1, L):\n    \"\"\"\n    Remove the L'th element from the given list.\n    \n    Args:\n    list1 (list): The input list\n    L (int): The index of the element to remove (0-based indexing)\n    \n    Returns:\n    list: A new list with the L'th element removed\n    \"\"\"\n    # Check if the index is valid\n    if L < 0 or L >= len(list1):\n        return list1.copy()\n    \n    # Create a new list without the L'th element\n    return list1[:L] + list1[L+1:]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\n### Signature\ndef remove_kth_element(list1, L):",
    "timestamp": "2025-10-17T18:53:05.427483",
    "response_time": "2.98",
    "context": "{\"function_name\": \"remove_kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 611,
    "solution": "===START===\ndef max_of_nth(test_list, N):\n    # Check if the list is empty\n    if not test_list:\n        return None\n    \n    # Check if N is a valid column index\n    if N < 0 or N >= len(test_list[0]):\n        return None\n    \n    # Extract the N'th column and find its maximum value\n    return max(row[N] for row in test_list)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\n### Signature\ndef max_of_nth(test_list, N):",
    "timestamp": "2025-10-17T18:53:07.835881",
    "response_time": "2.41",
    "context": "{\"function_name\": \"max_of_nth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 612,
    "solution": "===START===\ndef merge(lst):\n    \"\"\"\n    Takes a list of lists with two elements and returns a list of two lists,\n    where the first list contains first elements and the second list contains second elements.\n    \n    Args:\n        lst (list): A list of lists, where each sublist has two elements\n    \n    Returns:\n        list: A list containing two lists - first elements and second elements\n    \"\"\"\n    if not lst:\n        return [[], []]\n    \n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    \n    return [first_elements, second_elements]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n### Signature\ndef merge(lst):",
    "timestamp": "2025-10-17T18:53:11.012228",
    "response_time": "3.17",
    "context": "{\"function_name\": \"merge\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 614,
    "solution": "===START===\ndef cummulative_sum(test_list):\n    \"\"\"\n    Calculate the cumulative sum of all values in the given tuple list.\n    \n    Args:\n        test_list (list): A list of tuples containing numeric values\n    \n    Returns:\n        int: The cumulative sum of all values in the tuple list\n    \"\"\"\n    # Use sum() with a generator expression to extract all values from tuples\n    return sum(value for tuple_item in test_list for value in tuple_item)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n### Signature\ndef cummulative_sum(test_list):",
    "timestamp": "2025-10-17T18:53:13.604732",
    "response_time": "2.59",
    "context": "{\"function_name\": \"cummulative_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 615,
    "solution": "===START===\ndef average_tuple(nums):\n    \"\"\"\n    Calculate the average value for each tuple in the input tuple of tuples.\n    \n    Args:\n        nums (tuple): A tuple containing tuples of numbers\n    \n    Returns:\n        list: A list of average values for each input tuple\n    \"\"\"\n    return [sum(t) / len(t) for t in nums]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\n### Signature\ndef average_tuple(nums):",
    "timestamp": "2025-10-17T18:53:15.776051",
    "response_time": "2.17",
    "context": "{\"function_name\": \"average_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 616,
    "solution": "===START===\ndef tuple_modulo(test_tup1, test_tup2):\n    # Check if tuples are of the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    # Perform element-wise modulo using list comprehension\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\n### Signature\ndef tuple_modulo(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:53:19.551287",
    "response_time": "3.77",
    "context": "{\"function_name\": \"tuple_modulo\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 617,
    "solution": "===START===\ndef min_Jumps(steps, d):\n    \"\"\"\n    Calculate the minimum number of jumps required to reach point (d, 0) from origin\n    \n    Args:\n    steps (int): Maximum length of each jump\n    d (int): Distance to reach on x-axis\n    \n    Returns:\n    int: Minimum number of jumps required, or -1 if impossible\n    \"\"\"\n    # If distance is 0, no jumps needed\n    if d == 0:\n        return 0\n    \n    # If steps is 0 and distance is non-zero, impossible to reach\n    if steps == 0:\n        return -1\n    \n    # Track possible x-coordinates after each jump\n    possible_positions = {0}\n    \n    # Track number of jumps\n    jumps = 0\n    \n    while possible_positions:\n        jumps += 1\n        new_positions = set()\n        \n        # Try jumping forward and backward for each current position\n        for pos in possible_positions:\n            # Jump forward\n            forward_pos = pos + steps\n            if forward_pos == d:\n                return jumps\n            new_positions.add(forward_pos)\n            \n            # Jump backward\n            backward_pos = pos - steps\n            if backward_pos == d:\n                return jumps\n            new_positions.add(backward_pos)\n        \n        # Update possible positions\n        possible_positions = new_positions\n        \n        # Prevent infinite loop and limit search space\n        if jumps > abs(d) + steps:\n            break\n    \n    return -1\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n### Signature\ndef min_Jumps(steps, d):",
    "timestamp": "2025-10-17T18:53:25.675772",
    "response_time": "6.12",
    "context": "{\"function_name\": \"min_Jumps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 618,
    "solution": "===START===\ndef div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise.\n    \n    Args:\n        nums1 (list): First list of numbers\n        nums2 (list): Second list of numbers\n    \n    Returns:\n        list: A new list with each element of nums1 divided by corresponding element in nums2\n    \n    Raises:\n        ValueError: If lists are of different lengths\n        ZeroDivisionError: If any element in nums2 is zero\n    \"\"\"\n    # Check if lists have same length\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must be of equal length\")\n    \n    # Perform element-wise division\n    result = [num1 / num2 for num1, num2 in zip(nums1, nums2)]\n    \n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to divide two lists element wise.\n\n### Signature\ndef div_list(nums1,nums2):",
    "timestamp": "2025-10-17T18:53:29.019391",
    "response_time": "3.34",
    "context": "{\"function_name\": \"div_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 619,
    "solution": "===START===\ndef move_num(test_str):\n    # Separate numbers and non-numbers\n    numbers = [char for char in test_str if char.isdigit()]\n    non_numbers = [char for char in test_str if not char.isdigit()]\n    \n    # Combine non-numbers followed by numbers\n    return ''.join(non_numbers + numbers)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to move all the numbers to the end of the given string.\n\n### Signature\ndef move_num(test_str):",
    "timestamp": "2025-10-17T18:53:31.494710",
    "response_time": "2.47",
    "context": "{\"function_name\": \"move_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 620,
    "solution": "===START===\nfrom typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    # If the list is empty, return 0\n    if not a:\n        return 0\n    \n    # Sort the list in ascending order\n    a.sort()\n    n = len(a)\n    \n    # Initialize dp array to store the size of largest divisible subset \n    # ending at each index\n    dp = [1] * n\n    \n    # Track the maximum subset size\n    max_subset_size = 1\n    \n    # Iterate through the list\n    for i in range(1, n):\n        for j in range(i):\n            # Check if current number is divisible by previous number\n            # or vice versa\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                # Update the subset size for current index\n                dp[i] = max(dp[i], dp[j] + 1)\n        \n        # Update the maximum subset size\n        max_subset_size = max(max_subset_size, dp[i])\n    \n    return max_subset_size\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n### Signature\ndef largest_subset(a):",
    "timestamp": "2025-10-17T18:53:35.780675",
    "response_time": "4.28",
    "context": "{\"function_name\": \"largest_subset\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 622,
    "solution": "===START===\ndef get_median(arr1, arr2, n):\n    \"\"\"\n    Find the median of two sorted lists of the same size.\n    \n    Args:\n    arr1 (list): First sorted list of integers\n    arr2 (list): Second sorted list of integers\n    n (int): Size of each list\n    \n    Returns:\n    float: Median of the combined sorted lists\n    \"\"\"\n    # Merge the two sorted lists\n    merged = []\n    i, j = 0, 0\n    \n    while i < n and j < n:\n        if arr1[i] <= arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    \n    # Add remaining elements if any\n    while i < n:\n        merged.append(arr1[i])\n        i += 1\n    \n    while j < n:\n        merged.append(arr2[j])\n        j += 1\n    \n    # Calculate median\n    # Since lists are of same size, total length will be 2n\n    # Median will be average of middle two elements\n    mid = n  # middle index in merged list\n    return (merged[mid-1] + merged[mid]) / 2\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the median of two sorted lists of same size.\n\n### Signature\ndef get_median(arr1, arr2, n):",
    "timestamp": "2025-10-17T18:53:40.498232",
    "response_time": "4.71",
    "context": "{\"function_name\": \"get_median\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 623,
    "solution": "===START===\ndef nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in the input list.\n    \n    Args:\n        nums (list): A list of numbers to be raised to the n-th power\n        n (int): The power to which each number should be raised\n    \n    Returns:\n        list: A new list with each number raised to the n-th power\n    \"\"\"\n    return [num ** n for num in nums]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to compute the n-th power of each number in a list.\n\n### Signature\ndef nth_nums(nums,n):",
    "timestamp": "2025-10-17T18:53:42.678043",
    "response_time": "2.18",
    "context": "{\"function_name\": \"nth_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 624,
    "solution": "===START===\ndef is_upper(string):\n    \"\"\"\n    Convert a given string to uppercase.\n    \n    Args:\n        string (str): The input string to be converted to uppercase\n    \n    Returns:\n        str: The uppercase version of the input string\n    \"\"\"\n    return string.upper()\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to convert a given string to uppercase.\n\n### Signature\ndef is_upper(string):",
    "timestamp": "2025-10-17T18:53:44.628864",
    "response_time": "1.95",
    "context": "{\"function_name\": \"is_upper\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 625,
    "solution": "===START===\ndef swap_List(newList):\n    # Check if the list has at least 2 elements\n    if len(newList) < 2:\n        return newList\n    \n    # Swap first and last elements using tuple unpacking\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last element in a given list.\n\n### Signature\ndef swap_List(newList):",
    "timestamp": "2025-10-17T18:53:46.670446",
    "response_time": "2.04",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 626,
    "solution": "===START===\nimport math\n\ndef triangle_area(r):\n    # The largest triangle inscribed in a semicircle will have its base along the diameter\n    # and its height will be the radius\n    \n    # Base of the triangle is the diameter = 2r\n    base = 2 * r\n    \n    # Height of the triangle is the radius\n    height = r\n    \n    # Area of triangle = 1/2 * base * height\n    area = 0.5 * base * height\n    \n    return area\n\n===END===\n\nThe solution works as follows:\n1. The largest triangle that can be inscribed in a semicircle will have:\n   - Its base along the diameter of the semicircle (length = 2r)\n   - Its height equal to the radius of the semicircle (r)\n2. The area of a triangle is calculated using the formula: 1/2 * base * height\n3. Substituting the base and height gives the area as 1/2 * (2r) * r = r\u00b2\n4. The function takes the radius as input and returns the area of the largest inscribed triangle\n\nThe time complexity is O(1) as it's a simple calculation, and space complexity is O(1) as it uses only a constant amount of additional space.",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n### Signature\ndef triangle_area(r) :",
    "timestamp": "2025-10-17T18:53:52.676552",
    "response_time": "6.00",
    "context": "{\"function_name\": \"triangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 627,
    "solution": "===START===\ndef find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n    \n    Args:\n    array (list): A sorted list of natural numbers\n    start (int, optional): Starting index to search from. Defaults to 0.\n    end (int, optional): Ending index to search to. Defaults to None (full array length).\n    \n    Returns:\n    int: The smallest missing natural number\n    \"\"\"\n    # If end is not specified, set it to the length of the array\n    if end is None:\n        end = len(array) - 1\n    \n    # If the first element is not 1, return 1\n    if array[start] != 1:\n        return 1\n    \n    # Iterate through the array to find the first missing number\n    for i in range(start, end):\n        # Check if the next expected number is missing\n        if array[i+1] - array[i] > 1:\n            return array[i] + 1\n    \n    # If no missing number found in the range, return the next number after the last element\n    return array[end] + 1\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\n### Signature\ndef find_First_Missing(array,start=0,end=None):",
    "timestamp": "2025-10-17T18:53:57.280666",
    "response_time": "4.60",
    "context": "{\"function_name\": \"find_First_Missing\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 628,
    "solution": "===START===\ndef replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n    \n    Args:\n        string (str): The input string to modify\n    \n    Returns:\n        str: A new string with spaces replaced by '%20'\n    \"\"\"\n    return string.replace(' ', '%20')\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to replace all spaces in the given string with '%20'.\n\n### Signature\ndef replace_spaces(string):",
    "timestamp": "2025-10-17T18:53:59.337479",
    "response_time": "2.05",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 629,
    "solution": "===START===\ndef Split(list):\n    \"\"\"\n    Find and return a list of even numbers from the input list.\n    \n    Args:\n        list (list): A list of numbers to filter for even numbers\n    \n    Returns:\n        list: A list containing only the even numbers from the input list\n    \"\"\"\n    return [num for num in list if num % 2 == 0]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find even numbers from a list of numbers.\n\n### Signature\ndef Split(list):",
    "timestamp": "2025-10-17T18:54:01.559771",
    "response_time": "2.22",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 630,
    "solution": "===START===\ndef adjac(ele, sub = []):\n    \"\"\"\n    Extract all adjacent coordinates of a given coordinate tuple.\n    \n    Args:\n        ele (tuple): The input coordinate tuple (x, y)\n        sub (list, optional): Additional list to store adjacent coordinates. Defaults to empty list.\n    \n    Returns:\n        list: List of adjacent coordinates including up, down, left, right\n    \"\"\"\n    x, y = ele\n    \n    # Define adjacent coordinate offsets\n    adjacent_offsets = [\n        (x, y+1),   # Up\n        (x, y-1),   # Down\n        (x-1, y),   # Left\n        (x+1, y)    # Right\n    ]\n    \n    # Extend the sub list with adjacent coordinates\n    sub.extend(adjacent_offsets)\n    \n    return sub\n\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n### Signature\ndef adjac(ele, sub = []):",
    "timestamp": "2025-10-17T18:54:05.201168",
    "response_time": "3.64",
    "context": "{\"function_name\": \"get_coordinates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 631,
    "solution": "===START===\ndef replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with underscores and underscores with whitespaces in the given text.\n    \n    Args:\n        text (str): Input string to modify\n    \n    Returns:\n        str: Modified string with spaces and underscores swapped\n    \"\"\"\n    # Replace spaces with underscores and vice versa\n    return text.replace(' ', '_').replace('_', ' ')\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\n### Signature\ndef replace_spaces(text):",
    "timestamp": "2025-10-17T18:54:07.752804",
    "response_time": "2.55",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 632,
    "solution": "===START===\ndef move_zero(num_list):\n    # Two-pointer approach to move zeroes to the end\n    non_zero_index = 0\n    \n    # First pass: Move all non-zero elements to the front\n    for i in range(len(num_list)):\n        if num_list[i] != 0:\n            num_list[non_zero_index] = num_list[i]\n            non_zero_index += 1\n    \n    # Second pass: Fill the remaining elements with zeroes\n    while non_zero_index < len(num_list):\n        num_list[non_zero_index] = 0\n        non_zero_index += 1\n    \n    return num_list\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to move all zeroes to the end of the given list.\n\n### Signature\ndef move_zero(num_list):",
    "timestamp": "2025-10-17T18:54:11.138492",
    "response_time": "3.38",
    "context": "{\"function_name\": \"move_zero\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 633,
    "solution": "===START===\ndef pair_xor_Sum(arr, n):\n    \"\"\"\n    Calculate the sum of XOR of all possible pairs in the given list\n    \n    Args:\n    arr (list): List of integers\n    n (int): Length of the list\n    \n    Returns:\n    int: Sum of XOR of all pairs\n    \"\"\"\n    # Initialize total sum to 0\n    total_xor_sum = 0\n    \n    # Iterate through all possible pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate XOR of current pair and add to total sum\n            total_xor_sum += arr[i] ^ arr[j]\n    \n    return total_xor_sum\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\n### Signature\ndef pair_xor_Sum(arr,n) :",
    "timestamp": "2025-10-17T18:54:14.947656",
    "response_time": "3.81",
    "context": "{\"function_name\": \"pair_xor_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 635,
    "solution": "===START===\ndef heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(iterable):\n    # Convert input to list if it's not already a list\n    arr = list(iterable)\n    n = len(arr)\n\n    # Build max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements from heap one by one\n    for i in range(n - 1, 0, -1):\n        # Move current root to end\n        arr[0], arr[i] = arr[i], arr[0]\n        \n        # Call max heapify on the reduced heap\n        heapify(arr, i, 0)\n\n    return arr\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort the given list.\n\n### Signature\ndef heap_sort(iterable):",
    "timestamp": "2025-10-17T18:54:19.266738",
    "response_time": "4.31",
    "context": "{\"function_name\": \"heap_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 637,
    "solution": "===START===\ndef noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss\n    \n    Args:\n        actual_cost (float): The original cost of the item\n        sale_amount (float): The selling price of the item\n    \n    Returns:\n        bool: True if there is no profit and no loss (sale_amount equals actual_cost), False otherwise\n    \"\"\"\n    return actual_cost == sale_amount\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether the given amount has no profit and no loss\n\n### Signature\ndef noprofit_noloss(actual_cost,sale_amount):",
    "timestamp": "2025-10-17T18:54:21.612466",
    "response_time": "2.34",
    "context": "{\"function_name\": \"noprofit_noloss\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 638,
    "solution": "===START===\nimport math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate wind chill index rounded to the next integer\n    \n    Args:\n    v (float): Wind velocity in kilometers per hour\n    t (float): Temperature in Celsius\n    \n    Returns:\n    int: Wind chill index rounded up to the next integer\n    \"\"\"\n    # Wind chill formula: 13.12 + (0.6215 * t) - (11.37 * v^0.16) + (0.3965 * t * v^0.16)\n    wind_chill_index = 13.12 + (0.6215 * t) - (11.37 * (v ** 0.16)) + (0.3965 * t * (v ** 0.16))\n    \n    # Round up to the next integer\n    return math.ceil(wind_chill_index)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n### Signature\ndef wind_chill(v,t):",
    "timestamp": "2025-10-17T18:54:25.178638",
    "response_time": "3.56",
    "context": "{\"function_name\": \"wind_chill\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 639,
    "solution": "===START===\ndef sample_nam(sample_names):\n    # Filter names that start with an uppercase letter\n    uppercase_names = [name for name in sample_names if name and name[0].isupper()]\n    \n    # Sum the lengths of the filtered names\n    return sum(len(name) for name in uppercase_names)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n### Signature\ndef sample_nam(sample_names):",
    "timestamp": "2025-10-17T18:54:27.197310",
    "response_time": "2.01",
    "context": "{\"function_name\": \"sample_nam\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 640,
    "solution": "===START===\nimport re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Remove parentheses and their contents from a given string.\n    \n    Args:\n        items (str): Input string containing parentheses\n    \n    Returns:\n        str: String with parentheses and their contents removed\n    \"\"\"\n    return re.sub(r'\\([^)]*\\)', '', items)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n\n### Signature\ndef remove_parenthesis(items):",
    "timestamp": "2025-10-17T18:54:29.332297",
    "response_time": "2.13",
    "context": "{\"function_name\": \"remove_parenthesis\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 641,
    "solution": "I'll solve this by implementing a function to find the nth nonagonal number. Nonagonal numbers are figurate numbers that extend the concept of triangular and square numbers to a nonagon (9-sided polygon).\n\nThe formula for the nth nonagonal number is: n * (7n - 5) / 2\n\n===START===\ndef is_nonagonal(n):\n    \"\"\"\n    Calculate the nth nonagonal number.\n    \n    Args:\n        n (int): The position of the nonagonal number to calculate.\n    \n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    return n * (7 * n - 5) // 2\n===END===\n\nThe function uses the standard formula for nonagonal numbers:\n1. Multiply n by (7n - 5)\n2. Divide the result by 2\n3. Use integer division (//) to ensure an integer result\n\nExamples:\n- is_nonagonal(1) = 1\n- is_nonagonal(2) = 9\n- is_nonagonal(3) = 24\n- is_nonagonal(4) = 46\n\nThe function efficiently calculates the nth nonagonal number for any positive integer n.",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth nonagonal number.\n\n### Signature\ndef is_nonagonal(n):",
    "timestamp": "2025-10-17T18:54:34.511520",
    "response_time": "5.17",
    "context": "{\"function_name\": \"is_nonagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 643,
    "solution": "===START===\ndef text_match_wordz_middle(text):\n    # Check if text is empty or None\n    if not text:\n        return False\n    \n    # Remove leading and trailing whitespace\n    text = text.strip()\n    \n    # Check if 'z' exists in the middle of the word\n    # Exclude first and last characters\n    if len(text) > 2:\n        return 'z' in text[1:-1]\n    \n    # If text is 2 characters or less, return False\n    return False\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\n### Signature\ndef text_match_wordz_middle(text):",
    "timestamp": "2025-10-17T18:54:38.456964",
    "response_time": "3.94",
    "context": "{\"function_name\": \"text_match_wordz_middle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 644,
    "solution": "===START===\ndef reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Reverses the first k elements of the input array.\n    \n    Args:\n    input (list): The input array to be partially reversed\n    k (int): The position up to which the array should be reversed\n    \n    Returns:\n    list: The array with first k elements reversed\n    \"\"\"\n    # Check if k is valid \n    if k < 0 or k > len(input):\n        return input\n    \n    # Reverse the first k elements\n    left = 0\n    right = k - 1\n    \n    while left < right:\n        # Swap elements\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    \n    return input\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to reverse an array upto a given position.\n\n### Signature\ndef reverse_Array_Upto_K(input, k):",
    "timestamp": "2025-10-17T18:54:41.757434",
    "response_time": "3.30",
    "context": "{\"function_name\": \"reverse_Array_Upto_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 720,
    "solution": "===START===\ndef add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Add a dictionary to a tuple and return a new tuple.\n    \n    Args:\n        test_tup (tuple): The original tuple\n        test_dict (dict): The dictionary to be added\n    \n    Returns:\n        tuple: A new tuple containing the original tuple elements and the dictionary\n    \"\"\"\n    return test_tup + (test_dict,)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\n### Signature\ndef add_dict_to_tuple(test_tup, test_dict):",
    "timestamp": "2025-10-17T18:54:44.017256",
    "response_time": "2.26",
    "context": "{\"function_name\": \"add_dict_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 721,
    "solution": "===START===\ndef maxAverageOfPath(cost):\n    \"\"\"\n    Find the maximum average path from top-left to bottom-right of a square matrix\n    \n    Args:\n        cost (List[List[int]]): Square matrix representing cell costs\n    \n    Returns:\n        float: Maximum average path cost\n    \"\"\"\n    # Get matrix dimensions\n    n = len(cost)\n    \n    # Create DP table to store maximum path sums\n    dp = [[0] * n for _ in range(n)]\n    \n    # Initialize first cell\n    dp[0][0] = cost[0][0]\n    \n    # Initialize first row\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    # Initialize first column\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    # Fill DP table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # Compute path length (always n + n - 1 cells)\n    path_length = 2 * n - 1\n    \n    # Return maximum average\n    return dp[n-1][n-1] / path_length\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n### Signature\ndef maxAverageOfPath(cost):",
    "timestamp": "2025-10-17T18:54:49.342911",
    "response_time": "5.32",
    "context": "{\"function_name\": \"maxAverageOfPath\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 722,
    "solution": "===START===\ndef filter_data(students, h, w):\n    \"\"\"\n    Filter students based on minimum height and weight requirements.\n    \n    Args:\n    students (dict): Dictionary with student names as keys and (height, weight) tuples as values\n    h (float): Minimum height threshold\n    w (float): Minimum weight threshold\n    \n    Returns:\n    dict: Filtered dictionary of students meeting height and weight criteria\n    \"\"\"\n    return {name: measurements for name, measurements in students.items() \n            if measurements[0] >= h and measurements[1] >= w}\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\n### Signature\ndef filter_data(students,h,w):",
    "timestamp": "2025-10-17T18:54:51.859901",
    "response_time": "2.51",
    "context": "{\"function_name\": \"filter_data\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 723,
    "solution": "===START===\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    Count the number of indices where nums1 and nums2 have the same values.\n    \n    Args:\n        nums1 (list): First list of numbers\n        nums2 (list): Second list of numbers\n    \n    Returns:\n        int: Number of indices where values are the same\n    \"\"\"\n    # Check if lists are of equal length\n    if len(nums1) != len(nums2):\n        return 0\n    \n    # Count indices with same values using list comprehension\n    return sum(1 for i in range(len(nums1)) if nums1[i] == nums2[i])\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\n### Signature\ndef count_same_pair(nums1, nums2):",
    "timestamp": "2025-10-17T18:54:54.885521",
    "response_time": "3.02",
    "context": "{\"function_name\": \"count_same_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 724,
    "solution": "===START===\ndef power_base_sum(base, power):\n    # Calculate base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to easily iterate through digits\n    result_str = str(result)\n    \n    # Sum the digits by converting each character back to an integer\n    digit_sum = sum(int(digit) for digit in result_str)\n    \n    return digit_sum\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\n### Signature\ndef power_base_sum(base, power):",
    "timestamp": "2025-10-17T18:54:57.420492",
    "response_time": "2.53",
    "context": "{\"function_name\": \"power_base_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 725,
    "solution": "===START===\nimport re\n\ndef extract_quotation(text1):\n    # Use regex to find all strings enclosed in double quotes\n    matches = re.findall(r'\"([^\"]*)\"', text1)\n    \n    # Return the list of extracted strings\n    return matches\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks \" \" of the given string.\n\n### Signature\ndef extract_quotation(text1):",
    "timestamp": "2025-10-17T18:54:59.274715",
    "response_time": "1.85",
    "context": "{\"function_name\": \"extract_quotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 726,
    "solution": "===START===\ndef multiply_elements(test_tup):\n    \"\"\"\n    Takes a tuple of numbers and returns a new tuple where each element \n    is the product of consecutive elements from the input tuple.\n    \n    Args:\n        test_tup (tuple): Input tuple of numbers\n    \n    Returns:\n        tuple: Tuple of products of consecutive elements\n    \"\"\"\n    # Create a new tuple by multiplying consecutive elements\n    return tuple(test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n### Signature\ndef multiply_elements(test_tup):",
    "timestamp": "2025-10-17T18:55:01.826314",
    "response_time": "2.55",
    "context": "{\"function_name\": \"multiply_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 728,
    "solution": "===START===\ndef sum_list(lst1, lst2):\n    \"\"\"\n    Takes two lists of equal length and returns a new list with element-wise sum.\n    \n    Args:\n        lst1 (list): First input list of numbers\n        lst2 (list): Second input list of numbers\n    \n    Returns:\n        list: A new list where each element is the sum of corresponding elements from lst1 and lst2\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n### Signature\ndef sum_list(lst1,lst2):",
    "timestamp": "2025-10-17T18:55:04.439172",
    "response_time": "2.61",
    "context": "{\"function_name\": \"sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 730,
    "solution": "===START===\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates from a given list.\n    \n    Args:\n        nums (list): Input list with potential consecutive duplicates\n    \n    Returns:\n        list: A new list with consecutive duplicates removed\n    \"\"\"\n    if not nums:\n        return []\n    \n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    \n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove consecutive duplicates of a given list.\n\n### Signature\ndef consecutive_duplicates(nums):",
    "timestamp": "2025-10-17T18:55:06.799530",
    "response_time": "2.35",
    "context": "{\"function_name\": \"consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 731,
    "solution": "===START===\nimport math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n    \n    Args:\n    r (float): Radius of the base of the cone\n    h (float): Height of the cone\n    \n    Returns:\n    float: Lateral surface area of the cone\n    \"\"\"\n    # Lateral surface area of a cone = \u03c0 * r * slant height\n    # Slant height is calculated using Pythagorean theorem: sqrt(r^2 + h^2)\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    \n    return lateral_surface_area\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\n### Signature\ndef lateralsurface_cone(r,h):",
    "timestamp": "2025-10-17T18:55:10.441646",
    "response_time": "3.64",
    "context": "{\"function_name\": \"lateralsurface_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 732,
    "solution": "===START===\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \n    Args:\n        text (str): Input string to be modified\n    \n    Returns:\n        str: Modified string with spaces, commas, and dots replaced by colons\n    \"\"\"\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\n### Signature\ndef replace_specialchar(text):",
    "timestamp": "2025-10-17T18:55:12.712202",
    "response_time": "2.27",
    "context": "{\"function_name\": \"replace_specialchar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 733,
    "solution": "===START===\ndef find_first_occurrence(A, x):\n    \"\"\"\n    Find the index of the first occurrence of x in a sorted array A.\n    \n    Args:\n    A (list): A sorted array of integers\n    x (int): The target number to find\n    \n    Returns:\n    int: Index of the first occurrence of x, or -1 if x is not in the array\n    \"\"\"\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If x is found, check if it's the first occurrence\n        if A[mid] == x:\n            # If this is the first element or previous element is less than x\n            if mid == 0 or A[mid-1] < x:\n                return mid\n            # Otherwise, search in the left half\n            right = mid - 1\n        \n        # If x is less than mid element, search left half\n        elif x < A[mid]:\n            right = mid - 1\n        \n        # If x is greater than mid element, search right half\n        else:\n            left = mid + 1\n    \n    # x not found in the array\n    return -1\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\n### Signature\ndef find_first_occurrence(A, x):",
    "timestamp": "2025-10-17T18:55:17.259741",
    "response_time": "4.54",
    "context": "{\"function_name\": \"find_first_occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 734,
    "solution": "===START===\ndef sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    # Iterate through all possible start indices\n    for start in range(n):\n        # Initialize product for current subarray\n        curr_prod = 1\n        \n        # Iterate through all possible end indices from start\n        for end in range(start, n):\n            # Multiply current element to the product\n            curr_prod *= arr[end]\n            \n            # Add current subarray's product to total sum\n            total_sum += curr_prod\n    \n    return total_sum\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\n### Signature\ndef sum_Of_Subarray_Prod(arr):",
    "timestamp": "2025-10-17T18:55:20.546684",
    "response_time": "3.28",
    "context": "{\"function_name\": \"sum_Of_Subarray_Prod\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 735,
    "solution": "===START===\ndef set_middle_bits(n):\n    # If number is less than 3, no middle bits to toggle\n    if n < 3:\n        return n\n    \n    # Find the number of bits in the number\n    num_bits = n.bit_length()\n    \n    # Create a mask to toggle middle bits\n    # 1 for first and last bit, 0 for middle bits\n    mask = (1 << (num_bits - 1)) | 1\n    \n    # Invert the mask to get 0 for first and last bit, 1 for middle bits\n    middle_mask = ~mask\n    \n    # XOR the number with middle mask to toggle middle bits\n    return n ^ (n & middle_mask)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\n### Signature\ndef set_middle_bits(n):",
    "timestamp": "2025-10-17T18:55:24.155371",
    "response_time": "3.60",
    "context": "{\"function_name\": \"toggle_middle_bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 736,
    "solution": "===START===\ndef left_insertion(a, x):\n    \"\"\"\n    Find the left insertion point for a value x in a sorted list a.\n    \n    Args:\n    a (list): A sorted list of elements\n    x: The value to find the insertion point for\n    \n    Returns:\n    int: The index where x should be inserted to maintain sorted order\n    \"\"\"\n    left, right = 0, len(a)\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return left\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\n### Signature\ndef left_insertion(a, x):",
    "timestamp": "2025-10-17T18:55:26.919116",
    "response_time": "2.76",
    "context": "{\"function_name\": \"left_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 737,
    "solution": "===START===\nimport re\n\ndef check_str(string):\n    # Regular expression pattern to match strings starting with a vowel (case-insensitive)\n    vowel_pattern = r'^[aeiou]'\n    \n    # Check if the string starts with a vowel using regex\n    if re.match(vowel_pattern, string, re.IGNORECASE):\n        return True\n    else:\n        return False\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\n### Signature\ndef check_str(string):",
    "timestamp": "2025-10-17T18:55:29.164003",
    "response_time": "2.24",
    "context": "{\"function_name\": \"check_str\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 738,
    "solution": "===START===\ndef geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1 terms.\n    \n    The geometric sum is defined as: 1 + 1/2 + 1/4 + 1/8 + ... + 1/(2^(n-1))\n    \n    Args:\n        n (int): Number of terms in the geometric sum\n    \n    Returns:\n        float: The geometric sum\n    \"\"\"\n    # Base case: if n is 0 or 1, return 1\n    if n <= 1:\n        return 1\n    \n    # Recursive calculation of geometric sum\n    return 1 + geometric_sum(n - 1) / 2\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\n### Signature\ndef geometric_sum(n):",
    "timestamp": "2025-10-17T18:55:32.490236",
    "response_time": "3.32",
    "context": "{\"function_name\": \"geometric_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 739,
    "solution": "===START===\ndef find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n    \n    A triangular number is calculated as T(k) = k * (k + 1) // 2\n    \n    Args:\n        n (int): Number of digits to find in triangular number\n    \n    Returns:\n        int: Index of the smallest triangular number with n digits\n    \"\"\"\n    k = 1\n    while True:\n        # Calculate triangular number\n        triangular_num = k * (k + 1) // 2\n        \n        # Check if triangular number has n digits\n        if len(str(triangular_num)) == n:\n            return k\n        \n        k += 1\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\n### Signature\ndef find_Index(n):",
    "timestamp": "2025-10-17T18:55:35.886637",
    "response_time": "3.39",
    "context": "{\"function_name\": \"find_Index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 740,
    "solution": "===START===\ndef tuple_to_dict(test_tup):\n    \"\"\"\n    Convert a tuple to a dictionary using adjacent elements as key-value pairs.\n    \n    Args:\n        test_tup (tuple): Input tuple with elements to be converted to dictionary\n    \n    Returns:\n        dict: Dictionary with adjacent elements as key-value pairs\n    \"\"\"\n    # Use dictionary comprehension to create key-value pairs from adjacent elements\n    # Iterate through the tuple with step 2 to get keys and values\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup)-1, 2)}\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\n### Signature\ndef tuple_to_dict(test_tup):",
    "timestamp": "2025-10-17T18:55:39.447434",
    "response_time": "3.56",
    "context": "{\"function_name\": \"tuple_to_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 741,
    "solution": "===START===\ndef all_Characters_Same(s):\n    # If string is empty or has only one character, return True\n    if len(s) <= 1:\n        return True\n    \n    # Compare first character with all other characters\n    first_char = s[0]\n    for char in s[1:]:\n        if char != first_char:\n            return False\n    \n    return True\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether all the characters are same or not.\n\n### Signature\ndef all_Characters_Same(s) :",
    "timestamp": "2025-10-17T18:55:41.526190",
    "response_time": "2.07",
    "context": "{\"function_name\": \"all_Characters_Same\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 742,
    "solution": "===START===\nimport math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given the length of its side.\n    \n    Args:\n        side (float): Length of a side of the tetrahedron\n    \n    Returns:\n        float: Total surface area of the tetrahedron\n    \"\"\"\n    # Formula for surface area of a regular tetrahedron is sqrt(3) * side^2\n    area = math.sqrt(3) * (side ** 2)\n    return area\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to caluclate the area of a tetrahedron.\n\n### Signature\ndef area_tetrahedron(side):",
    "timestamp": "2025-10-17T18:55:44.051132",
    "response_time": "2.52",
    "context": "{\"function_name\": \"area_tetrahedron\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 743,
    "solution": "===START===\ndef rotate_right(list, m):\n    # If the list is empty or no rotation needed, return the original list\n    if not list or m == 0:\n        return list\n    \n    # Normalize the rotation amount to handle cases where m > list length\n    m = m % len(list)\n    \n    # Slice the list to perform right rotation\n    # Last m elements come first, followed by the remaining elements\n    return list[-m:] + list[:-m]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\n### Signature\ndef rotate_right(list, m):",
    "timestamp": "2025-10-17T18:55:47.016654",
    "response_time": "2.96",
    "context": "{\"function_name\": \"rotate_right\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 744,
    "solution": "===START===\ndef check_none(test_tup):\n    \"\"\"\n    Check if the given tuple has any None value.\n    \n    Args:\n        test_tup (tuple): Input tuple to check for None values\n    \n    Returns:\n        bool: True if tuple contains any None value, False otherwise\n    \"\"\"\n    return any(item is None for item in test_tup)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if the given tuple has any none value or not.\n\n### Signature\ndef check_none(test_tup):",
    "timestamp": "2025-10-17T18:55:49.150559",
    "response_time": "2.13",
    "context": "{\"function_name\": \"check_none\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 745,
    "solution": "===START===\ndef divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        # Convert number to string to iterate through its digits\n        str_num = str(num)\n        \n        # Check divisibility for each non-zero digit\n        for digit in str_num:\n            # Convert digit back to integer\n            d = int(digit)\n            \n            # Skip zero to avoid division by zero\n            if d == 0:\n                continue\n            \n            # If number is not divisible by any of its digits, return False\n            if num % d != 0:\n                return False\n        \n        # If all non-zero digits divide the number, return True\n        return True\n    \n    # Return list of numbers in range that are divisible by their digits\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\n### Signature\ndef divisible_by_digits(startnum, endnum):",
    "timestamp": "2025-10-17T18:55:52.963061",
    "response_time": "3.81",
    "context": "{\"function_name\": \"divisible_by_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 746,
    "solution": "===START===\nimport math\n\ndef sector_area(r, a):\n    # Check if angle is larger than 360 degrees\n    if a > 360:\n        return None\n    \n    # Convert angle to radians\n    angle_radians = math.radians(a)\n    \n    # Calculate sector area using formula: (r^2 * \u03b8) / 2\n    area = (r ** 2 * angle_radians) / 2\n    \n    return area\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\n### Signature\ndef sector_area(r,a):",
    "timestamp": "2025-10-17T18:55:55.407979",
    "response_time": "2.44",
    "context": "{\"function_name\": \"sector_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 747,
    "solution": "===START===\ndef lcs_of_three(X, Y, Z):\n    \"\"\"\n    Find the length of the Longest Common Subsequence (LCS) for three strings\n    \n    Args:\n    X (str): First input string\n    Y (str): Second input string \n    Z (str): Third input string\n    \n    Returns:\n    int: Length of the longest common subsequence\n    \"\"\"\n    # Get lengths of input strings\n    m, n, o = len(X), len(Y), len(Z)\n    \n    # Create 3D DP table initialized with zeros \n    # Dimensions are (m+1) x (n+1) x (o+1)\n    dp = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n    \n    # Build the DP table\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                # If characters match, increment LCS length\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                # If characters don't match, take max of previous states\n                else:\n                    dp[i][j][k] = max(\n                        dp[i-1][j][k], \n                        dp[i][j-1][k], \n                        dp[i][j][k-1]\n                    )\n    \n    # Return the length of LCS\n    return dp[m][n][o]\n===END===\n\nThe solution uses dynamic programming to solve the Longest Common Subsequence problem for three strings. Here's a breakdown:\n\n1. Create a 3D DP table to store LCS lengths\n2. Iterate through each character of the three strings\n3. If characters match, increment LCS length by 1\n4. If characters don't match, take the maximum of previous states\n5. Final cell dp[m][n][o] contains the length of the longest common subsequence\n\nTime Complexity: O(m*n*o), where m, n, o are lengths of input strings\nSpace Complexity: O(m*n*o) for the 3D DP table\n\nThe function returns the length of the longest common subsequence, not the actual subsequence itself.",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n### Signature\ndef lcs_of_three(X, Y, Z):",
    "timestamp": "2025-10-17T18:56:03.601957",
    "response_time": "8.19",
    "context": "{\"function_name\": \"lcs_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 748,
    "solution": "===START===\ndef capital_words_spaces(str1):\n    # If string is empty or None, return as is\n    if not str1:\n        return str1\n    \n    # Initialize result with the first character\n    result = str1[0]\n    \n    # Iterate through the string starting from the second character\n    for char in str1[1:]:\n        # If current character is uppercase, add a space before it\n        if char.isupper():\n            result += ' ' + char\n        else:\n            result += char\n    \n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to put spaces between words starting with capital letters in a given string.\n\n### Signature\ndef capital_words_spaces(str1):",
    "timestamp": "2025-10-17T18:56:06.347302",
    "response_time": "2.74",
    "context": "{\"function_name\": \"capital_words_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 749,
    "solution": "===START===\ndef sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a list of numeric strings numerically.\n    \n    Args:\n        nums_str (list): A list of strings representing numbers\n    \n    Returns:\n        list: A new list of numeric strings sorted in ascending order\n    \"\"\"\n    return sorted(nums_str, key=int)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n### Signature\ndef sort_numeric_strings(nums_str):",
    "timestamp": "2025-10-17T18:56:08.287137",
    "response_time": "1.93",
    "context": "{\"function_name\": \"sort_numeric_strings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 750,
    "solution": "===START===\ndef add_tuple(test_list, test_tup):\n    \"\"\"\n    Add the given tuple to the given list.\n    \n    Args:\n        test_list (list): The original list to which the tuple will be added\n        test_tup (tuple): The tuple to be added to the list\n    \n    Returns:\n        list: A new list with the tuple added\n    \"\"\"\n    # Create a new list by extending the original list with the tuple\n    return test_list + list(test_tup)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to add the given tuple to the given list.\n\n### Signature\ndef add_tuple(test_list, test_tup):",
    "timestamp": "2025-10-17T18:56:10.858433",
    "response_time": "2.57",
    "context": "{\"function_name\": \"add_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 751,
    "solution": "===START===\ndef check_min_heap_helper(arr, i):\n    \"\"\"\n    Check if the given array represents a min heap.\n    \n    Args:\n    arr (list): The input array to check\n    i (int): Current index to start checking from\n    \n    Returns:\n    bool: True if the array represents a min heap, False otherwise\n    \"\"\"\n    n = len(arr)\n    \n    # Calculate left and right child indices\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # Check left child\n    if left < n:\n        # If parent is greater than left child, it violates min heap property\n        if arr[i] > arr[left]:\n            return False\n        \n        # Recursively check left subtree\n        if not check_min_heap_helper(arr, left):\n            return False\n    \n    # Check right child\n    if right < n:\n        # If parent is greater than right child, it violates min heap property\n        if arr[i] > arr[right]:\n            return False\n        \n        # Recursively check right subtree\n        if not check_min_heap_helper(arr, right):\n            return False\n    \n    # If we've reached here, this subtree satisfies min heap property\n    return True\n\ndef is_min_heap(arr):\n    \"\"\"\n    Wrapper function to check if the entire array represents a min heap.\n    \n    Args:\n    arr (list): The input array to check\n    \n    Returns:\n    bool: True if the array represents a min heap, False otherwise\n    \"\"\"\n    if not arr:\n        return True\n    \n    # Start checking from the root (index 0)\n    return check_min_heap_helper(arr, 0)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n### Signature\ndef check_min_heap_helper(arr, i):",
    "timestamp": "2025-10-17T18:56:17.314152",
    "response_time": "6.45",
    "context": "{\"function_name\": \"check_min_heap\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 752,
    "solution": "===START===\ndef jacobsthal_num(n):\n    \"\"\"\n    Calculate the nth Jacobsthal number.\n    \n    The Jacobsthal sequence is defined by the recurrence relation:\n    J(n) = J(n-1) + 2*J(n-2)\n    With initial conditions J(0) = 0, J(1) = 1\n    \n    Args:\n        n (int): The index of the Jacobsthal number to calculate (0-based)\n    \n    Returns:\n        int: The nth Jacobsthal number\n    \"\"\"\n    # Handle base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Initialize first two Jacobsthal numbers\n    a, b = 0, 1\n    \n    # Iterate to calculate nth Jacobsthal number\n    for _ in range(2, n + 1):\n        # Next number is calculated using the recurrence relation\n        a, b = b, b + 2 * a\n    \n    return b\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\n### Signature\ndef jacobsthal_num(n):",
    "timestamp": "2025-10-17T18:56:21.575156",
    "response_time": "4.26",
    "context": "{\"function_name\": \"jacobsthal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 753,
    "solution": "I'll solve this problem by implementing the `min_k` function to find the minimum K records from a tuple list.\n\n===START===\ndef min_k(test_list, K):\n    # Sort the list based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    \n    # Return the first K elements from the sorted list\n    return sorted_list[:K]\n===END===\n\nThe solution follows these key steps:\n1. Use `sorted()` with a `key` function to sort the list of tuples based on the first element\n2. Use list slicing to return the first K elements from the sorted list\n\nThis implementation will:\n- Sort the tuples in ascending order based on their first element\n- Return the K smallest tuples from the sorted list\n- Work with lists of tuples where the first element is comparable\n- Handle cases where K is less than or equal to the list length\n\nThe time complexity is O(n log n) due to sorting, and space complexity is O(n) for creating the sorted list.",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n### Signature\ndef min_k(test_list, K):",
    "timestamp": "2025-10-17T18:56:26.783215",
    "response_time": "5.20",
    "context": "{\"function_name\": \"min_k\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 754,
    "solution": "===START===\ndef extract_index_list(l1, l2, l3):\n    \"\"\"\n    Find common elements from three lists that appear at the same index.\n    \n    Args:\n        l1 (list): First input list\n        l2 (list): Second input list\n        l3 (list): Third input list\n    \n    Returns:\n        list: A list of common elements at the same index across all three lists\n    \"\"\"\n    # Find the minimum length among the three lists to avoid index out of range\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Use list comprehension to find common elements at the same index\n    common_elements = [l1[i] for i in range(min_length) \n                       if l1[i] == l2[i] == l3[i]]\n    \n    return common_elements\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\n### Signature\ndef extract_index_list(l1, l2, l3):",
    "timestamp": "2025-10-17T18:56:30.416292",
    "response_time": "3.63",
    "context": "{\"function_name\": \"extract_index_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 755,
    "solution": "===START===\ndef second_smallest(numbers):\n    # Check if list has less than 2 elements\n    if len(numbers) < 2:\n        return None\n    \n    # Remove duplicates and sort the list\n    unique_sorted = sorted(set(numbers))\n    \n    # Check if there are at least 2 unique elements\n    if len(unique_sorted) < 2:\n        return None\n    \n    # Return the second element (which is the second smallest)\n    return unique_sorted[1]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the second smallest number in a list.\n\n### Signature\ndef second_smallest(numbers):",
    "timestamp": "2025-10-17T18:56:32.922437",
    "response_time": "2.50",
    "context": "{\"function_name\": \"second_smallest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 756,
    "solution": "===START===\nimport re\n\ndef text_match_zero_one(text):\n    # Create a regex pattern that matches 'a' followed by one or more 'b's\n    pattern = r'ab+'\n    \n    # Use re.search to find if the pattern exists in the text\n    if re.search(pattern, text):\n        return True\n    return False\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\n### Signature\ndef text_match_zero_one(text):",
    "timestamp": "2025-10-17T18:56:35.249928",
    "response_time": "2.32",
    "context": "{\"function_name\": \"text_match_zero_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 757,
    "solution": "===START===\ndef count_reverse_pairs(test_list):\n    \"\"\"\n    Count the number of pairs of reverse strings in the given list.\n    \n    Args:\n    test_list (list): A list of strings\n    \n    Returns:\n    int: Number of pairs of reverse strings\n    \"\"\"\n    # Initialize pair count\n    pair_count = 0\n    \n    # Iterate through the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if current string is reverse of another string\n            if test_list[i] == test_list[j][::-1]:\n                pair_count += 1\n    \n    return pair_count\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\n### Signature\ndef count_reverse_pairs(test_list):",
    "timestamp": "2025-10-17T18:56:38.377614",
    "response_time": "3.12",
    "context": "{\"function_name\": \"count_reverse_pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 758,
    "solution": "===START===\ndef unique_sublists(list1):\n    # Create a dictionary to store unique sublists and their counts\n    count_dict = {}\n    \n    # Iterate through each element in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple (hashable)\n        sublist_tuple = tuple(sublist)\n        \n        # Increment the count for this sublist tuple\n        # If it doesn't exist, initialize to 1\n        count_dict[sublist_tuple] = count_dict.get(sublist_tuple, 0) + 1\n    \n    return count_dict\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n### Signature\ndef unique_sublists(list1):",
    "timestamp": "2025-10-17T18:56:41.012507",
    "response_time": "2.63",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 759,
    "solution": "===START===\nimport re\n\ndef is_decimal(num):\n    # Regular expression pattern to match decimal numbers with exactly 2 decimal places\n    pattern = r'^-?\\d+\\.\\d{2}$'\n    \n    # Check if the input matches the pattern\n    return bool(re.match(pattern, str(num)))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\n### Signature\ndef is_decimal(num):",
    "timestamp": "2025-10-17T18:56:42.923201",
    "response_time": "1.90",
    "context": "{\"function_name\": \"is_decimal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 760,
    "solution": "===START===\ndef unique_Element(arr):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element.\n    \n    Args:\n        arr (list): A list of numbers to check\n    \n    Returns:\n        bool: True if all elements are the same, False otherwise\n    \"\"\"\n    # If the list is empty or has only one element, return True\n    if len(arr) <= 1:\n        return True\n    \n    # Compare first element with all other elements\n    first_element = arr[0]\n    return all(element == first_element for element in arr[1:])\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\n### Signature\ndef unique_Element(arr):",
    "timestamp": "2025-10-17T18:56:45.538032",
    "response_time": "2.61",
    "context": "{\"function_name\": \"unique_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 762,
    "solution": "===START===\ndef check_monthnumber_number(monthnum3):\n    # List of months with 30 days\n    thirty_day_months = [4, 6, 9, 11]\n    \n    # Check if the given month number is in the list of 30-day months\n    return monthnum3 in thirty_day_months\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n### Signature\ndef check_monthnumber_number(monthnum3):",
    "timestamp": "2025-10-17T18:56:47.315924",
    "response_time": "1.77",
    "context": "{\"function_name\": \"check_monthnumber_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 763,
    "solution": "===START===\ndef find_min_diff(arr, n):\n    # If array has less than 2 elements, return 0\n    if n < 2:\n        return 0\n    \n    # Sort the array first\n    arr.sort()\n    \n    # Initialize minimum difference with a large value\n    min_diff = float('inf')\n    \n    # Compare adjacent elements to find minimum difference\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\n### Signature\ndef find_min_diff(arr,n):",
    "timestamp": "2025-10-17T18:56:49.930275",
    "response_time": "2.61",
    "context": "{\"function_name\": \"find_min_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 764,
    "solution": "===START===\ndef number_ctr(str):\n    \"\"\"\n    Count the number of digits in a given string.\n    \n    Args:\n        str (str): Input string to count digits from\n    \n    Returns:\n        int: Number of digits in the string\n    \"\"\"\n    return sum(char.isdigit() for char in str)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count number of digits in a given string.\n\n### Signature\ndef number_ctr(str):",
    "timestamp": "2025-10-17T18:56:51.844011",
    "response_time": "1.91",
    "context": "{\"function_name\": \"number_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 765,
    "solution": "I'll solve this problem by implementing the function to find the nth polite number. Let me break this down and provide a solution.\n\n===START===\ndef is_polite(n):\n    \"\"\"\n    Find the nth polite number.\n    \n    A polite number is a positive integer that can be expressed as the sum of two or more consecutive positive integers.\n    \n    Args:\n        n (int): The position of the polite number to find\n    \n    Returns:\n        int: The nth polite number\n    \"\"\"\n    # Track polite numbers found\n    polite_count = 0\n    \n    # Start checking from 2 (first polite number)\n    current_num = 2\n    \n    while True:\n        # Check if current number is polite\n        is_current_polite = False\n        \n        # Try consecutive sums starting from different points\n        for start in range(1, current_num):\n            consecutive_sum = 0\n            consecutive_length = 0\n            consecutive_start = start\n            \n            # Sum consecutive integers\n            while consecutive_sum < current_num:\n                consecutive_sum += consecutive_start\n                consecutive_length += 1\n                consecutive_start += 1\n                \n                # If sum matches current number and uses at least 2 consecutive integers\n                if consecutive_sum == current_num and consecutive_length > 1:\n                    is_current_polite = True\n                    break\n            \n            if is_current_polite:\n                break\n        \n        # If current number is polite, increment count\n        if is_current_polite:\n            polite_count += 1\n            \n            # If we've found the nth polite number, return it\n            if polite_count == n:\n                return current_num\n        \n        # Move to next number\n        current_num += 1\n===END===\n\nThe implementation follows these key steps:\n1. Start checking numbers from 2 (the first polite number)\n2. For each number, try to express it as a sum of consecutive integers\n3. If a number can be expressed as a sum of at least 2 consecutive integers, it's polite\n4. Keep track of how many polite numbers have been found\n5. When the nth polite number is found, return it\n\nThe function handles finding the nth polite number efficiently by:\n- Checking each number systematically\n- Using nested loops to find consecutive integer sums\n- Stopping and returning when the nth polite number is discovered\n\nTime complexity is O(n * m), where n is the position of the polite number and m is the current number being checked.\n\nExample polite numbers: \n- 5 (2+3)\n- 6 (1+2+3)\n- 7 (3+4)\n- 9 (2+3+4)\n- 10 (1+2+3+4)\n\nThe function will return the nth such number based on the input.",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\n### Signature\ndef is_polite(n):",
    "timestamp": "2025-10-17T18:57:03.132513",
    "response_time": "11.28",
    "context": "{\"function_name\": \"is_polite\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 766,
    "solution": "===START===\ndef pair_wise(l1):\n    \"\"\"\n    Returns a list of pairs of consecutive items from the input list.\n    \n    Args:\n        l1 (list): Input list of items\n    \n    Returns:\n        list: List of tuples containing consecutive pairs\n    \"\"\"\n    # If list is empty or has only one item, return empty list\n    if len(l1) < 2:\n        return []\n    \n    # Use list comprehension to create pairs of consecutive items\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to return a list of all pairs of consecutive items in a given list.\n\n### Signature\ndef pair_wise(l1):",
    "timestamp": "2025-10-17T18:57:06.250855",
    "response_time": "3.11",
    "context": "{\"function_name\": \"pair_wise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 767,
    "solution": "===START===\ndef get_pairs_count(arr, sum):\n    \"\"\"\n    Count the number of pairs in the array that add up to the given sum.\n    \n    Args:\n    arr (list): List of integers\n    sum (int): Target sum\n    \n    Returns:\n    int: Number of pairs that sum up to the target sum\n    \"\"\"\n    # Create a dictionary to store frequency of numbers\n    num_frequency = {}\n    \n    # Counter for pairs\n    pair_count = 0\n    \n    # Iterate through the array\n    for num in arr:\n        # Check if the complement (sum - num) exists in the dictionary\n        complement = sum - num\n        \n        # If complement exists, add its frequency to pair count\n        if complement in num_frequency:\n            pair_count += num_frequency[complement]\n        \n        # Increment the frequency of current number\n        num_frequency[num] = num_frequency.get(num, 0) + 1\n    \n    return pair_count\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\n### Signature\ndef get_pairs_count(arr, sum):",
    "timestamp": "2025-10-17T18:57:10.263128",
    "response_time": "4.01",
    "context": "{\"function_name\": \"get_pairs_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 769,
    "solution": "===START===\ndef Diff(li1, li2):\n    \"\"\"\n    Returns a list containing elements that are in li1 but not in li2.\n    \n    Args:\n        li1 (list): First input list\n        li2 (list): Second input list\n    \n    Returns:\n        list: Elements from li1 that are not present in li2\n    \"\"\"\n    return list(set(li1) - set(li2))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to get the difference between two lists.\n\n### Signature\ndef Diff(li1,li2):",
    "timestamp": "2025-10-17T18:57:12.547695",
    "response_time": "2.28",
    "context": "{\"function_name\": \"Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 770,
    "solution": "===START===\ndef odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of fourth power of first n odd natural numbers.\n    \n    Args:\n        n (int): Number of odd natural numbers to consider\n    \n    Returns:\n        int: Sum of fourth powers of first n odd natural numbers\n    \"\"\"\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate through first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add fourth power of current odd number to total sum\n        total_sum += i**4\n    \n    return total_sum\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\n### Signature\ndef odd_num_sum(n) :",
    "timestamp": "2025-10-17T18:57:15.304116",
    "response_time": "2.75",
    "context": "{\"function_name\": \"odd_num_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 771,
    "solution": "===START===\ndef check_expression(exp):\n    # Create a stack to keep track of opening brackets\n    stack = []\n    \n    # Dictionary to map closing brackets to their corresponding opening brackets\n    brackets = {')': '(', '}': '{', ']': '['}\n    \n    # Iterate through each character in the expression\n    for char in exp:\n        # If character is a closing bracket\n        if char in brackets:\n            # If stack is empty or top of stack doesn't match corresponding opening bracket\n            if not stack or stack[-1] != brackets[char]:\n                return False\n            # Remove the matching opening bracket from stack\n            stack.pop()\n        \n        # If character is an opening bracket, push to stack\n        elif char in '({[':\n            stack.append(char)\n    \n    # Expression is balanced only if stack is empty at the end\n    return len(stack) == 0\n\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\n### Signature\ndef check_expression(exp):",
    "timestamp": "2025-10-17T18:57:19.475423",
    "response_time": "4.17",
    "context": "{\"function_name\": \"check_expression\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 772,
    "solution": "===START===\ndef remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    \n    # Filter out words with length K\n    filtered_words = [word for word in words if len(word) != K]\n    \n    # Join the filtered words back into a string\n    return ' '.join(filtered_words)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove all the words with k length in the given string.\n\n### Signature\ndef remove_length(test_str, K):",
    "timestamp": "2025-10-17T18:57:21.352803",
    "response_time": "1.87",
    "context": "{\"function_name\": \"remove_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 773,
    "solution": "===START===\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Find the occurrence and position of substrings within a string.\n    \n    Args:\n        text (str): The main string to search in\n        pattern (str): The substring to search for\n    \n    Returns:\n        list or None: A list of tuples containing (start_index, end_index) of substring matches,\n                      or None if no matches are found\n    \"\"\"\n    # If pattern is empty or text is empty, return None\n    if not pattern or not text:\n        return None\n    \n    # Store all matches\n    matches = []\n    \n    # Iterate through the text to find all occurrences\n    start_index = 0\n    while True:\n        # Find the next occurrence of the pattern\n        index = text.find(pattern, start_index)\n        \n        # If no more matches are found, break the loop\n        if index == -1:\n            break\n        \n        # Add the match with start and end indices\n        matches.append((index, index + len(pattern)))\n        \n        # Update start index to continue searching after the last match\n        start_index = index + 1\n    \n    # Return matches if found, otherwise return None\n    return matches if matches else None\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n### Signature\ndef occurance_substring(text,pattern):",
    "timestamp": "2025-10-17T18:57:26.615509",
    "response_time": "5.26",
    "context": "{\"function_name\": \"occurance_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 775,
    "solution": "===START===\ndef odd_position(nums):\n    # Check if the list is empty or has less than 2 elements\n    if len(nums) < 2:\n        return False\n    \n    # Iterate through odd indices (1, 3, 5, ...)\n    for i in range(1, len(nums), 2):\n        # Check if the number at odd index is even\n        if nums[i] % 2 == 0:\n            return False\n    \n    # If all odd indices contain odd numbers\n    return True\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\n### Signature\ndef odd_position(nums):",
    "timestamp": "2025-10-17T18:57:29.269858",
    "response_time": "2.65",
    "context": "{\"function_name\": \"odd_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 776,
    "solution": "===START===\ndef count_vowels(test_str):\n    # Define vowels\n    vowels = 'aeiouAEIOU'\n    \n    # Initialize count\n    count = 0\n    \n    # Iterate through the string with index\n    for i in range(len(test_str)):\n        # Check if current character is not a vowel\n        if test_str[i] not in vowels:\n            # Check left neighbor (if not first character)\n            if i > 0 and test_str[i-1] in vowels:\n                count += 1\n            # Check right neighbor (if not last character)\n            elif i < len(test_str) - 1 and test_str[i+1] in vowels:\n                count += 1\n    \n    return count\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\n### Signature\ndef count_vowels(test_str):",
    "timestamp": "2025-10-17T18:57:32.441892",
    "response_time": "3.17",
    "context": "{\"function_name\": \"count_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 777,
    "solution": "===START===\ndef find_sum(arr):\n    # Use set to remove duplicates and sum the unique elements\n    return sum(set(arr))\n===END===\n\nThe solution works as follows:\n1. `set(arr)` converts the input list to a set, which automatically removes any duplicate elements\n2. `sum()` function calculates the sum of the unique elements in the set\n3. The function returns the sum of non-repeated elements in the given list\n\nFor example:\n- `find_sum([1, 2, 3, 4, 1, 2])` would return 10 (1+2+3+4)\n- `find_sum([1, 1, 1, 1])` would return 1\n- `find_sum([])` would return 0\n\nThe solution handles various input scenarios:\n- Lists with duplicates\n- Lists with all unique elements \n- Empty lists\n- Lists with different data types (if they are hashable)",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sum of non-repeated elements in a given list.\n\n### Signature\ndef find_sum(arr):",
    "timestamp": "2025-10-17T18:57:37.072913",
    "response_time": "4.62",
    "context": "{\"function_name\": \"find_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 778,
    "solution": "===START===\ndef pack_consecutive_duplicates(list1):\n    # If the list is empty, return an empty list\n    if not list1:\n        return []\n    \n    # Initialize result list and current sublist with first element\n    result = []\n    current_sublist = [list1[0]]\n    \n    # Iterate through the list starting from the second element\n    for item in list1[1:]:\n        # If current item matches the last item in current sublist, append to current sublist\n        if item == current_sublist[-1]:\n            current_sublist.append(item)\n        # If different, add current sublist to result and start a new sublist\n        else:\n            result.append(current_sublist)\n            current_sublist = [item]\n    \n    # Add the last sublist to result\n    result.append(current_sublist)\n    \n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\n### Signature\ndef pack_consecutive_duplicates(list1):",
    "timestamp": "2025-10-17T18:57:40.843759",
    "response_time": "3.77",
    "context": "{\"function_name\": \"pack_consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 779,
    "solution": "===START===\ndef unique_sublists(list1):\n    # Create a dictionary to store unique sublists and their counts\n    sublist_counts = {}\n    \n    # Iterate through each element in the input list\n    for item in list1:\n        # Check if the item is a list\n        if isinstance(item, list):\n            # Convert the list to a tuple (hashable)\n            item_tuple = tuple(item)\n            \n            # Update the count in the dictionary\n            # If the tuple is not in the dictionary, initialize its count to 1\n            # If it's already in the dictionary, increment its count\n            sublist_counts[item_tuple] = sublist_counts.get(item_tuple, 0) + 1\n    \n    return sublist_counts\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\n### Signature\ndef unique_sublists(list1):",
    "timestamp": "2025-10-17T18:57:44.105685",
    "response_time": "3.26",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 780,
    "solution": "===START===\nfrom itertools import combinations\n\ndef find_combinations(test_list):\n    # Create a list to store the result combinations\n    result = []\n    \n    # Generate all possible combinations of 2 tuples from the input list\n    for combo in combinations(test_list, 2):\n        # Calculate the sum of corresponding elements in the two tuples\n        sum_tuple = tuple(a + b for a, b in zip(combo[0], combo[1]))\n        \n        # Add the combination and its sum to the result list\n        result.append((combo[0], combo[1], sum_tuple))\n    \n    return result\n===END===\n\n# The function works as follows:\n# 1. It uses itertools.combinations to generate all possible 2-tuple combinations from the input list\n# 2. For each combination, it calculates the element-wise sum using zip and list comprehension\n# 3. It creates a result tuple containing the original two tuples and their sum\n# 4. Returns a list of all such combinations with their sums\n\n# Example usage:\n# test_list = [(1, 2), (3, 4), (5, 6)]\n# print(find_combinations(test_list))\n# Output would be: [((1, 2), (3, 4), (4, 6)), ((1, 2), (5, 6), (6, 8)), ((3, 4), (5, 6), (8, 10))]",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\n### Signature\ndef find_combinations(test_list):",
    "timestamp": "2025-10-17T18:57:49.999235",
    "response_time": "5.89",
    "context": "{\"function_name\": \"find_combinations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 781,
    "solution": "===START===\ndef count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors for a given number is even or not.\n    \n    Args:\n        n (int): The number to check divisors for\n    \n    Returns:\n        bool: True if the count of divisors is even, False otherwise\n    \"\"\"\n    # Count the number of divisors\n    divisor_count = 0\n    \n    # Iterate from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # If i divides n without remainder, it's a divisor\n        if n % i == 0:\n            divisor_count += 1\n    \n    # Return True if divisor count is even, False otherwise\n    return divisor_count % 2 == 0\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\n### Signature\ndef count_divisors(n) :",
    "timestamp": "2025-10-17T18:57:53.527565",
    "response_time": "3.52",
    "context": "{\"function_name\": \"count_divisors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 782,
    "solution": "===START===\ndef odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    # Iterate through all possible odd length subarrays\n    for i in range(n):\n        for length in range(1, n - i + 1, 2):\n            # Calculate sum of current subarray\n            subarray_sum = sum(arr[i:i+length])\n            total_sum += subarray_sum\n    \n    return total_sum\n===END===\n\nThe solution works as follows:\n1. The function takes an input array `arr`\n2. Initialize `total_sum` to store the sum of all odd length subarrays\n3. Use nested loops to generate all possible odd length subarrays:\n   - Outer loop `i` represents the starting index of subarrays\n   - Inner loop `length` generates odd lengths (1, 3, 5, etc.)\n4. For each subarray:\n   - Calculate the sum using `sum(arr[i:i+length])`\n   - Add this sum to `total_sum`\n5. Return the final `total_sum`\n\nTime complexity is O(n^2), where n is the length of the input array.\nSpace complexity is O(1) as we're not using any extra space proportional to input size.\n\nExample:\n- For input [1, 4, 2, 5, 3]\n- Odd length subarrays include: \n  [1], [4], [2], [5], [3]\n  [1,4,2], [4,2,5], [2,5,3]\n  [1,4,2,5,3]\n- The function will sum all these subarrays",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\n### Signature\ndef odd_length_sum(arr):",
    "timestamp": "2025-10-17T18:58:00.328261",
    "response_time": "6.80",
    "context": "{\"function_name\": \"odd_length_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 783,
    "solution": "===START===\ndef rgb_to_hsv(r, g, b):\n    # Normalize RGB values to range 0-1\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # Find maximum and minimum values\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    \n    # Calculate hue\n    if diff == 0:\n        h = 0\n    elif cmax == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif cmax == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    else:\n        h = (60 * ((r - g) / diff) + 240) % 360\n    \n    # Calculate saturation\n    if cmax == 0:\n        s = 0\n    else:\n        s = (diff / cmax) * 100\n    \n    # Calculate value\n    v = cmax * 100\n    \n    return (h, s, v)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n### Signature\ndef rgb_to_hsv(r, g, b):",
    "timestamp": "2025-10-17T18:58:04.436961",
    "response_time": "4.10",
    "context": "{\"function_name\": \"rgb_to_hsv\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 784,
    "solution": "===START===\ndef mul_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return None\n    \n    return first_even * first_odd\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find the product of first even and odd number of a given list.\n\n### Signature\ndef mul_even_odd(list1):",
    "timestamp": "2025-10-17T18:58:07.008858",
    "response_time": "2.57",
    "context": "{\"function_name\": \"mul_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 785,
    "solution": "===START===\ndef tuple_str_int(test_str):\n    # Remove parentheses and split the string by comma\n    # Strip whitespace from each element and convert to integer\n    return tuple(int(x.strip()) for x in test_str.strip('()').split(','))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to convert tuple string to integer tuple.\n\n### Signature\ndef tuple_str_int(test_str):",
    "timestamp": "2025-10-17T18:58:08.957006",
    "response_time": "1.94",
    "context": "{\"function_name\": \"tuple_str_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 786,
    "solution": "===START===\ndef right_insertion(a, x):\n    \"\"\"\n    Find the rightmost index where x can be inserted in the sorted list a \n    while maintaining the sorted order.\n    \n    Args:\n        a (list): A sorted list of comparable elements\n        x: The value to find the insertion point for\n    \n    Returns:\n        int: The index where x should be inserted to maintain sorted order\n    \"\"\"\n    left, right = 0, len(a)\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if x >= a[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return left\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\n### Signature\ndef right_insertion(a, x):",
    "timestamp": "2025-10-17T18:58:11.950338",
    "response_time": "2.99",
    "context": "{\"function_name\": \"right_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 787,
    "solution": "===START===\nimport re\n\ndef text_match_three(text):\n    # Create a regex pattern that matches 'a' followed by exactly three 'b's\n    pattern = r'ab{3}'\n    \n    # Use re.search to find if the pattern exists in the text\n    if re.search(pattern, text):\n        return True\n    return False\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by three 'b'.\n\n### Signature\ndef text_match_three(text):",
    "timestamp": "2025-10-17T18:58:14.181482",
    "response_time": "2.23",
    "context": "{\"function_name\": \"text_match_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 788,
    "solution": "===START===\ndef new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple by combining the given list and string.\n    \n    Args:\n        test_list (list): Input list to be combined\n        test_str (str): Input string to be combined\n    \n    Returns:\n        tuple: A new tuple containing elements from the list and the string\n    \"\"\"\n    return tuple(test_list + [test_str])\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to create a new tuple from the given string and list.\n\n### Signature\ndef new_tuple(test_list, test_str):",
    "timestamp": "2025-10-17T18:58:16.729015",
    "response_time": "2.54",
    "context": "{\"function_name\": \"new_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 790,
    "solution": "===START===\ndef even_position(nums):\n    # Iterate through the list using even indices (0, 2, 4, ...)\n    for i in range(0, len(nums), 2):\n        # Check if the number at the even index is odd\n        if nums[i] % 2 != 0:\n            # If any number at an even index is odd, return False\n            return False\n    \n    # If all numbers at even indices are even, return True\n    return True\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to check whether every even index contains even numbers of a given list.\n\n### Signature\ndef even_position(nums):",
    "timestamp": "2025-10-17T18:58:19.204297",
    "response_time": "2.47",
    "context": "{\"function_name\": \"even_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 791,
    "solution": "===START===\ndef remove_nested(test_tup):\n    \"\"\"\n    Remove nested tuples from the given tuple.\n    \n    Args:\n        test_tup (tuple): Input tuple that may contain nested tuples\n    \n    Returns:\n        tuple: A new tuple with only non-tuple elements\n    \"\"\"\n    return tuple(item for item in test_tup if not isinstance(item, tuple))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove tuples from the given tuple.\n\n### Signature\ndef remove_nested(test_tup):",
    "timestamp": "2025-10-17T18:58:21.477414",
    "response_time": "2.27",
    "context": "{\"function_name\": \"remove_nested\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 792,
    "solution": "===START===\ndef count_list(input_list):\n    \"\"\"\n    Count the number of lists within the given input list.\n    \n    Args:\n        input_list (list): A list that may contain nested lists\n    \n    Returns:\n        int: Number of lists found in the input list\n    \"\"\"\n    # Initialize a counter for lists\n    list_count = 0\n    \n    # Iterate through each item in the input list\n    for item in input_list:\n        # Check if the item is a list\n        if isinstance(item, list):\n            list_count += 1\n    \n    return list_count\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of lists in a given number of lists.\n\n### Signature\ndef count_list(input_list):",
    "timestamp": "2025-10-17T18:58:24.179210",
    "response_time": "2.70",
    "context": "{\"function_name\": \"count_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 793,
    "solution": "===START===\ndef last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n    \n    Args:\n    arr (list): A sorted array of elements\n    x: The element to find the last position of\n    \n    Returns:\n    int: The index of the last occurrence of x, or -1 if not found\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    # Initialize result as -1\n    result = -1\n    \n    # Binary search to find the last occurrence\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If x is found, update result and search in right half\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        \n        # If x is greater, search in right half\n        elif arr[mid] < x:\n            left = mid + 1\n        \n        # If x is smaller, search in left half\n        else:\n            right = mid - 1\n    \n    return result\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the last position of an element in a sorted array.\n\n### Signature\ndef last(arr,x):",
    "timestamp": "2025-10-17T18:58:28.398014",
    "response_time": "4.21",
    "context": "{\"function_name\": \"last\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 794,
    "solution": "===START===\nimport re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n### Signature\ndef text_starta_endb(text):",
    "timestamp": "2025-10-17T18:58:30.268929",
    "response_time": "1.86",
    "context": "{\"function_name\": \"text_starta_endb\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 796,
    "solution": "===START===\ndef return_sum(dict):\n    \"\"\"\n    Calculate the sum of all values in the given dictionary.\n    \n    Args:\n        dict (dict): Input dictionary with numeric values\n    \n    Returns:\n        int or float: Sum of all values in the dictionary\n    \"\"\"\n    return sum(dict.values())\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite function to find the sum of all items in the given dictionary.\n\n### Signature\ndef return_sum(dict):",
    "timestamp": "2025-10-17T18:58:32.200307",
    "response_time": "1.92",
    "context": "{\"function_name\": \"return_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 797,
    "solution": "===START===\ndef sum_odd(l, r):\n    \"\"\"\n    Calculate the sum of all odd natural numbers within the given range [l, r].\n    \n    Args:\n    l (int): Lower bound of the range (inclusive)\n    r (int): Upper bound of the range (inclusive)\n    \n    Returns:\n    int: Sum of all odd natural numbers in the range\n    \"\"\"\n    # Find the first odd number in the range\n    start = l if l % 2 != 0 else l + 1\n    \n    # Find the last odd number in the range\n    end = r if r % 2 != 0 else r - 1\n    \n    # Calculate the number of odd numbers in the range\n    count = (end - start) // 2 + 1\n    \n    # Use arithmetic progression sum formula\n    # Sum = n(a1 + an)/2, where n is count of numbers, a1 is first term, an is last term\n    return count * (start + end) // 2\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\n### Signature\ndef sum_odd(n):",
    "timestamp": "2025-10-17T18:58:36.441582",
    "response_time": "4.24",
    "context": "{\"function_name\": \"sum_in_range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 798,
    "solution": "===START===\ndef _sum(arr):\n    \"\"\"\n    Calculate the sum of all elements in the given array.\n    \n    Args:\n        arr (list): A list of numbers to be summed\n    \n    Returns:\n        int/float: The total sum of all elements in the array\n    \"\"\"\n    # Initialize sum to 0\n    total = 0\n    \n    # Iterate through each element in the array and add to total\n    for num in arr:\n        total += num\n    \n    return total\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the sum of an array.\n\n### Signature\ndef _sum(arr):",
    "timestamp": "2025-10-17T18:58:38.791605",
    "response_time": "2.34",
    "context": "{\"function_name\": \"_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 799,
    "solution": "===START===\ndef left_rotate(n, d):\n    # Ensure d is within 0-31 range for 32-bit integer\n    d = d % 32\n    \n    # Left shift by d bits\n    left_shifted = (n << d) \n    \n    # Right shift by (32-d) to bring the overflowed bits to right\n    right_shifted = n >> (32 - d)\n    \n    # Combine using bitwise OR and mask to 32 bits\n    return ((left_shifted | right_shifted) & 0xFFFFFFFF)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n### Signature\ndef left_rotate(n,d):",
    "timestamp": "2025-10-17T18:58:41.844335",
    "response_time": "3.04",
    "context": "{\"function_name\": \"left_rotate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 800,
    "solution": "===START===\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all whitespaces from the given string.\n    \n    Args:\n        text (str): Input string that may contain whitespaces\n    \n    Returns:\n        str: String with all whitespaces removed\n    \"\"\"\n    return text.replace(\" \", \"\")\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from a string.\n\n### Signature\ndef remove_all_spaces(text):",
    "timestamp": "2025-10-17T18:58:44.099736",
    "response_time": "2.25",
    "context": "{\"function_name\": \"remove_all_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 801,
    "solution": "===START===\ndef test_three_equal(x, y, z):\n    # Count how many of the three numbers are equal to each other\n    if x == y == z:\n        # All three numbers are equal\n        return 3\n    elif x == y or y == z or x == z:\n        # Two numbers are equal\n        return 2\n    else:\n        # No numbers are equal\n        return 0\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of equal numbers from three given integers.\n\n### Signature\ndef test_three_equal(x,y,z):",
    "timestamp": "2025-10-17T18:58:46.236580",
    "response_time": "2.13",
    "context": "{\"function_name\": \"test_three_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 802,
    "solution": "===START===\ndef count_rotation(arr):\n    \"\"\"\n    Count the number of rotations required to generate a sorted array.\n    \n    Args:\n    arr (list): Input list of integers\n    \n    Returns:\n    int: Number of rotations needed to sort the array\n    \"\"\"\n    # If array is empty or has only one element, no rotations needed\n    if len(arr) <= 1:\n        return 0\n    \n    # Find the index of the minimum element \n    # This will be the number of rotations\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            return i + 1\n    \n    # If array is already sorted, return 0\n    return 0\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n### Signature\ndef count_rotation(arr):",
    "timestamp": "2025-10-17T18:58:49.806422",
    "response_time": "3.56",
    "context": "{\"function_name\": \"count_rotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 803,
    "solution": "===START===\nimport math\n\ndef is_perfect_square(n):\n    # If n is negative, it cannot be a perfect square\n    if n < 0:\n        return False\n    \n    # Find the square root of n\n    root = int(math.sqrt(n))\n    \n    # Check if the square of the root equals the original number\n    return root * root == n\n===END===\n\nThe solution works as follows:\n1. First, check if the number is negative. Negative numbers cannot be perfect squares.\n2. Use `math.sqrt()` to find the square root of the number and convert it to an integer.\n3. Check if the square of the integer root is exactly equal to the original number.\n4. If they are equal, it means the number is a perfect square, so return True.\n5. Otherwise, return False.\n\nExamples:\n- `is_perfect_square(16)` returns `True` (4 * 4 = 16)\n- `is_perfect_square(14)` returns `False`\n- `is_perfect_square(0)` returns `True` (0 * 0 = 0)\n- `is_perfect_square(-4)` returns `False`\n\nThe time complexity is O(1) as it uses a direct square root calculation.",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\n### Signature\ndef is_perfect_square(n) :",
    "timestamp": "2025-10-17T18:58:55.078078",
    "response_time": "5.26",
    "context": "{\"function_name\": \"is_perfect_square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 804,
    "solution": "===START===\ndef is_product_even(arr):\n    # If the list is empty, return False\n    if not arr:\n        return False\n    \n    # Initialize product as 1\n    product = 1\n    \n    # Multiply all numbers in the list\n    for num in arr:\n        product *= num\n    \n    # Check if the product is even (divisible by 2 with no remainder)\n    return product % 2 == 0\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check whether the product of numbers in a list is even or not.\n\n### Signature\ndef is_product_even(arr):",
    "timestamp": "2025-10-17T18:58:57.459437",
    "response_time": "2.37",
    "context": "{\"function_name\": \"is_product_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 805,
    "solution": "===START===\ndef max_sum_list(lists):\n    \"\"\"\n    Returns the list with the highest sum of elements from a list of lists.\n    \n    Args:\n        lists (list): A list containing multiple lists of numbers\n    \n    Returns:\n        list: The list with the maximum sum of elements\n    \"\"\"\n    if not lists:\n        return None\n    \n    return max(lists, key=sum)\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\n### Signature\ndef max_sum_list(lists):",
    "timestamp": "2025-10-17T18:58:59.751091",
    "response_time": "2.28",
    "context": "{\"function_name\": \"max_sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 806,
    "solution": "===START===\ndef max_run_uppercase(test_str):\n    \"\"\"\n    Find the maximum run of consecutive uppercase characters in the given string.\n    \n    Args:\n        test_str (str): Input string to check for uppercase runs\n    \n    Returns:\n        int: Length of the longest consecutive uppercase character run\n    \"\"\"\n    if not test_str:\n        return 0\n    \n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    \n    return max_run\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to find maximum run of uppercase characters in the given string.\n\n### Signature\ndef max_run_uppercase(test_str):",
    "timestamp": "2025-10-17T18:59:02.607567",
    "response_time": "2.85",
    "context": "{\"function_name\": \"max_run_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 807,
    "solution": "===START===\ndef first_odd(nums):\n    \"\"\"\n    Find and return the first odd number in the given list of numbers.\n    \n    Args:\n        nums (list): A list of numbers to search through\n    \n    Returns:\n        int or None: The first odd number found, or None if no odd number exists\n    \"\"\"\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a python function to find the first odd number in a given list of numbers.\n\n### Signature\ndef first_odd(nums):",
    "timestamp": "2025-10-17T18:59:04.761606",
    "response_time": "2.15",
    "context": "{\"function_name\": \"first_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 808,
    "solution": "===START===\ndef check_K(test_tup, K):\n    \"\"\"\n    Check if the given tuple contains the value K.\n    \n    Args:\n        test_tup (tuple): The input tuple to search\n        K (any): The value to search for in the tuple\n    \n    Returns:\n        bool: True if K is in the tuple, False otherwise\n    \"\"\"\n    return K in test_tup\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if the given tuples contain the k or not.\n\n### Signature\ndef check_K(test_tup, K):",
    "timestamp": "2025-10-17T18:59:06.814068",
    "response_time": "2.05",
    "context": "{\"function_name\": \"check_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_claude35haiku_second_half",
    "dataset_row_id": 809,
    "solution": "===START===\ndef check_smaller(test_tup1, test_tup2):\n    # Check if tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        return False\n    \n    # Compare each element of test_tup2 with corresponding element in test_tup1\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    # If all elements in test_tup2 are smaller than corresponding elements in test_tup1\n    return True\n===END===",
    "llm_name": "anthropic/claude-3.5-haiku",
    "prompt": "### Prompt\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n### Signature\ndef check_smaller(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:59:10.073514",
    "response_time": "3.25",
    "context": "{\"function_name\": \"check_smaller\"}"
  }
]