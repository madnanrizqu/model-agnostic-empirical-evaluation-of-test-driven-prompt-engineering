[
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 82,
        "solution": "```python\n===START===\nimport math\n\ndef prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n\n### Signature\ndef prime_length(string):",
        "timestamp": "2025-10-17T22:44:11.430679",
        "response_time": "2.13"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 83,
        "solution": "```python\n===START===\ndef starts_one_ends(n):\n    if n == 1:\n        # For single-digit numbers, only 1 satisfies the condition\n        return 1\n    \n    # Total n-digit numbers\n    total_n_digit_numbers = 9 * (10 ** (n - 1))\n    \n    # Numbers starting with 1\n    numbers_starting_with_1 = 10 ** (n - 1)\n    \n    # Numbers ending with 1\n    numbers_ending_with_1 = 10 ** (n - 1)\n    \n    # Numbers that both start and end with 1 (to avoid double counting)\n    numbers_starting_and_ending_with_1 = 10 ** (n - 2)\n    \n    # Total count of numbers that start or end with 1\n    result = numbers_starting_with_1 + numbers_ending_with_1 - numbers_starting_and_ending_with_1\n    \n    return result\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n\n### Signature\ndef starts_one_ends(n):",
        "timestamp": "2025-10-17T22:44:15.250156",
        "response_time": "3.82"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 84,
        "solution": "```python\n# ===START===\ndef solve(N):\n    # Convert the number to a string to iterate over its digits\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum of digits to binary and return it\n    return bin(digit_sum)[2:]\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a positive integer N, return the total sum of its digits in binary.\n\n### Signature\ndef solve(N):",
        "timestamp": "2025-10-17T22:44:16.719398",
        "response_time": "1.47"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 85,
        "solution": "```python\n# ===START===\ndef add(lst):\n    # Initialize the sum to 0\n    total = 0\n    \n    # Iterate through the list with index and value\n    for index, value in enumerate(lst):\n        # Check if the index is odd and the value is even\n        if index % 2 == 1 and value % 2 == 0:\n            total += value\n    \n    return total\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n### Signature\ndef add(lst):",
        "timestamp": "2025-10-17T22:44:18.166934",
        "response_time": "1.45"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 86,
        "solution": "```python\n===START===\ndef anti_shuffle(s):\n    # Split the string into words and spaces\n    words = s.split(' ')\n    # Process each word to sort its characters\n    sorted_words = [''.join(sorted(word)) for word in words]\n    # Join the sorted words back with spaces\n    return ' '.join(sorted_words)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n### Signature\ndef anti_shuffle(s):",
        "timestamp": "2025-10-17T22:44:19.581789",
        "response_time": "1.41"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 87,
        "solution": "```python\n===START===\ndef get_row(lst, x):\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                result.append((row_index, col_index))\n    \n    # Sort by rows in ascending order, and within each row, by columns in descending order\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n### Signature\ndef get_row(lst, x):",
        "timestamp": "2025-10-17T22:44:21.473384",
        "response_time": "1.89"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 88,
        "solution": "```python\n===START===\ndef sort_array(array):\n    if not array:  # Handle empty array case\n        return array\n    \n    # Calculate the sum of the first and last index values\n    sum_first_last = array[0] + array[-1]\n    \n    # Sort in ascending order if the sum is odd, otherwise in descending order\n    if sum_first_last % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n### Signature\ndef sort_array(array):",
        "timestamp": "2025-10-17T22:44:23.035838",
        "response_time": "1.56"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 89,
        "solution": "```python\n===START===\ndef encrypt(s):\n    def rotate_char(c):\n        if 'a' <= c <= 'z':  # Check if the character is a lowercase letter\n            return chr(((ord(c) - ord('a') + 4) % 26) + ord('a'))\n        elif 'A' <= c <= 'Z':  # Check if the character is an uppercase letter\n            return chr(((ord(c) - ord('A') + 4) % 26) + ord('A'))\n        else:\n            return c  # Non-alphabetic characters remain unchanged\n\n    return ''.join(rotate_char(c) for c in s)\n\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\n### Signature\ndef encrypt(s):",
        "timestamp": "2025-10-17T22:44:24.665886",
        "response_time": "1.63"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 90,
        "solution": "```python\n===START===\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    # Remove duplicates and sort the list\n    unique_sorted = sorted(set(lst))\n    \n    # Check if there are at least two unique elements\n    if len(unique_sorted) < 2:\n        return None\n    \n    # Return the second smallest element\n    return unique_sorted[1]\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n### Signature\ndef next_smallest(lst):",
        "timestamp": "2025-10-17T22:44:28.274009",
        "response_time": "3.61"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 91,
        "solution": "```python\n===START===\ndef is_bored(S):\n    # Split the string into sentences based on delimiters '.', '?', '!'\n    sentences = []\n    temp_sentence = \"\"\n    for char in S:\n        if char in \".?!\":\n            if temp_sentence.strip():  # Avoid empty sentences\n                sentences.append(temp_sentence.strip())\n            temp_sentence = \"\"\n        else:\n            temp_sentence += char\n    if temp_sentence.strip():  # Add the last sentence if it exists\n        sentences.append(temp_sentence.strip())\n    \n    # Count sentences that start with \"I\"\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I \"):\n            boredom_count += 1\n    \n    return boredom_count\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n### Signature\ndef is_bored(S):",
        "timestamp": "2025-10-17T22:44:30.325384",
        "response_time": "2.05"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 92,
        "solution": "```python\n===START===\ndef any_int(x, y, z):\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n    \n    # Check if one number is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n### Signature\ndef any_int(x, y, z):",
        "timestamp": "2025-10-17T22:44:31.792012",
        "response_time": "1.46"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 93,
        "solution": "```python\n===START===\ndef encode(message):\n    def transform_char(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            # Replace vowel with the letter 2 places ahead\n            if c.islower():\n                return chr(((ord(c) - ord('a') + 2) % 26) + ord('a'))\n            else:\n                return chr(((ord(c) - ord('A') + 2) % 26) + ord('A'))\n        elif c.isalpha():\n            # Swap case for non-vowel letters\n            return c.swapcase()\n        else:\n            return c\n\n    # Apply transformation to each character in the message\n    return ''.join(transform_char(c) for c in message)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n### Signature\ndef encode(message):",
        "timestamp": "2025-10-17T22:44:35.417112",
        "response_time": "3.62"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 94,
        "solution": "```python\n===START===\nfrom math import isqrt\n\ndef skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, isqrt(n) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Filter the prime numbers from the list\n    primes = [num for num in lst if is_prime(num)]\n    \n    if not primes:\n        return 0  # Return 0 if no prime numbers are found\n\n    # Find the largest prime number\n    largest_prime = max(primes)\n\n    # Calculate the sum of its digits\n    return sum(int(digit) for digit in str(largest_prime))\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n### Signature\ndef skjkasdkd(lst):",
        "timestamp": "2025-10-17T22:44:37.882841",
        "response_time": "2.46"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 95,
        "solution": "```python\n===START===\ndef check_dict_case(dict):\n    # Check if the dictionary is empty\n    if not dict:\n        return False\n    \n    # Extract all keys from the dictionary\n    keys = dict.keys()\n    \n    # Check if all keys are strings\n    if not all(isinstance(key, str) for key in keys):\n        return False\n    \n    # Check if all keys are in lower case\n    if all(key.islower() for key in keys):\n        return True\n    \n    # Check if all keys are in upper case\n    if all(key.isupper() for key in keys):\n        return True\n    \n    # If neither condition is met, return False\n    return False\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\n### Signature\ndef check_dict_case(dict):",
        "timestamp": "2025-10-17T22:44:39.834299",
        "response_time": "1.95"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 96,
        "solution": "```python\n===START===\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n\n### Signature\ndef count_up_to(n):",
        "timestamp": "2025-10-17T22:44:41.218083",
        "response_time": "1.38"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 97,
        "solution": "```python\n# ===START===\ndef multiply(a, b):\n    # Extract the unit digits of both numbers\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n\n### Signature\ndef multiply(a, b):",
        "timestamp": "2025-10-17T22:44:42.318969",
        "response_time": "1.10"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 98,
        "solution": "```python\n===START===\ndef count_upper(s):\n    # Define the set of uppercase vowels\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    \n    # Iterate through the string with index\n    for i in range(len(s)):\n        # Check if the index is even and the character is an uppercase vowel\n        if i % 2 == 0 and s[i] in uppercase_vowels:\n            count += 1\n    \n    return count\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a string s, count the number of uppercase vowels in even indices.\n\n### Signature\ndef count_upper(s):",
        "timestamp": "2025-10-17T22:44:43.735921",
        "response_time": "1.42"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 99,
        "solution": "```python\n===START===\ndef closest_integer(value):\n    # Convert the string to a float\n    number = float(value)\n    # Use the built-in round function to find the closest integer\n    return round(number)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n\n### Signature\ndef closest_integer(value):",
        "timestamp": "2025-10-17T22:44:45.040497",
        "response_time": "1.30"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 100,
        "solution": "```python\n===START===\ndef make_a_pile(n):\n    pile = []\n    current_stones = n\n    for _ in range(n):\n        pile.append(current_stones)\n        if current_stones % 2 == 0:  # If even, next level is the next even number\n            current_stones += 2\n        else:  # If odd, next level is the next odd number\n            current_stones += 2\n    return pile\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n### Signature\ndef make_a_pile(n):",
        "timestamp": "2025-10-17T22:44:46.742184",
        "response_time": "1.70"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 101,
        "solution": "```python\n===START===\ndef words_string(s):\n    # Replace commas with spaces to standardize the separators\n    s = s.replace(',', ' ')\n    # Split the string by spaces and filter out any empty strings\n    return [word for word in s.split(' ') if word]\n\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n### Signature\ndef words_string(s):",
        "timestamp": "2025-10-17T22:44:48.865517",
        "response_time": "2.12"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 102,
        "solution": "```python\n===START===\ndef choose_num(x, y):\n    # Ensure x is the smaller number and y is the larger number\n    if x > y:\n        x, y = y, x\n    \n    # Start from the largest number in the range and move downwards\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:  # Check if the number is even\n            return num\n    \n    # If no even number is found, return -1\n    return -1\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n### Signature\ndef choose_num(x, y):",
        "timestamp": "2025-10-17T22:44:50.779814",
        "response_time": "1.91"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 103,
        "solution": "```python\n===START===\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    # Calculate the sum of integers from n to m\n    total_sum = sum(range(n, m + 1))\n    \n    # Calculate the count of integers from n to m\n    count = m - n + 1\n    \n    # Compute the average and round it to the nearest integer\n    avg = round(total_sum / count)\n    \n    # Convert the rounded average to binary\n    return bin(avg)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n\n### Signature\ndef rounded_avg(n, m):",
        "timestamp": "2025-10-17T22:44:52.991300",
        "response_time": "2.21"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 104,
        "solution": "```python\n===START===\ndef unique_digits(x):\n    def has_no_even_digit(num):\n        # Check if all digits in the number are odd\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    # Filter the list to include only numbers with no even digits\n    result = [num for num in x if has_no_even_digit(num)]\n    \n    # Return the sorted result\n    return sorted(result)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n### Signature\ndef unique_digits(x):",
        "timestamp": "2025-10-17T22:44:55.237549",
        "response_time": "2.24"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 105,
        "solution": "```python\n===START===\ndef by_length(arr):\n    # Dictionary to map numbers to their corresponding names\n    num_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter numbers between 1 and 9 inclusive\n    filtered = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered numbers and reverse the order\n    sorted_reversed = sorted(filtered, reverse=True)\n    \n    # Replace each number with its corresponding name\n    result = [num_to_name[num] for num in sorted_reversed]\n    \n    return result\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n### Signature\ndef by_length(arr):",
        "timestamp": "2025-10-17T22:44:57.660715",
        "response_time": "2.42"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 106,
        "solution": "```python\n===START===\nfrom math import factorial\n\ndef f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # If i is even\n            result.append(factorial(i))\n        else:  # If i is odd\n            result.append(sum(range(1, i + 1)))\n    return result\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n     Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n\n### Signature\ndef f(n):",
        "timestamp": "2025-10-17T22:45:00.972433",
        "response_time": "3.31"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 107,
        "solution": "```python\n===START===\ndef even_odd_palindrome(n):\n    def is_palindrome(num):\n        # Check if the number is a palindrome\n        return str(num) == str(num)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n### Signature\ndef even_odd_palindrome(n):",
        "timestamp": "2025-10-17T22:45:03.997322",
        "response_time": "3.02"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 108,
        "solution": "```python\n===START===\ndef count_nums(arr):\n    def sum_of_digits(num):\n        # Convert the number to a string to handle signed digits\n        num_str = str(num)\n        total = 0\n        for i, char in enumerate(num_str):\n            if char == '-':\n                # If the character is a negative sign, make the next digit negative\n                continue\n            elif i == 0 and num_str[0] == '-':\n                total += -int(char)\n            else:\n                total += int(char)\n        return total\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\n### Signature\ndef count_nums(arr):",
        "timestamp": "2025-10-17T22:45:06.757033",
        "response_time": "2.76"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 109,
        "solution": "```python\n===START===\ndef move_one_ball(arr):\n    \"\"\"\n    Determine if the array can be sorted in non-decreasing order by performing\n    right shift operations any number of times.\n    \"\"\"\n    n = len(arr)\n    \n    # Check if the array is already sorted\n    if arr == sorted(arr):\n        return True\n    \n    # Check if a right shift can make the array sorted\n    for i in range(n):\n        # Perform a right shift\n        shifted_arr = arr[-i:] + arr[:-i]\n        if shifted_arr == sorted(arr):\n            return True\n    \n    return False\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n### Signature\ndef move_one_ball(arr):",
        "timestamp": "2025-10-17T22:45:09.287257",
        "response_time": "2.53"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 110,
        "solution": "```python\n===START===\ndef exchange(lst1, lst2):\n    # Check if lst1 already contains only even numbers\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    \n    # Extract even numbers from lst2\n    even_in_lst2 = [x for x in lst2 if x % 2 == 0]\n    \n    # Count the number of odd numbers in lst1\n    odd_count_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # If the number of even numbers in lst2 is at least the number of odd numbers in lst1,\n    # then it is possible to exchange elements to make lst1 all even\n    if len(even_in_lst2) >= odd_count_in_lst1:\n        return \"YES\"\n    else:\n        return \"NO\"\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n\n### Signature\ndef exchange(lst1, lst2):",
        "timestamp": "2025-10-17T22:45:12.339167",
        "response_time": "3.05"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 111,
        "solution": "```python\n===START===\nfrom collections import Counter\n\ndef histogram(test):\n    # Count the occurrences of each letter in the string\n    letter_counts = Counter(test.replace(\" \", \"\"))\n    \n    # Find the maximum count\n    max_count = max(letter_counts.values())\n    \n    # Find all letters with the maximum count\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    return result\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n### Signature\ndef histogram(test):",
        "timestamp": "2025-10-17T22:45:14.157665",
        "response_time": "1.82"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 112,
        "solution": "```python\n===START===\ndef reverse_delete(s, c):\n    # Remove all characters in s that are in c\n    result = ''.join(char for char in s if char not in c)\n    \n    # Check if the resulting string is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    # Return the result string and the palindrome check\n    return (result, is_palindrome)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\n### Signature\ndef reverse_delete(s,c):",
        "timestamp": "2025-10-17T22:45:15.798189",
        "response_time": "1.64"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 113,
        "solution": "```python\n===START===\ndef odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(str(count))\n    return result\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n### Signature\ndef odd_count(lst):",
        "timestamp": "2025-10-17T22:45:17.013103",
        "response_time": "1.21"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 114,
        "solution": "```python\n===START===\ndef minSubArraySum(nums):\n    # Initialize the minimum sum to a very large value\n    min_sum = float('inf')\n    # Initialize the current sum to 0\n    current_sum = 0\n    \n    for num in nums:\n        # Add the current number to the current sum\n        current_sum += num\n        # Update the minimum sum if the current sum is smaller\n        min_sum = min(min_sum, current_sum)\n        # If the current sum becomes positive, reset it to 0\n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n\n### Signature\ndef minSubArraySum(nums):",
        "timestamp": "2025-10-17T22:45:20.667673",
        "response_time": "3.65"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 115,
        "solution": "```python\n===START===\ndef max_fill(grid, capacity):\n    # Initialize the total number of bucket lowerings to 0\n    bucket_lowerings = 0\n    \n    # Iterate through each well (row in the grid)\n    for well in grid:\n        # Calculate the total water in the current well\n        total_water = sum(well)\n        \n        # Calculate the number of bucket lowerings needed for this well\n        # Divide the total water by the bucket capacity and round up\n        bucket_lowerings += (total_water + capacity - 1) // capacity\n    \n    return bucket_lowerings\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n### Signature\ndef max_fill(grid, capacity):",
        "timestamp": "2025-10-17T22:45:23.221952",
        "response_time": "2.55"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 116,
        "solution": "```python\n===START===\ndef sort_array(arr):\n    # Sort the array using a custom key\n    # The key is a tuple where the first element is the count of '1's in the binary representation\n    # and the second element is the number itself for tie-breaking\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n### Signature\ndef sort_array(arr):",
        "timestamp": "2025-10-17T22:45:25.251562",
        "response_time": "2.03"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 117,
        "solution": "```python\n===START===\ndef select_words(s, n):\n    vowels = set(\"aeiouAEIOU\")\n    result = []\n    \n    if not s:\n        return result\n    \n    words = s.split()\n    \n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\n### Signature\ndef select_words(s, n):",
        "timestamp": "2025-10-17T22:45:26.950553",
        "response_time": "1.70"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 118,
        "solution": "```python\n===START===\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            if i > 0 and i < len(word) - 1:  # Ensure the vowel is between two consonants\n                if word[i - 1] not in vowels and word[i + 1] not in vowels:\n                    return word[i]\n    return None  # Return None if no such vowel is found\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n### Signature\ndef get_closest_vowel(word):",
        "timestamp": "2025-10-17T22:45:29.002805",
        "response_time": "2.05"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 119,
        "solution": "```python\n===START===\ndef match_parens(lst):\n    def is_balanced(s):\n        # Helper function to check if a string is balanced\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    # Extract the two strings\n    s1, s2 = lst\n\n    # Check all possible concatenations\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n### Signature\ndef match_parens(lst):",
        "timestamp": "2025-10-17T22:45:30.975583",
        "response_time": "1.97"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 120,
        "solution": "```python\n===START===\ndef maximum(arr, k):\n    # Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    # Return the first k elements\n    return sorted_arr[:k]\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n### Signature\ndef maximum(arr, k):",
        "timestamp": "2025-10-17T22:45:32.165008",
        "response_time": "1.19"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 121,
        "solution": "```python\n===START===\ndef solution(lst):\n    # Initialize the sum of odd elements at even positions\n    odd_sum = 0\n    \n    # Iterate through the list with index and value\n    for index, value in enumerate(lst):\n        # Check if the position is even (0-based index) and the value is odd\n        if index % 2 == 0 and value % 2 != 0:\n            odd_sum += value\n    \n    return odd_sum\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n### Signature\ndef solution(lst):",
        "timestamp": "2025-10-17T22:45:34.053355",
        "response_time": "1.89"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 122,
        "solution": "```python\n===START===\ndef add_elements(arr, k):\n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate through the first k elements of the array\n    for i in range(min(k, len(arr))):\n        # Check if the element has at most two digits\n        if -100 < arr[i] < 100:\n            total_sum += arr[i]\n    \n    return total_sum\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n### Signature\ndef add_elements(arr, k):",
        "timestamp": "2025-10-17T22:45:36.370712",
        "response_time": "2.31"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 123,
        "solution": "```python\n===START===\ndef get_odd_collatz(n):\n    # Initialize the list to store odd numbers\n    odd_numbers = []\n    \n    # Generate the Collatz sequence\n    while n != 1:\n        if n % 2 == 1:  # Check if the number is odd\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    \n    # Add the final number 1 if it's odd (it always is)\n    odd_numbers.append(1)\n    \n    # Return the sorted list of odd numbers\n    return sorted(odd_numbers)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n### Signature\ndef get_odd_collatz(n):",
        "timestamp": "2025-10-17T22:45:39.384978",
        "response_time": "3.01"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 124,
        "solution": "```python\n===START===\nimport re\n\ndef valid_date(date):\n    # Check if the date string is not empty\n    if not date:\n        return False\n    \n    # Define the regex pattern for the date format mm-dd-yyyy\n    date_pattern = r\"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(\\d{4})$\"\n    \n    # Match the date string with the pattern\n    match = re.match(date_pattern, date)\n    if not match:\n        return False\n    \n    # Extract month, day, and year from the matched groups\n    month, day, year = int(match.group(1)), int(match.group(2)), int(match.group(3))\n    \n    # Check the validity of the day based on the month\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    # If all checks pass, the date is valid\n    return True\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n### Signature\ndef valid_date(date):",
        "timestamp": "2025-10-17T22:45:44.854211",
        "response_time": "5.47"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 125,
        "solution": "```python\n===START===\ndef split_words(txt):\n    # Check if there are whitespaces in the text\n    if ' ' in txt:\n        return txt.split()\n    # Check if there are commas in the text\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Count the number of lowercase letters with odd order in the alphabet\n        odd_count = 0\n        for char in txt:\n            if char.islower():\n                # Calculate the order of the character\n                order = ord(char) - ord('a')\n                if order % 2 == 1:  # Check if the order is odd\n                    odd_count += 1\n        return odd_count\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n\n### Signature\ndef split_words(txt):",
        "timestamp": "2025-10-17T22:45:47.065832",
        "response_time": "2.21"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 126,
        "solution": "```python\n===START===\ndef is_sorted(lst):\n    # Check for duplicates more than once\n    if len(lst) != len(set(lst)):\n        return False\n    \n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    \n    return True\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n### Signature\ndef is_sorted(lst):",
        "timestamp": "2025-10-17T22:45:48.263429",
        "response_time": "1.20"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 127,
        "solution": "```python\n===START===\nfrom math import isqrt\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    # Determine the intersection of the two intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Calculate the intersection range\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # Check if there is an intersection\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the length is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n### Signature\ndef intersection(interval1, interval2):",
        "timestamp": "2025-10-17T22:45:50.530625",
        "response_time": "2.26"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 128,
        "solution": "```python\n===START===\nfrom typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    \n    magnitude_sum = 0\n    sign_product = 1\n    \n    for num in arr:\n        magnitude_sum += abs(num)\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n    \n    return magnitude_sum * sign_product\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n### Signature\ndef prod_signs(arr):",
        "timestamp": "2025-10-17T22:45:52.818067",
        "response_time": "2.29"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 129,
        "solution": "```python\n===START===\nfrom collections import deque\n\ndef minPath(grid, k):\n    N = len(grid)\n    # Find the position of each number in the grid\n    positions = {}\n    for i in range(N):\n        for j in range(N):\n            positions[grid[i][j]] = (i, j)\n    \n    # BFS to find the minimum path sum\n    queue = deque([(positions[1], 0)])  # Start from the position of 1 with cost 0\n    visited = set()\n    visited.add((positions[1], 0))\n    \n    while queue:\n        (current_pos, cost) = queue.popleft()\n        current_value = grid[current_pos[0]][current_pos[1]]\n        \n        # If we reach the k-th number, return the cost\n        if current_value == k:\n            return cost\n        \n        # Move to the next number\n        next_value = current_value + 1\n        if next_value <= N * N:\n            next_pos = positions[next_value]\n            next_cost = cost + abs(next_pos[0] - current_pos[0]) + abs(next_pos[1] - current_pos[1])\n            if (next_pos, next_cost) not in visited:\n                visited.add((next_pos, next_cost))\n                queue.append((next_pos, next_cost))\n    \n    return -1  # If k is not reachable (should not happen with valid input)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n### Signature\ndef minPath(grid, k):",
        "timestamp": "2025-10-17T22:46:03.248040",
        "response_time": "10.43"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 130,
        "solution": "```python\n===START===\ndef tri(n):\n    def tribonacci(num, memo):\n        if num in memo:\n            return memo[num]\n        if num == 1:\n            return 3\n        elif num % 2 == 0:  # even\n            result = 1 + num / 2\n        else:  # odd\n            result = tribonacci(num - 1, memo) + tribonacci(num - 2, memo) + tribonacci(num + 1, memo)\n        memo[num] = result\n        return result\n\n    memo = {}\n    sequence = []\n    for i in range(n + 1):\n        sequence.append(int(tribonacci(i, memo)))\n    return sequence\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n\n### Signature\ndef tri(n):",
        "timestamp": "2025-10-17T22:46:06.620025",
        "response_time": "3.37"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 131,
        "solution": "```python\n===START===\ndef digits(n):\n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:  # Check if the digit is odd\n            product *= digit\n            has_odd = True\n        n //= 10  # Remove the last digit\n    \n    return product if has_odd else 0\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n\n### Signature\ndef digits(n):",
        "timestamp": "2025-10-17T22:46:09.109278",
        "response_time": "2.49"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 132,
        "solution": "```python\n===START===\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                # If we successfully pop, it means there was a nested pair\n                return True\n    return False\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n### Signature\ndef is_nested(string):",
        "timestamp": "2025-10-17T22:46:10.454228",
        "response_time": "1.34"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 133,
        "solution": "```python\n===START===\nimport math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x) ** 2 for x in lst)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n### Signature\ndef sum_squares(lst):",
        "timestamp": "2025-10-17T22:46:12.095016",
        "response_time": "1.64"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 134,
        "solution": "```python\n===START===\ndef check_if_last_char_is_a_letter(txt):\n    # Strip any trailing whitespace from the string\n    txt = txt.rstrip()\n    \n    # Check if the string is empty after stripping\n    if not txt:\n        return False\n    \n    # Check if the last character is an alphabetical character\n    if txt[-1].isalpha():\n        # Split the string into words\n        words = txt.split()\n        # Check if the last character is not part of a word\n        if txt[-1] == words[-1]:\n            return True\n    \n    return False\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n### Signature\ndef check_if_last_char_is_a_letter(txt):",
        "timestamp": "2025-10-17T22:46:16.334652",
        "response_time": "4.24"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 135,
        "solution": "```python\n===START===\ndef can_arrange(arr):\n    # Iterate through the array from the second element to the end\n    for i in range(1, len(arr)):\n        # Check if the current element is not greater than or equal to the previous element\n        if arr[i] < arr[i - 1]:\n            # Return the index of the current element\n            return i\n    # If no such element is found, return -1\n    return -1\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n### Signature\ndef can_arrange(arr):",
        "timestamp": "2025-10-17T22:46:22.346453",
        "response_time": "6.01"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 136,
        "solution": "```python\n===START===\ndef largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n### Signature\ndef largest_smallest_integers(lst):",
        "timestamp": "2025-10-17T22:46:24.053834",
        "response_time": "1.70"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 137,
        "solution": "```python\n===START===\ndef compare_one(a, b):\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    \n    # Convert both inputs to floats for comparison\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n### Signature\ndef compare_one(a, b):",
        "timestamp": "2025-10-17T22:46:25.671757",
        "response_time": "1.61"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 138,
        "solution": "```python\n===START===\ndef is_equal_to_sum_even(n):\n    # A number can be written as the sum of 4 positive even numbers if:\n    # 1. It is greater than or equal to 8 (since the smallest sum of 4 positive even numbers is 2+2+2+2=8)\n    # 2. It is even (since the sum of even numbers is always even)\n    return n >= 8 and n % 2 == 0\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n\n### Signature\ndef is_equal_to_sum_even(n):",
        "timestamp": "2025-10-17T22:46:27.824440",
        "response_time": "2.15"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 139,
        "solution": "```python\n===START===\nimport math\n\ndef special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    \n    return result\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n### Signature\ndef special_factorial(n):",
        "timestamp": "2025-10-17T22:46:29.464385",
        "response_time": "1.64"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 140,
        "solution": "```python\n===START===\ndef fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace more than 2 consecutive underscores with a single '-'\n    while '__' in text:\n        text = text.replace('___', '-')\n    \n    return text\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n### Signature\ndef fix_spaces(text):",
        "timestamp": "2025-10-17T22:46:31.342448",
        "response_time": "1.88"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 141,
        "solution": "```python\n===START===\nimport re\n\ndef file_name_check(file_name):\n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into the part before and after the dot\n    before_dot, after_dot = file_name.split('.')\n    \n    # Check if the part before the dot is not empty and starts with a letter\n    if not before_dot or not re.match(r'^[a-zA-Z]', before_dot):\n        return 'No'\n    \n    # Check if the part after the dot is one of the valid extensions\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    \n    return 'Yes'\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\n### Signature\ndef file_name_check(file_name):",
        "timestamp": "2025-10-17T22:46:35.003171",
        "response_time": "3.66"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 142,
        "solution": "```python\n===START===\ndef sum_squares(lst):\n    total = 0\n    for i, val in enumerate(lst):\n        if i % 3 == 0:\n            total += val ** 2\n        elif i % 4 == 0:\n            total += val ** 3\n        else:\n            total += val\n    return total\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n### Signature\ndef sum_squares(lst):",
        "timestamp": "2025-10-17T22:46:36.425127",
        "response_time": "1.42"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 143,
        "solution": "```python\n===START===\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n### Signature\ndef words_in_sentence(sentence):",
        "timestamp": "2025-10-17T22:46:38.663360",
        "response_time": "2.24"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 144,
        "solution": "```python\n===START===\nfrom fractions import Fraction\n\ndef simplify(x, n):\n    # Convert the string fractions to Fraction objects\n    fraction_x = Fraction(x)\n    fraction_n = Fraction(n)\n    \n    # Multiply the fractions\n    result = fraction_x * fraction_n\n    \n    # Check if the result is a whole number\n    return result.denominator == 1\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n### Signature\ndef simplify(x, n):",
        "timestamp": "2025-10-17T22:46:40.757538",
        "response_time": "2.09"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 145,
        "solution": "```python\n# ===START===\ndef order_by_points(nums):\n    # Helper function to calculate the sum of digits of a number\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    # Sort the list based on the sum of digits, and maintain original order for ties\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n### Signature\ndef order_by_points(nums):",
        "timestamp": "2025-10-17T22:46:43.133578",
        "response_time": "2.37"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 146,
        "solution": "```python\n===START===\ndef specialFilter(nums):\n    def is_odd_digit(digit):\n        return digit in {'1', '3', '5', '7', '9'}\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            if is_odd_digit(num_str[0]) and is_odd_digit(num_str[-1]):\n                count += 1\n    return count\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n\n### Signature\ndef specialFilter(nums):",
        "timestamp": "2025-10-17T22:46:46.163589",
        "response_time": "3.03"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 147,
        "solution": "```python\n===START===\ndef get_max_triples(n):\n    # Generate the array a based on the formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the occurrences of each remainder when divided by 3\n    count_mod = [0, 0, 0]\n    for num in a:\n        count_mod[num % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Case 1: All three numbers have the same remainder\n    triples = (count_mod[0] * (count_mod[0] - 1) * (count_mod[0] - 2)) // 6\n    triples += (count_mod[1] * (count_mod[1] - 1) * (count_mod[1] - 2)) // 6\n    triples += (count_mod[2] * (count_mod[2] - 1) * (count_mod[2] - 2)) // 6\n    \n    # Case 2: All three numbers have different remainders\n    triples += count_mod[0] * count_mod[1] * count_mod[2]\n    \n    return triples\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n### Signature\ndef get_max_triples(n):",
        "timestamp": "2025-10-17T22:46:50.902424",
        "response_time": "4.73"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 148,
        "solution": "```python\n===START===\ndef bf(planet1, planet2):\n    # List of planets in order of proximity to the Sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Get the indices of the two planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Determine the range of indices between the two planets\n    start = min(index1, index2) + 1\n    end = max(index1, index2)\n    \n    # Return the planets between the two indices\n    return tuple(planets[start:end])\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\n### Signature\ndef bf(planet1, planet2):",
        "timestamp": "2025-10-17T22:46:54.372778",
        "response_time": "3.47"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 149,
        "solution": "```python\n===START===\ndef sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first alphabetically, then by length\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\n### Signature\ndef sorted_list_sum(lst):",
        "timestamp": "2025-10-17T22:46:56.146295",
        "response_time": "1.77"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 150,
        "solution": "```python\n===START===\nimport math\n\ndef x_or_y(n, x, y):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return x if is_prime(n) else y\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n### Signature\ndef x_or_y(n, x, y):",
        "timestamp": "2025-10-17T22:46:57.634477",
        "response_time": "1.49"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 151,
        "solution": "```python\n===START===\ndef double_the_difference(lst):\n    # Initialize the sum of squares\n    sum_of_squares = 0\n    \n    # Iterate through the list\n    for num in lst:\n        # Check if the number is an integer, positive, and odd\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            # Add the square of the number to the sum\n            sum_of_squares += num ** 2\n    \n    return sum_of_squares\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n### Signature\ndef double_the_difference(lst):",
        "timestamp": "2025-10-17T22:47:00.028035",
        "response_time": "2.39"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 152,
        "solution": "```python\n# ===START===\ndef compare(game, guess):\n    # Calculate the absolute difference between each score and guess\n    return [abs(g - s) for g, s in zip(game, guess)]\n# ===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n### Signature\ndef compare(game,guess):",
        "timestamp": "2025-10-17T22:47:01.694308",
        "response_time": "1.66"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 153,
        "solution": "```python\n===START===\ndef Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        # Calculate the strength of the extension\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    # Initialize variables to track the strongest extension\n    strongest_extension = None\n    max_strength = float('-inf')\n\n    # Iterate through the extensions to find the strongest one\n    for extension in extensions:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    # Return the result in the required format\n    return f\"{class_name}.{strongest_extension}\"\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\n### Signature\ndef Strongest_Extension(class_name, extensions):",
        "timestamp": "2025-10-17T22:47:04.092762",
        "response_time": "2.40"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 154,
        "solution": "```python\n===START===\ndef cycpattern_check(a, b):\n    # Generate all rotations of the second word\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    \n    # Check if any rotation is a substring of the first word\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    return False\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n### Signature\ndef cycpattern_check(a , b):",
        "timestamp": "2025-10-17T22:47:05.681716",
        "response_time": "1.59"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 155,
        "solution": "===START===\ndef even_odd_count(num):\n    # Convert the number to its absolute value to handle negative numbers\n    num = abs(num)\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate through each digit in the number\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Return the counts as a tuple\n    return (even_count, odd_count)\n===END===",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n### Signature\ndef even_odd_count(num):",
        "timestamp": "2025-10-17T22:47:09.022343",
        "response_time": "3.34"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 156,
        "solution": "```python\n===START===\ndef int_to_mini_roman(number):\n    # Define the Roman numeral mappings\n    roman_mappings = [\n        (1000, 'm'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i')\n    ]\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Convert the number to Roman numeral\n    for value, roman in roman_mappings:\n        while number >= value:\n            result += roman\n            number -= value\n    \n    return result\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n### Signature\ndef int_to_mini_roman(number):",
        "timestamp": "2025-10-17T22:47:12.137309",
        "response_time": "3.11"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 157,
        "solution": "```python\n===START===\ndef right_angle_triangle(a, b, c):\n    # Sort the sides to ensure the largest side is treated as the hypotenuse\n    sides = sorted([a, b, c])\n    # Check if the square of the largest side equals the sum of the squares of the other two sides\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n\n### Signature\ndef right_angle_triangle(a, b, c):",
        "timestamp": "2025-10-17T22:47:15.075810",
        "response_time": "2.94"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 158,
        "solution": "```python\n===START===\ndef find_max(words):\n    def unique_char_count(word):\n        return len(set(word))\n    \n    max_unique_count = 0\n    result_word = None\n    \n    for word in words:\n        current_unique_count = unique_char_count(word)\n        if (current_unique_count > max_unique_count or \n            (current_unique_count == max_unique_count and word < result_word)):\n            max_unique_count = current_unique_count\n            result_word = word\n    \n    return result_word\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n### Signature\ndef find_max(words):",
        "timestamp": "2025-10-17T22:47:16.957281",
        "response_time": "1.88"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 159,
        "solution": "```python\n===START===\ndef eat(number, need, remaining):\n    # Calculate the total number of carrots eaten after the meal\n    total_eaten = number + min(need, remaining)\n    \n    # Calculate the number of carrots left after the meal\n    carrots_left = max(0, remaining - need)\n    \n    return [total_eaten, carrots_left]\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n### Signature\ndef eat(number, need, remaining):",
        "timestamp": "2025-10-17T22:47:18.352044",
        "response_time": "1.39"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 160,
        "solution": "```python\n===START===\ndef do_algebra(operator, operand):\n    # Initialize the expression with the first operand\n    expression = str(operand[0])\n    \n    # Iterate through the operators and operands to build the expression\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i + 1])\n    \n    # Evaluate the built expression and return the result\n    return eval(expression)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n### Signature\ndef do_algebra(operator, operand):",
        "timestamp": "2025-10-17T22:47:20.141713",
        "response_time": "1.79"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 161,
        "solution": "```python\n===START===\ndef solve(s):\n    # Check if the string contains any letters\n    if any(char.isalpha() for char in s):\n        # Reverse the case of letters and keep other characters as is\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)\n    else:\n        # If no letters, reverse the string\n        return s[::-1]\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n\n### Signature\ndef solve(s):",
        "timestamp": "2025-10-17T22:47:22.281530",
        "response_time": "2.14"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 162,
        "solution": "```python\n===START===\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:  # Check if the string is empty\n        return None\n    # Compute the MD5 hash\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n### Signature\ndef string_to_md5(text):",
        "timestamp": "2025-10-17T22:47:24.105299",
        "response_time": "1.82"
    },
    {
        "dataset_name": "human_eval_chatgpt4o_second_half",
        "dataset_row_id": 163,
        "solution": "```python\n===START===\ndef generate_integers(a, b):\n    # Ensure a is less than or equal to b\n    if a > b:\n        a, b = b, a\n    \n    # Initialize an empty list to store even digits\n    even_digits = []\n    \n    # Iterate through the range of numbers from a to b (inclusive)\n    for num in range(a, b + 1):\n        # Convert the number to a string to iterate through its digits\n        for digit in str(num):\n            # Check if the digit is even and not already in the list\n            if int(digit) % 2 == 0 and int(digit) not in even_digits:\n                even_digits.append(int(digit))\n    \n    # Return the sorted list of even digits\n    return sorted(even_digits)\n===END===\n```",
        "llm_name": "openai/gpt-4o-2024-11-20",
        "prompt": "### Prompt\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n### Signature\ndef generate_integers(a, b):",
        "timestamp": "2025-10-17T22:47:26.936678",
        "response_time": "2.83"
    }
]