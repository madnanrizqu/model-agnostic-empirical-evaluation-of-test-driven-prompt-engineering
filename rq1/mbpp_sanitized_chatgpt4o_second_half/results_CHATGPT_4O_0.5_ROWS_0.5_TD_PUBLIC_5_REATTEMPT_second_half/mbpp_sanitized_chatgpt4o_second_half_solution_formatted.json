[
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 425,
    "solution": "def count_element_in_list(list1, x):\n    \"\"\"\n    Counts the number of sublists in the given list that contain the specified element.\n\n    Args:\n    list1 (list): A list of sublists.\n    x: The element to search for in the sublists.\n\n    Returns:\n    int: The count of sublists containing the element x.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if isinstance(sublist, list) and x in sublist:\n            count += 1\n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of sublists containing a particular element.\n\n### Signature\ndef count_element_in_list(list1, x):",
    "timestamp": "2025-10-17T18:43:30.318027",
    "response_time": "3.01",
    "context": "{\"function_name\": \"count_element_in_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 426,
    "solution": "def filter_oddnumbers(nums):\n    \"\"\"\n    Filters out odd numbers from the given list of integers.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    list: A list containing only the odd numbers from the input list.\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to filter odd numbers.\n\n### Signature\ndef filter_oddnumbers(nums):",
    "timestamp": "2025-10-17T18:43:32.336434",
    "response_time": "2.02",
    "context": "{\"function_name\": \"filter_oddnumbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 427,
    "solution": "def change_date_format(dt):\n    # Split the input date string by '-'\n    parts = dt.split('-')\n    # Rearrange the parts to dd-mm-yyyy format\n    return f\"{parts[2]}-{parts[1]}-{parts[0]}\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n### Signature\ndef change_date_format(dt):",
    "timestamp": "2025-10-17T18:43:34.582660",
    "response_time": "2.24",
    "context": "{\"function_name\": \"change_date_format\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 428,
    "solution": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2  # Initialize the gap size\n\n    # Perform a shell sort\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # Perform a gapped insertion sort\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2  # Reduce the gap size for the next iteration\n\n    return my_list",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort the given array by using shell sort.\n\n### Signature\ndef shell_sort(my_list):",
    "timestamp": "2025-10-17T18:43:37.314371",
    "response_time": "2.73",
    "context": "{\"function_name\": \"shell_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 429,
    "solution": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Extracts the elementwise AND tuples from the given two tuples.\n    The AND operation is performed on corresponding elements of the tuples.\n    \n    Args:\n    test_tup1 (tuple): First input tuple containing integers.\n    test_tup2 (tuple): Second input tuple containing integers.\n    \n    Returns:\n    tuple: A tuple containing the result of elementwise AND operation.\n    \"\"\"\n    # Perform elementwise AND operation using zip and bitwise AND operator\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\n### Signature\ndef and_tuples(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:43:42.969379",
    "response_time": "5.65",
    "context": "{\"function_name\": \"and_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 430,
    "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function calculates the directrix of a parabola given its equation in the form:\n    y = ax^2 + bx + c\n\n    The directrix of a parabola is a horizontal line given by the equation:\n    y = k - (1 / (4a))\n    where k is the y-coordinate of the vertex.\n\n    Parameters:\n    a (float): Coefficient of x^2\n    b (float): Coefficient of x\n    c (float): Constant term\n\n    Returns:\n    float: The y-coordinate of the directrix\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"The coefficient 'a' cannot be zero for a parabola.\")\n\n    # Calculate the x-coordinate of the vertex\n    x_vertex = -b / (2 * a)\n\n    # Calculate the y-coordinate of the vertex\n    y_vertex = a * (x_vertex ** 2) + b * x_vertex + c\n\n    # Calculate the y-coordinate of the directrix\n    directrix = y_vertex - (1 / (4 * a))\n\n    return directrix",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the directrix of a parabola.\n\n### Signature\ndef parabola_directrix(a, b, c):",
    "timestamp": "2025-10-17T18:43:46.159459",
    "response_time": "3.19",
    "context": "{\"function_name\": \"parabola_directrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 431,
    "solution": "def common_element(list1, list2):\n    # Convert the lists to sets and check for intersection\n    return not set(list1).isdisjoint(set(list2))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes two lists and returns true if they have at least one common element.\n\n### Signature\ndef common_element(list1, list2):",
    "timestamp": "2025-10-17T18:43:48.112624",
    "response_time": "1.95",
    "context": "{\"function_name\": \"common_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 432,
    "solution": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    The median of a trapezium is the line segment that connects the midpoints of the non-parallel sides.\n    Its length is the average of the lengths of the two parallel sides (bases).\n\n    Parameters:\n    base1 (float): Length of the first base of the trapezium.\n    base2 (float): Length of the second base of the trapezium.\n    height (float): Height of the trapezium (not used in median calculation).\n\n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n    return (base1 + base2) / 2",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the median length of a trapezium.\n\n### Signature\ndef median_trapezium(base1,base2,height):",
    "timestamp": "2025-10-17T18:43:50.376156",
    "response_time": "2.26",
    "context": "{\"function_name\": \"median_trapezium\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 433,
    "solution": "def check_greater(arr, number):\n    \"\"\"\n    This function checks whether the given number is greater than all elements in the array.\n\n    :param arr: List of integers or floats\n    :param number: Integer or float to compare with the array elements\n    :return: Boolean value, True if the number is greater than all elements in the array, False otherwise\n    \"\"\"\n    for element in arr:\n        if number <= element:\n            return False\n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\n### Signature\ndef check_greater(arr, number):",
    "timestamp": "2025-10-17T18:43:53.586454",
    "response_time": "3.21",
    "context": "{\"function_name\": \"check_greater\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 434,
    "solution": "import re\n\ndef text_match_one(text):\n    \"\"\"\n    Matches a string that has an 'a' followed by one or more 'b's.\n    \n    Args:\n    text (str): The input string to be matched.\n    \n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a+b+'\n    return bool(re.fullmatch(pattern, text))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by one or more b's.\n\n### Signature\ndef text_match_one(text):",
    "timestamp": "2025-10-17T18:43:55.213266",
    "response_time": "1.62",
    "context": "{\"function_name\": \"text_match_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 435,
    "solution": "def last_Digit(n):\n    \"\"\"\n    This function returns the last digit of a given number.\n    \n    Parameters:\n    n (int): The input number.\n    \n    Returns:\n    int: The last digit of the number.\n    \"\"\"\n    return abs(n) % 10",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the last digit of a given number.\n\n### Signature\ndef last_Digit(n) :",
    "timestamp": "2025-10-17T18:43:56.299628",
    "response_time": "1.08",
    "context": "{\"function_name\": \"last_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 436,
    "solution": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list of numbers and returns a list of negative numbers from the input list.\n    \n    :param list1: List of numbers\n    :return: List of negative numbers\n    \"\"\"\n    return [num for num in list1 if num < 0]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to return the negative numbers in a list.\n\n### Signature\ndef neg_nos(list1):",
    "timestamp": "2025-10-17T18:43:57.646927",
    "response_time": "1.34",
    "context": "{\"function_name\": \"neg_nos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 437,
    "solution": "def remove_odd(str1):\n    # Remove characters at odd indices\n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove odd characters in a string.\n\n### Signature\ndef remove_odd(str1):",
    "timestamp": "2025-10-17T18:43:59.147134",
    "response_time": "1.50",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 438,
    "solution": "from collections import Counter\n\ndef count_bidirectional(test_list):\n    # Create a Counter object to count occurrences of each tuple and its reverse\n    counter = Counter()\n    \n    for a, b in test_list:\n        # Sort the tuple to ensure bidirectional pairs are treated the same\n        sorted_tuple = tuple(sorted((a, b)))\n        counter[sorted_tuple] += 1\n    \n    # Count the number of bidirectional pairs\n    bidirectional_count = sum(1 for count in counter.values() if count > 1)\n    \n    return bidirectional_count\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count bidirectional tuple pairs.\n\n### Signature\ndef count_bidirectional(test_list):",
    "timestamp": "2025-10-17T18:44:04.047624",
    "response_time": "4.90",
    "context": "{\"function_name\": \"count_bidirectional\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 439,
    "solution": "def multiple_to_single(L):\n    \"\"\"\n    Joins a list of integers into a single integer.\n\n    Args:\n    L (list): A list of integers.\n\n    Returns:\n    int: A single integer formed by concatenating the integers in the list.\n    \"\"\"\n    # Convert each integer in the list to a string, join them, and convert back to an integer\n    return int(''.join(map(str, L)))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to join a list of multiple integers into a single integer.\n\n### Signature\ndef multiple_to_single(L):",
    "timestamp": "2025-10-17T18:44:05.879966",
    "response_time": "1.83",
    "context": "{\"function_name\": \"multiple_to_single\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 440,
    "solution": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Finds the first adverb and its position in the given sentence.\n    An adverb is identified as a word ending with 'ly'.\n    \n    Args:\n    text (str): The input sentence.\n    \n    Returns:\n    tuple: A tuple containing the first adverb and its position (index in the sentence).\n           If no adverb is found, returns (None, -1).\n    \"\"\"\n    # Regular expression to find words ending with 'ly'\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    \n    if match:\n        return match.group(), match.start()\n    else:\n        return None, -1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the first adverb and their positions in a given sentence.\n\n### Signature\ndef find_adverb_position(text):",
    "timestamp": "2025-10-17T18:44:08.478051",
    "response_time": "2.60",
    "context": "{\"function_name\": \"find_adverb_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 441,
    "solution": "def surfacearea_cube(l):\n    \"\"\"\n    Calculate the surface area of a cube given the length of one side.\n\n    Parameters:\n    l (float): The length of one side of the cube.\n\n    Returns:\n    float: The surface area of the cube.\n    \"\"\"\n    if l < 0:\n        raise ValueError(\"The length of the cube's side must be non-negative.\")\n    \n    # Surface area of a cube = 6 * (side length)^2\n    return 6 * (l ** 2)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cube of a given size.\n\n### Signature\ndef surfacearea_cube(l):",
    "timestamp": "2025-10-17T18:44:10.415511",
    "response_time": "1.94",
    "context": "{\"function_name\": \"surfacearea_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 442,
    "solution": "def positive_count(nums):\n    if not nums:  # Handle empty list case\n        return 0\n    \n    positive_numbers = [num for num in nums if num > 0]\n    return len(positive_numbers) / len(nums)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the ration of positive numbers in an array of integers.\n\n### Signature\ndef positive_count(nums):",
    "timestamp": "2025-10-17T18:44:12.258124",
    "response_time": "1.84",
    "context": "{\"function_name\": \"positive_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 443,
    "solution": "def largest_neg(list1):\n    # Filter out negative numbers from the list\n    negative_numbers = [num for num in list1 if num < 0]\n    \n    # If there are no negative numbers, return None\n    if not negative_numbers:\n        return None\n    \n    # Return the largest negative number\n    return max(negative_numbers)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the largest negative number from the given list.\n\n### Signature\ndef largest_neg(list1):",
    "timestamp": "2025-10-17T18:44:13.945148",
    "response_time": "1.68",
    "context": "{\"function_name\": \"largest_neg\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 444,
    "solution": "def trim_tuple(test_list, K):\n    \"\"\"\n    Trims each tuple in the given list of tuples by K elements from both ends.\n    \n    Parameters:\n    test_list (list of tuples): The list of tuples to be trimmed.\n    K (int): The number of elements to trim from both ends of each tuple.\n    \n    Returns:\n    list of tuples: A new list of tuples with each tuple trimmed by K elements.\n    \"\"\"\n    # Trim each tuple by slicing from K to -K\n    return [t[K:len(t)-K] for t in test_list]\n\n# Example usage:\n# test_list = [(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15)]\n# K = 1\n# print(trim_tuple(test_list, K))  # Output: [(2, 3, 4), (7, 8, 9), (12, 13, 14)]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to trim each tuple by k in the given tuple list.\n\n### Signature\ndef trim_tuple(test_list, K):",
    "timestamp": "2025-10-17T18:44:16.882640",
    "response_time": "2.94",
    "context": "{\"function_name\": \"trim_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 445,
    "solution": "def index_multiplication(test_tup1, test_tup2):\n    # Ensure both tuples are of the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    # Perform index-wise multiplication\n    result = tuple(a * b for a, b in zip(test_tup1, test_tup2))\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n### Signature\ndef index_multiplication(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:44:18.148514",
    "response_time": "1.26",
    "context": "{\"function_name\": \"index_multiplication\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 446,
    "solution": "def count_Occurrence(tup, lst):\n    \"\"\"\n    Count the occurrence of all elements of a list in a tuple.\n\n    Parameters:\n    tup (tuple): The tuple in which to count occurrences.\n    lst (list): The list of elements to count in the tuple.\n\n    Returns:\n    dict: A dictionary with elements of the list as keys and their counts in the tuple as values.\n    \"\"\"\n    # Initialize a dictionary to store the counts\n    occurrence_dict = {}\n    \n    # Iterate through each element in the list\n    for element in lst:\n        # Count the occurrences of the element in the tuple\n        occurrence_dict[element] = tup.count(element)\n    \n    return occurrence_dict",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the occurence of all elements of list in a tuple.\n\n### Signature\ndef count_Occurrence(tup, lst):",
    "timestamp": "2025-10-17T18:44:20.288851",
    "response_time": "2.14",
    "context": "{\"function_name\": \"count_Occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 447,
    "solution": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a list of their cubes.\n    \n    Args:\n    nums (list): A list of numbers.\n    \n    Returns:\n    list: A list containing the cubes of the input numbers.\n    \"\"\"\n    return [num ** 3 for num in nums]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find cubes of individual elements in a list.\n\n### Signature\ndef cube_nums(nums):",
    "timestamp": "2025-10-17T18:44:21.649277",
    "response_time": "1.36",
    "context": "{\"function_name\": \"cube_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 448,
    "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n    \n    The Perrin sequence is defined as:\n    P(0) = 3, P(1) = 0, P(2) = 2\n    P(n) = P(n-2) + P(n-3) for n > 2\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    # Base cases\n    perrin = [3, 0, 2]\n    \n    # Generate Perrin numbers up to n\n    for i in range(3, n):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    \n    # Return the sum of the first n Perrin numbers\n    return sum(perrin[:n])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the sum of perrin numbers.\n\n### Signature\ndef cal_sum(n):",
    "timestamp": "2025-10-17T18:44:25.398240",
    "response_time": "3.75",
    "context": "{\"function_name\": \"cal_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 450,
    "solution": "def extract_string(str_list, l):\n    \"\"\"\n    Extract strings of a specified size from a given list of string values.\n\n    Parameters:\n    str_list (list): A list of string values.\n    l (int): The desired length of strings to extract.\n\n    Returns:\n    list: A list of strings from the input list that have the specified length.\n    \"\"\"\n    return [s for s in str_list if len(s) == l]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract specified size of strings from a given list of string values.\n\n### Signature\ndef extract_string(str, l):",
    "timestamp": "2025-10-17T18:44:28.202729",
    "response_time": "2.80",
    "context": "{\"function_name\": \"extract_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 451,
    "solution": "def remove_whitespaces(text1):\n    return text1.replace(\" \", \"\")",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from the given string.\n\n### Signature\ndef remove_whitespaces(text1):",
    "timestamp": "2025-10-17T18:44:29.533206",
    "response_time": "1.33",
    "context": "{\"function_name\": \"remove_whitespaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 452,
    "solution": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the loss amount on a sale if there is a loss, otherwise return 0.\n\n    Parameters:\n    actual_cost (float): The actual cost of the item.\n    sale_amount (float): The sale amount of the item.\n\n    Returns:\n    float: The loss amount if there is a loss, otherwise 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    return 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n### Signature\ndef loss_amount(actual_cost,sale_amount):",
    "timestamp": "2025-10-17T18:44:31.224088",
    "response_time": "1.69",
    "context": "{\"function_name\": \"loss_amount\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 453,
    "solution": "def sumofFactors(n):\n    # Function to calculate the sum of even factors of a number\n    def is_even(x):\n        return x % 2 == 0\n\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and is_even(i):\n            sum_even_factors += i\n\n    return sum_even_factors",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of even factors of a number.\n\n### Signature\ndef sumofFactors(n) :",
    "timestamp": "2025-10-17T18:44:32.625071",
    "response_time": "1.40",
    "context": "{\"function_name\": \"sumofFactors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 454,
    "solution": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    This function checks if the input text contains a word with the letter 'z'.\n    Returns True if such a word exists, otherwise False.\n    \"\"\"\n    # Regular expression to find words containing 'z' or 'Z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a word containing 'z'.\n\n### Signature\ndef text_match_wordz(text):",
    "timestamp": "2025-10-17T18:44:34.194684",
    "response_time": "1.57",
    "context": "{\"function_name\": \"text_match_wordz\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 455,
    "solution": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    This function checks whether the given month number contains 31 days or not.\n    \n    Args:\n    monthnum2 (int): The month number (1 for January, 2 for February, ..., 12 for December)\n    \n    Returns:\n    bool: True if the month contains 31 days, False otherwise\n    \"\"\"\n    # Months with 31 days: January, March, May, July, August, October, December\n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    \n    return monthnum2 in months_with_31_days",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 31 days or not.\n\n### Signature\ndef check_monthnumb_number(monthnum2):",
    "timestamp": "2025-10-17T18:44:36.429904",
    "response_time": "2.23",
    "context": "{\"function_name\": \"check_monthnumb_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 456,
    "solution": "def reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to reverse each string in a given list of string values.\n\n### Signature\ndef reverse_string_list(stringlist):",
    "timestamp": "2025-10-17T18:44:37.595455",
    "response_time": "1.16",
    "context": "{\"function_name\": \"reverse_string_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 457,
    "solution": "def Find_Min(lst):\n    \"\"\"\n    This function finds the sublist with the minimum length in a list of lists.\n    \n    Parameters:\n    lst (list): A list containing sublists.\n    \n    Returns:\n    list: The sublist with the minimum length. If there are multiple sublists with the same minimum length,\n          the first one encountered is returned. If the input list is empty, return an empty list.\n    \"\"\"\n    if not lst:  # If the input list is empty, return an empty list\n        return []\n    \n    # Find the sublist with the minimum length\n    min_sublist = min(lst, key=len)\n    return min_sublist",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sublist having minimum length.\n\n### Signature\ndef Find_Min(lst):",
    "timestamp": "2025-10-17T18:44:40.193325",
    "response_time": "2.60",
    "context": "{\"function_name\": \"Find_Min\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 458,
    "solution": "def rectangle_area(l, b):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    l (float): The length of the rectangle.\n    b (float): The breadth of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n    \"\"\"\n    if l < 0 or b < 0:\n        raise ValueError(\"Length and breadth must be non-negative.\")\n    return l * b",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the area of a rectangle.\n\n### Signature\ndef rectangle_area(l,b):",
    "timestamp": "2025-10-17T18:44:41.822471",
    "response_time": "1.63",
    "context": "{\"function_name\": \"rectangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 459,
    "solution": "def remove_uppercase(str1):\n    import re\n    # Use regex to find and remove uppercase substrings\n    return re.sub(r'[A-Z]+', '', str1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove uppercase substrings from a given string.\n\n### Signature\ndef remove_uppercase(str1):",
    "timestamp": "2025-10-17T18:44:42.910272",
    "response_time": "1.08",
    "context": "{\"function_name\": \"remove_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 460,
    "solution": "def Extract(lst):\n    \"\"\"\n    This function takes a list of sublists and returns a list containing the first element of each sublist.\n    \n    :param lst: List of sublists\n    :return: List of first elements of each sublist\n    \"\"\"\n    return [sublist[0] for sublist in lst if sublist]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to get the first element of each sublist.\n\n### Signature\ndef Extract(lst):",
    "timestamp": "2025-10-17T18:44:44.527587",
    "response_time": "1.61",
    "context": "{\"function_name\": \"Extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 461,
    "solution": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the upper case characters in a given string.\n\n### Signature\ndef upper_ctr(str):",
    "timestamp": "2025-10-17T18:44:45.556216",
    "response_time": "1.03",
    "context": "{\"function_name\": \"upper_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 462,
    "solution": "from itertools import combinations\n\ndef combinations_list(list1):\n    result = []\n    for r in range(1, len(list1) + 1):\n        result.extend(combinations(list1, r))\n    return [list(comb) for comb in result]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find all possible combinations of the elements of a given list.\n\n### Signature\ndef combinations_list(list1):",
    "timestamp": "2025-10-17T18:44:47.070611",
    "response_time": "1.51",
    "context": "{\"function_name\": \"combinations_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 463,
    "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    # Initialize variables to store the maximum product, minimum product, and result\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        num = arr[i]\n\n        # If the current number is negative, swap max_product and min_product\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        # Update max_product and min_product\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        # Update the result with the maximum product found so far\n        result = max(result, max_product)\n\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum product subarray of the given array.\n\n### Signature\ndef max_subarray_product(arr):",
    "timestamp": "2025-10-17T18:44:49.271907",
    "response_time": "2.20",
    "context": "{\"function_name\": \"max_subarray_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 464,
    "solution": "def check_value(dict, n):\n    \"\"\"\n    Check if all values in the dictionary are the same as the given value n.\n\n    Args:\n    dict (dict): The dictionary to check.\n    n: The value to compare against.\n\n    Returns:\n    bool: True if all values in the dictionary are the same as n, False otherwise.\n    \"\"\"\n    for value in dict.values():\n        if value != n:\n            return False\n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if all values are same in a dictionary.\n\n### Signature\ndef check_value(dict, n):",
    "timestamp": "2025-10-17T18:44:51.955247",
    "response_time": "2.68",
    "context": "{\"function_name\": \"check_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 465,
    "solution": "def drop_empty(dict1):\n    \"\"\"\n    Removes keys with empty values from the given dictionary.\n    \n    Args:\n    dict1 (dict): The input dictionary.\n    \n    Returns:\n    dict: A new dictionary with empty values removed.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to drop empty items from a given dictionary.\n\n### Signature\ndef drop_empty(dict1):",
    "timestamp": "2025-10-17T18:44:53.735712",
    "response_time": "1.78",
    "context": "{\"function_name\": \"drop_empty\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 468,
    "solution": "from itertools import combinations\n\ndef max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize a list to store the maximum product for each index\n    max_product_dp = [0] * n\n    \n    # Initialize the maximum product to 0\n    overall_max_product = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        # Start with the current element as the product\n        max_product_dp[i] = arr[i]\n        \n        # Check all previous elements to find increasing subsequences\n        for j in range(i):\n            if arr[j] < arr[i]:\n                # Update the maximum product for the current index\n                max_product_dp[i] = max(max_product_dp[i], max_product_dp[j] * arr[i])\n        \n        # Update the overall maximum product\n        overall_max_product = max(overall_max_product, max_product_dp[i])\n    \n    return overall_max_product",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n### Signature\ndef max_product(arr):",
    "timestamp": "2025-10-17T18:44:57.603208",
    "response_time": "3.86",
    "context": "{\"function_name\": \"max_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 470,
    "solution": "def add_pairwise(test_tup):\n    \"\"\"\n    This function takes a tuple of numbers and returns a list containing the pairwise addition\n    of neighboring elements in the tuple.\n    \n    :param test_tup: Tuple of numbers\n    :return: List of pairwise sums of neighboring elements\n    \"\"\"\n    # Ensure the input is a tuple\n    if not isinstance(test_tup, tuple):\n        raise ValueError(\"Input must be a tuple\")\n    \n    # Compute pairwise addition of neighboring elements\n    return [test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n### Signature\ndef add_pairwise(test_tup):",
    "timestamp": "2025-10-17T18:45:00.637080",
    "response_time": "3.03",
    "context": "{\"function_name\": \"add_pairwise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 471,
    "solution": "def find_remainder(arr, n):\n    # Initialize the product to 1\n    product = 1\n    \n    # Calculate the product of all elements in the array\n    for num in arr:\n        product *= num\n    \n    # Return the product modulo n\n    return product % n",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the product of the array multiplication modulo n.\n\n### Signature\ndef find_remainder(arr, n):",
    "timestamp": "2025-10-17T18:45:02.373771",
    "response_time": "1.73",
    "context": "{\"function_name\": \"find_remainder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 472,
    "solution": "def check_Consecutive(l):\n    if not l:  # Check if the list is empty\n        return False\n    \n    # Sort the list\n    sorted_list = sorted(l)\n    \n    # Check if each element is consecutive\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i] + 1 != sorted_list[i + 1]:\n            return False\n    \n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\n### Signature\ndef check_Consecutive(l):",
    "timestamp": "2025-10-17T18:45:05.735754",
    "response_time": "3.36",
    "context": "{\"function_name\": \"check_Consecutive\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 473,
    "solution": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function finds the intersection of elements in two lists of tuples,\n    irrespective of the order of elements in the tuples.\n    \"\"\"\n    # Normalize tuples by sorting their elements\n    normalized_list1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_list2 = {tuple(sorted(t)) for t in test_list2}\n    \n    # Find the intersection of the two sets\n    intersection = normalized_list1 & normalized_list2\n    \n    # Return the result as a list of tuples\n    return list(intersection)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n### Signature\ndef tuple_intersection(test_list1, test_list2):",
    "timestamp": "2025-10-17T18:45:08.568216",
    "response_time": "2.83",
    "context": "{\"function_name\": \"tuple_intersection\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 474,
    "solution": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replaces all occurrences of a character in a string with a new character.\n\n    Parameters:\n    str1 (str): The original string.\n    ch (str): The character to be replaced.\n    newch (str): The character to replace with.\n\n    Returns:\n    str: The modified string with replacements.\n    \"\"\"\n    return str1.replace(ch, newch)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to replace characters in a string.\n\n### Signature\ndef replace_char(str1,ch,newch):",
    "timestamp": "2025-10-17T18:45:10.465022",
    "response_time": "1.89",
    "context": "{\"function_name\": \"replace_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 475,
    "solution": "def sort_counter(dict1):\n    \"\"\"\n    Sorts a dictionary by its values in ascending order.\n\n    Args:\n    dict1 (dict): The dictionary to be sorted.\n\n    Returns:\n    dict: A new dictionary sorted by its values.\n    \"\"\"\n    # Sort the dictionary by its values and return a new dictionary\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a dictionary by value.\n\n### Signature\ndef sort_counter(dict1):",
    "timestamp": "2025-10-17T18:45:14.616906",
    "response_time": "4.15",
    "context": "{\"function_name\": \"sort_counter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 476,
    "solution": "def big_sum(nums):\n    if not nums:  # Check if the list is empty\n        return 0\n    smallest = min(nums)  # Find the smallest value\n    largest = max(nums)   # Find the largest value\n    return smallest + largest  # Return their sum",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\n### Signature\ndef big_sum(nums):",
    "timestamp": "2025-10-17T18:45:15.881972",
    "response_time": "1.26",
    "context": "{\"function_name\": \"big_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 477,
    "solution": "def is_lower(string):\n    \"\"\"\n    Converts the given string to lower case.\n    \n    Args:\n    string (str): The input string to be converted.\n    \n    Returns:\n    str: The input string converted to lower case.\n    \"\"\"\n    return string.lower()",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to convert the given string to lower case.\n\n### Signature\ndef is_lower(string):",
    "timestamp": "2025-10-17T18:45:17.293370",
    "response_time": "1.41",
    "context": "{\"function_name\": \"is_lower\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 478,
    "solution": "def remove_lowercase(str1):\n    result = []\n    i = 0\n    while i < len(str1):\n        if str1[i].islower():\n            # Skip over the lowercase substring\n            while i < len(str1) and str1[i].islower():\n                i += 1\n        else:\n            # Add non-lowercase characters to the result\n            result.append(str1[i])\n            i += 1\n    return ''.join(result)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove lowercase substrings from a given string.\n\n### Signature\ndef remove_lowercase(str1):",
    "timestamp": "2025-10-17T18:45:18.805632",
    "response_time": "1.50",
    "context": "{\"function_name\": \"remove_lowercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 479,
    "solution": "def first_Digit(n):\n    # Convert the number to a string to handle its digits\n    n_str = str(abs(n))  # Use abs() to handle negative numbers\n    # Return the first character converted back to an integer\n    return int(n_str[0])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the first digit of a given number.\n\n### Signature\ndef first_Digit(n) :",
    "timestamp": "2025-10-17T18:45:20.511798",
    "response_time": "1.70",
    "context": "{\"function_name\": \"first_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 554,
    "solution": "def Split(list):\n    # Filter the list to include only odd numbers\n    return [num for num in list if num % 2 != 0]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and only returns the odd ones.\n\n### Signature\ndef Split(list):",
    "timestamp": "2025-10-17T18:45:21.740220",
    "response_time": "1.22",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 555,
    "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = n * (n + 1) // 2\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    \n    # Return the difference\n    return sum_of_cubes - sum_of_numbers",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n### Signature\ndef difference(n) :",
    "timestamp": "2025-10-17T18:45:24.703463",
    "response_time": "2.96",
    "context": "{\"function_name\": \"difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 556,
    "solution": "def find_Odd_Pair(A, N):\n    # Count the number of odd and even numbers in the array\n    odd_count = sum(1 for x in A if x % 2 != 0)\n    even_count = N - odd_count  # Remaining numbers are even\n    \n    # XOR of an odd and an even number is always odd\n    # The number of such pairs is odd_count * even_count\n    return odd_count * even_count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose xor value is odd.\n\n### Signature\ndef find_Odd_Pair(A,N) :",
    "timestamp": "2025-10-17T18:45:27.888837",
    "response_time": "3.18",
    "context": "{\"function_name\": \"find_Odd_Pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 557,
    "solution": "def toggle_string(string):\n    return string.swapcase()",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to toggle the case of all characters in a string.\n\n### Signature\ndef toggle_string(string):",
    "timestamp": "2025-10-17T18:45:28.841250",
    "response_time": "0.95",
    "context": "{\"function_name\": \"toggle_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 558,
    "solution": "def digit_distance_nums(n1, n2):\n    # Convert both numbers to strings to process each digit\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # Pad the shorter number with leading zeros to make them the same length\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    \n    # Calculate the sum of per-digit differences\n    total_distance = 0\n    for digit1, digit2 in zip(str_n1, str_n2):\n        total_distance += abs(int(digit1) - int(digit2))\n    \n    return total_distance",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of the per-digit difference between two integers.\n\n### Signature\ndef digit_distance_nums(n1, n2):",
    "timestamp": "2025-10-17T18:45:31.499465",
    "response_time": "2.66",
    "context": "{\"function_name\": \"digit_distance_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 559,
    "solution": "def max_sub_array_sum(a, size):\n    # Initialize variables\n    max_so_far = float('-inf')  # To store the maximum sum found so far\n    max_ending_here = 0         # To store the sum of the current subarray\n\n    for i in range(size):\n        max_ending_here += a[i]  # Add the current element to the current subarray sum\n\n        # Update max_so_far if the current subarray sum is greater\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n        # If the current subarray sum becomes negative, reset it to 0\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n\n### Signature\ndef max_sub_array_sum(a, size):",
    "timestamp": "2025-10-17T18:45:35.215346",
    "response_time": "3.71",
    "context": "{\"function_name\": \"max_sub_array_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 560,
    "solution": "def union_elements(test_tup1, test_tup2):\n    # Combine the elements of both tuples into a set to remove duplicates\n    union_set = set(test_tup1).union(set(test_tup2))\n    # Convert the set back to a sorted list\n    sorted_union = sorted(union_set)\n    return sorted_union",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n\n### Signature\ndef union_elements(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:45:36.665960",
    "response_time": "1.45",
    "context": "{\"function_name\": \"union_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 562,
    "solution": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list of lists and returns the length of the longest sublist.\n    \n    :param lst: List of lists\n    :return: Integer representing the length of the longest sublist\n    \"\"\"\n    if not lst:  # If the input list is empty, return 0\n        return 0\n    \n    max_length = 0\n    for sublist in lst:\n        if isinstance(sublist, list):  # Ensure the element is a list\n            max_length = max(max_length, len(sublist))\n    \n    return max_length",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest sublists.\n\n### Signature\ndef Find_Max_Length(lst):",
    "timestamp": "2025-10-17T18:45:39.940380",
    "response_time": "3.27",
    "context": "{\"function_name\": \"Find_Max_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 563,
    "solution": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extracts all values enclosed in quotation marks from the given string.\n\n    Args:\n    text (str): The input string.\n\n    Returns:\n    list: A list of strings found between quotation marks.\n    \"\"\"\n    # Use regex to find all substrings enclosed in single or double quotes\n    return re.findall(r'\"(.*?)\"|\\'(.*?)\\'', text)\n\n    # Flatten the list of tuples returned by re.findall\n    return [item for sublist in matches for item in sublist if item]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks from a string.\n\n### Signature\ndef extract_values(text):",
    "timestamp": "2025-10-17T18:45:43.849332",
    "response_time": "3.91",
    "context": "{\"function_name\": \"extract_values\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 564,
    "solution": "def count_Pairs(arr, n):\n    # Initialize a dictionary to count occurrences of each number\n    freq = {}\n    \n    # Count the frequency of each number in the array\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Total number of pairs\n    total_pairs = n * (n - 1) // 2\n    \n    # Subtract pairs where both elements are equal\n    for count in freq.values():\n        total_pairs -= count * (count - 1) // 2\n    \n    return total_pairs",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n### Signature\ndef count_Pairs(arr,n):",
    "timestamp": "2025-10-17T18:45:47.569438",
    "response_time": "3.72",
    "context": "{\"function_name\": \"count_Pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 565,
    "solution": "def split(word):\n    return list(word)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to split a string into characters.\n\n### Signature\ndef split(word):",
    "timestamp": "2025-10-17T18:45:48.303697",
    "response_time": "0.73",
    "context": "{\"function_name\": \"split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 566,
    "solution": "def sum_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Args:\n    n (int): A non-negative integer.\n\n    Returns:\n    int: The sum of the digits of the integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return sum(int(digit) for digit in str(n))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get the sum of the digits of a non-negative integer.\n\n### Signature\ndef sum_digits(n):",
    "timestamp": "2025-10-17T18:45:52.413251",
    "response_time": "4.11",
    "context": "{\"function_name\": \"sum_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 567,
    "solution": "def issort_list(list1):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Args:\n    list1 (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return list1 == sorted(list1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether a specified list is sorted or not.\n\n### Signature\ndef issort_list(list1):",
    "timestamp": "2025-10-17T18:45:59.148691",
    "response_time": "6.73",
    "context": "{\"function_name\": \"issort_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 568,
    "solution": "def empty_list(length):\n    return [{} for _ in range(length)]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to create a list of N empty dictionaries.\n\n### Signature\ndef empty_list(length):",
    "timestamp": "2025-10-17T18:46:02.445515",
    "response_time": "3.29",
    "context": "{\"function_name\": \"empty_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 569,
    "solution": "def sort_sublists(list1):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n    list1 (list of lists): A list containing sublists of strings.\n\n    Returns:\n    list of lists: A list with each sublist sorted alphabetically.\n    \"\"\"\n    return [sorted(sublist) for sublist in list1]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(list1):",
    "timestamp": "2025-10-17T18:46:06.519822",
    "response_time": "4.07",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 572,
    "solution": "def two_unique_nums(nums):\n    # Use a set to store unique numbers\n    unique_nums = set()\n    \n    # Iterate through each list in nums\n    for sublist in nums:\n        # Add each number in the sublist to the set\n        for num in sublist:\n            unique_nums.add(num)\n    \n    # Convert the set back to a sorted list and return\n    return sorted(unique_nums)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to remove duplicate numbers from a given number of lists.\n\n### Signature\ndef two_unique_nums(nums):",
    "timestamp": "2025-10-17T18:46:09.273472",
    "response_time": "2.75",
    "context": "{\"function_name\": \"two_unique_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 573,
    "solution": "def unique_product(list_data):\n    # Use a set to store unique numbers\n    unique_numbers = set(list_data)\n    \n    # Initialize the product to 1\n    product = 1\n    \n    # Calculate the product of unique numbers\n    for num in unique_numbers:\n        product *= num\n    \n    return product",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to calculate the product of the unique numbers in a given list.\n\n### Signature\ndef unique_product(list_data):",
    "timestamp": "2025-10-17T18:46:10.665470",
    "response_time": "1.39",
    "context": "{\"function_name\": \"unique_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 574,
    "solution": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder's base.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The surface area of the cylinder.\n    \"\"\"\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n    \n    # Surface area formula: 2\u03c0r\u00b2 + 2\u03c0rh\n    base_area = 2 * math.pi * r**2\n    lateral_area = 2 * math.pi * r * h\n    return base_area + lateral_area",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cylinder.\n\n### Signature\ndef surfacearea_cylinder(r,h):",
    "timestamp": "2025-10-17T18:46:13.140807",
    "response_time": "2.47",
    "context": "{\"function_name\": \"surfacearea_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 576,
    "solution": "def is_Sub_Array(A, B):\n    \"\"\"\n    Function to check whether list A is a sublist of list B.\n    \n    Parameters:\n    A (list): The list to check if it is a sublist.\n    B (list): The list in which to check for the sublist.\n    \n    Returns:\n    bool: True if A is a sublist of B, False otherwise.\n    \"\"\"\n    # Check if A is empty, an empty list is always a sublist\n    if not A:\n        return True\n    \n    # Check if A is a sublist of B\n    for i in range(len(B) - len(A) + 1):\n        if B[i:i+len(A)] == A:\n            return True\n    \n    return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether a list is sublist of another or not.\n\n### Signature\ndef is_Sub_Array(A,B):",
    "timestamp": "2025-10-17T18:46:18.547849",
    "response_time": "5.40",
    "context": "{\"function_name\": \"is_Sub_Array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 577,
    "solution": "def last_Digit_Factorial(n):\n    # If n is 0 or 1, the factorial is 1, and the last digit is also 1\n    if n == 0 or n == 1:\n        return 1\n    \n    # For n >= 5, the factorial will always have a trailing zero\n    if n >= 5:\n        return 0\n    \n    # Calculate factorial for n < 5 and return the last digit\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    \n    return factorial % 10",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the last digit in factorial of a given number.\n\n### Signature\ndef last_Digit_Factorial(n):",
    "timestamp": "2025-10-17T18:46:21.916507",
    "response_time": "3.37",
    "context": "{\"function_name\": \"last_Digit_Factorial\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 578,
    "solution": "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for a, b, c in zip(list1, list2, list3):\n        interleaved_list.extend([a, b, c])\n    return interleaved_list",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to interleave 3 lists of the same length into a single flat list.\n\n### Signature\ndef interleave_lists(list1,list2,list3):",
    "timestamp": "2025-10-17T18:46:23.598281",
    "response_time": "1.68",
    "context": "{\"function_name\": \"interleave_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 579,
    "solution": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a tuple containing elements\n    that are dissimilar (i.e., elements that are in one tuple but not in the other).\n    \"\"\"\n    # Convert tuples to sets to find the symmetric difference\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find dissimilar elements using symmetric difference\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    # Convert the result back to a tuple\n    return tuple(dissimilar_elements)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the dissimilar elements in the given two tuples.\n\n### Signature\ndef find_dissimilar(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:46:26.058647",
    "response_time": "2.45",
    "context": "{\"function_name\": \"find_dissimilar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 580,
    "solution": "def extract_even(test_tuple, even_fnc):\n    def is_even(value):\n        # Check if the value is an integer and even\n        return isinstance(value, int) and even_fnc(value)\n    \n    def filter_tuple(tup):\n        # Recursively filter the tuple\n        filtered = []\n        for item in tup:\n            if isinstance(item, tuple):\n                # If the item is a tuple, recursively filter it\n                filtered_item = filter_tuple(item)\n                if filtered_item:  # Only add non-empty tuples\n                    filtered.append(tuple(filtered_item))\n            elif is_even(item):\n                # Add even integers\n                filtered.append(item)\n        return filtered\n    \n    # Filter the input tuple and return as a tuple\n    return tuple(filter_tuple(test_tuple))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove uneven elements in the nested mixed tuple.\n\n### Signature\ndef even_ele(test_tuple, even_fnc):",
    "timestamp": "2025-10-17T18:46:29.919640",
    "response_time": "3.86",
    "context": "{\"function_name\": \"extract_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 581,
    "solution": "import math\n\ndef surface_Area(b, s):\n    # Calculate the slant height using the Pythagorean theorem\n    slant_height = math.sqrt((b / 2) ** 2 + s ** 2)\n    \n    # Calculate the lateral surface area (4 triangles)\n    lateral_area = 2 * b * slant_height\n    \n    # Calculate the base area (square)\n    base_area = b ** 2\n    \n    # Total surface area is the sum of lateral area and base area\n    total_surface_area = lateral_area + base_area\n    \n    return total_surface_area",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\n### Signature\ndef surface_Area(b,s):",
    "timestamp": "2025-10-17T18:46:32.556673",
    "response_time": "2.63",
    "context": "{\"function_name\": \"surface_Area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 582,
    "solution": "def my_dict(dict1):\n    \"\"\"\n    This function checks if a dictionary is empty.\n    \n    Parameters:\n    dict1 (dict): The dictionary to check.\n    \n    Returns:\n    bool: True if the dictionary is empty, False otherwise.\n    \"\"\"\n    return len(dict1) == 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if a dictionary is empty\n\n### Signature\ndef my_dict(dict1):",
    "timestamp": "2025-10-17T18:46:34.291955",
    "response_time": "1.73",
    "context": "{\"function_name\": \"my_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 583,
    "solution": "def catalan_number(num):\n    if num < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Base case\n    if num == 0 or num == 1:\n        return 1\n    \n    # Recursive calculation of nth Catalan number\n    catalan = [0] * (num + 1)\n    catalan[0], catalan[1] = 1, 1\n    \n    for i in range(2, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[num]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function which returns nth catalan number.\n\n### Signature\ndef catalan_number(num):",
    "timestamp": "2025-10-17T18:46:37.825587",
    "response_time": "3.53",
    "context": "{\"function_name\": \"catalan_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 584,
    "solution": "import re\n\ndef find_adverbs(text):\n    # Use regex to find words ending with 'ly'\n    match = re.search(r'\\b\\w+ly\\b', text)\n    if match:\n        # Return the first adverb and its start and end positions\n        return match.group(), match.start(), match.end()\n    else:\n        # Return None if no adverb is found\n        return None",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n\n### Signature\ndef find_adverbs(text):",
    "timestamp": "2025-10-17T18:46:40.843589",
    "response_time": "3.01",
    "context": "{\"function_name\": \"find_adverbs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 585,
    "solution": "def expensive_items(items, n):\n    \"\"\"\n    Finds the n most expensive items in a given dataset.\n\n    Args:\n    items (list of tuples): A list where each tuple contains the name of the item and its price.\n                            Example: [(\"item1\", 10), (\"item2\", 20), (\"item3\", 15)]\n    n (int): The number of most expensive items to return.\n\n    Returns:\n    list of tuples: A list of the n most expensive items sorted by price in descending order.\n                    If two items have the same price, their order in the result is undefined.\n    \"\"\"\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    \n    # Return the top n items\n    return sorted_items[:n]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the n most expensive items in a given dataset.\n\n### Signature\ndef expensive_items(items,n):",
    "timestamp": "2025-10-17T18:46:43.734895",
    "response_time": "2.89",
    "context": "{\"function_name\": \"expensive_items\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 586,
    "solution": "def split_Arr(l, n):\n    # Ensure n is within the bounds of the list\n    if n < 0 or n > len(l):\n        raise ValueError(\"n must be within the range of the list length\")\n    \n    # Split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    \n    # Combine the second part with the first part at the end\n    return second_part + first_part",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n\n### Signature\ndef split_Arr(l, n):",
    "timestamp": "2025-10-17T18:46:45.971327",
    "response_time": "2.23",
    "context": "{\"function_name\": \"split_Arr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 587,
    "solution": "def list_tuple(listx):\n    \"\"\"\n    Converts a list to a tuple.\n\n    Args:\n    listx (list): The list to be converted.\n\n    Returns:\n    tuple: The converted tuple.\n    \"\"\"\n    return tuple(listx)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a list to a tuple.\n\n### Signature\ndef list_tuple(listx):",
    "timestamp": "2025-10-17T18:46:48.856185",
    "response_time": "2.88",
    "context": "{\"function_name\": \"list_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 588,
    "solution": "def big_diff(nums):\n    if not nums:  # Check if the list is empty\n        return 0\n    return max(nums) - min(nums)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the difference between largest and smallest value in a given list.\n\n### Signature\ndef big_diff(nums):",
    "timestamp": "2025-10-17T18:46:50.695153",
    "response_time": "1.83",
    "context": "{\"function_name\": \"big_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 589,
    "solution": "import math\n\ndef perfect_squares(a, b):\n    \"\"\"\n    This function finds all perfect squares between two given numbers a and b (inclusive).\n    \n    Args:\n    a (int): The lower bound of the range.\n    b (int): The upper bound of the range.\n    \n    Returns:\n    list: A list of perfect squares between a and b.\n    \"\"\"\n    if a > b:\n        return []\n    \n    # Find the smallest integer whose square is >= a\n    start = math.ceil(math.sqrt(a))\n    # Find the largest integer whose square is <= b\n    end = math.floor(math.sqrt(b))\n    \n    # Generate the list of perfect squares\n    return [i**2 for i in range(start, end + 1)]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find perfect squares between two given numbers.\n\n### Signature\ndef perfect_squares(a, b):",
    "timestamp": "2025-10-17T18:46:53.536054",
    "response_time": "2.84",
    "context": "{\"function_name\": \"perfect_squares\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 590,
    "solution": "import math\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius or distance from the origin.\n    theta (float): The angle in radians.\n\n    Returns:\n    tuple: A tuple (x, y) representing the rectangular coordinates.\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert polar coordinates to rectangular coordinates.\n\n### Signature\ndef polar_rect(x,y):",
    "timestamp": "2025-10-17T18:46:55.622190",
    "response_time": "2.08",
    "context": "{\"function_name\": \"polar_rect\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 591,
    "solution": "def swap_List(newList):\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList  # No swap needed for lists with less than 2 elements\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last elements in a list.\n\n### Signature\ndef swap_List(newList):",
    "timestamp": "2025-10-17T18:46:59.427805",
    "response_time": "3.80",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 592,
    "solution": "from math import comb\n\ndef sum_Of_product(n, k):\n    \"\"\"\n    Function to find the sum of the product of consecutive binomial coefficients.\n    \"\"\"\n    if n < 0 or k < 0 or k > n:\n        return 0\n    \n    # Calculate the sum of the product of consecutive binomial coefficients\n    total_sum = 0\n    for i in range(k):\n        total_sum += comb(n, i) * comb(n, i + 1)\n    \n    return total_sum",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\n### Signature\ndef binomial_Coeff(n,k):",
    "timestamp": "2025-10-17T18:47:03.706492",
    "response_time": "4.27",
    "context": "{\"function_name\": \"sum_Of_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 593,
    "solution": "def removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Remove leading zeros from each part\n    cleaned_parts = [str(int(part)) for part in parts]\n    # Join the cleaned parts back into an IP address\n    cleaned_ip = '.'.join(cleaned_parts)\n    return cleaned_ip",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove leading zeroes from an ip address.\n\n### Signature\ndef removezero_ip(ip):",
    "timestamp": "2025-10-17T18:47:05.893324",
    "response_time": "2.18",
    "context": "{\"function_name\": \"removezero_ip\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 594,
    "solution": "def diff_even_odd(list1):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        # Break the loop if both are found\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # If either even or odd number is not found, return None\n    if first_even is None or first_odd is None:\n        return None\n    \n    # Return the difference between the first even and first odd numbers\n    return first_even - first_odd",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the difference of the first even and first odd number of a given list.\n\n### Signature\ndef diff_even_odd(list1):",
    "timestamp": "2025-10-17T18:47:08.826595",
    "response_time": "2.93",
    "context": "{\"function_name\": \"diff_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 595,
    "solution": "def min_Swaps(str1, str2):\n    # Check if the two strings have the same length\n    if len(str1) != len(str2):\n        return -1  # Return -1 if lengths are not equal, as conversion is not possible\n\n    # Check if the two strings have the same number of 1s and 0s\n    if str1.count('1') != str2.count('1') or str1.count('0') != str2.count('0'):\n        return -1  # Return -1 if the counts of 1s and 0s are not equal\n\n    # Initialize variables\n    swaps = 0\n    str1_list = list(str1)\n\n    # Iterate through the strings\n    for i in range(len(str1)):\n        if str1_list[i] != str2[i]:\n            # Find the next position where a swap can be made\n            for j in range(i + 1, len(str1)):\n                if str1_list[j] != str2[j] and str1_list[j] == str2[i]:\n                    # Swap the characters\n                    str1_list[i], str1_list[j] = str1_list[j], str1_list[i]\n                    swaps += 1\n                    break\n\n    return swaps",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n### Signature\ndef min_Swaps(str1,str2) :",
    "timestamp": "2025-10-17T18:47:15.279404",
    "response_time": "6.45",
    "context": "{\"function_name\": \"min_Swaps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 596,
    "solution": "import sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the size in bytes of the given tuple.\n\n### Signature\ndef tuple_size(tuple_list):",
    "timestamp": "2025-10-17T18:47:16.267495",
    "response_time": "0.98",
    "context": "{\"function_name\": \"tuple_size\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 597,
    "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the two sorted arrays.\n\n    :param arr1: List[int] - First sorted array\n    :param arr2: List[int] - Second sorted array\n    :param k: int - The kth position (1-based index)\n    :return: int - The kth element in the merged sorted array\n    \"\"\"\n    # Initialize pointers for both arrays\n    i, j = 0, 0\n    # Counter for the merged array position\n    count = 0\n\n    # Loop until we find the kth element\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n        else:\n            count += 1\n            if count == k:\n                return arr2[j]\n            j += 1\n\n    # If one of the arrays is exhausted, continue with the other array\n    while i < len(arr1):\n        count += 1\n        if count == k:\n            return arr1[i]\n        i += 1\n\n    while j < len(arr2):\n        count += 1\n        if count == k:\n            return arr2[j]\n        j += 1\n\n    # If k is out of bounds, return None\n    return None",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find kth element from the given two sorted arrays.\n\n### Signature\ndef find_kth(arr1, arr2, k):",
    "timestamp": "2025-10-17T18:47:22.516674",
    "response_time": "6.24",
    "context": "{\"function_name\": \"find_kth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 598,
    "solution": "def armstrong_number(number):\n    \"\"\"\n    Check if a number is an Armstrong number.\n    \n    An Armstrong number (also known as a narcissistic number) is a number that is equal to the sum of its own digits\n    each raised to the power of the number of digits.\n    \n    Args:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string to easily iterate over its digits\n    digits = str(number)\n    # Calculate the number of digits\n    num_digits = len(digits)\n    # Calculate the sum of each digit raised to the power of the number of digits\n    armstrong_sum = sum(int(digit) ** num_digits for digit in digits)\n    # Check if the sum is equal to the original number\n    return armstrong_sum == number",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given number is armstrong or not.\n\n### Signature\ndef armstrong_number(number):",
    "timestamp": "2025-10-17T18:47:25.791539",
    "response_time": "3.27",
    "context": "{\"function_name\": \"armstrong_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 599,
    "solution": "def sum_average(number):\n    if number < 1:\n        return (0, 0)  # Return (0, 0) for invalid input (e.g., negative or zero)\n    \n    # Calculate the sum of first n natural numbers\n    total_sum = number * (number + 1) // 2\n    \n    # Calculate the average\n    average = total_sum / number\n    \n    return (total_sum, average)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find sum and average of first n natural numbers.\n\n### Signature\ndef sum_average(number):",
    "timestamp": "2025-10-17T18:47:27.982204",
    "response_time": "2.19",
    "context": "{\"function_name\": \"sum_average\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 600,
    "solution": "def is_Even(n):\n    \"\"\"\n    Function to check whether the given number is even or not.\n    \n    Parameters:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return n % 2 == 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given number is even or not.\n\n### Signature\ndef is_Even(n) :",
    "timestamp": "2025-10-17T18:47:29.145715",
    "response_time": "1.16",
    "context": "{\"function_name\": \"is_Even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 602,
    "solution": "def first_repeated_char(str1):\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the first repeated character in a given string.\n\n### Signature\ndef first_repeated_char(str1):",
    "timestamp": "2025-10-17T18:47:30.397303",
    "response_time": "1.25",
    "context": "{\"function_name\": \"first_repeated_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 603,
    "solution": "def get_ludic(n):\n    \"\"\"\n    Function to get all ludic numbers smaller than or equal to a given integer n.\n    \"\"\"\n    if n < 1:\n        return []\n    \n    # Initialize the list of numbers from 1 to n\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    \n    while numbers:\n        # The first number in the list is always a ludic number\n        current_ludic = numbers[0]\n        ludic_numbers.append(current_ludic)\n        \n        # Remove every current_ludic-th number from the list, starting from the current_ludic-th position\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % current_ludic != 0]\n    \n    return ludic_numbers",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\n### Signature\ndef get_ludic(n):",
    "timestamp": "2025-10-17T18:47:35.646748",
    "response_time": "5.25",
    "context": "{\"function_name\": \"get_ludic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 604,
    "solution": "def reverse_words(s):\n    # Split the string into words using spaces as the delimiter\n    words = s.split()\n    # Reverse the list of words\n    reversed_words = words[::-1]\n    # Join the reversed list of words back into a string with spaces\n    return ' '.join(reversed_words)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to reverse words seperated by spaces in a given string.\n\n### Signature\ndef reverse_words(s):",
    "timestamp": "2025-10-17T18:47:36.838630",
    "response_time": "1.19",
    "context": "{\"function_name\": \"reverse_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 605,
    "solution": "def prime_num(num):\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given integer is a prime number.\n\n### Signature\ndef prime_num(num):",
    "timestamp": "2025-10-17T18:47:38.115044",
    "response_time": "1.27",
    "context": "{\"function_name\": \"prime_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 606,
    "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert degrees to radians.\n\n### Signature\ndef radian_degree(degree):",
    "timestamp": "2025-10-17T18:47:38.928230",
    "response_time": "0.81",
    "context": "{\"function_name\": \"radian_degree\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 607,
    "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None, -1, -1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\n### Signature\ndef find_literals(text, pattern):",
    "timestamp": "2025-10-17T18:47:40.143982",
    "response_time": "1.21",
    "context": "{\"function_name\": \"find_literals\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 608,
    "solution": "def bell_Number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Base case: Bell(0, 0) is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # First value in every row is the last value of the previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the entries in the current row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # The nth Bell number is the first value in the nth row\n    return bell[n][0]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find nth bell number.\n\n### Signature\ndef bell_Number(n):",
    "timestamp": "2025-10-17T18:47:43.311390",
    "response_time": "3.16",
    "context": "{\"function_name\": \"bell_Number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 610,
    "solution": "def remove_kth_element(list1, L):\n    \"\"\"\n    Removes the k'th element from the list.\n\n    Parameters:\n    list1 (list): The input list.\n    L (int): The index of the element to remove.\n\n    Returns:\n    list: A new list with the k'th element removed.\n    \"\"\"\n    if L < 0 or L >= len(list1):\n        raise IndexError(\"Index L is out of range for the list.\")\n    \n    return list1[:L] + list1[L+1:]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\n### Signature\ndef remove_kth_element(list1, L):",
    "timestamp": "2025-10-17T18:47:45.308724",
    "response_time": "1.99",
    "context": "{\"function_name\": \"remove_kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 611,
    "solution": "def max_of_nth(test_list, N):\n    # Check if the matrix is empty or N is out of bounds\n    if not test_list or N < 0 or N >= len(test_list[0]):\n        raise ValueError(\"Invalid column index or empty matrix\")\n    \n    # Extract the N'th column and find the maximum value\n    nth_column = [row[N] for row in test_list]\n    return max(nth_column)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\n### Signature\ndef max_of_nth(test_list, N):",
    "timestamp": "2025-10-17T18:47:46.897193",
    "response_time": "1.58",
    "context": "{\"function_name\": \"max_of_nth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 612,
    "solution": "def merge(lst):\n    first_elements = []\n    second_elements = []\n    \n    for sublist in lst:\n        if len(sublist) == 2:  # Ensure the sublist has exactly two elements\n            first_elements.append(sublist[0])\n            second_elements.append(sublist[1])\n    \n    return [first_elements, second_elements]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n### Signature\ndef merge(lst):",
    "timestamp": "2025-10-17T18:47:48.295953",
    "response_time": "1.40",
    "context": "{\"function_name\": \"merge\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 614,
    "solution": "def cummulative_sum(test_list):\n    \"\"\"\n    This function calculates the cumulative sum of all the values present in the given tuple list.\n    \n    :param test_list: List of tuples containing numeric values\n    :return: Cumulative sum of all the values in the tuples\n    \"\"\"\n    # Initialize cumulative sum\n    total_sum = 0\n    \n    # Iterate through the list of tuples\n    for tpl in test_list:\n        # Add all elements of the tuple to the cumulative sum\n        total_sum += sum(tpl)\n    \n    return total_sum",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n### Signature\ndef cummulative_sum(test_list):",
    "timestamp": "2025-10-17T18:47:50.451028",
    "response_time": "2.15",
    "context": "{\"function_name\": \"cummulative_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 615,
    "solution": "def average_tuple(nums):\n    # Calculate the average for each tuple in the input tuple of tuples\n    return [sum(t) / len(t) for t in nums]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\n### Signature\ndef average_tuple(nums):",
    "timestamp": "2025-10-17T18:47:51.888346",
    "response_time": "1.43",
    "context": "{\"function_name\": \"average_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 616,
    "solution": "def tuple_modulo(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\n### Signature\ndef tuple_modulo(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:47:53.284365",
    "response_time": "1.39",
    "context": "{\"function_name\": \"tuple_modulo\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 617,
    "solution": "def min_Jumps(steps, d):\n    \"\"\"\n    Calculate the minimum number of jumps required to reach the point (d, 0) from the origin (0, 0)\n    using jumps of a given length.\n\n    :param steps: Length of each jump\n    :param d: Target x-coordinate\n    :return: Minimum number of jumps required\n    \"\"\"\n    if steps <= 0:\n        raise ValueError(\"Step length must be a positive integer.\")\n    if d < 0:\n        raise ValueError(\"Target distance must be a non-negative integer.\")\n    \n    # Calculate the minimum number of jumps\n    jumps = d // steps\n    if d % steps != 0:\n        jumps += 1\n    \n    return jumps",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n### Signature\ndef min_Jumps(steps, d):",
    "timestamp": "2025-10-17T18:47:56.307481",
    "response_time": "3.02",
    "context": "{\"function_name\": \"min_Jumps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 618,
    "solution": "def div_list(nums1, nums2):\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    result = []\n    for a, b in zip(nums1, nums2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero encountered in the second list.\")\n        result.append(a / b)\n    \n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to divide two lists element wise.\n\n### Signature\ndef div_list(nums1,nums2):",
    "timestamp": "2025-10-17T18:47:57.738938",
    "response_time": "1.43",
    "context": "{\"function_name\": \"div_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 619,
    "solution": "def move_num(test_str):\n    # Separate characters and digits\n    chars = []\n    digits = []\n    \n    for char in test_str:\n        if char.isdigit():\n            digits.append(char)\n        else:\n            chars.append(char)\n    \n    # Combine characters and digits\n    return ''.join(chars) + ''.join(digits)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to move all the numbers to the end of the given string.\n\n### Signature\ndef move_num(test_str):",
    "timestamp": "2025-10-17T18:48:00.468298",
    "response_time": "2.73",
    "context": "{\"function_name\": \"move_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 620,
    "solution": "from collections import defaultdict\n\ndef largest_subset(a):\n    # Sort the array to ensure divisors come before their multiples\n    a.sort()\n    n = len(a)\n    \n    # dp[i] will store the size of the largest subset ending with a[i]\n    dp = [1] * n\n    # To reconstruct the subset, we keep track of the previous index\n    prev = [-1] * n\n    \n    # Variable to track the maximum size and its index\n    max_size = 0\n    max_index = -1\n    \n    # Fill dp array\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:  # Check divisibility\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n        # Update max_size and max_index\n        if dp[i] > max_size:\n            max_size = dp[i]\n            max_index = i\n    \n    # Reconstruct the largest subset\n    subset = []\n    while max_index != -1:\n        subset.append(a[max_index])\n        max_index = prev[max_index]\n    \n    subset.reverse()  # Reverse to get the subset in the correct order\n    return subset",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n### Signature\ndef largest_subset(a):",
    "timestamp": "2025-10-17T18:48:03.897019",
    "response_time": "3.43",
    "context": "{\"function_name\": \"largest_subset\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 622,
    "solution": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Function to find the median of two sorted lists of the same size.\n    \n    Parameters:\n    arr1 (list): First sorted list.\n    arr2 (list): Second sorted list.\n    n (int): Size of each list.\n    \n    Returns:\n    float: Median of the two sorted lists.\n    \"\"\"\n    # Merge the two sorted arrays\n    merged = []\n    i, j = 0, 0\n    \n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    \n    # Append remaining elements from arr1\n    while i < n:\n        merged.append(arr1[i])\n        i += 1\n    \n    # Append remaining elements from arr2\n    while j < n:\n        merged.append(arr2[j])\n        j += 1\n    \n    # Calculate the median\n    total_length = 2 * n\n    mid = total_length // 2\n    \n    if total_length % 2 == 0:\n        # If even, median is the average of the two middle elements\n        return (merged[mid - 1] + merged[mid]) / 2.0\n    else:\n        # If odd, median is the middle element\n        return merged[mid]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the median of two sorted lists of same size.\n\n### Signature\ndef get_median(arr1, arr2, n):",
    "timestamp": "2025-10-17T18:48:07.457316",
    "response_time": "3.56",
    "context": "{\"function_name\": \"get_median\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 623,
    "solution": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n    nums (list): A list of numbers.\n    n (int): The power to which each number in the list should be raised.\n\n    Returns:\n    list: A list containing each number in the input list raised to the n-th power.\n    \"\"\"\n    return [x ** n for x in nums]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to compute the n-th power of each number in a list.\n\n### Signature\ndef nth_nums(nums,n):",
    "timestamp": "2025-10-17T18:48:10.424284",
    "response_time": "2.95",
    "context": "{\"function_name\": \"nth_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 624,
    "solution": "def is_upper(string):\n    \"\"\"\n    Converts the given string to uppercase.\n\n    Args:\n    string (str): The input string to be converted.\n\n    Returns:\n    str: The uppercase version of the input string.\n    \"\"\"\n    return string.upper()",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to convert a given string to uppercase.\n\n### Signature\ndef is_upper(string):",
    "timestamp": "2025-10-17T18:48:11.363234",
    "response_time": "0.93",
    "context": "{\"function_name\": \"is_upper\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 625,
    "solution": "def swap_List(newList):\n    # Check if the list has at least two elements to swap\n    if len(newList) < 2:\n        return newList\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last element in a given list.\n\n### Signature\ndef swap_List(newList):",
    "timestamp": "2025-10-17T18:48:13.012593",
    "response_time": "1.64",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 626,
    "solution": "import math\n\ndef triangle_area(r):\n    # The largest triangle that can be inscribed in a semicircle is a right triangle\n    # with its hypotenuse as the diameter of the semicircle.\n    # The base and height of this triangle will both be equal to the radius of the semicircle.\n    \n    # Base and height of the triangle\n    base = r\n    height = r\n    \n    # Area of the triangle\n    area = 0.5 * base * height\n    return area",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n### Signature\ndef triangle_area(r) :",
    "timestamp": "2025-10-17T18:48:15.326393",
    "response_time": "2.31",
    "context": "{\"function_name\": \"triangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 627,
    "solution": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    # Base case: If the array is empty\n    if start > end:\n        return start\n\n    mid = (start + end) // 2\n\n    # If the mid index matches the value at mid, the missing number is in the right half\n    if array[mid] == mid:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        # Otherwise, the missing number is in the left half\n        return find_First_Missing(array, start, mid - 1)\n\n# Example usage:\n# array = [0, 1, 2, 3, 5, 6]\n# print(find_First_Missing(array))  # Output: 4",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\n### Signature\ndef find_First_Missing(array,start=0,end=None):",
    "timestamp": "2025-10-17T18:48:18.006314",
    "response_time": "2.68",
    "context": "{\"function_name\": \"find_First_Missing\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 628,
    "solution": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to replace all spaces in the given string with '%20'.\n\n### Signature\ndef replace_spaces(string):",
    "timestamp": "2025-10-17T18:48:18.958415",
    "response_time": "0.95",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 629,
    "solution": "def Split(list):\n    # Filter the list to include only even numbers\n    even_numbers = [num for num in list if num % 2 == 0]\n    return even_numbers",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find even numbers from a list of numbers.\n\n### Signature\ndef Split(list):",
    "timestamp": "2025-10-17T18:48:20.109296",
    "response_time": "1.14",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 630,
    "solution": "def get_coordinates(ele, sub=[]):\n    \"\"\"\n    Extract all the adjacent coordinates of the given coordinate tuple.\n\n    Args:\n    ele (tuple): A tuple representing the coordinate (x, y).\n    sub (list): Optional list to store the adjacent coordinates (default is an empty list).\n\n    Returns:\n    list: A list of tuples representing all adjacent coordinates.\n    \"\"\"\n    x, y = ele\n    # Define all possible adjacent moves (up, down, left, right, and diagonals)\n    moves = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]\n    \n    # Calculate adjacent coordinates\n    adjacent_coords = [(x + dx, y + dy) for dx, dy in moves]\n    \n    return adjacent_coords",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n### Signature\ndef adjac(ele, sub = []):",
    "timestamp": "2025-10-17T18:48:22.781121",
    "response_time": "2.67",
    "context": "{\"function_name\": \"get_coordinates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 631,
    "solution": "def replace_spaces(text):\n    # Replace whitespaces with underscores and underscores with whitespaces\n    return text.replace(' ', '_').replace('_', ' ', 1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\n### Signature\ndef replace_spaces(text):",
    "timestamp": "2025-10-17T18:48:24.771636",
    "response_time": "1.99",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 632,
    "solution": "def move_zero(num_list):\n    \"\"\"\n    Moves all zeroes in the given list to the end while maintaining the order of non-zero elements.\n\n    :param num_list: List of integers\n    :return: List with all zeroes moved to the end\n    \"\"\"\n    # Initialize a list to store non-zero elements\n    non_zero_elements = [num for num in num_list if num != 0]\n    \n    # Count the number of zeroes in the list\n    zero_count = num_list.count(0)\n    \n    # Append the zeroes to the end of the non-zero elements\n    return non_zero_elements + [0] * zero_count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to move all zeroes to the end of the given list.\n\n### Signature\ndef move_zero(num_list):",
    "timestamp": "2025-10-17T18:48:26.702198",
    "response_time": "1.93",
    "context": "{\"function_name\": \"move_zero\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 633,
    "solution": "def pair_xor_Sum(arr, n):\n    # Initialize result\n    result = 0\n    \n    # Iterate over all bits (assuming 32-bit integers)\n    for i in range(32):\n        # Count of numbers with i-th bit set\n        count_set = 0\n        \n        for num in arr:\n            if num & (1 << i):\n                count_set += 1\n        \n        # Count of numbers with i-th bit not set\n        count_unset = n - count_set\n        \n        # Each pair contributes 2^i to the XOR sum if one number has the i-th bit set and the other does not\n        result += (1 << i) * count_set * count_unset\n    \n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\n### Signature\ndef pair_xor_Sum(arr,n) :",
    "timestamp": "2025-10-17T18:48:31.120411",
    "response_time": "4.41",
    "context": "{\"function_name\": \"pair_xor_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 635,
    "solution": "def heap_sort(iterable):\n    import heapq\n\n    # Convert the iterable into a list\n    lst = list(iterable)\n    \n    # Create a min-heap from the list\n    heapq.heapify(lst)\n    \n    # Extract elements from the heap in sorted order\n    sorted_list = [heapq.heappop(lst) for _ in range(len(lst))]\n    \n    return sorted_list",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort the given list.\n\n### Signature\ndef heap_sort(iterable):",
    "timestamp": "2025-10-17T18:48:35.462238",
    "response_time": "4.34",
    "context": "{\"function_name\": \"heap_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 637,
    "solution": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    \n    Parameters:\n    actual_cost (float): The actual cost of the item.\n    sale_amount (float): The sale amount of the item.\n    \n    Returns:\n    bool: True if there is no profit and no loss, False otherwise.\n    \"\"\"\n    return actual_cost == sale_amount",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given amount has no profit and no loss\n\n### Signature\ndef noprofit_noloss(actual_cost,sale_amount):",
    "timestamp": "2025-10-17T18:48:37.303376",
    "response_time": "1.84",
    "context": "{\"function_name\": \"noprofit_noloss\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 638,
    "solution": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer.\n    \n    Parameters:\n    v (float): Wind velocity in km/h\n    t (float): Temperature in Celsius\n    \n    Returns:\n    int: Wind chill index rounded to the next integer\n    \"\"\"\n    if v < 4.8 or t > 10:\n        # Wind chill formula is not applicable for wind speeds less than 4.8 km/h or temperatures above 10\u00b0C\n        return round(t)\n    \n    # Convert wind velocity from km/h to m/s\n    v_m_s = v / 3.6\n    \n    # Wind chill formula\n    wci = 13.12 + 0.6215 * t - 11.37 * (v_m_s ** 0.16) + 0.3965 * t * (v_m_s ** 0.16)\n    \n    # Return the wind chill index rounded to the next integer\n    return math.ceil(wci)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n### Signature\ndef wind_chill(v,t):",
    "timestamp": "2025-10-17T18:48:41.069583",
    "response_time": "3.76",
    "context": "{\"function_name\": \"wind_chill\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 639,
    "solution": "def sample_nam(sample_names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    # Calculate the sum of the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n### Signature\ndef sample_nam(sample_names):",
    "timestamp": "2025-10-17T18:48:43.733396",
    "response_time": "2.66",
    "context": "{\"function_name\": \"sample_nam\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 640,
    "solution": "def remove_parenthesis(items):\n    result = []\n    for item in items:\n        new_item = \"\"\n        skip = 0\n        for char in item:\n            if char == '(':\n                skip += 1\n            elif char == ')':\n                if skip > 0:\n                    skip -= 1\n            elif skip == 0:\n                new_item += char\n        result.append(new_item)\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n\n### Signature\ndef remove_parenthesis(items):",
    "timestamp": "2025-10-17T18:48:45.787388",
    "response_time": "2.05",
    "context": "{\"function_name\": \"remove_parenthesis\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 641,
    "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n    A nonagonal number is a figurate number that extends the concept of triangular and square numbers to the nonagon (a nine-sided polygon).\n    The formula for the nth nonagonal number is:\n        N(n) = n * (7n - 5) / 2\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Calculate the nth nonagonal number using the formula\n    nonagonal_number = n * (7 * n - 5) // 2\n    return nonagonal_number",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth nonagonal number.\n\n### Signature\ndef is_nonagonal(n):",
    "timestamp": "2025-10-17T18:48:48.589969",
    "response_time": "2.80",
    "context": "{\"function_name\": \"is_nonagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 643,
    "solution": "def text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if the string contains the letter 'z', \n    except at the start and end of the word.\n    \"\"\"\n    # Check if the string is empty or too short to have 'z' in the middle\n    if len(text) <= 2:\n        return False\n    \n    # Check for 'z' in the middle of the string (excluding first and last characters)\n    return 'z' in text[1:-1]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\n### Signature\ndef text_match_wordz_middle(text):",
    "timestamp": "2025-10-17T18:48:52.942057",
    "response_time": "4.35",
    "context": "{\"function_name\": \"text_match_wordz_middle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 644,
    "solution": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Reverses the elements of the array up to the given position k (inclusive).\n    \n    Parameters:\n    input (list): The array to be reversed.\n    k (int): The position up to which the array should be reversed (0-based index).\n    \n    Returns:\n    list: The array with elements reversed up to position k.\n    \"\"\"\n    if not isinstance(input, list) or not isinstance(k, int):\n        raise ValueError(\"Input must be a list and k must be an integer.\")\n    \n    if k < 0 or k >= len(input):\n        raise ValueError(\"k must be within the range of the array indices.\")\n    \n    # Reverse the array up to position k\n    return input[:k+1][::-1] + input[k+1:]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to reverse an array upto a given position.\n\n### Signature\ndef reverse_Array_Upto_K(input, k):",
    "timestamp": "2025-10-17T18:48:55.353602",
    "response_time": "2.41",
    "context": "{\"function_name\": \"reverse_Array_Upto_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 720,
    "solution": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Adds a dictionary to the given tuple and returns the resulting tuple.\n\n    Parameters:\n    test_tup (tuple): The original tuple.\n    test_dict (dict): The dictionary to add to the tuple.\n\n    Returns:\n    tuple: A new tuple with the dictionary added.\n    \"\"\"\n    # Convert the tuple to a list, append the dictionary, and convert back to a tuple\n    return test_tup + (test_dict,)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\n### Signature\ndef add_dict_to_tuple(test_tup, test_dict):",
    "timestamp": "2025-10-17T18:48:57.994771",
    "response_time": "2.64",
    "context": "{\"function_name\": \"add_dict_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 721,
    "solution": "def maxAverageOfPath(cost):\n    n = len(cost)\n    # Create a dp table to store the maximum sum for each cell\n    dp = [[0] * n for _ in range(n)]\n    \n    # Initialize the top-left cell\n    dp[0][0] = cost[0][0]\n    \n    # Fill the first row\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    \n    # Fill the first column\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    \n    # Fill the rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    \n    # The maximum sum is stored in the bottom-right cell\n    max_sum = dp[n - 1][n - 1]\n    \n    # The number of cells in the path is 2n - 1 (n rows + n columns - 1 overlap)\n    num_cells = 2 * n - 1\n    \n    # Calculate the maximum average\n    max_average = max_sum / num_cells\n    \n    return max_average",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n### Signature\ndef maxAverageOfPath(cost):",
    "timestamp": "2025-10-17T18:49:02.091268",
    "response_time": "4.09",
    "context": "{\"function_name\": \"maxAverageOfPath\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 722,
    "solution": "def filter_data(students, h, w):\n    \"\"\"\n    Filters students based on minimum height and weight criteria.\n\n    Args:\n    students (dict): A dictionary where keys are student names and values are tuples of (height, weight).\n    h (float): Minimum height.\n    w (float): Minimum weight.\n\n    Returns:\n    dict: A dictionary of students who meet the height and weight criteria.\n    \"\"\"\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\n### Signature\ndef filter_data(students,h,w):",
    "timestamp": "2025-10-17T18:49:04.145209",
    "response_time": "2.05",
    "context": "{\"function_name\": \"filter_data\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 723,
    "solution": "def count_same_pair(nums1, nums2):\n    # Ensure both lists are of the same length\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    # Count indices where the values in both lists are the same\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    \n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\n### Signature\ndef count_same_pair(nums1, nums2):",
    "timestamp": "2025-10-17T18:49:05.925901",
    "response_time": "1.78",
    "context": "{\"function_name\": \"count_same_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 724,
    "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string, iterate over each character, convert back to integer, and sum them\n    digit_sum = sum(int(digit) for digit in str(result))\n    \n    return digit_sum",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\n### Signature\ndef power_base_sum(base, power):",
    "timestamp": "2025-10-17T18:49:07.725954",
    "response_time": "1.80",
    "context": "{\"function_name\": \"power_base_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 725,
    "solution": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Extracts all values between quotation marks in the given string.\n\n    Args:\n    text1 (str): The input string.\n\n    Returns:\n    list: A list of strings found between quotation marks.\n    \"\"\"\n    return re.findall(r'\"(.*?)\"', text1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks \" \" of the given string.\n\n### Signature\ndef extract_quotation(text1):",
    "timestamp": "2025-10-17T18:49:09.386539",
    "response_time": "1.66",
    "context": "{\"function_name\": \"extract_quotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 726,
    "solution": "def multiply_elements(test_tup):\n    return tuple(test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1))\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n### Signature\ndef multiply_elements(test_tup):",
    "timestamp": "2025-10-17T18:49:10.568937",
    "response_time": "1.18",
    "context": "{\"function_name\": \"multiply_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 728,
    "solution": "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n### Signature\ndef sum_list(lst1,lst2):",
    "timestamp": "2025-10-17T18:49:11.754601",
    "response_time": "1.18",
    "context": "{\"function_name\": \"sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 730,
    "solution": "def consecutive_duplicates(nums):\n    result = []\n    for i, num in enumerate(nums):\n        if i == 0 or num != nums[i - 1]:\n            result.append(num)\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove consecutive duplicates of a given list.\n\n### Signature\ndef consecutive_duplicates(nums):",
    "timestamp": "2025-10-17T18:49:13.137012",
    "response_time": "1.38",
    "context": "{\"function_name\": \"consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 731,
    "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone given its radius and height.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n    # Calculate the slant height of the cone\n    slant_height = math.sqrt(r**2 + h**2)\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * slant_height\n    \n    return lateral_surface_area",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\n### Signature\ndef lateralsurface_cone(r,h):",
    "timestamp": "2025-10-17T18:49:15.770775",
    "response_time": "2.63",
    "context": "{\"function_name\": \"lateralsurface_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 732,
    "solution": "def replace_specialchar(text):\n    # Replace spaces, commas, and dots with a colon\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\n### Signature\ndef replace_specialchar(text):",
    "timestamp": "2025-10-17T18:49:16.861030",
    "response_time": "1.09",
    "context": "{\"function_name\": \"replace_specialchar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 733,
    "solution": "def find_first_occurrence(A, x):\n    \"\"\"\n    Finds the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    A (list): A sorted list of integers.\n    x (int): The number to find.\n\n    Returns:\n    int: The index of the first occurrence of x in A, or -1 if x is not in A.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1  # Continue searching in the left half for the first occurrence\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\n### Signature\ndef find_first_occurrence(A, x):",
    "timestamp": "2025-10-17T18:49:19.492925",
    "response_time": "2.63",
    "context": "{\"function_name\": \"find_first_occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 734,
    "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n\n    # Iterate through each element of the array\n    for i in range(n):\n        # Calculate the contribution of arr[i] to the sum of products\n        # arr[i] is part of (i + 1) subarrays starting from the left\n        # and (n - i) subarrays ending at the right\n        contribution = arr[i] * (i + 1) * (n - i)\n        result += contribution\n\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\n### Signature\ndef sum_Of_Subarray_Prod(arr):",
    "timestamp": "2025-10-17T18:49:22.210662",
    "response_time": "2.71",
    "context": "{\"function_name\": \"sum_Of_Subarray_Prod\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 735,
    "solution": "def toggle_middle_bits(n):\n    # Convert the number to its binary representation\n    binary = bin(n)[2:]  # Remove the '0b' prefix\n    \n    # If the binary representation has less than 3 bits, return the number as is\n    if len(binary) <= 2:\n        return n\n    \n    # Extract the first and last bits\n    first_bit = binary[0]\n    last_bit = binary[-1]\n    \n    # Toggle the middle bits\n    middle_bits = ''.join('1' if bit == '0' else '0' for bit in binary[1:-1])\n    \n    # Reconstruct the binary string with the toggled middle bits\n    toggled_binary = first_bit + middle_bits + last_bit\n    \n    # Convert the binary string back to an integer\n    return int(toggled_binary, 2)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\n### Signature\ndef set_middle_bits(n):",
    "timestamp": "2025-10-17T18:49:24.973077",
    "response_time": "2.76",
    "context": "{\"function_name\": \"toggle_middle_bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 736,
    "solution": "from bisect import bisect_left\n\ndef left_insertion(a, x):\n    \"\"\"\n    Locate the leftmost insertion point for a specified value in sorted order.\n    \n    Parameters:\n    a (list): A sorted list of elements.\n    x (any): The value to find the leftmost insertion point for.\n    \n    Returns:\n    int: The index where the value x should be inserted to maintain sorted order.\n    \"\"\"\n    return bisect_left(a, x)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\n### Signature\ndef left_insertion(a, x):",
    "timestamp": "2025-10-17T18:49:26.798870",
    "response_time": "1.82",
    "context": "{\"function_name\": \"left_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 737,
    "solution": "import re\n\ndef check_str(string):\n    # Define a regex pattern to check if the string starts with a vowel (case insensitive)\n    pattern = r'^[aeiouAEIOU]'\n    # Use re.match to check if the string matches the pattern\n    return bool(re.match(pattern, string))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\n### Signature\ndef check_str(string):",
    "timestamp": "2025-10-17T18:49:28.783468",
    "response_time": "1.98",
    "context": "{\"function_name\": \"check_str\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 738,
    "solution": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1 using recursion.\n    The geometric sum is defined as: 1 + 1/2 + 1/4 + ... + 1/(2^(n-1)).\n    \n    :param n: The number of terms in the geometric series.\n    :return: The geometric sum of n-1.\n    \"\"\"\n    if n < 1:\n        return 0\n    return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\n### Signature\ndef geometric_sum(n):",
    "timestamp": "2025-10-17T18:49:31.334316",
    "response_time": "2.55",
    "context": "{\"function_name\": \"geometric_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 739,
    "solution": "import math\n\ndef find_Index(n):\n    # A triangular number T(k) is given by the formula T(k) = k * (k + 1) / 2\n    # We need to find the smallest k such that T(k) has n digits.\n    # This means T(k) >= 10^(n-1)\n    \n    # Rearrange the formula for T(k) to find k:\n    # k * (k + 1) / 2 >= 10^(n-1)\n    # k^2 + k - 2 * 10^(n-1) >= 0\n    \n    # Solve the quadratic equation k^2 + k - 2 * 10^(n-1) = 0\n    # Using the quadratic formula: k = (-b + sqrt(b^2 - 4ac)) / 2a\n    # Here, a = 1, b = 1, c = -2 * 10^(n-1)\n    \n    c = -2 * 10**(n-1)\n    discriminant = 1 - 4 * 1 * c  # b^2 - 4ac\n    \n    # Calculate the positive root of the quadratic equation\n    k = (-1 + math.sqrt(discriminant)) / 2\n    \n    # Since k must be an integer, take the ceiling of k\n    k = math.ceil(k)\n    \n    return k",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\n### Signature\ndef find_Index(n):",
    "timestamp": "2025-10-17T18:49:35.473448",
    "response_time": "4.13",
    "context": "{\"function_name\": \"find_Index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 740,
    "solution": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n    \n    Parameters:\n    test_tup (tuple): A tuple containing elements to be converted into a dictionary.\n    \n    Returns:\n    dict: A dictionary where adjacent elements of the tuple are key-value pairs.\n    \"\"\"\n    # Ensure the tuple has an even number of elements\n    if len(test_tup) % 2 != 0:\n        raise ValueError(\"The tuple must have an even number of elements to form key-value pairs.\")\n    \n    # Use dictionary comprehension to create key-value pairs from adjacent elements\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\n### Signature\ndef tuple_to_dict(test_tup):",
    "timestamp": "2025-10-17T18:49:38.431825",
    "response_time": "2.95",
    "context": "{\"function_name\": \"tuple_to_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 741,
    "solution": "def all_Characters_Same(s):\n    if not s:  # Check for empty string\n        return False\n    return all(char == s[0] for char in s)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether all the characters are same or not.\n\n### Signature\ndef all_Characters_Same(s) :",
    "timestamp": "2025-10-17T18:49:39.829919",
    "response_time": "1.39",
    "context": "{\"function_name\": \"all_Characters_Same\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 742,
    "solution": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given the length of its side.\n    \n    Parameters:\n    side (float): The length of a side of the tetrahedron.\n    \n    Returns:\n    float: The surface area of the tetrahedron.\n    \"\"\"\n    if side <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    \n    # Surface area of a regular tetrahedron = sqrt(3) * side^2\n    surface_area = math.sqrt(3) * (side ** 2)\n    return surface_area",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to caluclate the area of a tetrahedron.\n\n### Signature\ndef area_tetrahedron(side):",
    "timestamp": "2025-10-17T18:49:42.278756",
    "response_time": "2.44",
    "context": "{\"function_name\": \"area_tetrahedron\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 743,
    "solution": "def rotate_right(lst, m):\n    \"\"\"\n    Rotates a given list to the right by m positions.\n\n    Parameters:\n    lst (list): The list to be rotated.\n    m (int): The number of positions to rotate the list.\n\n    Returns:\n    list: The rotated list.\n    \"\"\"\n    if not lst:  # If the list is empty, return it as is\n        return lst\n    \n    m = m % len(lst)  # Handle cases where m is greater than the length of the list\n    return lst[-m:] + lst[:-m]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\n### Signature\ndef rotate_right(list, m):",
    "timestamp": "2025-10-17T18:49:45.155952",
    "response_time": "2.87",
    "context": "{\"function_name\": \"rotate_right\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 744,
    "solution": "def check_none(test_tup):\n    \"\"\"\n    This function checks if the given tuple has any None value or not.\n    \n    Parameters:\n    test_tup (tuple): The tuple to check for None values.\n    \n    Returns:\n    bool: True if the tuple contains any None value, False otherwise.\n    \"\"\"\n    return any(item is None for item in test_tup)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given tuple has any none value or not.\n\n### Signature\ndef check_none(test_tup):",
    "timestamp": "2025-10-17T18:49:47.135695",
    "response_time": "1.97",
    "context": "{\"function_name\": \"check_none\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 745,
    "solution": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = [int(d) for d in str(num) if d != '0']  # Exclude '0' to avoid division by zero\n        return all(num % d == 0 for d in digits)\n    \n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\n### Signature\ndef divisible_by_digits(startnum, endnum):",
    "timestamp": "2025-10-17T18:49:49.055367",
    "response_time": "1.91",
    "context": "{\"function_name\": \"divisible_by_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 746,
    "solution": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    return (a / 360) * math.pi * r**2",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\n### Signature\ndef sector_area(r,a):",
    "timestamp": "2025-10-17T18:49:50.487933",
    "response_time": "1.43",
    "context": "{\"function_name\": \"sector_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 747,
    "solution": "def lcs_of_three(X, Y, Z):\n    # Get the lengths of the three strings\n    m, n, o = len(X), len(Y), len(Z)\n    \n    # Create a 3D DP array to store lengths of LCS\n    dp = [[[0 for _ in range(o + 1)] for __ in range(n + 1)] for ___ in range(m + 1)]\n    \n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    \n    # The length of the LCS of the three strings is stored in dp[m][n][o]\n    return dp[m][n][o]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n### Signature\ndef lcs_of_three(X, Y, Z):",
    "timestamp": "2025-10-17T18:49:53.963664",
    "response_time": "3.47",
    "context": "{\"function_name\": \"lcs_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 748,
    "solution": "def capital_words_spaces(str1):\n    result = []\n    for char in str1:\n        if char.isupper() and result:\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)\n\n# Example usage:\n# print(capital_words_spaces(\"HelloWorld\"))  # Output: \"Hello World\"\n# print(capital_words_spaces(\"ThisIsATest\"))  # Output: \"This Is A Test\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to put spaces between words starting with capital letters in a given string.\n\n### Signature\ndef capital_words_spaces(str1):",
    "timestamp": "2025-10-17T18:49:55.915996",
    "response_time": "1.95",
    "context": "{\"function_name\": \"capital_words_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 749,
    "solution": "def sort_numeric_strings(nums_str):\n    # Convert strings to integers for sorting, then sort and convert back to strings\n    return sorted(nums_str, key=lambda x: int(x))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n### Signature\ndef sort_numeric_strings(nums_str):",
    "timestamp": "2025-10-17T18:49:57.071090",
    "response_time": "1.15",
    "context": "{\"function_name\": \"sort_numeric_strings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 750,
    "solution": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Parameters:\n    test_list (list): The list to which the tuple will be added.\n    test_tup (tuple): The tuple to add to the list.\n\n    Returns:\n    list: The updated list with the tuple added.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to add the given tuple to the given list.\n\n### Signature\ndef add_tuple(test_list, test_tup):",
    "timestamp": "2025-10-17T18:49:58.713803",
    "response_time": "1.64",
    "context": "{\"function_name\": \"add_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 751,
    "solution": "def check_min_heap(arr, i):\n    \"\"\"\n    Function to check if the given array represents a min heap or not.\n    :param arr: List[int] - The array to check.\n    :param i: int - The current index in the array.\n    :return: bool - True if the array represents a min heap, False otherwise.\n    \"\"\"\n    n = len(arr)\n    \n    # If the current index is a leaf node, return True\n    if i >= n // 2:\n        return True\n    \n    # Get the indices of the left and right children\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # Check if the current node is smaller than its children\n    # and recursively check for the left and right subtrees\n    if (left < n and arr[i] > arr[left]) or (right < n and arr[i] > arr[right]):\n        return False\n    \n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n### Signature\ndef check_min_heap_helper(arr, i):",
    "timestamp": "2025-10-17T18:50:02.396135",
    "response_time": "3.68",
    "context": "{\"function_name\": \"check_min_heap\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 752,
    "solution": "def jacobsthal_num(n):\n    \"\"\"\n    Calculate the nth Jacobsthal number using the recurrence relation:\n    J(n) = J(n-1) + 2 * J(n-2)\n    with base cases:\n    J(0) = 0\n    J(1) = 1\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Jacobsthal numbers\n    prev2 = 0  # J(0)\n    prev1 = 1  # J(1)\n    \n    # Compute Jacobsthal numbers iteratively up to J(n)\n    for _ in range(2, n + 1):\n        current = prev1 + 2 * prev2\n        prev2 = prev1\n        prev1 = current\n    \n    return prev1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\n### Signature\ndef jacobsthal_num(n):",
    "timestamp": "2025-10-17T18:50:05.339277",
    "response_time": "2.94",
    "context": "{\"function_name\": \"jacobsthal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 753,
    "solution": "from heapq import nsmallest\n\ndef min_k(test_list, K):\n    \"\"\"\n    Function to find minimum K records from a tuple list.\n    \n    Parameters:\n    test_list (list): List of tuples where each tuple contains comparable elements.\n    K (int): Number of minimum records to find.\n    \n    Returns:\n    list: List of K minimum tuples from the input list.\n    \"\"\"\n    return nsmallest(K, test_list)\n\n# Example test cases\nif __name__ == \"__main__\":\n    test_list = [(4, 5), (2, 3), (6, 7), (2, 5), (1, 9)]\n    K = 3\n    print(\"The original list is:\", test_list)\n    print(\"The minimum K records are:\", min_k(test_list, K))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n### Signature\ndef min_k(test_list, K):",
    "timestamp": "2025-10-17T18:50:09.490890",
    "response_time": "4.15",
    "context": "{\"function_name\": \"min_k\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 754,
    "solution": "def extract_index_list(l1, l2, l3):\n    # Find the minimum length of the three lists to avoid index out of range errors\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Iterate through the indices up to the minimum length\n    for i in range(min_length):\n        # Check if the elements at the same index in all three lists are equal\n        if l1[i] == l2[i] == l3[i]:\n            # Add the common element to the result list\n            common_elements.append(l1[i])\n    \n    return common_elements",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\n### Signature\ndef extract_index_list(l1, l2, l3):",
    "timestamp": "2025-10-17T18:50:12.170389",
    "response_time": "2.67",
    "context": "{\"function_name\": \"extract_index_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 755,
    "solution": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two distinct numbers.\")\n    \n    # Initialize two variables to track the smallest and second smallest\n    smallest = float('inf')\n    second = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second = smallest\n            smallest = num\n        elif smallest < num < second:\n            second = num\n    \n    if second == float('inf'):\n        raise ValueError(\"List must contain at least two distinct numbers.\")\n    \n    return second",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the second smallest number in a list.\n\n### Signature\ndef second_smallest(numbers):",
    "timestamp": "2025-10-17T18:50:15.184334",
    "response_time": "3.01",
    "context": "{\"function_name\": \"second_smallest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 756,
    "solution": "import re\n\ndef text_match_zero_one(text):\n    # Define the regex pattern for 'a' followed by one or more 'b's\n    pattern = r'ab+'\n    # Use re.fullmatch to check if the entire string matches the pattern\n    if re.fullmatch(pattern, text):\n        return True\n    else:\n        return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\n### Signature\ndef text_match_zero_one(text):",
    "timestamp": "2025-10-17T18:50:17.266966",
    "response_time": "2.08",
    "context": "{\"function_name\": \"text_match_zero_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 757,
    "solution": "def count_reverse_pairs(test_list):\n    # Initialize a set to store unique strings\n    seen = set()\n    # Initialize a counter for reverse pairs\n    count = 0\n    \n    # Iterate through each string in the list\n    for string in test_list:\n        # Check if the reverse of the current string exists in the set\n        if string[::-1] in seen:\n            count += 1\n        # Add the current string to the set\n        seen.add(string)\n    \n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\n### Signature\ndef count_reverse_pairs(test_list):",
    "timestamp": "2025-10-17T18:50:19.580200",
    "response_time": "2.31",
    "context": "{\"function_name\": \"count_reverse_pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 758,
    "solution": "def unique_sublists(list1):\n    from collections import Counter\n    \n    # Convert all sublists to tuples\n    tuple_list = [tuple(sublist) for sublist in list1 if isinstance(sublist, list)]\n    \n    # Count occurrences of each tuple\n    counts = Counter(tuple_list)\n    \n    # Convert Counter to dictionary and return\n    return dict(counts)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n### Signature\ndef unique_sublists(list1):",
    "timestamp": "2025-10-17T18:50:21.135275",
    "response_time": "1.55",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 759,
    "solution": "def is_decimal(num):\n    \"\"\"\n    Check if the given string is a decimal number with a precision of 2.\n    \n    Args:\n    num (str): The string to check.\n    \n    Returns:\n    bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    if not isinstance(num, str):\n        return False\n    \n    # Split the string into integer and fractional parts\n    parts = num.split('.')\n    \n    # Check if there are exactly two parts (integer and fractional)\n    if len(parts) != 2:\n        return False\n    \n    integer_part, fractional_part = parts\n    \n    # Check if the integer part is a valid number (can be empty for cases like \".12\")\n    if integer_part and not integer_part.isdigit() and not (integer_part[0] == '-' and integer_part[1:].isdigit()):\n        return False\n    \n    # Check if the fractional part is exactly 2 digits and is numeric\n    if len(fractional_part) != 2 or not fractional_part.isdigit():\n        return False\n    \n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\n### Signature\ndef is_decimal(num):",
    "timestamp": "2025-10-17T18:50:27.493798",
    "response_time": "6.35",
    "context": "{\"function_name\": \"is_decimal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 760,
    "solution": "def unique_Element(arr):\n    # Check if the set of the array has only one unique element\n    return len(set(arr)) == 1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\n### Signature\ndef unique_Element(arr):",
    "timestamp": "2025-10-17T18:50:28.762948",
    "response_time": "1.26",
    "context": "{\"function_name\": \"unique_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 762,
    "solution": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Function to check if the given month number contains 30 days.\n    \n    Args:\n    monthnum3 (int): The month number (1 to 12).\n    \n    Returns:\n    bool: True if the month has 30 days, False otherwise.\n    \"\"\"\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    months_with_30_days = {4, 6, 9, 11}\n    return monthnum3 in months_with_30_days",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n### Signature\ndef check_monthnumber_number(monthnum3):",
    "timestamp": "2025-10-17T18:50:30.763722",
    "response_time": "1.99",
    "context": "{\"function_name\": \"check_monthnumber_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 763,
    "solution": "def find_min_diff(arr, n):\n    # If there are less than 2 elements, return None as no difference can be calculated\n    if n < 2:\n        return None\n    \n    # Sort the array to bring elements closer to their nearest neighbors\n    arr.sort()\n    \n    # Initialize the minimum difference to a large value\n    min_diff = float('inf')\n    \n    # Iterate through the array and find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\n### Signature\ndef find_min_diff(arr,n):",
    "timestamp": "2025-10-17T18:50:32.874936",
    "response_time": "2.11",
    "context": "{\"function_name\": \"find_min_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 764,
    "solution": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count number of digits in a given string.\n\n### Signature\ndef number_ctr(str):",
    "timestamp": "2025-10-17T18:50:34.066981",
    "response_time": "1.19",
    "context": "{\"function_name\": \"number_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 765,
    "solution": "def is_polite(n):\n    \"\"\"\n    Function to find the nth polite number.\n    A polite number is a number that is not a power of 2.\n    \"\"\"\n    def is_power_of_two(x):\n        # Check if a number is a power of 2\n        return (x & (x - 1)) == 0 and x != 0\n\n    count = 0\n    current = 1\n\n    while True:\n        if not is_power_of_two(current):\n            count += 1\n            if count == n:\n                return current\n        current += 1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\n### Signature\ndef is_polite(n):",
    "timestamp": "2025-10-17T18:50:36.085419",
    "response_time": "2.01",
    "context": "{\"function_name\": \"is_polite\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 766,
    "solution": "def pair_wise(l1):\n    # Return a list of tuples containing consecutive pairs\n    return [(l1[i], l1[i+1]) for i in range(len(l1) - 1)]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to return a list of all pairs of consecutive items in a given list.\n\n### Signature\ndef pair_wise(l1):",
    "timestamp": "2025-10-17T18:50:37.547440",
    "response_time": "1.46",
    "context": "{\"function_name\": \"pair_wise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 767,
    "solution": "def get_pairs_count(arr, sum):\n    # Dictionary to store the frequency of each element\n    freq = {}\n    count = 0\n\n    # Iterate through the array\n    for num in arr:\n        # Calculate the complement that would sum up to the given sum\n        complement = sum - num\n\n        # If the complement exists in the frequency dictionary, add its frequency to the count\n        if complement in freq:\n            count += freq[complement]\n\n        # Update the frequency of the current number in the dictionary\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\n### Signature\ndef get_pairs_count(arr, sum):",
    "timestamp": "2025-10-17T18:50:39.769451",
    "response_time": "2.22",
    "context": "{\"function_name\": \"get_pairs_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 769,
    "solution": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a list containing the elements\n    that are present in the first list but not in the second list.\n    \n    :param li1: List 1\n    :param li2: List 2\n    :return: List of elements in li1 but not in li2\n    \"\"\"\n    return [item for item in li1 if item not in li2]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to get the difference between two lists.\n\n### Signature\ndef Diff(li1,li2):",
    "timestamp": "2025-10-17T18:50:41.541530",
    "response_time": "1.77",
    "context": "{\"function_name\": \"Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 770,
    "solution": "def odd_num_sum(n):\n    # Initialize the sum\n    total_sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(n):\n        # Calculate the odd number\n        odd_number = 2 * i + 1\n        # Add the fourth power of the odd number to the total sum\n        total_sum += odd_number ** 4\n    \n    return total_sum",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\n### Signature\ndef odd_num_sum(n) :",
    "timestamp": "2025-10-17T18:50:43.236228",
    "response_time": "1.69",
    "context": "{\"function_name\": \"odd_num_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 771,
    "solution": "def check_expression(exp):\n    # Stack to keep track of opening brackets\n    stack = []\n    \n    # Dictionary to map closing brackets to their corresponding opening brackets\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    # Iterate through each character in the expression\n    for char in exp:\n        # If the character is an opening bracket, push it onto the stack\n        if char in bracket_map.values():\n            stack.append(char)\n        # If the character is a closing bracket\n        elif char in bracket_map:\n            # Check if the stack is empty or the top of the stack doesn't match the corresponding opening bracket\n            if not stack or stack[-1] != bracket_map[char]:\n                return False\n            # If it matches, pop the top of the stack\n            stack.pop()\n    \n    # If the stack is empty, the expression is balanced\n    return not stack",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\n### Signature\ndef check_expression(exp):",
    "timestamp": "2025-10-17T18:50:45.918901",
    "response_time": "2.68",
    "context": "{\"function_name\": \"check_expression\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 772,
    "solution": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    \n    # Filter out words with length K\n    filtered_words = [word for word in words if len(word) != K]\n    \n    # Join the filtered words back into a string\n    result = ' '.join(filtered_words)\n    \n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove all the words with k length in the given string.\n\n### Signature\ndef remove_length(test_str, K):",
    "timestamp": "2025-10-17T18:50:47.165634",
    "response_time": "1.24",
    "context": "{\"function_name\": \"remove_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 773,
    "solution": "def occurance_substring(text, pattern):\n    if not text or not pattern:\n        return None\n    \n    occurrences = []\n    start = 0\n    \n    while start < len(text):\n        start = text.find(pattern, start)\n        if start == -1:\n            break\n        occurrences.append((start, start + len(pattern) - 1))\n        start += 1  # Move to the next character to find overlapping matches\n    \n    return occurrences if occurrences else None",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n### Signature\ndef occurance_substring(text,pattern):",
    "timestamp": "2025-10-17T18:50:49.681168",
    "response_time": "2.51",
    "context": "{\"function_name\": \"occurance_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 775,
    "solution": "def odd_position(nums):\n    for i in range(1, len(nums), 2):  # Iterate over odd indices\n        if nums[i] % 2 == 0:  # Check if the number at the odd index is even\n            return False\n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\n### Signature\ndef odd_position(nums):",
    "timestamp": "2025-10-17T18:50:51.208799",
    "response_time": "1.52",
    "context": "{\"function_name\": \"odd_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 776,
    "solution": "def count_vowels(test_str):\n    vowels = set(\"aeiouAEIOU\")\n    count = 0\n    \n    for i in range(1, len(test_str) - 1):\n        if test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    \n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\n### Signature\ndef count_vowels(test_str):",
    "timestamp": "2025-10-17T18:50:52.647161",
    "response_time": "1.43",
    "context": "{\"function_name\": \"count_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 777,
    "solution": "def find_sum(arr):\n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Sum up elements that appear only once\n    non_repeated_sum = sum(num for num, count in element_count.items() if count == 1)\n    \n    return non_repeated_sum",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of non-repeated elements in a given list.\n\n### Signature\ndef find_sum(arr):",
    "timestamp": "2025-10-17T18:50:54.689541",
    "response_time": "2.04",
    "context": "{\"function_name\": \"find_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 778,
    "solution": "def pack_consecutive_duplicates(list1):\n    if not list1:\n        return []\n    \n    packed_list = []\n    current_sublist = [list1[0]]\n    \n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_sublist.append(list1[i])\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [list1[i]]\n    \n    packed_list.append(current_sublist)\n    return packed_list",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\n### Signature\ndef pack_consecutive_duplicates(list1):",
    "timestamp": "2025-10-17T18:50:57.772593",
    "response_time": "3.08",
    "context": "{\"function_name\": \"pack_consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 779,
    "solution": "def unique_sublists(list1):\n    from collections import Counter\n    \n    # Filter out only the sublists\n    sublists = [tuple(sublist) for sublist in list1 if isinstance(sublist, list)]\n    \n    # Count occurrences of each sublist\n    sublist_counts = Counter(sublists)\n    \n    # Convert Counter to dictionary and return\n    return dict(sublist_counts)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\n### Signature\ndef unique_sublists(list1):",
    "timestamp": "2025-10-17T18:51:00.262184",
    "response_time": "2.48",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 780,
    "solution": "from itertools import combinations\n\ndef find_combinations(test_list):\n    # Extract all tuples from the list\n    all_tuples = [item for sublist in test_list for item in sublist]\n    \n    # Initialize result list\n    result = []\n    \n    # Iterate over all possible lengths of combinations\n    for r in range(1, len(all_tuples) + 1):\n        # Generate all combinations of length r\n        for comb in combinations(all_tuples, r):\n            # Calculate the sum of the current combination\n            comb_sum = sum(comb)\n            # Append the combination and its sum as a tuple to the result\n            result.append((comb, comb_sum))\n    \n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\n### Signature\ndef find_combinations(test_list):",
    "timestamp": "2025-10-17T18:51:02.445580",
    "response_time": "2.18",
    "context": "{\"function_name\": \"find_combinations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 781,
    "solution": "def count_divisors(n):\n    \"\"\"\n    Function to check whether the count of divisors of a number is even.\n    \n    Parameters:\n    n (int): The number to check divisors for.\n    \n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1  # Count the divisor i\n            if i != n // i:\n                count += 1  # Count the paired divisor n // i\n    \n    return count % 2 == 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\n### Signature\ndef count_divisors(n) :",
    "timestamp": "2025-10-17T18:51:06.007907",
    "response_time": "3.56",
    "context": "{\"function_name\": \"count_divisors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 782,
    "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        # Calculate the number of subarrays in which arr[i] is included\n        # (i + 1) is the number of subarrays starting before or at index i\n        # (n - i) is the number of subarrays ending after or at index i\n        # Total subarrays including arr[i] = (i + 1) * (n - i)\n        total_subarrays = (i + 1) * (n - i)\n        \n        # Only odd-length subarrays contribute to the sum\n        # Count of odd-length subarrays including arr[i]\n        odd_subarrays = (total_subarrays + 1) // 2\n        \n        # Add the contribution of arr[i] to the total sum\n        total_sum += arr[i] * odd_subarrays\n    \n    return total_sum",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\n### Signature\ndef odd_length_sum(arr):",
    "timestamp": "2025-10-17T18:51:09.490637",
    "response_time": "3.48",
    "context": "{\"function_name\": \"odd_length_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 783,
    "solution": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \n    Parameters:\n    r (int): Red component (0-255)\n    g (int): Green component (0-255)\n    b (int): Blue component (0-255)\n    \n    Returns:\n    tuple: (h, s, v) where\n        h (float): Hue (0-360 degrees)\n        s (float): Saturation (0-1)\n        v (float): Value (0-1)\n    \"\"\"\n    # Normalize RGB values to the range [0, 1]\n    r_norm = r / 255.0\n    g_norm = g / 255.0\n    b_norm = b / 255.0\n\n    # Find the maximum and minimum values among r, g, b\n    c_max = max(r_norm, g_norm, b_norm)\n    c_min = min(r_norm, g_norm, b_norm)\n    delta = c_max - c_min\n\n    # Calculate Hue (h)\n    if delta == 0:\n        h = 0\n    elif c_max == r_norm:\n        h = 60 * (((g_norm - b_norm) / delta) % 6)\n    elif c_max == g_norm:\n        h = 60 * (((b_norm - r_norm) / delta) + 2)\n    elif c_max == b_norm:\n        h = 60 * (((r_norm - g_norm) / delta) + 4)\n\n    # Ensure h is non-negative\n    if h < 0:\n        h += 360\n\n    # Calculate Saturation (s)\n    s = 0 if c_max == 0 else (delta / c_max)\n\n    # Calculate Value (v)\n    v = c_max\n\n    return h, s, v",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n### Signature\ndef rgb_to_hsv(r, g, b):",
    "timestamp": "2025-10-17T18:51:15.575398",
    "response_time": "6.08",
    "context": "{\"function_name\": \"rgb_to_hsv\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 784,
    "solution": "def mul_even_odd(list1):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in list1:\n        if first_even is None and num % 2 == 0:  # Check for even number\n            first_even = num\n        if first_odd is None and num % 2 != 0:  # Check for odd number\n            first_odd = num\n        # Break the loop if both even and odd numbers are found\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # If either even or odd number is not found, return None\n    if first_even is None or first_odd is None:\n        return None\n    \n    # Return the product of the first even and odd numbers\n    return first_even * first_odd",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the product of first even and odd number of a given list.\n\n### Signature\ndef mul_even_odd(list1):",
    "timestamp": "2025-10-17T18:51:17.932330",
    "response_time": "2.35",
    "context": "{\"function_name\": \"mul_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 785,
    "solution": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert a tuple string to an integer tuple.\n\n    Args:\n    test_str (str): A string representation of a tuple with integers.\n\n    Returns:\n    tuple: A tuple of integers.\n    \"\"\"\n    # Remove parentheses and split the string by commas\n    elements = test_str.strip(\"()\").split(\",\")\n    # Convert each element to an integer and return as a tuple\n    return tuple(map(int, elements))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert tuple string to integer tuple.\n\n### Signature\ndef tuple_str_int(test_str):",
    "timestamp": "2025-10-17T18:51:20.202468",
    "response_time": "2.26",
    "context": "{\"function_name\": \"tuple_str_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 786,
    "solution": "from bisect import bisect_right\n\ndef right_insertion(a, x):\n    \"\"\"\n    Locate the rightmost insertion point for a specified value in sorted order.\n    \n    Parameters:\n    a (list): A sorted list of elements.\n    x (any): The value to find the right insertion point for.\n    \n    Returns:\n    int: The index where the value x should be inserted to maintain sorted order.\n    \"\"\"\n    return bisect_right(a, x)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\n### Signature\ndef right_insertion(a, x):",
    "timestamp": "2025-10-17T18:51:21.607548",
    "response_time": "1.40",
    "context": "{\"function_name\": \"right_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 787,
    "solution": "import re\n\ndef text_match_three(text):\n    # Define the regex pattern for 'a' followed by exactly three 'b's\n    pattern = r'ab{3}'\n    # Use re.search to find if the pattern exists in the text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by three 'b'.\n\n### Signature\ndef text_match_three(text):",
    "timestamp": "2025-10-17T18:51:23.128213",
    "response_time": "1.51",
    "context": "{\"function_name\": \"text_match_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 788,
    "solution": "def new_tuple(test_list, test_str):\n    \"\"\"\n    This function takes a list and a string as input and returns a new tuple\n    containing the elements of the list followed by the characters of the string.\n    \"\"\"\n    # Convert the string into a tuple of its characters\n    str_tuple = tuple(test_str)\n    \n    # Combine the list and the string tuple into a new tuple\n    result_tuple = tuple(test_list) + str_tuple\n    \n    return result_tuple",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to create a new tuple from the given string and list.\n\n### Signature\ndef new_tuple(test_list, test_str):",
    "timestamp": "2025-10-17T18:51:25.427785",
    "response_time": "2.29",
    "context": "{\"function_name\": \"new_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 790,
    "solution": "def even_position(nums):\n    for i in range(0, len(nums), 2):  # Iterate over even indices\n        if nums[i] % 2 != 0:  # Check if the number at the even index is not even\n            return False\n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether every even index contains even numbers of a given list.\n\n### Signature\ndef even_position(nums):",
    "timestamp": "2025-10-17T18:51:27.100646",
    "response_time": "1.67",
    "context": "{\"function_name\": \"even_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 791,
    "solution": "def remove_nested(test_tup):\n    \"\"\"\n    This function removes all nested tuples from the given tuple.\n    \n    Parameters:\n    test_tup (tuple): The input tuple which may contain nested tuples.\n    \n    Returns:\n    tuple: A tuple with all nested tuples removed.\n    \"\"\"\n    # Filter out elements that are tuples\n    return tuple(item for item in test_tup if not isinstance(item, tuple))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove tuples from the given tuple.\n\n### Signature\ndef remove_nested(test_tup):",
    "timestamp": "2025-10-17T18:51:28.859454",
    "response_time": "1.75",
    "context": "{\"function_name\": \"remove_nested\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 792,
    "solution": "def count_list(input_list):\n    \"\"\"\n    This function counts the number of lists within the given input list.\n    \n    :param input_list: A list that may contain other lists\n    :return: The count of lists within the input list\n    \"\"\"\n    if not isinstance(input_list, list):\n        raise ValueError(\"Input must be a list\")\n    \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of lists in a given number of lists.\n\n### Signature\ndef count_list(input_list):",
    "timestamp": "2025-10-17T18:51:30.842814",
    "response_time": "1.98",
    "context": "{\"function_name\": \"count_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 793,
    "solution": "def last(arr, x):\n    \"\"\"\n    Finds the last position of an element x in a sorted array arr.\n    \n    Parameters:\n    arr (list): A sorted list of elements.\n    x (any): The element to find the last position of.\n    \n    Returns:\n    int: The last position (0-based index) of the element x in the array, or -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1  # Continue searching in the right half\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the last position of an element in a sorted array.\n\n### Signature\ndef last(arr,x):",
    "timestamp": "2025-10-17T18:51:33.512859",
    "response_time": "2.66",
    "context": "{\"function_name\": \"last\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 794,
    "solution": "import re\n\ndef text_starta_endb(text):\n    # Use regex to match a string that has an 'a' followed by anything, ending in 'b'\n    pattern = r'a.*b$'\n    return bool(re.match(pattern, text))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n### Signature\ndef text_starta_endb(text):",
    "timestamp": "2025-10-17T18:51:35.397537",
    "response_time": "1.88",
    "context": "{\"function_name\": \"text_starta_endb\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 796,
    "solution": "def return_sum(dict):\n    return sum(dict.values())",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite function to find the sum of all items in the given dictionary.\n\n### Signature\ndef return_sum(dict):",
    "timestamp": "2025-10-17T18:51:36.391993",
    "response_time": "0.99",
    "context": "{\"function_name\": \"return_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 797,
    "solution": "def sum_in_range(n):\n    l, r = n\n    # Ensure l and r are integers and l <= r\n    if not isinstance(l, int) or not isinstance(r, int) or l > r:\n        raise ValueError(\"Input must be a tuple of two integers (l, r) where l <= r.\")\n    \n    # Calculate the sum of odd numbers in the range [l, r]\n    return sum(i for i in range(l, r + 1) if i % 2 != 0)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\n### Signature\ndef sum_odd(n):",
    "timestamp": "2025-10-17T18:51:38.444995",
    "response_time": "2.05",
    "context": "{\"function_name\": \"sum_in_range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 798,
    "solution": "def _sum(arr):\n    \"\"\"\n    This function takes an array of numbers as input and returns the sum of its elements.\n    \n    :param arr: List of numbers\n    :return: Sum of the numbers in the array\n    \"\"\"\n    return sum(arr)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of an array.\n\n### Signature\ndef _sum(arr):",
    "timestamp": "2025-10-17T18:51:39.995982",
    "response_time": "1.54",
    "context": "{\"function_name\": \"_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 799,
    "solution": "def left_rotate(n, d):\n    # Ensure n is within 32-bit unsigned integer range\n    n = n & 0xFFFFFFFF\n    \n    # Perform left rotation\n    rotated = ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n    \n    return rotated",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n### Signature\ndef left_rotate(n,d):",
    "timestamp": "2025-10-17T18:51:41.308966",
    "response_time": "1.31",
    "context": "{\"function_name\": \"left_rotate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 800,
    "solution": "def remove_all_spaces(text):\n    return text.replace(\" \", \"\")",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from a string.\n\n### Signature\ndef remove_all_spaces(text):",
    "timestamp": "2025-10-17T18:51:42.119023",
    "response_time": "0.80",
    "context": "{\"function_name\": \"remove_all_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 801,
    "solution": "def test_three_equal(x, y, z):\n    \"\"\"\n    Counts the number of equal numbers among three given integers.\n    \n    Args:\n    x (int): First integer.\n    y (int): Second integer.\n    z (int): Third integer.\n    \n    Returns:\n    int: The count of equal numbers.\n    \"\"\"\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of equal numbers from three given integers.\n\n### Signature\ndef test_three_equal(x,y,z):",
    "timestamp": "2025-10-17T18:51:43.949956",
    "response_time": "1.82",
    "context": "{\"function_name\": \"test_three_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 802,
    "solution": "def count_rotation(arr):\n    \"\"\"\n    This function counts the number of rotations required to generate a sorted array.\n    It assumes the array is a rotated sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0  # If the array is empty, no rotations are needed.\n\n    # Find the index of the minimum element in the array\n    # The index of the minimum element is equal to the number of rotations\n    low, high = 0, n - 1\n\n    while low <= high:\n        # If the array is already sorted, the minimum element is at index 0\n        if arr[low] <= arr[high]:\n            return low\n\n        mid = (low + high) // 2\n        next_idx = (mid + 1) % n\n        prev_idx = (mid - 1 + n) % n\n\n        # Check if the mid element is the minimum element\n        if arr[mid] <= arr[next_idx] and arr[mid] <= arr[prev_idx]:\n            return mid\n\n        # Decide whether to go to the left half or the right half\n        if arr[mid] <= arr[high]:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return 0  # Default return, though this line should not be reached for valid input",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n### Signature\ndef count_rotation(arr):",
    "timestamp": "2025-10-17T18:51:50.310923",
    "response_time": "6.35",
    "context": "{\"function_name\": \"count_rotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 803,
    "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    return sqrt_n * sqrt_n == n",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\n### Signature\ndef is_perfect_square(n) :",
    "timestamp": "2025-10-17T18:51:51.436194",
    "response_time": "1.12",
    "context": "{\"function_name\": \"is_perfect_square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 804,
    "solution": "def is_product_even(arr):\n    \"\"\"\n    This function checks whether the product of numbers in a list is even or not.\n    If the product is even, it returns True. Otherwise, it returns False.\n    \"\"\"\n    for num in arr:\n        # If any number in the list is even, the product will be even\n        if num % 2 == 0:\n            return True\n    # If no even number is found, the product is odd\n    return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the product of numbers in a list is even or not.\n\n### Signature\ndef is_product_even(arr):",
    "timestamp": "2025-10-17T18:51:53.357703",
    "response_time": "1.92",
    "context": "{\"function_name\": \"is_product_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 805,
    "solution": "def max_sum_list(lists):\n    if not lists:  # Handle the case where the input list is empty\n        return None\n    \n    # Find the list with the maximum sum\n    return max(lists, key=lambda x: sum(x) if isinstance(x, list) else float('-inf'))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\n### Signature\ndef max_sum_list(lists):",
    "timestamp": "2025-10-17T18:51:55.445077",
    "response_time": "2.08",
    "context": "{\"function_name\": \"max_sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 806,
    "solution": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find maximum run of uppercase characters in the given string.\n\n### Signature\ndef max_run_uppercase(test_str):",
    "timestamp": "2025-10-17T18:51:56.804930",
    "response_time": "1.35",
    "context": "{\"function_name\": \"max_run_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 807,
    "solution": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the first odd number in a given list of numbers.\n\n### Signature\ndef first_odd(nums):",
    "timestamp": "2025-10-17T18:51:57.613627",
    "response_time": "0.80",
    "context": "{\"function_name\": \"first_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 808,
    "solution": "def check_K(test_tup, K):\n    \"\"\"\n    Function to check if the given tuples contain the value K or not.\n\n    Parameters:\n    test_tup (tuple): The tuple to check.\n    K (any): The value to search for in the tuple.\n\n    Returns:\n    bool: True if K is found in the tuple, False otherwise.\n    \"\"\"\n    return K in test_tup",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given tuples contain the k or not.\n\n### Signature\ndef check_K(test_tup, K):",
    "timestamp": "2025-10-17T18:51:59.502741",
    "response_time": "1.88",
    "context": "{\"function_name\": \"check_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half",
    "dataset_row_id": 809,
    "solution": "def check_smaller(test_tup1, test_tup2):\n    # Check if both tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    # Check if each element in test_tup2 is smaller than the corresponding element in test_tup1\n    for a, b in zip(test_tup1, test_tup2):\n        if b >= a:\n            return False\n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n### Signature\ndef check_smaller(test_tup1, test_tup2):",
    "timestamp": "2025-10-17T18:52:01.263730",
    "response_time": "1.75",
    "context": "{\"function_name\": \"check_smaller\"}"
  }
]