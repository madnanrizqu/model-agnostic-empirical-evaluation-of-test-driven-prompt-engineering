[
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 425,
    "solution": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of sublists containing a particular element.\n\n### Signature\ndef count_element_in_list(list1, x):\n\n### Test\nassert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
    "timestamp": "2025-10-17T18:43:31.082273",
    "response_time": "3.57",
    "context": "{\"function_name\": \"count_element_in_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 426,
    "solution": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to filter odd numbers.\n\n### Signature\ndef filter_oddnumbers(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
    "timestamp": "2025-10-17T18:43:33.015663",
    "response_time": "1.93",
    "context": "{\"function_name\": \"filter_oddnumbers\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 427,
    "solution": "def change_date_format(dt):\n    # Split the input date string into components\n    year, month, day = dt.split('-')\n    # Rearrange and return the date in dd-mm-yyyy format\n    return f\"{day}-{month}-{year}\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n### Signature\ndef change_date_format(dt):\n\n### Test\nassert candidate(\"2026-01-02\") == \"\"\"02-01-2026\"\"\"",
    "timestamp": "2025-10-17T18:43:34.705497",
    "response_time": "1.68",
    "context": "{\"function_name\": \"change_date_format\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 428,
    "solution": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2  # Initialize the gap size\n\n    # Perform a shell sort\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # Perform a gapped insertion sort\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2  # Reduce the gap size\n\n    return my_list",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort the given array by using shell sort.\n\n### Signature\ndef shell_sort(my_list):\n\n### Test\nassert candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
    "timestamp": "2025-10-17T18:43:40.640590",
    "response_time": "5.93",
    "context": "{\"function_name\": \"shell_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 429,
    "solution": "def and_tuples(test_tup1, test_tup2):\n    # Perform bitwise AND operation elementwise on the tuples\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\n### Signature\ndef and_tuples(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
    "timestamp": "2025-10-17T18:43:42.623429",
    "response_time": "1.98",
    "context": "{\"function_name\": \"and_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 430,
    "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function calculates the directrix of a parabola given its coefficients a, b, and c\n    from the standard quadratic equation y = ax^2 + bx + c.\n    \"\"\"\n    # The formula for the directrix of a parabola is y = c - (b^2 + 1)/(4a)\n    directrix = c - (b**2 + 1) / (4 * a)\n    return int(directrix)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the directrix of a parabola.\n\n### Signature\ndef parabola_directrix(a, b, c):\n\n### Test\nassert candidate(5,3,2)==-198",
    "timestamp": "2025-10-17T18:43:46.002673",
    "response_time": "3.38",
    "context": "{\"function_name\": \"parabola_directrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 431,
    "solution": "def common_element(list1, list2):\n    # Convert one list to a set for faster lookup\n    set1 = set(list1)\n    # Check if any element in list2 exists in set1\n    for element in list2:\n        if element in set1:\n            return True\n    return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes two lists and returns true if they have at least one common element.\n\n### Signature\ndef common_element(list1, list2):\n\n### Test\nassert candidate([1,2,3,4,5], [5,6,7,8,9])==True",
    "timestamp": "2025-10-17T18:43:48.003109",
    "response_time": "2.00",
    "context": "{\"function_name\": \"common_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 432,
    "solution": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium.\n    \n    The median of a trapezium is the line segment that connects the midpoints of the non-parallel sides.\n    Its length is the average of the lengths of the two parallel sides (bases).\n    \n    Parameters:\n    base1 (float): Length of the first base of the trapezium.\n    base2 (float): Length of the second base of the trapezium.\n    height (float): Height of the trapezium (not used in median calculation).\n    \n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n    return (base1 + base2) / 2",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the median length of a trapezium.\n\n### Signature\ndef median_trapezium(base1,base2,height):\n\n### Test\nassert candidate(15,25,35)==20",
    "timestamp": "2025-10-17T18:43:51.860272",
    "response_time": "3.85",
    "context": "{\"function_name\": \"median_trapezium\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 433,
    "solution": "def check_greater(arr, number):\n    # Check if the number is greater than all elements in the array\n    for element in arr:\n        if number <= element:\n            return False\n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\n### Signature\ndef check_greater(arr, number):\n\n### Test\nassert candidate([1, 2, 3, 4, 5], 4) == False",
    "timestamp": "2025-10-17T18:43:52.930041",
    "response_time": "1.07",
    "context": "{\"function_name\": \"check_greater\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 434,
    "solution": "import re\n\ndef text_match_one(text):\n    # Check if the string matches the pattern 'a' followed by one or more 'b's\n    pattern = r'^ab+$'\n    return bool(re.match(pattern, text))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by one or more b's.\n\n### Signature\ndef text_match_one(text):\n\n### Test\nassert candidate(\"ac\")==False",
    "timestamp": "2025-10-17T18:43:55.349859",
    "response_time": "2.42",
    "context": "{\"function_name\": \"text_match_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 435,
    "solution": "def last_Digit(n):\n    return abs(n) % 10",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the last digit of a given number.\n\n### Signature\ndef last_Digit(n) :\n\n### Test\nassert candidate(123) == 3",
    "timestamp": "2025-10-17T18:43:56.466476",
    "response_time": "1.11",
    "context": "{\"function_name\": \"last_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 436,
    "solution": "def neg_nos(list1):\n    return [num for num in list1 if num < 0]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to return the negative numbers in a list.\n\n### Signature\ndef neg_nos(list1):\n\n### Test\nassert candidate([-1,4,5,-6]) == [-1,-6]",
    "timestamp": "2025-10-17T18:43:57.595974",
    "response_time": "1.13",
    "context": "{\"function_name\": \"neg_nos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 437,
    "solution": "def remove_odd(str1):\n    return ''.join([char for i, char in enumerate(str1) if i % 2 != 0])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove odd characters in a string.\n\n### Signature\ndef remove_odd(str1):\n\n### Test\nassert candidate(\"python\")==(\"yhn\")",
    "timestamp": "2025-10-17T18:43:59.436364",
    "response_time": "1.84",
    "context": "{\"function_name\": \"remove_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 438,
    "solution": "def count_bidirectional(test_list):\n    # Create a set to store unique bidirectional pairs\n    seen_pairs = set()\n    count = 0\n\n    for pair in test_list:\n        # Create the reverse of the current pair\n        reverse_pair = (pair[1], pair[0])\n        \n        # Check if the reverse pair is already in the set\n        if reverse_pair in seen_pairs:\n            count += 1\n        else:\n            # Add the current pair to the set\n            seen_pairs.add(pair)\n    \n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count bidirectional tuple pairs.\n\n### Signature\ndef count_bidirectional(test_list):\n\n### Test\nassert candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3",
    "timestamp": "2025-10-17T18:44:02.068456",
    "response_time": "2.63",
    "context": "{\"function_name\": \"count_bidirectional\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 439,
    "solution": "def multiple_to_single(L):\n    # Convert each integer in the list to a string, join them, and convert back to an integer\n    return int(''.join(map(str, L)))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to join a list of multiple integers into a single integer.\n\n### Signature\ndef multiple_to_single(L):\n\n### Test\nassert candidate([11, 33, 50])==113350",
    "timestamp": "2025-10-17T18:44:03.271722",
    "response_time": "1.20",
    "context": "{\"function_name\": \"multiple_to_single\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 440,
    "solution": "import re\n\ndef find_adverb_position(text):\n    # Regular expression to find adverbs ending with 'ly'\n    match = re.search(r'\\b(\\w+ly)\\b', text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group(1)\n        return (start, end, adverb)\n    return None",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the first adverb and their positions in a given sentence.\n\n### Signature\ndef find_adverb_position(text):\n\n### Test\nassert candidate(\"clearly!! we can see the sky\")==(0, 7, \"\"\"clearly\"\"\")",
    "timestamp": "2025-10-17T18:44:05.094088",
    "response_time": "1.82",
    "context": "{\"function_name\": \"find_adverb_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 441,
    "solution": "def surfacearea_cube(l):\n    # Surface area of a cube is given by 6 * (side length)^2\n    return 6 * (l ** 2)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cube of a given size.\n\n### Signature\ndef surfacearea_cube(l):\n\n### Test\nassert candidate(5)==150",
    "timestamp": "2025-10-17T18:44:06.442300",
    "response_time": "1.35",
    "context": "{\"function_name\": \"surfacearea_cube\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 442,
    "solution": "def positive_count(nums):\n    if not nums:\n        return 0  # Handle empty list case\n    positive_numbers = [num for num in nums if num > 0]\n    return len(positive_numbers) / len(nums)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the ration of positive numbers in an array of integers.\n\n### Signature\ndef positive_count(nums):\n\n### Test\nassert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
    "timestamp": "2025-10-17T18:44:07.874133",
    "response_time": "1.43",
    "context": "{\"function_name\": \"positive_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 443,
    "solution": "def largest_neg(list1):\n    # Filter out negative numbers from the list\n    negative_numbers = [num for num in list1 if num < 0]\n    # Return the largest negative number, or None if no negative numbers exist\n    return max(negative_numbers) if negative_numbers else None",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the largest negative number from the given list.\n\n### Signature\ndef largest_neg(list1):\n\n### Test\nassert candidate([1,2,3,-4,-6]) == -6",
    "timestamp": "2025-10-17T18:44:10.986860",
    "response_time": "3.11",
    "context": "{\"function_name\": \"largest_neg\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 444,
    "solution": "def trim_tuple(test_list, K):\n    # Trimming each tuple by K elements from the start and end\n    trimmed_list = [tup[K:-K] if K < len(tup) // 2 else () for tup in test_list]\n    return str(trimmed_list)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to trim each tuple by k in the given tuple list.\n\n### Signature\ndef trim_tuple(test_list, K):\n\n### Test\nassert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
    "timestamp": "2025-10-17T18:44:13.157826",
    "response_time": "2.17",
    "context": "{\"function_name\": \"trim_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 445,
    "solution": "def index_multiplication(test_tup1, test_tup2):\n    # Perform index-wise multiplication of tuple elements\n    return tuple((a * c, b * d) for (a, b), (c, d) in zip(test_tup1, test_tup2))\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n### Signature\ndef index_multiplication(test_tup1, test_tup2):\n\n### Test\nassert candidate(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
    "timestamp": "2025-10-17T18:44:16.073335",
    "response_time": "2.91",
    "context": "{\"function_name\": \"index_multiplication\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 446,
    "solution": "def count_Occurrence(tup, lst):\n    return sum(tup.count(item) for item in lst)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the occurence of all elements of list in a tuple.\n\n### Signature\ndef count_Occurrence(tup, lst):\n\n### Test\nassert candidate(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
    "timestamp": "2025-10-17T18:44:17.499778",
    "response_time": "1.42",
    "context": "{\"function_name\": \"count_Occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 447,
    "solution": "def cube_nums(nums):\n    return [x**3 for x in nums]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find cubes of individual elements in a list.\n\n### Signature\ndef cube_nums(nums):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
    "timestamp": "2025-10-17T18:44:18.445287",
    "response_time": "0.94",
    "context": "{\"function_name\": \"cube_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 448,
    "solution": "def cal_sum(n):\n    # Function to calculate the sum of Perrin numbers up to the nth term\n    if n < 0:\n        return 0\n\n    # Initialize the first three Perrin numbers\n    perrin = [3, 0, 2]\n    sum_perrin = sum(perrin[:n])  # Sum of the first n terms\n\n    # Generate the rest of the Perrin numbers up to the nth term\n    for i in range(3, n):\n        next_perrin = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_perrin)\n        sum_perrin += next_perrin\n\n    return sum_perrin",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the sum of perrin numbers.\n\n### Signature\ndef cal_sum(n):\n\n### Test\nassert candidate(9) == 49",
    "timestamp": "2025-10-17T18:44:22.757207",
    "response_time": "4.31",
    "context": "{\"function_name\": \"cal_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 450,
    "solution": "def extract_string(str_list, l):\n    return [s for s in str_list if len(s) == l]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract specified size of strings from a given list of string values.\n\n### Signature\ndef extract_string(str, l):\n\n### Test\nassert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
    "timestamp": "2025-10-17T18:44:23.780674",
    "response_time": "1.02",
    "context": "{\"function_name\": \"extract_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 451,
    "solution": "def remove_whitespaces(text1):\n    return ''.join(text1.split())",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from the given string.\n\n### Signature\ndef remove_whitespaces(text1):\n\n### Test\nassert candidate(' Google    Flutter ') == 'GoogleFlutter'",
    "timestamp": "2025-10-17T18:44:26.168762",
    "response_time": "2.39",
    "context": "{\"function_name\": \"remove_whitespaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 452,
    "solution": "def loss_amount(actual_cost, sale_amount):\n    # Calculate the loss amount\n    loss = actual_cost - sale_amount\n    # Return the loss amount if there is a loss, otherwise return 0\n    return loss if loss > 0 else 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n### Signature\ndef loss_amount(actual_cost,sale_amount):\n\n### Test\nassert candidate(1500,1200)==0",
    "timestamp": "2025-10-17T18:44:27.543424",
    "response_time": "1.37",
    "context": "{\"function_name\": \"loss_amount\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 453,
    "solution": "def sumofFactors(n):\n    # Initialize sum of even factors\n    sum_even_factors = 0\n    \n    # Iterate through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is a factor of n and is even\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    \n    return sum_even_factors",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of even factors of a number.\n\n### Signature\ndef sumofFactors(n) :\n\n### Test\nassert candidate(18) == 26",
    "timestamp": "2025-10-17T18:44:30.087744",
    "response_time": "2.54",
    "context": "{\"function_name\": \"sumofFactors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 454,
    "solution": "import re\n\ndef text_match_wordz(text):\n    # Check if the text contains a word with 'z'\n    return bool(re.search(r'\\b\\w*z\\w*\\b', text))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a word containing 'z'.\n\n### Signature\ndef text_match_wordz(text):\n\n### Test\nassert candidate(\"pythonz.\")==True",
    "timestamp": "2025-10-17T18:44:31.414182",
    "response_time": "1.32",
    "context": "{\"function_name\": \"text_match_wordz\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 455,
    "solution": "def check_monthnumb_number(monthnum2):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    # Check if the given month number is in the list\n    return monthnum2 in months_with_31_days",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 31 days or not.\n\n### Signature\ndef check_monthnumb_number(monthnum2):\n\n### Test\nassert candidate(5)==True",
    "timestamp": "2025-10-17T18:44:33.175845",
    "response_time": "1.76",
    "context": "{\"function_name\": \"check_monthnumb_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 456,
    "solution": "def reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to reverse each string in a given list of string values.\n\n### Signature\ndef reverse_string_list(stringlist):\n\n### Test\nassert candidate(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
    "timestamp": "2025-10-17T18:44:34.597499",
    "response_time": "1.42",
    "context": "{\"function_name\": \"reverse_string_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 457,
    "solution": "def Find_Min(lst):\n    # Initialize the minimum length to a very large number\n    min_length = float('inf')\n    # Initialize the result to None\n    result = None\n    \n    # Iterate through each sublist in the list\n    for sublist in lst:\n        # Check if the current sublist's length is less than the minimum length\n        if len(sublist) < min_length:\n            # Update the minimum length and result\n            min_length = len(sublist)\n            result = sublist\n    \n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sublist having minimum length.\n\n### Signature\ndef Find_Min(lst):\n\n### Test\nassert candidate([[1],[1,2],[1,2,3]]) == [1]",
    "timestamp": "2025-10-17T18:44:37.314078",
    "response_time": "2.71",
    "context": "{\"function_name\": \"Find_Min\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 458,
    "solution": "def rectangle_area(l, b):\n    return l * b",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the area of a rectangle.\n\n### Signature\ndef rectangle_area(l,b):\n\n### Test\nassert candidate(10,20)==200",
    "timestamp": "2025-10-17T18:44:38.364245",
    "response_time": "1.05",
    "context": "{\"function_name\": \"rectangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 459,
    "solution": "def remove_uppercase(str1):\n    result = \"\"\n    temp = \"\"\n    for char in str1:\n        if char.isupper():\n            temp += char\n        else:\n            if temp:\n                temp = \"\"\n            result += char\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove uppercase substrings from a given string.\n\n### Signature\ndef remove_uppercase(str1):\n\n### Test\nassert candidate('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
    "timestamp": "2025-10-17T18:44:40.440306",
    "response_time": "2.07",
    "context": "{\"function_name\": \"remove_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 460,
    "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to get the first element of each sublist.\n\n### Signature\ndef Extract(lst):\n\n### Test\nassert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
    "timestamp": "2025-10-17T18:44:41.599853",
    "response_time": "1.16",
    "context": "{\"function_name\": \"Extract\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 461,
    "solution": "def upper_ctr(str):\n    return sum(1 for char in str if char.isupper())",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the upper case characters in a given string.\n\n### Signature\ndef upper_ctr(str):\n\n### Test\nassert candidate('PYthon') == 1",
    "timestamp": "2025-10-17T18:44:42.543451",
    "response_time": "0.94",
    "context": "{\"function_name\": \"upper_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 462,
    "solution": "from itertools import combinations\n\ndef combinations_list(list1):\n    result = []\n    for r in range(len(list1) + 1):\n        for combo in combinations(list1, r):\n            result.append(list(combo))\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find all possible combinations of the elements of a given list.\n\n### Signature\ndef combinations_list(list1):\n\n### Test\nassert candidate(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
    "timestamp": "2025-10-17T18:44:43.720516",
    "response_time": "1.17",
    "context": "{\"function_name\": \"combinations_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 463,
    "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum product subarray of the given array.\n\n### Signature\ndef max_subarray_product(arr):\n\n### Test\nassert candidate([1, -2, -3, 0, 7, -8, -2]) == 112",
    "timestamp": "2025-10-17T18:44:46.089869",
    "response_time": "2.37",
    "context": "{\"function_name\": \"max_subarray_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 464,
    "solution": "def check_value(dict, n):\n    # Check if all values in the dictionary are the same as n\n    return all(value == n for value in dict.values())",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if all values are same in a dictionary.\n\n### Signature\ndef check_value(dict, n):\n\n### Test\nassert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
    "timestamp": "2025-10-17T18:44:47.395189",
    "response_time": "1.30",
    "context": "{\"function_name\": \"check_value\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 465,
    "solution": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None}\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to drop empty items from a given dictionary.\n\n### Signature\ndef drop_empty(dict1):\n\n### Test\nassert candidate({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
    "timestamp": "2025-10-17T18:44:48.529376",
    "response_time": "1.13",
    "context": "{\"function_name\": \"drop_empty\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 468,
    "solution": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize dp array to store the maximum product for each index\n    dp = arr[:]\n    \n    # Iterate through the array to calculate the maximum product for each index\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    \n    # Return the maximum value in dp array\n    return max(dp)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n### Signature\ndef max_product(arr):\n\n### Test\nassert candidate([3, 100, 4, 5, 150, 6]) == 3000",
    "timestamp": "2025-10-17T18:44:50.869878",
    "response_time": "2.34",
    "context": "{\"function_name\": \"max_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 470,
    "solution": "def add_pairwise(test_tup):\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n### Signature\ndef add_pairwise(test_tup):\n\n### Test\nassert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
    "timestamp": "2025-10-17T18:44:52.992452",
    "response_time": "2.12",
    "context": "{\"function_name\": \"add_pairwise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 471,
    "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n  # Take modulo n at each step to prevent overflow\n    return product",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the product of the array multiplication modulo n.\n\n### Signature\ndef find_remainder(arr, n):\n\n### Test\nassert candidate([ 100, 10, 5, 25, 35, 14 ],11) ==9",
    "timestamp": "2025-10-17T18:44:54.982481",
    "response_time": "1.99",
    "context": "{\"function_name\": \"find_remainder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 472,
    "solution": "def check_Consecutive(l):\n    if not l:\n        return False\n    sorted_list = sorted(l)\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i] + 1 != sorted_list[i + 1]:\n            return False\n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\n### Signature\ndef check_Consecutive(l):\n\n### Test\nassert candidate([1,2,3,4,5]) == True",
    "timestamp": "2025-10-17T18:44:56.243512",
    "response_time": "1.26",
    "context": "{\"function_name\": \"check_Consecutive\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 473,
    "solution": "def tuple_intersection(test_list1, test_list2):\n    # Convert tuples in both lists to sets of frozensets to handle order-independence\n    set1 = {frozenset(t) for t in test_list1}\n    set2 = {frozenset(t) for t in test_list2}\n    \n    # Find the intersection of the two sets\n    intersection = set1 & set2\n    \n    # Convert frozensets back to tuples\n    result = {tuple(sorted(t)) for t in intersection}\n    \n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n### Signature\ndef tuple_intersection(test_list1, test_list2):\n\n### Test\nassert candidate([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
    "timestamp": "2025-10-17T18:44:59.215416",
    "response_time": "2.97",
    "context": "{\"function_name\": \"tuple_intersection\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 474,
    "solution": "def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to replace characters in a string.\n\n### Signature\ndef replace_char(str1,ch,newch):\n\n### Test\nassert candidate(\"polygon\",\"\"\"y\"\"\",\"\"\"l\"\"\")==(\"pollgon\")",
    "timestamp": "2025-10-17T18:45:00.222883",
    "response_time": "1.00",
    "context": "{\"function_name\": \"replace_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 475,
    "solution": "def sort_counter(dict1):\n    # Sort the dictionary by value in descending order and return as a list of tuples\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a dictionary by value.\n\n### Signature\ndef sort_counter(dict1):\n\n### Test\nassert candidate({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
    "timestamp": "2025-10-17T18:45:01.655364",
    "response_time": "1.43",
    "context": "{\"function_name\": \"sort_counter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 476,
    "solution": "def big_sum(nums):\n    if not nums:\n        return 0\n    return max(nums) + min(nums)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\n### Signature\ndef big_sum(nums):\n\n### Test\nassert candidate([1,2,3]) == 4",
    "timestamp": "2025-10-17T18:45:02.567565",
    "response_time": "0.91",
    "context": "{\"function_name\": \"big_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 477,
    "solution": "def is_lower(string):\n    return string.lower()",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to convert the given string to lower case.\n\n### Signature\ndef is_lower(string):\n\n### Test\nassert candidate(\"InValid\") == \"invalid\"",
    "timestamp": "2025-10-17T18:45:04.308446",
    "response_time": "1.74",
    "context": "{\"function_name\": \"is_lower\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 478,
    "solution": "def remove_lowercase(str1):\n    result = ''.join([char for char in str1 if not char.islower()])\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove lowercase substrings from a given string.\n\n### Signature\ndef remove_lowercase(str1):\n\n### Test\nassert candidate(\"PYTHon\")==(\"\"\"PYTH\"\"\")",
    "timestamp": "2025-10-17T18:45:05.705145",
    "response_time": "1.39",
    "context": "{\"function_name\": \"remove_lowercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 479,
    "solution": "def first_Digit(n):\n    # Convert the number to a string to extract the first character\n    # Use abs() to handle negative numbers\n    return int(str(abs(n))[0])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the first digit of a given number.\n\n### Signature\ndef first_Digit(n) :\n\n### Test\nassert candidate(123) == 1",
    "timestamp": "2025-10-17T18:45:07.181045",
    "response_time": "1.47",
    "context": "{\"function_name\": \"first_Digit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 554,
    "solution": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and only returns the odd ones.\n\n### Signature\ndef Split(list):\n\n### Test\nassert candidate([1,2,3,4,5,6]) == [1,3,5]",
    "timestamp": "2025-10-17T18:45:08.426461",
    "response_time": "1.24",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 555,
    "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n + 1))\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n + 1))\n    \n    # Return the difference\n    return sum_of_cubes - sum_of_numbers",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n### Signature\ndef difference(n) :\n\n### Test\nassert candidate(3) == 30",
    "timestamp": "2025-10-17T18:45:10.534235",
    "response_time": "2.10",
    "context": "{\"function_name\": \"difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 556,
    "solution": "def find_Odd_Pair(A, N):\n    # Count of even and odd numbers in the array\n    odd_count = sum(1 for x in A if x % 2 != 0)\n    even_count = N - odd_count\n    \n    # XOR of an odd and an even number is always odd\n    # So, the number of such pairs is odd_count * even_count\n    return odd_count * even_count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose xor value is odd.\n\n### Signature\ndef find_Odd_Pair(A,N) :\n\n### Test\nassert candidate([5,4,7,2,1],5) == 6",
    "timestamp": "2025-10-17T18:45:18.137445",
    "response_time": "7.60",
    "context": "{\"function_name\": \"find_Odd_Pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 557,
    "solution": "def toggle_string(string):\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to toggle the case of all characters in a string.\n\n### Signature\ndef toggle_string(string):\n\n### Test\nassert candidate(\"Python\")==(\"pYTHON\")",
    "timestamp": "2025-10-17T18:45:19.179761",
    "response_time": "1.04",
    "context": "{\"function_name\": \"toggle_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 558,
    "solution": "def digit_distance_nums(n1, n2):\n    # Convert both numbers to strings to process digit by digit\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # Pad the shorter number with leading zeros to make them the same length\n    max_len = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_len)\n    str_n2 = str_n2.zfill(max_len)\n    \n    # Calculate the sum of per-digit differences\n    total_distance = 0\n    for digit1, digit2 in zip(str_n1, str_n2):\n        total_distance += abs(int(digit1) - int(digit2))\n    \n    return total_distance",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of the per-digit difference between two integers.\n\n### Signature\ndef digit_distance_nums(n1, n2):\n\n### Test\nassert candidate(1,2) == 1",
    "timestamp": "2025-10-17T18:45:23.501979",
    "response_time": "4.32",
    "context": "{\"function_name\": \"digit_distance_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 559,
    "solution": "def max_sub_array_sum(a, size):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n\n### Signature\ndef max_sub_array_sum(a, size):\n\n### Test\nassert candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
    "timestamp": "2025-10-17T18:45:25.074504",
    "response_time": "1.57",
    "context": "{\"function_name\": \"max_sub_array_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 560,
    "solution": "def union_elements(test_tup1, test_tup2):\n    # Combine the tuples into a set to remove duplicates\n    union_set = set(test_tup1).union(set(test_tup2))\n    # Convert the set back to a sorted tuple\n    return tuple(sorted(union_set))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n\n### Signature\ndef union_elements(test_tup1, test_tup2):\n\n### Test\nassert candidate((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
    "timestamp": "2025-10-17T18:45:29.496673",
    "response_time": "4.42",
    "context": "{\"function_name\": \"union_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 562,
    "solution": "def Find_Max_Length(lst):\n    # Find the length of the longest sublist\n    return max(len(sublist) for sublist in lst)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest sublists.\n\n### Signature\ndef Find_Max_Length(lst):\n\n### Test\nassert candidate([[1],[1,4],[5,6,7,8]]) == 4",
    "timestamp": "2025-10-17T18:45:32.053436",
    "response_time": "2.55",
    "context": "{\"function_name\": \"Find_Max_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 563,
    "solution": "import re\n\ndef extract_values(text):\n    return re.findall(r'\"(.*?)\"', text)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks from a string.\n\n### Signature\ndef extract_values(text):\n\n### Test\nassert extract_values(\"Python\", \"PHP\", \"Java\") == [\"Python\", \"PHP\", \"Java\"]",
    "timestamp": "2025-10-17T18:45:33.102675",
    "response_time": "1.05",
    "context": "{\"function_name\": \"extract_values\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 564,
    "solution": "def count_Pairs(arr, n):\n    # Create a dictionary to count occurrences of each number\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Calculate the total number of pairs\n    total_pairs = n * (n - 1) // 2\n\n    # Subtract the pairs where both elements are equal\n    for count in freq.values():\n        total_pairs -= count * (count - 1) // 2\n\n    return total_pairs",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n### Signature\ndef count_Pairs(arr,n):\n\n### Test\nassert candidate([1,2,1],3) == 2",
    "timestamp": "2025-10-17T18:45:36.866262",
    "response_time": "3.76",
    "context": "{\"function_name\": \"count_Pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 565,
    "solution": "def split(word):\n    return list(word)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to split a string into characters.\n\n### Signature\ndef split(word):\n\n### Test\nassert candidate('python') == ['p','y','t','h','o','n']",
    "timestamp": "2025-10-17T18:45:38.440193",
    "response_time": "1.57",
    "context": "{\"function_name\": \"split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 566,
    "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get the sum of the digits of a non-negative integer.\n\n### Signature\ndef sum_digits(n):\n\n### Test\nassert candidate(345)==12",
    "timestamp": "2025-10-17T18:45:39.364860",
    "response_time": "0.92",
    "context": "{\"function_name\": \"sum_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 567,
    "solution": "def issort_list(list1):\n    return list1 == sorted(list1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether a specified list is sorted or not.\n\n### Signature\ndef issort_list(list1):\n\n### Test\nassert candidate([1,2,4,6,8,10,12,14,16,17])==True",
    "timestamp": "2025-10-17T18:45:40.975830",
    "response_time": "1.61",
    "context": "{\"function_name\": \"issort_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 568,
    "solution": "def empty_list(length):\n    return [{} for _ in range(length)]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to create a list of N empty dictionaries.\n\n### Signature\ndef empty_list(length):\n\n### Test\nassert candidate(5)==[{},{},{},{},{}]",
    "timestamp": "2025-10-17T18:45:41.932202",
    "response_time": "0.95",
    "context": "{\"function_name\": \"empty_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 569,
    "solution": "def sort_sublists(list1):\n    return [sorted(sublist) for sublist in list1]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(list1):\n\n### Test\nassert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
    "timestamp": "2025-10-17T18:45:43.713014",
    "response_time": "1.78",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 572,
    "solution": "def two_unique_nums(nums):\n    # Create a dictionary to count occurrences of each number\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    \n    # Filter numbers that appear only once\n    unique_nums = [num for num in nums if count[num] == 1]\n    \n    return unique_nums",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to remove duplicate numbers from a given number of lists.\n\n### Signature\ndef two_unique_nums(nums):\n\n### Test\nassert candidate([1,2,3,2,3,4,5]) == [1, 4, 5]",
    "timestamp": "2025-10-17T18:45:46.509894",
    "response_time": "2.79",
    "context": "{\"function_name\": \"two_unique_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 573,
    "solution": "def unique_product(list_data):\n    unique_numbers = set(list_data)  # Remove duplicates by converting to a set\n    product = 1\n    for num in unique_numbers:\n        product *= num  # Calculate the product of unique numbers\n    return product",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to calculate the product of the unique numbers in a given list.\n\n### Signature\ndef unique_product(list_data):\n\n### Test\nassert candidate([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
    "timestamp": "2025-10-17T18:45:47.868046",
    "response_time": "1.35",
    "context": "{\"function_name\": \"unique_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 574,
    "solution": "import math\n\ndef surfacearea_cylinder(r, h):\n    # Calculate the surface area of a cylinder\n    # Surface Area = 2 * \u03c0 * r * h + 2 * \u03c0 * r^2\n    lateral_area = 2 * math.pi * r * h\n    top_and_bottom_area = 2 * math.pi * r**2\n    return round(lateral_area + top_and_bottom_area, 2)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the surface area of a cylinder.\n\n### Signature\ndef surfacearea_cylinder(r,h):\n\n### Test\nassert candidate(10,5)==942.45",
    "timestamp": "2025-10-17T18:45:50.981813",
    "response_time": "3.11",
    "context": "{\"function_name\": \"surfacearea_cylinder\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 576,
    "solution": "def is_Sub_Array(A, B):\n    # Check if B is a sublist of A\n    n = len(A)\n    m = len(B)\n    \n    # If B is empty, it is a sublist of A\n    if m == 0:\n        return True\n    \n    # If B is longer than A, it cannot be a sublist\n    if m > n:\n        return False\n    \n    # Iterate through A to find if B is a sublist\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    \n    return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether a list is sublist of another or not.\n\n### Signature\ndef is_Sub_Array(A,B):\n\n### Test\nassert candidate([1,4,3,5],[1,2]) == False",
    "timestamp": "2025-10-17T18:45:54.562926",
    "response_time": "3.58",
    "context": "{\"function_name\": \"is_Sub_Array\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 577,
    "solution": "def last_Digit_Factorial(n):\n    # If n is 0 or 1, the factorial is 1, and the last digit is also 1\n    if n == 0 or n == 1:\n        return 1\n    \n    # If n >= 5, the factorial will always have a trailing zero\n    if n >= 5:\n        return 0\n    \n    # Calculate factorial for n < 5 and return the last digit\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    \n    return factorial % 10",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the last digit in factorial of a given number.\n\n### Signature\ndef last_Digit_Factorial(n):\n\n### Test\nassert candidate(4) == 4",
    "timestamp": "2025-10-17T18:45:58.146756",
    "response_time": "3.58",
    "context": "{\"function_name\": \"last_Digit_Factorial\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 578,
    "solution": "def interleave_lists(list1, list2, list3):\n    interleaved = []\n    for a, b, c in zip(list1, list2, list3):\n        interleaved.extend([a, b, c])\n    return interleaved\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to interleave 3 lists of the same length into a single flat list.\n\n### Signature\ndef interleave_lists(list1,list2,list3):\n\n### Test\nassert candidate([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
    "timestamp": "2025-10-17T18:46:00.493528",
    "response_time": "2.34",
    "context": "{\"function_name\": \"interleave_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 579,
    "solution": "def find_dissimilar(test_tup1, test_tup2):\n    # Convert tuples to sets to find unique elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find symmetric difference (elements in either set but not in both)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    # Convert back to tuple and return\n    return tuple(dissimilar_elements)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the dissimilar elements in the given two tuples.\n\n### Signature\ndef find_dissimilar(test_tup1, test_tup2):\n\n### Test\nassert candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
    "timestamp": "2025-10-17T18:46:03.981763",
    "response_time": "3.49",
    "context": "{\"function_name\": \"find_dissimilar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 580,
    "solution": "def extract_even(test_tuple, even_fnc=lambda x: x % 2 == 0):\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple(filter_even(sub_item) for sub_item in item if isinstance(sub_item, (int, tuple)) and (isinstance(sub_item, int) and even_fnc(sub_item) or isinstance(sub_item, tuple)))\n        elif isinstance(item, int) and even_fnc(item):\n            return item\n        return None\n\n    return tuple(filter_even(item) for item in test_tuple if isinstance(item, (int, tuple)) and (isinstance(item, int) and even_fnc(item) or isinstance(item, tuple)))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove uneven elements in the nested mixed tuple.\n\n### Signature\ndef even_ele(test_tuple, even_fnc):\n\n### Test\nassert candidate((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
    "timestamp": "2025-10-17T18:46:08.509978",
    "response_time": "4.52",
    "context": "{\"function_name\": \"extract_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 581,
    "solution": "import math\n\ndef surface_Area(b, s):\n    # Calculate the slant height using the Pythagorean theorem\n    slant_height = math.sqrt((b / 2) ** 2 + s ** 2)\n    \n    # Calculate the lateral surface area\n    lateral_area = 2 * b * slant_height\n    \n    # Calculate the base area\n    base_area = b ** 2\n    \n    # Total surface area is the sum of lateral area and base area\n    total_surface_area = lateral_area + base_area\n    \n    return total_surface_area",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\n### Signature\ndef surface_Area(b,s):\n\n### Test\nassert candidate(3,4) == 33",
    "timestamp": "2025-10-17T18:46:10.951136",
    "response_time": "2.44",
    "context": "{\"function_name\": \"surface_Area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 582,
    "solution": "def my_dict(dict1):\n    return len(dict1) == 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if a dictionary is empty\n\n### Signature\ndef my_dict(dict1):\n\n### Test\nassert candidate({10})==False",
    "timestamp": "2025-10-17T18:46:12.332549",
    "response_time": "1.38",
    "context": "{\"function_name\": \"my_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 583,
    "solution": "def catalan_number(num):\n    # Function to calculate the nth Catalan number\n    if num == 0 or num == 1:\n        return 1\n    \n    catalan = [0] * (num + 1)\n    catalan[0], catalan[1] = 1, 1\n    \n    for i in range(2, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[num]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function which returns nth catalan number.\n\n### Signature\ndef catalan_number(num):\n\n### Test\nassert candidate(10)==16796",
    "timestamp": "2025-10-17T18:46:14.525670",
    "response_time": "2.19",
    "context": "{\"function_name\": \"catalan_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 584,
    "solution": "def find_adverbs(text):\n    words = text.split()\n    for i, word in enumerate(words):\n        if word.endswith('ly'):\n            start_index = text.find(word)\n            end_index = start_index + len(word) - 1\n            return f\"{start_index}-{end_index}: {word}\"\n    return None",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n\n### Signature\ndef find_adverbs(text):\n\n### Test\nassert candidate(\"Clearly, he has no excuse for such behavior.\") == \"\"\"0-7: Clearly\"\"\"",
    "timestamp": "2025-10-17T18:46:16.966153",
    "response_time": "2.44",
    "context": "{\"function_name\": \"find_adverbs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 585,
    "solution": "def expensive_items(items, n):\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the n most expensive items in a given dataset.\n\n### Signature\ndef expensive_items(items,n):\n\n### Test\nassert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
    "timestamp": "2025-10-17T18:46:18.860948",
    "response_time": "1.89",
    "context": "{\"function_name\": \"expensive_items\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 586,
    "solution": "def split_Arr(l, n):\n    # Split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # Combine the second part with the first part at the end\n    return second_part + first_part",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n\n### Signature\ndef split_Arr(l, n):\n\n### Test\nassert candidate([12,10,5,6,52,36],2) == [5,6,52,36,12,10]",
    "timestamp": "2025-10-17T18:46:20.381466",
    "response_time": "1.51",
    "context": "{\"function_name\": \"split_Arr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 587,
    "solution": "def list_tuple(listx):\n    return tuple(listx)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a list to a tuple.\n\n### Signature\ndef list_tuple(listx):\n\n### Test\nassert candidate([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
    "timestamp": "2025-10-17T18:46:22.295488",
    "response_time": "1.91",
    "context": "{\"function_name\": \"list_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 588,
    "solution": "def big_diff(nums):\n    if not nums:\n        return 0\n    return max(nums) - min(nums)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the difference between largest and smallest value in a given list.\n\n### Signature\ndef big_diff(nums):\n\n### Test\nassert candidate([1,2,3,4]) == 3",
    "timestamp": "2025-10-17T18:46:23.429653",
    "response_time": "1.13",
    "context": "{\"function_name\": \"big_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 589,
    "solution": "import math\n\ndef perfect_squares(a, b):\n    result = []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    for i in range(start, end + 1):\n        result.append(i * i)\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find perfect squares between two given numbers.\n\n### Signature\ndef perfect_squares(a, b):\n\n### Test\nassert candidate(1,30)==[1, 4, 9, 16, 25]",
    "timestamp": "2025-10-17T18:46:25.930287",
    "response_time": "2.50",
    "context": "{\"function_name\": \"perfect_squares\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 590,
    "solution": "import math\nimport cmath\n\ndef polar_rect(x, y):\n    # Calculate the magnitude (r) and angle (theta) for polar coordinates\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y, x)\n    \n    # Convert to polar coordinates (r, theta)\n    polar = (r, theta)\n    \n    # Convert to complex number representation\n    complex_representation = cmath.rect(r, theta)\n    \n    return polar, complex_representation",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert polar coordinates to rectangular coordinates.\n\n### Signature\ndef polar_rect(x,y):\n\n### Test\nassert candidate(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
    "timestamp": "2025-10-17T18:46:28.357670",
    "response_time": "2.42",
    "context": "{\"function_name\": \"polar_rect\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 591,
    "solution": "def swap_List(newList):\n    # Check if the list has at least two elements\n    if len(newList) >= 2:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last elements in a list.\n\n### Signature\ndef swap_List(newList):\n\n### Test\nassert candidate([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
    "timestamp": "2025-10-17T18:46:30.255372",
    "response_time": "1.89",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 592,
    "solution": "from math import comb\n\ndef sum_Of_product(n, k):\n    return comb(n, k)\n\ndef candidate(n):\n    total_sum = 0\n    for k in range(n):\n        total_sum += binomial_Coeff(n, k) * binomial_Coeff(n, k + 1)\n    return total_sum",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\n### Signature\ndef binomial_Coeff(n,k):\n\n### Test\nassert candidate(3) == 15",
    "timestamp": "2025-10-17T18:46:32.165941",
    "response_time": "1.91",
    "context": "{\"function_name\": \"sum_Of_product\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 593,
    "solution": "def removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Remove leading zeros from each part\n    cleaned_parts = [str(int(part)) for part in parts]\n    # Join the cleaned parts back into an IP address\n    return '.'.join(cleaned_parts)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove leading zeroes from an ip address.\n\n### Signature\ndef removezero_ip(ip):\n\n### Test\nassert candidate(\"216.08.094.196\")==(\"\"\"216.8.94.196\"\"\")",
    "timestamp": "2025-10-17T18:46:34.168845",
    "response_time": "1.99",
    "context": "{\"function_name\": \"removezero_ip\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 594,
    "solution": "def diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return abs(first_even - first_odd)\n    else:\n        return None",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the difference of the first even and first odd number of a given list.\n\n### Signature\ndef diff_even_odd(list1):\n\n### Test\nassert candidate([1,3,5,7,4,1,6,8])==3",
    "timestamp": "2025-10-17T18:46:39.043343",
    "response_time": "4.87",
    "context": "{\"function_name\": \"diff_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 595,
    "solution": "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return -1  # Return -1 if the lengths of the strings are not equal\n\n    # Count the number of mismatches for '0' and '1'\n    count_01 = 0  # Count of '0' in str1 and '1' in str2\n    count_10 = 0  # Count of '1' in str1 and '0' in str2\n\n    for bit1, bit2 in zip(str1, str2):\n        if bit1 == '0' and bit2 == '1':\n            count_01 += 1\n        elif bit1 == '1' and bit2 == '0':\n            count_10 += 1\n\n    # If the mismatches are not balanced, it's impossible to convert\n    if count_01 != count_10:\n        return -1\n\n    # The minimum swaps required is equal to the count of mismatches\n    return count_01",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n### Signature\ndef min_Swaps(str1,str2) :\n\n### Test\nassert candidate(\"1101\",\"1110\") == 1",
    "timestamp": "2025-10-17T18:46:42.996290",
    "response_time": "3.95",
    "context": "{\"function_name\": \"min_Swaps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 596,
    "solution": "import sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the size in bytes of the given tuple.\n\n### Signature\ndef tuple_size(tuple_list):\n\n### Test\nassert candidate((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
    "timestamp": "2025-10-17T18:46:43.884826",
    "response_time": "0.88",
    "context": "{\"function_name\": \"tuple_size\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 597,
    "solution": "def find_kth(arr1, arr2, k):\n    def kth_element(arr1, arr2, k):\n        if not arr1:\n            return arr2[k - 1]\n        if not arr2:\n            return arr1[k - 1]\n        if k == 1:\n            return min(arr1[0], arr2[0])\n\n        mid1 = arr1[k // 2 - 1] if len(arr1) >= k // 2 else float('inf')\n        mid2 = arr2[k // 2 - 1] if len(arr2) >= k // 2 else float('inf')\n\n        if mid1 < mid2:\n            return kth_element(arr1[k // 2:], arr2, k - k // 2)\n        else:\n            return kth_element(arr1, arr2[k // 2:], k - k // 2)\n\n    return kth_element(arr1, arr2, k)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find kth element from the given two sorted arrays.\n\n### Signature\ndef find_kth(arr1, arr2, k):\n\n### Test\nassert candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6",
    "timestamp": "2025-10-17T18:46:47.434426",
    "response_time": "3.55",
    "context": "{\"function_name\": \"find_kth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 598,
    "solution": "def armstrong_number(number):\n    # Convert the number to a string to iterate over its digits\n    digits = str(number)\n    # Calculate the number of digits\n    num_digits = len(digits)\n    # Calculate the sum of each digit raised to the power of num_digits\n    armstrong_sum = sum(int(digit) ** num_digits for digit in digits)\n    # Check if the calculated sum is equal to the original number\n    return armstrong_sum == number",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given number is armstrong or not.\n\n### Signature\ndef armstrong_number(number):\n\n### Test\nassert candidate(153)==True",
    "timestamp": "2025-10-17T18:46:50.023303",
    "response_time": "2.56",
    "context": "{\"function_name\": \"armstrong_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 599,
    "solution": "def sum_average(number):\n    # Calculate the sum of the first n natural numbers\n    total_sum = number * (number + 1) // 2\n    # Calculate the average\n    average = total_sum / number\n    # Return the sum and average as a tuple\n    return total_sum, average",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find sum and average of first n natural numbers.\n\n### Signature\ndef sum_average(number):\n\n### Test\nassert candidate(10)==(55, 5.5)",
    "timestamp": "2025-10-17T18:46:54.018597",
    "response_time": "3.99",
    "context": "{\"function_name\": \"sum_average\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 600,
    "solution": "def is_Even(n):\n    return n % 2 == 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given number is even or not.\n\n### Signature\ndef is_Even(n) :\n\n### Test\nassert candidate(1) == False",
    "timestamp": "2025-10-17T18:46:54.947880",
    "response_time": "0.92",
    "context": "{\"function_name\": \"is_Even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 602,
    "solution": "def first_repeated_char(str1):\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the first repeated character in a given string.\n\n### Signature\ndef first_repeated_char(str1):\n\n### Test\nassert candidate(\"abcabc\") == \"a\"",
    "timestamp": "2025-10-17T18:46:56.268065",
    "response_time": "1.32",
    "context": "{\"function_name\": \"first_repeated_char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 603,
    "solution": "def get_ludic(n):\n    if n < 1:\n        return []\n    \n    # Initialize the list of numbers from 1 to n\n    numbers = list(range(1, n + 1))\n    index = 1  # Start with the second number (index 1, which is 2)\n\n    while index < len(numbers):\n        step = numbers[index]  # The current number to use as step\n        if step > len(numbers):\n            break\n        # Remove every step-th number starting from the step-th index\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % step != 0 or i == index]\n        index += 1  # Move to the next number in the list\n\n    return numbers",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\n### Signature\ndef get_ludic(n):\n\n### Test\nassert candidate(10) == [1, 2, 3, 5, 7]",
    "timestamp": "2025-10-17T18:47:00.551570",
    "response_time": "4.28",
    "context": "{\"function_name\": \"get_ludic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 604,
    "solution": "def reverse_words(s):\n    # Split the string into words, reverse the list of words, and join them back with spaces\n    return ' '.join(s.split()[::-1])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to reverse words seperated by spaces in a given string.\n\n### Signature\ndef reverse_words(s):\n\n### Test\nassert candidate(\"python program\")==(\"program python\")",
    "timestamp": "2025-10-17T18:47:01.820566",
    "response_time": "1.26",
    "context": "{\"function_name\": \"reverse_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 605,
    "solution": "def prime_num(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given integer is a prime number.\n\n### Signature\ndef prime_num(num):\n\n### Test\nassert candidate(13)==True",
    "timestamp": "2025-10-17T18:47:03.035633",
    "response_time": "1.21",
    "context": "{\"function_name\": \"prime_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 606,
    "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert degrees to radians.\n\n### Signature\ndef radian_degree(degree):\n\n### Test\nassert candidate(90)==1.5707963267948966",
    "timestamp": "2025-10-17T18:47:04.624583",
    "response_time": "1.58",
    "context": "{\"function_name\": \"radian_degree\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 607,
    "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\n### Signature\ndef find_literals(text, pattern):\n\n### Test\nassert candidate('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)",
    "timestamp": "2025-10-17T18:47:05.805615",
    "response_time": "1.18",
    "context": "{\"function_name\": \"find_literals\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 608,
    "solution": "def bell_Number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Base case\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # First value in every row is the last value of the previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the entries in the current row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # Return the nth Bell number\n    return bell[n][0]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find nth bell number.\n\n### Signature\ndef bell_Number(n):\n\n### Test\nassert candidate(2) == 2",
    "timestamp": "2025-10-17T18:47:09.549839",
    "response_time": "3.74",
    "context": "{\"function_name\": \"bell_Number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 610,
    "solution": "def remove_kth_element(list1, k):\n    if 0 <= k < len(list1):\n        return list1[:k] + list1[k+1:]\n    return list1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\n### Signature\ndef remove_kth_element(list1, L):\n\n### Test\nassert candidate([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
    "timestamp": "2025-10-17T18:47:12.400889",
    "response_time": "2.85",
    "context": "{\"function_name\": \"remove_kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 611,
    "solution": "def max_of_nth(test_list, N):\n    # Extract the N'th column from the matrix\n    nth_column = [row[N] for row in test_list]\n    # Return the maximum value in the N'th column\n    return max(nth_column)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\n### Signature\ndef max_of_nth(test_list, N):\n\n### Test\nassert candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19",
    "timestamp": "2025-10-17T18:47:14.137703",
    "response_time": "1.73",
    "context": "{\"function_name\": \"max_of_nth\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 612,
    "solution": "def merge(lst):\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n### Signature\ndef merge(lst):\n\n### Test\nassert candidate([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]",
    "timestamp": "2025-10-17T18:47:15.482615",
    "response_time": "1.34",
    "context": "{\"function_name\": \"merge\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 614,
    "solution": "def cummulative_sum(test_list):\n    return sum(sum(tup) for tup in test_list)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n### Signature\ndef cummulative_sum(test_list):\n\n### Test\nassert candidate([(1, 3), (5, 6, 7), (2, 6)]) == 30",
    "timestamp": "2025-10-17T18:47:17.326540",
    "response_time": "1.84",
    "context": "{\"function_name\": \"cummulative_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 615,
    "solution": "def average_tuple(nums):\n    return [sum(t) / len(t) for t in nums]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\n### Signature\ndef average_tuple(nums):\n\n### Test\nassert candidate(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]",
    "timestamp": "2025-10-17T18:47:18.237607",
    "response_time": "0.90",
    "context": "{\"function_name\": \"average_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 616,
    "solution": "def tuple_modulo(test_tup1, test_tup2):\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\n### Signature\ndef tuple_modulo(test_tup1, test_tup2):\n\n### Test\nassert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
    "timestamp": "2025-10-17T18:47:19.970309",
    "response_time": "1.73",
    "context": "{\"function_name\": \"tuple_modulo\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 617,
    "solution": "import math\n\ndef min_Jumps(steps, d):\n    # Calculate the magnitude of each step\n    step_length = math.sqrt(steps[0]**2 + steps[1]**2)\n    # Calculate the number of jumps required\n    jumps = d / step_length\n    return jumps",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n### Signature\ndef min_Jumps(steps, d):\n\n### Test\nassert candidate((3,4),11)==3.5",
    "timestamp": "2025-10-17T18:47:22.495143",
    "response_time": "2.52",
    "context": "{\"function_name\": \"min_Jumps\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 618,
    "solution": "def div_list(nums1, nums2):\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [a / b if b != 0 else float('inf') for a, b in zip(nums1, nums2)]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to divide two lists element wise.\n\n### Signature\ndef div_list(nums1,nums2):\n\n### Test\nassert candidate([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
    "timestamp": "2025-10-17T18:47:23.935179",
    "response_time": "1.44",
    "context": "{\"function_name\": \"div_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 619,
    "solution": "def move_num(test_str):\n    # Separate characters and digits\n    chars = ''.join([ch for ch in test_str if not ch.isdigit()])\n    digits = ''.join([ch for ch in test_str if ch.isdigit()])\n    # Concatenate characters and digits\n    return chars + digits",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to move all the numbers to the end of the given string.\n\n### Signature\ndef move_num(test_str):\n\n### Test\nassert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'",
    "timestamp": "2025-10-17T18:47:26.419217",
    "response_time": "2.48",
    "context": "{\"function_name\": \"move_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 620,
    "solution": "from collections import defaultdict\n\ndef largest_subset(a):\n    # Sort the array\n    a.sort()\n    n = len(a)\n    \n    # dp[i] will store the size of the largest subset ending with a[i]\n    dp = [1] * n\n    \n    # To store the maximum size of the subset\n    max_size = 1\n    \n    # Iterate through the array\n    for i in range(1, n):\n        for j in range(i):\n            # Check if a[i] is divisible by a[j]\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_size = max(max_size, dp[i])\n    \n    return max_size",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n### Signature\ndef largest_subset(a):\n\n### Test\nassert candidate([ 1, 3, 6, 13, 17, 18 ]) == 4",
    "timestamp": "2025-10-17T18:47:29.289438",
    "response_time": "2.87",
    "context": "{\"function_name\": \"largest_subset\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 622,
    "solution": "def get_median(arr1, arr2, n):\n    # Merge the two sorted arrays\n    merged = []\n    i, j = 0, 0\n    \n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    \n    # Append remaining elements from arr1\n    while i < n:\n        merged.append(arr1[i])\n        i += 1\n    \n    # Append remaining elements from arr2\n    while j < n:\n        merged.append(arr2[j])\n        j += 1\n    \n    # Calculate the median\n    mid = len(merged) // 2\n    if len(merged) % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) / 2.0\n    else:\n        return merged[mid]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the median of two sorted lists of same size.\n\n### Signature\ndef get_median(arr1, arr2, n):\n\n### Test\nassert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0",
    "timestamp": "2025-10-17T18:47:33.589289",
    "response_time": "4.29",
    "context": "{\"function_name\": \"get_median\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 623,
    "solution": "def nth_nums(nums, n):\n    return [x**n for x in nums]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to compute the n-th power of each number in a list.\n\n### Signature\ndef nth_nums(nums,n):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
    "timestamp": "2025-10-17T18:47:34.639285",
    "response_time": "1.05",
    "context": "{\"function_name\": \"nth_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 624,
    "solution": "def is_upper(string):\n    return string.upper()",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to convert a given string to uppercase.\n\n### Signature\ndef is_upper(string):\n\n### Test\nassert candidate(\"person\") ==\"PERSON\"",
    "timestamp": "2025-10-17T18:47:36.018724",
    "response_time": "1.38",
    "context": "{\"function_name\": \"is_upper\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 625,
    "solution": "def swap_List(newList):\n    # Check if the list has at least two elements\n    if len(newList) > 1:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to interchange the first and last element in a given list.\n\n### Signature\ndef swap_List(newList):\n\n### Test\nassert candidate([1,2,3]) == [3,2,1]",
    "timestamp": "2025-10-17T18:47:38.402520",
    "response_time": "2.38",
    "context": "{\"function_name\": \"swap_List\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 626,
    "solution": "import math\n\ndef triangle_area(r):\n    if r <= 0:\n        return None\n    \n    # The largest triangle that can be inscribed in a semicircle is a right triangle\n    # with the hypotenuse equal to the diameter of the semicircle.\n    # The area of such a triangle is (1/2) * base * height.\n    # Here, base = height = radius of the semicircle.\n    base = r\n    height = r\n    area = 0.5 * base * height\n    return area",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n### Signature\ndef triangle_area(r) :\n\n### Test\nassert candidate(-1) == None",
    "timestamp": "2025-10-17T18:47:40.636188",
    "response_time": "2.23",
    "context": "{\"function_name\": \"triangle_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 627,
    "solution": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        # Check if the missing number is on the left side\n        if array[mid] != mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return start",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\n### Signature\ndef find_First_Missing(array,start=0,end=None):\n\n### Test\nassert candidate([0,1,2,3]) == 4",
    "timestamp": "2025-10-17T18:47:42.712458",
    "response_time": "2.07",
    "context": "{\"function_name\": \"find_First_Missing\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 628,
    "solution": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to replace all spaces in the given string with '%20'.\n\n### Signature\ndef replace_spaces(string):\n\n### Test\nassert candidate(\"My Name is Dawood\") == \"\"\"My%20Name%20is%20Dawood\"\"\"",
    "timestamp": "2025-10-17T18:47:43.802905",
    "response_time": "1.09",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 629,
    "solution": "def Split(lst):\n    return [num for num in lst if num % 2 == 0]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find even numbers from a list of numbers.\n\n### Signature\ndef Split(list):\n\n### Test\nassert candidate([1,2,3,4,5]) == [2,4]",
    "timestamp": "2025-10-17T18:47:45.337135",
    "response_time": "1.53",
    "context": "{\"function_name\": \"Split\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 630,
    "solution": "def get_coordinates(ele, sub=[]):\n    x, y = ele\n    adjacent_coords = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            adjacent_coords.append([i, j])\n    return adjacent_coords",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n### Signature\ndef adjac(ele, sub = []):\n\n### Test\nassert candidate((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]",
    "timestamp": "2025-10-17T18:47:47.149538",
    "response_time": "1.81",
    "context": "{\"function_name\": \"get_coordinates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 631,
    "solution": "def replace_spaces(text):\n    # Replace whitespaces with underscores and underscores with whitespaces\n    return text.replace(' ', '_').replace('_', ' ', 1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\n### Signature\ndef replace_spaces(text):\n\n### Test\nassert candidate('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
    "timestamp": "2025-10-17T18:47:48.681317",
    "response_time": "1.53",
    "context": "{\"function_name\": \"replace_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 632,
    "solution": "def move_zero(num_list):\n    # Separate non-zero elements and count zeroes\n    non_zeroes = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    \n    # Append zeroes to the end of the non-zero elements\n    return non_zeroes + [0] * zero_count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to move all zeroes to the end of the given list.\n\n### Signature\ndef move_zero(num_list):\n\n### Test\nassert candidate([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
    "timestamp": "2025-10-17T18:47:51.785157",
    "response_time": "3.10",
    "context": "{\"function_name\": \"move_zero\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 633,
    "solution": "def pair_xor_Sum(arr, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\n### Signature\ndef pair_xor_Sum(arr,n) :\n\n### Test\nassert candidate([5,9,7,6],4) == 47",
    "timestamp": "2025-10-17T18:47:53.063849",
    "response_time": "1.28",
    "context": "{\"function_name\": \"pair_xor_Sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 635,
    "solution": "import heapq\n\ndef heap_sort(iterable):\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort the given list.\n\n### Signature\ndef heap_sort(iterable):\n\n### Test\nassert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
    "timestamp": "2025-10-17T18:47:54.939285",
    "response_time": "1.87",
    "context": "{\"function_name\": \"heap_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 637,
    "solution": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given amount has no profit and no loss\n\n### Signature\ndef noprofit_noloss(actual_cost,sale_amount):\n\n### Test\nassert candidate(1500,1200)==False",
    "timestamp": "2025-10-17T18:47:55.841206",
    "response_time": "0.90",
    "context": "{\"function_name\": \"noprofit_noloss\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 638,
    "solution": "import math\n\ndef wind_chill(v, t):\n    # Convert wind velocity from km/h to m/s\n    v_m_s = v / 3.6\n    \n    # Calculate wind chill index using the formula\n    wci = 13.12 + 0.6215 * t - 11.37 * (v_m_s ** 0.16) + 0.3965 * t * (v_m_s ** 0.16)\n    \n    # Return the wind chill index rounded to the next integer\n    return math.ceil(wci)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n### Signature\ndef wind_chill(v,t):\n\n### Test\nassert candidate(120,35)==40",
    "timestamp": "2025-10-17T18:47:58.685442",
    "response_time": "2.84",
    "context": "{\"function_name\": \"wind_chill\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 639,
    "solution": "def sample_nam(sample_names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    # Sum the lengths of the remaining names\n    return sum(len(name) for name in filtered_names)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n### Signature\ndef sample_nam(sample_names):\n\n### Test\nassert candidate(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16",
    "timestamp": "2025-10-17T18:48:01.613243",
    "response_time": "2.92",
    "context": "{\"function_name\": \"sample_nam\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 640,
    "solution": "def remove_parenthesis(items):\n    result = []\n    for item in items:\n        # Remove content within parentheses and the parentheses themselves\n        cleaned_item = \"\"\n        skip = 0\n        for char in item:\n            if char == '(':\n                skip += 1\n            elif char == ')':\n                skip -= 1\n            elif skip == 0:\n                cleaned_item += char\n        result.append(cleaned_item.strip())\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n\n### Signature\ndef remove_parenthesis(items):\n\n### Test\nassert candidate([\"python (chrome)\"])==(\"python\")",
    "timestamp": "2025-10-17T18:48:06.005404",
    "response_time": "4.39",
    "context": "{\"function_name\": \"remove_parenthesis\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 641,
    "solution": "def is_nonagonal(n):\n    # The nth nonagonal number is given by the formula:\n    # N(n) = n * (7n - 5) / 2\n    return n * (7 * n - 5) // 2",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth nonagonal number.\n\n### Signature\ndef is_nonagonal(n):\n\n### Test\nassert candidate(10) == 325",
    "timestamp": "2025-10-17T18:48:07.976807",
    "response_time": "1.97",
    "context": "{\"function_name\": \"is_nonagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 643,
    "solution": "def text_match_wordz_middle(text):\n    # Check if 'z' is in the string but not at the start or end\n    if 'z' in text[1:-1]:\n        return True\n    return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\n### Signature\ndef text_match_wordz_middle(text):\n\n### Test\nassert candidate(\"pythonzabc.\")==True",
    "timestamp": "2025-10-17T18:48:10.103195",
    "response_time": "2.12",
    "context": "{\"function_name\": \"text_match_wordz_middle\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 644,
    "solution": "def reverse_Array_Upto_K(input, k):\n    # Reverse the array up to the k-th position (1-based index)\n    if k > 0 and k <= len(input):\n        input[:k] = input[:k][::-1]\n    return input",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to reverse an array upto a given position.\n\n### Signature\ndef reverse_Array_Upto_K(input, k):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
    "timestamp": "2025-10-17T18:48:12.197808",
    "response_time": "2.09",
    "context": "{\"function_name\": \"reverse_Array_Upto_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 720,
    "solution": "def add_dict_to_tuple(test_tup, test_dict):\n    # Add the dictionary to the tuple and return the new tuple\n    return test_tup + (test_dict,)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\n### Signature\ndef add_dict_to_tuple(test_tup, test_dict):\n\n### Test\nassert candidate((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {\"\"\"MSAM\"\"\": 1, \"\"\"is\"\"\": 2, \"\"\"best\"\"\": 3})",
    "timestamp": "2025-10-17T18:48:13.470490",
    "response_time": "1.27",
    "context": "{\"function_name\": \"add_dict_to_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 721,
    "solution": "def maxAverageOfPath(cost):\n    n = len(cost)\n    # Create a dp table to store the maximum sum for each cell\n    dp = [[0] * n for _ in range(n)]\n    \n    # Initialize the top-left cell\n    dp[0][0] = cost[0][0]\n    \n    # Fill the first row\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    \n    # Fill the first column\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    \n    # Fill the rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    \n    # The maximum sum is stored in the bottom-right cell\n    max_sum = dp[n - 1][n - 1]\n    \n    # The number of cells in the path is 2n - 1 (since it's a square matrix)\n    num_cells = 2 * n - 1\n    \n    # Return the maximum average\n    return max_sum / num_cells",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n### Signature\ndef maxAverageOfPath(cost):\n\n### Test\nassert candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2",
    "timestamp": "2025-10-17T18:48:19.436446",
    "response_time": "5.96",
    "context": "{\"function_name\": \"maxAverageOfPath\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 722,
    "solution": "def filter_data(students, h, w):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\n### Signature\ndef filter_data(students,h,w):\n\n### Test\nassert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}",
    "timestamp": "2025-10-17T18:48:20.627915",
    "response_time": "1.18",
    "context": "{\"function_name\": \"filter_data\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 723,
    "solution": "def count_same_pair(nums1, nums2):\n    # Count indices where the values in both lists are the same\n    return sum(1 for a, b in zip(nums1, nums2) if a == b)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\n### Signature\ndef count_same_pair(nums1, nums2):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
    "timestamp": "2025-10-17T18:48:22.509325",
    "response_time": "1.88",
    "context": "{\"function_name\": \"count_same_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 724,
    "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string, iterate over each character, convert to integer, and sum them\n    digit_sum = sum(int(digit) for digit in str(result))\n    \n    return digit_sum",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\n### Signature\ndef power_base_sum(base, power):\n\n### Test\nassert candidate(2,100)==115\nassert candidate(8,10)==37",
    "timestamp": "2025-10-17T18:48:24.216525",
    "response_time": "1.70",
    "context": "{\"function_name\": \"power_base_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 725,
    "solution": "import re\n\ndef extract_quotation(text1):\n    return re.findall(r'\"(.*?)\"', text1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to extract values between quotation marks \" \" of the given string.\n\n### Signature\ndef extract_quotation(text1):\n\n### Test\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']",
    "timestamp": "2025-10-17T18:48:25.182197",
    "response_time": "0.96",
    "context": "{\"function_name\": \"extract_quotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 726,
    "solution": "def multiply_elements(test_tup):\n    return tuple(test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1))\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n### Signature\ndef multiply_elements(test_tup):\n\n### Test\nassert candidate((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert candidate((2, 4, 5, 6, 7)) == (8, 20, 30, 42)",
    "timestamp": "2025-10-17T18:48:26.373762",
    "response_time": "1.19",
    "context": "{\"function_name\": \"multiply_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 728,
    "solution": "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n### Signature\ndef sum_list(lst1,lst2):\n\n### Test\nassert candidate([10,20,30],[15,25,35])==[25,45,65]",
    "timestamp": "2025-10-17T18:48:27.350452",
    "response_time": "0.97",
    "context": "{\"function_name\": \"sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 730,
    "solution": "def consecutive_duplicates(nums):\n    if not nums:\n        return []\n    \n    result = [nums[0]]\n    for i in range(1, len(nums)):\n        if nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove consecutive duplicates of a given list.\n\n### Signature\ndef consecutive_duplicates(nums):\n\n### Test\nassert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]",
    "timestamp": "2025-10-17T18:48:28.645847",
    "response_time": "1.29",
    "context": "{\"function_name\": \"consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 731,
    "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height of the cone\n    slant_height = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\n### Signature\ndef lateralsurface_cone(r,h):\n\n### Test\nassert candidate(5,12)==204.20352248333654",
    "timestamp": "2025-10-17T18:48:30.286422",
    "response_time": "1.63",
    "context": "{\"function_name\": \"lateralsurface_cone\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 732,
    "solution": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\n### Signature\ndef replace_specialchar(text):\n\n### Test\nassert candidate('Python language, Programming language.')==('Python:language::Programming:language:')",
    "timestamp": "2025-10-17T18:48:31.171471",
    "response_time": "0.88",
    "context": "{\"function_name\": \"replace_specialchar\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 733,
    "solution": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    result = -1  # Default to -1 if x is not found\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\n### Signature\ndef find_first_occurrence(A, x):\n\n### Test\nassert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
    "timestamp": "2025-10-17T18:48:33.026331",
    "response_time": "1.85",
    "context": "{\"function_name\": \"find_first_occurrence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 734,
    "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            result += product\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\n### Signature\ndef sum_Of_Subarray_Prod(arr):\n\n### Test\nassert candidate([1,2,3]) == 20",
    "timestamp": "2025-10-17T18:48:34.117079",
    "response_time": "1.09",
    "context": "{\"function_name\": \"sum_Of_Subarray_Prod\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 735,
    "solution": "def toggle_middle_bits(n):\n    # Convert the number to its binary representation\n    binary = bin(n)[2:]  # Remove the '0b' prefix\n    \n    # If the binary representation has less than 3 bits, return the number as is\n    if len(binary) <= 2:\n        return n\n    \n    # Extract the first and last bits\n    first_bit = binary[0]\n    last_bit = binary[-1]\n    \n    # Toggle the middle bits\n    middle_bits = ''.join('1' if bit == '0' else '0' for bit in binary[1:-1])\n    \n    # Reconstruct the binary number\n    toggled_binary = first_bit + middle_bits + last_bit\n    \n    # Convert the binary string back to an integer\n    return int(toggled_binary, 2)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\n### Signature\ndef set_middle_bits(n):\n\n### Test\nassert candidate(9) == 15\nassert candidate(10) == 12",
    "timestamp": "2025-10-17T18:48:36.807588",
    "response_time": "2.68",
    "context": "{\"function_name\": \"toggle_middle_bits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 736,
    "solution": "from bisect import bisect_left\n\ndef left_insertion(a, x):\n    return bisect_left(a, x)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\n### Signature\ndef left_insertion(a, x):\n\n### Test\nassert candidate([1,2,4,5],6)==4",
    "timestamp": "2025-10-17T18:48:37.739811",
    "response_time": "0.93",
    "context": "{\"function_name\": \"left_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 737,
    "solution": "import re\n\ndef check_str(string):\n    # Check if the string starts with a vowel using regex\n    return bool(re.match(r'^[aeiouAEIOU]', string))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\n### Signature\ndef check_str(string):\n\n### Test\nassert candidate(\"annie\")",
    "timestamp": "2025-10-17T18:48:38.981527",
    "response_time": "1.24",
    "context": "{\"function_name\": \"check_str\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 738,
    "solution": "def geometric_sum(n):\n    if n == 0:\n        return 0\n    return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\n### Signature\ndef geometric_sum(n):\n\n### Test\nassert candidate(7) == 1.9921875",
    "timestamp": "2025-10-17T18:48:40.999087",
    "response_time": "2.01",
    "context": "{\"function_name\": \"geometric_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 739,
    "solution": "import math\n\ndef find_Index(n):\n    # Function to calculate the number of digits in a number\n    def num_digits(x):\n        return len(str(x))\n    \n    # Start with the first triangular number\n    index = 1\n    while True:\n        # Calculate the triangular number for the current index\n        triangular_number = (index * (index + 1)) // 2\n        \n        # Check if the number of digits matches n\n        if num_digits(triangular_number) == n:\n            return index\n        \n        # Increment the index\n        index += 1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\n### Signature\ndef find_Index(n):\n\n### Test\nassert candidate(2) == 4",
    "timestamp": "2025-10-17T18:48:44.580226",
    "response_time": "3.58",
    "context": "{\"function_name\": \"find_Index\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 740,
    "solution": "def tuple_to_dict(test_tup):\n    # Create a dictionary by pairing adjacent elements\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\n### Signature\ndef tuple_to_dict(test_tup):\n\n### Test\nassert candidate((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}",
    "timestamp": "2025-10-17T18:48:46.032680",
    "response_time": "1.45",
    "context": "{\"function_name\": \"tuple_to_dict\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 741,
    "solution": "def all_Characters_Same(s):\n    # Check if all characters in the string are the same\n    return len(set(s)) == 1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether all the characters are same or not.\n\n### Signature\ndef all_Characters_Same(s) :\n\n### Test\nassert candidate(\"python\") == False",
    "timestamp": "2025-10-17T18:48:47.331392",
    "response_time": "1.29",
    "context": "{\"function_name\": \"all_Characters_Same\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 742,
    "solution": "import math\n\ndef area_tetrahedron(side):\n    # Calculate the area of a tetrahedron using the formula:\n    # Area = sqrt(3) * side^2\n    return math.sqrt(3) * (side ** 2)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to caluclate the area of a tetrahedron.\n\n### Signature\ndef area_tetrahedron(side):\n\n### Test\nassert candidate(3)==15.588457268119894",
    "timestamp": "2025-10-17T18:48:48.827476",
    "response_time": "1.49",
    "context": "{\"function_name\": \"area_tetrahedron\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 743,
    "solution": "def rotate_right(lst, m):\n    # Ensure m is within the bounds of the list length\n    m = m % len(lst)\n    # Rotate the list to the right by slicing\n    return lst[-m:] + lst[:-m]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\n### Signature\ndef rotate_right(list, m):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]",
    "timestamp": "2025-10-17T18:48:51.094485",
    "response_time": "2.26",
    "context": "{\"function_name\": \"rotate_right\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 744,
    "solution": "def check_none(test_tup):\n    return any(item is None for item in test_tup)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given tuple has any none value or not.\n\n### Signature\ndef check_none(test_tup):\n\n### Test\nassert candidate((10, 4, 5, 6, None)) == True",
    "timestamp": "2025-10-17T18:48:53.034669",
    "response_time": "1.94",
    "context": "{\"function_name\": \"check_none\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 745,
    "solution": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\n### Signature\ndef divisible_by_digits(startnum, endnum):\n\n### Test\nassert candidate(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
    "timestamp": "2025-10-17T18:48:55.484998",
    "response_time": "2.44",
    "context": "{\"function_name\": \"divisible_by_digits\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 746,
    "solution": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    return (a / 360) * math.pi * r**2",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\n### Signature\ndef sector_area(r,a):\n\n### Test\nassert candidate(4,45)==6.283185307179586",
    "timestamp": "2025-10-17T18:48:57.360459",
    "response_time": "1.87",
    "context": "{\"function_name\": \"sector_area\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 747,
    "solution": "def lcs_of_three(X, Y, Z):\n    # Get the lengths of the three strings\n    m, n, o = len(X), len(Y), len(Z)\n    \n    # Create a 3D DP array to store the lengths of LCS\n    dp = [[[0 for _ in range(o + 1)] for __ in range(n + 1)] for ___ in range(m + 1)]\n    \n    # Fill the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    \n    # The length of the LCS of the three strings is stored in dp[m][n][o]\n    return dp[m][n][o]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n### Signature\ndef lcs_of_three(X, Y, Z):\n\n### Test\nassert candidate('AGGT12', '12TXAYB', '12XBA') == 2",
    "timestamp": "2025-10-17T18:49:02.129116",
    "response_time": "4.76",
    "context": "{\"function_name\": \"lcs_of_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 748,
    "solution": "def capital_words_spaces(str1):\n    result = []\n    for char in str1:\n        if char.isupper() and result:\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to put spaces between words starting with capital letters in a given string.\n\n### Signature\ndef capital_words_spaces(str1):\n\n### Test\nassert candidate(\"Python\") == \"\"\"Python\"\"\"",
    "timestamp": "2025-10-17T18:49:04.139452",
    "response_time": "2.00",
    "context": "{\"function_name\": \"capital_words_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 749,
    "solution": "def sort_numeric_strings(nums_str):\n    # Convert strings to integers, sort them, and return the sorted list\n    return sorted(map(int, nums_str))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n### Signature\ndef sort_numeric_strings(nums_str):\n\n### Test\nassert candidate( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
    "timestamp": "2025-10-17T18:49:06.230464",
    "response_time": "2.08",
    "context": "{\"function_name\": \"sort_numeric_strings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 750,
    "solution": "def add_tuple(test_list, test_tup):\n    # Extend the list with the elements of the tuple\n    test_list.extend(test_tup)\n    return test_list",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to add the given tuple to the given list.\n\n### Signature\ndef add_tuple(test_list, test_tup):\n\n### Test\nassert candidate([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]",
    "timestamp": "2025-10-17T18:49:07.880181",
    "response_time": "1.64",
    "context": "{\"function_name\": \"add_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 751,
    "solution": "def check_min_heap(arr, i):\n    n = len(arr)\n    \n    # If the current node is a leaf node, return True\n    if i >= n // 2:\n        return True\n    \n    # Check if the current node is smaller than its children\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # Check left child\n    if left < n and arr[i] > arr[left]:\n        return False\n    \n    # Check right child\n    if right < n and arr[i] > arr[right]:\n        return False\n    \n    # Recursively check the left and right subtrees\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef candidate(arr):\n    return check_min_heap_helper(arr, 0)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n### Signature\ndef check_min_heap_helper(arr, i):\n\n### Test\nassert candidate([1, 2, 3, 4, 5, 6]) == True",
    "timestamp": "2025-10-17T18:49:12.160304",
    "response_time": "4.27",
    "context": "{\"function_name\": \"check_min_heap\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 752,
    "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\n### Signature\ndef jacobsthal_num(n):\n\n### Test\nassert candidate(5) == 11\nassert candidate(2) == 1",
    "timestamp": "2025-10-17T18:49:14.771837",
    "response_time": "2.61",
    "context": "{\"function_name\": \"jacobsthal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 753,
    "solution": "def min_k(test_list, K):\n    # Sort the list of tuples based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Return the first K elements from the sorted list\n    return sorted_list[:K]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n### Signature\ndef min_k(test_list, K):\n\n### Test\nassert candidate([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
    "timestamp": "2025-10-17T18:49:18.191900",
    "response_time": "3.41",
    "context": "{\"function_name\": \"min_k\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 754,
    "solution": "def extract_index_list(l1, l2, l3):\n    # Find common elements at the same index in all three lists\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\n### Signature\ndef extract_index_list(l1, l2, l3):\n\n### Test\nassert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
    "timestamp": "2025-10-17T18:49:19.662853",
    "response_time": "1.47",
    "context": "{\"function_name\": \"extract_index_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 755,
    "solution": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two distinct elements.\")\n    \n    # Remove duplicates and sort the list\n    unique_numbers = sorted(set(numbers))\n    \n    if len(unique_numbers) < 2:\n        raise ValueError(\"List must contain at least two distinct elements.\")\n    \n    # Return the second smallest element\n    return unique_numbers[1]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the second smallest number in a list.\n\n### Signature\ndef second_smallest(numbers):\n\n### Test\nassert candidate([1, 2, -8, -2, 0, -2])==-2\nassert candidate([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
    "timestamp": "2025-10-17T18:49:23.586848",
    "response_time": "3.92",
    "context": "{\"function_name\": \"second_smallest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 756,
    "solution": "import re\n\ndef text_match_zero_one(text):\n    # Check if the string matches the pattern 'a' followed by one or more 'b's\n    pattern = r'a+b+'\n    return bool(re.fullmatch(pattern, text))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\n### Signature\ndef text_match_zero_one(text):\n\n### Test\nassert candidate(\"ac\")==False\nassert candidate(\"dc\")==False\nassert candidate(\"abbbba\")==True",
    "timestamp": "2025-10-17T18:49:25.467401",
    "response_time": "1.88",
    "context": "{\"function_name\": \"text_match_zero_one\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 757,
    "solution": "def count_reverse_pairs(test_list):\n    reverse_set = set()\n    count = 0\n    \n    for word in test_list:\n        reverse_word = word[::-1]\n        if reverse_word in reverse_set:\n            count += 1\n        reverse_set.add(word)\n    \n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\n### Signature\ndef count_reverse_pairs(test_list):\n\n### Test\nassert candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2",
    "timestamp": "2025-10-17T18:49:28.062670",
    "response_time": "2.59",
    "context": "{\"function_name\": \"count_reverse_pairs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 758,
    "solution": "def unique_sublists(list1):\n    result = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in result:\n            result[tuple_sublist] += 1\n        else:\n            result[tuple_sublist] = 1\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n### Signature\ndef unique_sublists(list1):\n\n### Test\nassert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
    "timestamp": "2025-10-17T18:49:29.750394",
    "response_time": "1.68",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 759,
    "solution": "def is_decimal(num):\n    try:\n        # Split the string into the integer and decimal parts\n        parts = num.split('.')\n        # Check if there are exactly two parts and the decimal part has exactly 2 digits\n        if len(parts) == 2 and len(parts[1]) == 2:\n            # Check if both parts are numeric\n            if parts[0].isdigit() and parts[1].isdigit():\n                return True\n        return False\n    except:\n        return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\n### Signature\ndef is_decimal(num):\n\n### Test\nassert candidate('123.11')==True\nassert candidate('e666.86')==False",
    "timestamp": "2025-10-17T18:49:32.837180",
    "response_time": "3.08",
    "context": "{\"function_name\": \"is_decimal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 760,
    "solution": "def unique_Element(arr):\n    # Check if all elements in the list are the same by converting to a set\n    # A set will only contain unique elements\n    return len(set(arr)) == 1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\n### Signature\ndef unique_Element(arr):\n\n### Test\nassert candidate([1,1,1]) == True",
    "timestamp": "2025-10-17T18:49:34.874255",
    "response_time": "2.03",
    "context": "{\"function_name\": \"unique_Element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 762,
    "solution": "def check_monthnumber_number(monthnum3):\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n### Signature\ndef check_monthnumber_number(monthnum3):\n\n### Test\nassert candidate(6)==True",
    "timestamp": "2025-10-17T18:49:37.242725",
    "response_time": "2.36",
    "context": "{\"function_name\": \"check_monthnumber_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 763,
    "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize the minimum difference as a large value\n    min_diff = float('inf')\n    \n    # Iterate through the array and find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\n### Signature\ndef find_min_diff(arr,n):\n\n### Test\nassert candidate((1,5,3,19,18,25),6) == 1",
    "timestamp": "2025-10-17T18:49:39.988466",
    "response_time": "2.74",
    "context": "{\"function_name\": \"find_min_diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 764,
    "solution": "def number_ctr(str):\n    return sum(1 for char in str if char.isdigit())",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count number of digits in a given string.\n\n### Signature\ndef number_ctr(str):\n\n### Test\nassert candidate('program2bedone') == 1\nassert candidate('3wonders') == 1",
    "timestamp": "2025-10-17T18:49:41.672157",
    "response_time": "1.68",
    "context": "{\"function_name\": \"number_ctr\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 765,
    "solution": "def is_polite(n):\n    def is_power_of_two(x):\n        # A number is a power of two if it has only one bit set in binary representation\n        return (x & (x - 1)) == 0 and x != 0\n\n    count = 0\n    current = 1\n\n    while True:\n        if not is_power_of_two(current):\n            count += 1\n            if count == n:\n                return current\n        current += 1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\n### Signature\ndef is_polite(n):\n\n### Test\nassert candidate(7) == 11",
    "timestamp": "2025-10-17T18:49:44.952853",
    "response_time": "3.28",
    "context": "{\"function_name\": \"is_polite\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 766,
    "solution": "def pair_wise(l1):\n    return [(l1[i], l1[i+1]) for i in range(len(l1) - 1)]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to return a list of all pairs of consecutive items in a given list.\n\n### Signature\ndef pair_wise(l1):\n\n### Test\nassert candidate([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert candidate([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
    "timestamp": "2025-10-17T18:49:46.105276",
    "response_time": "1.15",
    "context": "{\"function_name\": \"pair_wise\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 767,
    "solution": "from collections import Counter\n\ndef get_pairs_count(arr, sum):\n    count = 0\n    freq = Counter(arr)\n    \n    for num in arr:\n        complement = sum - num\n        count += freq[complement]\n        \n        # If the complement is the same as the current number, we need to decrease the count by 1\n        if complement == num:\n            count -= 1\n    \n    # Since each pair is counted twice, divide the count by 2\n    return count // 2",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\n### Signature\ndef get_pairs_count(arr, sum):\n\n### Test\nassert candidate([1,1,1,1],2) == 6\nassert candidate([1,5,7,-1,5],6) == 3",
    "timestamp": "2025-10-17T18:49:48.681654",
    "response_time": "2.57",
    "context": "{\"function_name\": \"get_pairs_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 769,
    "solution": "def Diff(li1, li2):\n    return list(set(li1) - set(li2)) + list(set(li2) - set(li1))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to get the difference between two lists.\n\n### Signature\ndef Diff(li1,li2):\n\n### Test\nassert (candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]",
    "timestamp": "2025-10-17T18:49:50.114175",
    "response_time": "1.43",
    "context": "{\"function_name\": \"Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 770,
    "solution": "def odd_num_sum(n):\n    # Initialize sum\n    total_sum = 0\n    # Generate first n odd numbers and calculate their fourth power\n    for i in range(n):\n        odd_number = 2 * i + 1\n        total_sum += odd_number ** 4\n    return total_sum",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\n### Signature\ndef odd_num_sum(n) :\n\n### Test\nassert candidate(2) == 82",
    "timestamp": "2025-10-17T18:49:51.731384",
    "response_time": "1.61",
    "context": "{\"function_name\": \"odd_num_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 771,
    "solution": "def check_expression(exp):\n    stack = []\n    # Dictionary to map closing brackets to their corresponding opening brackets\n    matching_brackets = {')': '(', '}': '{', ']': '['}\n    \n    for char in exp:\n        if char in matching_brackets.values():  # If it's an opening bracket\n            stack.append(char)\n        elif char in matching_brackets.keys():  # If it's a closing bracket\n            if not stack or stack[-1] != matching_brackets[char]:\n                return False\n            stack.pop()\n    \n    # If stack is empty, all brackets were balanced\n    return not stack",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\n### Signature\ndef check_expression(exp):\n\n### Test\nassert candidate(\"{()}[{}]\") == True",
    "timestamp": "2025-10-17T18:49:54.261886",
    "response_time": "2.53",
    "context": "{\"function_name\": \"check_expression\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 772,
    "solution": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    # Filter out words with length K\n    filtered_words = [word for word in words if len(word) != K]\n    # Join the filtered words back into a string\n    return ' '.join(filtered_words)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove all the words with k length in the given string.\n\n### Signature\ndef remove_length(test_str, K):\n\n### Test\nassert candidate('The person is most value tet', 3) == 'person is most value'",
    "timestamp": "2025-10-17T18:49:56.802247",
    "response_time": "2.53",
    "context": "{\"function_name\": \"remove_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 773,
    "solution": "def occurance_substring(text, pattern):\n    # Find the first occurrence of the pattern in the text\n    start_index = text.find(pattern)\n    \n    # If the pattern is not found, return None\n    if start_index == -1:\n        return None\n    \n    # Calculate the end index of the pattern\n    end_index = start_index + len(pattern)\n    \n    # Return the pattern, start index, and end index\n    return (pattern, start_index, end_index)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n### Signature\ndef occurance_substring(text,pattern):\n\n### Test\nassert candidate('python programming, python language','python')==('python', 0, 6)\nassert candidate('python programming,programming language','programming')==('programming', 7, 18)",
    "timestamp": "2025-10-17T18:49:58.842011",
    "response_time": "2.03",
    "context": "{\"function_name\": \"occurance_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 775,
    "solution": "def odd_position(nums):\n    # Iterate through the list, checking only odd indices\n    for i in range(1, len(nums), 2):\n        # If the number at the odd index is not odd, return False\n        if nums[i] % 2 == 0:\n            return False\n    # If all odd indices contain odd numbers, return True\n    return True",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\n### Signature\ndef odd_position(nums):\n\n### Test\nassert candidate([2,1,4,3,6,7,6,3]) == True",
    "timestamp": "2025-10-17T18:50:00.653553",
    "response_time": "1.81",
    "context": "{\"function_name\": \"odd_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 776,
    "solution": "def count_vowels(test_str):\n    vowels = set('aeiou')\n    count = 0\n    \n    for i in range(1, len(test_str) - 1):\n        if test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    \n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\n### Signature\ndef count_vowels(test_str):\n\n### Test\nassert candidate('bestinstareels') == 7",
    "timestamp": "2025-10-17T18:50:02.127347",
    "response_time": "1.47",
    "context": "{\"function_name\": \"count_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 777,
    "solution": "def find_sum(arr):\n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Sum elements that appear only once\n    return sum(num for num, count in element_count.items() if count == 1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of non-repeated elements in a given list.\n\n### Signature\ndef find_sum(arr):\n\n### Test\nassert candidate([1,2,3,1,1,4,5,6]) == 21",
    "timestamp": "2025-10-17T18:50:04.612340",
    "response_time": "2.48",
    "context": "{\"function_name\": \"find_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 778,
    "solution": "def pack_consecutive_duplicates(list1):\n    if not list1:\n        return []\n    \n    packed_list = []\n    current_sublist = [list1[0]]\n    \n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_sublist.append(list1[i])\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [list1[i]]\n    \n    packed_list.append(current_sublist)\n    return packed_list\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\n### Signature\ndef pack_consecutive_duplicates(list1):\n\n### Test\nassert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]",
    "timestamp": "2025-10-17T18:50:06.406659",
    "response_time": "1.79",
    "context": "{\"function_name\": \"pack_consecutive_duplicates\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 779,
    "solution": "def unique_sublists(list1):\n    result = {}\n    for sublist in list1:\n        # Convert the sublist to a tuple (tuples are hashable and can be used as dictionary keys)\n        sublist_tuple = tuple(sublist)\n        # Count occurrences\n        if sublist_tuple in result:\n            result[sublist_tuple] += 1\n        else:\n            result[sublist_tuple] = 1\n    return result\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\n### Signature\ndef unique_sublists(list1):\n\n### Test\nassert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
    "timestamp": "2025-10-17T18:50:12.379757",
    "response_time": "5.97",
    "context": "{\"function_name\": \"unique_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 780,
    "solution": "from itertools import product\n\ndef find_combinations(test_list):\n    # Using product to compute all combinations of sums\n    result = [tuple(sum(x) for x in zip(*comb)) for comb in product(*test_list)]\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\n### Signature\ndef find_combinations(test_list):\n\n### Test\nassert candidate([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]",
    "timestamp": "2025-10-17T18:50:14.370643",
    "response_time": "1.98",
    "context": "{\"function_name\": \"find_combinations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 781,
    "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\n### Signature\ndef count_divisors(n) :\n\n### Test\nassert candidate(10)",
    "timestamp": "2025-10-17T18:50:15.854618",
    "response_time": "1.48",
    "context": "{\"function_name\": \"count_divisors\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 782,
    "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        # Calculate the contribution of arr[i] to the sum of all odd-length subarrays\n        # Total subarrays including arr[i] = (i + 1) * (n - i)\n        # Odd-length subarrays including arr[i] = ((i + 1) * (n - i) + 1) // 2\n        contribution = ((i + 1) * (n - i) + 1) // 2\n        total_sum += arr[i] * contribution\n    \n    return total_sum",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\n### Signature\ndef odd_length_sum(arr):\n\n### Test\nassert candidate([1,2,4]) == 14",
    "timestamp": "2025-10-17T18:50:19.080202",
    "response_time": "3.22",
    "context": "{\"function_name\": \"odd_length_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 783,
    "solution": "def rgb_to_hsv(r, g, b):\n    # Normalize the RGB values to the range [0, 1]\n    r_norm = r / 255.0\n    g_norm = g / 255.0\n    b_norm = b / 255.0\n\n    # Find the maximum and minimum values among r_norm, g_norm, b_norm\n    c_max = max(r_norm, g_norm, b_norm)\n    c_min = min(r_norm, g_norm, b_norm)\n    delta = c_max - c_min\n\n    # Calculate Hue (H)\n    if delta == 0:\n        h = 0\n    elif c_max == r_norm:\n        h = (60 * ((g_norm - b_norm) / delta) + 360) % 360\n    elif c_max == g_norm:\n        h = (60 * ((b_norm - r_norm) / delta) + 120) % 360\n    elif c_max == b_norm:\n        h = (60 * ((r_norm - g_norm) / delta) + 240) % 360\n\n    # Calculate Saturation (S)\n    if c_max == 0:\n        s = 0\n    else:\n        s = (delta / c_max) * 100\n\n    # Calculate Value (V)\n    v = c_max * 100\n\n    return (round(h, 2), round(s, 2), round(v, 2))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n### Signature\ndef rgb_to_hsv(r, g, b):\n\n### Test\nassert candidate(255, 255, 255)==(0, 0.0, 100.0)",
    "timestamp": "2025-10-17T18:50:23.777015",
    "response_time": "4.69",
    "context": "{\"function_name\": \"rgb_to_hsv\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 784,
    "solution": "def mul_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    return None",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the product of first even and odd number of a given list.\n\n### Signature\ndef mul_even_odd(list1):\n\n### Test\nassert candidate([1,3,5,7,4,1,6,8])==4",
    "timestamp": "2025-10-17T18:50:26.743272",
    "response_time": "2.96",
    "context": "{\"function_name\": \"mul_even_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 785,
    "solution": "def tuple_str_int(test_str):\n    # Remove the parentheses and split the string by commas\n    elements = test_str.strip(\"()\").split(\", \")\n    # Convert each element to an integer and return as a tuple\n    return tuple(map(int, elements))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert tuple string to integer tuple.\n\n### Signature\ndef tuple_str_int(test_str):\n\n### Test\nassert candidate(\"(7, 8, 9)\") == (7, 8, 9)\nassert candidate(\"(1, 2, 3)\") == (1, 2, 3)",
    "timestamp": "2025-10-17T18:50:29.858412",
    "response_time": "3.11",
    "context": "{\"function_name\": \"tuple_str_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 786,
    "solution": "from bisect import bisect_right\n\ndef right_insertion(a, x):\n    return bisect_right(a, x)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\n### Signature\ndef right_insertion(a, x):\n\n### Test\nassert candidate([1,2,4,5],6)==4",
    "timestamp": "2025-10-17T18:50:31.552707",
    "response_time": "1.69",
    "context": "{\"function_name\": \"right_insertion\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 787,
    "solution": "import re\n\ndef text_match_three(text):\n    # Check if the string matches the pattern 'a' followed by exactly three 'b's\n    pattern = r'a{1}b{3}'\n    return bool(re.fullmatch(pattern, text))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a string that has an a followed by three 'b'.\n\n### Signature\ndef text_match_three(text):\n\n### Test\nassert not candidate(\"ac\")\nassert not candidate(\"dc\")",
    "timestamp": "2025-10-17T18:50:33.329075",
    "response_time": "1.77",
    "context": "{\"function_name\": \"text_match_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 788,
    "solution": "def new_tuple(test_list, test_str):\n    # Combine the list and string into a tuple\n    return tuple(test_list) + (test_str,)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to create a new tuple from the given string and list.\n\n### Signature\ndef new_tuple(test_list, test_str):\n\n### Test\nassert candidate([\"WEB\", \"is\"], \"best\") == (\"\"\"WEB\"\"\", \"\"\"is\"\"\", \"\"\"best\"\"\")",
    "timestamp": "2025-10-17T18:50:35.012435",
    "response_time": "1.68",
    "context": "{\"function_name\": \"new_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 790,
    "solution": "def even_position(nums):\n    for i in range(0, len(nums), 2):  # Iterate over even indices\n        if nums[i] % 2 != 0:  # Check if the number at the even index is not even\n            return False\n    return True  # Return True if all even indices contain even numbers",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether every even index contains even numbers of a given list.\n\n### Signature\ndef even_position(nums):\n\n### Test\nassert candidate([3,2,1]) == False",
    "timestamp": "2025-10-17T18:50:37.502291",
    "response_time": "2.48",
    "context": "{\"function_name\": \"even_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 791,
    "solution": "def remove_nested(test_tup):\n    # Filter out elements that are tuples\n    return tuple(item for item in test_tup if not isinstance(item, tuple))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove tuples from the given tuple.\n\n### Signature\ndef remove_nested(test_tup):\n\n### Test\nassert candidate((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert candidate((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)",
    "timestamp": "2025-10-17T18:50:39.128184",
    "response_time": "1.62",
    "context": "{\"function_name\": \"remove_nested\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 792,
    "solution": "def count_list(input_list):\n    return sum(1 for item in input_list if isinstance(item, list))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of lists in a given number of lists.\n\n### Signature\ndef count_list(input_list):\n\n### Test\nassert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4",
    "timestamp": "2025-10-17T18:50:40.097007",
    "response_time": "0.96",
    "context": "{\"function_name\": \"count_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 793,
    "solution": "def last(arr, x):\n    # Initialize the result to -1 (indicating not found)\n    result = -1\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element matches x, update the result\n        if arr[i] == x:\n            result = i\n    # Return the last position of x\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the last position of an element in a sorted array.\n\n### Signature\ndef last(arr,x):\n\n### Test\nassert candidate([1,2,3],1) == 0",
    "timestamp": "2025-10-17T18:50:42.418025",
    "response_time": "2.31",
    "context": "{\"function_name\": \"last\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 794,
    "solution": "import re\n\ndef text_starta_endb(text):\n    # Use regex to check if the string matches the pattern\n    return bool(re.fullmatch(r'a.*b', text))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n### Signature\ndef text_starta_endb(text):\n\n### Test\nassert candidate(\"aabbbb\")",
    "timestamp": "2025-10-17T18:50:44.425726",
    "response_time": "2.00",
    "context": "{\"function_name\": \"text_starta_endb\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 796,
    "solution": "def return_sum(dict):\n    return sum(dict.values())",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite function to find the sum of all items in the given dictionary.\n\n### Signature\ndef return_sum(dict):\n\n### Test\nassert candidate({'a': 100, 'b':200, 'c':300}) == 600",
    "timestamp": "2025-10-17T18:50:45.527630",
    "response_time": "1.09",
    "context": "{\"function_name\": \"return_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 797,
    "solution": "def sum_in_range(l, r):\n    return sum(i for i in range(l, r + 1) if i % 2 != 0)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\n### Signature\ndef sum_odd(n):\n\n### Test\nassert candidate(2,5) == 8",
    "timestamp": "2025-10-17T18:50:46.991117",
    "response_time": "1.46",
    "context": "{\"function_name\": \"sum_in_range\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 798,
    "solution": "def _sum(arr):\n    return sum(arr)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of an array.\n\n### Signature\ndef _sum(arr):\n\n### Test\nassert candidate([1, 2, 3]) == 6",
    "timestamp": "2025-10-17T18:50:47.942234",
    "response_time": "0.94",
    "context": "{\"function_name\": \"_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 799,
    "solution": "def left_rotate(n, d):\n    # Since the number is 32-bit, we use a mask of 32 bits\n    BITS = 32\n    # Perform the left rotation\n    return ((n << d) | (n >> (BITS - d))) & 0xFFFFFFFF",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n### Signature\ndef left_rotate(n,d):\n\n### Test\nassert candidate(16,2) == 64\nassert candidate(10,2) == 40\nassert candidate(99,3) == 792",
    "timestamp": "2025-10-17T18:50:50.446063",
    "response_time": "2.50",
    "context": "{\"function_name\": \"left_rotate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 800,
    "solution": "def remove_all_spaces(text):\n    return text.replace(\" \", \"\")",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove all whitespaces from a string.\n\n### Signature\ndef remove_all_spaces(text):\n\n### Test\nassert candidate('python  program')==('pythonprogram')\nassert candidate('python   programming    language')==('pythonprogramminglanguage')",
    "timestamp": "2025-10-17T18:50:52.718058",
    "response_time": "2.27",
    "context": "{\"function_name\": \"remove_all_spaces\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 801,
    "solution": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    if count == 3:  # All three numbers are equal\n        return 3\n    elif count == 1:  # Two numbers are equal\n        return 2\n    else:  # No numbers are equal\n        return 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of equal numbers from three given integers.\n\n### Signature\ndef test_three_equal(x,y,z):\n\n### Test\nassert candidate(1,1,1) == 3",
    "timestamp": "2025-10-17T18:50:55.553774",
    "response_time": "2.83",
    "context": "{\"function_name\": \"test_three_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 802,
    "solution": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return i + 1\n    return 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n### Signature\ndef count_rotation(arr):\n\n### Test\nassert candidate([3,2,1]) == 1\nassert candidate([4,5,1,2,3]) == 2",
    "timestamp": "2025-10-17T18:50:57.558162",
    "response_time": "2.00",
    "context": "{\"function_name\": \"count_rotation\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 803,
    "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    return sqrt_n * sqrt_n == n",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\n### Signature\ndef is_perfect_square(n) :\n\n### Test\nassert not candidate(10)\nassert candidate(36)\nassert not candidate(14)",
    "timestamp": "2025-10-17T18:50:59.596205",
    "response_time": "2.03",
    "context": "{\"function_name\": \"is_perfect_square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 804,
    "solution": "def is_product_even(arr):\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the product of numbers in a list is even or not.\n\n### Signature\ndef is_product_even(arr):\n\n### Test\nassert candidate([1,2,3])",
    "timestamp": "2025-10-17T18:51:01.520533",
    "response_time": "1.92",
    "context": "{\"function_name\": \"is_product_even\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 805,
    "solution": "def max_sum_list(lists):\n    # Return the list with the maximum sum of elements\n    return max(lists, key=sum)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\n### Signature\ndef max_sum_list(lists):\n\n### Test\nassert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]",
    "timestamp": "2025-10-17T18:51:03.458686",
    "response_time": "1.93",
    "context": "{\"function_name\": \"max_sum_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 806,
    "solution": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find maximum run of uppercase characters in the given string.\n\n### Signature\ndef max_run_uppercase(test_str):\n\n### Test\nassert candidate('GeMKSForGERksISBESt') == 5",
    "timestamp": "2025-10-17T18:51:05.033935",
    "response_time": "1.57",
    "context": "{\"function_name\": \"max_run_uppercase\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 807,
    "solution": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:  # Check if the number is odd\n            return num\n    return None  # Return None if no odd number is found",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the first odd number in a given list of numbers.\n\n### Signature\ndef first_odd(nums):\n\n### Test\nassert candidate([1,3,5]) == 1",
    "timestamp": "2025-10-17T18:51:06.210334",
    "response_time": "1.17",
    "context": "{\"function_name\": \"first_odd\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 808,
    "solution": "def check_K(test_tup, K):\n    return K in test_tup",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given tuples contain the k or not.\n\n### Signature\ndef check_K(test_tup, K):\n\n### Test\nassert candidate((10, 4, 5, 6, 8), 6) == True",
    "timestamp": "2025-10-17T18:51:07.741940",
    "response_time": "1.53",
    "context": "{\"function_name\": \"check_K\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o_second_half_td",
    "dataset_row_id": 809,
    "solution": "def check_smaller(test_tup1, test_tup2):\n    # Check if all elements in test_tup2 are smaller than their corresponding elements in test_tup1\n    return all(a > b for a, b in zip(test_tup1, test_tup2))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n### Signature\ndef check_smaller(test_tup1, test_tup2):\n\n### Test\nassert candidate((1, 2, 3), (2, 3, 4)) == False",
    "timestamp": "2025-10-17T18:51:09.642051",
    "response_time": "1.89",
    "context": "{\"function_name\": \"check_smaller\"}"
  }
]