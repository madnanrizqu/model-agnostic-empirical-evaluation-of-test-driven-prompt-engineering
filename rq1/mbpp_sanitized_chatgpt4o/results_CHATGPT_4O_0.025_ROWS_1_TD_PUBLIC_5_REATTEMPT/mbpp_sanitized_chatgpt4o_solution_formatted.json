[
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 2,
    "solution": "from typing import List\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> str:\n    # Find the intersection of the two lists\n    shared_elements = set(test_tup1).intersection(test_tup2)\n    # Convert the result to a sorted list\n    result = sorted(shared_elements)\n    # Return the result as a string\n    return str(result)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
    "timestamp": "2025-08-10T15:29:13.533668",
    "response_time": "4.93",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 3,
    "solution": "from math import isqrt\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True  # Numbers less than or equal to 1 are not prime\n    if n == 2:\n        return False  # 2 is a prime number\n    if n % 2 == 0:\n        return True  # Even numbers greater than 2 are not prime\n    \n    # Check divisors from 3 to sqrt(n)\n    for i in range(3, isqrt(n) + 1, 2):\n        if n % i == 0:\n            return True  # Found a divisor, so it's not prime\n    \n    return False  # No divisors found, so it's prime",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
    "timestamp": "2025-08-10T15:29:18.416101",
    "response_time": "4.88",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 4,
    "solution": "from heapq import nlargest\nfrom typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> str:\n    # Use heapq.nlargest to find the n largest integers\n    largest_nums = nlargest(n, nums)\n    # Return the result as a string in descending order\n    return str(largest_nums)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
    "timestamp": "2025-08-10T15:29:23.335194",
    "response_time": "4.92",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 6,
    "solution": "def differ_At_One_Bit_Pos(x: int) -> str:\n    \"\"\"\n    Check whether the two numbers differ at one bit position only or not.\n    :param x: A list of two integers [a, b]\n    :return: \"Yes\" if they differ at one bit position, otherwise \"No\"\n    \"\"\"\n    if len(x) != 2:\n        return \"Invalid input\"\n    \n    a, b = x\n    # XOR the two numbers, if the result is a power of two, they differ at one bit position\n    xor_result = a ^ b\n    if xor_result & (xor_result - 1) == 0 and xor_result != 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
    "timestamp": "2025-08-10T15:29:29.666333",
    "response_time": "6.33",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 7,
    "solution": "import re\n\ndef find_char_long(text: str) -> str:\n    # Use regex to find all words with at least 4 characters\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Join the words with a space and return as a string\n    return ' '.join(words)\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
    "timestamp": "2025-08-10T15:29:32.514025",
    "response_time": "2.85",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 8,
    "solution": "from typing import List\n\ndef square_nums(nums: List[int]) -> str:\n    squared = [num ** 2 for num in nums]\n    return str(squared)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
    "timestamp": "2025-08-10T15:29:34.563703",
    "response_time": "2.05",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 9,
    "solution": "def find_Rotations(str: str) -> int:\n    \"\"\"\n    Finds the minimum number of rotations (greater than 0) required to get the same string.\n    \n    :param str: The input string\n    :return: The minimum number of rotations required\n    \"\"\"\n    n = len(str)\n    # Concatenate the string to itself\n    temp = str + str\n    \n    # Iterate through the string to find the first rotation that matches the original\n    for i in range(1, n + 1):\n        if temp[i:i + n] == str:\n            return i\n    \n    return n  # In case no rotation matches, which shouldn't happen for valid inputs",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
    "timestamp": "2025-08-10T15:29:39.422016",
    "response_time": "4.86",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 11,
    "solution": "def remove_Occ(s: str, ch: str) -> str:\n    # Find the first occurrence of the character\n    first_occ = s.find(ch)\n    # Find the last occurrence of the character\n    last_occ = s.rfind(ch)\n    \n    # If the character is not found, return the original string\n    if first_occ == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_occ] + s[first_occ + 1:]\n    \n    # Adjust the last occurrence index after removing the first occurrence\n    last_occ -= 1\n    \n    # Remove the last occurrence\n    s = s[:last_occ] + s[last_occ + 1:]\n    \n    return s",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
    "timestamp": "2025-08-10T15:29:46.256011",
    "response_time": "6.83",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 12,
    "solution": "from typing import List\n\ndef sort_matrix(M: List[List[int]]) -> str:\n    # Sort the matrix based on the sum of its rows\n    sorted_matrix = sorted(M, key=lambda row: sum(row))\n    # Convert the sorted matrix to a string representation\n    return str(sorted_matrix)\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
    "timestamp": "2025-08-10T15:29:48.408439",
    "response_time": "2.15",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 14,
    "solution": "def find_Volume(l: float, b: float, h: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    l (float): The length of the prism.\n    b (float): The base of the triangular cross-section.\n    h (float): The height of the triangular cross-section.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # The area of the triangular base is (1/2) * base * height\n    triangular_base_area = 0.5 * b * h\n    \n    # The volume of the prism is the area of the base multiplied by the length\n    volume = triangular_base_area * l\n    \n    return volume",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
    "timestamp": "2025-08-10T15:29:52.431679",
    "response_time": "4.02",
    "context": "{\"function_name\": \"find_Volume\"}"
  }
]