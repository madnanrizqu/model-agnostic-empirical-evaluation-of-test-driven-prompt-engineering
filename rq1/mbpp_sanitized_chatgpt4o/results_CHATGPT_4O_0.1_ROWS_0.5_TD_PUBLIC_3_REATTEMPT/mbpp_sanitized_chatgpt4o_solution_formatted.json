[
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 2,
    "solution": "from typing import List\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> str:\n    # Find the intersection of the two lists\n    shared_elements = set(test_tup1).intersection(test_tup2)\n    # Convert the result to a sorted list\n    result = sorted(shared_elements)\n    # Return the result as a string\n    return str(result)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
    "timestamp": "2025-08-13T11:05:27.935325",
    "response_time": "3.70",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 3,
    "solution": "from math import isqrt\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True  # 0, 1, and negative numbers are not prime\n    if n == 2:\n        return False  # 2 is the only even prime number\n    if n % 2 == 0:\n        return True  # All other even numbers are not prime\n    for i in range(3, isqrt(n) + 1, 2):\n        if n % i == 0:\n            return True  # Divisible by a number other than 1 and itself\n    return False  # If no divisors found, it's prime",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
    "timestamp": "2025-08-13T11:05:32.776091",
    "response_time": "4.84",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 4,
    "solution": "from heapq import nlargest\nfrom typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> str:\n    # Use heapq.nlargest to find the n largest numbers\n    largest_numbers = nlargest(n, nums)\n    # Return the result as a string in descending order\n    return str(largest_numbers)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
    "timestamp": "2025-08-13T11:05:35.130202",
    "response_time": "2.35",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 6,
    "solution": "def differ_At_One_Bit_Pos(x: int) -> str:\n    \"\"\"\n    Check if the given number is a power of two by verifying if it differs from zero\n    at only one bit position.\n    \"\"\"\n    # A number is a power of two if it has exactly one bit set in its binary representation.\n    # This can be checked using the condition: x > 0 and (x & (x - 1)) == 0\n    if x > 0 and (x & (x - 1)) == 0:\n        return \"True\"\n    else:\n        return \"False\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
    "timestamp": "2025-08-13T11:05:37.792437",
    "response_time": "2.66",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 7,
    "solution": "import re\n\ndef find_char_long(text: str) -> str:\n    # Use regex to find all words with at least 4 characters\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Join the words into a single string separated by spaces\n    return ' '.join(words)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
    "timestamp": "2025-08-13T11:05:39.498786",
    "response_time": "1.70",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 8,
    "solution": "from typing import List\n\ndef square_nums(nums: List[int]) -> str:\n    squared_nums = [num ** 2 for num in nums]\n    return str(squared_nums)\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
    "timestamp": "2025-08-13T11:05:40.929342",
    "response_time": "1.43",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 9,
    "solution": "def find_Rotations(str: str) -> int:\n    \"\"\"\n    Finds the minimum number of rotations (greater than 0) required to get the same string.\n    \n    Parameters:\n    str (str): The input string.\n    \n    Returns:\n    int: The minimum number of rotations required.\n    \"\"\"\n    n = len(str)\n    for i in range(1, n + 1):\n        # Rotate the string by i positions\n        rotated = str[i:] + str[:i]\n        # Check if the rotated string matches the original\n        if rotated == str:\n            return i\n    return n  # In case no rotation matches, return the length of the string",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
    "timestamp": "2025-08-13T11:05:43.818027",
    "response_time": "2.89",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 11,
    "solution": "def remove_Occ(s: str, ch: str) -> str:\n    # Find the first occurrence of the character\n    first_index = s.find(ch)\n    # Find the last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    # If the character is not found, return the original string\n    if first_index == -1:\n        return s\n    \n    # Remove the first and last occurrence of the character\n    result = s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
    "timestamp": "2025-08-13T11:05:46.113382",
    "response_time": "2.29",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 12,
    "solution": "from typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(M, key=lambda row: sum(row))\n    return sorted_matrix",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
    "timestamp": "2025-08-13T11:05:47.125252",
    "response_time": "1.01",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 14,
    "solution": "def find_Volume(l: float, b: float, h: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    l (float): The length of the prism.\n    b (float): The base of the triangular face.\n    h (float): The height of the triangular face.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # The area of the triangular base is (1/2) * base * height\n    triangular_base_area = 0.5 * b * h\n    \n    # The volume of the prism is the area of the base multiplied by the length\n    volume = triangular_base_area * l\n    \n    return volume",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
    "timestamp": "2025-08-13T11:05:49.350334",
    "response_time": "2.22",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 16,
    "solution": "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    # Use regex to check if the string matches the pattern of lowercase letters joined by underscores\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
    "timestamp": "2025-08-13T11:05:50.858533",
    "response_time": "1.51",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 17,
    "solution": "def square_perimeter(a: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    :param a: Side length of the square\n    :return: Perimeter of the square\n    \"\"\"\n    return 4 * a",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
    "timestamp": "2025-08-13T11:05:52.253837",
    "response_time": "1.39",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 18,
    "solution": "def remove_dirty_chars(string: str) -> list:\n    return list(string)\n\ndef remove_characters(first_string: str, second_string: str) -> str:\n    second_string_set = set(second_string)\n    result = [char for char in first_string if char not in second_string_set]\n    return ''.join(result)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
    "timestamp": "2025-08-13T11:05:53.830532",
    "response_time": "1.58",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 19,
    "solution": "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> str:\n    # Use a set to track seen numbers\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return \"True\"  # Duplicate found\n        seen.add(num)\n    return \"False\"  # No duplicates found",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
    "timestamp": "2025-08-13T11:05:55.223428",
    "response_time": "1.39",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 20,
    "solution": "Warning: Code markers not found in code block",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
    "timestamp": "2025-08-13T11:05:56.978813",
    "response_time": "1.75",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 56,
    "solution": "def check(num):\n    # Convert the number to a string to reverse it\n    reversed_num = int(str(num)[::-1])\n    # Check if the number is one less than twice its reverse\n    if num == 2 * reversed_num - 1:\n        return \"True\"\n    else:\n        return \"False\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
    "timestamp": "2025-08-13T11:05:58.696556",
    "response_time": "1.72",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 57,
    "solution": "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> str:\n    # Convert all integers to strings for comparison\n    arr = list(map(str, arr))\n    \n    # Custom sort: Compare concatenated results to determine order\n    arr.sort(key=lambda x: x*10, reverse=True)\n    \n    # Join the sorted array to form the largest number\n    return ''.join(arr)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
    "timestamp": "2025-08-13T11:06:00.059067",
    "response_time": "1.36",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 58,
    "solution": "def opposite_Signs(x: int, y: int) -> bool:\n    # Check if the product of x and y is negative\n    return (x ^ y) < 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
    "timestamp": "2025-08-13T11:06:01.372692",
    "response_time": "1.31",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 59,
    "solution": "def is_octagonal(n):\n    \"\"\"\n    Function to find the nth octagonal number.\n    Octagonal numbers are defined by the formula: n(3n - 2)\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. n must be a positive integer.\"\n    \n    # Calculate the nth octagonal number\n    octagonal_number = n * (3 * n - 2)\n    return str(octagonal_number)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
    "timestamp": "2025-08-13T11:06:05.320215",
    "response_time": "3.95",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 61,
    "solution": "from typing import List\n\ndef count_Substrings(s: str) -> int:\n    def digit_sum(sub: str) -> int:\n        \"\"\"Helper function to calculate the sum of digits in a string.\"\"\"\n        return sum(int(char) for char in sub)\n    \n    n = len(s)\n    count = 0\n    \n    # Iterate over all possible substrings\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if digit_sum(substring) == len(substring):\n                count += 1\n    \n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
    "timestamp": "2025-08-13T11:06:07.567479",
    "response_time": "2.25",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 62,
    "solution": "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    if not xs:\n        raise ValueError(\"The list is empty\")\n    return min(xs)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
    "timestamp": "2025-08-13T11:06:09.741934",
    "response_time": "2.17",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 63,
    "solution": "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Function to find the maximum difference between available pairs in the given tuple list.\n    \n    Args:\n    test_list (List[Tuple[int, int]]): A list of tuples containing integer pairs.\n    \n    Returns:\n    int: The maximum difference between the elements of the tuples in the list.\n    \"\"\"\n    # Initialize the maximum difference\n    max_diff = 0\n    \n    # Iterate through the list of tuples\n    for a, b in test_list:\n        # Calculate the absolute difference for each tuple\n        diff = abs(a - b)\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
    "timestamp": "2025-08-13T11:06:12.329657",
    "response_time": "2.59",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 64,
    "solution": "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> str:\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return str(sorted_subjectmarks)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
    "timestamp": "2025-08-13T11:06:13.935521",
    "response_time": "1.60",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 65,
    "solution": "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)  # Recursively sum nested lists\n        else:\n            total += element  # Add integer elements directly\n    return total",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
    "timestamp": "2025-08-13T11:06:15.846510",
    "response_time": "1.91",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 66,
    "solution": "from typing import List\n\ndef pos_count(list: List[int]) -> str:\n    count = sum(1 for num in list if num > 0)\n    return str(count)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
    "timestamp": "2025-08-13T11:06:17.040307",
    "response_time": "1.19",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 67,
    "solution": "Warning: Code markers not found in code block",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
    "timestamp": "2025-08-13T11:06:20.780497",
    "response_time": "3.74",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 68,
    "solution": "from typing import List\n\ndef is_Monotonic(A: List[int]) -> str:\n    if all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)):\n        return \"True\"\n    return \"False\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
    "timestamp": "2025-08-13T11:06:22.363030",
    "response_time": "1.58",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 69,
    "solution": "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    \"\"\"\n    Check whether the list `s` is a sublist of the list `l`.\n    \n    Args:\n    l (List[int]): The main list.\n    s (List[int]): The sublist to check.\n    \n    Returns:\n    bool: True if `s` is a sublist of `l`, False otherwise.\n    \"\"\"\n    if not s:  # An empty list is always a sublist\n        return True\n    \n    len_s = len(s)\n    for i in range(len(l) - len_s + 1):\n        if l[i:i + len_s] == s:\n            return True\n    return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
    "timestamp": "2025-08-13T11:06:25.301970",
    "response_time": "2.94",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 70,
    "solution": "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> str:\n    if not Input:\n        return \"True\"  # If the list is empty, we consider all tuples to have equal length.\n    \n    # Get the length of the first tuple\n    first_length = len(Input[0])\n    \n    # Check if all tuples have the same length\n    for tup in Input:\n        if len(tup) != first_length:\n            return \"False\"\n    \n    return \"True\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
    "timestamp": "2025-08-13T11:06:27.201649",
    "response_time": "1.90",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 71,
    "solution": "from typing import List\n\ndef comb_sort(nums: List[int]) -> str:\n    def get_next_gap(gap: int) -> int:\n        # Shrink gap by shrink factor\n        gap = (gap * 10) // 13\n        return max(gap, 1)\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return str(nums)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
    "timestamp": "2025-08-13T11:06:31.304280",
    "response_time": "4.10",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 72,
    "solution": "def dif_Square(n):\n    \"\"\"\n    Function to check whether the given number can be represented as the difference of two squares.\n    \"\"\"\n    # A number can be expressed as the difference of two squares if and only if it is not of the form 4k+2.\n    # This is derived from the mathematical property:\n    # n = a^2 - b^2 = (a+b)(a-b)\n    # For n to be expressed as such, it must not be of the form 4k+2.\n    \n    if n % 4 == 2:\n        return \"No\"\n    return \"Yes\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
    "timestamp": "2025-08-13T11:06:34.408257",
    "response_time": "3.10",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 74,
    "solution": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return \"False\"\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return \"False\"\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return \"False\"\n        else:\n            pattern_to_color[pattern] = color\n    \n    return \"True\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
    "timestamp": "2025-08-13T11:06:37.075692",
    "response_time": "2.67",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 75,
    "solution": "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    result = []\n    for tpl in test_list:\n        if all(element % K == 0 for element in tpl):\n            result.append(tpl)\n    return result\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
    "timestamp": "2025-08-13T11:06:38.546014",
    "response_time": "1.47",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 77,
    "solution": "def is_Diff(n):\n    \"\"\"\n    Function to determine if a number is divisible by 11.\n    A number is divisible by 11 if the difference between the sum of its digits\n    in odd positions and the sum of its digits in even positions is divisible by 11.\n    \n    Args:\n    n (int): The number to check divisibility for.\n    \n    Returns:\n    str: \"Yes\" if the number is divisible by 11, otherwise \"No\".\n    \"\"\"\n    # Convert the number to a string to process its digits\n    n_str = str(abs(n))  # Use absolute value to handle negative numbers\n    \n    # Initialize sums for odd and even positioned digits\n    odd_sum = 0\n    even_sum = 0\n    \n    # Iterate through the digits and calculate sums\n    for i, digit in enumerate(n_str):\n        if i % 2 == 0:  # Odd position (0-based index)\n            odd_sum += int(digit)\n        else:  # Even position\n            even_sum += int(digit)\n    \n    # Calculate the difference\n    difference = abs(odd_sum - even_sum)\n    \n    # Check divisibility by 11\n    if difference % 11 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
    "timestamp": "2025-08-13T11:06:43.007105",
    "response_time": "4.46",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 79,
    "solution": "def word_len(s: str) -> bool:\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Args:\n    s (str): The input word.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(s) % 2 != 0",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
    "timestamp": "2025-08-13T11:06:44.597470",
    "response_time": "1.59",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 80,
    "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    A tetrahedral number is the sum of the first n triangular numbers.\n    It can also be calculated using the formula:\n    T(n) = n * (n + 1) * (n + 2) / 6\n    \n    Args:\n    n (int): The position of the tetrahedral number to calculate.\n    \n    Returns:\n    int: The nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
    "timestamp": "2025-08-13T11:06:46.214141",
    "response_time": "1.62",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 82,
    "solution": "import math\n\ndef volume_sphere(r: float) -> float:\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    Args:\n    r (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return (4/3) * math.pi * (r ** 3)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
    "timestamp": "2025-08-13T11:06:48.395659",
    "response_time": "2.18",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 83,
    "solution": "def get_Char(strr):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in strr)\n    \n    # Find the result modulo 26\n    mod_26 = ascii_sum % 26\n    \n    # Convert the result to a character by adding it to 'a' (ASCII value 97)\n    result_char = chr(mod_26 + ord('a'))\n    \n    return result_char",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
    "timestamp": "2025-08-13T11:06:50.111520",
    "response_time": "1.71",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 84,
    "solution": "def sequence(n):\n    if n <= 0:\n        return \"\"\n    \n    # Base cases for Newman-Conway sequence\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1\"\n    \n    # Initialize the sequence with the first two values\n    seq = [0, 1, 1]  # seq[0] is unused for convenience\n    \n    # Generate the sequence up to the nth number\n    for i in range(3, n + 1):\n        seq.append(seq[seq[i - 1]] + seq[i - seq[i - 1]])\n    \n    # Return the nth number as a string\n    return str(seq[n])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
    "timestamp": "2025-08-13T11:06:53.930375",
    "response_time": "3.82",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 85,
    "solution": "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n\n    Args:\n    r (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    return 4 * math.pi * r**2",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
    "timestamp": "2025-08-13T11:07:00.298187",
    "response_time": "6.37",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 86,
    "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n    \n    A centered hexagonal number is given by the formula:\n    H(n) = 3n(n-1) + 1\n    \n    Args:\n    n (int): The position of the centered hexagonal number to calculate.\n    \n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    return 3 * n * (n - 1) + 1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
    "timestamp": "2025-08-13T11:07:02.737086",
    "response_time": "2.44",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 87,
    "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \n    Args:\n    dict1 (dict): The first dictionary.\n    dict2 (dict): The second dictionary.\n    dict3 (dict): The third dictionary.\n    \n    Returns:\n    dict: A single dictionary containing all key-value pairs from the three dictionaries.\n          If there are duplicate keys, the value from the later dictionary in the order\n          of dict1, dict2, dict3 will overwrite the previous one.\n    \"\"\"\n    # Merge the dictionaries using dictionary unpacking\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
    "timestamp": "2025-08-13T11:07:06.047033",
    "response_time": "3.31",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  }
]