[
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 2,
    "solution": "from typing import List\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> str:\n    # Find the intersection of the two lists\n    shared_elements = set(test_tup1).intersection(test_tup2)\n    # Convert the result to a sorted list\n    result = sorted(shared_elements)\n    # Return the result as a string\n    return str(result)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the shared elements from the given two lists.\n\n### Signature\ndef similar_elements(test_tup1, test_tup2):",
    "timestamp": "2025-08-14T07:55:30.731306",
    "response_time": "1.72",
    "context": "{\"function_name\": \"similar_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 3,
    "solution": "from math import isqrt\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True  # 0, 1, and negative numbers are not prime\n    if n == 2:\n        return False  # 2 is the only even prime number\n    if n % 2 == 0:\n        return True  # All other even numbers are not prime\n    for i in range(3, isqrt(n) + 1, 2):\n        if n % i == 0:\n            return True  # Divisible by a number other than 1 and itself\n    return False  # If no divisors found, it's prime",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to identify non-prime numbers.\n\n### Signature\ndef is_not_prime(n):",
    "timestamp": "2025-08-14T07:55:33.407238",
    "response_time": "2.67",
    "context": "{\"function_name\": \"is_not_prime\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 4,
    "solution": "from heapq import nlargest\nfrom typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> str:\n    # Use heapq.nlargest to find the n largest integers\n    largest_numbers = nlargest(n, nums)\n    # Return the result as a string in descending order\n    return str(largest_numbers)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n### Signature\ndef heap_queue_largest(nums,n):",
    "timestamp": "2025-08-14T07:55:35.560201",
    "response_time": "2.15",
    "context": "{\"function_name\": \"heap_queue_largest\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 6,
    "solution": "def differ_At_One_Bit_Pos(x: int) -> str:\n    \"\"\"\n    Check if the two numbers differ at one bit position only.\n    :param x: A tuple of two integers (a, b)\n    :return: \"Yes\" if they differ at one bit position, otherwise \"No\"\n    \"\"\"\n    a, b = x\n    # XOR the two numbers, which will result in a number with bits set to 1 where a and b differ\n    xor_result = a ^ b\n    \n    # Check if the XOR result is a power of two (only one bit set)\n    if xor_result & (xor_result - 1) == 0 and xor_result != 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\n### Signature\ndef is_Power_Of_Two (x):",
    "timestamp": "2025-08-14T07:55:37.262441",
    "response_time": "1.70",
    "context": "{\"function_name\": \"differ_At_One_Bit_Pos\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 7,
    "solution": "import re\n\ndef find_char_long(text: str) -> str:\n    # Use regex to find all words with at least 4 characters\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Join the words with a space and return as a string\n    return ' '.join(words)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find all words which are at least 4 characters long in a string.\n\n### Signature\ndef find_char_long(text):",
    "timestamp": "2025-08-14T07:55:38.243616",
    "response_time": "0.98",
    "context": "{\"function_name\": \"find_char_long\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 8,
    "solution": "from typing import List\n\ndef square_nums(nums: List[int]) -> str:\n    squared = [num ** 2 for num in nums]\n    return str(squared)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find squares of individual elements in a list.\n\n### Signature\ndef square_nums(nums):",
    "timestamp": "2025-08-14T07:55:39.090954",
    "response_time": "0.85",
    "context": "{\"function_name\": \"square_nums\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 9,
    "solution": "def find_Rotations(str: str) -> int:\n    \"\"\"\n    Finds the minimum number of rotations (greater than 0) required to get the same string.\n    \n    :param str: The input string\n    :return: The minimum number of rotations required\n    \"\"\"\n    n = len(str)\n    for i in range(1, n):\n        # Rotate the string by i positions\n        rotated = str[i:] + str[:i]\n        # Check if the rotated string matches the original\n        if rotated == str:\n            return i\n    # If no rotation matches, return the length of the string\n    return n",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n### Signature\ndef find_Rotations(str):",
    "timestamp": "2025-08-14T07:55:40.766141",
    "response_time": "1.67",
    "context": "{\"function_name\": \"find_Rotations\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 11,
    "solution": "def remove_Occ(s: str, ch: str) -> str:\n    # Find the first occurrence of the character\n    first_index = s.find(ch)\n    # Find the last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    # If the character is not found, return the original string\n    if first_index == -1:\n        return s\n    \n    # Remove the first and last occurrence of the character\n    result = s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:] if first_index != last_index else s[:first_index] + s[first_index + 1:]\n    \n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n### Signature\ndef remove_Occ(s,ch):",
    "timestamp": "2025-08-14T07:55:42.108394",
    "response_time": "1.34",
    "context": "{\"function_name\": \"remove_Occ\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 12,
    "solution": "from typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(M, key=lambda row: sum(row))\n    return sorted_matrix",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\n### Signature\ndef sort_matrix(M):",
    "timestamp": "2025-08-14T07:55:43.183824",
    "response_time": "1.07",
    "context": "{\"function_name\": \"sort_matrix\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 14,
    "solution": "def find_Volume(l: float, b: float, h: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    l (float): The length of the prism.\n    b (float): The base of the triangular face.\n    h (float): The height of the triangular face.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # The area of the triangular base is (1/2) * base * height\n    triangular_base_area = 0.5 * b * h\n    \n    # The volume of the prism is the area of the base multiplied by the length\n    volume = triangular_base_area * l\n    \n    return volume",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the volume of a triangular prism.\n\n### Signature\ndef find_Volume(l,b,h) :",
    "timestamp": "2025-08-14T07:55:44.730470",
    "response_time": "1.55",
    "context": "{\"function_name\": \"find_Volume\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 16,
    "solution": "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    # Use regex to check if the string matches the pattern of lowercase letters joined by underscores\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n### Signature\ndef text_lowercase_underscore(text):",
    "timestamp": "2025-08-14T07:55:45.655984",
    "response_time": "0.92",
    "context": "{\"function_name\": \"text_lowercase_underscore\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 17,
    "solution": "def square_perimeter(a: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    :param a: Side length of the square\n    :return: Perimeter of the square\n    \"\"\"\n    return 4 * a",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that returns the perimeter of a square given its side length as input.\n\n### Signature\ndef square_perimeter(a):",
    "timestamp": "2025-08-14T07:55:46.865082",
    "response_time": "1.21",
    "context": "{\"function_name\": \"square_perimeter\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 18,
    "solution": "def remove_dirty_chars(string: str) -> list:\n    return list(string)\n\ndef remove_characters(first_string: str, second_string: str) -> str:\n    second_string_set = set(second_string)\n    result = [char for char in first_string if char not in second_string_set]\n    return ''.join(result)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove characters from the first string which are present in the second string.\n\n### Signature\ndef str_to_list(string):",
    "timestamp": "2025-08-14T07:55:48.137292",
    "response_time": "1.27",
    "context": "{\"function_name\": \"remove_dirty_chars\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 19,
    "solution": "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> str:\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return \"True\"\n        seen.add(num)\n    return \"False\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find whether a given array of integers contains any duplicate element.\n\n### Signature\ndef test_duplicate(arraynums):",
    "timestamp": "2025-08-14T07:55:49.024532",
    "response_time": "0.88",
    "context": "{\"function_name\": \"test_duplicate\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 20,
    "solution": "Warning: Code markers not found in code block",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if the given number is woodball or not.\n\n### Signature\ndef is_woodall(x):",
    "timestamp": "2025-08-14T07:55:50.844698",
    "response_time": "1.82",
    "context": "{\"function_name\": \"is_woodall\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 56,
    "solution": "def check(num):\n    # Convert the number to a string to reverse it\n    reversed_num = int(str(num)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    if num == 2 * reversed_num - 1:\n        return \"True\"\n    else:\n        return \"False\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check if a given number is one less than twice its reverse.\n\n### Signature\ndef rev(num):",
    "timestamp": "2025-08-14T07:55:51.934591",
    "response_time": "1.09",
    "context": "{\"function_name\": \"check\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 57,
    "solution": "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> str:\n    # Convert all integers to strings for comparison\n    arr = list(map(str, arr))\n    \n    # Sort the array using a custom comparator\n    arr.sort(key=lambda x: x*10, reverse=True)\n    \n    # Join the sorted array into a single string\n    result = ''.join(arr)\n    \n    # Handle the case where the result is all zeros\n    if result[0] == '0':\n        return '0'\n    \n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\n### Signature\ndef find_Max_Num(arr) :",
    "timestamp": "2025-08-14T07:55:53.675426",
    "response_time": "1.74",
    "context": "{\"function_name\": \"find_Max_Num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 58,
    "solution": "def opposite_Signs(x: int, y: int) -> str:\n    # Check if the product of x and y is negative\n    if x * y < 0:\n        return \"True\"\n    else:\n        return \"False\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given two integers have opposite sign or not.\n\n### Signature\ndef opposite_Signs(x,y):",
    "timestamp": "2025-08-14T07:55:54.795336",
    "response_time": "1.12",
    "context": "{\"function_name\": \"opposite_Signs\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 59,
    "solution": "def is_octagonal(n):\n    \"\"\"\n    Function to find the nth octagonal number.\n    Octagonal numbers are defined by the formula: n(3n - 2)\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. n must be a positive integer.\"\n    \n    # Calculate the nth octagonal number\n    octagonal_number = n * (3 * n - 2)\n    return str(octagonal_number)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth octagonal number.\n\n### Signature\ndef is_octagonal(n):",
    "timestamp": "2025-08-14T07:55:56.655502",
    "response_time": "1.86",
    "context": "{\"function_name\": \"is_octagonal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 61,
    "solution": "from typing import List\n\ndef count_Substrings(s: str) -> int:\n    def digit_sum(sub: str) -> int:\n        return sum(int(char) for char in sub)\n    \n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if digit_sum(substring) == len(substring):\n                count += 1\n    \n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\n### Signature\ndef count_Substrings(s):",
    "timestamp": "2025-08-14T07:55:58.231485",
    "response_time": "1.58",
    "context": "{\"function_name\": \"count_Substrings\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 62,
    "solution": "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    if not xs:\n        raise ValueError(\"The list is empty\")\n    return min(xs)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find smallest number in a list.\n\n### Signature\ndef smallest_num(xs):",
    "timestamp": "2025-08-14T07:55:59.176838",
    "response_time": "0.94",
    "context": "{\"function_name\": \"smallest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 63,
    "solution": "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Function to find the maximum difference between available pairs in the given tuple list.\n    \n    Args:\n    test_list (List[Tuple[int, int]]): A list of tuples containing integer pairs.\n    \n    Returns:\n    int: The maximum difference between the elements of the tuples in the list.\n    \"\"\"\n    # Initialize the maximum difference\n    max_diff = 0\n    \n    # Iterate through the list of tuples\n    for a, b in test_list:\n        # Calculate the absolute difference for each tuple\n        diff = abs(a - b)\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\n### Signature\ndef max_difference(test_list):",
    "timestamp": "2025-08-14T07:56:00.971196",
    "response_time": "1.79",
    "context": "{\"function_name\": \"max_difference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 64,
    "solution": "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> str:\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return str(sorted_subjectmarks)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a list of tuples using the second value of each tuple.\n\n### Signature\ndef subject_marks(subjectmarks):",
    "timestamp": "2025-08-14T07:56:02.237468",
    "response_time": "1.27",
    "context": "{\"function_name\": \"subject_marks\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 65,
    "solution": "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to flatten a list and sum all of its elements.\n\n### Signature\ndef recursive_list_sum(data_list):",
    "timestamp": "2025-08-14T07:56:03.254038",
    "response_time": "1.01",
    "context": "{\"function_name\": \"recursive_list_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 66,
    "solution": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n\n    Args:\n    lst (list): A list of numbers.\n\n    Returns:\n    str: The count of positive numbers as a string.\n    \"\"\"\n    count = sum(1 for num in lst if num > 0)\n    return str(count)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of positive numbers in a list.\n\n### Signature\ndef pos_count(list):",
    "timestamp": "2025-08-14T07:56:04.397556",
    "response_time": "1.14",
    "context": "{\"function_name\": \"pos_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 67,
    "solution": "from math import comb\n\ndef bell_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth Bell number, which represents the number of ways to partition a set of n elements.\n    \"\"\"\n    # Initialize a table for Bell numbers\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # Base case: Bell(0, 0) = 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # First value in each row is the last value of the previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # The nth Bell number is the first value in the nth row\n    return bell[n][0]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\n### Signature\ndef bell_number(n):",
    "timestamp": "2025-08-14T07:56:07.229710",
    "response_time": "2.83",
    "context": "{\"function_name\": \"bell_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 68,
    "solution": "from typing import List\n\ndef is_Monotonic(A: List[int]) -> str:\n    if all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)):\n        return \"True\"\n    return \"False\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given array is monotonic or not.\n\n### Signature\ndef is_Monotonic(A):",
    "timestamp": "2025-08-14T07:56:09.972744",
    "response_time": "2.74",
    "context": "{\"function_name\": \"is_Monotonic\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 69,
    "solution": "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    \"\"\"\n    Check whether the list `l` contains the sublist `s`.\n    \n    Args:\n    l (List[int]): The main list.\n    s (List[int]): The sublist to check for.\n    \n    Returns:\n    bool: True if `s` is a sublist of `l`, False otherwise.\n    \"\"\"\n    if not s:  # An empty sublist is always a sublist\n        return True\n    \n    n, m = len(l), len(s)\n    \n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    \n    return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether a list contains the given sublist or not.\n\n### Signature\ndef is_sublist(l, s):",
    "timestamp": "2025-08-14T07:56:12.018094",
    "response_time": "2.04",
    "context": "{\"function_name\": \"is_sublist\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 70,
    "solution": "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> str:\n    if not Input:\n        return \"True\"  # If the list is empty, we consider all tuples to have equal length.\n    \n    # Get the length of the first tuple\n    first_length = len(Input[0])\n    \n    # Check if all tuples have the same length\n    for tup in Input:\n        if len(tup) != first_length:\n            return \"False\"\n    \n    return \"True\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find whether all the given tuples have equal length or not.\n\n### Signature\ndef find_equal_tuple(Input):",
    "timestamp": "2025-08-14T07:56:14.404217",
    "response_time": "2.39",
    "context": "{\"function_name\": \"get_equal\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 71,
    "solution": "from typing import List\n\ndef comb_sort(nums: List[int]) -> str:\n    def get_next_gap(gap: int) -> int:\n        # Shrink gap by shrink factor\n        gap = (gap * 10) // 13\n        return max(gap, 1)\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return str(nums)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef comb_sort(nums):",
    "timestamp": "2025-08-14T07:56:16.735597",
    "response_time": "2.33",
    "context": "{\"function_name\": \"comb_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 72,
    "solution": "def dif_Square(n):\n    \"\"\"\n    Check if a number can be represented as the difference of two squares.\n    \n    A number can be represented as the difference of two squares if and only if it is not of the form 4k+2.\n    \"\"\"\n    # A number can be represented as the difference of two squares if it is not of the form 4k+2\n    if n % 4 == 2:\n        return \"No\"\n    return \"Yes\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\n### Signature\ndef dif_Square(n):",
    "timestamp": "2025-08-14T07:56:18.173790",
    "response_time": "1.44",
    "context": "{\"function_name\": \"dif_Square\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 74,
    "solution": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return \"False\"\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return \"False\"\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return \"False\"\n        else:\n            pattern_to_color[pattern] = color\n    \n    return \"True\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether it follows the sequence given in the patterns array.\n\n### Signature\ndef is_samepatterns(colors, patterns):",
    "timestamp": "2025-08-14T07:56:19.670023",
    "response_time": "1.50",
    "context": "{\"function_name\": \"is_samepatterns\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 75,
    "solution": "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    # Filter tuples where all elements are divisible by K\n    result = [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n    return result\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n### Signature\ndef find_tuples(test_list, K):",
    "timestamp": "2025-08-14T07:56:20.846182",
    "response_time": "1.18",
    "context": "{\"function_name\": \"find_tuples\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 77,
    "solution": "def is_Diff(n: int) -> str:\n    \"\"\"\n    Determines if a number is divisible by 11.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    str: \"YES\" if the number is divisible by 11, otherwise \"NO\".\n    \"\"\"\n    if n % 11 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find whether a number is divisible by 11.\n\n### Signature\ndef is_Diff(n):",
    "timestamp": "2025-08-14T07:56:22.507160",
    "response_time": "1.66",
    "context": "{\"function_name\": \"is_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 79,
    "solution": "def word_len(s: str) -> str:\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Args:\n    s (str): The input word.\n\n    Returns:\n    str: \"Odd\" if the length of the word is odd, otherwise \"Even\".\n    \"\"\"\n    return \"Odd\" if len(s) % 2 != 0 else \"Even\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the length of the word is odd or not.\n\n### Signature\ndef word_len(s):",
    "timestamp": "2025-08-14T07:56:23.746976",
    "response_time": "1.24",
    "context": "{\"function_name\": \"word_len\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 80,
    "solution": "def tetrahedral_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    The nth tetrahedral number is given by the formula:\n    T(n) = n * (n + 1) * (n + 2) / 6\n    \n    Args:\n    n (int): The position of the tetrahedral number to calculate.\n    \n    Returns:\n    int: The nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth tetrahedral number.\n\n### Signature\ndef tetrahedral_number(n):",
    "timestamp": "2025-08-14T07:56:25.390619",
    "response_time": "1.64",
    "context": "{\"function_name\": \"tetrahedral_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 82,
    "solution": "import math\n\ndef volume_sphere(r: float) -> float:\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    :param r: Radius of the sphere\n    :return: Volume of the sphere\n    \"\"\"\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the volume of a sphere.\n\n### Signature\ndef volume_sphere(r):",
    "timestamp": "2025-08-14T07:56:26.807491",
    "response_time": "1.42",
    "context": "{\"function_name\": \"volume_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 83,
    "solution": "def get_Char(strr: str) -> str:\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in strr)\n    \n    # Find the result modulo 26\n    mod_26 = ascii_sum % 26\n    \n    # Convert the result to a character by adding it to 'a' (ASCII value 97)\n    result_char = chr(mod_26 + ord('a'))\n    \n    return result_char",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n### Signature\ndef get_Char(strr):",
    "timestamp": "2025-08-14T07:56:31.771632",
    "response_time": "4.96",
    "context": "{\"function_name\": \"get_Char\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 84,
    "solution": "def sequence(n):\n    if n <= 0:\n        return \"\"\n    \n    # Base cases for Newman-Conway sequence\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1\"\n    \n    # Initialize the sequence with the first two values\n    seq = [0, 1, 1]\n    \n    # Generate the sequence up to the nth number\n    for i in range(3, n + 1):\n        seq.append(seq[seq[i - 1]] + seq[i - seq[i - 1]])\n    \n    # Return the nth number as a string\n    return str(seq[n])\n\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth number in the newman conway sequence.\n\n### Signature\ndef sequence(n):",
    "timestamp": "2025-08-14T07:56:33.731370",
    "response_time": "1.96",
    "context": "{\"function_name\": \"sequence\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 85,
    "solution": "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n\n    Args:\n    r (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return 4 * math.pi * r**2",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the surface area of a sphere.\n\n### Signature\ndef surfacearea_sphere(r):",
    "timestamp": "2025-08-14T07:56:35.064058",
    "response_time": "1.33",
    "context": "{\"function_name\": \"surfacearea_sphere\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 86,
    "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n    \n    A centered hexagonal number is given by the formula:\n    H(n) = 3n(n-1) + 1\n    \n    Args:\n    n (int): The position of the centered hexagonal number to calculate.\n    \n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    return 3 * n * (n - 1) + 1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find nth centered hexagonal number.\n\n### Signature\ndef centered_hexagonal_number(n):",
    "timestamp": "2025-08-14T07:56:36.794118",
    "response_time": "1.73",
    "context": "{\"function_name\": \"centered_hexagonal_number\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 87,
    "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \n    Args:\n    dict1 (dict): The first dictionary.\n    dict2 (dict): The second dictionary.\n    dict3 (dict): The third dictionary.\n    \n    Returns:\n    dict: A single dictionary containing all key-value pairs from the three input dictionaries.\n          If there are duplicate keys, the value from the last dictionary in the order will be used.\n    \"\"\"\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to merge three dictionaries into a single dictionary.\n\n### Signature\ndef merge_dictionaries_three(dict1,dict2, dict3):",
    "timestamp": "2025-08-14T07:56:39.016210",
    "response_time": "2.22",
    "context": "{\"function_name\": \"merge_dictionaries_three\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 88,
    "solution": "from typing import List, Dict\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n### Signature\ndef freq_count(list1):",
    "timestamp": "2025-08-14T07:56:40.109317",
    "response_time": "1.09",
    "context": "{\"function_name\": \"freq_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 89,
    "solution": "def closest_num(N: int) -> int:\n    \"\"\"\n    Finds the closest smaller number than N.\n    \n    Parameters:\n    N (int): The input number.\n    \n    Returns:\n    int: The closest smaller number than N.\n    \"\"\"\n    return N - 1",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the closest smaller number than n.\n\n### Signature\ndef closest_num(N):",
    "timestamp": "2025-08-14T07:56:41.419922",
    "response_time": "1.31",
    "context": "{\"function_name\": \"closest_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 90,
    "solution": "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    if not list1:  # Check if the list is empty\n        return 0\n    return max(len(word) for word in list1)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the length of the longest word.\n\n### Signature\ndef len_log(list1):",
    "timestamp": "2025-08-14T07:56:42.882355",
    "response_time": "1.46",
    "context": "{\"function_name\": \"len_log\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 91,
    "solution": "def find_substring(str1: str, sub_str: str) -> str:\n    \"\"\"\n    Check if a substring is present in a given list of string values.\n\n    :param str1: A string containing multiple substrings separated by spaces.\n    :param sub_str: The substring to search for.\n    :return: \"Yes\" if the substring is found in the list, otherwise \"No\".\n    \"\"\"\n    # Split the input string into a list of substrings\n    substrings = str1.split()\n    \n    # Check if the substring is in the list\n    if sub_str in substrings:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if a string is present as a substring in a given list of string values.\n\n### Signature\ndef find_substring(str1, sub_str):",
    "timestamp": "2025-08-14T07:56:44.571501",
    "response_time": "1.69",
    "context": "{\"function_name\": \"find_substring\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 92,
    "solution": "Warning: Code markers not found in code block",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether the given number is undulating or not.\n\n### Signature\ndef is_undulating(n):",
    "timestamp": "2025-08-14T07:56:47.123964",
    "response_time": "2.55",
    "context": "{\"function_name\": \"is_undulating\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 93,
    "solution": "def power(a, b):\n    return str(a ** b)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the value of 'a' to the power 'b'.\n\n### Signature\ndef power(a,b):",
    "timestamp": "2025-08-14T07:56:48.230817",
    "response_time": "1.11",
    "context": "{\"function_name\": \"power\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 94,
    "solution": "from typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[int, int]]) -> int:\n    # Find the tuple with the smallest second value\n    min_tuple = min(test_list, key=lambda x: x[1])\n    # Return the first value of that tuple\n    return min_tuple[0]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n### Signature\ndef index_minimum(test_list):",
    "timestamp": "2025-08-14T07:56:49.421079",
    "response_time": "1.19",
    "context": "{\"function_name\": \"index_minimum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 95,
    "solution": "from typing import List\n\ndef Find_Min_Length(lst: List[List]) -> int:\n    if not lst:  # Check if the input list is empty\n        return 0\n    return min(len(sublist) for sublist in lst)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the length of the smallest list in a list of lists.\n\n### Signature\ndef Find_Min_Length(lst):",
    "timestamp": "2025-08-14T07:56:50.539170",
    "response_time": "1.12",
    "context": "{\"function_name\": \"Find_Min_Length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 96,
    "solution": "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:  # Check to avoid counting the square root twice\n                count += 1\n    return count\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the number of divisors of a given integer.\n\n### Signature\ndef divisor(n):",
    "timestamp": "2025-08-14T07:56:51.648885",
    "response_time": "1.11",
    "context": "{\"function_name\": \"divisor\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 97,
    "solution": "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # Create a dictionary to store frequencies\n    frequency_dict = {}\n    \n    # Count the frequency of each element\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    \n    return frequency_dict",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n### Signature\ndef frequency_lists(list1):",
    "timestamp": "2025-08-14T07:56:53.767519",
    "response_time": "2.12",
    "context": "{\"function_name\": \"frequency_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 98,
    "solution": "from typing import List\n\ndef multiply_num(numbers: List[float]) -> str:\n    if not numbers:\n        return \"0\"\n    \n    product = 1\n    for num in numbers:\n        product *= num\n    \n    result = product / len(numbers)\n    return str(result)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\n### Signature\ndef multiply_num(numbers):",
    "timestamp": "2025-08-14T07:56:54.883364",
    "response_time": "1.11",
    "context": "{\"function_name\": \"multiply_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 99,
    "solution": "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n### Signature\ndef decimal_to_binary(n):",
    "timestamp": "2025-08-14T07:56:55.911495",
    "response_time": "1.03",
    "context": "{\"function_name\": \"decimal_to_binary\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 100,
    "solution": "def next_smallest_palindrome(num: int) -> int:\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    \n    num += 1  # Start checking from the next number\n    while not is_palindrome(num):\n        num += 1\n    return num",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n### Signature\ndef next_smallest_palindrome(num):",
    "timestamp": "2025-08-14T07:56:56.963746",
    "response_time": "1.05",
    "context": "{\"function_name\": \"next_smallest_palindrome\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 101,
    "solution": "def kth_element(arr, k):\n    # Since k is 1-based index, we subtract 1 to access the correct element in 0-based indexing\n    return str(arr[k - 1])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the kth element in the given array using 1-based indexing.\n\n### Signature\ndef kth_element(arr, k):",
    "timestamp": "2025-08-14T07:56:58.396871",
    "response_time": "1.43",
    "context": "{\"function_name\": \"kth_element\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 102,
    "solution": "def snake_to_camel(word: str) -> str:\n    # Split the snake_case string into words using '_' as the delimiter\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first one and join them\n    camel_case = words[0] + ''.join(w.capitalize() for w in words[1:])\n    return camel_case",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a snake case string to camel case string.\n\n### Signature\ndef snake_to_camel(word):",
    "timestamp": "2025-08-14T07:56:59.548408",
    "response_time": "1.15",
    "context": "{\"function_name\": \"snake_to_camel\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 103,
    "solution": "Warning: Code markers not found in code block",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the Eulerian number a(n, m).\n\n### Signature\ndef eulerian_num(n, m):",
    "timestamp": "2025-08-14T07:57:01.359038",
    "response_time": "1.81",
    "context": "{\"function_name\": \"eulerian_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 104,
    "solution": "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> str:\n    # Sort each sublist in the input list\n    sorted_list = [sorted(sublist) for sublist in input_list]\n    return str(sorted_list)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort each sublist of strings in a given list of lists.\n\n### Signature\ndef sort_sublists(input_list):",
    "timestamp": "2025-08-14T07:57:02.798483",
    "response_time": "1.44",
    "context": "{\"function_name\": \"sort_sublists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 105,
    "solution": "from typing import List\n\ndef count(lst: List[bool]) -> str:\n    true_count = sum(1 for item in lst if item is True)\n    return str(true_count)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count true booleans in the given list.\n\n### Signature\ndef count(lst):",
    "timestamp": "2025-08-14T07:57:03.730280",
    "response_time": "0.93",
    "context": "{\"function_name\": \"count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 106,
    "solution": "from typing import List, Tuple, Union\n\ndef add_lists(test_list: List[Union[int, str]], test_tup: Tuple[Union[int, str], ...]) -> Tuple[Union[int, str], ...]:\n    # Convert the tuple to a list, append the given list, and convert back to a tuple\n    return tuple(list(test_tup) + test_list)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to append the given list to the given tuples.\n\n### Signature\ndef add_lists(test_list, test_tup):",
    "timestamp": "2025-08-14T07:57:05.893328",
    "response_time": "2.16",
    "context": "{\"function_name\": \"add_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 108,
    "solution": "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> str:\n    # Combine all three lists\n    combined_list = num1 + num2 + num3\n    # Sort the combined list\n    sorted_list = sorted(combined_list)\n    # Return the sorted list as a string\n    return str(sorted_list)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to merge three lists into a single sorted list.\n\n### Signature\ndef merge_sorted_list(num1,num2,num3):",
    "timestamp": "2025-08-14T07:57:07.302082",
    "response_time": "1.41",
    "context": "{\"function_name\": \"merge_sorted_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 109,
    "solution": "def odd_Equivalent(s: str, n: int) -> int:\n    # Helper function to check if a binary string is odd\n    def is_odd(binary_str: str) -> bool:\n        # A binary number is odd if its last digit is '1'\n        return binary_str[-1] == '1'\n    \n    count = 0\n    length = len(s)\n    \n    # Iterate through the number of rotations\n    for i in range(min(n, length)):\n        # Rotate the string\n        rotated = s[-i:] + s[:-i]\n        # Check if the rotated binary string is odd\n        if is_odd(rotated):\n            count += 1\n    \n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n### Signature\ndef odd_Equivalent(s,n):",
    "timestamp": "2025-08-14T07:57:09.163434",
    "response_time": "1.86",
    "context": "{\"function_name\": \"odd_Equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 111,
    "solution": "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> str:\n    if not nestedlist:\n        return \"[]\"\n    \n    # Start with the set of the first list\n    common_elements = set(nestedlist[0])\n    \n    # Intersect with the sets of the other lists\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    \n    # Convert the result to a sorted list\n    result = sorted(common_elements)\n    \n    return str(result)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the common elements in given nested lists.\n\n### Signature\ndef common_in_nested_lists(nestedlist):",
    "timestamp": "2025-08-14T07:57:10.555719",
    "response_time": "1.39",
    "context": "{\"function_name\": \"common_in_nested_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 113,
    "solution": "def check_integer(text: str) -> str:\n    try:\n        int(text)\n        return \"True\"\n    except ValueError:\n        return \"False\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if a string represents an integer or not.\n\n### Signature\ndef check_integer(text):",
    "timestamp": "2025-08-14T07:57:11.315678",
    "response_time": "0.76",
    "context": "{\"function_name\": \"check_integer\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 115,
    "solution": "from typing import List, Dict\n\ndef empty_dit(list1: List[Dict]) -> str:\n    # Check if all dictionaries in the list are empty\n    all_empty = all(not d for d in list1)\n    return \"True\" if all_empty else \"False\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check whether all dictionaries in a list are empty or not.\n\n### Signature\ndef empty_dit(list1):",
    "timestamp": "2025-08-14T07:57:12.413347",
    "response_time": "1.10",
    "context": "{\"function_name\": \"empty_dit\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 116,
    "solution": "def tuple_to_int(nums):\n    \"\"\"\n    Converts a tuple of positive integers into a single integer by concatenating the numbers.\n    \n    Args:\n    nums (tuple): A tuple of positive integers.\n    \n    Returns:\n    str: A single integer represented as a string.\n    \"\"\"\n    # Convert each integer in the tuple to a string and concatenate them\n    return ''.join(map(str, nums))",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a given tuple of positive integers into a single integer.\n\n### Signature\ndef tuple_to_int(nums):",
    "timestamp": "2025-08-14T07:57:13.487876",
    "response_time": "1.07",
    "context": "{\"function_name\": \"tuple_to_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 117,
    "solution": "from typing import List, Any\n\ndef list_to_float(test_list: List[List[Any]]) -> List[List[Any]]:\n    result = []\n    for sublist in test_list:\n        converted_sublist = []\n        for item in sublist:\n            try:\n                # Attempt to convert the item to a float\n                converted_sublist.append(float(item))\n            except (ValueError, TypeError):\n                # If conversion fails, keep the original item\n                converted_sublist.append(item)\n        result.append(converted_sublist)\n    return result",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n\n### Signature\ndef list_to_float(test_list):",
    "timestamp": "2025-08-14T07:57:15.354940",
    "response_time": "1.86",
    "context": "{\"function_name\": \"list_to_float\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 118,
    "solution": "def string_to_list(string: str) -> list:\n    return string.split(\" \")",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a string to a list of strings split on the space character.\n\n### Signature\ndef string_to_list(string):",
    "timestamp": "2025-08-14T07:57:16.038291",
    "response_time": "0.68",
    "context": "{\"function_name\": \"string_to_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 119,
    "solution": "from typing import List\n\ndef search(arr: List[int]) -> str:\n    # Using binary search to find the single element in a sorted array\n    low, high = 0, len(arr) - 1\n    \n    while low < high:\n        mid = low + (high - low) // 2\n        \n        # Ensure mid is even for comparison\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the pair is valid\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    \n    # The single element is at the low index\n    return str(arr[low])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the element that appears only once in a sorted array.\n\n### Signature\ndef search(arr):",
    "timestamp": "2025-08-14T07:57:17.777208",
    "response_time": "1.74",
    "context": "{\"function_name\": \"search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 120,
    "solution": "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> str:\n    max_product = float('-inf')\n    max_pair = None\n    \n    for pair in list1:\n        product = abs(pair[0] * pair[1])\n        if product > max_product:\n            max_product = product\n            max_pair = pair\n    \n    return f\"Max product is {max_product} from pair {max_pair}\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n### Signature\ndef max_product_tuple(list1):",
    "timestamp": "2025-08-14T07:57:19.056802",
    "response_time": "1.28",
    "context": "{\"function_name\": \"max_product_tuple\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 123,
    "solution": "from typing import List\n\ndef amicable_numbers_sum(limit: int) -> str:\n    def sum_of_divisors(n: int) -> int:\n        \"\"\"Helper function to calculate the sum of proper divisors of a number.\"\"\"\n        divisors_sum = 1  # 1 is a proper divisor of every number\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors_sum += i\n                if i != n // i:  # Avoid adding the square root twice for perfect squares\n                    divisors_sum += n // i\n        return divisors_sum\n\n    amicable_sum = 0\n    for a in range(2, limit):\n        b = sum_of_divisors(a)\n        if b != a and b < limit and sum_of_divisors(b) == a:\n            amicable_sum += a\n\n    return str(amicable_sum)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n### Signature\ndef amicable_numbers_sum(limit):",
    "timestamp": "2025-08-14T07:57:21.111265",
    "response_time": "2.05",
    "context": "{\"function_name\": \"amicable_numbers_sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 124,
    "solution": "import math\n\ndef angle_complex(a: float, b: float) -> str:\n    \"\"\"\n    Calculate the angle (in radians) of a complex number given its real (a) and imaginary (b) parts.\n    \n    Args:\n    a (float): Real part of the complex number.\n    b (float): Imaginary part of the complex number.\n    \n    Returns:\n    str: The angle of the complex number in radians as a string.\n    \"\"\"\n    angle = math.atan2(b, a)\n    return str(angle)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to get the angle of a complex number.\n\n### Signature\ndef angle_complex(a,b):",
    "timestamp": "2025-08-14T07:57:22.517641",
    "response_time": "1.41",
    "context": "{\"function_name\": \"angle_complex\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 125,
    "solution": "def find_length(string: str) -> str:\n    # Initialize variables to track the maximum difference and the current difference\n    max_diff = 0\n    current_diff = 0\n\n    # Iterate through the binary string\n    for char in string:\n        # Treat '0' as +1 and '1' as -1\n        if char == '0':\n            current_diff += 1\n        else:  # char == '1'\n            current_diff -= 1\n\n        # Update the maximum difference if the current difference is greater\n        max_diff = max(max_diff, current_diff)\n\n        # If the current difference becomes negative, reset it to 0\n        if current_diff < 0:\n            current_diff = 0\n\n    # Return the maximum difference as a string\n    return str(max_diff)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n### Signature\ndef find_length(string):",
    "timestamp": "2025-08-14T07:57:24.268991",
    "response_time": "1.75",
    "context": "{\"function_name\": \"find_length\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 126,
    "solution": "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n    def common_divisors_sum(x: int, y: int) -> int:\n        common_gcd = gcd(x, y)\n        total = 0\n        for i in range(1, common_gcd + 1):\n            if common_gcd % i == 0:\n                total += i\n        return total\n    \n    return common_divisors_sum(a, b)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the sum of common divisors of two given numbers.\n\n### Signature\ndef sum(a,b):",
    "timestamp": "2025-08-14T07:57:25.631998",
    "response_time": "1.36",
    "context": "{\"function_name\": \"sum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 127,
    "solution": "def multiply_int(x: int, y: int) -> int:\n    return x * y",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to multiply two integers.\n\n### Signature\ndef multiply_int(x, y):",
    "timestamp": "2025-08-14T07:57:26.876507",
    "response_time": "1.24",
    "context": "{\"function_name\": \"multiply_int\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 128,
    "solution": "from typing import List\n\ndef long_words(n: int, str: List[str]) -> List[str]:\n    return [word for word in str if len(word) > n]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find words that are longer than n characters from a given list of words.\n\n### Signature\ndef long_words(n, str):",
    "timestamp": "2025-08-14T07:57:27.653943",
    "response_time": "0.78",
    "context": "{\"function_name\": \"long_words\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 129,
    "solution": "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> str:\n    # Check if the matrix is square\n    n = len(my_matrix)\n    if any(len(row) != n for row in my_matrix):\n        return \"False\"\n    \n    # Calculate the sum of the first row to use as the magic sum\n    magic_sum = sum(my_matrix[0])\n    \n    # Check sums of all rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return \"False\"\n    \n    # Check sums of all columns\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_sum:\n            return \"False\"\n    \n    # Check sum of the main diagonal\n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum:\n        return \"False\"\n    \n    # Check sum of the secondary diagonal\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return \"False\"\n    \n    return \"True\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate whether the matrix is a magic square.\n\n### Signature\ndef magic_square_test(my_matrix):",
    "timestamp": "2025-08-14T07:57:29.603864",
    "response_time": "1.95",
    "context": "{\"function_name\": \"magic_square_test\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 130,
    "solution": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> str:\n    if not nums:\n        return \"\"\n    \n    frequency = {}\n    for num in nums:\n        frequency[num] = frequency.get(num, 0) + 1\n    \n    max_freq = max(frequency.values())\n    max_items = [key for key, value in frequency.items() if value == max_freq]\n    \n    # Return the smallest item in case of a tie\n    result = min(max_items)\n    return str(result)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the item with maximum frequency in a given list.\n\n### Signature\ndef max_occurrences(nums):",
    "timestamp": "2025-08-14T07:57:31.828699",
    "response_time": "2.22",
    "context": "{\"function_name\": \"max_occurrences\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 131,
    "solution": "def reverse_vowels(str1: str) -> str:\n    vowels = set(\"aeiouAEIOU\")\n    str_list = list(str1)\n    left, right = 0, len(str_list) - 1\n\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            # Swap the vowels\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n\n    return ''.join(str_list)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n### Signature\ndef reverse_vowels(str1):",
    "timestamp": "2025-08-14T07:57:33.182081",
    "response_time": "1.35",
    "context": "{\"function_name\": \"reverse_vowels\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 132,
    "solution": "def tup_string(tup1):\n    \"\"\"\n    Converts a tuple to a string by concatenating its elements.\n    \n    Args:\n    tup1 (tuple): The input tuple to be converted to a string.\n    \n    Returns:\n    str: A string representation of the tuple's elements concatenated together.\n    \"\"\"\n    return ''.join(map(str, tup1))\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to convert a tuple to a string.\n\n### Signature\ndef tup_string(tup1):",
    "timestamp": "2025-08-14T07:57:34.372473",
    "response_time": "1.19",
    "context": "{\"function_name\": \"tup_string\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 133,
    "solution": "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum(num for num in nums if num < 0)\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\n### Signature\ndef sum_negativenum(nums):",
    "timestamp": "2025-08-14T07:57:35.166203",
    "response_time": "0.79",
    "context": "{\"function_name\": \"sum_negativenum\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 135,
    "solution": "def hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n    \n    A hexagonal number is defined as H(n) = n * (2n - 1).\n    \n    Args:\n    n (int): The position of the hexagonal number to calculate.\n    \n    Returns:\n    str: The nth hexagonal number as a string.\n    \"\"\"\n    # Calculate the nth hexagonal number\n    hex_num = n * (2 * n - 1)\n    \n    # Return the result as a string\n    return str(hex_num)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the nth hexagonal number.\n\n### Signature\ndef hexagonal_num(n):",
    "timestamp": "2025-08-14T07:57:36.666300",
    "response_time": "1.50",
    "context": "{\"function_name\": \"hexagonal_num\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 137,
    "solution": "from typing import List\n\ndef zero_count(nums: List[int]) -> str:\n    if not nums:\n        return \"0:0\"\n    \n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    \n    return f\"{zeroes}:{non_zeroes}\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n### Signature\ndef zero_count(nums):",
    "timestamp": "2025-08-14T07:57:38.001558",
    "response_time": "1.33",
    "context": "{\"function_name\": \"zero_count\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 138,
    "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Function to check whether the given number can be represented as a sum of non-zero powers of 2.\n    :param n: int - The number to check.\n    :return: str - \"YES\" if the number can be represented as a sum of non-zero powers of 2, otherwise \"NO\".\n    \"\"\"\n    if n <= 0:\n        return \"NO\"\n    \n    # Check if n can be represented as a sum of distinct powers of 2\n    # This is equivalent to checking if n has a valid binary representation\n    # where each bit represents a power of 2.\n    while n > 0:\n        if n % 2 == 0 or n % 2 == 1:\n            n //= 2\n        else:\n            return \"NO\"\n    \n    return \"YES\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n### Signature\ndef is_Sum_Of_Powers_Of_Two(n):",
    "timestamp": "2025-08-14T07:57:40.459580",
    "response_time": "2.46",
    "context": "{\"function_name\": \"is_Sum_Of_Powers_Of_Two\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 139,
    "solution": "import math\n\ndef circle_circumference(r: float) -> float:\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n\n    :param r: Radius of the circle\n    :return: Circumference of the circle\n    \"\"\"\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return 2 * math.pi * r",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the circumference of a circle.\n\n### Signature\ndef circle_circumference(r):",
    "timestamp": "2025-08-14T07:57:42.580080",
    "response_time": "2.12",
    "context": "{\"function_name\": \"circle_circumference\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 140,
    "solution": "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    # Flatten the list of lists into a single set of numbers\n    result_set = set()\n    for sublist in test_list:\n        result_set.update(sublist)\n    return result_set",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to flatten the list of lists into a single set of numbers.\n\n### Signature\ndef extract_singly(test_list):",
    "timestamp": "2025-08-14T07:57:43.584374",
    "response_time": "1.00",
    "context": "{\"function_name\": \"extract_singly\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 141,
    "solution": "from typing import List\n\ndef pancake_sort(nums: List[int]) -> str:\n    def flip(sublist: List[int], k: int) -> None:\n        \"\"\"Reverse the first k elements of the sublist.\"\"\"\n        sublist[:k] = sublist[:k][::-1]\n\n    n = len(nums)\n    for size in range(n, 1, -1):\n        # Find the index of the maximum element in the current range\n        max_index = nums.index(max(nums[:size]))\n        \n        # Bring the maximum element to the front if it's not already there\n        if max_index != 0:\n            flip(nums, max_index + 1)\n        \n        # Move the maximum element to its correct position\n        flip(nums, size)\n    \n    return str(nums)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to sort a list of elements.\n\n### Signature\ndef pancake_sort(nums):",
    "timestamp": "2025-08-14T07:57:46.028435",
    "response_time": "2.44",
    "context": "{\"function_name\": \"pancake_sort\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 142,
    "solution": "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    # Ensure all lists are of the same length\n    min_length = min(len(list1), len(list2), len(list3))\n    \n    # Count identical items in the same position\n    count = 0\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count number items that are identical in the same position of three given lists.\n\n### Signature\ndef count_samepair(list1,list2,list3):",
    "timestamp": "2025-08-14T07:57:47.350880",
    "response_time": "1.32",
    "context": "{\"function_name\": \"count_samepair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 143,
    "solution": "from typing import Tuple, Any\n\ndef find_lists(Input: Tuple[Any, ...]) -> str:\n    count = sum(1 for item in Input if isinstance(item, list))\n    return str(count)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find number of lists present in the given tuple.\n\n### Signature\ndef find_lists(Input):",
    "timestamp": "2025-08-14T07:57:48.723907",
    "response_time": "1.37",
    "context": "{\"function_name\": \"find_lists\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 145,
    "solution": "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr or len(arr) < 2:\n        return 0  # If the array is empty or has less than 2 elements, return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val - min_val",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the maximum difference between any two elements in a given array.\n\n### Signature\ndef max_Abs_Diff(arr):",
    "timestamp": "2025-08-14T07:57:50.628038",
    "response_time": "1.90",
    "context": "{\"function_name\": \"max_Abs_Diff\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 160,
    "solution": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    # Extended Euclidean Algorithm to find gcd and coefficients x, y\n    def extended_gcd(a, b):\n        if b == 0:\n            return a, 1, 0\n        gcd, x1, y1 = extended_gcd(b, a % b)\n        x = y1\n        y = x1 - (a // b) * y1\n        return gcd, x, y\n\n    gcd, x, y = extended_gcd(a, b)\n    \n    # Check if n is divisible by gcd(a, b)\n    if n % gcd != 0:\n        return None\n    \n    # Scale the solution to satisfy ax + by = n\n    scale = n // gcd\n    x *= scale\n    y *= scale\n    \n    return (x, y)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n### Signature\ndef find_solution(a, b, n):",
    "timestamp": "2025-08-14T07:57:52.885047",
    "response_time": "2.26",
    "context": "{\"function_name\": \"find_solution\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 161,
    "solution": "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to remove all elements from a given list present in another list.\n\n### Signature\ndef remove_elements(list1, list2):",
    "timestamp": "2025-08-14T07:57:54.228414",
    "response_time": "1.34",
    "context": "{\"function_name\": \"remove_elements\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 162,
    "solution": "def sum_series(n):\n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate from i = 0 to n // 2\n    for i in range(n // 2 + 1):\n        total_sum += (n - 2 * i)\n    \n    # Return the calculated sum\n    return total_sum\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n### Signature\ndef sum_series(n):",
    "timestamp": "2025-08-14T07:57:55.375631",
    "response_time": "1.15",
    "context": "{\"function_name\": \"sum_series\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 163,
    "solution": "import math\n\ndef area_polygon(s: int, l: float) -> float:\n    \"\"\"\n    Calculate the area of a regular polygon given the number of sides and the length of each side.\n\n    :param s: Number of sides of the polygon (integer, s >= 3)\n    :param l: Length of each side of the polygon (float, l > 0)\n    :return: Area of the polygon (float)\n    \"\"\"\n    if s < 3 or l <= 0:\n        raise ValueError(\"Number of sides must be >= 3 and side length must be > 0.\")\n    \n    # Formula for the area of a regular polygon:\n    # Area = (s * l^2) / (4 * tan(pi / s))\n    area = (s * l**2) / (4 * math.tan(math.pi / s))\n    return area",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\n### Signature\ndef area_polygon(s, l):",
    "timestamp": "2025-08-14T07:57:57.275722",
    "response_time": "1.90",
    "context": "{\"function_name\": \"area_polygon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 164,
    "solution": "def are_equivalent(n: int) -> int:\n    \"\"\"\n    Calculate the sum of all divisors of a given integer n.\n    \"\"\"\n    divisors_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to determine if the sum of the divisors of two integers are the same.\n\n### Signature\ndef div_sum(n):",
    "timestamp": "2025-08-14T07:57:58.907803",
    "response_time": "1.63",
    "context": "{\"function_name\": \"are_equivalent\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 165,
    "solution": "def count_char_position(str1: str) -> int:\n    count = 0\n    str1 = str1.lower()  # Convert the string to lowercase for case insensitivity\n    for i, char in enumerate(str1):\n        if char.isalpha():  # Check if the character is a letter\n            if ord(char) - ord('a') == i:  # Compare the position in the alphabet with the index\n                count += 1\n    return count\n#",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n### Signature\ndef count_char_position(str1):",
    "timestamp": "2025-08-14T07:58:00.167446",
    "response_time": "1.26",
    "context": "{\"function_name\": \"count_char_position\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 166,
    "solution": "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    even_count = 0\n    odd_count = 0\n    \n    # Count the number of even and odd numbers in the list\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Calculate the number of pairs that XOR to an even number\n    # XOR of two numbers is even if both numbers are even or both are odd\n    even_pairs = (even_count * (even_count - 1)) // 2  # Pairs of even numbers\n    odd_pairs = (odd_count * (odd_count - 1)) // 2    # Pairs of odd numbers\n    \n    return even_pairs + odd_pairs",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\n### Signature\ndef find_even_pair(A):",
    "timestamp": "2025-08-14T07:58:01.763560",
    "response_time": "1.59",
    "context": "{\"function_name\": \"find_even_pair\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 167,
    "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return \"Input must be a positive integer.\"\n    \n    power = 1\n    while power < n:\n        power *= 2\n    return str(power)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\n### Signature\ndef next_power_of_2(n):",
    "timestamp": "2025-08-14T07:58:03.015649",
    "response_time": "1.25",
    "context": "{\"function_name\": \"next_power_of_2\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 168,
    "solution": "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of occurrences of a number in a given list.\n\n### Signature\ndef frequency(a,x):",
    "timestamp": "2025-08-14T07:58:04.149610",
    "response_time": "1.13",
    "context": "{\"function_name\": \"frequency\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 170,
    "solution": "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    # Ensure m and n are within the bounds of the list\n    if m < 0 or n >= len(list1) or m > n:\n        raise ValueError(\"Invalid range specified\")\n    \n    # Calculate the sum of the sublist from index m to n (inclusive)\n    return sum(list1[m:n+1])",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\n### Signature\ndef sum_range_list(list1, m, n):",
    "timestamp": "2025-08-14T07:58:05.554890",
    "response_time": "1.40",
    "context": "{\"function_name\": \"sum_range_list\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 171,
    "solution": "def perimeter_pentagon(a: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its side.\n\n    :param a: Length of one side of the pentagon\n    :return: Perimeter of the pentagon\n    \"\"\"\n    # A regular pentagon has 5 equal sides\n    return 5 * a",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n### Signature\ndef perimeter_pentagon(a):",
    "timestamp": "2025-08-14T07:58:06.873046",
    "response_time": "1.32",
    "context": "{\"function_name\": \"perimeter_pentagon\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 172,
    "solution": "def count_occurance(s: str) -> int:\n    return s.count('std')",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\n### Signature\ndef count_occurance(s):",
    "timestamp": "2025-08-14T07:58:08.033396",
    "response_time": "1.16",
    "context": "{\"function_name\": \"count_occurance\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 222,
    "solution": "def check_type(test_tuple):\n    \"\"\"\n    Function to check if all elements in a tuple have the same data type.\n    \n    Parameters:\n    test_tuple (tuple): The tuple to check.\n    \n    Returns:\n    str: \"True\" if all elements have the same data type, otherwise \"False\".\n    \"\"\"\n    if not test_tuple:  # Handle empty tuple\n        return \"True\"\n    \n    # Get the type of the first element\n    first_type = type(test_tuple[0])\n    \n    # Check if all elements have the same type\n    for element in test_tuple:\n        if type(element) != first_type:\n            return \"False\"\n    \n    return \"True\"",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function to check if all the elements in tuple have same data type or not.\n\n### Signature\ndef check_type(test_tuple):",
    "timestamp": "2025-08-14T07:58:09.542304",
    "response_time": "1.51",
    "context": "{\"function_name\": \"check_type\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 223,
    "solution": "from typing import List\n\ndef binary_search(arr: List[int], n: int, x: int) -> bool:\n    # A helper function to find the first occurrence of x in arr\n    def first_occurrence(arr: List[int], low: int, high: int, x: int) -> int:\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n\n    # Find the first occurrence of x\n    first_index = first_occurrence(arr, 0, n - 1, x)\n    \n    # If x is not present in the array\n    if first_index == -1:\n        return False\n    \n    # Check if the element at index first_index + n//2 is still x\n    if first_index + n // 2 < n and arr[first_index + n // 2] == x:\n        return True\n    \n    return False",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\n### Signature\ndef is_majority(arr, n, x):",
    "timestamp": "2025-08-14T07:58:11.622186",
    "response_time": "2.08",
    "context": "{\"function_name\": \"binary_search\"}"
  },
  {
    "dataset_name": "mbpp_sanitized_chatgpt4o",
    "dataset_row_id": 224,
    "solution": "def count_Set_Bits(n: int) -> int:\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n\n    Args:\n    n (int): The input number.\n\n    Returns:\n    int: The count of set bits in the binary representation of the number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1  # Increment count if the least significant bit is 1\n        n >>= 1  # Right shift the number to process the next bit\n    return count",
    "llm_name": "openai/gpt-4o-2024-11-20",
    "prompt": "### Prompt\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n### Signature\ndef count_Set_Bits(n):",
    "timestamp": "2025-08-14T07:58:12.903645",
    "response_time": "1.28",
    "context": "{\"function_name\": \"count_Set_Bits\"}"
  }
]